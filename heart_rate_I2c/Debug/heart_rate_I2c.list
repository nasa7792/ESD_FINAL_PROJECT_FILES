
heart_rate_I2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002350  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080024f0  080024f0  000034f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002570  08002570  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002570  08002570  00003570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002578  08002578  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002578  08002578  00003578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800257c  0800257c  0000357c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002580  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000068  080025e8  00004068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080025e8  000041e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004292  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001370  00000000  00000000  0000832a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000548  00000000  00000000  000096a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003bf  00000000  00000000  00009be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001579b  00000000  00000000  00009fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000659c  00000000  00000000  0001f742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085778  00000000  00000000  00025cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab456  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a28  00000000  00000000  000ab49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000acec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080024d8 	.word	0x080024d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080024d8 	.word	0x080024d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SysTick_Handler>:
	while((millis() - start) < time);

	}

void SysTick_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	mil++;
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <SysTick_Handler+0x20>)
 8000576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800057a:	1c50      	adds	r0, r2, #1
 800057c:	f143 0100 	adc.w	r1, r3, #0
 8000580:	4b03      	ldr	r3, [pc, #12]	@ (8000590 <SysTick_Handler+0x20>)
 8000582:	e9c3 0100 	strd	r0, r1, [r3]
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	20000088 	.word	0x20000088

08000594 <I2C_init_config>:
 *      Author: Asus
 */

#include <I2C_driver.h>

void I2C_init_config(){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000598:	4b35      	ldr	r3, [pc, #212]	@ (8000670 <I2C_init_config+0xdc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	4a34      	ldr	r2, [pc, #208]	@ (8000670 <I2C_init_config+0xdc>)
 800059e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005a2:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; //send clock for I2C1 and port B
 80005a4:	4b32      	ldr	r3, [pc, #200]	@ (8000670 <I2C_init_config+0xdc>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a8:	4a31      	ldr	r2, [pc, #196]	@ (8000670 <I2C_init_config+0xdc>)
 80005aa:	f043 0302 	orr.w	r3, r3, #2
 80005ae:	6313      	str	r3, [r2, #48]	@ 0x30

	//declare as alternate func
	MODIFY_FIELD(GPIOB->MODER,GPIO_MODER_MODER8,ESF_GPIO_MODER_ALT_FUNC);
 80005b0:	4b30      	ldr	r3, [pc, #192]	@ (8000674 <I2C_init_config+0xe0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80005b8:	4a2e      	ldr	r2, [pc, #184]	@ (8000674 <I2C_init_config+0xe0>)
 80005ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005be:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER,GPIO_MODER_MODER9,ESF_GPIO_MODER_ALT_FUNC);
 80005c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000674 <I2C_init_config+0xe0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80005c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000674 <I2C_init_config+0xe0>)
 80005ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005ce:	6013      	str	r3, [r2, #0]

	//PB8 scl PB9 sda
	MODIFY_FIELD(GPIOB->AFR[1], GPIO_AFRH_AFSEL8, 4);
 80005d0:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <I2C_init_config+0xe0>)
 80005d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d4:	f023 030f 	bic.w	r3, r3, #15
 80005d8:	4a26      	ldr	r2, [pc, #152]	@ (8000674 <I2C_init_config+0xe0>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6253      	str	r3, [r2, #36]	@ 0x24
	MODIFY_FIELD(GPIOB->AFR[1], GPIO_AFRH_AFSEL9, 4);
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <I2C_init_config+0xe0>)
 80005e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005e8:	4a22      	ldr	r2, [pc, #136]	@ (8000674 <I2C_init_config+0xe0>)
 80005ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ee:	6253      	str	r3, [r2, #36]	@ 0x24

	//configure as outout open drain
	MODIFY_FIELD(GPIOB->OTYPER,GPIO_OTYPER_OT8,1);
 80005f0:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <I2C_init_config+0xe0>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000674 <I2C_init_config+0xe0>)
 80005f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005fa:	6053      	str	r3, [r2, #4]
	MODIFY_FIELD(GPIOB->OTYPER,GPIO_OTYPER_OT9,1);
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <I2C_init_config+0xe0>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	4a1c      	ldr	r2, [pc, #112]	@ (8000674 <I2C_init_config+0xe0>)
 8000602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000606:	6053      	str	r3, [r2, #4]

	//set speed
	GPIOB->OSPEEDR|=(3<<16)|(3<<18);
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <I2C_init_config+0xe0>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <I2C_init_config+0xe0>)
 800060e:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000612:	6093      	str	r3, [r2, #8]

	//select pull up
	GPIOB->PUPDR|=(1<<16)|(1<<18);
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <I2C_init_config+0xe0>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <I2C_init_config+0xe0>)
 800061a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800061e:	60d3      	str	r3, [r2, #12]

	//i2c setup begins
	//first reset i2c
	I2C1->CR1 = I2C_CR1_SWRST;
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <I2C_init_config+0xe4>)
 8000622:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000626:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000628:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <I2C_init_config+0xe4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <I2C_init_config+0xe4>)
 800062e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000632:	6013      	str	r3, [r2, #0]

	//setup peripherla clock freq
	I2C1->CR2 |= 0x18<<0;// its 24 mhz hex of 24 ! see ioc file
 8000634:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <I2C_init_config+0xe4>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <I2C_init_config+0xe4>)
 800063a:	f043 0318 	orr.w	r3, r3, #24
 800063e:	6053      	str	r3, [r2, #4]

	//i2c ccrr value see thigh calc its 120 in decimal 1000+4000/(1/pckl which is 24))
	I2C1->CCR|=0x78<<0;
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <I2C_init_config+0xe4>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <I2C_init_config+0xe4>)
 8000646:	f043 0378 	orr.w	r3, r3, #120	@ 0x78
 800064a:	61d3      	str	r3, [r2, #28]

	//set trise
	I2C1->TRISE|=0x19; //1000/(1pcll)+1
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <I2C_init_config+0xe4>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	4a09      	ldr	r2, [pc, #36]	@ (8000678 <I2C_init_config+0xe4>)
 8000652:	f043 0319 	orr.w	r3, r3, #25
 8000656:	6213      	str	r3, [r2, #32]

	//enable i2c peripheral
	I2C1->CR1 |= I2C_CR1_PE;
 8000658:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <I2C_init_config+0xe4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a06      	ldr	r2, [pc, #24]	@ (8000678 <I2C_init_config+0xe4>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	6013      	str	r3, [r2, #0]

}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40020400 	.word	0x40020400
 8000678:	40005400 	.word	0x40005400

0800067c <I2C_START_COMS>:

void I2C_START_COMS(){
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	//start bit
	I2C1->CR1|=I2C_CR1_ACK; //enable ACK
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <I2C_START_COMS+0x38>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0b      	ldr	r2, [pc, #44]	@ (80006b4 <I2C_START_COMS+0x38>)
 8000686:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800068a:	6013      	str	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_START;
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <I2C_START_COMS+0x38>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <I2C_START_COMS+0x38>)
 8000692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000696:	6013      	str	r3, [r2, #0]
	while (I2C1->CR2 & I2C_SR1_SB){}// wait for start condition to generate
 8000698:	bf00      	nop
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <I2C_START_COMS+0x38>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f9      	bne.n	800069a <I2C_START_COMS+0x1e>
}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40005400 	.word	0x40005400

080006b8 <I2C_WRITE_DATA>:

void I2C_WRITE_DATA(uint8_t data){
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 &I2C_SR1_TXE));  // wait for TXE bit to set
 80006c2:	bf00      	nop
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <I2C_WRITE_DATA+0x3c>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d0f9      	beq.n	80006c4 <I2C_WRITE_DATA+0xc>
	I2C1->DR = data;
 80006d0:	4a08      	ldr	r2, [pc, #32]	@ (80006f4 <I2C_WRITE_DATA+0x3c>)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 &I2C_SR1_BTF)); //wait for byte trans
 80006d6:	bf00      	nop
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <I2C_WRITE_DATA+0x3c>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0f9      	beq.n	80006d8 <I2C_WRITE_DATA+0x20>
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40005400 	.word	0x40005400

080006f8 <I2C_SEND_ADDRESS>:

void I2C_SEND_ADDRESS(uint8_t address){
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 &I2C_SR1_TXE));  // wait for TXE bit to set
 8000702:	bf00      	nop
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <I2C_SEND_ADDRESS+0x48>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0f9      	beq.n	8000704 <I2C_SEND_ADDRESS+0xc>
	I2C1->DR = address;
 8000710:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <I2C_SEND_ADDRESS+0x48>)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 &I2C_SR1_ADDR)); //wait for address bit to be set
 8000716:	bf00      	nop
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <I2C_SEND_ADDRESS+0x48>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f003 0302 	and.w	r3, r3, #2
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f9      	beq.n	8000718 <I2C_SEND_ADDRESS+0x20>
	//This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
	uint8_t temp_clear=I2C1->SR1 | I2C1->SR2;
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <I2C_SEND_ADDRESS+0x48>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <I2C_SEND_ADDRESS+0x48>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	73fb      	strb	r3, [r7, #15]

}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	40005400 	.word	0x40005400

08000744 <I2C_STOP_COMS>:

void I2C_STOP_COMS(){
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	I2C1->CR1|=I2C_CR1_STOP; //stop condition
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <I2C_STOP_COMS+0x1c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a04      	ldr	r2, [pc, #16]	@ (8000760 <I2C_STOP_COMS+0x1c>)
 800074e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40005400 	.word	0x40005400

08000764 <main>:
#include"NRF_DRIVER.h"
#include"max_heart_sensor_driver.h"

void SystemClock_Config(void);
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

SystemClock_Config();
 8000768:	f000 f814 	bl	8000794 <SystemClock_Config>
usart_init();
 800076c:	f000 f984 	bl	8000a78 <usart_init>
MAX30102_init();
 8000770:	f000 f880 	bl	8000874 <MAX30102_init>

printf(" this is a test to eeprom write \n \r");
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <main+0x28>)
 8000776:	f001 f841 	bl	80017fc <iprintf>
MAX30102_WRITE_REGISTER(0,5);
 800077a:	2105      	movs	r1, #5
 800077c:	2000      	movs	r0, #0
 800077e:	f000 f87f 	bl	8000880 <MAX30102_WRITE_REGISTER>
printf(" what happened ? \n \r");
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <main+0x2c>)
 8000784:	f001 f83a 	bl	80017fc <iprintf>
uint8_t recv_buff;
printf("trying to fetch from max \n \r");
MAX30102_READ_REGISTER(0XFF,&recv_buff,1);
printf("\n \r something happened! part is %x \n \r",recv_buff);
*/
while(1){
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <main+0x24>
 800078c:	080024f0 	.word	0x080024f0
 8000790:	08002514 	.word	0x08002514

08000794 <SystemClock_Config>:
}
}
*/
}
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	@ 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	@ 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f87f 	bl	80018a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <SystemClock_Config+0xcc>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a27      	ldr	r2, [pc, #156]	@ (8000860 <SystemClock_Config+0xcc>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <SystemClock_Config+0xcc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <SystemClock_Config+0xd0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a21      	ldr	r2, [pc, #132]	@ (8000864 <SystemClock_Config+0xd0>)
 80007de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <SystemClock_Config+0xd0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	2310      	movs	r3, #16
 80007fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000804:	2308      	movs	r3, #8
 8000806:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000808:	23c0      	movs	r3, #192	@ 0xc0
 800080a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800080c:	2304      	movs	r3, #4
 800080e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000810:	2308      	movs	r3, #8
 8000812:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fac9 	bl	8000db0 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000824:	f000 f820 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000834:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2103      	movs	r1, #3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fd2a 	bl	80012a0 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000852:	f000 f809 	bl	8000868 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	@ 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <MAX30102_init>:



#include "max_heart_sensor_driver.h"

void MAX30102_init(){
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	I2C_init_config(); //initalize i2c
 8000878:	f7ff fe8c 	bl	8000594 <I2C_init_config>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <MAX30102_WRITE_REGISTER>:

void MAX30102_WRITE_REGISTER(uint8_t register_Address, uint8_t data){
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
	I2C_START_COMS();
 8000890:	f7ff fef4 	bl	800067c <I2C_START_COMS>
	uint8_t write_masked_address=0xA0;
 8000894:	23a0      	movs	r3, #160	@ 0xa0
 8000896:	73fb      	strb	r3, [r7, #15]
	I2C_SEND_ADDRESS(write_masked_address); //same as AE
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff2c 	bl	80006f8 <I2C_SEND_ADDRESS>
	I2C_WRITE_DATA(register_Address);
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff08 	bl	80006b8 <I2C_WRITE_DATA>
	I2C_WRITE_DATA(data);
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff04 	bl	80006b8 <I2C_WRITE_DATA>
	I2C_STOP_COMS();
 80008b0:	f7ff ff48 	bl	8000744 <I2C_STOP_COMS>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	e00a      	b.n	8000936 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000920:	f000 f922 	bl	8000b68 <__io_getchar>
 8000924:	4601      	mov	r1, r0
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	60ba      	str	r2, [r7, #8]
 800092c:	b2ca      	uxtb	r2, r1
 800092e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	429a      	cmp	r2, r3
 800093c:	dbf0      	blt.n	8000920 <_read+0x12>
  }

  return len;
 800093e:	687b      	ldr	r3, [r7, #4]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e009      	b.n	800096e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	60ba      	str	r2, [r7, #8]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f8f2 	bl	8000b4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	429a      	cmp	r2, r3
 8000974:	dbf1      	blt.n	800095a <_write+0x12>
  }
  return len;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <_close>:

int _close(int file)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a8:	605a      	str	r2, [r3, #4]
  return 0;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_isatty>:

int _isatty(int file)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c0:	2301      	movs	r3, #1
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f000 ff94 	bl	8001944 <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20020000 	.word	0x20020000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	20000090 	.word	0x20000090
 8000a50:	200001e8 	.word	0x200001e8

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <usart_init>:
 *  usart get and put and usart init
 */

#include "usart.h"

void usart_init() {
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <usart_init+0x70>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a19      	ldr	r2, [pc, #100]	@ (8000ae8 <usart_init+0x70>)
 8000a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <usart_init+0x70>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	4a16      	ldr	r2, [pc, #88]	@ (8000ae8 <usart_init+0x70>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 and PA3 as alternate function
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER2_Pos);
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <usart_init+0x74>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a14      	ldr	r2, [pc, #80]	@ (8000aec <usart_init+0x74>)
 8000a9a:	f043 0320 	orr.w	r3, r3, #32
 8000a9e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER3_Pos);
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <usart_init+0x74>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a11      	ldr	r2, [pc, #68]	@ (8000aec <usart_init+0x74>)
 8000aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aaa:	6013      	str	r3, [r2, #0]

    // Set PA2 to USART_TX and PA3 to USART_RX
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos); // TX alternate function
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <usart_init+0x74>)
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8000aec <usart_init+0x74>)
 8000ab2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000ab6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL3_Pos); // RX alternate function
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <usart_init+0x74>)
 8000aba:	6a1b      	ldr	r3, [r3, #32]
 8000abc:	4a0b      	ldr	r2, [pc, #44]	@ (8000aec <usart_init+0x74>)
 8000abe:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000ac2:	6213      	str	r3, [r2, #32]

    // Enable USART, transmitter, and receiver
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <usart_init+0x78>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	@ (8000af0 <usart_init+0x78>)
 8000aca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ace:	f043 030c 	orr.w	r3, r3, #12
 8000ad2:	60d3      	str	r3, [r2, #12]

    // Set baud rate to 9600 (make sure BAUD_9600 is defined based on your clock setup)
    USART2->BRR = BAUD_9600;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <usart_init+0x78>)
 8000ad6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000ada:	609a      	str	r2, [r3, #8]

    // Test character output to verify USART setup
   // USART2->DR = 'B';
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40004400 	.word	0x40004400

08000af4 <usart_out>:

void usart_out(char ch) {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)) {
 8000afe:	bf00      	nop
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <usart_out+0x2c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f9      	beq.n	8000b00 <usart_out+0xc>
        // Wait until transmit buffer is empty
    }
    USART2->DR = ch;
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <usart_out+0x2c>)
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	6053      	str	r3, [r2, #4]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40004400 	.word	0x40004400

08000b24 <usart_get>:
    while (*string) {
        usart_out(*string++);
    }
}

char usart_get() {
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE)) {
 8000b28:	bf00      	nop
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <usart_get+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0320 	and.w	r3, r3, #32
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f9      	beq.n	8000b2a <usart_get+0x6>
        // Wait until receive buffer is not empty
    }
    return USART2->DR;
 8000b36:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <usart_get+0x24>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	b2db      	uxtb	r3, r3
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40004400 	.word	0x40004400

08000b4c <__io_putchar>:

// Override weak symbols for printf and getchar compatibility
int __io_putchar(int ch) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    usart_out((char)ch); // Send character using USART
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ffcb 	bl	8000af4 <usart_out>
    return ch;           // Return the character for compatibility
 8000b5e:	687b      	ldr	r3, [r7, #4]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <__io_getchar>:

int __io_getchar(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    return usart_get();  // Receive character using USART
 8000b6c:	f7ff ffda 	bl	8000b24 <usart_get>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7c:	f7ff ff6a 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f000 fed3 	bl	8001950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fddb 	bl	8000764 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bbc:	08002580 	.word	0x08002580
  ldr r2, =_sbss
 8000bc0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bc4:	200001e4 	.word	0x200001e4

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f8d4 	bl	8000d98 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f8aa 	bl	8000d60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000094 	.word	0x20000094

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	@ (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	@ (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	@ 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	@ 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f7ff ff8e 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d72:	f7ff ff67 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000d76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	6978      	ldr	r0, [r7, #20]
 8000d7e:	f7ff ff99 	bl	8000cb4 <NVIC_EncodePriority>
 8000d82:	4602      	mov	r2, r0
 8000d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff68 	bl	8000c60 <__NVIC_SetPriority>
}
 8000d90:	bf00      	nop
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ffbb 	bl	8000d1c <SysTick_Config>
 8000da6:	4603      	mov	r3, r0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e267      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d075      	beq.n	8000eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000dce:	4b88      	ldr	r3, [pc, #544]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d00c      	beq.n	8000df4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dda:	4b85      	ldr	r3, [pc, #532]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d112      	bne.n	8000e0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000de6:	4b82      	ldr	r3, [pc, #520]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000df2:	d10b      	bne.n	8000e0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	4b7e      	ldr	r3, [pc, #504]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d05b      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x108>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d157      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e242      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e14:	d106      	bne.n	8000e24 <HAL_RCC_OscConfig+0x74>
 8000e16:	4b76      	ldr	r3, [pc, #472]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a75      	ldr	r2, [pc, #468]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e01d      	b.n	8000e60 <HAL_RCC_OscConfig+0xb0>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0x98>
 8000e2e:	4b70      	ldr	r3, [pc, #448]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a6f      	ldr	r2, [pc, #444]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e00b      	b.n	8000e60 <HAL_RCC_OscConfig+0xb0>
 8000e48:	4b69      	ldr	r3, [pc, #420]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a68      	ldr	r2, [pc, #416]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b66      	ldr	r3, [pc, #408]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a65      	ldr	r2, [pc, #404]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d013      	beq.n	8000e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fee0 	bl	8000c2c <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e70:	f7ff fedc 	bl	8000c2c <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b64      	cmp	r3, #100	@ 0x64
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e207      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e82:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f0      	beq.n	8000e70 <HAL_RCC_OscConfig+0xc0>
 8000e8e:	e014      	b.n	8000eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fecc 	bl	8000c2c <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fec8 	bl	8000c2c <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	@ 0x64
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e1f3      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	4b51      	ldr	r3, [pc, #324]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0xe8>
 8000eb6:	e000      	b.n	8000eba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d063      	beq.n	8000f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ed2:	4b47      	ldr	r3, [pc, #284]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d11c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ede:	4b44      	ldr	r3, [pc, #272]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d116      	bne.n	8000f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eea:	4b41      	ldr	r3, [pc, #260]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <HAL_RCC_OscConfig+0x152>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d001      	beq.n	8000f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e1c7      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f02:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4937      	ldr	r1, [pc, #220]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	e03a      	b.n	8000f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d020      	beq.n	8000f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f20:	4b34      	ldr	r3, [pc, #208]	@ (8000ff4 <HAL_RCC_OscConfig+0x244>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f26:	f7ff fe81 	bl	8000c2c <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f2e:	f7ff fe7d 	bl	8000c2c <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e1a8      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4925      	ldr	r1, [pc, #148]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
 8000f60:	e015      	b.n	8000f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f62:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <HAL_RCC_OscConfig+0x244>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fe60 	bl	8000c2c <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff fe5c 	bl	8000c2c <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e187      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d036      	beq.n	8001008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d016      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_RCC_OscConfig+0x248>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fe40 	bl	8000c2c <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fe3c 	bl	8000c2c <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e167      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x200>
 8000fce:	e01b      	b.n	8001008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_RCC_OscConfig+0x248>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fe29 	bl	8000c2c <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fdc:	e00e      	b.n	8000ffc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fde:	f7ff fe25 	bl	8000c2c <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d907      	bls.n	8000ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e150      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	42470000 	.word	0x42470000
 8000ff8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffc:	4b88      	ldr	r3, [pc, #544]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8000ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1ea      	bne.n	8000fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 8097 	beq.w	8001144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101a:	4b81      	ldr	r3, [pc, #516]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10f      	bne.n	8001046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b7d      	ldr	r3, [pc, #500]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a7c      	ldr	r2, [pc, #496]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b7a      	ldr	r3, [pc, #488]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001042:	2301      	movs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001046:	4b77      	ldr	r3, [pc, #476]	@ (8001224 <HAL_RCC_OscConfig+0x474>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800104e:	2b00      	cmp	r3, #0
 8001050:	d118      	bne.n	8001084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001052:	4b74      	ldr	r3, [pc, #464]	@ (8001224 <HAL_RCC_OscConfig+0x474>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a73      	ldr	r2, [pc, #460]	@ (8001224 <HAL_RCC_OscConfig+0x474>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800105e:	f7ff fde5 	bl	8000c2c <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001066:	f7ff fde1 	bl	8000c2c <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e10c      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	4b6a      	ldr	r3, [pc, #424]	@ (8001224 <HAL_RCC_OscConfig+0x474>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f0      	beq.n	8001066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d106      	bne.n	800109a <HAL_RCC_OscConfig+0x2ea>
 800108c:	4b64      	ldr	r3, [pc, #400]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 800108e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001090:	4a63      	ldr	r2, [pc, #396]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6713      	str	r3, [r2, #112]	@ 0x70
 8001098:	e01c      	b.n	80010d4 <HAL_RCC_OscConfig+0x324>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d10c      	bne.n	80010bc <HAL_RCC_OscConfig+0x30c>
 80010a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80010ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80010ba:	e00b      	b.n	80010d4 <HAL_RCC_OscConfig+0x324>
 80010bc:	4b58      	ldr	r3, [pc, #352]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010c0:	4a57      	ldr	r2, [pc, #348]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80010c8:	4b55      	ldr	r3, [pc, #340]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010cc:	4a54      	ldr	r2, [pc, #336]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010ce:	f023 0304 	bic.w	r3, r3, #4
 80010d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d015      	beq.n	8001108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fda6 	bl	8000c2c <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e2:	e00a      	b.n	80010fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e4:	f7ff fda2 	bl	8000c2c <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e0cb      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fa:	4b49      	ldr	r3, [pc, #292]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0ee      	beq.n	80010e4 <HAL_RCC_OscConfig+0x334>
 8001106:	e014      	b.n	8001132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001108:	f7ff fd90 	bl	8000c2c <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110e:	e00a      	b.n	8001126 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001110:	f7ff fd8c 	bl	8000c2c <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800111e:	4293      	cmp	r3, r2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e0b5      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001126:	4b3e      	ldr	r3, [pc, #248]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1ee      	bne.n	8001110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d105      	bne.n	8001144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001138:	4b39      	ldr	r3, [pc, #228]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	4a38      	ldr	r2, [pc, #224]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 800113e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80a1 	beq.w	8001290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800114e:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b08      	cmp	r3, #8
 8001158:	d05c      	beq.n	8001214 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d141      	bne.n	80011e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001162:	4b31      	ldr	r3, [pc, #196]	@ (8001228 <HAL_RCC_OscConfig+0x478>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fd60 	bl	8000c2c <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001170:	f7ff fd5c 	bl	8000c2c <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e087      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69da      	ldr	r2, [r3, #28]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	019b      	lsls	r3, r3, #6
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a4:	085b      	lsrs	r3, r3, #1
 80011a6:	3b01      	subs	r3, #1
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	061b      	lsls	r3, r3, #24
 80011b2:	491b      	ldr	r1, [pc, #108]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <HAL_RCC_OscConfig+0x478>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fd35 	bl	8000c2c <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fd31 	bl	8000c2c <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e05c      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x416>
 80011e4:	e054      	b.n	8001290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <HAL_RCC_OscConfig+0x478>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fd1e 	bl	8000c2c <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f4:	f7ff fd1a 	bl	8000c2c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e045      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x444>
 8001212:	e03d      	b.n	8001290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e038      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
 8001220:	40023800 	.word	0x40023800
 8001224:	40007000 	.word	0x40007000
 8001228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_RCC_OscConfig+0x4ec>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d028      	beq.n	800128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001244:	429a      	cmp	r2, r3
 8001246:	d121      	bne.n	800128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001252:	429a      	cmp	r2, r3
 8001254:	d11a      	bne.n	800128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800125c:	4013      	ands	r3, r2
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001264:	4293      	cmp	r3, r2
 8001266:	d111      	bne.n	800128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	3b01      	subs	r3, #1
 8001276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001278:	429a      	cmp	r2, r3
 800127a:	d107      	bne.n	800128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0cc      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012b4:	4b68      	ldr	r3, [pc, #416]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d90c      	bls.n	80012dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	4b65      	ldr	r3, [pc, #404]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b63      	ldr	r3, [pc, #396]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0b8      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f4:	4b59      	ldr	r3, [pc, #356]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	4a58      	ldr	r2, [pc, #352]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800130c:	4b53      	ldr	r3, [pc, #332]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4a52      	ldr	r2, [pc, #328]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4b50      	ldr	r3, [pc, #320]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	494d      	ldr	r1, [pc, #308]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001326:	4313      	orrs	r3, r2
 8001328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d044      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b47      	ldr	r3, [pc, #284]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d119      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e07f      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d003      	beq.n	800135e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800135a:	2b03      	cmp	r3, #3
 800135c:	d107      	bne.n	800136e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135e:	4b3f      	ldr	r3, [pc, #252]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e06f      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136e:	4b3b      	ldr	r3, [pc, #236]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e067      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800137e:	4b37      	ldr	r3, [pc, #220]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f023 0203 	bic.w	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4934      	ldr	r1, [pc, #208]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800138c:	4313      	orrs	r3, r2
 800138e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001390:	f7ff fc4c 	bl	8000c2c <HAL_GetTick>
 8001394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001396:	e00a      	b.n	80013ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001398:	f7ff fc48 	bl	8000c2c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e04f      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ae:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 020c 	and.w	r2, r3, #12
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	429a      	cmp	r2, r3
 80013be:	d1eb      	bne.n	8001398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013c0:	4b25      	ldr	r3, [pc, #148]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d20c      	bcs.n	80013e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e032      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4916      	ldr	r1, [pc, #88]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	490e      	ldr	r1, [pc, #56]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	4313      	orrs	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001426:	f000 f821 	bl	800146c <HAL_RCC_GetSysClockFreq>
 800142a:	4602      	mov	r2, r0
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	490a      	ldr	r1, [pc, #40]	@ (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	5ccb      	ldrb	r3, [r1, r3]
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <HAL_RCC_ClockConfig+0x1c8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fbc0 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00
 800145c:	40023800 	.word	0x40023800
 8001460:	0800252c 	.word	0x0800252c
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001470:	b094      	sub	sp, #80	@ 0x50
 8001472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001484:	4b79      	ldr	r3, [pc, #484]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b08      	cmp	r3, #8
 800148e:	d00d      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x40>
 8001490:	2b08      	cmp	r3, #8
 8001492:	f200 80e1 	bhi.w	8001658 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0x34>
 800149a:	2b04      	cmp	r3, #4
 800149c:	d003      	beq.n	80014a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800149e:	e0db      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014a0:	4b73      	ldr	r3, [pc, #460]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x204>)
 80014a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80014a4:	e0db      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014a6:	4b73      	ldr	r3, [pc, #460]	@ (8001674 <HAL_RCC_GetSysClockFreq+0x208>)
 80014a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80014aa:	e0d8      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ac:	4b6f      	ldr	r3, [pc, #444]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b6:	4b6d      	ldr	r3, [pc, #436]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d063      	beq.n	800158a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c2:	4b6a      	ldr	r3, [pc, #424]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	099b      	lsrs	r3, r3, #6
 80014c8:	2200      	movs	r2, #0
 80014ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80014ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80014da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014de:	4622      	mov	r2, r4
 80014e0:	462b      	mov	r3, r5
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	0159      	lsls	r1, r3, #5
 80014ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f0:	0150      	lsls	r0, r2, #5
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4621      	mov	r1, r4
 80014f8:	1a51      	subs	r1, r2, r1
 80014fa:	6139      	str	r1, [r7, #16]
 80014fc:	4629      	mov	r1, r5
 80014fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001510:	4659      	mov	r1, fp
 8001512:	018b      	lsls	r3, r1, #6
 8001514:	4651      	mov	r1, sl
 8001516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800151a:	4651      	mov	r1, sl
 800151c:	018a      	lsls	r2, r1, #6
 800151e:	4651      	mov	r1, sl
 8001520:	ebb2 0801 	subs.w	r8, r2, r1
 8001524:	4659      	mov	r1, fp
 8001526:	eb63 0901 	sbc.w	r9, r3, r1
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800153a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800153e:	4690      	mov	r8, r2
 8001540:	4699      	mov	r9, r3
 8001542:	4623      	mov	r3, r4
 8001544:	eb18 0303 	adds.w	r3, r8, r3
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	462b      	mov	r3, r5
 800154c:	eb49 0303 	adc.w	r3, r9, r3
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800155e:	4629      	mov	r1, r5
 8001560:	024b      	lsls	r3, r1, #9
 8001562:	4621      	mov	r1, r4
 8001564:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001568:	4621      	mov	r1, r4
 800156a:	024a      	lsls	r2, r1, #9
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001572:	2200      	movs	r2, #0
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001578:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800157c:	f7fe fe80 	bl	8000280 <__aeabi_uldivmod>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4613      	mov	r3, r2
 8001586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001588:	e058      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158a:	4b38      	ldr	r3, [pc, #224]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	099b      	lsrs	r3, r3, #6
 8001590:	2200      	movs	r2, #0
 8001592:	4618      	mov	r0, r3
 8001594:	4611      	mov	r1, r2
 8001596:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800159a:	623b      	str	r3, [r7, #32]
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015a4:	4642      	mov	r2, r8
 80015a6:	464b      	mov	r3, r9
 80015a8:	f04f 0000 	mov.w	r0, #0
 80015ac:	f04f 0100 	mov.w	r1, #0
 80015b0:	0159      	lsls	r1, r3, #5
 80015b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015b6:	0150      	lsls	r0, r2, #5
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4641      	mov	r1, r8
 80015be:	ebb2 0a01 	subs.w	sl, r2, r1
 80015c2:	4649      	mov	r1, r9
 80015c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80015d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80015d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80015dc:	ebb2 040a 	subs.w	r4, r2, sl
 80015e0:	eb63 050b 	sbc.w	r5, r3, fp
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	00eb      	lsls	r3, r5, #3
 80015ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015f2:	00e2      	lsls	r2, r4, #3
 80015f4:	4614      	mov	r4, r2
 80015f6:	461d      	mov	r5, r3
 80015f8:	4643      	mov	r3, r8
 80015fa:	18e3      	adds	r3, r4, r3
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	464b      	mov	r3, r9
 8001600:	eb45 0303 	adc.w	r3, r5, r3
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001612:	4629      	mov	r1, r5
 8001614:	028b      	lsls	r3, r1, #10
 8001616:	4621      	mov	r1, r4
 8001618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800161c:	4621      	mov	r1, r4
 800161e:	028a      	lsls	r2, r1, #10
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001626:	2200      	movs	r2, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	61fa      	str	r2, [r7, #28]
 800162c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001630:	f7fe fe26 	bl	8000280 <__aeabi_uldivmod>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4613      	mov	r3, r2
 800163a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	3301      	adds	r3, #1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800164c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800164e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001656:	e002      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x204>)
 800165a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800165c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800165e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001660:	4618      	mov	r0, r3
 8001662:	3750      	adds	r7, #80	@ 0x50
 8001664:	46bd      	mov	sp, r7
 8001666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	00f42400 	.word	0x00f42400
 8001674:	007a1200 	.word	0x007a1200

08001678 <std>:
 8001678:	2300      	movs	r3, #0
 800167a:	b510      	push	{r4, lr}
 800167c:	4604      	mov	r4, r0
 800167e:	e9c0 3300 	strd	r3, r3, [r0]
 8001682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001686:	6083      	str	r3, [r0, #8]
 8001688:	8181      	strh	r1, [r0, #12]
 800168a:	6643      	str	r3, [r0, #100]	@ 0x64
 800168c:	81c2      	strh	r2, [r0, #14]
 800168e:	6183      	str	r3, [r0, #24]
 8001690:	4619      	mov	r1, r3
 8001692:	2208      	movs	r2, #8
 8001694:	305c      	adds	r0, #92	@ 0x5c
 8001696:	f000 f906 	bl	80018a6 <memset>
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <std+0x58>)
 800169c:	6263      	str	r3, [r4, #36]	@ 0x24
 800169e:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <std+0x5c>)
 80016a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <std+0x60>)
 80016a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <std+0x64>)
 80016a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <std+0x68>)
 80016ac:	6224      	str	r4, [r4, #32]
 80016ae:	429c      	cmp	r4, r3
 80016b0:	d006      	beq.n	80016c0 <std+0x48>
 80016b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80016b6:	4294      	cmp	r4, r2
 80016b8:	d002      	beq.n	80016c0 <std+0x48>
 80016ba:	33d0      	adds	r3, #208	@ 0xd0
 80016bc:	429c      	cmp	r4, r3
 80016be:	d105      	bne.n	80016cc <std+0x54>
 80016c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80016c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016c8:	f000 b966 	b.w	8001998 <__retarget_lock_init_recursive>
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	bf00      	nop
 80016d0:	08001821 	.word	0x08001821
 80016d4:	08001843 	.word	0x08001843
 80016d8:	0800187b 	.word	0x0800187b
 80016dc:	0800189f 	.word	0x0800189f
 80016e0:	20000098 	.word	0x20000098

080016e4 <stdio_exit_handler>:
 80016e4:	4a02      	ldr	r2, [pc, #8]	@ (80016f0 <stdio_exit_handler+0xc>)
 80016e6:	4903      	ldr	r1, [pc, #12]	@ (80016f4 <stdio_exit_handler+0x10>)
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <stdio_exit_handler+0x14>)
 80016ea:	f000 b869 	b.w	80017c0 <_fwalk_sglue>
 80016ee:	bf00      	nop
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	08002239 	.word	0x08002239
 80016f8:	2000001c 	.word	0x2000001c

080016fc <cleanup_stdio>:
 80016fc:	6841      	ldr	r1, [r0, #4]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <cleanup_stdio+0x34>)
 8001700:	4299      	cmp	r1, r3
 8001702:	b510      	push	{r4, lr}
 8001704:	4604      	mov	r4, r0
 8001706:	d001      	beq.n	800170c <cleanup_stdio+0x10>
 8001708:	f000 fd96 	bl	8002238 <_fflush_r>
 800170c:	68a1      	ldr	r1, [r4, #8]
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <cleanup_stdio+0x38>)
 8001710:	4299      	cmp	r1, r3
 8001712:	d002      	beq.n	800171a <cleanup_stdio+0x1e>
 8001714:	4620      	mov	r0, r4
 8001716:	f000 fd8f 	bl	8002238 <_fflush_r>
 800171a:	68e1      	ldr	r1, [r4, #12]
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <cleanup_stdio+0x3c>)
 800171e:	4299      	cmp	r1, r3
 8001720:	d004      	beq.n	800172c <cleanup_stdio+0x30>
 8001722:	4620      	mov	r0, r4
 8001724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001728:	f000 bd86 	b.w	8002238 <_fflush_r>
 800172c:	bd10      	pop	{r4, pc}
 800172e:	bf00      	nop
 8001730:	20000098 	.word	0x20000098
 8001734:	20000100 	.word	0x20000100
 8001738:	20000168 	.word	0x20000168

0800173c <global_stdio_init.part.0>:
 800173c:	b510      	push	{r4, lr}
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <global_stdio_init.part.0+0x30>)
 8001740:	4c0b      	ldr	r4, [pc, #44]	@ (8001770 <global_stdio_init.part.0+0x34>)
 8001742:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <global_stdio_init.part.0+0x38>)
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	4620      	mov	r0, r4
 8001748:	2200      	movs	r2, #0
 800174a:	2104      	movs	r1, #4
 800174c:	f7ff ff94 	bl	8001678 <std>
 8001750:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001754:	2201      	movs	r2, #1
 8001756:	2109      	movs	r1, #9
 8001758:	f7ff ff8e 	bl	8001678 <std>
 800175c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001760:	2202      	movs	r2, #2
 8001762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001766:	2112      	movs	r1, #18
 8001768:	f7ff bf86 	b.w	8001678 <std>
 800176c:	200001d0 	.word	0x200001d0
 8001770:	20000098 	.word	0x20000098
 8001774:	080016e5 	.word	0x080016e5

08001778 <__sfp_lock_acquire>:
 8001778:	4801      	ldr	r0, [pc, #4]	@ (8001780 <__sfp_lock_acquire+0x8>)
 800177a:	f000 b90e 	b.w	800199a <__retarget_lock_acquire_recursive>
 800177e:	bf00      	nop
 8001780:	200001d9 	.word	0x200001d9

08001784 <__sfp_lock_release>:
 8001784:	4801      	ldr	r0, [pc, #4]	@ (800178c <__sfp_lock_release+0x8>)
 8001786:	f000 b909 	b.w	800199c <__retarget_lock_release_recursive>
 800178a:	bf00      	nop
 800178c:	200001d9 	.word	0x200001d9

08001790 <__sinit>:
 8001790:	b510      	push	{r4, lr}
 8001792:	4604      	mov	r4, r0
 8001794:	f7ff fff0 	bl	8001778 <__sfp_lock_acquire>
 8001798:	6a23      	ldr	r3, [r4, #32]
 800179a:	b11b      	cbz	r3, 80017a4 <__sinit+0x14>
 800179c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017a0:	f7ff bff0 	b.w	8001784 <__sfp_lock_release>
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <__sinit+0x28>)
 80017a6:	6223      	str	r3, [r4, #32]
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <__sinit+0x2c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f5      	bne.n	800179c <__sinit+0xc>
 80017b0:	f7ff ffc4 	bl	800173c <global_stdio_init.part.0>
 80017b4:	e7f2      	b.n	800179c <__sinit+0xc>
 80017b6:	bf00      	nop
 80017b8:	080016fd 	.word	0x080016fd
 80017bc:	200001d0 	.word	0x200001d0

080017c0 <_fwalk_sglue>:
 80017c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017c4:	4607      	mov	r7, r0
 80017c6:	4688      	mov	r8, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	2600      	movs	r6, #0
 80017cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017d0:	f1b9 0901 	subs.w	r9, r9, #1
 80017d4:	d505      	bpl.n	80017e2 <_fwalk_sglue+0x22>
 80017d6:	6824      	ldr	r4, [r4, #0]
 80017d8:	2c00      	cmp	r4, #0
 80017da:	d1f7      	bne.n	80017cc <_fwalk_sglue+0xc>
 80017dc:	4630      	mov	r0, r6
 80017de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017e2:	89ab      	ldrh	r3, [r5, #12]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d907      	bls.n	80017f8 <_fwalk_sglue+0x38>
 80017e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017ec:	3301      	adds	r3, #1
 80017ee:	d003      	beq.n	80017f8 <_fwalk_sglue+0x38>
 80017f0:	4629      	mov	r1, r5
 80017f2:	4638      	mov	r0, r7
 80017f4:	47c0      	blx	r8
 80017f6:	4306      	orrs	r6, r0
 80017f8:	3568      	adds	r5, #104	@ 0x68
 80017fa:	e7e9      	b.n	80017d0 <_fwalk_sglue+0x10>

080017fc <iprintf>:
 80017fc:	b40f      	push	{r0, r1, r2, r3}
 80017fe:	b507      	push	{r0, r1, r2, lr}
 8001800:	4906      	ldr	r1, [pc, #24]	@ (800181c <iprintf+0x20>)
 8001802:	ab04      	add	r3, sp, #16
 8001804:	6808      	ldr	r0, [r1, #0]
 8001806:	f853 2b04 	ldr.w	r2, [r3], #4
 800180a:	6881      	ldr	r1, [r0, #8]
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	f000 f9e9 	bl	8001be4 <_vfiprintf_r>
 8001812:	b003      	add	sp, #12
 8001814:	f85d eb04 	ldr.w	lr, [sp], #4
 8001818:	b004      	add	sp, #16
 800181a:	4770      	bx	lr
 800181c:	20000018 	.word	0x20000018

08001820 <__sread>:
 8001820:	b510      	push	{r4, lr}
 8001822:	460c      	mov	r4, r1
 8001824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001828:	f000 f868 	bl	80018fc <_read_r>
 800182c:	2800      	cmp	r0, #0
 800182e:	bfab      	itete	ge
 8001830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001832:	89a3      	ldrhlt	r3, [r4, #12]
 8001834:	181b      	addge	r3, r3, r0
 8001836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800183a:	bfac      	ite	ge
 800183c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800183e:	81a3      	strhlt	r3, [r4, #12]
 8001840:	bd10      	pop	{r4, pc}

08001842 <__swrite>:
 8001842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001846:	461f      	mov	r7, r3
 8001848:	898b      	ldrh	r3, [r1, #12]
 800184a:	05db      	lsls	r3, r3, #23
 800184c:	4605      	mov	r5, r0
 800184e:	460c      	mov	r4, r1
 8001850:	4616      	mov	r6, r2
 8001852:	d505      	bpl.n	8001860 <__swrite+0x1e>
 8001854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001858:	2302      	movs	r3, #2
 800185a:	2200      	movs	r2, #0
 800185c:	f000 f83c 	bl	80018d8 <_lseek_r>
 8001860:	89a3      	ldrh	r3, [r4, #12]
 8001862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800186a:	81a3      	strh	r3, [r4, #12]
 800186c:	4632      	mov	r2, r6
 800186e:	463b      	mov	r3, r7
 8001870:	4628      	mov	r0, r5
 8001872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001876:	f000 b853 	b.w	8001920 <_write_r>

0800187a <__sseek>:
 800187a:	b510      	push	{r4, lr}
 800187c:	460c      	mov	r4, r1
 800187e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001882:	f000 f829 	bl	80018d8 <_lseek_r>
 8001886:	1c43      	adds	r3, r0, #1
 8001888:	89a3      	ldrh	r3, [r4, #12]
 800188a:	bf15      	itete	ne
 800188c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800188e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001896:	81a3      	strheq	r3, [r4, #12]
 8001898:	bf18      	it	ne
 800189a:	81a3      	strhne	r3, [r4, #12]
 800189c:	bd10      	pop	{r4, pc}

0800189e <__sclose>:
 800189e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018a2:	f000 b809 	b.w	80018b8 <_close_r>

080018a6 <memset>:
 80018a6:	4402      	add	r2, r0
 80018a8:	4603      	mov	r3, r0
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d100      	bne.n	80018b0 <memset+0xa>
 80018ae:	4770      	bx	lr
 80018b0:	f803 1b01 	strb.w	r1, [r3], #1
 80018b4:	e7f9      	b.n	80018aa <memset+0x4>
	...

080018b8 <_close_r>:
 80018b8:	b538      	push	{r3, r4, r5, lr}
 80018ba:	4d06      	ldr	r5, [pc, #24]	@ (80018d4 <_close_r+0x1c>)
 80018bc:	2300      	movs	r3, #0
 80018be:	4604      	mov	r4, r0
 80018c0:	4608      	mov	r0, r1
 80018c2:	602b      	str	r3, [r5, #0]
 80018c4:	f7ff f85c 	bl	8000980 <_close>
 80018c8:	1c43      	adds	r3, r0, #1
 80018ca:	d102      	bne.n	80018d2 <_close_r+0x1a>
 80018cc:	682b      	ldr	r3, [r5, #0]
 80018ce:	b103      	cbz	r3, 80018d2 <_close_r+0x1a>
 80018d0:	6023      	str	r3, [r4, #0]
 80018d2:	bd38      	pop	{r3, r4, r5, pc}
 80018d4:	200001d4 	.word	0x200001d4

080018d8 <_lseek_r>:
 80018d8:	b538      	push	{r3, r4, r5, lr}
 80018da:	4d07      	ldr	r5, [pc, #28]	@ (80018f8 <_lseek_r+0x20>)
 80018dc:	4604      	mov	r4, r0
 80018de:	4608      	mov	r0, r1
 80018e0:	4611      	mov	r1, r2
 80018e2:	2200      	movs	r2, #0
 80018e4:	602a      	str	r2, [r5, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f7ff f871 	bl	80009ce <_lseek>
 80018ec:	1c43      	adds	r3, r0, #1
 80018ee:	d102      	bne.n	80018f6 <_lseek_r+0x1e>
 80018f0:	682b      	ldr	r3, [r5, #0]
 80018f2:	b103      	cbz	r3, 80018f6 <_lseek_r+0x1e>
 80018f4:	6023      	str	r3, [r4, #0]
 80018f6:	bd38      	pop	{r3, r4, r5, pc}
 80018f8:	200001d4 	.word	0x200001d4

080018fc <_read_r>:
 80018fc:	b538      	push	{r3, r4, r5, lr}
 80018fe:	4d07      	ldr	r5, [pc, #28]	@ (800191c <_read_r+0x20>)
 8001900:	4604      	mov	r4, r0
 8001902:	4608      	mov	r0, r1
 8001904:	4611      	mov	r1, r2
 8001906:	2200      	movs	r2, #0
 8001908:	602a      	str	r2, [r5, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	f7fe ffff 	bl	800090e <_read>
 8001910:	1c43      	adds	r3, r0, #1
 8001912:	d102      	bne.n	800191a <_read_r+0x1e>
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	b103      	cbz	r3, 800191a <_read_r+0x1e>
 8001918:	6023      	str	r3, [r4, #0]
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	200001d4 	.word	0x200001d4

08001920 <_write_r>:
 8001920:	b538      	push	{r3, r4, r5, lr}
 8001922:	4d07      	ldr	r5, [pc, #28]	@ (8001940 <_write_r+0x20>)
 8001924:	4604      	mov	r4, r0
 8001926:	4608      	mov	r0, r1
 8001928:	4611      	mov	r1, r2
 800192a:	2200      	movs	r2, #0
 800192c:	602a      	str	r2, [r5, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	f7ff f80a 	bl	8000948 <_write>
 8001934:	1c43      	adds	r3, r0, #1
 8001936:	d102      	bne.n	800193e <_write_r+0x1e>
 8001938:	682b      	ldr	r3, [r5, #0]
 800193a:	b103      	cbz	r3, 800193e <_write_r+0x1e>
 800193c:	6023      	str	r3, [r4, #0]
 800193e:	bd38      	pop	{r3, r4, r5, pc}
 8001940:	200001d4 	.word	0x200001d4

08001944 <__errno>:
 8001944:	4b01      	ldr	r3, [pc, #4]	@ (800194c <__errno+0x8>)
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000018 	.word	0x20000018

08001950 <__libc_init_array>:
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	4d0d      	ldr	r5, [pc, #52]	@ (8001988 <__libc_init_array+0x38>)
 8001954:	4c0d      	ldr	r4, [pc, #52]	@ (800198c <__libc_init_array+0x3c>)
 8001956:	1b64      	subs	r4, r4, r5
 8001958:	10a4      	asrs	r4, r4, #2
 800195a:	2600      	movs	r6, #0
 800195c:	42a6      	cmp	r6, r4
 800195e:	d109      	bne.n	8001974 <__libc_init_array+0x24>
 8001960:	4d0b      	ldr	r5, [pc, #44]	@ (8001990 <__libc_init_array+0x40>)
 8001962:	4c0c      	ldr	r4, [pc, #48]	@ (8001994 <__libc_init_array+0x44>)
 8001964:	f000 fdb8 	bl	80024d8 <_init>
 8001968:	1b64      	subs	r4, r4, r5
 800196a:	10a4      	asrs	r4, r4, #2
 800196c:	2600      	movs	r6, #0
 800196e:	42a6      	cmp	r6, r4
 8001970:	d105      	bne.n	800197e <__libc_init_array+0x2e>
 8001972:	bd70      	pop	{r4, r5, r6, pc}
 8001974:	f855 3b04 	ldr.w	r3, [r5], #4
 8001978:	4798      	blx	r3
 800197a:	3601      	adds	r6, #1
 800197c:	e7ee      	b.n	800195c <__libc_init_array+0xc>
 800197e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001982:	4798      	blx	r3
 8001984:	3601      	adds	r6, #1
 8001986:	e7f2      	b.n	800196e <__libc_init_array+0x1e>
 8001988:	08002578 	.word	0x08002578
 800198c:	08002578 	.word	0x08002578
 8001990:	08002578 	.word	0x08002578
 8001994:	0800257c 	.word	0x0800257c

08001998 <__retarget_lock_init_recursive>:
 8001998:	4770      	bx	lr

0800199a <__retarget_lock_acquire_recursive>:
 800199a:	4770      	bx	lr

0800199c <__retarget_lock_release_recursive>:
 800199c:	4770      	bx	lr
	...

080019a0 <_free_r>:
 80019a0:	b538      	push	{r3, r4, r5, lr}
 80019a2:	4605      	mov	r5, r0
 80019a4:	2900      	cmp	r1, #0
 80019a6:	d041      	beq.n	8001a2c <_free_r+0x8c>
 80019a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019ac:	1f0c      	subs	r4, r1, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	bfb8      	it	lt
 80019b2:	18e4      	addlt	r4, r4, r3
 80019b4:	f000 f8e0 	bl	8001b78 <__malloc_lock>
 80019b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a30 <_free_r+0x90>)
 80019ba:	6813      	ldr	r3, [r2, #0]
 80019bc:	b933      	cbnz	r3, 80019cc <_free_r+0x2c>
 80019be:	6063      	str	r3, [r4, #4]
 80019c0:	6014      	str	r4, [r2, #0]
 80019c2:	4628      	mov	r0, r5
 80019c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019c8:	f000 b8dc 	b.w	8001b84 <__malloc_unlock>
 80019cc:	42a3      	cmp	r3, r4
 80019ce:	d908      	bls.n	80019e2 <_free_r+0x42>
 80019d0:	6820      	ldr	r0, [r4, #0]
 80019d2:	1821      	adds	r1, r4, r0
 80019d4:	428b      	cmp	r3, r1
 80019d6:	bf01      	itttt	eq
 80019d8:	6819      	ldreq	r1, [r3, #0]
 80019da:	685b      	ldreq	r3, [r3, #4]
 80019dc:	1809      	addeq	r1, r1, r0
 80019de:	6021      	streq	r1, [r4, #0]
 80019e0:	e7ed      	b.n	80019be <_free_r+0x1e>
 80019e2:	461a      	mov	r2, r3
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	b10b      	cbz	r3, 80019ec <_free_r+0x4c>
 80019e8:	42a3      	cmp	r3, r4
 80019ea:	d9fa      	bls.n	80019e2 <_free_r+0x42>
 80019ec:	6811      	ldr	r1, [r2, #0]
 80019ee:	1850      	adds	r0, r2, r1
 80019f0:	42a0      	cmp	r0, r4
 80019f2:	d10b      	bne.n	8001a0c <_free_r+0x6c>
 80019f4:	6820      	ldr	r0, [r4, #0]
 80019f6:	4401      	add	r1, r0
 80019f8:	1850      	adds	r0, r2, r1
 80019fa:	4283      	cmp	r3, r0
 80019fc:	6011      	str	r1, [r2, #0]
 80019fe:	d1e0      	bne.n	80019c2 <_free_r+0x22>
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	6053      	str	r3, [r2, #4]
 8001a06:	4408      	add	r0, r1
 8001a08:	6010      	str	r0, [r2, #0]
 8001a0a:	e7da      	b.n	80019c2 <_free_r+0x22>
 8001a0c:	d902      	bls.n	8001a14 <_free_r+0x74>
 8001a0e:	230c      	movs	r3, #12
 8001a10:	602b      	str	r3, [r5, #0]
 8001a12:	e7d6      	b.n	80019c2 <_free_r+0x22>
 8001a14:	6820      	ldr	r0, [r4, #0]
 8001a16:	1821      	adds	r1, r4, r0
 8001a18:	428b      	cmp	r3, r1
 8001a1a:	bf04      	itt	eq
 8001a1c:	6819      	ldreq	r1, [r3, #0]
 8001a1e:	685b      	ldreq	r3, [r3, #4]
 8001a20:	6063      	str	r3, [r4, #4]
 8001a22:	bf04      	itt	eq
 8001a24:	1809      	addeq	r1, r1, r0
 8001a26:	6021      	streq	r1, [r4, #0]
 8001a28:	6054      	str	r4, [r2, #4]
 8001a2a:	e7ca      	b.n	80019c2 <_free_r+0x22>
 8001a2c:	bd38      	pop	{r3, r4, r5, pc}
 8001a2e:	bf00      	nop
 8001a30:	200001e0 	.word	0x200001e0

08001a34 <sbrk_aligned>:
 8001a34:	b570      	push	{r4, r5, r6, lr}
 8001a36:	4e0f      	ldr	r6, [pc, #60]	@ (8001a74 <sbrk_aligned+0x40>)
 8001a38:	460c      	mov	r4, r1
 8001a3a:	6831      	ldr	r1, [r6, #0]
 8001a3c:	4605      	mov	r5, r0
 8001a3e:	b911      	cbnz	r1, 8001a46 <sbrk_aligned+0x12>
 8001a40:	f000 fcb6 	bl	80023b0 <_sbrk_r>
 8001a44:	6030      	str	r0, [r6, #0]
 8001a46:	4621      	mov	r1, r4
 8001a48:	4628      	mov	r0, r5
 8001a4a:	f000 fcb1 	bl	80023b0 <_sbrk_r>
 8001a4e:	1c43      	adds	r3, r0, #1
 8001a50:	d103      	bne.n	8001a5a <sbrk_aligned+0x26>
 8001a52:	f04f 34ff 	mov.w	r4, #4294967295
 8001a56:	4620      	mov	r0, r4
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
 8001a5a:	1cc4      	adds	r4, r0, #3
 8001a5c:	f024 0403 	bic.w	r4, r4, #3
 8001a60:	42a0      	cmp	r0, r4
 8001a62:	d0f8      	beq.n	8001a56 <sbrk_aligned+0x22>
 8001a64:	1a21      	subs	r1, r4, r0
 8001a66:	4628      	mov	r0, r5
 8001a68:	f000 fca2 	bl	80023b0 <_sbrk_r>
 8001a6c:	3001      	adds	r0, #1
 8001a6e:	d1f2      	bne.n	8001a56 <sbrk_aligned+0x22>
 8001a70:	e7ef      	b.n	8001a52 <sbrk_aligned+0x1e>
 8001a72:	bf00      	nop
 8001a74:	200001dc 	.word	0x200001dc

08001a78 <_malloc_r>:
 8001a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a7c:	1ccd      	adds	r5, r1, #3
 8001a7e:	f025 0503 	bic.w	r5, r5, #3
 8001a82:	3508      	adds	r5, #8
 8001a84:	2d0c      	cmp	r5, #12
 8001a86:	bf38      	it	cc
 8001a88:	250c      	movcc	r5, #12
 8001a8a:	2d00      	cmp	r5, #0
 8001a8c:	4606      	mov	r6, r0
 8001a8e:	db01      	blt.n	8001a94 <_malloc_r+0x1c>
 8001a90:	42a9      	cmp	r1, r5
 8001a92:	d904      	bls.n	8001a9e <_malloc_r+0x26>
 8001a94:	230c      	movs	r3, #12
 8001a96:	6033      	str	r3, [r6, #0]
 8001a98:	2000      	movs	r0, #0
 8001a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001b74 <_malloc_r+0xfc>
 8001aa2:	f000 f869 	bl	8001b78 <__malloc_lock>
 8001aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8001aaa:	461c      	mov	r4, r3
 8001aac:	bb44      	cbnz	r4, 8001b00 <_malloc_r+0x88>
 8001aae:	4629      	mov	r1, r5
 8001ab0:	4630      	mov	r0, r6
 8001ab2:	f7ff ffbf 	bl	8001a34 <sbrk_aligned>
 8001ab6:	1c43      	adds	r3, r0, #1
 8001ab8:	4604      	mov	r4, r0
 8001aba:	d158      	bne.n	8001b6e <_malloc_r+0xf6>
 8001abc:	f8d8 4000 	ldr.w	r4, [r8]
 8001ac0:	4627      	mov	r7, r4
 8001ac2:	2f00      	cmp	r7, #0
 8001ac4:	d143      	bne.n	8001b4e <_malloc_r+0xd6>
 8001ac6:	2c00      	cmp	r4, #0
 8001ac8:	d04b      	beq.n	8001b62 <_malloc_r+0xea>
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	4639      	mov	r1, r7
 8001ace:	4630      	mov	r0, r6
 8001ad0:	eb04 0903 	add.w	r9, r4, r3
 8001ad4:	f000 fc6c 	bl	80023b0 <_sbrk_r>
 8001ad8:	4581      	cmp	r9, r0
 8001ada:	d142      	bne.n	8001b62 <_malloc_r+0xea>
 8001adc:	6821      	ldr	r1, [r4, #0]
 8001ade:	1a6d      	subs	r5, r5, r1
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	4630      	mov	r0, r6
 8001ae4:	f7ff ffa6 	bl	8001a34 <sbrk_aligned>
 8001ae8:	3001      	adds	r0, #1
 8001aea:	d03a      	beq.n	8001b62 <_malloc_r+0xea>
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	442b      	add	r3, r5
 8001af0:	6023      	str	r3, [r4, #0]
 8001af2:	f8d8 3000 	ldr.w	r3, [r8]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	bb62      	cbnz	r2, 8001b54 <_malloc_r+0xdc>
 8001afa:	f8c8 7000 	str.w	r7, [r8]
 8001afe:	e00f      	b.n	8001b20 <_malloc_r+0xa8>
 8001b00:	6822      	ldr	r2, [r4, #0]
 8001b02:	1b52      	subs	r2, r2, r5
 8001b04:	d420      	bmi.n	8001b48 <_malloc_r+0xd0>
 8001b06:	2a0b      	cmp	r2, #11
 8001b08:	d917      	bls.n	8001b3a <_malloc_r+0xc2>
 8001b0a:	1961      	adds	r1, r4, r5
 8001b0c:	42a3      	cmp	r3, r4
 8001b0e:	6025      	str	r5, [r4, #0]
 8001b10:	bf18      	it	ne
 8001b12:	6059      	strne	r1, [r3, #4]
 8001b14:	6863      	ldr	r3, [r4, #4]
 8001b16:	bf08      	it	eq
 8001b18:	f8c8 1000 	streq.w	r1, [r8]
 8001b1c:	5162      	str	r2, [r4, r5]
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	4630      	mov	r0, r6
 8001b22:	f000 f82f 	bl	8001b84 <__malloc_unlock>
 8001b26:	f104 000b 	add.w	r0, r4, #11
 8001b2a:	1d23      	adds	r3, r4, #4
 8001b2c:	f020 0007 	bic.w	r0, r0, #7
 8001b30:	1ac2      	subs	r2, r0, r3
 8001b32:	bf1c      	itt	ne
 8001b34:	1a1b      	subne	r3, r3, r0
 8001b36:	50a3      	strne	r3, [r4, r2]
 8001b38:	e7af      	b.n	8001a9a <_malloc_r+0x22>
 8001b3a:	6862      	ldr	r2, [r4, #4]
 8001b3c:	42a3      	cmp	r3, r4
 8001b3e:	bf0c      	ite	eq
 8001b40:	f8c8 2000 	streq.w	r2, [r8]
 8001b44:	605a      	strne	r2, [r3, #4]
 8001b46:	e7eb      	b.n	8001b20 <_malloc_r+0xa8>
 8001b48:	4623      	mov	r3, r4
 8001b4a:	6864      	ldr	r4, [r4, #4]
 8001b4c:	e7ae      	b.n	8001aac <_malloc_r+0x34>
 8001b4e:	463c      	mov	r4, r7
 8001b50:	687f      	ldr	r7, [r7, #4]
 8001b52:	e7b6      	b.n	8001ac2 <_malloc_r+0x4a>
 8001b54:	461a      	mov	r2, r3
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	42a3      	cmp	r3, r4
 8001b5a:	d1fb      	bne.n	8001b54 <_malloc_r+0xdc>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	6053      	str	r3, [r2, #4]
 8001b60:	e7de      	b.n	8001b20 <_malloc_r+0xa8>
 8001b62:	230c      	movs	r3, #12
 8001b64:	6033      	str	r3, [r6, #0]
 8001b66:	4630      	mov	r0, r6
 8001b68:	f000 f80c 	bl	8001b84 <__malloc_unlock>
 8001b6c:	e794      	b.n	8001a98 <_malloc_r+0x20>
 8001b6e:	6005      	str	r5, [r0, #0]
 8001b70:	e7d6      	b.n	8001b20 <_malloc_r+0xa8>
 8001b72:	bf00      	nop
 8001b74:	200001e0 	.word	0x200001e0

08001b78 <__malloc_lock>:
 8001b78:	4801      	ldr	r0, [pc, #4]	@ (8001b80 <__malloc_lock+0x8>)
 8001b7a:	f7ff bf0e 	b.w	800199a <__retarget_lock_acquire_recursive>
 8001b7e:	bf00      	nop
 8001b80:	200001d8 	.word	0x200001d8

08001b84 <__malloc_unlock>:
 8001b84:	4801      	ldr	r0, [pc, #4]	@ (8001b8c <__malloc_unlock+0x8>)
 8001b86:	f7ff bf09 	b.w	800199c <__retarget_lock_release_recursive>
 8001b8a:	bf00      	nop
 8001b8c:	200001d8 	.word	0x200001d8

08001b90 <__sfputc_r>:
 8001b90:	6893      	ldr	r3, [r2, #8]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	b410      	push	{r4}
 8001b98:	6093      	str	r3, [r2, #8]
 8001b9a:	da08      	bge.n	8001bae <__sfputc_r+0x1e>
 8001b9c:	6994      	ldr	r4, [r2, #24]
 8001b9e:	42a3      	cmp	r3, r4
 8001ba0:	db01      	blt.n	8001ba6 <__sfputc_r+0x16>
 8001ba2:	290a      	cmp	r1, #10
 8001ba4:	d103      	bne.n	8001bae <__sfputc_r+0x1e>
 8001ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001baa:	f000 bb6d 	b.w	8002288 <__swbuf_r>
 8001bae:	6813      	ldr	r3, [r2, #0]
 8001bb0:	1c58      	adds	r0, r3, #1
 8001bb2:	6010      	str	r0, [r2, #0]
 8001bb4:	7019      	strb	r1, [r3, #0]
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <__sfputs_r>:
 8001bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc0:	4606      	mov	r6, r0
 8001bc2:	460f      	mov	r7, r1
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	18d5      	adds	r5, r2, r3
 8001bc8:	42ac      	cmp	r4, r5
 8001bca:	d101      	bne.n	8001bd0 <__sfputs_r+0x12>
 8001bcc:	2000      	movs	r0, #0
 8001bce:	e007      	b.n	8001be0 <__sfputs_r+0x22>
 8001bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bd4:	463a      	mov	r2, r7
 8001bd6:	4630      	mov	r0, r6
 8001bd8:	f7ff ffda 	bl	8001b90 <__sfputc_r>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d1f3      	bne.n	8001bc8 <__sfputs_r+0xa>
 8001be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001be4 <_vfiprintf_r>:
 8001be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be8:	460d      	mov	r5, r1
 8001bea:	b09d      	sub	sp, #116	@ 0x74
 8001bec:	4614      	mov	r4, r2
 8001bee:	4698      	mov	r8, r3
 8001bf0:	4606      	mov	r6, r0
 8001bf2:	b118      	cbz	r0, 8001bfc <_vfiprintf_r+0x18>
 8001bf4:	6a03      	ldr	r3, [r0, #32]
 8001bf6:	b90b      	cbnz	r3, 8001bfc <_vfiprintf_r+0x18>
 8001bf8:	f7ff fdca 	bl	8001790 <__sinit>
 8001bfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001bfe:	07d9      	lsls	r1, r3, #31
 8001c00:	d405      	bmi.n	8001c0e <_vfiprintf_r+0x2a>
 8001c02:	89ab      	ldrh	r3, [r5, #12]
 8001c04:	059a      	lsls	r2, r3, #22
 8001c06:	d402      	bmi.n	8001c0e <_vfiprintf_r+0x2a>
 8001c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c0a:	f7ff fec6 	bl	800199a <__retarget_lock_acquire_recursive>
 8001c0e:	89ab      	ldrh	r3, [r5, #12]
 8001c10:	071b      	lsls	r3, r3, #28
 8001c12:	d501      	bpl.n	8001c18 <_vfiprintf_r+0x34>
 8001c14:	692b      	ldr	r3, [r5, #16]
 8001c16:	b99b      	cbnz	r3, 8001c40 <_vfiprintf_r+0x5c>
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f000 fb72 	bl	8002304 <__swsetup_r>
 8001c20:	b170      	cbz	r0, 8001c40 <_vfiprintf_r+0x5c>
 8001c22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c24:	07dc      	lsls	r4, r3, #31
 8001c26:	d504      	bpl.n	8001c32 <_vfiprintf_r+0x4e>
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	b01d      	add	sp, #116	@ 0x74
 8001c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c32:	89ab      	ldrh	r3, [r5, #12]
 8001c34:	0598      	lsls	r0, r3, #22
 8001c36:	d4f7      	bmi.n	8001c28 <_vfiprintf_r+0x44>
 8001c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c3a:	f7ff feaf 	bl	800199c <__retarget_lock_release_recursive>
 8001c3e:	e7f3      	b.n	8001c28 <_vfiprintf_r+0x44>
 8001c40:	2300      	movs	r3, #0
 8001c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c44:	2320      	movs	r3, #32
 8001c46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c4e:	2330      	movs	r3, #48	@ 0x30
 8001c50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001e00 <_vfiprintf_r+0x21c>
 8001c54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001c58:	f04f 0901 	mov.w	r9, #1
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	469a      	mov	sl, r3
 8001c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c64:	b10a      	cbz	r2, 8001c6a <_vfiprintf_r+0x86>
 8001c66:	2a25      	cmp	r2, #37	@ 0x25
 8001c68:	d1f9      	bne.n	8001c5e <_vfiprintf_r+0x7a>
 8001c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8001c6e:	d00b      	beq.n	8001c88 <_vfiprintf_r+0xa4>
 8001c70:	465b      	mov	r3, fp
 8001c72:	4622      	mov	r2, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	4630      	mov	r0, r6
 8001c78:	f7ff ffa1 	bl	8001bbe <__sfputs_r>
 8001c7c:	3001      	adds	r0, #1
 8001c7e:	f000 80a7 	beq.w	8001dd0 <_vfiprintf_r+0x1ec>
 8001c82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c84:	445a      	add	r2, fp
 8001c86:	9209      	str	r2, [sp, #36]	@ 0x24
 8001c88:	f89a 3000 	ldrb.w	r3, [sl]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 809f 	beq.w	8001dd0 <_vfiprintf_r+0x1ec>
 8001c92:	2300      	movs	r3, #0
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c9c:	f10a 0a01 	add.w	sl, sl, #1
 8001ca0:	9304      	str	r3, [sp, #16]
 8001ca2:	9307      	str	r3, [sp, #28]
 8001ca4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001ca8:	931a      	str	r3, [sp, #104]	@ 0x68
 8001caa:	4654      	mov	r4, sl
 8001cac:	2205      	movs	r2, #5
 8001cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cb2:	4853      	ldr	r0, [pc, #332]	@ (8001e00 <_vfiprintf_r+0x21c>)
 8001cb4:	f7fe fa94 	bl	80001e0 <memchr>
 8001cb8:	9a04      	ldr	r2, [sp, #16]
 8001cba:	b9d8      	cbnz	r0, 8001cf4 <_vfiprintf_r+0x110>
 8001cbc:	06d1      	lsls	r1, r2, #27
 8001cbe:	bf44      	itt	mi
 8001cc0:	2320      	movmi	r3, #32
 8001cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001cc6:	0713      	lsls	r3, r2, #28
 8001cc8:	bf44      	itt	mi
 8001cca:	232b      	movmi	r3, #43	@ 0x2b
 8001ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8001cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cd6:	d015      	beq.n	8001d04 <_vfiprintf_r+0x120>
 8001cd8:	9a07      	ldr	r2, [sp, #28]
 8001cda:	4654      	mov	r4, sl
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f04f 0c0a 	mov.w	ip, #10
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ce8:	3b30      	subs	r3, #48	@ 0x30
 8001cea:	2b09      	cmp	r3, #9
 8001cec:	d94b      	bls.n	8001d86 <_vfiprintf_r+0x1a2>
 8001cee:	b1b0      	cbz	r0, 8001d1e <_vfiprintf_r+0x13a>
 8001cf0:	9207      	str	r2, [sp, #28]
 8001cf2:	e014      	b.n	8001d1e <_vfiprintf_r+0x13a>
 8001cf4:	eba0 0308 	sub.w	r3, r0, r8
 8001cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	9304      	str	r3, [sp, #16]
 8001d00:	46a2      	mov	sl, r4
 8001d02:	e7d2      	b.n	8001caa <_vfiprintf_r+0xc6>
 8001d04:	9b03      	ldr	r3, [sp, #12]
 8001d06:	1d19      	adds	r1, r3, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	9103      	str	r1, [sp, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bfbb      	ittet	lt
 8001d10:	425b      	neglt	r3, r3
 8001d12:	f042 0202 	orrlt.w	r2, r2, #2
 8001d16:	9307      	strge	r3, [sp, #28]
 8001d18:	9307      	strlt	r3, [sp, #28]
 8001d1a:	bfb8      	it	lt
 8001d1c:	9204      	strlt	r2, [sp, #16]
 8001d1e:	7823      	ldrb	r3, [r4, #0]
 8001d20:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d22:	d10a      	bne.n	8001d3a <_vfiprintf_r+0x156>
 8001d24:	7863      	ldrb	r3, [r4, #1]
 8001d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d28:	d132      	bne.n	8001d90 <_vfiprintf_r+0x1ac>
 8001d2a:	9b03      	ldr	r3, [sp, #12]
 8001d2c:	1d1a      	adds	r2, r3, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	9203      	str	r2, [sp, #12]
 8001d32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001d36:	3402      	adds	r4, #2
 8001d38:	9305      	str	r3, [sp, #20]
 8001d3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001e10 <_vfiprintf_r+0x22c>
 8001d3e:	7821      	ldrb	r1, [r4, #0]
 8001d40:	2203      	movs	r2, #3
 8001d42:	4650      	mov	r0, sl
 8001d44:	f7fe fa4c 	bl	80001e0 <memchr>
 8001d48:	b138      	cbz	r0, 8001d5a <_vfiprintf_r+0x176>
 8001d4a:	9b04      	ldr	r3, [sp, #16]
 8001d4c:	eba0 000a 	sub.w	r0, r0, sl
 8001d50:	2240      	movs	r2, #64	@ 0x40
 8001d52:	4082      	lsls	r2, r0
 8001d54:	4313      	orrs	r3, r2
 8001d56:	3401      	adds	r4, #1
 8001d58:	9304      	str	r3, [sp, #16]
 8001d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d5e:	4829      	ldr	r0, [pc, #164]	@ (8001e04 <_vfiprintf_r+0x220>)
 8001d60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001d64:	2206      	movs	r2, #6
 8001d66:	f7fe fa3b 	bl	80001e0 <memchr>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d03f      	beq.n	8001dee <_vfiprintf_r+0x20a>
 8001d6e:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <_vfiprintf_r+0x224>)
 8001d70:	bb1b      	cbnz	r3, 8001dba <_vfiprintf_r+0x1d6>
 8001d72:	9b03      	ldr	r3, [sp, #12]
 8001d74:	3307      	adds	r3, #7
 8001d76:	f023 0307 	bic.w	r3, r3, #7
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	9303      	str	r3, [sp, #12]
 8001d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d80:	443b      	add	r3, r7
 8001d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d84:	e76a      	b.n	8001c5c <_vfiprintf_r+0x78>
 8001d86:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	e7a8      	b.n	8001ce2 <_vfiprintf_r+0xfe>
 8001d90:	2300      	movs	r3, #0
 8001d92:	3401      	adds	r4, #1
 8001d94:	9305      	str	r3, [sp, #20]
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 0c0a 	mov.w	ip, #10
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001da2:	3a30      	subs	r2, #48	@ 0x30
 8001da4:	2a09      	cmp	r2, #9
 8001da6:	d903      	bls.n	8001db0 <_vfiprintf_r+0x1cc>
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0c6      	beq.n	8001d3a <_vfiprintf_r+0x156>
 8001dac:	9105      	str	r1, [sp, #20]
 8001dae:	e7c4      	b.n	8001d3a <_vfiprintf_r+0x156>
 8001db0:	fb0c 2101 	mla	r1, ip, r1, r2
 8001db4:	4604      	mov	r4, r0
 8001db6:	2301      	movs	r3, #1
 8001db8:	e7f0      	b.n	8001d9c <_vfiprintf_r+0x1b8>
 8001dba:	ab03      	add	r3, sp, #12
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	462a      	mov	r2, r5
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <_vfiprintf_r+0x228>)
 8001dc2:	a904      	add	r1, sp, #16
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	f3af 8000 	nop.w
 8001dca:	4607      	mov	r7, r0
 8001dcc:	1c78      	adds	r0, r7, #1
 8001dce:	d1d6      	bne.n	8001d7e <_vfiprintf_r+0x19a>
 8001dd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001dd2:	07d9      	lsls	r1, r3, #31
 8001dd4:	d405      	bmi.n	8001de2 <_vfiprintf_r+0x1fe>
 8001dd6:	89ab      	ldrh	r3, [r5, #12]
 8001dd8:	059a      	lsls	r2, r3, #22
 8001dda:	d402      	bmi.n	8001de2 <_vfiprintf_r+0x1fe>
 8001ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001dde:	f7ff fddd 	bl	800199c <__retarget_lock_release_recursive>
 8001de2:	89ab      	ldrh	r3, [r5, #12]
 8001de4:	065b      	lsls	r3, r3, #25
 8001de6:	f53f af1f 	bmi.w	8001c28 <_vfiprintf_r+0x44>
 8001dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001dec:	e71e      	b.n	8001c2c <_vfiprintf_r+0x48>
 8001dee:	ab03      	add	r3, sp, #12
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	462a      	mov	r2, r5
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <_vfiprintf_r+0x228>)
 8001df6:	a904      	add	r1, sp, #16
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f000 f879 	bl	8001ef0 <_printf_i>
 8001dfe:	e7e4      	b.n	8001dca <_vfiprintf_r+0x1e6>
 8001e00:	0800253c 	.word	0x0800253c
 8001e04:	08002546 	.word	0x08002546
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	08001bbf 	.word	0x08001bbf
 8001e10:	08002542 	.word	0x08002542

08001e14 <_printf_common>:
 8001e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e18:	4616      	mov	r6, r2
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	688a      	ldr	r2, [r1, #8]
 8001e1e:	690b      	ldr	r3, [r1, #16]
 8001e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e24:	4293      	cmp	r3, r2
 8001e26:	bfb8      	it	lt
 8001e28:	4613      	movlt	r3, r2
 8001e2a:	6033      	str	r3, [r6, #0]
 8001e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e30:	4607      	mov	r7, r0
 8001e32:	460c      	mov	r4, r1
 8001e34:	b10a      	cbz	r2, 8001e3a <_printf_common+0x26>
 8001e36:	3301      	adds	r3, #1
 8001e38:	6033      	str	r3, [r6, #0]
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	0699      	lsls	r1, r3, #26
 8001e3e:	bf42      	ittt	mi
 8001e40:	6833      	ldrmi	r3, [r6, #0]
 8001e42:	3302      	addmi	r3, #2
 8001e44:	6033      	strmi	r3, [r6, #0]
 8001e46:	6825      	ldr	r5, [r4, #0]
 8001e48:	f015 0506 	ands.w	r5, r5, #6
 8001e4c:	d106      	bne.n	8001e5c <_printf_common+0x48>
 8001e4e:	f104 0a19 	add.w	sl, r4, #25
 8001e52:	68e3      	ldr	r3, [r4, #12]
 8001e54:	6832      	ldr	r2, [r6, #0]
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	42ab      	cmp	r3, r5
 8001e5a:	dc26      	bgt.n	8001eaa <_printf_common+0x96>
 8001e5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	3b00      	subs	r3, #0
 8001e64:	bf18      	it	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	0692      	lsls	r2, r2, #26
 8001e6a:	d42b      	bmi.n	8001ec4 <_printf_common+0xb0>
 8001e6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e70:	4641      	mov	r1, r8
 8001e72:	4638      	mov	r0, r7
 8001e74:	47c8      	blx	r9
 8001e76:	3001      	adds	r0, #1
 8001e78:	d01e      	beq.n	8001eb8 <_printf_common+0xa4>
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	6922      	ldr	r2, [r4, #16]
 8001e7e:	f003 0306 	and.w	r3, r3, #6
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	bf02      	ittt	eq
 8001e86:	68e5      	ldreq	r5, [r4, #12]
 8001e88:	6833      	ldreq	r3, [r6, #0]
 8001e8a:	1aed      	subeq	r5, r5, r3
 8001e8c:	68a3      	ldr	r3, [r4, #8]
 8001e8e:	bf0c      	ite	eq
 8001e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e94:	2500      	movne	r5, #0
 8001e96:	4293      	cmp	r3, r2
 8001e98:	bfc4      	itt	gt
 8001e9a:	1a9b      	subgt	r3, r3, r2
 8001e9c:	18ed      	addgt	r5, r5, r3
 8001e9e:	2600      	movs	r6, #0
 8001ea0:	341a      	adds	r4, #26
 8001ea2:	42b5      	cmp	r5, r6
 8001ea4:	d11a      	bne.n	8001edc <_printf_common+0xc8>
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	e008      	b.n	8001ebc <_printf_common+0xa8>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	4652      	mov	r2, sl
 8001eae:	4641      	mov	r1, r8
 8001eb0:	4638      	mov	r0, r7
 8001eb2:	47c8      	blx	r9
 8001eb4:	3001      	adds	r0, #1
 8001eb6:	d103      	bne.n	8001ec0 <_printf_common+0xac>
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ec0:	3501      	adds	r5, #1
 8001ec2:	e7c6      	b.n	8001e52 <_printf_common+0x3e>
 8001ec4:	18e1      	adds	r1, r4, r3
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	2030      	movs	r0, #48	@ 0x30
 8001eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ece:	4422      	add	r2, r4
 8001ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ed8:	3302      	adds	r3, #2
 8001eda:	e7c7      	b.n	8001e6c <_printf_common+0x58>
 8001edc:	2301      	movs	r3, #1
 8001ede:	4622      	mov	r2, r4
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	4638      	mov	r0, r7
 8001ee4:	47c8      	blx	r9
 8001ee6:	3001      	adds	r0, #1
 8001ee8:	d0e6      	beq.n	8001eb8 <_printf_common+0xa4>
 8001eea:	3601      	adds	r6, #1
 8001eec:	e7d9      	b.n	8001ea2 <_printf_common+0x8e>
	...

08001ef0 <_printf_i>:
 8001ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef4:	7e0f      	ldrb	r7, [r1, #24]
 8001ef6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ef8:	2f78      	cmp	r7, #120	@ 0x78
 8001efa:	4691      	mov	r9, r2
 8001efc:	4680      	mov	r8, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	469a      	mov	sl, r3
 8001f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001f06:	d807      	bhi.n	8001f18 <_printf_i+0x28>
 8001f08:	2f62      	cmp	r7, #98	@ 0x62
 8001f0a:	d80a      	bhi.n	8001f22 <_printf_i+0x32>
 8001f0c:	2f00      	cmp	r7, #0
 8001f0e:	f000 80d2 	beq.w	80020b6 <_printf_i+0x1c6>
 8001f12:	2f58      	cmp	r7, #88	@ 0x58
 8001f14:	f000 80b9 	beq.w	800208a <_printf_i+0x19a>
 8001f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001f20:	e03a      	b.n	8001f98 <_printf_i+0xa8>
 8001f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f26:	2b15      	cmp	r3, #21
 8001f28:	d8f6      	bhi.n	8001f18 <_printf_i+0x28>
 8001f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8001f30 <_printf_i+0x40>)
 8001f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f30:	08001f89 	.word	0x08001f89
 8001f34:	08001f9d 	.word	0x08001f9d
 8001f38:	08001f19 	.word	0x08001f19
 8001f3c:	08001f19 	.word	0x08001f19
 8001f40:	08001f19 	.word	0x08001f19
 8001f44:	08001f19 	.word	0x08001f19
 8001f48:	08001f9d 	.word	0x08001f9d
 8001f4c:	08001f19 	.word	0x08001f19
 8001f50:	08001f19 	.word	0x08001f19
 8001f54:	08001f19 	.word	0x08001f19
 8001f58:	08001f19 	.word	0x08001f19
 8001f5c:	0800209d 	.word	0x0800209d
 8001f60:	08001fc7 	.word	0x08001fc7
 8001f64:	08002057 	.word	0x08002057
 8001f68:	08001f19 	.word	0x08001f19
 8001f6c:	08001f19 	.word	0x08001f19
 8001f70:	080020bf 	.word	0x080020bf
 8001f74:	08001f19 	.word	0x08001f19
 8001f78:	08001fc7 	.word	0x08001fc7
 8001f7c:	08001f19 	.word	0x08001f19
 8001f80:	08001f19 	.word	0x08001f19
 8001f84:	0800205f 	.word	0x0800205f
 8001f88:	6833      	ldr	r3, [r6, #0]
 8001f8a:	1d1a      	adds	r2, r3, #4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6032      	str	r2, [r6, #0]
 8001f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e09d      	b.n	80020d8 <_printf_i+0x1e8>
 8001f9c:	6833      	ldr	r3, [r6, #0]
 8001f9e:	6820      	ldr	r0, [r4, #0]
 8001fa0:	1d19      	adds	r1, r3, #4
 8001fa2:	6031      	str	r1, [r6, #0]
 8001fa4:	0606      	lsls	r6, r0, #24
 8001fa6:	d501      	bpl.n	8001fac <_printf_i+0xbc>
 8001fa8:	681d      	ldr	r5, [r3, #0]
 8001faa:	e003      	b.n	8001fb4 <_printf_i+0xc4>
 8001fac:	0645      	lsls	r5, r0, #25
 8001fae:	d5fb      	bpl.n	8001fa8 <_printf_i+0xb8>
 8001fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001fb4:	2d00      	cmp	r5, #0
 8001fb6:	da03      	bge.n	8001fc0 <_printf_i+0xd0>
 8001fb8:	232d      	movs	r3, #45	@ 0x2d
 8001fba:	426d      	negs	r5, r5
 8001fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001fc0:	4859      	ldr	r0, [pc, #356]	@ (8002128 <_printf_i+0x238>)
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	e011      	b.n	8001fea <_printf_i+0xfa>
 8001fc6:	6821      	ldr	r1, [r4, #0]
 8001fc8:	6833      	ldr	r3, [r6, #0]
 8001fca:	0608      	lsls	r0, r1, #24
 8001fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001fd0:	d402      	bmi.n	8001fd8 <_printf_i+0xe8>
 8001fd2:	0649      	lsls	r1, r1, #25
 8001fd4:	bf48      	it	mi
 8001fd6:	b2ad      	uxthmi	r5, r5
 8001fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8001fda:	4853      	ldr	r0, [pc, #332]	@ (8002128 <_printf_i+0x238>)
 8001fdc:	6033      	str	r3, [r6, #0]
 8001fde:	bf14      	ite	ne
 8001fe0:	230a      	movne	r3, #10
 8001fe2:	2308      	moveq	r3, #8
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001fea:	6866      	ldr	r6, [r4, #4]
 8001fec:	60a6      	str	r6, [r4, #8]
 8001fee:	2e00      	cmp	r6, #0
 8001ff0:	bfa2      	ittt	ge
 8001ff2:	6821      	ldrge	r1, [r4, #0]
 8001ff4:	f021 0104 	bicge.w	r1, r1, #4
 8001ff8:	6021      	strge	r1, [r4, #0]
 8001ffa:	b90d      	cbnz	r5, 8002000 <_printf_i+0x110>
 8001ffc:	2e00      	cmp	r6, #0
 8001ffe:	d04b      	beq.n	8002098 <_printf_i+0x1a8>
 8002000:	4616      	mov	r6, r2
 8002002:	fbb5 f1f3 	udiv	r1, r5, r3
 8002006:	fb03 5711 	mls	r7, r3, r1, r5
 800200a:	5dc7      	ldrb	r7, [r0, r7]
 800200c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002010:	462f      	mov	r7, r5
 8002012:	42bb      	cmp	r3, r7
 8002014:	460d      	mov	r5, r1
 8002016:	d9f4      	bls.n	8002002 <_printf_i+0x112>
 8002018:	2b08      	cmp	r3, #8
 800201a:	d10b      	bne.n	8002034 <_printf_i+0x144>
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	07df      	lsls	r7, r3, #31
 8002020:	d508      	bpl.n	8002034 <_printf_i+0x144>
 8002022:	6923      	ldr	r3, [r4, #16]
 8002024:	6861      	ldr	r1, [r4, #4]
 8002026:	4299      	cmp	r1, r3
 8002028:	bfde      	ittt	le
 800202a:	2330      	movle	r3, #48	@ 0x30
 800202c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002030:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002034:	1b92      	subs	r2, r2, r6
 8002036:	6122      	str	r2, [r4, #16]
 8002038:	f8cd a000 	str.w	sl, [sp]
 800203c:	464b      	mov	r3, r9
 800203e:	aa03      	add	r2, sp, #12
 8002040:	4621      	mov	r1, r4
 8002042:	4640      	mov	r0, r8
 8002044:	f7ff fee6 	bl	8001e14 <_printf_common>
 8002048:	3001      	adds	r0, #1
 800204a:	d14a      	bne.n	80020e2 <_printf_i+0x1f2>
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	b004      	add	sp, #16
 8002052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002056:	6823      	ldr	r3, [r4, #0]
 8002058:	f043 0320 	orr.w	r3, r3, #32
 800205c:	6023      	str	r3, [r4, #0]
 800205e:	4833      	ldr	r0, [pc, #204]	@ (800212c <_printf_i+0x23c>)
 8002060:	2778      	movs	r7, #120	@ 0x78
 8002062:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	6831      	ldr	r1, [r6, #0]
 800206a:	061f      	lsls	r7, r3, #24
 800206c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002070:	d402      	bmi.n	8002078 <_printf_i+0x188>
 8002072:	065f      	lsls	r7, r3, #25
 8002074:	bf48      	it	mi
 8002076:	b2ad      	uxthmi	r5, r5
 8002078:	6031      	str	r1, [r6, #0]
 800207a:	07d9      	lsls	r1, r3, #31
 800207c:	bf44      	itt	mi
 800207e:	f043 0320 	orrmi.w	r3, r3, #32
 8002082:	6023      	strmi	r3, [r4, #0]
 8002084:	b11d      	cbz	r5, 800208e <_printf_i+0x19e>
 8002086:	2310      	movs	r3, #16
 8002088:	e7ac      	b.n	8001fe4 <_printf_i+0xf4>
 800208a:	4827      	ldr	r0, [pc, #156]	@ (8002128 <_printf_i+0x238>)
 800208c:	e7e9      	b.n	8002062 <_printf_i+0x172>
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	f023 0320 	bic.w	r3, r3, #32
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	e7f6      	b.n	8002086 <_printf_i+0x196>
 8002098:	4616      	mov	r6, r2
 800209a:	e7bd      	b.n	8002018 <_printf_i+0x128>
 800209c:	6833      	ldr	r3, [r6, #0]
 800209e:	6825      	ldr	r5, [r4, #0]
 80020a0:	6961      	ldr	r1, [r4, #20]
 80020a2:	1d18      	adds	r0, r3, #4
 80020a4:	6030      	str	r0, [r6, #0]
 80020a6:	062e      	lsls	r6, r5, #24
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	d501      	bpl.n	80020b0 <_printf_i+0x1c0>
 80020ac:	6019      	str	r1, [r3, #0]
 80020ae:	e002      	b.n	80020b6 <_printf_i+0x1c6>
 80020b0:	0668      	lsls	r0, r5, #25
 80020b2:	d5fb      	bpl.n	80020ac <_printf_i+0x1bc>
 80020b4:	8019      	strh	r1, [r3, #0]
 80020b6:	2300      	movs	r3, #0
 80020b8:	6123      	str	r3, [r4, #16]
 80020ba:	4616      	mov	r6, r2
 80020bc:	e7bc      	b.n	8002038 <_printf_i+0x148>
 80020be:	6833      	ldr	r3, [r6, #0]
 80020c0:	1d1a      	adds	r2, r3, #4
 80020c2:	6032      	str	r2, [r6, #0]
 80020c4:	681e      	ldr	r6, [r3, #0]
 80020c6:	6862      	ldr	r2, [r4, #4]
 80020c8:	2100      	movs	r1, #0
 80020ca:	4630      	mov	r0, r6
 80020cc:	f7fe f888 	bl	80001e0 <memchr>
 80020d0:	b108      	cbz	r0, 80020d6 <_printf_i+0x1e6>
 80020d2:	1b80      	subs	r0, r0, r6
 80020d4:	6060      	str	r0, [r4, #4]
 80020d6:	6863      	ldr	r3, [r4, #4]
 80020d8:	6123      	str	r3, [r4, #16]
 80020da:	2300      	movs	r3, #0
 80020dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020e0:	e7aa      	b.n	8002038 <_printf_i+0x148>
 80020e2:	6923      	ldr	r3, [r4, #16]
 80020e4:	4632      	mov	r2, r6
 80020e6:	4649      	mov	r1, r9
 80020e8:	4640      	mov	r0, r8
 80020ea:	47d0      	blx	sl
 80020ec:	3001      	adds	r0, #1
 80020ee:	d0ad      	beq.n	800204c <_printf_i+0x15c>
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	079b      	lsls	r3, r3, #30
 80020f4:	d413      	bmi.n	800211e <_printf_i+0x22e>
 80020f6:	68e0      	ldr	r0, [r4, #12]
 80020f8:	9b03      	ldr	r3, [sp, #12]
 80020fa:	4298      	cmp	r0, r3
 80020fc:	bfb8      	it	lt
 80020fe:	4618      	movlt	r0, r3
 8002100:	e7a6      	b.n	8002050 <_printf_i+0x160>
 8002102:	2301      	movs	r3, #1
 8002104:	4632      	mov	r2, r6
 8002106:	4649      	mov	r1, r9
 8002108:	4640      	mov	r0, r8
 800210a:	47d0      	blx	sl
 800210c:	3001      	adds	r0, #1
 800210e:	d09d      	beq.n	800204c <_printf_i+0x15c>
 8002110:	3501      	adds	r5, #1
 8002112:	68e3      	ldr	r3, [r4, #12]
 8002114:	9903      	ldr	r1, [sp, #12]
 8002116:	1a5b      	subs	r3, r3, r1
 8002118:	42ab      	cmp	r3, r5
 800211a:	dcf2      	bgt.n	8002102 <_printf_i+0x212>
 800211c:	e7eb      	b.n	80020f6 <_printf_i+0x206>
 800211e:	2500      	movs	r5, #0
 8002120:	f104 0619 	add.w	r6, r4, #25
 8002124:	e7f5      	b.n	8002112 <_printf_i+0x222>
 8002126:	bf00      	nop
 8002128:	0800254d 	.word	0x0800254d
 800212c:	0800255e 	.word	0x0800255e

08002130 <__sflush_r>:
 8002130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002138:	0716      	lsls	r6, r2, #28
 800213a:	4605      	mov	r5, r0
 800213c:	460c      	mov	r4, r1
 800213e:	d454      	bmi.n	80021ea <__sflush_r+0xba>
 8002140:	684b      	ldr	r3, [r1, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	dc02      	bgt.n	800214c <__sflush_r+0x1c>
 8002146:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	dd48      	ble.n	80021de <__sflush_r+0xae>
 800214c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800214e:	2e00      	cmp	r6, #0
 8002150:	d045      	beq.n	80021de <__sflush_r+0xae>
 8002152:	2300      	movs	r3, #0
 8002154:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002158:	682f      	ldr	r7, [r5, #0]
 800215a:	6a21      	ldr	r1, [r4, #32]
 800215c:	602b      	str	r3, [r5, #0]
 800215e:	d030      	beq.n	80021c2 <__sflush_r+0x92>
 8002160:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002162:	89a3      	ldrh	r3, [r4, #12]
 8002164:	0759      	lsls	r1, r3, #29
 8002166:	d505      	bpl.n	8002174 <__sflush_r+0x44>
 8002168:	6863      	ldr	r3, [r4, #4]
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800216e:	b10b      	cbz	r3, 8002174 <__sflush_r+0x44>
 8002170:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002172:	1ad2      	subs	r2, r2, r3
 8002174:	2300      	movs	r3, #0
 8002176:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002178:	6a21      	ldr	r1, [r4, #32]
 800217a:	4628      	mov	r0, r5
 800217c:	47b0      	blx	r6
 800217e:	1c43      	adds	r3, r0, #1
 8002180:	89a3      	ldrh	r3, [r4, #12]
 8002182:	d106      	bne.n	8002192 <__sflush_r+0x62>
 8002184:	6829      	ldr	r1, [r5, #0]
 8002186:	291d      	cmp	r1, #29
 8002188:	d82b      	bhi.n	80021e2 <__sflush_r+0xb2>
 800218a:	4a2a      	ldr	r2, [pc, #168]	@ (8002234 <__sflush_r+0x104>)
 800218c:	410a      	asrs	r2, r1
 800218e:	07d6      	lsls	r6, r2, #31
 8002190:	d427      	bmi.n	80021e2 <__sflush_r+0xb2>
 8002192:	2200      	movs	r2, #0
 8002194:	6062      	str	r2, [r4, #4]
 8002196:	04d9      	lsls	r1, r3, #19
 8002198:	6922      	ldr	r2, [r4, #16]
 800219a:	6022      	str	r2, [r4, #0]
 800219c:	d504      	bpl.n	80021a8 <__sflush_r+0x78>
 800219e:	1c42      	adds	r2, r0, #1
 80021a0:	d101      	bne.n	80021a6 <__sflush_r+0x76>
 80021a2:	682b      	ldr	r3, [r5, #0]
 80021a4:	b903      	cbnz	r3, 80021a8 <__sflush_r+0x78>
 80021a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80021a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021aa:	602f      	str	r7, [r5, #0]
 80021ac:	b1b9      	cbz	r1, 80021de <__sflush_r+0xae>
 80021ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021b2:	4299      	cmp	r1, r3
 80021b4:	d002      	beq.n	80021bc <__sflush_r+0x8c>
 80021b6:	4628      	mov	r0, r5
 80021b8:	f7ff fbf2 	bl	80019a0 <_free_r>
 80021bc:	2300      	movs	r3, #0
 80021be:	6363      	str	r3, [r4, #52]	@ 0x34
 80021c0:	e00d      	b.n	80021de <__sflush_r+0xae>
 80021c2:	2301      	movs	r3, #1
 80021c4:	4628      	mov	r0, r5
 80021c6:	47b0      	blx	r6
 80021c8:	4602      	mov	r2, r0
 80021ca:	1c50      	adds	r0, r2, #1
 80021cc:	d1c9      	bne.n	8002162 <__sflush_r+0x32>
 80021ce:	682b      	ldr	r3, [r5, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0c6      	beq.n	8002162 <__sflush_r+0x32>
 80021d4:	2b1d      	cmp	r3, #29
 80021d6:	d001      	beq.n	80021dc <__sflush_r+0xac>
 80021d8:	2b16      	cmp	r3, #22
 80021da:	d11e      	bne.n	800221a <__sflush_r+0xea>
 80021dc:	602f      	str	r7, [r5, #0]
 80021de:	2000      	movs	r0, #0
 80021e0:	e022      	b.n	8002228 <__sflush_r+0xf8>
 80021e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	e01b      	b.n	8002222 <__sflush_r+0xf2>
 80021ea:	690f      	ldr	r7, [r1, #16]
 80021ec:	2f00      	cmp	r7, #0
 80021ee:	d0f6      	beq.n	80021de <__sflush_r+0xae>
 80021f0:	0793      	lsls	r3, r2, #30
 80021f2:	680e      	ldr	r6, [r1, #0]
 80021f4:	bf08      	it	eq
 80021f6:	694b      	ldreq	r3, [r1, #20]
 80021f8:	600f      	str	r7, [r1, #0]
 80021fa:	bf18      	it	ne
 80021fc:	2300      	movne	r3, #0
 80021fe:	eba6 0807 	sub.w	r8, r6, r7
 8002202:	608b      	str	r3, [r1, #8]
 8002204:	f1b8 0f00 	cmp.w	r8, #0
 8002208:	dde9      	ble.n	80021de <__sflush_r+0xae>
 800220a:	6a21      	ldr	r1, [r4, #32]
 800220c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800220e:	4643      	mov	r3, r8
 8002210:	463a      	mov	r2, r7
 8002212:	4628      	mov	r0, r5
 8002214:	47b0      	blx	r6
 8002216:	2800      	cmp	r0, #0
 8002218:	dc08      	bgt.n	800222c <__sflush_r+0xfc>
 800221a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800221e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002222:	81a3      	strh	r3, [r4, #12]
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800222c:	4407      	add	r7, r0
 800222e:	eba8 0800 	sub.w	r8, r8, r0
 8002232:	e7e7      	b.n	8002204 <__sflush_r+0xd4>
 8002234:	dfbffffe 	.word	0xdfbffffe

08002238 <_fflush_r>:
 8002238:	b538      	push	{r3, r4, r5, lr}
 800223a:	690b      	ldr	r3, [r1, #16]
 800223c:	4605      	mov	r5, r0
 800223e:	460c      	mov	r4, r1
 8002240:	b913      	cbnz	r3, 8002248 <_fflush_r+0x10>
 8002242:	2500      	movs	r5, #0
 8002244:	4628      	mov	r0, r5
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	b118      	cbz	r0, 8002252 <_fflush_r+0x1a>
 800224a:	6a03      	ldr	r3, [r0, #32]
 800224c:	b90b      	cbnz	r3, 8002252 <_fflush_r+0x1a>
 800224e:	f7ff fa9f 	bl	8001790 <__sinit>
 8002252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f3      	beq.n	8002242 <_fflush_r+0xa>
 800225a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800225c:	07d0      	lsls	r0, r2, #31
 800225e:	d404      	bmi.n	800226a <_fflush_r+0x32>
 8002260:	0599      	lsls	r1, r3, #22
 8002262:	d402      	bmi.n	800226a <_fflush_r+0x32>
 8002264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002266:	f7ff fb98 	bl	800199a <__retarget_lock_acquire_recursive>
 800226a:	4628      	mov	r0, r5
 800226c:	4621      	mov	r1, r4
 800226e:	f7ff ff5f 	bl	8002130 <__sflush_r>
 8002272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002274:	07da      	lsls	r2, r3, #31
 8002276:	4605      	mov	r5, r0
 8002278:	d4e4      	bmi.n	8002244 <_fflush_r+0xc>
 800227a:	89a3      	ldrh	r3, [r4, #12]
 800227c:	059b      	lsls	r3, r3, #22
 800227e:	d4e1      	bmi.n	8002244 <_fflush_r+0xc>
 8002280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002282:	f7ff fb8b 	bl	800199c <__retarget_lock_release_recursive>
 8002286:	e7dd      	b.n	8002244 <_fflush_r+0xc>

08002288 <__swbuf_r>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	460e      	mov	r6, r1
 800228c:	4614      	mov	r4, r2
 800228e:	4605      	mov	r5, r0
 8002290:	b118      	cbz	r0, 800229a <__swbuf_r+0x12>
 8002292:	6a03      	ldr	r3, [r0, #32]
 8002294:	b90b      	cbnz	r3, 800229a <__swbuf_r+0x12>
 8002296:	f7ff fa7b 	bl	8001790 <__sinit>
 800229a:	69a3      	ldr	r3, [r4, #24]
 800229c:	60a3      	str	r3, [r4, #8]
 800229e:	89a3      	ldrh	r3, [r4, #12]
 80022a0:	071a      	lsls	r2, r3, #28
 80022a2:	d501      	bpl.n	80022a8 <__swbuf_r+0x20>
 80022a4:	6923      	ldr	r3, [r4, #16]
 80022a6:	b943      	cbnz	r3, 80022ba <__swbuf_r+0x32>
 80022a8:	4621      	mov	r1, r4
 80022aa:	4628      	mov	r0, r5
 80022ac:	f000 f82a 	bl	8002304 <__swsetup_r>
 80022b0:	b118      	cbz	r0, 80022ba <__swbuf_r+0x32>
 80022b2:	f04f 37ff 	mov.w	r7, #4294967295
 80022b6:	4638      	mov	r0, r7
 80022b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	6922      	ldr	r2, [r4, #16]
 80022be:	1a98      	subs	r0, r3, r2
 80022c0:	6963      	ldr	r3, [r4, #20]
 80022c2:	b2f6      	uxtb	r6, r6
 80022c4:	4283      	cmp	r3, r0
 80022c6:	4637      	mov	r7, r6
 80022c8:	dc05      	bgt.n	80022d6 <__swbuf_r+0x4e>
 80022ca:	4621      	mov	r1, r4
 80022cc:	4628      	mov	r0, r5
 80022ce:	f7ff ffb3 	bl	8002238 <_fflush_r>
 80022d2:	2800      	cmp	r0, #0
 80022d4:	d1ed      	bne.n	80022b2 <__swbuf_r+0x2a>
 80022d6:	68a3      	ldr	r3, [r4, #8]
 80022d8:	3b01      	subs	r3, #1
 80022da:	60a3      	str	r3, [r4, #8]
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	6022      	str	r2, [r4, #0]
 80022e2:	701e      	strb	r6, [r3, #0]
 80022e4:	6962      	ldr	r2, [r4, #20]
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d004      	beq.n	80022f6 <__swbuf_r+0x6e>
 80022ec:	89a3      	ldrh	r3, [r4, #12]
 80022ee:	07db      	lsls	r3, r3, #31
 80022f0:	d5e1      	bpl.n	80022b6 <__swbuf_r+0x2e>
 80022f2:	2e0a      	cmp	r6, #10
 80022f4:	d1df      	bne.n	80022b6 <__swbuf_r+0x2e>
 80022f6:	4621      	mov	r1, r4
 80022f8:	4628      	mov	r0, r5
 80022fa:	f7ff ff9d 	bl	8002238 <_fflush_r>
 80022fe:	2800      	cmp	r0, #0
 8002300:	d0d9      	beq.n	80022b6 <__swbuf_r+0x2e>
 8002302:	e7d6      	b.n	80022b2 <__swbuf_r+0x2a>

08002304 <__swsetup_r>:
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4b29      	ldr	r3, [pc, #164]	@ (80023ac <__swsetup_r+0xa8>)
 8002308:	4605      	mov	r5, r0
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	460c      	mov	r4, r1
 800230e:	b118      	cbz	r0, 8002318 <__swsetup_r+0x14>
 8002310:	6a03      	ldr	r3, [r0, #32]
 8002312:	b90b      	cbnz	r3, 8002318 <__swsetup_r+0x14>
 8002314:	f7ff fa3c 	bl	8001790 <__sinit>
 8002318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800231c:	0719      	lsls	r1, r3, #28
 800231e:	d422      	bmi.n	8002366 <__swsetup_r+0x62>
 8002320:	06da      	lsls	r2, r3, #27
 8002322:	d407      	bmi.n	8002334 <__swsetup_r+0x30>
 8002324:	2209      	movs	r2, #9
 8002326:	602a      	str	r2, [r5, #0]
 8002328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800232c:	81a3      	strh	r3, [r4, #12]
 800232e:	f04f 30ff 	mov.w	r0, #4294967295
 8002332:	e033      	b.n	800239c <__swsetup_r+0x98>
 8002334:	0758      	lsls	r0, r3, #29
 8002336:	d512      	bpl.n	800235e <__swsetup_r+0x5a>
 8002338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800233a:	b141      	cbz	r1, 800234e <__swsetup_r+0x4a>
 800233c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002340:	4299      	cmp	r1, r3
 8002342:	d002      	beq.n	800234a <__swsetup_r+0x46>
 8002344:	4628      	mov	r0, r5
 8002346:	f7ff fb2b 	bl	80019a0 <_free_r>
 800234a:	2300      	movs	r3, #0
 800234c:	6363      	str	r3, [r4, #52]	@ 0x34
 800234e:	89a3      	ldrh	r3, [r4, #12]
 8002350:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002354:	81a3      	strh	r3, [r4, #12]
 8002356:	2300      	movs	r3, #0
 8002358:	6063      	str	r3, [r4, #4]
 800235a:	6923      	ldr	r3, [r4, #16]
 800235c:	6023      	str	r3, [r4, #0]
 800235e:	89a3      	ldrh	r3, [r4, #12]
 8002360:	f043 0308 	orr.w	r3, r3, #8
 8002364:	81a3      	strh	r3, [r4, #12]
 8002366:	6923      	ldr	r3, [r4, #16]
 8002368:	b94b      	cbnz	r3, 800237e <__swsetup_r+0x7a>
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002374:	d003      	beq.n	800237e <__swsetup_r+0x7a>
 8002376:	4621      	mov	r1, r4
 8002378:	4628      	mov	r0, r5
 800237a:	f000 f84f 	bl	800241c <__smakebuf_r>
 800237e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002382:	f013 0201 	ands.w	r2, r3, #1
 8002386:	d00a      	beq.n	800239e <__swsetup_r+0x9a>
 8002388:	2200      	movs	r2, #0
 800238a:	60a2      	str	r2, [r4, #8]
 800238c:	6962      	ldr	r2, [r4, #20]
 800238e:	4252      	negs	r2, r2
 8002390:	61a2      	str	r2, [r4, #24]
 8002392:	6922      	ldr	r2, [r4, #16]
 8002394:	b942      	cbnz	r2, 80023a8 <__swsetup_r+0xa4>
 8002396:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800239a:	d1c5      	bne.n	8002328 <__swsetup_r+0x24>
 800239c:	bd38      	pop	{r3, r4, r5, pc}
 800239e:	0799      	lsls	r1, r3, #30
 80023a0:	bf58      	it	pl
 80023a2:	6962      	ldrpl	r2, [r4, #20]
 80023a4:	60a2      	str	r2, [r4, #8]
 80023a6:	e7f4      	b.n	8002392 <__swsetup_r+0x8e>
 80023a8:	2000      	movs	r0, #0
 80023aa:	e7f7      	b.n	800239c <__swsetup_r+0x98>
 80023ac:	20000018 	.word	0x20000018

080023b0 <_sbrk_r>:
 80023b0:	b538      	push	{r3, r4, r5, lr}
 80023b2:	4d06      	ldr	r5, [pc, #24]	@ (80023cc <_sbrk_r+0x1c>)
 80023b4:	2300      	movs	r3, #0
 80023b6:	4604      	mov	r4, r0
 80023b8:	4608      	mov	r0, r1
 80023ba:	602b      	str	r3, [r5, #0]
 80023bc:	f7fe fb14 	bl	80009e8 <_sbrk>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d102      	bne.n	80023ca <_sbrk_r+0x1a>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	b103      	cbz	r3, 80023ca <_sbrk_r+0x1a>
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	200001d4 	.word	0x200001d4

080023d0 <__swhatbuf_r>:
 80023d0:	b570      	push	{r4, r5, r6, lr}
 80023d2:	460c      	mov	r4, r1
 80023d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023d8:	2900      	cmp	r1, #0
 80023da:	b096      	sub	sp, #88	@ 0x58
 80023dc:	4615      	mov	r5, r2
 80023de:	461e      	mov	r6, r3
 80023e0:	da0d      	bge.n	80023fe <__swhatbuf_r+0x2e>
 80023e2:	89a3      	ldrh	r3, [r4, #12]
 80023e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023e8:	f04f 0100 	mov.w	r1, #0
 80023ec:	bf14      	ite	ne
 80023ee:	2340      	movne	r3, #64	@ 0x40
 80023f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80023f4:	2000      	movs	r0, #0
 80023f6:	6031      	str	r1, [r6, #0]
 80023f8:	602b      	str	r3, [r5, #0]
 80023fa:	b016      	add	sp, #88	@ 0x58
 80023fc:	bd70      	pop	{r4, r5, r6, pc}
 80023fe:	466a      	mov	r2, sp
 8002400:	f000 f848 	bl	8002494 <_fstat_r>
 8002404:	2800      	cmp	r0, #0
 8002406:	dbec      	blt.n	80023e2 <__swhatbuf_r+0x12>
 8002408:	9901      	ldr	r1, [sp, #4]
 800240a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800240e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002412:	4259      	negs	r1, r3
 8002414:	4159      	adcs	r1, r3
 8002416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800241a:	e7eb      	b.n	80023f4 <__swhatbuf_r+0x24>

0800241c <__smakebuf_r>:
 800241c:	898b      	ldrh	r3, [r1, #12]
 800241e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002420:	079d      	lsls	r5, r3, #30
 8002422:	4606      	mov	r6, r0
 8002424:	460c      	mov	r4, r1
 8002426:	d507      	bpl.n	8002438 <__smakebuf_r+0x1c>
 8002428:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800242c:	6023      	str	r3, [r4, #0]
 800242e:	6123      	str	r3, [r4, #16]
 8002430:	2301      	movs	r3, #1
 8002432:	6163      	str	r3, [r4, #20]
 8002434:	b003      	add	sp, #12
 8002436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002438:	ab01      	add	r3, sp, #4
 800243a:	466a      	mov	r2, sp
 800243c:	f7ff ffc8 	bl	80023d0 <__swhatbuf_r>
 8002440:	9f00      	ldr	r7, [sp, #0]
 8002442:	4605      	mov	r5, r0
 8002444:	4639      	mov	r1, r7
 8002446:	4630      	mov	r0, r6
 8002448:	f7ff fb16 	bl	8001a78 <_malloc_r>
 800244c:	b948      	cbnz	r0, 8002462 <__smakebuf_r+0x46>
 800244e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002452:	059a      	lsls	r2, r3, #22
 8002454:	d4ee      	bmi.n	8002434 <__smakebuf_r+0x18>
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	81a3      	strh	r3, [r4, #12]
 8002460:	e7e2      	b.n	8002428 <__smakebuf_r+0xc>
 8002462:	89a3      	ldrh	r3, [r4, #12]
 8002464:	6020      	str	r0, [r4, #0]
 8002466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800246a:	81a3      	strh	r3, [r4, #12]
 800246c:	9b01      	ldr	r3, [sp, #4]
 800246e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002472:	b15b      	cbz	r3, 800248c <__smakebuf_r+0x70>
 8002474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002478:	4630      	mov	r0, r6
 800247a:	f000 f81d 	bl	80024b8 <_isatty_r>
 800247e:	b128      	cbz	r0, 800248c <__smakebuf_r+0x70>
 8002480:	89a3      	ldrh	r3, [r4, #12]
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	81a3      	strh	r3, [r4, #12]
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	431d      	orrs	r5, r3
 8002490:	81a5      	strh	r5, [r4, #12]
 8002492:	e7cf      	b.n	8002434 <__smakebuf_r+0x18>

08002494 <_fstat_r>:
 8002494:	b538      	push	{r3, r4, r5, lr}
 8002496:	4d07      	ldr	r5, [pc, #28]	@ (80024b4 <_fstat_r+0x20>)
 8002498:	2300      	movs	r3, #0
 800249a:	4604      	mov	r4, r0
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	602b      	str	r3, [r5, #0]
 80024a2:	f7fe fa79 	bl	8000998 <_fstat>
 80024a6:	1c43      	adds	r3, r0, #1
 80024a8:	d102      	bne.n	80024b0 <_fstat_r+0x1c>
 80024aa:	682b      	ldr	r3, [r5, #0]
 80024ac:	b103      	cbz	r3, 80024b0 <_fstat_r+0x1c>
 80024ae:	6023      	str	r3, [r4, #0]
 80024b0:	bd38      	pop	{r3, r4, r5, pc}
 80024b2:	bf00      	nop
 80024b4:	200001d4 	.word	0x200001d4

080024b8 <_isatty_r>:
 80024b8:	b538      	push	{r3, r4, r5, lr}
 80024ba:	4d06      	ldr	r5, [pc, #24]	@ (80024d4 <_isatty_r+0x1c>)
 80024bc:	2300      	movs	r3, #0
 80024be:	4604      	mov	r4, r0
 80024c0:	4608      	mov	r0, r1
 80024c2:	602b      	str	r3, [r5, #0]
 80024c4:	f7fe fa78 	bl	80009b8 <_isatty>
 80024c8:	1c43      	adds	r3, r0, #1
 80024ca:	d102      	bne.n	80024d2 <_isatty_r+0x1a>
 80024cc:	682b      	ldr	r3, [r5, #0]
 80024ce:	b103      	cbz	r3, 80024d2 <_isatty_r+0x1a>
 80024d0:	6023      	str	r3, [r4, #0]
 80024d2:	bd38      	pop	{r3, r4, r5, pc}
 80024d4:	200001d4 	.word	0x200001d4

080024d8 <_init>:
 80024d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024da:	bf00      	nop
 80024dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024de:	bc08      	pop	{r3}
 80024e0:	469e      	mov	lr, r3
 80024e2:	4770      	bx	lr

080024e4 <_fini>:
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e6:	bf00      	nop
 80024e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ea:	bc08      	pop	{r3}
 80024ec:	469e      	mov	lr, r3
 80024ee:	4770      	bx	lr
