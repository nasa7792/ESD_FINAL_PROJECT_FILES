
ESD_FP_SD_HAL_Updated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006720  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080068c0  080068c0  000078c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b70  08006b70  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b78  08006b78  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b78  08006b78  00007b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b7c  08006b7c  00007b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006b80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000074  08006bf4  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006bf4  000083c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d006  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221f  00000000  00000000  000150aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  000172d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000904  00000000  00000000  00017e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176d6  00000000  00000000  0001879c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109d2  00000000  00000000  0002fe72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008955d  00000000  00000000  00040844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9da1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b0  00000000  00000000  000c9de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000cd294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068a8 	.word	0x080068a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080068a8 	.word	0x080068a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000580:	b40f      	push	{r0, r1, r2, r3}
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000596:	480b      	ldr	r0, [pc, #44]	@ (80005c4 <myprintf+0x44>)
 8000598:	f005 fcf8 	bl	8005f8c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800059c:	4809      	ldr	r0, [pc, #36]	@ (80005c4 <myprintf+0x44>)
 800059e:	f7ff fe1f 	bl	80001e0 <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	4905      	ldr	r1, [pc, #20]	@ (80005c4 <myprintf+0x44>)
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <myprintf+0x48>)
 80005b2:	f001 ffd3 	bl	800255c <HAL_UART_Transmit>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c0:	b004      	add	sp, #16
 80005c2:	4770      	bx	lr
 80005c4:	20000130 	.word	0x20000130
 80005c8:	200000e8 	.word	0x200000e8

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	f5ad 6d94 	sub.w	sp, sp, #1184	@ 0x4a0
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fb6e 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f900 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f9c8 	bl	8000970 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005e0:	f000 f966 	bl	80008b0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f99a 	bl	800091c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80005e8:	f002 fb74 	bl	8002cd4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
   myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80005ec:	486d      	ldr	r0, [pc, #436]	@ (80007a4 <main+0x1d8>)
 80005ee:	f7ff ffc7 	bl	8000580 <myprintf>

   HAL_Delay(1000); //a short delay is important to let the SD card settle
 80005f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f6:	f000 fbcf 	bl	8000d98 <HAL_Delay>
   FATFS FatFs; 	//Fatfs handle
   FIL fil; 		//File handle
   FRESULT fres; //Result after operations

   //Open the file system
   fres = f_mount(&FatFs, "", 1); //1=mount now
 80005fa:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80005fe:	2201      	movs	r2, #1
 8000600:	4969      	ldr	r1, [pc, #420]	@ (80007a8 <main+0x1dc>)
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fdec 	bl	80051e0 <f_mount>
 8000608:	4603      	mov	r3, r0
 800060a:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
   //Let's get some statistics from the SD card
   DWORD free_clusters, free_sectors, total_sectors;

   FATFS* getFreeFs;

   fres = f_getfree("", &free_clusters, &getFreeFs);
 800060e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000612:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000616:	4619      	mov	r1, r3
 8000618:	4863      	ldr	r0, [pc, #396]	@ (80007a8 <main+0x1dc>)
 800061a:	f005 fb3d 	bl	8005c98 <f_getfree>
 800061e:	4603      	mov	r3, r0
 8000620:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
   if (fres != FR_OK) {
 8000624:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000628:	2b00      	cmp	r3, #0
 800062a:	d007      	beq.n	800063c <main+0x70>
 	myprintf("f_getfree error (%i)\r\n", fres);
 800062c:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000630:	4619      	mov	r1, r3
 8000632:	485e      	ldr	r0, [pc, #376]	@ (80007ac <main+0x1e0>)
 8000634:	f7ff ffa4 	bl	8000580 <myprintf>
 	while(1);
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <main+0x6c>
   }

   //Formula comes from ChaN's documentation
   total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800063c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000640:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	3b02      	subs	r3, #2
 800064a:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 800064e:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	8952      	ldrh	r2, [r2, #10]
 8000656:	fb02 f303 	mul.w	r3, r2, r3
 800065a:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
   free_sectors = free_clusters * getFreeFs->csize;
 800065e:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000662:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	895b      	ldrh	r3, [r3, #10]
 800066a:	461a      	mov	r2, r3
 800066c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000670:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	fb02 f303 	mul.w	r3, r2, r3
 800067a:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494

   myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800067e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	@ 0x498
 8000682:	0859      	lsrs	r1, r3, #1
 8000684:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	461a      	mov	r2, r3
 800068c:	4848      	ldr	r0, [pc, #288]	@ (80007b0 <main+0x1e4>)
 800068e:	f7ff ff77 	bl	8000580 <myprintf>

   //Now let's try to open file "test.txt"
   fres = f_open(&fil, "test.txt", FA_READ);
 8000692:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000696:	2201      	movs	r2, #1
 8000698:	4946      	ldr	r1, [pc, #280]	@ (80007b4 <main+0x1e8>)
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fde6 	bl	800526c <f_open>
 80006a0:	4603      	mov	r3, r0
 80006a2:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
   if (fres != FR_OK) {
 80006a6:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <main+0xf2>
 	myprintf("f_open error (%i)\r\n", fres);
 80006ae:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006b2:	4619      	mov	r1, r3
 80006b4:	4840      	ldr	r0, [pc, #256]	@ (80007b8 <main+0x1ec>)
 80006b6:	f7ff ff63 	bl	8000580 <myprintf>
 	while(1);
 80006ba:	bf00      	nop
 80006bc:	e7fd      	b.n	80006ba <main+0xee>
   }
   myprintf("I was able to open 'test.txt' for reading!\r\n");
 80006be:	483f      	ldr	r0, [pc, #252]	@ (80007bc <main+0x1f0>)
 80006c0:	f7ff ff5e 	bl	8000580 <myprintf>
   //Read 30 bytes from "test.txt" on the SD card
   BYTE readBuf[30];

   //We can either use f_read OR f_gets to get data out of files
   //f_gets is a wrapper on f_read that does some string formatting for us
   TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80006c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	211e      	movs	r1, #30
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 fb97 	bl	8005e02 <f_gets>
 80006d4:	f8c7 0490 	str.w	r0, [r7, #1168]	@ 0x490
   if(rres != 0) {
 80006d8:	f8d7 3490 	ldr.w	r3, [r7, #1168]	@ 0x490
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d006      	beq.n	80006ee <main+0x122>
 	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4619      	mov	r1, r3
 80006e6:	4836      	ldr	r0, [pc, #216]	@ (80007c0 <main+0x1f4>)
 80006e8:	f7ff ff4a 	bl	8000580 <myprintf>
 80006ec:	e005      	b.n	80006fa <main+0x12e>
   } else {
 	myprintf("f_gets error (%i)\r\n", fres);
 80006ee:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006f2:	4619      	mov	r1, r3
 80006f4:	4833      	ldr	r0, [pc, #204]	@ (80007c4 <main+0x1f8>)
 80006f6:	f7ff ff43 	bl	8000580 <myprintf>
   }

   //Be a tidy kiwi - don't forget to close your file!
   f_close(&fil);
 80006fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 faa0 	bl	8005c44 <f_close>

   //Now let's try and write a file "write.txt"
   fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000704:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000708:	221a      	movs	r2, #26
 800070a:	492f      	ldr	r1, [pc, #188]	@ (80007c8 <main+0x1fc>)
 800070c:	4618      	mov	r0, r3
 800070e:	f004 fdad 	bl	800526c <f_open>
 8000712:	4603      	mov	r3, r0
 8000714:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
   if(fres == FR_OK) {
 8000718:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800071c:	2b00      	cmp	r3, #0
 800071e:	d103      	bne.n	8000728 <main+0x15c>
 	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000720:	482a      	ldr	r0, [pc, #168]	@ (80007cc <main+0x200>)
 8000722:	f7ff ff2d 	bl	8000580 <myprintf>
 8000726:	e005      	b.n	8000734 <main+0x168>
   } else {
 	myprintf("f_open error (%i)\r\n", fres);
 8000728:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800072c:	4619      	mov	r1, r3
 800072e:	4822      	ldr	r0, [pc, #136]	@ (80007b8 <main+0x1ec>)
 8000730:	f7ff ff26 	bl	8000580 <myprintf>
   }

   //Copy in a string
   strncpy((char*)readBuf, "a new file is made!", 19);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4a25      	ldr	r2, [pc, #148]	@ (80007d0 <main+0x204>)
 800073a:	461c      	mov	r4, r3
 800073c:	4615      	mov	r5, r2
 800073e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000742:	682b      	ldr	r3, [r5, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	8022      	strh	r2, [r4, #0]
 8000748:	3402      	adds	r4, #2
 800074a:	0c1b      	lsrs	r3, r3, #16
 800074c:	7023      	strb	r3, [r4, #0]
   UINT bytesWrote;
   fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	f107 0108 	add.w	r1, r7, #8
 8000754:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000758:	2213      	movs	r2, #19
 800075a:	f005 f880 	bl	800585e <f_write>
 800075e:	4603      	mov	r3, r0
 8000760:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
   if(fres == FR_OK) {
 8000764:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000768:	2b00      	cmp	r3, #0
 800076a:	d109      	bne.n	8000780 <main+0x1b4>
 	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800076c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000770:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4619      	mov	r1, r3
 8000778:	4816      	ldr	r0, [pc, #88]	@ (80007d4 <main+0x208>)
 800077a:	f7ff ff01 	bl	8000580 <myprintf>
 800077e:	e005      	b.n	800078c <main+0x1c0>
   } else {
 	myprintf("f_write error (%i)\r\n", fres);
 8000780:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000784:	4619      	mov	r1, r3
 8000786:	4814      	ldr	r0, [pc, #80]	@ (80007d8 <main+0x20c>)
 8000788:	f7ff fefa 	bl	8000580 <myprintf>
   }

   //Be a tidy kiwi - don't forget to close your file!
   f_close(&fil);
 800078c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000790:	4618      	mov	r0, r3
 8000792:	f005 fa57 	bl	8005c44 <f_close>

   //We're done, so de-mount the drive
   f_mount(NULL, "", 0);
 8000796:	2200      	movs	r2, #0
 8000798:	4903      	ldr	r1, [pc, #12]	@ (80007a8 <main+0x1dc>)
 800079a:	2000      	movs	r0, #0
 800079c:	f004 fd20 	bl	80051e0 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <main+0x1d4>
 80007a4:	080068c0 	.word	0x080068c0
 80007a8:	080068e0 	.word	0x080068e0
 80007ac:	080068e4 	.word	0x080068e4
 80007b0:	080068fc 	.word	0x080068fc
 80007b4:	08006944 	.word	0x08006944
 80007b8:	08006950 	.word	0x08006950
 80007bc:	08006964 	.word	0x08006964
 80007c0:	08006994 	.word	0x08006994
 80007c4:	080069c0 	.word	0x080069c0
 80007c8:	080069d4 	.word	0x080069d4
 80007cc:	080069e0 	.word	0x080069e0
 80007d0:	08006a10 	.word	0x08006a10
 80007d4:	08006a24 	.word	0x08006a24
 80007d8:	08006a48 	.word	0x08006a48

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	@ 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	2230      	movs	r2, #48	@ 0x30
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f005 fbdc 	bl	8005fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <SystemClock_Config+0xcc>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	4a27      	ldr	r2, [pc, #156]	@ (80008a8 <SystemClock_Config+0xcc>)
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <SystemClock_Config+0xcc>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <SystemClock_Config+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <SystemClock_Config+0xd0>)
 8000826:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <SystemClock_Config+0xd0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2310      	movs	r3, #16
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	2302      	movs	r3, #2
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800084c:	2308      	movs	r3, #8
 800084e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000850:	23c0      	movs	r3, #192	@ 0xc0
 8000852:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000854:	2304      	movs	r3, #4
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000858:	2308      	movs	r3, #8
 800085a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fd41 	bl	80012e8 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800086c:	f000 f8c2 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	2302      	movs	r3, #2
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800087c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000886:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2103      	movs	r1, #3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 ffa2 	bl	80017d8 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800089a:	f000 f8ab 	bl	80009f4 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	@ 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008b6:	4a18      	ldr	r2, [pc, #96]	@ (8000918 <MX_SPI1_Init+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008e4:	2238      	movs	r2, #56	@ 0x38
 80008e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008fc:	220a      	movs	r2, #10
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_SPI1_Init+0x64>)
 8000902:	f001 f989 	bl	8001c18 <HAL_SPI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800090c:	f000 f872 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000090 	.word	0x20000090
 8000918:	40013000 	.word	0x40013000

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000922:	4a12      	ldr	r2, [pc, #72]	@ (800096c <MX_USART2_UART_Init+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000928:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000954:	f001 fdb2 	bl	80024bc <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095e:	f000 f849 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000e8 	.word	0x200000e8
 800096c:	40004400 	.word	0x40004400

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <MX_GPIO_Init+0x7c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <MX_GPIO_Init+0x7c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_GPIO_Init+0x7c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_GPIO_Init+0x7c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a10      	ldr	r2, [pc, #64]	@ (80009ec <MX_GPIO_Init+0x7c>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_GPIO_Init+0x7c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2140      	movs	r1, #64	@ 0x40
 80009c2:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <MX_GPIO_Init+0x80>)
 80009c4:	f000 fc76 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80009c8:	2340      	movs	r3, #64	@ 0x40
 80009ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_GPIO_Init+0x80>)
 80009e0:	f000 fae4 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020400 	.word	0x40020400

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a16:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	4a08      	ldr	r2, [pc, #32]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f000 fa80 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	@ 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a19      	ldr	r2, [pc, #100]	@ (8000ad4 <HAL_SPI_MspInit+0x84>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d12b      	bne.n	8000aca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <HAL_SPI_MspInit+0x88>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <HAL_SPI_MspInit+0x88>)
 8000a7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <HAL_SPI_MspInit+0x88>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <HAL_SPI_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a10      	ldr	r2, [pc, #64]	@ (8000ad8 <HAL_SPI_MspInit+0x88>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <HAL_SPI_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aaa:	23e0      	movs	r3, #224	@ 0xe0
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aba:	2305      	movs	r3, #5
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	@ (8000adc <HAL_SPI_MspInit+0x8c>)
 8000ac6:	f000 fa71 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	@ 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40013000 	.word	0x40013000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	@ (8000b64 <HAL_UART_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12b      	bne.n	8000b5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a17      	ldr	r2, [pc, #92]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b56:	f000 fa29 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	@ 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc6:	f000 f8c7 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f005 f9da 	bl	8005fb8 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20020000 	.word	0x20020000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	20000230 	.word	0x20000230
 8000c38:	200003c8 	.word	0x200003c8

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c64:	f7ff ffea 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	@ (8000cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f005 f999 	bl	8005fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fc9b 	bl	80005cc <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ca4:	08006b80 	.word	0x08006b80
  ldr r2, =_sbss
 8000ca8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cac:	200003c8 	.word	0x200003c8

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f931 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 f808 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fe8a 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f93b 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f911 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	@ (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000234 	.word	0x20000234

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000234 	.word	0x20000234

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	@ 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff47 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff5c 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb0 	bl	8000f00 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e159      	b.n	800127c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8148 	bne.w	8001276 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d130      	bne.n	8001060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a2 	beq.w	8001276 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b57      	ldr	r3, [pc, #348]	@ (8001294 <HAL_GPIO_Init+0x2e8>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a56      	ldr	r2, [pc, #344]	@ (8001294 <HAL_GPIO_Init+0x2e8>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b54      	ldr	r3, [pc, #336]	@ (8001294 <HAL_GPIO_Init+0x2e8>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114e:	4a52      	ldr	r2, [pc, #328]	@ (8001298 <HAL_GPIO_Init+0x2ec>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a49      	ldr	r2, [pc, #292]	@ (800129c <HAL_GPIO_Init+0x2f0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x202>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a48      	ldr	r2, [pc, #288]	@ (80012a0 <HAL_GPIO_Init+0x2f4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x1fe>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a47      	ldr	r2, [pc, #284]	@ (80012a4 <HAL_GPIO_Init+0x2f8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x1fa>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a46      	ldr	r2, [pc, #280]	@ (80012a8 <HAL_GPIO_Init+0x2fc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x1f6>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a45      	ldr	r2, [pc, #276]	@ (80012ac <HAL_GPIO_Init+0x300>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x1f2>
 800119a:	2304      	movs	r3, #4
 800119c:	e008      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 800119e:	2307      	movs	r3, #7
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011ae:	2300      	movs	r3, #0
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	f002 0203 	and.w	r2, r2, #3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4093      	lsls	r3, r2
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c0:	4935      	ldr	r1, [pc, #212]	@ (8001298 <HAL_GPIO_Init+0x2ec>)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ce:	4b38      	ldr	r3, [pc, #224]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f2:	4a2f      	ldr	r2, [pc, #188]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800121c:	4a24      	ldr	r2, [pc, #144]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001222:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001246:	4a1a      	ldr	r2, [pc, #104]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001270:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	f67f aea2 	bls.w	8000fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3724      	adds	r7, #36	@ 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40013800 	.word	0x40013800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e267      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d075      	beq.n	80013f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001306:	4b88      	ldr	r3, [pc, #544]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b04      	cmp	r3, #4
 8001310:	d00c      	beq.n	800132c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001312:	4b85      	ldr	r3, [pc, #532]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800131a:	2b08      	cmp	r3, #8
 800131c:	d112      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131e:	4b82      	ldr	r3, [pc, #520]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800132a:	d10b      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	4b7e      	ldr	r3, [pc, #504]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d05b      	beq.n	80013f0 <HAL_RCC_OscConfig+0x108>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d157      	bne.n	80013f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e242      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800134c:	d106      	bne.n	800135c <HAL_RCC_OscConfig+0x74>
 800134e:	4b76      	ldr	r3, [pc, #472]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a75      	ldr	r2, [pc, #468]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e01d      	b.n	8001398 <HAL_RCC_OscConfig+0xb0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x98>
 8001366:	4b70      	ldr	r3, [pc, #448]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a6f      	ldr	r2, [pc, #444]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b6d      	ldr	r3, [pc, #436]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6c      	ldr	r2, [pc, #432]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0xb0>
 8001380:	4b69      	ldr	r3, [pc, #420]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a68      	ldr	r2, [pc, #416]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b66      	ldr	r3, [pc, #408]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fcee 	bl	8000d80 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fcea 	bl	8000d80 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	@ 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e207      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0xc0>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fcda 	bl	8000d80 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fcd6 	bl	8000d80 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	@ 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1f3      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	4b51      	ldr	r3, [pc, #324]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0xe8>
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d063      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00b      	beq.n	8001422 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140a:	4b47      	ldr	r3, [pc, #284]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001412:	2b08      	cmp	r3, #8
 8001414:	d11c      	bne.n	8001450 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001416:	4b44      	ldr	r3, [pc, #272]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d116      	bne.n	8001450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	4b41      	ldr	r3, [pc, #260]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_RCC_OscConfig+0x152>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e1c7      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b3b      	ldr	r3, [pc, #236]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4937      	ldr	r1, [pc, #220]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144e:	e03a      	b.n	80014c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001458:	4b34      	ldr	r3, [pc, #208]	@ (800152c <HAL_RCC_OscConfig+0x244>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145e:	f7ff fc8f 	bl	8000d80 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fc8b 	bl	8000d80 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1a8      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	4b2b      	ldr	r3, [pc, #172]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b28      	ldr	r3, [pc, #160]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4925      	ldr	r1, [pc, #148]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
 8001498:	e015      	b.n	80014c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149a:	4b24      	ldr	r3, [pc, #144]	@ (800152c <HAL_RCC_OscConfig+0x244>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fc6e 	bl	8000d80 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc6a 	bl	8000d80 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e187      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d036      	beq.n	8001540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d016      	beq.n	8001508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_RCC_OscConfig+0x248>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff fc4e 	bl	8000d80 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc4a 	bl	8000d80 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e167      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_RCC_OscConfig+0x240>)
 80014fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x200>
 8001506:	e01b      	b.n	8001540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_RCC_OscConfig+0x248>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fc37 	bl	8000d80 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	e00e      	b.n	8001534 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff fc33 	bl	8000d80 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d907      	bls.n	8001534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e150      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
 8001528:	40023800 	.word	0x40023800
 800152c:	42470000 	.word	0x42470000
 8001530:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	4b88      	ldr	r3, [pc, #544]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ea      	bne.n	8001516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8097 	beq.w	800167c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b81      	ldr	r3, [pc, #516]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10f      	bne.n	800157e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b7d      	ldr	r3, [pc, #500]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	4a7c      	ldr	r2, [pc, #496]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	@ 0x40
 800156e:	4b7a      	ldr	r3, [pc, #488]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157a:	2301      	movs	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	4b77      	ldr	r3, [pc, #476]	@ (800175c <HAL_RCC_OscConfig+0x474>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d118      	bne.n	80015bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158a:	4b74      	ldr	r3, [pc, #464]	@ (800175c <HAL_RCC_OscConfig+0x474>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a73      	ldr	r2, [pc, #460]	@ (800175c <HAL_RCC_OscConfig+0x474>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001596:	f7ff fbf3 	bl	8000d80 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159e:	f7ff fbef 	bl	8000d80 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e10c      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	4b6a      	ldr	r3, [pc, #424]	@ (800175c <HAL_RCC_OscConfig+0x474>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x2ea>
 80015c4:	4b64      	ldr	r3, [pc, #400]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c8:	4a63      	ldr	r2, [pc, #396]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d0:	e01c      	b.n	800160c <HAL_RCC_OscConfig+0x324>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x30c>
 80015da:	4b5f      	ldr	r3, [pc, #380]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015de:	4a5e      	ldr	r2, [pc, #376]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0x324>
 80015f4:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f8:	4a57      	ldr	r2, [pc, #348]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001600:	4b55      	ldr	r3, [pc, #340]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001604:	4a54      	ldr	r2, [pc, #336]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001606:	f023 0304 	bic.w	r3, r3, #4
 800160a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d015      	beq.n	8001640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fbb4 	bl	8000d80 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fbb0 	bl	8000d80 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0cb      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	4b49      	ldr	r3, [pc, #292]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0ee      	beq.n	800161c <HAL_RCC_OscConfig+0x334>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fb9e 	bl	8000d80 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff fb9a 	bl	8000d80 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0b5      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165e:	4b3e      	ldr	r3, [pc, #248]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1ee      	bne.n	8001648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001670:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	4a38      	ldr	r2, [pc, #224]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800167a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a1 	beq.w	80017c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001686:	4b34      	ldr	r3, [pc, #208]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d05c      	beq.n	800174c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d141      	bne.n	800171e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b31      	ldr	r3, [pc, #196]	@ (8001760 <HAL_RCC_OscConfig+0x478>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb6e 	bl	8000d80 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff fb6a 	bl	8000d80 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e087      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	3b01      	subs	r3, #1
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	491b      	ldr	r1, [pc, #108]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <HAL_RCC_OscConfig+0x478>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fb43 	bl	8000d80 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fb3f 	bl	8000d80 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e05c      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x416>
 800171c:	e054      	b.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <HAL_RCC_OscConfig+0x478>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fb2c 	bl	8000d80 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff fb28 	bl	8000d80 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e045      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_RCC_OscConfig+0x470>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x444>
 800174a:	e03d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e038      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000
 8001760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <HAL_RCC_OscConfig+0x4ec>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d028      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d121      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d11a      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001794:	4013      	ands	r3, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800179a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800179c:	4293      	cmp	r3, r2
 800179e:	d111      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	3b01      	subs	r3, #1
 80017ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0cc      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017ec:	4b68      	ldr	r3, [pc, #416]	@ (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d90c      	bls.n	8001814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b65      	ldr	r3, [pc, #404]	@ (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b63      	ldr	r3, [pc, #396]	@ (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0b8      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182c:	4b59      	ldr	r3, [pc, #356]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a58      	ldr	r2, [pc, #352]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001836:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001844:	4b53      	ldr	r3, [pc, #332]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a52      	ldr	r2, [pc, #328]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800184e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b50      	ldr	r3, [pc, #320]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	494d      	ldr	r1, [pc, #308]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d044      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b47      	ldr	r3, [pc, #284]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d119      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d003      	beq.n	8001896 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001892:	2b03      	cmp	r3, #3
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001896:	4b3f      	ldr	r3, [pc, #252]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e06f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e067      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b37      	ldr	r3, [pc, #220]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4934      	ldr	r1, [pc, #208]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c8:	f7ff fa5a 	bl	8000d80 <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7ff fa56 	bl	8000d80 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e04f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f8:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d20c      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e032      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4916      	ldr	r1, [pc, #88]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194a:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490e      	ldr	r1, [pc, #56]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800195e:	f000 f821 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490a      	ldr	r1, [pc, #40]	@ (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	4a09      	ldr	r2, [pc, #36]	@ (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f9ba 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00
 8001994:	40023800 	.word	0x40023800
 8001998:	08006aa4 	.word	0x08006aa4
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b094      	sub	sp, #80	@ 0x50
 80019aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019bc:	4b79      	ldr	r3, [pc, #484]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d00d      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x40>
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	f200 80e1 	bhi.w	8001b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x34>
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x3a>
 80019d6:	e0db      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b73      	ldr	r3, [pc, #460]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019dc:	e0db      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019de:	4b73      	ldr	r3, [pc, #460]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x208>)
 80019e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019e2:	e0d8      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ee:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d063      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	2200      	movs	r2, #0
 8001a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a16:	4622      	mov	r2, r4
 8001a18:	462b      	mov	r3, r5
 8001a1a:	f04f 0000 	mov.w	r0, #0
 8001a1e:	f04f 0100 	mov.w	r1, #0
 8001a22:	0159      	lsls	r1, r3, #5
 8001a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a28:	0150      	lsls	r0, r2, #5
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4621      	mov	r1, r4
 8001a30:	1a51      	subs	r1, r2, r1
 8001a32:	6139      	str	r1, [r7, #16]
 8001a34:	4629      	mov	r1, r5
 8001a36:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a48:	4659      	mov	r1, fp
 8001a4a:	018b      	lsls	r3, r1, #6
 8001a4c:	4651      	mov	r1, sl
 8001a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a52:	4651      	mov	r1, sl
 8001a54:	018a      	lsls	r2, r1, #6
 8001a56:	4651      	mov	r1, sl
 8001a58:	ebb2 0801 	subs.w	r8, r2, r1
 8001a5c:	4659      	mov	r1, fp
 8001a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a76:	4690      	mov	r8, r2
 8001a78:	4699      	mov	r9, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	eb18 0303 	adds.w	r3, r8, r3
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	462b      	mov	r3, r5
 8001a84:	eb49 0303 	adc.w	r3, r9, r3
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a96:	4629      	mov	r1, r5
 8001a98:	024b      	lsls	r3, r1, #9
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	024a      	lsls	r2, r1, #9
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aaa:	2200      	movs	r2, #0
 8001aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ab4:	f7fe fbec 	bl	8000290 <__aeabi_uldivmod>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4613      	mov	r3, r2
 8001abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ac0:	e058      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac2:	4b38      	ldr	r3, [pc, #224]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	099b      	lsrs	r3, r3, #6
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	4611      	mov	r1, r2
 8001ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ad2:	623b      	str	r3, [r7, #32]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001adc:	4642      	mov	r2, r8
 8001ade:	464b      	mov	r3, r9
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	0159      	lsls	r1, r3, #5
 8001aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aee:	0150      	lsls	r0, r2, #5
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4641      	mov	r1, r8
 8001af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001afa:	4649      	mov	r1, r9
 8001afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b14:	ebb2 040a 	subs.w	r4, r2, sl
 8001b18:	eb63 050b 	sbc.w	r5, r3, fp
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	00eb      	lsls	r3, r5, #3
 8001b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b2a:	00e2      	lsls	r2, r4, #3
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	461d      	mov	r5, r3
 8001b30:	4643      	mov	r3, r8
 8001b32:	18e3      	adds	r3, r4, r3
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	464b      	mov	r3, r9
 8001b38:	eb45 0303 	adc.w	r3, r5, r3
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	028b      	lsls	r3, r1, #10
 8001b4e:	4621      	mov	r1, r4
 8001b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b54:	4621      	mov	r1, r4
 8001b56:	028a      	lsls	r2, r1, #10
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	61fa      	str	r2, [r7, #28]
 8001b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b68:	f7fe fb92 	bl	8000290 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0c1b      	lsrs	r3, r3, #16
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b8e:	e002      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3750      	adds	r7, #80	@ 0x50
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200

08001bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0a9b      	lsrs	r3, r3, #10
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	@ (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	08006ab4 	.word	0x08006ab4

08001bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bf4:	f7ff ffdc 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0b5b      	lsrs	r3, r3, #13
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	@ (8001c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08006ab4 	.word	0x08006ab4

08001c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e07b      	b.n	8001d22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d108      	bne.n	8001c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c3a:	d009      	beq.n	8001c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
 8001c42:	e005      	b.n	8001c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe fef0 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd4:	ea42 0103 	orr.w	r1, r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	0c1b      	lsrs	r3, r3, #16
 8001cee:	f003 0104 	and.w	r1, r3, #4
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	f003 0210 	and.w	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69da      	ldr	r2, [r3, #28]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b088      	sub	sp, #32
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d3a:	f7ff f821 	bl	8000d80 <HAL_GetTick>
 8001d3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d001      	beq.n	8001d54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
 8001d52:	e12a      	b.n	8001faa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_SPI_Transmit+0x36>
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e122      	b.n	8001faa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_SPI_Transmit+0x48>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e11b      	b.n	8001faa <HAL_SPI_Transmit+0x280>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	88fa      	ldrh	r2, [r7, #6]
 8001d92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	88fa      	ldrh	r2, [r7, #6]
 8001d98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dc0:	d10f      	bne.n	8001de2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001de0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dec:	2b40      	cmp	r3, #64	@ 0x40
 8001dee:	d007      	beq.n	8001e00 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e08:	d152      	bne.n	8001eb0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_SPI_Transmit+0xee>
 8001e12:	8b7b      	ldrh	r3, [r7, #26]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d145      	bne.n	8001ea4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	881a      	ldrh	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	1c9a      	adds	r2, r3, #2
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e3c:	e032      	b.n	8001ea4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d112      	bne.n	8001e72 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	881a      	ldrh	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	1c9a      	adds	r2, r3, #2
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e70:	e018      	b.n	8001ea4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e72:	f7fe ff85 	bl	8000d80 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d803      	bhi.n	8001e8a <HAL_SPI_Transmit+0x160>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d102      	bne.n	8001e90 <HAL_SPI_Transmit+0x166>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e082      	b.n	8001faa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1c7      	bne.n	8001e3e <HAL_SPI_Transmit+0x114>
 8001eae:	e053      	b.n	8001f58 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_SPI_Transmit+0x194>
 8001eb8:	8b7b      	ldrh	r3, [r7, #26]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d147      	bne.n	8001f4e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	330c      	adds	r3, #12
 8001ec8:	7812      	ldrb	r2, [r2, #0]
 8001eca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ee4:	e033      	b.n	8001f4e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d113      	bne.n	8001f1c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	330c      	adds	r3, #12
 8001efe:	7812      	ldrb	r2, [r2, #0]
 8001f00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f1a:	e018      	b.n	8001f4e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f1c:	f7fe ff30 	bl	8000d80 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d803      	bhi.n	8001f34 <HAL_SPI_Transmit+0x20a>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d102      	bne.n	8001f3a <HAL_SPI_Transmit+0x210>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e02d      	b.n	8001faa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1c6      	bne.n	8001ee6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	6839      	ldr	r1, [r7, #0]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fa59 	bl	8002414 <SPI_EndRxTxTransaction>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10a      	bne.n	8001f8c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
  }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3720      	adds	r7, #32
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b08a      	sub	sp, #40	@ 0x28
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fc4:	f7fe fedc 	bl	8000d80 <HAL_GetTick>
 8001fc8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fd0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fdc:	7ffb      	ldrb	r3, [r7, #31]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d00c      	beq.n	8001ffc <HAL_SPI_TransmitReceive+0x4a>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fe8:	d106      	bne.n	8001ff8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <HAL_SPI_TransmitReceive+0x46>
 8001ff2:	7ffb      	ldrb	r3, [r7, #31]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d001      	beq.n	8001ffc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e17f      	b.n	80022fc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_SPI_TransmitReceive+0x5c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_SPI_TransmitReceive+0x5c>
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e174      	b.n	80022fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_SPI_TransmitReceive+0x6e>
 800201c:	2302      	movs	r3, #2
 800201e:	e16d      	b.n	80022fc <HAL_SPI_TransmitReceive+0x34a>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b04      	cmp	r3, #4
 8002032:	d003      	beq.n	800203c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2205      	movs	r2, #5
 8002038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	887a      	ldrh	r2, [r7, #2]
 8002052:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	887a      	ldrh	r2, [r7, #2]
 800205e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207c:	2b40      	cmp	r3, #64	@ 0x40
 800207e:	d007      	beq.n	8002090 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002098:	d17e      	bne.n	8002198 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <HAL_SPI_TransmitReceive+0xf6>
 80020a2:	8afb      	ldrh	r3, [r7, #22]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d16c      	bne.n	8002182 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	881a      	ldrh	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	1c9a      	adds	r2, r3, #2
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020cc:	e059      	b.n	8002182 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d11b      	bne.n	8002114 <HAL_SPI_TransmitReceive+0x162>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_SPI_TransmitReceive+0x162>
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d113      	bne.n	8002114 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	1c9a      	adds	r2, r3, #2
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d119      	bne.n	8002156 <HAL_SPI_TransmitReceive+0x1a4>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d014      	beq.n	8002156 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002136:	b292      	uxth	r2, r2
 8002138:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	1c9a      	adds	r2, r3, #2
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002152:	2301      	movs	r3, #1
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002156:	f7fe fe13 	bl	8000d80 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002162:	429a      	cmp	r2, r3
 8002164:	d80d      	bhi.n	8002182 <HAL_SPI_TransmitReceive+0x1d0>
 8002166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d009      	beq.n	8002182 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0bc      	b.n	80022fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1a0      	bne.n	80020ce <HAL_SPI_TransmitReceive+0x11c>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d19b      	bne.n	80020ce <HAL_SPI_TransmitReceive+0x11c>
 8002196:	e082      	b.n	800229e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_SPI_TransmitReceive+0x1f4>
 80021a0:	8afb      	ldrh	r3, [r7, #22]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d171      	bne.n	800228a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	330c      	adds	r3, #12
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021cc:	e05d      	b.n	800228a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d11c      	bne.n	8002216 <HAL_SPI_TransmitReceive+0x264>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d017      	beq.n	8002216 <HAL_SPI_TransmitReceive+0x264>
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d114      	bne.n	8002216 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	330c      	adds	r3, #12
 80021f6:	7812      	ldrb	r2, [r2, #0]
 80021f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d119      	bne.n	8002258 <HAL_SPI_TransmitReceive+0x2a6>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d014      	beq.n	8002258 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002254:	2301      	movs	r3, #1
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002258:	f7fe fd92 	bl	8000d80 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002264:	429a      	cmp	r2, r3
 8002266:	d803      	bhi.n	8002270 <HAL_SPI_TransmitReceive+0x2be>
 8002268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226e:	d102      	bne.n	8002276 <HAL_SPI_TransmitReceive+0x2c4>
 8002270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e038      	b.n	80022fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d19c      	bne.n	80021ce <HAL_SPI_TransmitReceive+0x21c>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d197      	bne.n	80021ce <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800229e:	6a3a      	ldr	r2, [r7, #32]
 80022a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f8b6 	bl	8002414 <SPI_EndRxTxTransaction>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e01d      	b.n	80022fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80022fa:	2300      	movs	r3, #0
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3728      	adds	r7, #40	@ 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002314:	f7fe fd34 	bl	8000d80 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	4413      	add	r3, r2
 8002322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002324:	f7fe fd2c 	bl	8000d80 <HAL_GetTick>
 8002328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800232a:	4b39      	ldr	r3, [pc, #228]	@ (8002410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	015b      	lsls	r3, r3, #5
 8002330:	0d1b      	lsrs	r3, r3, #20
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233a:	e054      	b.n	80023e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002342:	d050      	beq.n	80023e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002344:	f7fe fd1c 	bl	8000d80 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	429a      	cmp	r2, r3
 8002352:	d902      	bls.n	800235a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d13d      	bne.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002372:	d111      	bne.n	8002398 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800237c:	d004      	beq.n	8002388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002386:	d107      	bne.n	8002398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023a0:	d10f      	bne.n	80023c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e017      	b.n	8002406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4013      	ands	r3, r2
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	429a      	cmp	r2, r3
 8002402:	d19b      	bne.n	800233c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000000 	.word	0x20000000

08002414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2201      	movs	r2, #1
 8002428:	2102      	movs	r1, #2
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff ff6a 	bl	8002304 <SPI_WaitFlagStateUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e032      	b.n	80024ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <SPI_EndRxTxTransaction+0xa0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1b      	ldr	r2, [pc, #108]	@ (80024b8 <SPI_EndRxTxTransaction+0xa4>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	0d5b      	lsrs	r3, r3, #21
 8002452:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002464:	d112      	bne.n	800248c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2200      	movs	r2, #0
 800246e:	2180      	movs	r1, #128	@ 0x80
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff ff47 	bl	8002304 <SPI_WaitFlagStateUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d016      	beq.n	80024aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e00f      	b.n	80024ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3b01      	subs	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a2:	2b80      	cmp	r3, #128	@ 0x80
 80024a4:	d0f2      	beq.n	800248c <SPI_EndRxTxTransaction+0x78>
 80024a6:	e000      	b.n	80024aa <SPI_EndRxTxTransaction+0x96>
        break;
 80024a8:	bf00      	nop
  }

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000000 	.word	0x20000000
 80024b8:	165e9f81 	.word	0x165e9f81

080024bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e042      	b.n	8002554 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe fafc 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2224      	movs	r2, #36	@ 0x24
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f973 	bl	80027ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	@ 0x28
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b20      	cmp	r3, #32
 800257a:	d175      	bne.n	8002668 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_UART_Transmit+0x2c>
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e06e      	b.n	800266a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2221      	movs	r2, #33	@ 0x21
 8002596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800259a:	f7fe fbf1 	bl	8000d80 <HAL_GetTick>
 800259e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	88fa      	ldrh	r2, [r7, #6]
 80025a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b4:	d108      	bne.n	80025c8 <HAL_UART_Transmit+0x6c>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e003      	b.n	80025d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025d0:	e02e      	b.n	8002630 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2200      	movs	r2, #0
 80025da:	2180      	movs	r1, #128	@ 0x80
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f848 	bl	8002672 <UART_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e03a      	b.n	800266a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	3302      	adds	r3, #2
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e007      	b.n	8002622 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1cb      	bne.n	80025d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2200      	movs	r2, #0
 8002642:	2140      	movs	r1, #64	@ 0x40
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f814 	bl	8002672 <UART_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e006      	b.n	800266a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002682:	e03b      	b.n	80026fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268a:	d037      	beq.n	80026fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268c:	f7fe fb78 	bl	8000d80 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	6a3a      	ldr	r2, [r7, #32]
 8002698:	429a      	cmp	r2, r3
 800269a:	d302      	bcc.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e03a      	b.n	800271c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d023      	beq.n	80026fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b80      	cmp	r3, #128	@ 0x80
 80026b8:	d020      	beq.n	80026fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b40      	cmp	r3, #64	@ 0x40
 80026be:	d01d      	beq.n	80026fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d116      	bne.n	80026fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f81d 	bl	8002724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2208      	movs	r2, #8
 80026ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e00f      	b.n	800271c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	429a      	cmp	r2, r3
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	429a      	cmp	r2, r3
 8002718:	d0b4      	beq.n	8002684 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002724:	b480      	push	{r7}
 8002726:	b095      	sub	sp, #84	@ 0x54
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002736:	e853 3f00 	ldrex	r3, [r3]
 800273a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800273c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800274c:	643a      	str	r2, [r7, #64]	@ 0x40
 800274e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002750:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002752:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002754:	e841 2300 	strex	r3, r2, [r1]
 8002758:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800275a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e5      	bne.n	800272c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3314      	adds	r3, #20
 8002766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	e853 3f00 	ldrex	r3, [r3]
 800276e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3314      	adds	r3, #20
 800277e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002780:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002788:	e841 2300 	strex	r3, r2, [r1]
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e5      	bne.n	8002760 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	2b01      	cmp	r3, #1
 800279a:	d119      	bne.n	80027d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	e853 3f00 	ldrex	r3, [r3]
 80027aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f023 0310 	bic.w	r3, r3, #16
 80027b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	330c      	adds	r3, #12
 80027ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027bc:	61ba      	str	r2, [r7, #24]
 80027be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	6979      	ldr	r1, [r7, #20]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	613b      	str	r3, [r7, #16]
   return(result);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e5      	bne.n	800279c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027de:	bf00      	nop
 80027e0:	3754      	adds	r7, #84	@ 0x54
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f0:	b0c0      	sub	sp, #256	@ 0x100
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002808:	68d9      	ldr	r1, [r3, #12]
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	ea40 0301 	orr.w	r3, r0, r1
 8002814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	431a      	orrs	r2, r3
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	431a      	orrs	r2, r3
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002844:	f021 010c 	bic.w	r1, r1, #12
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002852:	430b      	orrs	r3, r1
 8002854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002866:	6999      	ldr	r1, [r3, #24]
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	ea40 0301 	orr.w	r3, r0, r1
 8002872:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ab8 <UART_SetConfig+0x2cc>)
 800287c:	429a      	cmp	r2, r3
 800287e:	d005      	beq.n	800288c <UART_SetConfig+0xa0>
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b8d      	ldr	r3, [pc, #564]	@ (8002abc <UART_SetConfig+0x2d0>)
 8002888:	429a      	cmp	r2, r3
 800288a:	d104      	bne.n	8002896 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800288c:	f7ff f9b0 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 8002890:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002894:	e003      	b.n	800289e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002896:	f7ff f997 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 800289a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028a8:	f040 810c 	bne.w	8002ac4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80028ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80028be:	4622      	mov	r2, r4
 80028c0:	462b      	mov	r3, r5
 80028c2:	1891      	adds	r1, r2, r2
 80028c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028c6:	415b      	adcs	r3, r3
 80028c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028ce:	4621      	mov	r1, r4
 80028d0:	eb12 0801 	adds.w	r8, r2, r1
 80028d4:	4629      	mov	r1, r5
 80028d6:	eb43 0901 	adc.w	r9, r3, r1
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ee:	4690      	mov	r8, r2
 80028f0:	4699      	mov	r9, r3
 80028f2:	4623      	mov	r3, r4
 80028f4:	eb18 0303 	adds.w	r3, r8, r3
 80028f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028fc:	462b      	mov	r3, r5
 80028fe:	eb49 0303 	adc.w	r3, r9, r3
 8002902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002912:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002916:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800291a:	460b      	mov	r3, r1
 800291c:	18db      	adds	r3, r3, r3
 800291e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002920:	4613      	mov	r3, r2
 8002922:	eb42 0303 	adc.w	r3, r2, r3
 8002926:	657b      	str	r3, [r7, #84]	@ 0x54
 8002928:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800292c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002930:	f7fd fcae 	bl	8000290 <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4b61      	ldr	r3, [pc, #388]	@ (8002ac0 <UART_SetConfig+0x2d4>)
 800293a:	fba3 2302 	umull	r2, r3, r3, r2
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	011c      	lsls	r4, r3, #4
 8002942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002946:	2200      	movs	r2, #0
 8002948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800294c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002950:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002954:	4642      	mov	r2, r8
 8002956:	464b      	mov	r3, r9
 8002958:	1891      	adds	r1, r2, r2
 800295a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800295c:	415b      	adcs	r3, r3
 800295e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002960:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002964:	4641      	mov	r1, r8
 8002966:	eb12 0a01 	adds.w	sl, r2, r1
 800296a:	4649      	mov	r1, r9
 800296c:	eb43 0b01 	adc.w	fp, r3, r1
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800297c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002984:	4692      	mov	sl, r2
 8002986:	469b      	mov	fp, r3
 8002988:	4643      	mov	r3, r8
 800298a:	eb1a 0303 	adds.w	r3, sl, r3
 800298e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002992:	464b      	mov	r3, r9
 8002994:	eb4b 0303 	adc.w	r3, fp, r3
 8002998:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029b0:	460b      	mov	r3, r1
 80029b2:	18db      	adds	r3, r3, r3
 80029b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80029b6:	4613      	mov	r3, r2
 80029b8:	eb42 0303 	adc.w	r3, r2, r3
 80029bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029c6:	f7fd fc63 	bl	8000290 <__aeabi_uldivmod>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <UART_SetConfig+0x2d4>)
 80029d2:	fba3 2301 	umull	r2, r3, r3, r1
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2264      	movs	r2, #100	@ 0x64
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	1acb      	subs	r3, r1, r3
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029e6:	4b36      	ldr	r3, [pc, #216]	@ (8002ac0 <UART_SetConfig+0x2d4>)
 80029e8:	fba3 2302 	umull	r2, r3, r3, r2
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029f4:	441c      	add	r4, r3
 80029f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a08:	4642      	mov	r2, r8
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	1891      	adds	r1, r2, r2
 8002a0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a10:	415b      	adcs	r3, r3
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a18:	4641      	mov	r1, r8
 8002a1a:	1851      	adds	r1, r2, r1
 8002a1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a1e:	4649      	mov	r1, r9
 8002a20:	414b      	adcs	r3, r1
 8002a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a30:	4659      	mov	r1, fp
 8002a32:	00cb      	lsls	r3, r1, #3
 8002a34:	4651      	mov	r1, sl
 8002a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a3a:	4651      	mov	r1, sl
 8002a3c:	00ca      	lsls	r2, r1, #3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	4642      	mov	r2, r8
 8002a46:	189b      	adds	r3, r3, r2
 8002a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a4c:	464b      	mov	r3, r9
 8002a4e:	460a      	mov	r2, r1
 8002a50:	eb42 0303 	adc.w	r3, r2, r3
 8002a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	18db      	adds	r3, r3, r3
 8002a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a72:	4613      	mov	r3, r2
 8002a74:	eb42 0303 	adc.w	r3, r2, r3
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a82:	f7fd fc05 	bl	8000290 <__aeabi_uldivmod>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <UART_SetConfig+0x2d4>)
 8002a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	2164      	movs	r1, #100	@ 0x64
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	3332      	adds	r3, #50	@ 0x32
 8002a9e:	4a08      	ldr	r2, [pc, #32]	@ (8002ac0 <UART_SetConfig+0x2d4>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	f003 0207 	and.w	r2, r3, #7
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4422      	add	r2, r4
 8002ab2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ab4:	e106      	b.n	8002cc4 <UART_SetConfig+0x4d8>
 8002ab6:	bf00      	nop
 8002ab8:	40011000 	.word	0x40011000
 8002abc:	40011400 	.word	0x40011400
 8002ac0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ace:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ad2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ad6:	4642      	mov	r2, r8
 8002ad8:	464b      	mov	r3, r9
 8002ada:	1891      	adds	r1, r2, r2
 8002adc:	6239      	str	r1, [r7, #32]
 8002ade:	415b      	adcs	r3, r3
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ae6:	4641      	mov	r1, r8
 8002ae8:	1854      	adds	r4, r2, r1
 8002aea:	4649      	mov	r1, r9
 8002aec:	eb43 0501 	adc.w	r5, r3, r1
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	00eb      	lsls	r3, r5, #3
 8002afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afe:	00e2      	lsls	r2, r4, #3
 8002b00:	4614      	mov	r4, r2
 8002b02:	461d      	mov	r5, r3
 8002b04:	4643      	mov	r3, r8
 8002b06:	18e3      	adds	r3, r4, r3
 8002b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b0c:	464b      	mov	r3, r9
 8002b0e:	eb45 0303 	adc.w	r3, r5, r3
 8002b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b32:	4629      	mov	r1, r5
 8002b34:	008b      	lsls	r3, r1, #2
 8002b36:	4621      	mov	r1, r4
 8002b38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	008a      	lsls	r2, r1, #2
 8002b40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b44:	f7fd fba4 	bl	8000290 <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4b60      	ldr	r3, [pc, #384]	@ (8002cd0 <UART_SetConfig+0x4e4>)
 8002b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	011c      	lsls	r4, r3, #4
 8002b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b68:	4642      	mov	r2, r8
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	1891      	adds	r1, r2, r2
 8002b6e:	61b9      	str	r1, [r7, #24]
 8002b70:	415b      	adcs	r3, r3
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b78:	4641      	mov	r1, r8
 8002b7a:	1851      	adds	r1, r2, r1
 8002b7c:	6139      	str	r1, [r7, #16]
 8002b7e:	4649      	mov	r1, r9
 8002b80:	414b      	adcs	r3, r1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b90:	4659      	mov	r1, fp
 8002b92:	00cb      	lsls	r3, r1, #3
 8002b94:	4651      	mov	r1, sl
 8002b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	00ca      	lsls	r2, r1, #3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4642      	mov	r2, r8
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bac:	464b      	mov	r3, r9
 8002bae:	460a      	mov	r2, r1
 8002bb0:	eb42 0303 	adc.w	r3, r2, r3
 8002bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	008b      	lsls	r3, r1, #2
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bda:	4641      	mov	r1, r8
 8002bdc:	008a      	lsls	r2, r1, #2
 8002bde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002be2:	f7fd fb55 	bl	8000290 <__aeabi_uldivmod>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	4b38      	ldr	r3, [pc, #224]	@ (8002cd0 <UART_SetConfig+0x4e4>)
 8002bee:	fba3 2301 	umull	r2, r3, r3, r1
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2264      	movs	r2, #100	@ 0x64
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	1acb      	subs	r3, r1, r3
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	3332      	adds	r3, #50	@ 0x32
 8002c00:	4a33      	ldr	r2, [pc, #204]	@ (8002cd0 <UART_SetConfig+0x4e4>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c0c:	441c      	add	r4, r3
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c12:	2200      	movs	r2, #0
 8002c14:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c16:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	464b      	mov	r3, r9
 8002c20:	1891      	adds	r1, r2, r2
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	415b      	adcs	r3, r3
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	1851      	adds	r1, r2, r1
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	4649      	mov	r1, r9
 8002c34:	414b      	adcs	r3, r1
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c44:	4659      	mov	r1, fp
 8002c46:	00cb      	lsls	r3, r1, #3
 8002c48:	4651      	mov	r1, sl
 8002c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c4e:	4651      	mov	r1, sl
 8002c50:	00ca      	lsls	r2, r1, #3
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	4642      	mov	r2, r8
 8002c5a:	189b      	adds	r3, r3, r2
 8002c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c5e:	464b      	mov	r3, r9
 8002c60:	460a      	mov	r2, r1
 8002c62:	eb42 0303 	adc.w	r3, r2, r3
 8002c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c72:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c80:	4649      	mov	r1, r9
 8002c82:	008b      	lsls	r3, r1, #2
 8002c84:	4641      	mov	r1, r8
 8002c86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c8a:	4641      	mov	r1, r8
 8002c8c:	008a      	lsls	r2, r1, #2
 8002c8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c92:	f7fd fafd 	bl	8000290 <__aeabi_uldivmod>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd0 <UART_SetConfig+0x4e4>)
 8002c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	2164      	movs	r1, #100	@ 0x64
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	3332      	adds	r3, #50	@ 0x32
 8002cae:	4a08      	ldr	r2, [pc, #32]	@ (8002cd0 <UART_SetConfig+0x4e4>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	f003 020f 	and.w	r2, r3, #15
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4422      	add	r2, r4
 8002cc2:	609a      	str	r2, [r3, #8]
}
 8002cc4:	bf00      	nop
 8002cc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd0:	51eb851f 	.word	0x51eb851f

08002cd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002cd8:	4904      	ldr	r1, [pc, #16]	@ (8002cec <MX_FATFS_Init+0x18>)
 8002cda:	4805      	ldr	r0, [pc, #20]	@ (8002cf0 <MX_FATFS_Init+0x1c>)
 8002cdc:	f003 f91c 	bl	8005f18 <FATFS_LinkDriver>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b03      	ldr	r3, [pc, #12]	@ (8002cf4 <MX_FATFS_Init+0x20>)
 8002ce6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000023c 	.word	0x2000023c
 8002cf0:	2000000c 	.word	0x2000000c
 8002cf4:	20000238 	.word	0x20000238

08002cf8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002cfc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 f9d3 	bl	80030c0 <USER_SPI_initialize>
 8002d1a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fab1 	bl	8003298 <USER_SPI_status>
 8002d36:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 8002d50:	7bf8      	ldrb	r0, [r7, #15]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	f000 fab4 	bl	80032c4 <USER_SPI_read>
 8002d5c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8002d76:	7bf8      	ldrb	r0, [r7, #15]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	f000 fb07 	bl	8003390 <USER_SPI_write>
 8002d82:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	603a      	str	r2, [r7, #0]
 8002d96:	71fb      	strb	r3, [r7, #7]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8002d9c:	79b9      	ldrb	r1, [r7, #6]
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fb70 	bl	8003488 <USER_SPI_ioctl>
 8002da8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002dbc:	f7fd ffe0 	bl	8000d80 <HAL_GetTick>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4a04      	ldr	r2, [pc, #16]	@ (8002dd4 <SPI_Timer_On+0x20>)
 8002dc4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <SPI_Timer_On+0x24>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6013      	str	r3, [r2, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000244 	.word	0x20000244
 8002dd8:	20000248 	.word	0x20000248

08002ddc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002de0:	f7fd ffce 	bl	8000d80 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <SPI_Timer_Status+0x24>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <SPI_Timer_Status+0x28>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	bf34      	ite	cc
 8002df4:	2301      	movcc	r3, #1
 8002df6:	2300      	movcs	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000244 	.word	0x20000244
 8002e04:	20000248 	.word	0x20000248

08002e08 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002e12:	f107 020f 	add.w	r2, r7, #15
 8002e16:	1df9      	adds	r1, r7, #7
 8002e18:	2332      	movs	r3, #50	@ 0x32
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	4804      	ldr	r0, [pc, #16]	@ (8002e30 <xchg_spi+0x28>)
 8002e20:	f7ff f8c7 	bl	8001fb2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000090 	.word	0x20000090

08002e34 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e00a      	b.n	8002e5a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	18d4      	adds	r4, r2, r3
 8002e4a:	20ff      	movs	r0, #255	@ 0xff
 8002e4c:	f7ff ffdc 	bl	8002e08 <xchg_spi>
 8002e50:	4603      	mov	r3, r0
 8002e52:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d3f0      	bcc.n	8002e44 <rcvr_spi_multi+0x10>
	}
}
 8002e62:	bf00      	nop
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd90      	pop	{r4, r7, pc}

08002e6c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4803      	ldr	r0, [pc, #12]	@ (8002e90 <xmit_spi_multi+0x24>)
 8002e82:	f7fe ff52 	bl	8001d2a <HAL_SPI_Transmit>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000090 	.word	0x20000090

08002e94 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002e9c:	f7fd ff70 	bl	8000d80 <HAL_GetTick>
 8002ea0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002ea6:	20ff      	movs	r0, #255	@ 0xff
 8002ea8:	f7ff ffae 	bl	8002e08 <xchg_spi>
 8002eac:	4603      	mov	r3, r0
 8002eae:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2bff      	cmp	r3, #255	@ 0xff
 8002eb4:	d007      	beq.n	8002ec6 <wait_ready+0x32>
 8002eb6:	f7fd ff63 	bl	8000d80 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d8ef      	bhi.n	8002ea6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2bff      	cmp	r3, #255	@ 0xff
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2140      	movs	r1, #64	@ 0x40
 8002ee4:	4803      	ldr	r0, [pc, #12]	@ (8002ef4 <despiselect+0x18>)
 8002ee6:	f7fe f9e5 	bl	80012b4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002eea:	20ff      	movs	r0, #255	@ 0xff
 8002eec:	f7ff ff8c 	bl	8002e08 <xchg_spi>

}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40020400 	.word	0x40020400

08002ef8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002efc:	2200      	movs	r2, #0
 8002efe:	2140      	movs	r1, #64	@ 0x40
 8002f00:	4809      	ldr	r0, [pc, #36]	@ (8002f28 <spiselect+0x30>)
 8002f02:	f7fe f9d7 	bl	80012b4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002f06:	20ff      	movs	r0, #255	@ 0xff
 8002f08:	f7ff ff7e 	bl	8002e08 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002f0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f10:	f7ff ffc0 	bl	8002e94 <wait_ready>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <spiselect+0x26>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e002      	b.n	8002f24 <spiselect+0x2c>

	despiselect();
 8002f1e:	f7ff ffdd 	bl	8002edc <despiselect>
	return 0;	/* Timeout */
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40020400 	.word	0x40020400

08002f2c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002f36:	20c8      	movs	r0, #200	@ 0xc8
 8002f38:	f7ff ff3c 	bl	8002db4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002f3c:	20ff      	movs	r0, #255	@ 0xff
 8002f3e:	f7ff ff63 	bl	8002e08 <xchg_spi>
 8002f42:	4603      	mov	r3, r0
 8002f44:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2bff      	cmp	r3, #255	@ 0xff
 8002f4a:	d104      	bne.n	8002f56 <rcvr_datablock+0x2a>
 8002f4c:	f7ff ff46 	bl	8002ddc <SPI_Timer_Status>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f2      	bne.n	8002f3c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2bfe      	cmp	r3, #254	@ 0xfe
 8002f5a:	d001      	beq.n	8002f60 <rcvr_datablock+0x34>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e00a      	b.n	8002f76 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ff66 	bl	8002e34 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002f68:	20ff      	movs	r0, #255	@ 0xff
 8002f6a:	f7ff ff4d 	bl	8002e08 <xchg_spi>
 8002f6e:	20ff      	movs	r0, #255	@ 0xff
 8002f70:	f7ff ff4a 	bl	8002e08 <xchg_spi>

	return 1;						/* Function succeeded */
 8002f74:	2301      	movs	r3, #1
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002f8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f8e:	f7ff ff81 	bl	8002e94 <wait_ready>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <xmit_datablock+0x1e>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e01e      	b.n	8002fda <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff32 	bl	8002e08 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	2bfd      	cmp	r3, #253	@ 0xfd
 8002fa8:	d016      	beq.n	8002fd8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002faa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ff5c 	bl	8002e6c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002fb4:	20ff      	movs	r0, #255	@ 0xff
 8002fb6:	f7ff ff27 	bl	8002e08 <xchg_spi>
 8002fba:	20ff      	movs	r0, #255	@ 0xff
 8002fbc:	f7ff ff24 	bl	8002e08 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002fc0:	20ff      	movs	r0, #255	@ 0xff
 8002fc2:	f7ff ff21 	bl	8002e08 <xchg_spi>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	2b05      	cmp	r3, #5
 8002fd2:	d001      	beq.n	8002fd8 <xmit_datablock+0x5a>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <xmit_datablock+0x5c>
	}
	return 1;
 8002fd8:	2301      	movs	r3, #1
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	6039      	str	r1, [r7, #0]
 8002fec:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da0e      	bge.n	8003014 <send_cmd+0x32>
		cmd &= 0x7F;
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ffc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002ffe:	2100      	movs	r1, #0
 8003000:	2037      	movs	r0, #55	@ 0x37
 8003002:	f7ff ffee 	bl	8002fe2 <send_cmd>
 8003006:	4603      	mov	r3, r0
 8003008:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800300a:	7bbb      	ldrb	r3, [r7, #14]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d901      	bls.n	8003014 <send_cmd+0x32>
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	e051      	b.n	80030b8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d008      	beq.n	800302c <send_cmd+0x4a>
		despiselect();
 800301a:	f7ff ff5f 	bl	8002edc <despiselect>
		if (!spiselect()) return 0xFF;
 800301e:	f7ff ff6b 	bl	8002ef8 <spiselect>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <send_cmd+0x4a>
 8003028:	23ff      	movs	r3, #255	@ 0xff
 800302a:	e045      	b.n	80030b8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fee7 	bl	8002e08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	0e1b      	lsrs	r3, r3, #24
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fee1 	bl	8002e08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	b2db      	uxtb	r3, r3
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fedb 	bl	8002e08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fed5 	bl	8002e08 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fed0 	bl	8002e08 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <send_cmd+0x94>
 8003072:	2395      	movs	r3, #149	@ 0x95
 8003074:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d101      	bne.n	8003080 <send_cmd+0x9e>
 800307c:	2387      	movs	r3, #135	@ 0x87
 800307e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fec0 	bl	8002e08 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d102      	bne.n	8003094 <send_cmd+0xb2>
 800308e:	20ff      	movs	r0, #255	@ 0xff
 8003090:	f7ff feba 	bl	8002e08 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003094:	230a      	movs	r3, #10
 8003096:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003098:	20ff      	movs	r0, #255	@ 0xff
 800309a:	f7ff feb5 	bl	8002e08 <xchg_spi>
 800309e:	4603      	mov	r3, r0
 80030a0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80030a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	da05      	bge.n	80030b6 <send_cmd+0xd4>
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <send_cmd+0xb6>

	return res;							/* Return received response */
 80030b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <USER_SPI_initialize+0x14>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0d6      	b.n	8003282 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80030d4:	4b6d      	ldr	r3, [pc, #436]	@ (800328c <USER_SPI_initialize+0x1cc>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <USER_SPI_initialize+0x2a>
 80030e2:	4b6a      	ldr	r3, [pc, #424]	@ (800328c <USER_SPI_initialize+0x1cc>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e0cb      	b.n	8003282 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80030ea:	4b69      	ldr	r3, [pc, #420]	@ (8003290 <USER_SPI_initialize+0x1d0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80030f4:	4b66      	ldr	r3, [pc, #408]	@ (8003290 <USER_SPI_initialize+0x1d0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80030fc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80030fe:	230a      	movs	r3, #10
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e005      	b.n	8003110 <USER_SPI_initialize+0x50>
 8003104:	20ff      	movs	r0, #255	@ 0xff
 8003106:	f7ff fe7f 	bl	8002e08 <xchg_spi>
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	3b01      	subs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f6      	bne.n	8003104 <USER_SPI_initialize+0x44>

	ty = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800311a:	2100      	movs	r1, #0
 800311c:	2000      	movs	r0, #0
 800311e:	f7ff ff60 	bl	8002fe2 <send_cmd>
 8003122:	4603      	mov	r3, r0
 8003124:	2b01      	cmp	r3, #1
 8003126:	f040 808b 	bne.w	8003240 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800312a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800312e:	f7ff fe41 	bl	8002db4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003132:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003136:	2008      	movs	r0, #8
 8003138:	f7ff ff53 	bl	8002fe2 <send_cmd>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d151      	bne.n	80031e6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	e00d      	b.n	8003164 <USER_SPI_initialize+0xa4>
 8003148:	7bfc      	ldrb	r4, [r7, #15]
 800314a:	20ff      	movs	r0, #255	@ 0xff
 800314c:	f7ff fe5c 	bl	8002e08 <xchg_spi>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	f104 0310 	add.w	r3, r4, #16
 8003158:	443b      	add	r3, r7
 800315a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	3301      	adds	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d9ee      	bls.n	8003148 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800316a:	7abb      	ldrb	r3, [r7, #10]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d167      	bne.n	8003240 <USER_SPI_initialize+0x180>
 8003170:	7afb      	ldrb	r3, [r7, #11]
 8003172:	2baa      	cmp	r3, #170	@ 0xaa
 8003174:	d164      	bne.n	8003240 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003176:	bf00      	nop
 8003178:	f7ff fe30 	bl	8002ddc <SPI_Timer_Status>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <USER_SPI_initialize+0xd2>
 8003182:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003186:	20a9      	movs	r0, #169	@ 0xa9
 8003188:	f7ff ff2b 	bl	8002fe2 <send_cmd>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f2      	bne.n	8003178 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003192:	f7ff fe23 	bl	8002ddc <SPI_Timer_Status>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d051      	beq.n	8003240 <USER_SPI_initialize+0x180>
 800319c:	2100      	movs	r1, #0
 800319e:	203a      	movs	r0, #58	@ 0x3a
 80031a0:	f7ff ff1f 	bl	8002fe2 <send_cmd>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d14a      	bne.n	8003240 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]
 80031ae:	e00d      	b.n	80031cc <USER_SPI_initialize+0x10c>
 80031b0:	7bfc      	ldrb	r4, [r7, #15]
 80031b2:	20ff      	movs	r0, #255	@ 0xff
 80031b4:	f7ff fe28 	bl	8002e08 <xchg_spi>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	f104 0310 	add.w	r3, r4, #16
 80031c0:	443b      	add	r3, r7
 80031c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	3301      	adds	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d9ee      	bls.n	80031b0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80031d2:	7a3b      	ldrb	r3, [r7, #8]
 80031d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <USER_SPI_initialize+0x120>
 80031dc:	230c      	movs	r3, #12
 80031de:	e000      	b.n	80031e2 <USER_SPI_initialize+0x122>
 80031e0:	2304      	movs	r3, #4
 80031e2:	737b      	strb	r3, [r7, #13]
 80031e4:	e02c      	b.n	8003240 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80031e6:	2100      	movs	r1, #0
 80031e8:	20a9      	movs	r0, #169	@ 0xa9
 80031ea:	f7ff fefa 	bl	8002fe2 <send_cmd>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d804      	bhi.n	80031fe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80031f4:	2302      	movs	r3, #2
 80031f6:	737b      	strb	r3, [r7, #13]
 80031f8:	23a9      	movs	r3, #169	@ 0xa9
 80031fa:	73bb      	strb	r3, [r7, #14]
 80031fc:	e003      	b.n	8003206 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80031fe:	2301      	movs	r3, #1
 8003200:	737b      	strb	r3, [r7, #13]
 8003202:	2301      	movs	r3, #1
 8003204:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003206:	bf00      	nop
 8003208:	f7ff fde8 	bl	8002ddc <SPI_Timer_Status>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <USER_SPI_initialize+0x162>
 8003212:	7bbb      	ldrb	r3, [r7, #14]
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fee3 	bl	8002fe2 <send_cmd>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f2      	bne.n	8003208 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003222:	f7ff fddb 	bl	8002ddc <SPI_Timer_Status>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <USER_SPI_initialize+0x17c>
 800322c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003230:	2010      	movs	r0, #16
 8003232:	f7ff fed6 	bl	8002fe2 <send_cmd>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <USER_SPI_initialize+0x180>
				ty = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003240:	4a14      	ldr	r2, [pc, #80]	@ (8003294 <USER_SPI_initialize+0x1d4>)
 8003242:	7b7b      	ldrb	r3, [r7, #13]
 8003244:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003246:	f7ff fe49 	bl	8002edc <despiselect>

	if (ty) {			/* OK */
 800324a:	7b7b      	ldrb	r3, [r7, #13]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003250:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <USER_SPI_initialize+0x1d0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800325a:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <USER_SPI_initialize+0x1d0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0210 	orr.w	r2, r2, #16
 8003262:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003264:	4b09      	ldr	r3, [pc, #36]	@ (800328c <USER_SPI_initialize+0x1cc>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	b2da      	uxtb	r2, r3
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <USER_SPI_initialize+0x1cc>)
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e002      	b.n	800327c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003276:	4b05      	ldr	r3, [pc, #20]	@ (800328c <USER_SPI_initialize+0x1cc>)
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800327c:	4b03      	ldr	r3, [pc, #12]	@ (800328c <USER_SPI_initialize+0x1cc>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bd90      	pop	{r4, r7, pc}
 800328a:	bf00      	nop
 800328c:	20000020 	.word	0x20000020
 8003290:	20000090 	.word	0x20000090
 8003294:	20000240 	.word	0x20000240

08003298 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <USER_SPI_status+0x14>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e002      	b.n	80032b2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80032ac:	4b04      	ldr	r3, [pc, #16]	@ (80032c0 <USER_SPI_status+0x28>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000020 	.word	0x20000020

080032c4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <USER_SPI_read+0x1c>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <USER_SPI_read+0x20>
 80032e0:	2304      	movs	r3, #4
 80032e2:	e04d      	b.n	8003380 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80032e4:	4b28      	ldr	r3, [pc, #160]	@ (8003388 <USER_SPI_read+0xc4>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <USER_SPI_read+0x32>
 80032f2:	2303      	movs	r3, #3
 80032f4:	e044      	b.n	8003380 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80032f6:	4b25      	ldr	r3, [pc, #148]	@ (800338c <USER_SPI_read+0xc8>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <USER_SPI_read+0x44>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	025b      	lsls	r3, r3, #9
 8003306:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d111      	bne.n	8003332 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	2011      	movs	r0, #17
 8003312:	f7ff fe66 	bl	8002fe2 <send_cmd>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d129      	bne.n	8003370 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800331c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003320:	68b8      	ldr	r0, [r7, #8]
 8003322:	f7ff fe03 	bl	8002f2c <rcvr_datablock>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d021      	beq.n	8003370 <USER_SPI_read+0xac>
			count = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	e01e      	b.n	8003370 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	2012      	movs	r0, #18
 8003336:	f7ff fe54 	bl	8002fe2 <send_cmd>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d117      	bne.n	8003370 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003340:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003344:	68b8      	ldr	r0, [r7, #8]
 8003346:	f7ff fdf1 	bl	8002f2c <rcvr_datablock>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <USER_SPI_read+0xa2>
				buff += 512;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003356:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	3b01      	subs	r3, #1
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ed      	bne.n	8003340 <USER_SPI_read+0x7c>
 8003364:	e000      	b.n	8003368 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003366:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003368:	2100      	movs	r1, #0
 800336a:	200c      	movs	r0, #12
 800336c:	f7ff fe39 	bl	8002fe2 <send_cmd>
		}
	}
	despiselect();
 8003370:	f7ff fdb4 	bl	8002edc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	bf14      	ite	ne
 800337a:	2301      	movne	r3, #1
 800337c:	2300      	moveq	r3, #0
 800337e:	b2db      	uxtb	r3, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000020 	.word	0x20000020
 800338c:	20000240 	.word	0x20000240

08003390 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4603      	mov	r3, r0
 800339e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <USER_SPI_write+0x1c>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <USER_SPI_write+0x20>
 80033ac:	2304      	movs	r3, #4
 80033ae:	e063      	b.n	8003478 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80033b0:	4b33      	ldr	r3, [pc, #204]	@ (8003480 <USER_SPI_write+0xf0>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <USER_SPI_write+0x32>
 80033be:	2303      	movs	r3, #3
 80033c0:	e05a      	b.n	8003478 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80033c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003480 <USER_SPI_write+0xf0>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <USER_SPI_write+0x44>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e051      	b.n	8003478 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80033d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <USER_SPI_write+0xf4>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <USER_SPI_write+0x56>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	025b      	lsls	r3, r3, #9
 80033e4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d110      	bne.n	800340e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	2018      	movs	r0, #24
 80033f0:	f7ff fdf7 	bl	8002fe2 <send_cmd>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d136      	bne.n	8003468 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80033fa:	21fe      	movs	r1, #254	@ 0xfe
 80033fc:	68b8      	ldr	r0, [r7, #8]
 80033fe:	f7ff fdbe 	bl	8002f7e <xmit_datablock>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d02f      	beq.n	8003468 <USER_SPI_write+0xd8>
			count = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	e02c      	b.n	8003468 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800340e:	4b1d      	ldr	r3, [pc, #116]	@ (8003484 <USER_SPI_write+0xf4>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	f003 0306 	and.w	r3, r3, #6
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <USER_SPI_write+0x92>
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	2097      	movs	r0, #151	@ 0x97
 800341e:	f7ff fde0 	bl	8002fe2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	2019      	movs	r0, #25
 8003426:	f7ff fddc 	bl	8002fe2 <send_cmd>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11b      	bne.n	8003468 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003430:	21fc      	movs	r1, #252	@ 0xfc
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f7ff fda3 	bl	8002f7e <xmit_datablock>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <USER_SPI_write+0xc4>
				buff += 512;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003444:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	3b01      	subs	r3, #1
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1ee      	bne.n	8003430 <USER_SPI_write+0xa0>
 8003452:	e000      	b.n	8003456 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003454:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003456:	21fd      	movs	r1, #253	@ 0xfd
 8003458:	2000      	movs	r0, #0
 800345a:	f7ff fd90 	bl	8002f7e <xmit_datablock>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <USER_SPI_write+0xd8>
 8003464:	2301      	movs	r3, #1
 8003466:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003468:	f7ff fd38 	bl	8002edc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000020 	.word	0x20000020
 8003484:	20000240 	.word	0x20000240

08003488 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	@ 0x30
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	603a      	str	r2, [r7, #0]
 8003492:	71fb      	strb	r3, [r7, #7]
 8003494:	460b      	mov	r3, r1
 8003496:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <USER_SPI_ioctl+0x1a>
 800349e:	2304      	movs	r3, #4
 80034a0:	e15a      	b.n	8003758 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80034a2:	4baf      	ldr	r3, [pc, #700]	@ (8003760 <USER_SPI_ioctl+0x2d8>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <USER_SPI_ioctl+0x2c>
 80034b0:	2303      	movs	r3, #3
 80034b2:	e151      	b.n	8003758 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80034ba:	79bb      	ldrb	r3, [r7, #6]
 80034bc:	2b04      	cmp	r3, #4
 80034be:	f200 8136 	bhi.w	800372e <USER_SPI_ioctl+0x2a6>
 80034c2:	a201      	add	r2, pc, #4	@ (adr r2, 80034c8 <USER_SPI_ioctl+0x40>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	080034dd 	.word	0x080034dd
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	0800372f 	.word	0x0800372f
 80034d4:	0800359d 	.word	0x0800359d
 80034d8:	08003693 	.word	0x08003693
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80034dc:	f7ff fd0c 	bl	8002ef8 <spiselect>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8127 	beq.w	8003736 <USER_SPI_ioctl+0x2ae>
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80034ee:	e122      	b.n	8003736 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80034f0:	2100      	movs	r1, #0
 80034f2:	2009      	movs	r0, #9
 80034f4:	f7ff fd75 	bl	8002fe2 <send_cmd>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 811d 	bne.w	800373a <USER_SPI_ioctl+0x2b2>
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	2110      	movs	r1, #16
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fd10 	bl	8002f2c <rcvr_datablock>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8113 	beq.w	800373a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003514:	7b3b      	ldrb	r3, [r7, #12]
 8003516:	099b      	lsrs	r3, r3, #6
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d111      	bne.n	8003542 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800351e:	7d7b      	ldrb	r3, [r7, #21]
 8003520:	461a      	mov	r2, r3
 8003522:	7d3b      	ldrb	r3, [r7, #20]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	4413      	add	r3, r2
 8003528:	461a      	mov	r2, r3
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8003532:	4413      	add	r3, r2
 8003534:	3301      	adds	r3, #1
 8003536:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	029a      	lsls	r2, r3, #10
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e028      	b.n	8003594 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003542:	7c7b      	ldrb	r3, [r7, #17]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	b2da      	uxtb	r2, r3
 800354a:	7dbb      	ldrb	r3, [r7, #22]
 800354c:	09db      	lsrs	r3, r3, #7
 800354e:	b2db      	uxtb	r3, r3
 8003550:	4413      	add	r3, r2
 8003552:	b2da      	uxtb	r2, r3
 8003554:	7d7b      	ldrb	r3, [r7, #21]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0306 	and.w	r3, r3, #6
 800355e:	b2db      	uxtb	r3, r3
 8003560:	4413      	add	r3, r2
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3302      	adds	r3, #2
 8003566:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800356a:	7d3b      	ldrb	r3, [r7, #20]
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	441a      	add	r2, r3
 8003578:	7cbb      	ldrb	r3, [r7, #18]
 800357a:	029b      	lsls	r3, r3, #10
 800357c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003580:	4413      	add	r3, r2
 8003582:	3301      	adds	r3, #1
 8003584:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003586:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800358a:	3b09      	subs	r3, #9
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	409a      	lsls	r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800359a:	e0ce      	b.n	800373a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800359c:	4b71      	ldr	r3, [pc, #452]	@ (8003764 <USER_SPI_ioctl+0x2dc>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d031      	beq.n	800360c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80035a8:	2100      	movs	r1, #0
 80035aa:	208d      	movs	r0, #141	@ 0x8d
 80035ac:	f7ff fd19 	bl	8002fe2 <send_cmd>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 80c3 	bne.w	800373e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80035b8:	20ff      	movs	r0, #255	@ 0xff
 80035ba:	f7ff fc25 	bl	8002e08 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80035be:	f107 030c 	add.w	r3, r7, #12
 80035c2:	2110      	movs	r1, #16
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fcb1 	bl	8002f2c <rcvr_datablock>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80b6 	beq.w	800373e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80035d2:	2330      	movs	r3, #48	@ 0x30
 80035d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80035d8:	e007      	b.n	80035ea <USER_SPI_ioctl+0x162>
 80035da:	20ff      	movs	r0, #255	@ 0xff
 80035dc:	f7ff fc14 	bl	8002e08 <xchg_spi>
 80035e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035e4:	3b01      	subs	r3, #1
 80035e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80035ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f3      	bne.n	80035da <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80035f2:	7dbb      	ldrb	r3, [r7, #22]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	2310      	movs	r3, #16
 80035fc:	fa03 f202 	lsl.w	r2, r3, r2
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800360a:	e098      	b.n	800373e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800360c:	2100      	movs	r1, #0
 800360e:	2009      	movs	r0, #9
 8003610:	f7ff fce7 	bl	8002fe2 <send_cmd>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8091 	bne.w	800373e <USER_SPI_ioctl+0x2b6>
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	2110      	movs	r1, #16
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fc82 	bl	8002f2c <rcvr_datablock>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8087 	beq.w	800373e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003630:	4b4c      	ldr	r3, [pc, #304]	@ (8003764 <USER_SPI_ioctl+0x2dc>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d012      	beq.n	8003662 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800363c:	7dbb      	ldrb	r3, [r7, #22]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003644:	7dfa      	ldrb	r2, [r7, #23]
 8003646:	09d2      	lsrs	r2, r2, #7
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	4413      	add	r3, r2
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	7e7b      	ldrb	r3, [r7, #25]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	b2db      	uxtb	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	461a      	mov	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e013      	b.n	800368a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003662:	7dbb      	ldrb	r3, [r7, #22]
 8003664:	109b      	asrs	r3, r3, #2
 8003666:	b29b      	uxth	r3, r3
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	3301      	adds	r3, #1
 800366e:	7dfa      	ldrb	r2, [r7, #23]
 8003670:	00d2      	lsls	r2, r2, #3
 8003672:	f002 0218 	and.w	r2, r2, #24
 8003676:	7df9      	ldrb	r1, [r7, #23]
 8003678:	0949      	lsrs	r1, r1, #5
 800367a:	b2c9      	uxtb	r1, r1
 800367c:	440a      	add	r2, r1
 800367e:	3201      	adds	r2, #1
 8003680:	fb02 f303 	mul.w	r3, r2, r3
 8003684:	461a      	mov	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003690:	e055      	b.n	800373e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003692:	4b34      	ldr	r3, [pc, #208]	@ (8003764 <USER_SPI_ioctl+0x2dc>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	f003 0306 	and.w	r3, r3, #6
 800369a:	2b00      	cmp	r3, #0
 800369c:	d051      	beq.n	8003742 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800369e:	f107 020c 	add.w	r2, r7, #12
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	210b      	movs	r1, #11
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff feee 	bl	8003488 <USER_SPI_ioctl>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d149      	bne.n	8003746 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80036b2:	7b3b      	ldrb	r3, [r7, #12]
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <USER_SPI_ioctl+0x23e>
 80036bc:	7dbb      	ldrb	r3, [r7, #22]
 80036be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d041      	beq.n	800374a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	623b      	str	r3, [r7, #32]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80036d6:	4b23      	ldr	r3, [pc, #140]	@ (8003764 <USER_SPI_ioctl+0x2dc>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	025b      	lsls	r3, r3, #9
 80036e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	025b      	lsls	r3, r3, #9
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80036ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f0:	2020      	movs	r0, #32
 80036f2:	f7ff fc76 	bl	8002fe2 <send_cmd>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d128      	bne.n	800374e <USER_SPI_ioctl+0x2c6>
 80036fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036fe:	2021      	movs	r0, #33	@ 0x21
 8003700:	f7ff fc6f 	bl	8002fe2 <send_cmd>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d121      	bne.n	800374e <USER_SPI_ioctl+0x2c6>
 800370a:	2100      	movs	r1, #0
 800370c:	2026      	movs	r0, #38	@ 0x26
 800370e:	f7ff fc68 	bl	8002fe2 <send_cmd>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11a      	bne.n	800374e <USER_SPI_ioctl+0x2c6>
 8003718:	f247 5030 	movw	r0, #30000	@ 0x7530
 800371c:	f7ff fbba 	bl	8002e94 <wait_ready>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d013      	beq.n	800374e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003726:	2300      	movs	r3, #0
 8003728:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800372c:	e00f      	b.n	800374e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800372e:	2304      	movs	r3, #4
 8003730:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003734:	e00c      	b.n	8003750 <USER_SPI_ioctl+0x2c8>
		break;
 8003736:	bf00      	nop
 8003738:	e00a      	b.n	8003750 <USER_SPI_ioctl+0x2c8>
		break;
 800373a:	bf00      	nop
 800373c:	e008      	b.n	8003750 <USER_SPI_ioctl+0x2c8>
		break;
 800373e:	bf00      	nop
 8003740:	e006      	b.n	8003750 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003742:	bf00      	nop
 8003744:	e004      	b.n	8003750 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003746:	bf00      	nop
 8003748:	e002      	b.n	8003750 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <USER_SPI_ioctl+0x2c8>
		break;
 800374e:	bf00      	nop
	}

	despiselect();
 8003750:	f7ff fbc4 	bl	8002edc <despiselect>

	return res;
 8003754:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003758:	4618      	mov	r0, r3
 800375a:	3730      	adds	r7, #48	@ 0x30
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000020 	.word	0x20000020
 8003764:	20000240 	.word	0x20000240

08003768 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	4a08      	ldr	r2, [pc, #32]	@ (8003798 <disk_status+0x30>)
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	79fa      	ldrb	r2, [r7, #7]
 8003780:	4905      	ldr	r1, [pc, #20]	@ (8003798 <disk_status+0x30>)
 8003782:	440a      	add	r2, r1
 8003784:	7a12      	ldrb	r2, [r2, #8]
 8003786:	4610      	mov	r0, r2
 8003788:	4798      	blx	r3
 800378a:	4603      	mov	r3, r0
 800378c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800378e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000274 	.word	0x20000274

0800379c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4a0e      	ldr	r2, [pc, #56]	@ (80037e8 <disk_initialize+0x4c>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d114      	bne.n	80037de <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	4a0c      	ldr	r2, [pc, #48]	@ (80037e8 <disk_initialize+0x4c>)
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	79fa      	ldrb	r2, [r7, #7]
 80037c2:	4909      	ldr	r1, [pc, #36]	@ (80037e8 <disk_initialize+0x4c>)
 80037c4:	440a      	add	r2, r1
 80037c6:	7a12      	ldrb	r2, [r2, #8]
 80037c8:	4610      	mov	r0, r2
 80037ca:	4798      	blx	r3
 80037cc:	4603      	mov	r3, r0
 80037ce:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	4a03      	ldr	r2, [pc, #12]	@ (80037e8 <disk_initialize+0x4c>)
 80037da:	2101      	movs	r1, #1
 80037dc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000274 	.word	0x20000274

080037ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003828 <disk_read+0x3c>)
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	689c      	ldr	r4, [r3, #8]
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	4a07      	ldr	r2, [pc, #28]	@ (8003828 <disk_read+0x3c>)
 800380c:	4413      	add	r3, r2
 800380e:	7a18      	ldrb	r0, [r3, #8]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	47a0      	blx	r4
 8003818:	4603      	mov	r3, r0
 800381a:	75fb      	strb	r3, [r7, #23]
  return res;
 800381c:	7dfb      	ldrb	r3, [r7, #23]
}
 800381e:	4618      	mov	r0, r3
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	bf00      	nop
 8003828:	20000274 	.word	0x20000274

0800382c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	4603      	mov	r3, r0
 800383a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <disk_write+0x3c>)
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	68dc      	ldr	r4, [r3, #12]
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	4a07      	ldr	r2, [pc, #28]	@ (8003868 <disk_write+0x3c>)
 800384c:	4413      	add	r3, r2
 800384e:	7a18      	ldrb	r0, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	47a0      	blx	r4
 8003858:	4603      	mov	r3, r0
 800385a:	75fb      	strb	r3, [r7, #23]
  return res;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
}
 800385e:	4618      	mov	r0, r3
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd90      	pop	{r4, r7, pc}
 8003866:	bf00      	nop
 8003868:	20000274 	.word	0x20000274

0800386c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	603a      	str	r2, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
 8003878:	460b      	mov	r3, r1
 800387a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	4a09      	ldr	r2, [pc, #36]	@ (80038a4 <disk_ioctl+0x38>)
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	79fa      	ldrb	r2, [r7, #7]
 800388a:	4906      	ldr	r1, [pc, #24]	@ (80038a4 <disk_ioctl+0x38>)
 800388c:	440a      	add	r2, r1
 800388e:	7a10      	ldrb	r0, [r2, #8]
 8003890:	79b9      	ldrb	r1, [r7, #6]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	4798      	blx	r3
 8003896:	4603      	mov	r3, r0
 8003898:	73fb      	strb	r3, [r7, #15]
  return res;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000274 	.word	0x20000274

080038a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3301      	adds	r3, #1
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80038b8:	89fb      	ldrh	r3, [r7, #14]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	b21a      	sxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	b21b      	sxth	r3, r3
 80038c4:	4313      	orrs	r3, r2
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80038ca:	89fb      	ldrh	r3, [r7, #14]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3303      	adds	r3, #3
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	3202      	adds	r2, #2
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	3201      	adds	r2, #1
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	7812      	ldrb	r2, [r2, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003910:	68fb      	ldr	r3, [r7, #12]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	887a      	ldrh	r2, [r7, #2]
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	1c53      	adds	r3, r2, #1
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1c59      	adds	r1, r3, #1
 80039d0:	6179      	str	r1, [r7, #20]
 80039d2:	7812      	ldrb	r2, [r2, #0]
 80039d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3b01      	subs	r3, #1
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f1      	bne.n	80039c6 <mem_cpy+0x1a>
	}
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80039ee:	b480      	push	{r7}
 80039f0:	b087      	sub	sp, #28
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	617a      	str	r2, [r7, #20]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f3      	bne.n	80039fe <mem_set+0x10>
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	@ 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	61fa      	str	r2, [r7, #28]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	4619      	mov	r1, r3
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	61ba      	str	r2, [r7, #24]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	1acb      	subs	r3, r1, r3
 8003a50:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <mem_cmp+0x40>
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0eb      	beq.n	8003a3c <mem_cmp+0x18>

	return r;
 8003a64:	697b      	ldr	r3, [r7, #20]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3724      	adds	r7, #36	@ 0x24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003a7c:	e002      	b.n	8003a84 <chk_chr+0x12>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3301      	adds	r3, #1
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <chk_chr+0x26>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d1f2      	bne.n	8003a7e <chk_chr+0xc>
	return *str;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e029      	b.n	8003b10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003abc:	4a27      	ldr	r2, [pc, #156]	@ (8003b5c <chk_lock+0xb4>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	4413      	add	r3, r2
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01d      	beq.n	8003b06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003aca:	4a24      	ldr	r2, [pc, #144]	@ (8003b5c <chk_lock+0xb4>)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	4413      	add	r3, r2
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d116      	bne.n	8003b0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003adc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b5c <chk_lock+0xb4>)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d10c      	bne.n	8003b0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003af0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b5c <chk_lock+0xb4>)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	4413      	add	r3, r2
 8003af8:	3308      	adds	r3, #8
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d102      	bne.n	8003b0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003b04:	e007      	b.n	8003b16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d9d2      	bls.n	8003abc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d109      	bne.n	8003b30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <chk_lock+0x80>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d101      	bne.n	8003b2c <chk_lock+0x84>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e010      	b.n	8003b4e <chk_lock+0xa6>
 8003b2c:	2312      	movs	r3, #18
 8003b2e:	e00e      	b.n	8003b4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d108      	bne.n	8003b48 <chk_lock+0xa0>
 8003b36:	4a09      	ldr	r2, [pc, #36]	@ (8003b5c <chk_lock+0xb4>)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	4413      	add	r3, r2
 8003b3e:	330c      	adds	r3, #12
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b46:	d101      	bne.n	8003b4c <chk_lock+0xa4>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	e000      	b.n	8003b4e <chk_lock+0xa6>
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000254 	.word	0x20000254

08003b60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003b66:	2300      	movs	r3, #0
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	e002      	b.n	8003b72 <enq_lock+0x12>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d806      	bhi.n	8003b86 <enq_lock+0x26>
 8003b78:	4a09      	ldr	r2, [pc, #36]	@ (8003ba0 <enq_lock+0x40>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	4413      	add	r3, r2
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f2      	bne.n	8003b6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000254 	.word	0x20000254

08003ba4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e01f      	b.n	8003bf4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003bb4:	4a41      	ldr	r2, [pc, #260]	@ (8003cbc <inc_lock+0x118>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	4413      	add	r3, r2
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d113      	bne.n	8003bee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003bc6:	4a3d      	ldr	r2, [pc, #244]	@ (8003cbc <inc_lock+0x118>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d109      	bne.n	8003bee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003bda:	4a38      	ldr	r2, [pc, #224]	@ (8003cbc <inc_lock+0x118>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	4413      	add	r3, r2
 8003be2:	3308      	adds	r3, #8
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d006      	beq.n	8003bfc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d9dc      	bls.n	8003bb4 <inc_lock+0x10>
 8003bfa:	e000      	b.n	8003bfe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003bfc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d132      	bne.n	8003c6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e002      	b.n	8003c10 <inc_lock+0x6c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d806      	bhi.n	8003c24 <inc_lock+0x80>
 8003c16:	4a29      	ldr	r2, [pc, #164]	@ (8003cbc <inc_lock+0x118>)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f2      	bne.n	8003c0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d101      	bne.n	8003c2e <inc_lock+0x8a>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e040      	b.n	8003cb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4922      	ldr	r1, [pc, #136]	@ (8003cbc <inc_lock+0x118>)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	440b      	add	r3, r1
 8003c3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	491e      	ldr	r1, [pc, #120]	@ (8003cbc <inc_lock+0x118>)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	440b      	add	r3, r1
 8003c48:	3304      	adds	r3, #4
 8003c4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	491a      	ldr	r1, [pc, #104]	@ (8003cbc <inc_lock+0x118>)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	440b      	add	r3, r1
 8003c58:	3308      	adds	r3, #8
 8003c5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003c5c:	4a17      	ldr	r2, [pc, #92]	@ (8003cbc <inc_lock+0x118>)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	4413      	add	r3, r2
 8003c64:	330c      	adds	r3, #12
 8003c66:	2200      	movs	r2, #0
 8003c68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <inc_lock+0xe0>
 8003c70:	4a12      	ldr	r2, [pc, #72]	@ (8003cbc <inc_lock+0x118>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	4413      	add	r3, r2
 8003c78:	330c      	adds	r3, #12
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <inc_lock+0xe0>
 8003c80:	2300      	movs	r3, #0
 8003c82:	e015      	b.n	8003cb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <inc_lock+0xf8>
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003cbc <inc_lock+0x118>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	330c      	adds	r3, #12
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	3301      	adds	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	e001      	b.n	8003ca0 <inc_lock+0xfc>
 8003c9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ca0:	4906      	ldr	r1, [pc, #24]	@ (8003cbc <inc_lock+0x118>)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	440b      	add	r3, r1
 8003ca8:	330c      	adds	r3, #12
 8003caa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	20000254 	.word	0x20000254

08003cc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d825      	bhi.n	8003d20 <dec_lock+0x60>
		n = Files[i].ctr;
 8003cd4:	4a17      	ldr	r2, [pc, #92]	@ (8003d34 <dec_lock+0x74>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	4413      	add	r3, r2
 8003cdc:	330c      	adds	r3, #12
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003ce2:	89fb      	ldrh	r3, [r7, #14]
 8003ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce8:	d101      	bne.n	8003cee <dec_lock+0x2e>
 8003cea:	2300      	movs	r3, #0
 8003cec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003cee:	89fb      	ldrh	r3, [r7, #14]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <dec_lock+0x3a>
 8003cf4:	89fb      	ldrh	r3, [r7, #14]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8003d34 <dec_lock+0x74>)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	4413      	add	r3, r2
 8003d02:	330c      	adds	r3, #12
 8003d04:	89fa      	ldrh	r2, [r7, #14]
 8003d06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003d08:	89fb      	ldrh	r3, [r7, #14]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <dec_lock+0x5a>
 8003d0e:	4a09      	ldr	r2, [pc, #36]	@ (8003d34 <dec_lock+0x74>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	4413      	add	r3, r2
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	737b      	strb	r3, [r7, #13]
 8003d1e:	e001      	b.n	8003d24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003d20:	2302      	movs	r3, #2
 8003d22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003d24:	7b7b      	ldrb	r3, [r7, #13]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000254 	.word	0x20000254

08003d38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e010      	b.n	8003d68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003d46:	4a0d      	ldr	r2, [pc, #52]	@ (8003d7c <clear_lock+0x44>)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	4413      	add	r3, r2
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d105      	bne.n	8003d62 <clear_lock+0x2a>
 8003d56:	4a09      	ldr	r2, [pc, #36]	@ (8003d7c <clear_lock+0x44>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	4413      	add	r3, r2
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3301      	adds	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d9eb      	bls.n	8003d46 <clear_lock+0xe>
	}
}
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	20000254 	.word	0x20000254

08003d80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	78db      	ldrb	r3, [r3, #3]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d034      	beq.n	8003dfe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7858      	ldrb	r0, [r3, #1]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003da4:	2301      	movs	r3, #1
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	f7ff fd40 	bl	800382c <disk_write>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	e022      	b.n	8003dfe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	1ad2      	subs	r2, r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d217      	bcs.n	8003dfe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	e010      	b.n	8003df8 <sync_window+0x78>
					wsect += fs->fsize;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	7858      	ldrb	r0, [r3, #1]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003dea:	2301      	movs	r3, #1
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	f7ff fd1d 	bl	800382c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d8eb      	bhi.n	8003dd6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d01b      	beq.n	8003e58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ffad 	bl	8003d80 <sync_window>
 8003e26:	4603      	mov	r3, r0
 8003e28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d113      	bne.n	8003e58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7858      	ldrb	r0, [r3, #1]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	f7ff fcd5 	bl	80037ec <disk_read>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff87 	bl	8003d80 <sync_window>
 8003e72:	4603      	mov	r3, r0
 8003e74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d158      	bne.n	8003f2e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d148      	bne.n	8003f16 <sync_fs+0xb2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	791b      	ldrb	r3, [r3, #4]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d144      	bne.n	8003f16 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3330      	adds	r3, #48	@ 0x30
 8003e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fda9 	bl	80039ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3330      	adds	r3, #48	@ 0x30
 8003ea0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003ea4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fd38 	bl	800391e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3330      	adds	r3, #48	@ 0x30
 8003eb2:	4921      	ldr	r1, [pc, #132]	@ (8003f38 <sync_fs+0xd4>)
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fd4d 	bl	8003954 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3330      	adds	r3, #48	@ 0x30
 8003ebe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003ec2:	491e      	ldr	r1, [pc, #120]	@ (8003f3c <sync_fs+0xd8>)
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fd45 	bl	8003954 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3330      	adds	r3, #48	@ 0x30
 8003ece:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f7ff fd3b 	bl	8003954 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3330      	adds	r3, #48	@ 0x30
 8003ee2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f7ff fd31 	bl	8003954 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	7858      	ldrb	r0, [r3, #1]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f7ff fc8e 	bl	800382c <disk_write>
			fs->fsi_flag = 0;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	785b      	ldrb	r3, [r3, #1]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fca4 	bl	800386c <disk_ioctl>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <sync_fs+0xca>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	41615252 	.word	0x41615252
 8003f3c:	61417272 	.word	0x61417272

08003f40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	3b02      	subs	r3, #2
 8003f4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	3b02      	subs	r3, #2
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d301      	bcc.n	8003f60 <clust2sect+0x20>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e008      	b.n	8003f72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	895b      	ldrh	r3, [r3, #10]
 8003f64:	461a      	mov	r2, r3
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	fb03 f202 	mul.w	r2, r3, r2
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	4413      	add	r3, r2
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d904      	bls.n	8003f9e <get_fat+0x20>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e08e      	b.n	80040c2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d061      	beq.n	8004076 <get_fat+0xf8>
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	dc7b      	bgt.n	80040ae <get_fat+0x130>
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d002      	beq.n	8003fc0 <get_fat+0x42>
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d041      	beq.n	8004042 <get_fat+0xc4>
 8003fbe:	e076      	b.n	80040ae <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6a1a      	ldr	r2, [r3, #32]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	0a5b      	lsrs	r3, r3, #9
 8003fd6:	4413      	add	r3, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6938      	ldr	r0, [r7, #16]
 8003fdc:	f7ff ff14 	bl	8003e08 <move_window>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d166      	bne.n	80040b4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	60fa      	str	r2, [r7, #12]
 8003fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ff8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6a1a      	ldr	r2, [r3, #32]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	0a5b      	lsrs	r3, r3, #9
 8004002:	4413      	add	r3, r2
 8004004:	4619      	mov	r1, r3
 8004006:	6938      	ldr	r0, [r7, #16]
 8004008:	f7ff fefe 	bl	8003e08 <move_window>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d152      	bne.n	80040b8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <get_fat+0xba>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	e002      	b.n	800403e <get_fat+0xc0>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	617b      	str	r3, [r7, #20]
			break;
 8004040:	e03f      	b.n	80040c2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6a1a      	ldr	r2, [r3, #32]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	4413      	add	r3, r2
 800404c:	4619      	mov	r1, r3
 800404e:	6938      	ldr	r0, [r7, #16]
 8004050:	f7ff feda 	bl	8003e08 <move_window>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d130      	bne.n	80040bc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004068:	4413      	add	r3, r2
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fc1c 	bl	80038a8 <ld_word>
 8004070:	4603      	mov	r3, r0
 8004072:	617b      	str	r3, [r7, #20]
			break;
 8004074:	e025      	b.n	80040c2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6a1a      	ldr	r2, [r3, #32]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	09db      	lsrs	r3, r3, #7
 800407e:	4413      	add	r3, r2
 8004080:	4619      	mov	r1, r3
 8004082:	6938      	ldr	r0, [r7, #16]
 8004084:	f7ff fec0 	bl	8003e08 <move_window>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d118      	bne.n	80040c0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800409c:	4413      	add	r3, r2
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fc1a 	bl	80038d8 <ld_dword>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80040aa:	617b      	str	r3, [r7, #20]
			break;
 80040ac:	e009      	b.n	80040c2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80040ae:	2301      	movs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e006      	b.n	80040c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040b4:	bf00      	nop
 80040b6:	e004      	b.n	80040c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040b8:	bf00      	nop
 80040ba:	e002      	b.n	80040c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80040c0:	bf00      	nop
		}
	}

	return val;
 80040c2:	697b      	ldr	r3, [r7, #20]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b089      	sub	sp, #36	@ 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80040d8:	2302      	movs	r3, #2
 80040da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	f240 80d9 	bls.w	8004296 <put_fat+0x1ca>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	f080 80d3 	bcs.w	8004296 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	f000 8096 	beq.w	8004226 <put_fat+0x15a>
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	f300 80cb 	bgt.w	8004296 <put_fat+0x1ca>
 8004100:	2b01      	cmp	r3, #1
 8004102:	d002      	beq.n	800410a <put_fat+0x3e>
 8004104:	2b02      	cmp	r3, #2
 8004106:	d06e      	beq.n	80041e6 <put_fat+0x11a>
 8004108:	e0c5      	b.n	8004296 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1a      	ldr	r2, [r3, #32]
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	0a5b      	lsrs	r3, r3, #9
 8004120:	4413      	add	r3, r2
 8004122:	4619      	mov	r1, r3
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff fe6f 	bl	8003e08 <move_window>
 800412a:	4603      	mov	r3, r0
 800412c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800412e:	7ffb      	ldrb	r3, [r7, #31]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f040 80a9 	bne.w	8004288 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	61b9      	str	r1, [r7, #24]
 8004142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004146:	4413      	add	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <put_fat+0xa4>
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b25b      	sxtb	r3, r3
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	b25a      	sxtb	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	b25b      	sxtb	r3, r3
 8004168:	4313      	orrs	r3, r2
 800416a:	b25b      	sxtb	r3, r3
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e001      	b.n	8004174 <put_fat+0xa8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	0a5b      	lsrs	r3, r3, #9
 8004186:	4413      	add	r3, r2
 8004188:	4619      	mov	r1, r3
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7ff fe3c 	bl	8003e08 <move_window>
 8004190:	4603      	mov	r3, r0
 8004192:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004194:	7ffb      	ldrb	r3, [r7, #31]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d178      	bne.n	800428c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a6:	4413      	add	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <put_fat+0xf0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e00e      	b.n	80041da <put_fat+0x10e>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	f023 030f 	bic.w	r3, r3, #15
 80041c6:	b25a      	sxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	4313      	orrs	r3, r2
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	70da      	strb	r2, [r3, #3]
			break;
 80041e4:	e057      	b.n	8004296 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	4413      	add	r3, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7ff fe08 	bl	8003e08 <move_window>
 80041f8:	4603      	mov	r3, r0
 80041fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041fc:	7ffb      	ldrb	r3, [r7, #31]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d146      	bne.n	8004290 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004210:	4413      	add	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	b292      	uxth	r2, r2
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fb80 	bl	800391e <st_word>
			fs->wflag = 1;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	70da      	strb	r2, [r3, #3]
			break;
 8004224:	e037      	b.n	8004296 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1a      	ldr	r2, [r3, #32]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	09db      	lsrs	r3, r3, #7
 800422e:	4413      	add	r3, r2
 8004230:	4619      	mov	r1, r3
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff fde8 	bl	8003e08 <move_window>
 8004238:	4603      	mov	r3, r0
 800423a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800423c:	7ffb      	ldrb	r3, [r7, #31]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d128      	bne.n	8004294 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004256:	4413      	add	r3, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fb3d 	bl	80038d8 <ld_dword>
 800425e:	4603      	mov	r3, r0
 8004260:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004264:	4323      	orrs	r3, r4
 8004266:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004276:	4413      	add	r3, r2
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fb6a 	bl	8003954 <st_dword>
			fs->wflag = 1;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	70da      	strb	r2, [r3, #3]
			break;
 8004286:	e006      	b.n	8004296 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004288:	bf00      	nop
 800428a:	e004      	b.n	8004296 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800428c:	bf00      	nop
 800428e:	e002      	b.n	8004296 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004294:	bf00      	nop
		}
	}
	return res;
 8004296:	7ffb      	ldrb	r3, [r7, #31]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3724      	adds	r7, #36	@ 0x24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}

080042a0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d904      	bls.n	80042c6 <remove_chain+0x26>
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d301      	bcc.n	80042ca <remove_chain+0x2a>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e04b      	b.n	8004362 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80042d0:	f04f 32ff 	mov.w	r2, #4294967295
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	69b8      	ldr	r0, [r7, #24]
 80042d8:	f7ff fef8 	bl	80040cc <put_fat>
 80042dc:	4603      	mov	r3, r0
 80042de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80042e0:	7ffb      	ldrb	r3, [r7, #31]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <remove_chain+0x4a>
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
 80042e8:	e03b      	b.n	8004362 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff fe46 	bl	8003f7e <get_fat>
 80042f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d031      	beq.n	800435e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <remove_chain+0x64>
 8004300:	2302      	movs	r3, #2
 8004302:	e02e      	b.n	8004362 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d101      	bne.n	8004310 <remove_chain+0x70>
 800430c:	2301      	movs	r3, #1
 800430e:	e028      	b.n	8004362 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004310:	2200      	movs	r2, #0
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	69b8      	ldr	r0, [r7, #24]
 8004316:	f7ff fed9 	bl	80040cc <put_fat>
 800431a:	4603      	mov	r3, r0
 800431c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800431e:	7ffb      	ldrb	r3, [r7, #31]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <remove_chain+0x88>
 8004324:	7ffb      	ldrb	r3, [r7, #31]
 8004326:	e01c      	b.n	8004362 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	3b02      	subs	r3, #2
 8004332:	429a      	cmp	r2, r3
 8004334:	d20b      	bcs.n	800434e <remove_chain+0xae>
			fs->free_clst++;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	d3c6      	bcc.n	80042ea <remove_chain+0x4a>
 800435c:	e000      	b.n	8004360 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800435e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b088      	sub	sp, #32
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10d      	bne.n	800439c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <create_chain+0x2c>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	429a      	cmp	r2, r3
 8004394:	d31b      	bcc.n	80043ce <create_chain+0x64>
 8004396:	2301      	movs	r3, #1
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e018      	b.n	80043ce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fded 	bl	8003f7e <get_fat>
 80043a4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d801      	bhi.n	80043b0 <create_chain+0x46>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e070      	b.n	8004492 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d101      	bne.n	80043bc <create_chain+0x52>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	e06a      	b.n	8004492 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d201      	bcs.n	80043ca <create_chain+0x60>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	e063      	b.n	8004492 <create_chain+0x128>
		scl = clst;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3301      	adds	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d307      	bcc.n	80043f2 <create_chain+0x88>
				ncl = 2;
 80043e2:	2302      	movs	r3, #2
 80043e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d901      	bls.n	80043f2 <create_chain+0x88>
 80043ee:	2300      	movs	r3, #0
 80043f0:	e04f      	b.n	8004492 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80043f2:	69f9      	ldr	r1, [r7, #28]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fdc2 	bl	8003f7e <get_fat>
 80043fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d003      	beq.n	8004410 <create_chain+0xa6>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d101      	bne.n	8004414 <create_chain+0xaa>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	e03e      	b.n	8004492 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	429a      	cmp	r2, r3
 800441a:	d1da      	bne.n	80043d2 <create_chain+0x68>
 800441c:	2300      	movs	r3, #0
 800441e:	e038      	b.n	8004492 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004420:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	69f9      	ldr	r1, [r7, #28]
 8004428:	6938      	ldr	r0, [r7, #16]
 800442a:	f7ff fe4f 	bl	80040cc <put_fat>
 800442e:	4603      	mov	r3, r0
 8004430:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <create_chain+0xe2>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d006      	beq.n	800444c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	6938      	ldr	r0, [r7, #16]
 8004444:	f7ff fe42 	bl	80040cc <put_fat>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d116      	bne.n	8004480 <create_chain+0x116>
		fs->last_clst = ncl;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	3b02      	subs	r3, #2
 8004462:	429a      	cmp	r2, r3
 8004464:	d804      	bhi.n	8004470 <create_chain+0x106>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	1e5a      	subs	r2, r3, #1
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	791b      	ldrb	r3, [r3, #4]
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	711a      	strb	r2, [r3, #4]
 800447e:	e007      	b.n	8004490 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d102      	bne.n	800448c <create_chain+0x122>
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	e000      	b.n	800448e <create_chain+0x124>
 800448c:	2301      	movs	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004490:	69fb      	ldr	r3, [r7, #28]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	3304      	adds	r3, #4
 80044b0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	0a5b      	lsrs	r3, r3, #9
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	8952      	ldrh	r2, [r2, #10]
 80044ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80044be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	613a      	str	r2, [r7, #16]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <clmt_clust+0x3a>
 80044d0:	2300      	movs	r3, #0
 80044d2:	e010      	b.n	80044f6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d307      	bcc.n	80044ec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	3304      	adds	r3, #4
 80044e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80044ea:	e7e9      	b.n	80044c0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80044ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	4413      	add	r3, r2
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b086      	sub	sp, #24
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004518:	d204      	bcs.n	8004524 <dir_sdi+0x22>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004524:	2302      	movs	r3, #2
 8004526:	e063      	b.n	80045f0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <dir_sdi+0x46>
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d902      	bls.n	8004548 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10c      	bne.n	8004568 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	8912      	ldrh	r2, [r2, #8]
 8004556:	4293      	cmp	r3, r2
 8004558:	d301      	bcc.n	800455e <dir_sdi+0x5c>
 800455a:	2302      	movs	r3, #2
 800455c:	e048      	b.n	80045f0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	e029      	b.n	80045bc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	895b      	ldrh	r3, [r3, #10]
 800456c:	025b      	lsls	r3, r3, #9
 800456e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004570:	e019      	b.n	80045a6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fd01 	bl	8003f7e <get_fat>
 800457c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d101      	bne.n	800458a <dir_sdi+0x88>
 8004586:	2301      	movs	r3, #1
 8004588:	e032      	b.n	80045f0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d904      	bls.n	800459a <dir_sdi+0x98>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	429a      	cmp	r2, r3
 8004598:	d301      	bcc.n	800459e <dir_sdi+0x9c>
 800459a:	2302      	movs	r3, #2
 800459c:	e028      	b.n	80045f0 <dir_sdi+0xee>
			ofs -= csz;
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d2e1      	bcs.n	8004572 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	6938      	ldr	r0, [r7, #16]
 80045b2:	f7ff fcc5 	bl	8003f40 <clust2sect>
 80045b6:	4602      	mov	r2, r0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <dir_sdi+0xcc>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e010      	b.n	80045f0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	0a5b      	lsrs	r3, r3, #9
 80045d6:	441a      	add	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e8:	441a      	add	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	3320      	adds	r3, #32
 800460e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <dir_next+0x28>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800461e:	d301      	bcc.n	8004624 <dir_next+0x2c>
 8004620:	2304      	movs	r3, #4
 8004622:	e0aa      	b.n	800477a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 8098 	bne.w	8004760 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	8912      	ldrh	r2, [r2, #8]
 800464a:	4293      	cmp	r3, r2
 800464c:	f0c0 8088 	bcc.w	8004760 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]
 8004656:	2304      	movs	r3, #4
 8004658:	e08f      	b.n	800477a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	0a5b      	lsrs	r3, r3, #9
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	8952      	ldrh	r2, [r2, #10]
 8004662:	3a01      	subs	r2, #1
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d17a      	bne.n	8004760 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7ff fc83 	bl	8003f7e <get_fat>
 8004678:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d801      	bhi.n	8004684 <dir_next+0x8c>
 8004680:	2302      	movs	r3, #2
 8004682:	e07a      	b.n	800477a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d101      	bne.n	8004690 <dir_next+0x98>
 800468c:	2301      	movs	r3, #1
 800468e:	e074      	b.n	800477a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	429a      	cmp	r2, r3
 8004698:	d358      	bcc.n	800474c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	61da      	str	r2, [r3, #28]
 80046a6:	2304      	movs	r3, #4
 80046a8:	e067      	b.n	800477a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f7ff fe59 	bl	800436a <create_chain>
 80046b8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <dir_next+0xcc>
 80046c0:	2307      	movs	r3, #7
 80046c2:	e05a      	b.n	800477a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <dir_next+0xd6>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e055      	b.n	800477a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d101      	bne.n	80046da <dir_next+0xe2>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e04f      	b.n	800477a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff fb50 	bl	8003d80 <sync_window>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <dir_next+0xf2>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e047      	b.n	800477a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3330      	adds	r3, #48	@ 0x30
 80046ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046f2:	2100      	movs	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff f97a 	bl	80039ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	6979      	ldr	r1, [r7, #20]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff fc1d 	bl	8003f40 <clust2sect>
 8004706:	4602      	mov	r2, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800470c:	e012      	b.n	8004734 <dir_next+0x13c>
						fs->wflag = 1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff fb33 	bl	8003d80 <sync_window>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <dir_next+0x12c>
 8004720:	2301      	movs	r3, #1
 8004722:	e02a      	b.n	800477a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	3301      	adds	r3, #1
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	895b      	ldrh	r3, [r3, #10]
 8004738:	461a      	mov	r2, r3
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4293      	cmp	r3, r2
 800473e:	d3e6      	bcc.n	800470e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad2      	subs	r2, r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004752:	6979      	ldr	r1, [r7, #20]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff fbf3 	bl	8003f40 <clust2sect>
 800475a:	4602      	mov	r2, r0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	441a      	add	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b086      	sub	sp, #24
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004792:	2100      	movs	r1, #0
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff feb4 	bl	8004502 <dir_sdi>
 800479a:	4603      	mov	r3, r0
 800479c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d12b      	bne.n	80047fc <dir_alloc+0x7a>
		n = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	4619      	mov	r1, r3
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff fb2a 	bl	8003e08 <move_window>
 80047b4:	4603      	mov	r3, r0
 80047b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11d      	bne.n	80047fa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2be5      	cmp	r3, #229	@ 0xe5
 80047c6:	d004      	beq.n	80047d2 <dir_alloc+0x50>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3301      	adds	r3, #1
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d102      	bne.n	80047e6 <dir_alloc+0x64>
 80047e0:	e00c      	b.n	80047fc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80047e6:	2101      	movs	r1, #1
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff05 	bl	80045f8 <dir_next>
 80047ee:	4603      	mov	r3, r0
 80047f0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0d7      	beq.n	80047a8 <dir_alloc+0x26>
 80047f8:	e000      	b.n	80047fc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80047fa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d101      	bne.n	8004806 <dir_alloc+0x84>
 8004802:	2307      	movs	r3, #7
 8004804:	75fb      	strb	r3, [r7, #23]
	return res;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	331a      	adds	r3, #26
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff f842 	bl	80038a8 <ld_word>
 8004824:	4603      	mov	r3, r0
 8004826:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b03      	cmp	r3, #3
 800482e:	d109      	bne.n	8004844 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	3314      	adds	r3, #20
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff f837 	bl	80038a8 <ld_word>
 800483a:	4603      	mov	r3, r0
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	331a      	adds	r3, #26
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	b292      	uxth	r2, r2
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff f85a 	bl	800391e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b03      	cmp	r3, #3
 8004870:	d109      	bne.n	8004886 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f103 0214 	add.w	r2, r3, #20
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	b29b      	uxth	r3, r3
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f7ff f84c 	bl	800391e <st_word>
	}
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800489c:	2100      	movs	r1, #0
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fe2f 	bl	8004502 <dir_sdi>
 80048a4:	4603      	mov	r3, r0
 80048a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <dir_find+0x24>
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	e03e      	b.n	8004930 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4619      	mov	r1, r3
 80048b8:	6938      	ldr	r0, [r7, #16]
 80048ba:	f7ff faa5 	bl	8003e08 <move_window>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d12f      	bne.n	8004928 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <dir_find+0x4e>
 80048d6:	2304      	movs	r3, #4
 80048d8:	75fb      	strb	r3, [r7, #23]
 80048da:	e028      	b.n	800492e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	330b      	adds	r3, #11
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	330b      	adds	r3, #11
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <dir_find+0x86>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a18      	ldr	r0, [r3, #32]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3324      	adds	r3, #36	@ 0x24
 8004906:	220b      	movs	r2, #11
 8004908:	4619      	mov	r1, r3
 800490a:	f7ff f88b 	bl	8003a24 <mem_cmp>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004914:	2100      	movs	r1, #0
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fe6e 	bl	80045f8 <dir_next>
 800491c:	4603      	mov	r3, r0
 800491e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0c5      	beq.n	80048b2 <dir_find+0x24>
 8004926:	e002      	b.n	800492e <dir_find+0xa0>
		if (res != FR_OK) break;
 8004928:	bf00      	nop
 800492a:	e000      	b.n	800492e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800492c:	bf00      	nop

	return res;
 800492e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004946:	2101      	movs	r1, #1
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff ff1a 	bl	8004782 <dir_alloc>
 800494e:	4603      	mov	r3, r0
 8004950:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d11c      	bne.n	8004992 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	4619      	mov	r1, r3
 800495e:	68b8      	ldr	r0, [r7, #8]
 8004960:	f7ff fa52 	bl	8003e08 <move_window>
 8004964:	4603      	mov	r3, r0
 8004966:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d111      	bne.n	8004992 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	2220      	movs	r2, #32
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff f839 	bl	80039ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a18      	ldr	r0, [r3, #32]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3324      	adds	r3, #36	@ 0x24
 8004984:	220b      	movs	r2, #11
 8004986:	4619      	mov	r1, r3
 8004988:	f7ff f810 	bl	80039ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2201      	movs	r2, #1
 8004990:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004992:	7bfb      	ldrb	r3, [r7, #15]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3324      	adds	r3, #36	@ 0x24
 80049b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80049b2:	220b      	movs	r2, #11
 80049b4:	2120      	movs	r1, #32
 80049b6:	68b8      	ldr	r0, [r7, #8]
 80049b8:	f7ff f819 	bl	80039ee <mem_set>
	si = i = 0; ni = 8;
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	2308      	movs	r3, #8
 80049c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	61fa      	str	r2, [r7, #28]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80049d6:	7efb      	ldrb	r3, [r7, #27]
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d94e      	bls.n	8004a7a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80049dc:	7efb      	ldrb	r3, [r7, #27]
 80049de:	2b2f      	cmp	r3, #47	@ 0x2f
 80049e0:	d006      	beq.n	80049f0 <create_name+0x54>
 80049e2:	7efb      	ldrb	r3, [r7, #27]
 80049e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80049e6:	d110      	bne.n	8004a0a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80049e8:	e002      	b.n	80049f0 <create_name+0x54>
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3301      	adds	r3, #1
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80049fa:	d0f6      	beq.n	80049ea <create_name+0x4e>
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b5c      	cmp	r3, #92	@ 0x5c
 8004a06:	d0f0      	beq.n	80049ea <create_name+0x4e>
			break;
 8004a08:	e038      	b.n	8004a7c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004a0a:	7efb      	ldrb	r3, [r7, #27]
 8004a0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a0e:	d003      	beq.n	8004a18 <create_name+0x7c>
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d30c      	bcc.n	8004a32 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b0b      	cmp	r3, #11
 8004a1c:	d002      	beq.n	8004a24 <create_name+0x88>
 8004a1e:	7efb      	ldrb	r3, [r7, #27]
 8004a20:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a22:	d001      	beq.n	8004a28 <create_name+0x8c>
 8004a24:	2306      	movs	r3, #6
 8004a26:	e044      	b.n	8004ab2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004a28:	2308      	movs	r3, #8
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	230b      	movs	r3, #11
 8004a2e:	617b      	str	r3, [r7, #20]
			continue;
 8004a30:	e022      	b.n	8004a78 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004a32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	da04      	bge.n	8004a44 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004a3a:	7efb      	ldrb	r3, [r7, #27]
 8004a3c:	3b80      	subs	r3, #128	@ 0x80
 8004a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004abc <create_name+0x120>)
 8004a40:	5cd3      	ldrb	r3, [r2, r3]
 8004a42:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004a44:	7efb      	ldrb	r3, [r7, #27]
 8004a46:	4619      	mov	r1, r3
 8004a48:	481d      	ldr	r0, [pc, #116]	@ (8004ac0 <create_name+0x124>)
 8004a4a:	f7ff f812 	bl	8003a72 <chk_chr>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <create_name+0xbc>
 8004a54:	2306      	movs	r3, #6
 8004a56:	e02c      	b.n	8004ab2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004a58:	7efb      	ldrb	r3, [r7, #27]
 8004a5a:	2b60      	cmp	r3, #96	@ 0x60
 8004a5c:	d905      	bls.n	8004a6a <create_name+0xce>
 8004a5e:	7efb      	ldrb	r3, [r7, #27]
 8004a60:	2b7a      	cmp	r3, #122	@ 0x7a
 8004a62:	d802      	bhi.n	8004a6a <create_name+0xce>
 8004a64:	7efb      	ldrb	r3, [r7, #27]
 8004a66:	3b20      	subs	r3, #32
 8004a68:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	613a      	str	r2, [r7, #16]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	4413      	add	r3, r2
 8004a74:	7efa      	ldrb	r2, [r7, #27]
 8004a76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004a78:	e7a6      	b.n	80049c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004a7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	441a      	add	r2, r3
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <create_name+0xf4>
 8004a8c:	2306      	movs	r3, #6
 8004a8e:	e010      	b.n	8004ab2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2be5      	cmp	r3, #229	@ 0xe5
 8004a96:	d102      	bne.n	8004a9e <create_name+0x102>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2205      	movs	r2, #5
 8004a9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004a9e:	7efb      	ldrb	r3, [r7, #27]
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d801      	bhi.n	8004aa8 <create_name+0x10c>
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	e000      	b.n	8004aaa <create_name+0x10e>
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	330b      	adds	r3, #11
 8004aae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004ab0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3720      	adds	r7, #32
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	08006abc 	.word	0x08006abc
 8004ac0:	08006a60 	.word	0x08006a60

08004ac4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004ad8:	e002      	b.n	8004ae0 <follow_path+0x1c>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	3301      	adds	r3, #1
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b2f      	cmp	r3, #47	@ 0x2f
 8004ae6:	d0f8      	beq.n	8004ada <follow_path+0x16>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b5c      	cmp	r3, #92	@ 0x5c
 8004aee:	d0f4      	beq.n	8004ada <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b1f      	cmp	r3, #31
 8004afc:	d80a      	bhi.n	8004b14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2280      	movs	r2, #128	@ 0x80
 8004b02:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8004b06:	2100      	movs	r1, #0
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fcfa 	bl	8004502 <dir_sdi>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]
 8004b12:	e043      	b.n	8004b9c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004b14:	463b      	mov	r3, r7
 8004b16:	4619      	mov	r1, r3
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff ff3f 	bl	800499c <create_name>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d134      	bne.n	8004b92 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff feb0 	bl	800488e <dir_find>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004b38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d127      	bne.n	8004b96 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004b46:	7afb      	ldrb	r3, [r7, #11]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d122      	bne.n	8004b96 <follow_path+0xd2>
 8004b50:	2305      	movs	r3, #5
 8004b52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004b54:	e01f      	b.n	8004b96 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d11c      	bne.n	8004b9a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	799b      	ldrb	r3, [r3, #6]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004b6c:	2305      	movs	r3, #5
 8004b6e:	75fb      	strb	r3, [r7, #23]
 8004b70:	e014      	b.n	8004b9c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b80:	4413      	add	r3, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff fe43 	bl	8004810 <ld_clust>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004b90:	e7c0      	b.n	8004b14 <follow_path+0x50>
			if (res != FR_OK) break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <follow_path+0xd8>
				break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004b9a:	bf00      	nop
			}
		}
	}

	return res;
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b087      	sub	sp, #28
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004bae:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d031      	beq.n	8004c20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	e002      	b.n	8004bca <get_ldnumber+0x24>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d903      	bls.n	8004bda <get_ldnumber+0x34>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b3a      	cmp	r3, #58	@ 0x3a
 8004bd8:	d1f4      	bne.n	8004bc4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b3a      	cmp	r3, #58	@ 0x3a
 8004be0:	d11c      	bne.n	8004c1c <get_ldnumber+0x76>
			tp = *path;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	60fa      	str	r2, [r7, #12]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	3b30      	subs	r3, #48	@ 0x30
 8004bf2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b09      	cmp	r3, #9
 8004bf8:	d80e      	bhi.n	8004c18 <get_ldnumber+0x72>
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d10a      	bne.n	8004c18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d107      	bne.n	8004c18 <get_ldnumber+0x72>
					vol = (int)i;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	e002      	b.n	8004c22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004c20:	693b      	ldr	r3, [r7, #16]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	70da      	strb	r2, [r3, #3]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f04f 32ff 	mov.w	r2, #4294967295
 8004c46:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff f8dc 	bl	8003e08 <move_window>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <check_fs+0x2a>
 8004c56:	2304      	movs	r3, #4
 8004c58:	e038      	b.n	8004ccc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3330      	adds	r3, #48	@ 0x30
 8004c5e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fe20 	bl	80038a8 <ld_word>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <check_fs+0x48>
 8004c74:	2303      	movs	r3, #3
 8004c76:	e029      	b.n	8004ccc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c7e:	2be9      	cmp	r3, #233	@ 0xe9
 8004c80:	d009      	beq.n	8004c96 <check_fs+0x66>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c88:	2beb      	cmp	r3, #235	@ 0xeb
 8004c8a:	d11e      	bne.n	8004cca <check_fs+0x9a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c92:	2b90      	cmp	r3, #144	@ 0x90
 8004c94:	d119      	bne.n	8004cca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3330      	adds	r3, #48	@ 0x30
 8004c9a:	3336      	adds	r3, #54	@ 0x36
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe fe1b 	bl	80038d8 <ld_dword>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd4 <check_fs+0xa4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <check_fs+0x82>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e00c      	b.n	8004ccc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3330      	adds	r3, #48	@ 0x30
 8004cb6:	3352      	adds	r3, #82	@ 0x52
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe fe0d 	bl	80038d8 <ld_dword>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4a05      	ldr	r2, [pc, #20]	@ (8004cd8 <check_fs+0xa8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <check_fs+0x9a>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004cca:	2302      	movs	r3, #2
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	00544146 	.word	0x00544146
 8004cd8:	33544146 	.word	0x33544146

08004cdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b096      	sub	sp, #88	@ 0x58
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff ff58 	bl	8004ba6 <get_ldnumber>
 8004cf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da01      	bge.n	8004d02 <find_volume+0x26>
 8004cfe:	230b      	movs	r3, #11
 8004d00:	e22d      	b.n	800515e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004d02:	4aa1      	ldr	r2, [pc, #644]	@ (8004f88 <find_volume+0x2ac>)
 8004d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <find_volume+0x3a>
 8004d12:	230c      	movs	r3, #12
 8004d14:	e223      	b.n	800515e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01a      	beq.n	8004d62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe fd19 	bl	8003768 <disk_status>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10c      	bne.n	8004d62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <find_volume+0x82>
 8004d4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004d5a:	230a      	movs	r3, #10
 8004d5c:	e1ff      	b.n	800515e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e1fd      	b.n	800515e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fe fd11 	bl	800379c <disk_initialize>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004d80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e1e6      	b.n	800515e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <find_volume+0xca>
 8004d96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004da2:	230a      	movs	r3, #10
 8004da4:	e1db      	b.n	800515e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004daa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004dac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004dae:	f7ff ff3f 	bl	8004c30 <check_fs>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004db8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d149      	bne.n	8004e54 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dc4:	e01e      	b.n	8004e04 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004dd4:	4413      	add	r3, r2
 8004dd6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	3304      	adds	r3, #4
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <find_volume+0x114>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	3308      	adds	r3, #8
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe fd76 	bl	80038d8 <ld_dword>
 8004dec:	4602      	mov	r2, r0
 8004dee:	e000      	b.n	8004df2 <find_volume+0x116>
 8004df0:	2200      	movs	r2, #0
 8004df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	3358      	adds	r3, #88	@ 0x58
 8004df8:	443b      	add	r3, r7
 8004dfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e00:	3301      	adds	r3, #1
 8004e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d9dd      	bls.n	8004dc6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <find_volume+0x13e>
 8004e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e16:	3b01      	subs	r3, #1
 8004e18:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	3358      	adds	r3, #88	@ 0x58
 8004e20:	443b      	add	r3, r7
 8004e22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004e26:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <find_volume+0x15e>
 8004e2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004e30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e32:	f7ff fefd 	bl	8004c30 <check_fs>
 8004e36:	4603      	mov	r3, r0
 8004e38:	e000      	b.n	8004e3c <find_volume+0x160>
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004e40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d905      	bls.n	8004e54 <find_volume+0x178>
 8004e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d9e2      	bls.n	8004e1a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004e54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d101      	bne.n	8004e60 <find_volume+0x184>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e17e      	b.n	800515e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004e60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d901      	bls.n	8004e6c <find_volume+0x190>
 8004e68:	230d      	movs	r3, #13
 8004e6a:	e178      	b.n	800515e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6e:	3330      	adds	r3, #48	@ 0x30
 8004e70:	330b      	adds	r3, #11
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe fd18 	bl	80038a8 <ld_word>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7e:	d001      	beq.n	8004e84 <find_volume+0x1a8>
 8004e80:	230d      	movs	r3, #13
 8004e82:	e16c      	b.n	800515e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e86:	3330      	adds	r3, #48	@ 0x30
 8004e88:	3316      	adds	r3, #22
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fd0c 	bl	80038a8 <ld_word>
 8004e90:	4603      	mov	r3, r0
 8004e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <find_volume+0x1cc>
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	3330      	adds	r3, #48	@ 0x30
 8004e9e:	3324      	adds	r3, #36	@ 0x24
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fd19 	bl	80038d8 <ld_dword>
 8004ea6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eba:	789b      	ldrb	r3, [r3, #2]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d005      	beq.n	8004ecc <find_volume+0x1f0>
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec2:	789b      	ldrb	r3, [r3, #2]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d001      	beq.n	8004ecc <find_volume+0x1f0>
 8004ec8:	230d      	movs	r3, #13
 8004eca:	e148      	b.n	800515e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ece:	789b      	ldrb	r3, [r3, #2]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed4:	fb02 f303 	mul.w	r3, r2, r3
 8004ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	895b      	ldrh	r3, [r3, #10]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d008      	beq.n	8004f00 <find_volume+0x224>
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	895b      	ldrh	r3, [r3, #10]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	895b      	ldrh	r3, [r3, #10]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <find_volume+0x228>
 8004f00:	230d      	movs	r3, #13
 8004f02:	e12c      	b.n	800515e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	3330      	adds	r3, #48	@ 0x30
 8004f08:	3311      	adds	r3, #17
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fccc 	bl	80038a8 <ld_word>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1a:	891b      	ldrh	r3, [r3, #8]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <find_volume+0x24e>
 8004f26:	230d      	movs	r3, #13
 8004f28:	e119      	b.n	800515e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2c:	3330      	adds	r3, #48	@ 0x30
 8004f2e:	3313      	adds	r3, #19
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe fcb9 	bl	80038a8 <ld_word>
 8004f36:	4603      	mov	r3, r0
 8004f38:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <find_volume+0x272>
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	3330      	adds	r3, #48	@ 0x30
 8004f44:	3320      	adds	r3, #32
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fcc6 	bl	80038d8 <ld_dword>
 8004f4c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f50:	3330      	adds	r3, #48	@ 0x30
 8004f52:	330e      	adds	r3, #14
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe fca7 	bl	80038a8 <ld_word>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004f5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <find_volume+0x28c>
 8004f64:	230d      	movs	r3, #13
 8004f66:	e0fa      	b.n	800515e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004f68:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6c:	4413      	add	r3, r2
 8004f6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f70:	8912      	ldrh	r2, [r2, #8]
 8004f72:	0912      	lsrs	r2, r2, #4
 8004f74:	b292      	uxth	r2, r2
 8004f76:	4413      	add	r3, r2
 8004f78:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d204      	bcs.n	8004f8c <find_volume+0x2b0>
 8004f82:	230d      	movs	r3, #13
 8004f84:	e0eb      	b.n	800515e <find_volume+0x482>
 8004f86:	bf00      	nop
 8004f88:	2000024c 	.word	0x2000024c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004f8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f94:	8952      	ldrh	r2, [r2, #10]
 8004f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f9a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <find_volume+0x2ca>
 8004fa2:	230d      	movs	r3, #13
 8004fa4:	e0db      	b.n	800515e <find_volume+0x482>
		fmt = FS_FAT32;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d802      	bhi.n	8004fbc <find_volume+0x2e0>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d802      	bhi.n	8004fcc <find_volume+0x2f0>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	1c9a      	adds	r2, r3, #2
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004fd8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004fda:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fde:	441a      	add	r2, r3
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004fe4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe8:	441a      	add	r2, r3
 8004fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fec:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004fee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d11e      	bne.n	8005034 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff8:	3330      	adds	r3, #48	@ 0x30
 8004ffa:	332a      	adds	r3, #42	@ 0x2a
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe fc53 	bl	80038a8 <ld_word>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <find_volume+0x330>
 8005008:	230d      	movs	r3, #13
 800500a:	e0a8      	b.n	800515e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800500c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500e:	891b      	ldrh	r3, [r3, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <find_volume+0x33c>
 8005014:	230d      	movs	r3, #13
 8005016:	e0a2      	b.n	800515e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	3330      	adds	r3, #48	@ 0x30
 800501c:	332c      	adds	r3, #44	@ 0x2c
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fc5a 	bl	80038d8 <ld_dword>
 8005024:	4602      	mov	r2, r0
 8005026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005028:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800502a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	647b      	str	r3, [r7, #68]	@ 0x44
 8005032:	e01f      	b.n	8005074 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005036:	891b      	ldrh	r3, [r3, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <find_volume+0x364>
 800503c:	230d      	movs	r3, #13
 800503e:	e08e      	b.n	800515e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005046:	441a      	add	r2, r3
 8005048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800504c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005050:	2b02      	cmp	r3, #2
 8005052:	d103      	bne.n	800505c <find_volume+0x380>
 8005054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	e00a      	b.n	8005072 <find_volume+0x396>
 800505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	4613      	mov	r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4413      	add	r3, r2
 8005066:	085a      	lsrs	r2, r3, #1
 8005068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005072:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800507a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800507e:	0a5b      	lsrs	r3, r3, #9
 8005080:	429a      	cmp	r2, r3
 8005082:	d201      	bcs.n	8005088 <find_volume+0x3ac>
 8005084:	230d      	movs	r3, #13
 8005086:	e06a      	b.n	800515e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508a:	f04f 32ff 	mov.w	r2, #4294967295
 800508e:	611a      	str	r2, [r3, #16]
 8005090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005096:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	2280      	movs	r2, #128	@ 0x80
 800509c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800509e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d149      	bne.n	800513a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	3330      	adds	r3, #48	@ 0x30
 80050aa:	3330      	adds	r3, #48	@ 0x30
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe fbfb 	bl	80038a8 <ld_word>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d140      	bne.n	800513a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80050b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ba:	3301      	adds	r3, #1
 80050bc:	4619      	mov	r1, r3
 80050be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80050c0:	f7fe fea2 	bl	8003e08 <move_window>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d137      	bne.n	800513a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	2200      	movs	r2, #0
 80050ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d2:	3330      	adds	r3, #48	@ 0x30
 80050d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe fbe5 	bl	80038a8 <ld_word>
 80050de:	4603      	mov	r3, r0
 80050e0:	461a      	mov	r2, r3
 80050e2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d127      	bne.n	800513a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80050ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ec:	3330      	adds	r3, #48	@ 0x30
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe fbf2 	bl	80038d8 <ld_dword>
 80050f4:	4603      	mov	r3, r0
 80050f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <find_volume+0x48c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d11e      	bne.n	800513a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80050fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fe:	3330      	adds	r3, #48	@ 0x30
 8005100:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fbe7 	bl	80038d8 <ld_dword>
 800510a:	4603      	mov	r3, r0
 800510c:	4a17      	ldr	r2, [pc, #92]	@ (800516c <find_volume+0x490>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d113      	bne.n	800513a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005114:	3330      	adds	r3, #48	@ 0x30
 8005116:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe fbdc 	bl	80038d8 <ld_dword>
 8005120:	4602      	mov	r2, r0
 8005122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005124:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005128:	3330      	adds	r3, #48	@ 0x30
 800512a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fbd2 	bl	80038d8 <ld_dword>
 8005134:	4602      	mov	r2, r0
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005140:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <find_volume+0x494>)
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	3301      	adds	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <find_volume+0x494>)
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	4b08      	ldr	r3, [pc, #32]	@ (8005170 <find_volume+0x494>)
 8005150:	881a      	ldrh	r2, [r3, #0]
 8005152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005154:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005156:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005158:	f7fe fdee 	bl	8003d38 <clear_lock>
#endif
	return FR_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3758      	adds	r7, #88	@ 0x58
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	41615252 	.word	0x41615252
 800516c:	61417272 	.word	0x61417272
 8005170:	20000250 	.word	0x20000250

08005174 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800517e:	2309      	movs	r3, #9
 8005180:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01c      	beq.n	80051c2 <validate+0x4e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d018      	beq.n	80051c2 <validate+0x4e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d013      	beq.n	80051c2 <validate+0x4e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	889a      	ldrh	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	88db      	ldrh	r3, [r3, #6]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d10c      	bne.n	80051c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe fada 	bl	8003768 <disk_status>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <validate+0x4e>
			res = FR_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <validate+0x5a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	e000      	b.n	80051d0 <validate+0x5c>
 80051ce:	2300      	movs	r3, #0
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	6013      	str	r3, [r2, #0]
	return res;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80051f2:	f107 0310 	add.w	r3, r7, #16
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fcd5 	bl	8004ba6 <get_ldnumber>
 80051fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	da01      	bge.n	8005208 <f_mount+0x28>
 8005204:	230b      	movs	r3, #11
 8005206:	e02b      	b.n	8005260 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005208:	4a17      	ldr	r2, [pc, #92]	@ (8005268 <f_mount+0x88>)
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005210:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005218:	69b8      	ldr	r0, [r7, #24]
 800521a:	f7fe fd8d 	bl	8003d38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	490d      	ldr	r1, [pc, #52]	@ (8005268 <f_mount+0x88>)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <f_mount+0x66>
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d001      	beq.n	800524a <f_mount+0x6a>
 8005246:	2300      	movs	r3, #0
 8005248:	e00a      	b.n	8005260 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800524a:	f107 010c 	add.w	r1, r7, #12
 800524e:	f107 0308 	add.w	r3, r7, #8
 8005252:	2200      	movs	r2, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fd41 	bl	8004cdc <find_volume>
 800525a:	4603      	mov	r3, r0
 800525c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800525e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	2000024c 	.word	0x2000024c

0800526c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b098      	sub	sp, #96	@ 0x60
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <f_open+0x18>
 8005280:	2309      	movs	r3, #9
 8005282:	e1a9      	b.n	80055d8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800528a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800528c:	79fa      	ldrb	r2, [r7, #7]
 800528e:	f107 0110 	add.w	r1, r7, #16
 8005292:	f107 0308 	add.w	r3, r7, #8
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fd20 	bl	8004cdc <find_volume>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80052a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 818d 	bne.w	80055c6 <f_open+0x35a>
		dj.obj.fs = fs;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	f107 0314 	add.w	r3, r7, #20
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fc03 	bl	8004ac4 <follow_path>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80052c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d118      	bne.n	80052fe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80052cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80052d0:	b25b      	sxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	da03      	bge.n	80052de <f_open+0x72>
				res = FR_INVALID_NAME;
 80052d6:	2306      	movs	r3, #6
 80052d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80052dc:	e00f      	b.n	80052fe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	bf8c      	ite	hi
 80052e4:	2301      	movhi	r3, #1
 80052e6:	2300      	movls	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fbd8 	bl	8003aa8 <chk_lock>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	f003 031c 	and.w	r3, r3, #28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d07f      	beq.n	8005408 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005308:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800530c:	2b00      	cmp	r3, #0
 800530e:	d017      	beq.n	8005340 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005310:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005314:	2b04      	cmp	r3, #4
 8005316:	d10e      	bne.n	8005336 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005318:	f7fe fc22 	bl	8003b60 <enq_lock>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d006      	beq.n	8005330 <f_open+0xc4>
 8005322:	f107 0314 	add.w	r3, r7, #20
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fb06 	bl	8004938 <dir_register>
 800532c:	4603      	mov	r3, r0
 800532e:	e000      	b.n	8005332 <f_open+0xc6>
 8005330:	2312      	movs	r3, #18
 8005332:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	f043 0308 	orr.w	r3, r3, #8
 800533c:	71fb      	strb	r3, [r7, #7]
 800533e:	e010      	b.n	8005362 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005340:	7ebb      	ldrb	r3, [r7, #26]
 8005342:	f003 0311 	and.w	r3, r3, #17
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <f_open+0xe6>
					res = FR_DENIED;
 800534a:	2307      	movs	r3, #7
 800534c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005350:	e007      	b.n	8005362 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <f_open+0xf6>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005362:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005366:	2b00      	cmp	r3, #0
 8005368:	d168      	bne.n	800543c <f_open+0x1d0>
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d063      	beq.n	800543c <f_open+0x1d0>
				dw = GET_FATTIME();
 8005374:	f7fd fcc0 	bl	8002cf8 <get_fattime>
 8005378:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800537a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537c:	330e      	adds	r3, #14
 800537e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005380:	4618      	mov	r0, r3
 8005382:	f7fe fae7 	bl	8003954 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005388:	3316      	adds	r3, #22
 800538a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe fae1 	bl	8003954 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005394:	330b      	adds	r3, #11
 8005396:	2220      	movs	r2, #32
 8005398:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800539e:	4611      	mov	r1, r2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fa35 	bl	8004810 <ld_clust>
 80053a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053ac:	2200      	movs	r2, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fa4d 	bl	800484e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80053b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b6:	331c      	adds	r3, #28
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe faca 	bl	8003954 <st_dword>
					fs->wflag = 1;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2201      	movs	r2, #1
 80053c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80053c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d037      	beq.n	800543c <f_open+0x1d0>
						dw = fs->winsect;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80053d2:	f107 0314 	add.w	r3, r7, #20
 80053d6:	2200      	movs	r2, #0
 80053d8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe ff60 	bl	80042a0 <remove_chain>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80053e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d126      	bne.n	800543c <f_open+0x1d0>
							res = move_window(fs, dw);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe fd08 	bl	8003e08 <move_window>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005402:	3a01      	subs	r2, #1
 8005404:	60da      	str	r2, [r3, #12]
 8005406:	e019      	b.n	800543c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005408:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800540c:	2b00      	cmp	r3, #0
 800540e:	d115      	bne.n	800543c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005410:	7ebb      	ldrb	r3, [r7, #26]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <f_open+0x1b6>
					res = FR_NO_FILE;
 800541a:	2304      	movs	r3, #4
 800541c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005420:	e00c      	b.n	800543c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <f_open+0x1d0>
 800542c:	7ebb      	ldrb	r3, [r7, #26]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <f_open+0x1d0>
						res = FR_DENIED;
 8005436:	2307      	movs	r3, #7
 8005438:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800543c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005440:	2b00      	cmp	r3, #0
 8005442:	d126      	bne.n	8005492 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005454:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800545e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	2b01      	cmp	r3, #1
 8005468:	bf8c      	ite	hi
 800546a:	2301      	movhi	r3, #1
 800546c:	2300      	movls	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	f107 0314 	add.w	r3, r7, #20
 8005476:	4611      	mov	r1, r2
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe fb93 	bl	8003ba4 <inc_lock>
 800547e:	4602      	mov	r2, r0
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <f_open+0x226>
 800548c:	2302      	movs	r3, #2
 800548e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005492:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 8095 	bne.w	80055c6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff f9b4 	bl	8004810 <ld_clust>
 80054a8:	4602      	mov	r2, r0
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80054ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b0:	331c      	adds	r3, #28
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fa10 	bl	80038d8 <ld_dword>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	88da      	ldrh	r2, [r3, #6]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	79fa      	ldrb	r2, [r7, #7]
 80054d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3330      	adds	r3, #48	@ 0x30
 80054ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fa7a 	bl	80039ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d060      	beq.n	80055c6 <f_open+0x35a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d05c      	beq.n	80055c6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	895b      	ldrh	r3, [r3, #10]
 8005518:	025b      	lsls	r3, r3, #9
 800551a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	657b      	str	r3, [r7, #84]	@ 0x54
 8005528:	e016      	b.n	8005558 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe fd25 	bl	8003f7e <get_fat>
 8005534:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005538:	2b01      	cmp	r3, #1
 800553a:	d802      	bhi.n	8005542 <f_open+0x2d6>
 800553c:	2302      	movs	r3, #2
 800553e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d102      	bne.n	8005550 <f_open+0x2e4>
 800554a:	2301      	movs	r3, #1
 800554c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005550:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	657b      	str	r3, [r7, #84]	@ 0x54
 8005558:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800555c:	2b00      	cmp	r3, #0
 800555e:	d103      	bne.n	8005568 <f_open+0x2fc>
 8005560:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005564:	429a      	cmp	r2, r3
 8005566:	d8e0      	bhi.n	800552a <f_open+0x2be>
				}
				fp->clust = clst;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800556c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800556e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005572:	2b00      	cmp	r3, #0
 8005574:	d127      	bne.n	80055c6 <f_open+0x35a>
 8005576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557c:	2b00      	cmp	r3, #0
 800557e:	d022      	beq.n	80055c6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005584:	4618      	mov	r0, r3
 8005586:	f7fe fcdb 	bl	8003f40 <clust2sect>
 800558a:	6478      	str	r0, [r7, #68]	@ 0x44
 800558c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <f_open+0x32e>
						res = FR_INT_ERR;
 8005592:	2302      	movs	r3, #2
 8005594:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005598:	e015      	b.n	80055c6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800559a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800559c:	0a5a      	lsrs	r2, r3, #9
 800559e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	7858      	ldrb	r0, [r3, #1]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	2301      	movs	r3, #1
 80055b6:	f7fe f919 	bl	80037ec <disk_read>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <f_open+0x35a>
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80055c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <f_open+0x368>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80055d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3760      	adds	r7, #96	@ 0x60
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08e      	sub	sp, #56	@ 0x38
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f107 0214 	add.w	r2, r7, #20
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fdb7 	bl	8005174 <validate>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800560c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <f_read+0x44>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	7d5b      	ldrb	r3, [r3, #21]
 8005618:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800561c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <f_read+0x4a>
 8005624:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005628:	e115      	b.n	8005856 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	7d1b      	ldrb	r3, [r3, #20]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <f_read+0x5a>
 8005636:	2307      	movs	r3, #7
 8005638:	e10d      	b.n	8005856 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	429a      	cmp	r2, r3
 800564c:	f240 80fe 	bls.w	800584c <f_read+0x26c>
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005654:	e0fa      	b.n	800584c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 80c6 	bne.w	80057f0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	0a5b      	lsrs	r3, r3, #9
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	8952      	ldrh	r2, [r2, #10]
 800566e:	3a01      	subs	r2, #1
 8005670:	4013      	ands	r3, r2
 8005672:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d12f      	bne.n	80056da <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	633b      	str	r3, [r7, #48]	@ 0x30
 8005688:	e013      	b.n	80056b2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	4619      	mov	r1, r3
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7fe fefe 	bl	800449a <clmt_clust>
 800569e:	6338      	str	r0, [r7, #48]	@ 0x30
 80056a0:	e007      	b.n	80056b2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f7fe fc67 	bl	8003f7e <get_fat>
 80056b0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d804      	bhi.n	80056c2 <f_read+0xe2>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2202      	movs	r2, #2
 80056bc:	755a      	strb	r2, [r3, #21]
 80056be:	2302      	movs	r3, #2
 80056c0:	e0c9      	b.n	8005856 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d104      	bne.n	80056d4 <f_read+0xf4>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	755a      	strb	r2, [r3, #21]
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0c0      	b.n	8005856 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f7fe fc2c 	bl	8003f40 <clust2sect>
 80056e8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <f_read+0x11a>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2202      	movs	r2, #2
 80056f4:	755a      	strb	r2, [r3, #21]
 80056f6:	2302      	movs	r3, #2
 80056f8:	e0ad      	b.n	8005856 <f_read+0x276>
			sect += csect;
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0a5b      	lsrs	r3, r3, #9
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d039      	beq.n	8005782 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	4413      	add	r3, r2
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	8952      	ldrh	r2, [r2, #10]
 8005718:	4293      	cmp	r3, r2
 800571a:	d905      	bls.n	8005728 <f_read+0x148>
					cc = fs->csize - csect;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	895b      	ldrh	r3, [r3, #10]
 8005720:	461a      	mov	r2, r3
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	7858      	ldrb	r0, [r3, #1]
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005732:	f7fe f85b 	bl	80037ec <disk_read>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <f_read+0x166>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	755a      	strb	r2, [r3, #21]
 8005742:	2301      	movs	r3, #1
 8005744:	e087      	b.n	8005856 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	7d1b      	ldrb	r3, [r3, #20]
 800574a:	b25b      	sxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	da14      	bge.n	800577a <f_read+0x19a>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1a      	ldr	r2, [r3, #32]
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800575a:	429a      	cmp	r2, r3
 800575c:	d90d      	bls.n	800577a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1a      	ldr	r2, [r3, #32]
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	025b      	lsls	r3, r3, #9
 8005768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576a:	18d0      	adds	r0, r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3330      	adds	r3, #48	@ 0x30
 8005770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005774:	4619      	mov	r1, r3
 8005776:	f7fe f919 	bl	80039ac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	025b      	lsls	r3, r3, #9
 800577e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005780:	e050      	b.n	8005824 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	429a      	cmp	r2, r3
 800578a:	d02e      	beq.n	80057ea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	7d1b      	ldrb	r3, [r3, #20]
 8005790:	b25b      	sxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	da18      	bge.n	80057c8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	7858      	ldrb	r0, [r3, #1]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	2301      	movs	r3, #1
 80057a6:	f7fe f841 	bl	800382c <disk_write>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <f_read+0x1da>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	755a      	strb	r2, [r3, #21]
 80057b6:	2301      	movs	r3, #1
 80057b8:	e04d      	b.n	8005856 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	7d1b      	ldrb	r3, [r3, #20]
 80057be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	7858      	ldrb	r0, [r3, #1]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80057d2:	2301      	movs	r3, #1
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	f7fe f809 	bl	80037ec <disk_read>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <f_read+0x20a>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	755a      	strb	r2, [r3, #21]
 80057e6:	2301      	movs	r3, #1
 80057e8:	e035      	b.n	8005856 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80057fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	429a      	cmp	r2, r3
 8005804:	d901      	bls.n	800580a <f_read+0x22a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005818:	4413      	add	r3, r2
 800581a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800581c:	4619      	mov	r1, r3
 800581e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005820:	f7fe f8c4 	bl	80039ac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	4413      	add	r3, r2
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005832:	441a      	add	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	619a      	str	r2, [r3, #24]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583e:	441a      	add	r2, r3
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f47f af01 	bne.w	8005656 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3738      	adds	r7, #56	@ 0x38
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b08c      	sub	sp, #48	@ 0x30
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f107 0210 	add.w	r2, r7, #16
 800587c:	4611      	mov	r1, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fc78 	bl	8005174 <validate>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800588a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800588e:	2b00      	cmp	r3, #0
 8005890:	d107      	bne.n	80058a2 <f_write+0x44>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	7d5b      	ldrb	r3, [r3, #21]
 8005896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800589a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <f_write+0x4a>
 80058a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80058a6:	e14b      	b.n	8005b40 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	7d1b      	ldrb	r3, [r3, #20]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <f_write+0x5a>
 80058b4:	2307      	movs	r3, #7
 80058b6:	e143      	b.n	8005b40 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	f080 812d 	bcs.w	8005b24 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	43db      	mvns	r3, r3
 80058d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80058d2:	e127      	b.n	8005b24 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f040 80e3 	bne.w	8005aa8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	0a5b      	lsrs	r3, r3, #9
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	8952      	ldrh	r2, [r2, #10]
 80058ec:	3a01      	subs	r2, #1
 80058ee:	4013      	ands	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d143      	bne.n	8005980 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10c      	bne.n	800591a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11a      	bne.n	8005942 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe fd2a 	bl	800436a <create_chain>
 8005916:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005918:	e013      	b.n	8005942 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	4619      	mov	r1, r3
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7fe fdb6 	bl	800449a <clmt_clust>
 800592e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005930:	e007      	b.n	8005942 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f7fe fd15 	bl	800436a <create_chain>
 8005940:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80f2 	beq.w	8005b2e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594c:	2b01      	cmp	r3, #1
 800594e:	d104      	bne.n	800595a <f_write+0xfc>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2202      	movs	r2, #2
 8005954:	755a      	strb	r2, [r3, #21]
 8005956:	2302      	movs	r3, #2
 8005958:	e0f2      	b.n	8005b40 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d104      	bne.n	800596c <f_write+0x10e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	755a      	strb	r2, [r3, #21]
 8005968:	2301      	movs	r3, #1
 800596a:	e0e9      	b.n	8005b40 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005970:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d102      	bne.n	8005980 <f_write+0x122>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800597e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	7d1b      	ldrb	r3, [r3, #20]
 8005984:	b25b      	sxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	da18      	bge.n	80059bc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	7858      	ldrb	r0, [r3, #1]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1a      	ldr	r2, [r3, #32]
 8005998:	2301      	movs	r3, #1
 800599a:	f7fd ff47 	bl	800382c <disk_write>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <f_write+0x150>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	755a      	strb	r2, [r3, #21]
 80059aa:	2301      	movs	r3, #1
 80059ac:	e0c8      	b.n	8005b40 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	7d1b      	ldrb	r3, [r3, #20]
 80059b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	4619      	mov	r1, r3
 80059c4:	4610      	mov	r0, r2
 80059c6:	f7fe fabb 	bl	8003f40 <clust2sect>
 80059ca:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <f_write+0x17e>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2202      	movs	r2, #2
 80059d6:	755a      	strb	r2, [r3, #21]
 80059d8:	2302      	movs	r3, #2
 80059da:	e0b1      	b.n	8005b40 <f_write+0x2e2>
			sect += csect;
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	4413      	add	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0a5b      	lsrs	r3, r3, #9
 80059e8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d03c      	beq.n	8005a6a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	4413      	add	r3, r2
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	8952      	ldrh	r2, [r2, #10]
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d905      	bls.n	8005a0a <f_write+0x1ac>
					cc = fs->csize - csect;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	895b      	ldrh	r3, [r3, #10]
 8005a02:	461a      	mov	r2, r3
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	7858      	ldrb	r0, [r3, #1]
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	69f9      	ldr	r1, [r7, #28]
 8005a14:	f7fd ff0a 	bl	800382c <disk_write>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d004      	beq.n	8005a28 <f_write+0x1ca>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	755a      	strb	r2, [r3, #21]
 8005a24:	2301      	movs	r3, #1
 8005a26:	e08b      	b.n	8005b40 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1a      	ldr	r2, [r3, #32]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	6a3a      	ldr	r2, [r7, #32]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d915      	bls.n	8005a62 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	025b      	lsls	r3, r3, #9
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f7fd ffac 	bl	80039ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	7d1b      	ldrb	r3, [r3, #20]
 8005a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	025b      	lsls	r3, r3, #9
 8005a66:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8005a68:	e03f      	b.n	8005aea <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d016      	beq.n	8005aa2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d210      	bcs.n	8005aa2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	7858      	ldrb	r0, [r3, #1]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	f7fd fead 	bl	80037ec <disk_read>
 8005a92:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	755a      	strb	r2, [r3, #21]
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e04e      	b.n	8005b40 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d901      	bls.n	8005ac2 <f_write+0x264>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad0:	4413      	add	r3, r2
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad4:	69f9      	ldr	r1, [r7, #28]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fd ff68 	bl	80039ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	7d1b      	ldrb	r3, [r3, #20]
 8005ae0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	4413      	add	r3, r2
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	441a      	add	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	619a      	str	r2, [r3, #24]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	bf38      	it	cc
 8005b0a:	461a      	movcc	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	441a      	add	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f47f aed4 	bne.w	80058d4 <f_write+0x76>
 8005b2c:	e000      	b.n	8005b30 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005b2e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	7d1b      	ldrb	r3, [r3, #20]
 8005b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3730      	adds	r7, #48	@ 0x30
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f107 0208 	add.w	r2, r7, #8
 8005b56:	4611      	mov	r1, r2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff fb0b 	bl	8005174 <validate>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d168      	bne.n	8005c3a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	7d1b      	ldrb	r3, [r3, #20]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d062      	beq.n	8005c3a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	7d1b      	ldrb	r3, [r3, #20]
 8005b78:	b25b      	sxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	da15      	bge.n	8005baa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	7858      	ldrb	r0, [r3, #1]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1a      	ldr	r2, [r3, #32]
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f7fd fe4d 	bl	800382c <disk_write>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <f_sync+0x54>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e04f      	b.n	8005c3c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	7d1b      	ldrb	r3, [r3, #20]
 8005ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005baa:	f7fd f8a5 	bl	8002cf8 <get_fattime>
 8005bae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f7fe f925 	bl	8003e08 <move_window>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d138      	bne.n	8005c3a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bcc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	330b      	adds	r3, #11
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	330b      	adds	r3, #11
 8005bd8:	f042 0220 	orr.w	r2, r2, #32
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	461a      	mov	r2, r3
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	f7fe fe2f 	bl	800484e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f103 021c 	add.w	r2, r3, #28
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f7fd fea9 	bl	8003954 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3316      	adds	r3, #22
 8005c06:	6939      	ldr	r1, [r7, #16]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fd fea3 	bl	8003954 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3312      	adds	r3, #18
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fd fe82 	bl	800391e <st_word>
					fs->wflag = 1;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fe f91e 	bl	8003e64 <sync_fs>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	7d1b      	ldrb	r3, [r3, #20]
 8005c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff ff7b 	bl	8005b48 <f_sync>
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d118      	bne.n	8005c8e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f107 0208 	add.w	r2, r7, #8
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fa85 	bl	8005174 <validate>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10c      	bne.n	8005c8e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe f821 	bl	8003cc0 <dec_lock>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b092      	sub	sp, #72	@ 0x48
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005ca4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005ca8:	f107 030c 	add.w	r3, r7, #12
 8005cac:	2200      	movs	r2, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff f814 	bl	8004cdc <find_volume>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8005cba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 8099 	bne.w	8005df6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005cc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	3b02      	subs	r3, #2
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d804      	bhi.n	8005ce2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	e089      	b.n	8005df6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d128      	bne.n	8005d40 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005cee:	2302      	movs	r3, #2
 8005cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005cf6:	f107 0314 	add.w	r3, r7, #20
 8005cfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe f93e 	bl	8003f7e <get_fat>
 8005d02:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0a:	d103      	bne.n	8005d14 <f_getfree+0x7c>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005d12:	e063      	b.n	8005ddc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d103      	bne.n	8005d22 <f_getfree+0x8a>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005d20:	e05c      	b.n	8005ddc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <f_getfree+0x96>
 8005d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8005d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d30:	3301      	adds	r3, #1
 8005d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d3db      	bcc.n	8005cf6 <f_getfree+0x5e>
 8005d3e:	e04d      	b.n	8005ddc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d50:	2300      	movs	r3, #0
 8005d52:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8005d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d113      	bne.n	8005d82 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d62:	4619      	mov	r1, r3
 8005d64:	f7fe f850 	bl	8003e08 <move_window>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8005d6e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d131      	bne.n	8005dda <f_getfree+0x142>
							p = fs->win;
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	3330      	adds	r3, #48	@ 0x30
 8005d7a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8005d7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d80:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d10f      	bne.n	8005daa <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005d8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d8c:	f7fd fd8c 	bl	80038a8 <ld_word>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <f_getfree+0x104>
 8005d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d98:	3301      	adds	r3, #1
 8005d9a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9e:	3302      	adds	r3, #2
 8005da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da4:	3b02      	subs	r3, #2
 8005da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005da8:	e010      	b.n	8005dcc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005daa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dac:	f7fd fd94 	bl	80038d8 <ld_dword>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d102      	bne.n	8005dc0 <f_getfree+0x128>
 8005dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	3b04      	subs	r3, #4
 8005dca:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1bd      	bne.n	8005d54 <f_getfree+0xbc>
 8005dd8:	e000      	b.n	8005ddc <f_getfree+0x144>
							if (res != FR_OK) break;
 8005dda:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005de0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005de6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dea:	791a      	ldrb	r2, [r3, #4]
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005df6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3748      	adds	r7, #72	@ 0x48
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b088      	sub	sp, #32
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005e16:	e01c      	b.n	8005e52 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005e18:	f107 0310 	add.w	r3, r7, #16
 8005e1c:	f107 0114 	add.w	r1, r7, #20
 8005e20:	2201      	movs	r2, #1
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fbdc 	bl	80055e0 <f_read>
		if (rc != 1) break;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d117      	bne.n	8005e5e <f_gets+0x5c>
		c = s[0];
 8005e2e:	7d3b      	ldrb	r3, [r7, #20]
 8005e30:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
 8005e34:	2b0d      	cmp	r3, #13
 8005e36:	d00b      	beq.n	8005e50 <f_gets+0x4e>
		*p++ = c;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	61ba      	str	r2, [r7, #24]
 8005e3e:	7dfa      	ldrb	r2, [r7, #23]
 8005e40:	701a      	strb	r2, [r3, #0]
		n++;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	3301      	adds	r3, #1
 8005e46:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	2b0a      	cmp	r3, #10
 8005e4c:	d009      	beq.n	8005e62 <f_gets+0x60>
 8005e4e:	e000      	b.n	8005e52 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005e50:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	dbdd      	blt.n	8005e18 <f_gets+0x16>
 8005e5c:	e002      	b.n	8005e64 <f_gets+0x62>
		if (rc != 1) break;
 8005e5e:	bf00      	nop
 8005e60:	e000      	b.n	8005e64 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8005e62:	bf00      	nop
	}
	*p = 0;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <f_gets+0x72>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	e000      	b.n	8005e76 <f_gets+0x74>
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005e96:	4b1f      	ldr	r3, [pc, #124]	@ (8005f14 <FATFS_LinkDriverEx+0x94>)
 8005e98:	7a5b      	ldrb	r3, [r3, #9]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d131      	bne.n	8005f04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f14 <FATFS_LinkDriverEx+0x94>)
 8005ea2:	7a5b      	ldrb	r3, [r3, #9]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f14 <FATFS_LinkDriverEx+0x94>)
 8005eaa:	2100      	movs	r1, #0
 8005eac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005eae:	4b19      	ldr	r3, [pc, #100]	@ (8005f14 <FATFS_LinkDriverEx+0x94>)
 8005eb0:	7a5b      	ldrb	r3, [r3, #9]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	4a17      	ldr	r2, [pc, #92]	@ (8005f14 <FATFS_LinkDriverEx+0x94>)
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005ebe:	4b15      	ldr	r3, [pc, #84]	@ (8005f14 <FATFS_LinkDriverEx+0x94>)
 8005ec0:	7a5b      	ldrb	r3, [r3, #9]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4b13      	ldr	r3, [pc, #76]	@ (8005f14 <FATFS_LinkDriverEx+0x94>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	79fa      	ldrb	r2, [r7, #7]
 8005ecc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005ece:	4b11      	ldr	r3, [pc, #68]	@ (8005f14 <FATFS_LinkDriverEx+0x94>)
 8005ed0:	7a5b      	ldrb	r3, [r3, #9]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	b2d1      	uxtb	r1, r2
 8005ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8005f14 <FATFS_LinkDriverEx+0x94>)
 8005eda:	7251      	strb	r1, [r2, #9]
 8005edc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005ede:	7dbb      	ldrb	r3, [r7, #22]
 8005ee0:	3330      	adds	r3, #48	@ 0x30
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	3301      	adds	r3, #1
 8005eec:	223a      	movs	r2, #58	@ 0x3a
 8005eee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	222f      	movs	r2, #47	@ 0x2f
 8005ef6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	3303      	adds	r3, #3
 8005efc:	2200      	movs	r2, #0
 8005efe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000274 	.word	0x20000274

08005f18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005f22:	2200      	movs	r2, #0
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ffaa 	bl	8005e80 <FATFS_LinkDriverEx>
 8005f2c:	4603      	mov	r3, r0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <_vsniprintf_r>:
 8005f36:	b530      	push	{r4, r5, lr}
 8005f38:	4614      	mov	r4, r2
 8005f3a:	2c00      	cmp	r4, #0
 8005f3c:	b09b      	sub	sp, #108	@ 0x6c
 8005f3e:	4605      	mov	r5, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	da05      	bge.n	8005f50 <_vsniprintf_r+0x1a>
 8005f44:	238b      	movs	r3, #139	@ 0x8b
 8005f46:	6003      	str	r3, [r0, #0]
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	b01b      	add	sp, #108	@ 0x6c
 8005f4e:	bd30      	pop	{r4, r5, pc}
 8005f50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005f54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005f58:	bf14      	ite	ne
 8005f5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f5e:	4623      	moveq	r3, r4
 8005f60:	9302      	str	r3, [sp, #8]
 8005f62:	9305      	str	r3, [sp, #20]
 8005f64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f68:	9100      	str	r1, [sp, #0]
 8005f6a:	9104      	str	r1, [sp, #16]
 8005f6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005f70:	4669      	mov	r1, sp
 8005f72:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005f74:	f000 f9a0 	bl	80062b8 <_svfiprintf_r>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	bfbc      	itt	lt
 8005f7c:	238b      	movlt	r3, #139	@ 0x8b
 8005f7e:	602b      	strlt	r3, [r5, #0]
 8005f80:	2c00      	cmp	r4, #0
 8005f82:	d0e3      	beq.n	8005f4c <_vsniprintf_r+0x16>
 8005f84:	9b00      	ldr	r3, [sp, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	e7df      	b.n	8005f4c <_vsniprintf_r+0x16>

08005f8c <vsniprintf>:
 8005f8c:	b507      	push	{r0, r1, r2, lr}
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	460a      	mov	r2, r1
 8005f94:	4601      	mov	r1, r0
 8005f96:	4803      	ldr	r0, [pc, #12]	@ (8005fa4 <vsniprintf+0x18>)
 8005f98:	6800      	ldr	r0, [r0, #0]
 8005f9a:	f7ff ffcc 	bl	8005f36 <_vsniprintf_r>
 8005f9e:	b003      	add	sp, #12
 8005fa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fa4:	20000024 	.word	0x20000024

08005fa8 <memset>:
 8005fa8:	4402      	add	r2, r0
 8005faa:	4603      	mov	r3, r0
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d100      	bne.n	8005fb2 <memset+0xa>
 8005fb0:	4770      	bx	lr
 8005fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb6:	e7f9      	b.n	8005fac <memset+0x4>

08005fb8 <__errno>:
 8005fb8:	4b01      	ldr	r3, [pc, #4]	@ (8005fc0 <__errno+0x8>)
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	20000024 	.word	0x20000024

08005fc4 <__libc_init_array>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8005ffc <__libc_init_array+0x38>)
 8005fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8006000 <__libc_init_array+0x3c>)
 8005fca:	1b64      	subs	r4, r4, r5
 8005fcc:	10a4      	asrs	r4, r4, #2
 8005fce:	2600      	movs	r6, #0
 8005fd0:	42a6      	cmp	r6, r4
 8005fd2:	d109      	bne.n	8005fe8 <__libc_init_array+0x24>
 8005fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8006004 <__libc_init_array+0x40>)
 8005fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8006008 <__libc_init_array+0x44>)
 8005fd8:	f000 fc66 	bl	80068a8 <_init>
 8005fdc:	1b64      	subs	r4, r4, r5
 8005fde:	10a4      	asrs	r4, r4, #2
 8005fe0:	2600      	movs	r6, #0
 8005fe2:	42a6      	cmp	r6, r4
 8005fe4:	d105      	bne.n	8005ff2 <__libc_init_array+0x2e>
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fec:	4798      	blx	r3
 8005fee:	3601      	adds	r6, #1
 8005ff0:	e7ee      	b.n	8005fd0 <__libc_init_array+0xc>
 8005ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff6:	4798      	blx	r3
 8005ff8:	3601      	adds	r6, #1
 8005ffa:	e7f2      	b.n	8005fe2 <__libc_init_array+0x1e>
 8005ffc:	08006b78 	.word	0x08006b78
 8006000:	08006b78 	.word	0x08006b78
 8006004:	08006b78 	.word	0x08006b78
 8006008:	08006b7c 	.word	0x08006b7c

0800600c <__retarget_lock_acquire_recursive>:
 800600c:	4770      	bx	lr

0800600e <__retarget_lock_release_recursive>:
 800600e:	4770      	bx	lr

08006010 <_free_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4605      	mov	r5, r0
 8006014:	2900      	cmp	r1, #0
 8006016:	d041      	beq.n	800609c <_free_r+0x8c>
 8006018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800601c:	1f0c      	subs	r4, r1, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	bfb8      	it	lt
 8006022:	18e4      	addlt	r4, r4, r3
 8006024:	f000 f8e0 	bl	80061e8 <__malloc_lock>
 8006028:	4a1d      	ldr	r2, [pc, #116]	@ (80060a0 <_free_r+0x90>)
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	b933      	cbnz	r3, 800603c <_free_r+0x2c>
 800602e:	6063      	str	r3, [r4, #4]
 8006030:	6014      	str	r4, [r2, #0]
 8006032:	4628      	mov	r0, r5
 8006034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006038:	f000 b8dc 	b.w	80061f4 <__malloc_unlock>
 800603c:	42a3      	cmp	r3, r4
 800603e:	d908      	bls.n	8006052 <_free_r+0x42>
 8006040:	6820      	ldr	r0, [r4, #0]
 8006042:	1821      	adds	r1, r4, r0
 8006044:	428b      	cmp	r3, r1
 8006046:	bf01      	itttt	eq
 8006048:	6819      	ldreq	r1, [r3, #0]
 800604a:	685b      	ldreq	r3, [r3, #4]
 800604c:	1809      	addeq	r1, r1, r0
 800604e:	6021      	streq	r1, [r4, #0]
 8006050:	e7ed      	b.n	800602e <_free_r+0x1e>
 8006052:	461a      	mov	r2, r3
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	b10b      	cbz	r3, 800605c <_free_r+0x4c>
 8006058:	42a3      	cmp	r3, r4
 800605a:	d9fa      	bls.n	8006052 <_free_r+0x42>
 800605c:	6811      	ldr	r1, [r2, #0]
 800605e:	1850      	adds	r0, r2, r1
 8006060:	42a0      	cmp	r0, r4
 8006062:	d10b      	bne.n	800607c <_free_r+0x6c>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	4401      	add	r1, r0
 8006068:	1850      	adds	r0, r2, r1
 800606a:	4283      	cmp	r3, r0
 800606c:	6011      	str	r1, [r2, #0]
 800606e:	d1e0      	bne.n	8006032 <_free_r+0x22>
 8006070:	6818      	ldr	r0, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	6053      	str	r3, [r2, #4]
 8006076:	4408      	add	r0, r1
 8006078:	6010      	str	r0, [r2, #0]
 800607a:	e7da      	b.n	8006032 <_free_r+0x22>
 800607c:	d902      	bls.n	8006084 <_free_r+0x74>
 800607e:	230c      	movs	r3, #12
 8006080:	602b      	str	r3, [r5, #0]
 8006082:	e7d6      	b.n	8006032 <_free_r+0x22>
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	1821      	adds	r1, r4, r0
 8006088:	428b      	cmp	r3, r1
 800608a:	bf04      	itt	eq
 800608c:	6819      	ldreq	r1, [r3, #0]
 800608e:	685b      	ldreq	r3, [r3, #4]
 8006090:	6063      	str	r3, [r4, #4]
 8006092:	bf04      	itt	eq
 8006094:	1809      	addeq	r1, r1, r0
 8006096:	6021      	streq	r1, [r4, #0]
 8006098:	6054      	str	r4, [r2, #4]
 800609a:	e7ca      	b.n	8006032 <_free_r+0x22>
 800609c:	bd38      	pop	{r3, r4, r5, pc}
 800609e:	bf00      	nop
 80060a0:	200003c4 	.word	0x200003c4

080060a4 <sbrk_aligned>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	4e0f      	ldr	r6, [pc, #60]	@ (80060e4 <sbrk_aligned+0x40>)
 80060a8:	460c      	mov	r4, r1
 80060aa:	6831      	ldr	r1, [r6, #0]
 80060ac:	4605      	mov	r5, r0
 80060ae:	b911      	cbnz	r1, 80060b6 <sbrk_aligned+0x12>
 80060b0:	f000 fba6 	bl	8006800 <_sbrk_r>
 80060b4:	6030      	str	r0, [r6, #0]
 80060b6:	4621      	mov	r1, r4
 80060b8:	4628      	mov	r0, r5
 80060ba:	f000 fba1 	bl	8006800 <_sbrk_r>
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	d103      	bne.n	80060ca <sbrk_aligned+0x26>
 80060c2:	f04f 34ff 	mov.w	r4, #4294967295
 80060c6:	4620      	mov	r0, r4
 80060c8:	bd70      	pop	{r4, r5, r6, pc}
 80060ca:	1cc4      	adds	r4, r0, #3
 80060cc:	f024 0403 	bic.w	r4, r4, #3
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d0f8      	beq.n	80060c6 <sbrk_aligned+0x22>
 80060d4:	1a21      	subs	r1, r4, r0
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 fb92 	bl	8006800 <_sbrk_r>
 80060dc:	3001      	adds	r0, #1
 80060de:	d1f2      	bne.n	80060c6 <sbrk_aligned+0x22>
 80060e0:	e7ef      	b.n	80060c2 <sbrk_aligned+0x1e>
 80060e2:	bf00      	nop
 80060e4:	200003c0 	.word	0x200003c0

080060e8 <_malloc_r>:
 80060e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ec:	1ccd      	adds	r5, r1, #3
 80060ee:	f025 0503 	bic.w	r5, r5, #3
 80060f2:	3508      	adds	r5, #8
 80060f4:	2d0c      	cmp	r5, #12
 80060f6:	bf38      	it	cc
 80060f8:	250c      	movcc	r5, #12
 80060fa:	2d00      	cmp	r5, #0
 80060fc:	4606      	mov	r6, r0
 80060fe:	db01      	blt.n	8006104 <_malloc_r+0x1c>
 8006100:	42a9      	cmp	r1, r5
 8006102:	d904      	bls.n	800610e <_malloc_r+0x26>
 8006104:	230c      	movs	r3, #12
 8006106:	6033      	str	r3, [r6, #0]
 8006108:	2000      	movs	r0, #0
 800610a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061e4 <_malloc_r+0xfc>
 8006112:	f000 f869 	bl	80061e8 <__malloc_lock>
 8006116:	f8d8 3000 	ldr.w	r3, [r8]
 800611a:	461c      	mov	r4, r3
 800611c:	bb44      	cbnz	r4, 8006170 <_malloc_r+0x88>
 800611e:	4629      	mov	r1, r5
 8006120:	4630      	mov	r0, r6
 8006122:	f7ff ffbf 	bl	80060a4 <sbrk_aligned>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	4604      	mov	r4, r0
 800612a:	d158      	bne.n	80061de <_malloc_r+0xf6>
 800612c:	f8d8 4000 	ldr.w	r4, [r8]
 8006130:	4627      	mov	r7, r4
 8006132:	2f00      	cmp	r7, #0
 8006134:	d143      	bne.n	80061be <_malloc_r+0xd6>
 8006136:	2c00      	cmp	r4, #0
 8006138:	d04b      	beq.n	80061d2 <_malloc_r+0xea>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	4639      	mov	r1, r7
 800613e:	4630      	mov	r0, r6
 8006140:	eb04 0903 	add.w	r9, r4, r3
 8006144:	f000 fb5c 	bl	8006800 <_sbrk_r>
 8006148:	4581      	cmp	r9, r0
 800614a:	d142      	bne.n	80061d2 <_malloc_r+0xea>
 800614c:	6821      	ldr	r1, [r4, #0]
 800614e:	1a6d      	subs	r5, r5, r1
 8006150:	4629      	mov	r1, r5
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff ffa6 	bl	80060a4 <sbrk_aligned>
 8006158:	3001      	adds	r0, #1
 800615a:	d03a      	beq.n	80061d2 <_malloc_r+0xea>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	442b      	add	r3, r5
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	f8d8 3000 	ldr.w	r3, [r8]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	bb62      	cbnz	r2, 80061c4 <_malloc_r+0xdc>
 800616a:	f8c8 7000 	str.w	r7, [r8]
 800616e:	e00f      	b.n	8006190 <_malloc_r+0xa8>
 8006170:	6822      	ldr	r2, [r4, #0]
 8006172:	1b52      	subs	r2, r2, r5
 8006174:	d420      	bmi.n	80061b8 <_malloc_r+0xd0>
 8006176:	2a0b      	cmp	r2, #11
 8006178:	d917      	bls.n	80061aa <_malloc_r+0xc2>
 800617a:	1961      	adds	r1, r4, r5
 800617c:	42a3      	cmp	r3, r4
 800617e:	6025      	str	r5, [r4, #0]
 8006180:	bf18      	it	ne
 8006182:	6059      	strne	r1, [r3, #4]
 8006184:	6863      	ldr	r3, [r4, #4]
 8006186:	bf08      	it	eq
 8006188:	f8c8 1000 	streq.w	r1, [r8]
 800618c:	5162      	str	r2, [r4, r5]
 800618e:	604b      	str	r3, [r1, #4]
 8006190:	4630      	mov	r0, r6
 8006192:	f000 f82f 	bl	80061f4 <__malloc_unlock>
 8006196:	f104 000b 	add.w	r0, r4, #11
 800619a:	1d23      	adds	r3, r4, #4
 800619c:	f020 0007 	bic.w	r0, r0, #7
 80061a0:	1ac2      	subs	r2, r0, r3
 80061a2:	bf1c      	itt	ne
 80061a4:	1a1b      	subne	r3, r3, r0
 80061a6:	50a3      	strne	r3, [r4, r2]
 80061a8:	e7af      	b.n	800610a <_malloc_r+0x22>
 80061aa:	6862      	ldr	r2, [r4, #4]
 80061ac:	42a3      	cmp	r3, r4
 80061ae:	bf0c      	ite	eq
 80061b0:	f8c8 2000 	streq.w	r2, [r8]
 80061b4:	605a      	strne	r2, [r3, #4]
 80061b6:	e7eb      	b.n	8006190 <_malloc_r+0xa8>
 80061b8:	4623      	mov	r3, r4
 80061ba:	6864      	ldr	r4, [r4, #4]
 80061bc:	e7ae      	b.n	800611c <_malloc_r+0x34>
 80061be:	463c      	mov	r4, r7
 80061c0:	687f      	ldr	r7, [r7, #4]
 80061c2:	e7b6      	b.n	8006132 <_malloc_r+0x4a>
 80061c4:	461a      	mov	r2, r3
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	d1fb      	bne.n	80061c4 <_malloc_r+0xdc>
 80061cc:	2300      	movs	r3, #0
 80061ce:	6053      	str	r3, [r2, #4]
 80061d0:	e7de      	b.n	8006190 <_malloc_r+0xa8>
 80061d2:	230c      	movs	r3, #12
 80061d4:	6033      	str	r3, [r6, #0]
 80061d6:	4630      	mov	r0, r6
 80061d8:	f000 f80c 	bl	80061f4 <__malloc_unlock>
 80061dc:	e794      	b.n	8006108 <_malloc_r+0x20>
 80061de:	6005      	str	r5, [r0, #0]
 80061e0:	e7d6      	b.n	8006190 <_malloc_r+0xa8>
 80061e2:	bf00      	nop
 80061e4:	200003c4 	.word	0x200003c4

080061e8 <__malloc_lock>:
 80061e8:	4801      	ldr	r0, [pc, #4]	@ (80061f0 <__malloc_lock+0x8>)
 80061ea:	f7ff bf0f 	b.w	800600c <__retarget_lock_acquire_recursive>
 80061ee:	bf00      	nop
 80061f0:	200003bc 	.word	0x200003bc

080061f4 <__malloc_unlock>:
 80061f4:	4801      	ldr	r0, [pc, #4]	@ (80061fc <__malloc_unlock+0x8>)
 80061f6:	f7ff bf0a 	b.w	800600e <__retarget_lock_release_recursive>
 80061fa:	bf00      	nop
 80061fc:	200003bc 	.word	0x200003bc

08006200 <__ssputs_r>:
 8006200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006204:	688e      	ldr	r6, [r1, #8]
 8006206:	461f      	mov	r7, r3
 8006208:	42be      	cmp	r6, r7
 800620a:	680b      	ldr	r3, [r1, #0]
 800620c:	4682      	mov	sl, r0
 800620e:	460c      	mov	r4, r1
 8006210:	4690      	mov	r8, r2
 8006212:	d82d      	bhi.n	8006270 <__ssputs_r+0x70>
 8006214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006218:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800621c:	d026      	beq.n	800626c <__ssputs_r+0x6c>
 800621e:	6965      	ldr	r5, [r4, #20]
 8006220:	6909      	ldr	r1, [r1, #16]
 8006222:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006226:	eba3 0901 	sub.w	r9, r3, r1
 800622a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800622e:	1c7b      	adds	r3, r7, #1
 8006230:	444b      	add	r3, r9
 8006232:	106d      	asrs	r5, r5, #1
 8006234:	429d      	cmp	r5, r3
 8006236:	bf38      	it	cc
 8006238:	461d      	movcc	r5, r3
 800623a:	0553      	lsls	r3, r2, #21
 800623c:	d527      	bpl.n	800628e <__ssputs_r+0x8e>
 800623e:	4629      	mov	r1, r5
 8006240:	f7ff ff52 	bl	80060e8 <_malloc_r>
 8006244:	4606      	mov	r6, r0
 8006246:	b360      	cbz	r0, 80062a2 <__ssputs_r+0xa2>
 8006248:	6921      	ldr	r1, [r4, #16]
 800624a:	464a      	mov	r2, r9
 800624c:	f000 fae8 	bl	8006820 <memcpy>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	6126      	str	r6, [r4, #16]
 800625e:	6165      	str	r5, [r4, #20]
 8006260:	444e      	add	r6, r9
 8006262:	eba5 0509 	sub.w	r5, r5, r9
 8006266:	6026      	str	r6, [r4, #0]
 8006268:	60a5      	str	r5, [r4, #8]
 800626a:	463e      	mov	r6, r7
 800626c:	42be      	cmp	r6, r7
 800626e:	d900      	bls.n	8006272 <__ssputs_r+0x72>
 8006270:	463e      	mov	r6, r7
 8006272:	6820      	ldr	r0, [r4, #0]
 8006274:	4632      	mov	r2, r6
 8006276:	4641      	mov	r1, r8
 8006278:	f000 faa8 	bl	80067cc <memmove>
 800627c:	68a3      	ldr	r3, [r4, #8]
 800627e:	1b9b      	subs	r3, r3, r6
 8006280:	60a3      	str	r3, [r4, #8]
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	4433      	add	r3, r6
 8006286:	6023      	str	r3, [r4, #0]
 8006288:	2000      	movs	r0, #0
 800628a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628e:	462a      	mov	r2, r5
 8006290:	f000 fad4 	bl	800683c <_realloc_r>
 8006294:	4606      	mov	r6, r0
 8006296:	2800      	cmp	r0, #0
 8006298:	d1e0      	bne.n	800625c <__ssputs_r+0x5c>
 800629a:	6921      	ldr	r1, [r4, #16]
 800629c:	4650      	mov	r0, sl
 800629e:	f7ff feb7 	bl	8006010 <_free_r>
 80062a2:	230c      	movs	r3, #12
 80062a4:	f8ca 3000 	str.w	r3, [sl]
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295
 80062b4:	e7e9      	b.n	800628a <__ssputs_r+0x8a>
	...

080062b8 <_svfiprintf_r>:
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	4698      	mov	r8, r3
 80062be:	898b      	ldrh	r3, [r1, #12]
 80062c0:	061b      	lsls	r3, r3, #24
 80062c2:	b09d      	sub	sp, #116	@ 0x74
 80062c4:	4607      	mov	r7, r0
 80062c6:	460d      	mov	r5, r1
 80062c8:	4614      	mov	r4, r2
 80062ca:	d510      	bpl.n	80062ee <_svfiprintf_r+0x36>
 80062cc:	690b      	ldr	r3, [r1, #16]
 80062ce:	b973      	cbnz	r3, 80062ee <_svfiprintf_r+0x36>
 80062d0:	2140      	movs	r1, #64	@ 0x40
 80062d2:	f7ff ff09 	bl	80060e8 <_malloc_r>
 80062d6:	6028      	str	r0, [r5, #0]
 80062d8:	6128      	str	r0, [r5, #16]
 80062da:	b930      	cbnz	r0, 80062ea <_svfiprintf_r+0x32>
 80062dc:	230c      	movs	r3, #12
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295
 80062e4:	b01d      	add	sp, #116	@ 0x74
 80062e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ea:	2340      	movs	r3, #64	@ 0x40
 80062ec:	616b      	str	r3, [r5, #20]
 80062ee:	2300      	movs	r3, #0
 80062f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062f2:	2320      	movs	r3, #32
 80062f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062fc:	2330      	movs	r3, #48	@ 0x30
 80062fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800649c <_svfiprintf_r+0x1e4>
 8006302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006306:	f04f 0901 	mov.w	r9, #1
 800630a:	4623      	mov	r3, r4
 800630c:	469a      	mov	sl, r3
 800630e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006312:	b10a      	cbz	r2, 8006318 <_svfiprintf_r+0x60>
 8006314:	2a25      	cmp	r2, #37	@ 0x25
 8006316:	d1f9      	bne.n	800630c <_svfiprintf_r+0x54>
 8006318:	ebba 0b04 	subs.w	fp, sl, r4
 800631c:	d00b      	beq.n	8006336 <_svfiprintf_r+0x7e>
 800631e:	465b      	mov	r3, fp
 8006320:	4622      	mov	r2, r4
 8006322:	4629      	mov	r1, r5
 8006324:	4638      	mov	r0, r7
 8006326:	f7ff ff6b 	bl	8006200 <__ssputs_r>
 800632a:	3001      	adds	r0, #1
 800632c:	f000 80a7 	beq.w	800647e <_svfiprintf_r+0x1c6>
 8006330:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006332:	445a      	add	r2, fp
 8006334:	9209      	str	r2, [sp, #36]	@ 0x24
 8006336:	f89a 3000 	ldrb.w	r3, [sl]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 809f 	beq.w	800647e <_svfiprintf_r+0x1c6>
 8006340:	2300      	movs	r3, #0
 8006342:	f04f 32ff 	mov.w	r2, #4294967295
 8006346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800634a:	f10a 0a01 	add.w	sl, sl, #1
 800634e:	9304      	str	r3, [sp, #16]
 8006350:	9307      	str	r3, [sp, #28]
 8006352:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006356:	931a      	str	r3, [sp, #104]	@ 0x68
 8006358:	4654      	mov	r4, sl
 800635a:	2205      	movs	r2, #5
 800635c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006360:	484e      	ldr	r0, [pc, #312]	@ (800649c <_svfiprintf_r+0x1e4>)
 8006362:	f7f9 ff45 	bl	80001f0 <memchr>
 8006366:	9a04      	ldr	r2, [sp, #16]
 8006368:	b9d8      	cbnz	r0, 80063a2 <_svfiprintf_r+0xea>
 800636a:	06d0      	lsls	r0, r2, #27
 800636c:	bf44      	itt	mi
 800636e:	2320      	movmi	r3, #32
 8006370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006374:	0711      	lsls	r1, r2, #28
 8006376:	bf44      	itt	mi
 8006378:	232b      	movmi	r3, #43	@ 0x2b
 800637a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800637e:	f89a 3000 	ldrb.w	r3, [sl]
 8006382:	2b2a      	cmp	r3, #42	@ 0x2a
 8006384:	d015      	beq.n	80063b2 <_svfiprintf_r+0xfa>
 8006386:	9a07      	ldr	r2, [sp, #28]
 8006388:	4654      	mov	r4, sl
 800638a:	2000      	movs	r0, #0
 800638c:	f04f 0c0a 	mov.w	ip, #10
 8006390:	4621      	mov	r1, r4
 8006392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006396:	3b30      	subs	r3, #48	@ 0x30
 8006398:	2b09      	cmp	r3, #9
 800639a:	d94b      	bls.n	8006434 <_svfiprintf_r+0x17c>
 800639c:	b1b0      	cbz	r0, 80063cc <_svfiprintf_r+0x114>
 800639e:	9207      	str	r2, [sp, #28]
 80063a0:	e014      	b.n	80063cc <_svfiprintf_r+0x114>
 80063a2:	eba0 0308 	sub.w	r3, r0, r8
 80063a6:	fa09 f303 	lsl.w	r3, r9, r3
 80063aa:	4313      	orrs	r3, r2
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	46a2      	mov	sl, r4
 80063b0:	e7d2      	b.n	8006358 <_svfiprintf_r+0xa0>
 80063b2:	9b03      	ldr	r3, [sp, #12]
 80063b4:	1d19      	adds	r1, r3, #4
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	9103      	str	r1, [sp, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bfbb      	ittet	lt
 80063be:	425b      	neglt	r3, r3
 80063c0:	f042 0202 	orrlt.w	r2, r2, #2
 80063c4:	9307      	strge	r3, [sp, #28]
 80063c6:	9307      	strlt	r3, [sp, #28]
 80063c8:	bfb8      	it	lt
 80063ca:	9204      	strlt	r2, [sp, #16]
 80063cc:	7823      	ldrb	r3, [r4, #0]
 80063ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80063d0:	d10a      	bne.n	80063e8 <_svfiprintf_r+0x130>
 80063d2:	7863      	ldrb	r3, [r4, #1]
 80063d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80063d6:	d132      	bne.n	800643e <_svfiprintf_r+0x186>
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	1d1a      	adds	r2, r3, #4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	9203      	str	r2, [sp, #12]
 80063e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063e4:	3402      	adds	r4, #2
 80063e6:	9305      	str	r3, [sp, #20]
 80063e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064ac <_svfiprintf_r+0x1f4>
 80063ec:	7821      	ldrb	r1, [r4, #0]
 80063ee:	2203      	movs	r2, #3
 80063f0:	4650      	mov	r0, sl
 80063f2:	f7f9 fefd 	bl	80001f0 <memchr>
 80063f6:	b138      	cbz	r0, 8006408 <_svfiprintf_r+0x150>
 80063f8:	9b04      	ldr	r3, [sp, #16]
 80063fa:	eba0 000a 	sub.w	r0, r0, sl
 80063fe:	2240      	movs	r2, #64	@ 0x40
 8006400:	4082      	lsls	r2, r0
 8006402:	4313      	orrs	r3, r2
 8006404:	3401      	adds	r4, #1
 8006406:	9304      	str	r3, [sp, #16]
 8006408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640c:	4824      	ldr	r0, [pc, #144]	@ (80064a0 <_svfiprintf_r+0x1e8>)
 800640e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006412:	2206      	movs	r2, #6
 8006414:	f7f9 feec 	bl	80001f0 <memchr>
 8006418:	2800      	cmp	r0, #0
 800641a:	d036      	beq.n	800648a <_svfiprintf_r+0x1d2>
 800641c:	4b21      	ldr	r3, [pc, #132]	@ (80064a4 <_svfiprintf_r+0x1ec>)
 800641e:	bb1b      	cbnz	r3, 8006468 <_svfiprintf_r+0x1b0>
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	3307      	adds	r3, #7
 8006424:	f023 0307 	bic.w	r3, r3, #7
 8006428:	3308      	adds	r3, #8
 800642a:	9303      	str	r3, [sp, #12]
 800642c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800642e:	4433      	add	r3, r6
 8006430:	9309      	str	r3, [sp, #36]	@ 0x24
 8006432:	e76a      	b.n	800630a <_svfiprintf_r+0x52>
 8006434:	fb0c 3202 	mla	r2, ip, r2, r3
 8006438:	460c      	mov	r4, r1
 800643a:	2001      	movs	r0, #1
 800643c:	e7a8      	b.n	8006390 <_svfiprintf_r+0xd8>
 800643e:	2300      	movs	r3, #0
 8006440:	3401      	adds	r4, #1
 8006442:	9305      	str	r3, [sp, #20]
 8006444:	4619      	mov	r1, r3
 8006446:	f04f 0c0a 	mov.w	ip, #10
 800644a:	4620      	mov	r0, r4
 800644c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006450:	3a30      	subs	r2, #48	@ 0x30
 8006452:	2a09      	cmp	r2, #9
 8006454:	d903      	bls.n	800645e <_svfiprintf_r+0x1a6>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0c6      	beq.n	80063e8 <_svfiprintf_r+0x130>
 800645a:	9105      	str	r1, [sp, #20]
 800645c:	e7c4      	b.n	80063e8 <_svfiprintf_r+0x130>
 800645e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006462:	4604      	mov	r4, r0
 8006464:	2301      	movs	r3, #1
 8006466:	e7f0      	b.n	800644a <_svfiprintf_r+0x192>
 8006468:	ab03      	add	r3, sp, #12
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	462a      	mov	r2, r5
 800646e:	4b0e      	ldr	r3, [pc, #56]	@ (80064a8 <_svfiprintf_r+0x1f0>)
 8006470:	a904      	add	r1, sp, #16
 8006472:	4638      	mov	r0, r7
 8006474:	f3af 8000 	nop.w
 8006478:	1c42      	adds	r2, r0, #1
 800647a:	4606      	mov	r6, r0
 800647c:	d1d6      	bne.n	800642c <_svfiprintf_r+0x174>
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	065b      	lsls	r3, r3, #25
 8006482:	f53f af2d 	bmi.w	80062e0 <_svfiprintf_r+0x28>
 8006486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006488:	e72c      	b.n	80062e4 <_svfiprintf_r+0x2c>
 800648a:	ab03      	add	r3, sp, #12
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	462a      	mov	r2, r5
 8006490:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <_svfiprintf_r+0x1f0>)
 8006492:	a904      	add	r1, sp, #16
 8006494:	4638      	mov	r0, r7
 8006496:	f000 f879 	bl	800658c <_printf_i>
 800649a:	e7ed      	b.n	8006478 <_svfiprintf_r+0x1c0>
 800649c:	08006b3c 	.word	0x08006b3c
 80064a0:	08006b46 	.word	0x08006b46
 80064a4:	00000000 	.word	0x00000000
 80064a8:	08006201 	.word	0x08006201
 80064ac:	08006b42 	.word	0x08006b42

080064b0 <_printf_common>:
 80064b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b4:	4616      	mov	r6, r2
 80064b6:	4698      	mov	r8, r3
 80064b8:	688a      	ldr	r2, [r1, #8]
 80064ba:	690b      	ldr	r3, [r1, #16]
 80064bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064c0:	4293      	cmp	r3, r2
 80064c2:	bfb8      	it	lt
 80064c4:	4613      	movlt	r3, r2
 80064c6:	6033      	str	r3, [r6, #0]
 80064c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064cc:	4607      	mov	r7, r0
 80064ce:	460c      	mov	r4, r1
 80064d0:	b10a      	cbz	r2, 80064d6 <_printf_common+0x26>
 80064d2:	3301      	adds	r3, #1
 80064d4:	6033      	str	r3, [r6, #0]
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	0699      	lsls	r1, r3, #26
 80064da:	bf42      	ittt	mi
 80064dc:	6833      	ldrmi	r3, [r6, #0]
 80064de:	3302      	addmi	r3, #2
 80064e0:	6033      	strmi	r3, [r6, #0]
 80064e2:	6825      	ldr	r5, [r4, #0]
 80064e4:	f015 0506 	ands.w	r5, r5, #6
 80064e8:	d106      	bne.n	80064f8 <_printf_common+0x48>
 80064ea:	f104 0a19 	add.w	sl, r4, #25
 80064ee:	68e3      	ldr	r3, [r4, #12]
 80064f0:	6832      	ldr	r2, [r6, #0]
 80064f2:	1a9b      	subs	r3, r3, r2
 80064f4:	42ab      	cmp	r3, r5
 80064f6:	dc26      	bgt.n	8006546 <_printf_common+0x96>
 80064f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	3b00      	subs	r3, #0
 8006500:	bf18      	it	ne
 8006502:	2301      	movne	r3, #1
 8006504:	0692      	lsls	r2, r2, #26
 8006506:	d42b      	bmi.n	8006560 <_printf_common+0xb0>
 8006508:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800650c:	4641      	mov	r1, r8
 800650e:	4638      	mov	r0, r7
 8006510:	47c8      	blx	r9
 8006512:	3001      	adds	r0, #1
 8006514:	d01e      	beq.n	8006554 <_printf_common+0xa4>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	6922      	ldr	r2, [r4, #16]
 800651a:	f003 0306 	and.w	r3, r3, #6
 800651e:	2b04      	cmp	r3, #4
 8006520:	bf02      	ittt	eq
 8006522:	68e5      	ldreq	r5, [r4, #12]
 8006524:	6833      	ldreq	r3, [r6, #0]
 8006526:	1aed      	subeq	r5, r5, r3
 8006528:	68a3      	ldr	r3, [r4, #8]
 800652a:	bf0c      	ite	eq
 800652c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006530:	2500      	movne	r5, #0
 8006532:	4293      	cmp	r3, r2
 8006534:	bfc4      	itt	gt
 8006536:	1a9b      	subgt	r3, r3, r2
 8006538:	18ed      	addgt	r5, r5, r3
 800653a:	2600      	movs	r6, #0
 800653c:	341a      	adds	r4, #26
 800653e:	42b5      	cmp	r5, r6
 8006540:	d11a      	bne.n	8006578 <_printf_common+0xc8>
 8006542:	2000      	movs	r0, #0
 8006544:	e008      	b.n	8006558 <_printf_common+0xa8>
 8006546:	2301      	movs	r3, #1
 8006548:	4652      	mov	r2, sl
 800654a:	4641      	mov	r1, r8
 800654c:	4638      	mov	r0, r7
 800654e:	47c8      	blx	r9
 8006550:	3001      	adds	r0, #1
 8006552:	d103      	bne.n	800655c <_printf_common+0xac>
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655c:	3501      	adds	r5, #1
 800655e:	e7c6      	b.n	80064ee <_printf_common+0x3e>
 8006560:	18e1      	adds	r1, r4, r3
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	2030      	movs	r0, #48	@ 0x30
 8006566:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800656a:	4422      	add	r2, r4
 800656c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006570:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006574:	3302      	adds	r3, #2
 8006576:	e7c7      	b.n	8006508 <_printf_common+0x58>
 8006578:	2301      	movs	r3, #1
 800657a:	4622      	mov	r2, r4
 800657c:	4641      	mov	r1, r8
 800657e:	4638      	mov	r0, r7
 8006580:	47c8      	blx	r9
 8006582:	3001      	adds	r0, #1
 8006584:	d0e6      	beq.n	8006554 <_printf_common+0xa4>
 8006586:	3601      	adds	r6, #1
 8006588:	e7d9      	b.n	800653e <_printf_common+0x8e>
	...

0800658c <_printf_i>:
 800658c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	7e0f      	ldrb	r7, [r1, #24]
 8006592:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006594:	2f78      	cmp	r7, #120	@ 0x78
 8006596:	4691      	mov	r9, r2
 8006598:	4680      	mov	r8, r0
 800659a:	460c      	mov	r4, r1
 800659c:	469a      	mov	sl, r3
 800659e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065a2:	d807      	bhi.n	80065b4 <_printf_i+0x28>
 80065a4:	2f62      	cmp	r7, #98	@ 0x62
 80065a6:	d80a      	bhi.n	80065be <_printf_i+0x32>
 80065a8:	2f00      	cmp	r7, #0
 80065aa:	f000 80d2 	beq.w	8006752 <_printf_i+0x1c6>
 80065ae:	2f58      	cmp	r7, #88	@ 0x58
 80065b0:	f000 80b9 	beq.w	8006726 <_printf_i+0x19a>
 80065b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065bc:	e03a      	b.n	8006634 <_printf_i+0xa8>
 80065be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065c2:	2b15      	cmp	r3, #21
 80065c4:	d8f6      	bhi.n	80065b4 <_printf_i+0x28>
 80065c6:	a101      	add	r1, pc, #4	@ (adr r1, 80065cc <_printf_i+0x40>)
 80065c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065cc:	08006625 	.word	0x08006625
 80065d0:	08006639 	.word	0x08006639
 80065d4:	080065b5 	.word	0x080065b5
 80065d8:	080065b5 	.word	0x080065b5
 80065dc:	080065b5 	.word	0x080065b5
 80065e0:	080065b5 	.word	0x080065b5
 80065e4:	08006639 	.word	0x08006639
 80065e8:	080065b5 	.word	0x080065b5
 80065ec:	080065b5 	.word	0x080065b5
 80065f0:	080065b5 	.word	0x080065b5
 80065f4:	080065b5 	.word	0x080065b5
 80065f8:	08006739 	.word	0x08006739
 80065fc:	08006663 	.word	0x08006663
 8006600:	080066f3 	.word	0x080066f3
 8006604:	080065b5 	.word	0x080065b5
 8006608:	080065b5 	.word	0x080065b5
 800660c:	0800675b 	.word	0x0800675b
 8006610:	080065b5 	.word	0x080065b5
 8006614:	08006663 	.word	0x08006663
 8006618:	080065b5 	.word	0x080065b5
 800661c:	080065b5 	.word	0x080065b5
 8006620:	080066fb 	.word	0x080066fb
 8006624:	6833      	ldr	r3, [r6, #0]
 8006626:	1d1a      	adds	r2, r3, #4
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6032      	str	r2, [r6, #0]
 800662c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006630:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006634:	2301      	movs	r3, #1
 8006636:	e09d      	b.n	8006774 <_printf_i+0x1e8>
 8006638:	6833      	ldr	r3, [r6, #0]
 800663a:	6820      	ldr	r0, [r4, #0]
 800663c:	1d19      	adds	r1, r3, #4
 800663e:	6031      	str	r1, [r6, #0]
 8006640:	0606      	lsls	r6, r0, #24
 8006642:	d501      	bpl.n	8006648 <_printf_i+0xbc>
 8006644:	681d      	ldr	r5, [r3, #0]
 8006646:	e003      	b.n	8006650 <_printf_i+0xc4>
 8006648:	0645      	lsls	r5, r0, #25
 800664a:	d5fb      	bpl.n	8006644 <_printf_i+0xb8>
 800664c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006650:	2d00      	cmp	r5, #0
 8006652:	da03      	bge.n	800665c <_printf_i+0xd0>
 8006654:	232d      	movs	r3, #45	@ 0x2d
 8006656:	426d      	negs	r5, r5
 8006658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800665c:	4859      	ldr	r0, [pc, #356]	@ (80067c4 <_printf_i+0x238>)
 800665e:	230a      	movs	r3, #10
 8006660:	e011      	b.n	8006686 <_printf_i+0xfa>
 8006662:	6821      	ldr	r1, [r4, #0]
 8006664:	6833      	ldr	r3, [r6, #0]
 8006666:	0608      	lsls	r0, r1, #24
 8006668:	f853 5b04 	ldr.w	r5, [r3], #4
 800666c:	d402      	bmi.n	8006674 <_printf_i+0xe8>
 800666e:	0649      	lsls	r1, r1, #25
 8006670:	bf48      	it	mi
 8006672:	b2ad      	uxthmi	r5, r5
 8006674:	2f6f      	cmp	r7, #111	@ 0x6f
 8006676:	4853      	ldr	r0, [pc, #332]	@ (80067c4 <_printf_i+0x238>)
 8006678:	6033      	str	r3, [r6, #0]
 800667a:	bf14      	ite	ne
 800667c:	230a      	movne	r3, #10
 800667e:	2308      	moveq	r3, #8
 8006680:	2100      	movs	r1, #0
 8006682:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006686:	6866      	ldr	r6, [r4, #4]
 8006688:	60a6      	str	r6, [r4, #8]
 800668a:	2e00      	cmp	r6, #0
 800668c:	bfa2      	ittt	ge
 800668e:	6821      	ldrge	r1, [r4, #0]
 8006690:	f021 0104 	bicge.w	r1, r1, #4
 8006694:	6021      	strge	r1, [r4, #0]
 8006696:	b90d      	cbnz	r5, 800669c <_printf_i+0x110>
 8006698:	2e00      	cmp	r6, #0
 800669a:	d04b      	beq.n	8006734 <_printf_i+0x1a8>
 800669c:	4616      	mov	r6, r2
 800669e:	fbb5 f1f3 	udiv	r1, r5, r3
 80066a2:	fb03 5711 	mls	r7, r3, r1, r5
 80066a6:	5dc7      	ldrb	r7, [r0, r7]
 80066a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066ac:	462f      	mov	r7, r5
 80066ae:	42bb      	cmp	r3, r7
 80066b0:	460d      	mov	r5, r1
 80066b2:	d9f4      	bls.n	800669e <_printf_i+0x112>
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d10b      	bne.n	80066d0 <_printf_i+0x144>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	07df      	lsls	r7, r3, #31
 80066bc:	d508      	bpl.n	80066d0 <_printf_i+0x144>
 80066be:	6923      	ldr	r3, [r4, #16]
 80066c0:	6861      	ldr	r1, [r4, #4]
 80066c2:	4299      	cmp	r1, r3
 80066c4:	bfde      	ittt	le
 80066c6:	2330      	movle	r3, #48	@ 0x30
 80066c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066d0:	1b92      	subs	r2, r2, r6
 80066d2:	6122      	str	r2, [r4, #16]
 80066d4:	f8cd a000 	str.w	sl, [sp]
 80066d8:	464b      	mov	r3, r9
 80066da:	aa03      	add	r2, sp, #12
 80066dc:	4621      	mov	r1, r4
 80066de:	4640      	mov	r0, r8
 80066e0:	f7ff fee6 	bl	80064b0 <_printf_common>
 80066e4:	3001      	adds	r0, #1
 80066e6:	d14a      	bne.n	800677e <_printf_i+0x1f2>
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	b004      	add	sp, #16
 80066ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	f043 0320 	orr.w	r3, r3, #32
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	4833      	ldr	r0, [pc, #204]	@ (80067c8 <_printf_i+0x23c>)
 80066fc:	2778      	movs	r7, #120	@ 0x78
 80066fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	6831      	ldr	r1, [r6, #0]
 8006706:	061f      	lsls	r7, r3, #24
 8006708:	f851 5b04 	ldr.w	r5, [r1], #4
 800670c:	d402      	bmi.n	8006714 <_printf_i+0x188>
 800670e:	065f      	lsls	r7, r3, #25
 8006710:	bf48      	it	mi
 8006712:	b2ad      	uxthmi	r5, r5
 8006714:	6031      	str	r1, [r6, #0]
 8006716:	07d9      	lsls	r1, r3, #31
 8006718:	bf44      	itt	mi
 800671a:	f043 0320 	orrmi.w	r3, r3, #32
 800671e:	6023      	strmi	r3, [r4, #0]
 8006720:	b11d      	cbz	r5, 800672a <_printf_i+0x19e>
 8006722:	2310      	movs	r3, #16
 8006724:	e7ac      	b.n	8006680 <_printf_i+0xf4>
 8006726:	4827      	ldr	r0, [pc, #156]	@ (80067c4 <_printf_i+0x238>)
 8006728:	e7e9      	b.n	80066fe <_printf_i+0x172>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	f023 0320 	bic.w	r3, r3, #32
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	e7f6      	b.n	8006722 <_printf_i+0x196>
 8006734:	4616      	mov	r6, r2
 8006736:	e7bd      	b.n	80066b4 <_printf_i+0x128>
 8006738:	6833      	ldr	r3, [r6, #0]
 800673a:	6825      	ldr	r5, [r4, #0]
 800673c:	6961      	ldr	r1, [r4, #20]
 800673e:	1d18      	adds	r0, r3, #4
 8006740:	6030      	str	r0, [r6, #0]
 8006742:	062e      	lsls	r6, r5, #24
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	d501      	bpl.n	800674c <_printf_i+0x1c0>
 8006748:	6019      	str	r1, [r3, #0]
 800674a:	e002      	b.n	8006752 <_printf_i+0x1c6>
 800674c:	0668      	lsls	r0, r5, #25
 800674e:	d5fb      	bpl.n	8006748 <_printf_i+0x1bc>
 8006750:	8019      	strh	r1, [r3, #0]
 8006752:	2300      	movs	r3, #0
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	4616      	mov	r6, r2
 8006758:	e7bc      	b.n	80066d4 <_printf_i+0x148>
 800675a:	6833      	ldr	r3, [r6, #0]
 800675c:	1d1a      	adds	r2, r3, #4
 800675e:	6032      	str	r2, [r6, #0]
 8006760:	681e      	ldr	r6, [r3, #0]
 8006762:	6862      	ldr	r2, [r4, #4]
 8006764:	2100      	movs	r1, #0
 8006766:	4630      	mov	r0, r6
 8006768:	f7f9 fd42 	bl	80001f0 <memchr>
 800676c:	b108      	cbz	r0, 8006772 <_printf_i+0x1e6>
 800676e:	1b80      	subs	r0, r0, r6
 8006770:	6060      	str	r0, [r4, #4]
 8006772:	6863      	ldr	r3, [r4, #4]
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	2300      	movs	r3, #0
 8006778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800677c:	e7aa      	b.n	80066d4 <_printf_i+0x148>
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	4632      	mov	r2, r6
 8006782:	4649      	mov	r1, r9
 8006784:	4640      	mov	r0, r8
 8006786:	47d0      	blx	sl
 8006788:	3001      	adds	r0, #1
 800678a:	d0ad      	beq.n	80066e8 <_printf_i+0x15c>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	079b      	lsls	r3, r3, #30
 8006790:	d413      	bmi.n	80067ba <_printf_i+0x22e>
 8006792:	68e0      	ldr	r0, [r4, #12]
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	4298      	cmp	r0, r3
 8006798:	bfb8      	it	lt
 800679a:	4618      	movlt	r0, r3
 800679c:	e7a6      	b.n	80066ec <_printf_i+0x160>
 800679e:	2301      	movs	r3, #1
 80067a0:	4632      	mov	r2, r6
 80067a2:	4649      	mov	r1, r9
 80067a4:	4640      	mov	r0, r8
 80067a6:	47d0      	blx	sl
 80067a8:	3001      	adds	r0, #1
 80067aa:	d09d      	beq.n	80066e8 <_printf_i+0x15c>
 80067ac:	3501      	adds	r5, #1
 80067ae:	68e3      	ldr	r3, [r4, #12]
 80067b0:	9903      	ldr	r1, [sp, #12]
 80067b2:	1a5b      	subs	r3, r3, r1
 80067b4:	42ab      	cmp	r3, r5
 80067b6:	dcf2      	bgt.n	800679e <_printf_i+0x212>
 80067b8:	e7eb      	b.n	8006792 <_printf_i+0x206>
 80067ba:	2500      	movs	r5, #0
 80067bc:	f104 0619 	add.w	r6, r4, #25
 80067c0:	e7f5      	b.n	80067ae <_printf_i+0x222>
 80067c2:	bf00      	nop
 80067c4:	08006b4d 	.word	0x08006b4d
 80067c8:	08006b5e 	.word	0x08006b5e

080067cc <memmove>:
 80067cc:	4288      	cmp	r0, r1
 80067ce:	b510      	push	{r4, lr}
 80067d0:	eb01 0402 	add.w	r4, r1, r2
 80067d4:	d902      	bls.n	80067dc <memmove+0x10>
 80067d6:	4284      	cmp	r4, r0
 80067d8:	4623      	mov	r3, r4
 80067da:	d807      	bhi.n	80067ec <memmove+0x20>
 80067dc:	1e43      	subs	r3, r0, #1
 80067de:	42a1      	cmp	r1, r4
 80067e0:	d008      	beq.n	80067f4 <memmove+0x28>
 80067e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067ea:	e7f8      	b.n	80067de <memmove+0x12>
 80067ec:	4402      	add	r2, r0
 80067ee:	4601      	mov	r1, r0
 80067f0:	428a      	cmp	r2, r1
 80067f2:	d100      	bne.n	80067f6 <memmove+0x2a>
 80067f4:	bd10      	pop	{r4, pc}
 80067f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067fe:	e7f7      	b.n	80067f0 <memmove+0x24>

08006800 <_sbrk_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d06      	ldr	r5, [pc, #24]	@ (800681c <_sbrk_r+0x1c>)
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	f7fa f9e0 	bl	8000bd0 <_sbrk>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_sbrk_r+0x1a>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_sbrk_r+0x1a>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	200003b8 	.word	0x200003b8

08006820 <memcpy>:
 8006820:	440a      	add	r2, r1
 8006822:	4291      	cmp	r1, r2
 8006824:	f100 33ff 	add.w	r3, r0, #4294967295
 8006828:	d100      	bne.n	800682c <memcpy+0xc>
 800682a:	4770      	bx	lr
 800682c:	b510      	push	{r4, lr}
 800682e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006836:	4291      	cmp	r1, r2
 8006838:	d1f9      	bne.n	800682e <memcpy+0xe>
 800683a:	bd10      	pop	{r4, pc}

0800683c <_realloc_r>:
 800683c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006840:	4680      	mov	r8, r0
 8006842:	4615      	mov	r5, r2
 8006844:	460c      	mov	r4, r1
 8006846:	b921      	cbnz	r1, 8006852 <_realloc_r+0x16>
 8006848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800684c:	4611      	mov	r1, r2
 800684e:	f7ff bc4b 	b.w	80060e8 <_malloc_r>
 8006852:	b92a      	cbnz	r2, 8006860 <_realloc_r+0x24>
 8006854:	f7ff fbdc 	bl	8006010 <_free_r>
 8006858:	2400      	movs	r4, #0
 800685a:	4620      	mov	r0, r4
 800685c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006860:	f000 f81a 	bl	8006898 <_malloc_usable_size_r>
 8006864:	4285      	cmp	r5, r0
 8006866:	4606      	mov	r6, r0
 8006868:	d802      	bhi.n	8006870 <_realloc_r+0x34>
 800686a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800686e:	d8f4      	bhi.n	800685a <_realloc_r+0x1e>
 8006870:	4629      	mov	r1, r5
 8006872:	4640      	mov	r0, r8
 8006874:	f7ff fc38 	bl	80060e8 <_malloc_r>
 8006878:	4607      	mov	r7, r0
 800687a:	2800      	cmp	r0, #0
 800687c:	d0ec      	beq.n	8006858 <_realloc_r+0x1c>
 800687e:	42b5      	cmp	r5, r6
 8006880:	462a      	mov	r2, r5
 8006882:	4621      	mov	r1, r4
 8006884:	bf28      	it	cs
 8006886:	4632      	movcs	r2, r6
 8006888:	f7ff ffca 	bl	8006820 <memcpy>
 800688c:	4621      	mov	r1, r4
 800688e:	4640      	mov	r0, r8
 8006890:	f7ff fbbe 	bl	8006010 <_free_r>
 8006894:	463c      	mov	r4, r7
 8006896:	e7e0      	b.n	800685a <_realloc_r+0x1e>

08006898 <_malloc_usable_size_r>:
 8006898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800689c:	1f18      	subs	r0, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bfbc      	itt	lt
 80068a2:	580b      	ldrlt	r3, [r1, r0]
 80068a4:	18c0      	addlt	r0, r0, r3
 80068a6:	4770      	bx	lr

080068a8 <_init>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	bf00      	nop
 80068ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ae:	bc08      	pop	{r3}
 80068b0:	469e      	mov	lr, r3
 80068b2:	4770      	bx	lr

080068b4 <_fini>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	bf00      	nop
 80068b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ba:	bc08      	pop	{r3}
 80068bc:	469e      	mov	lr, r3
 80068be:	4770      	bx	lr
