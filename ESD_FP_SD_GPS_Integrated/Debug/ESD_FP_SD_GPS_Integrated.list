
ESD_FP_SD_GPS_Integrated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba1c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800bbc0  0800bbc0  0000cbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c188  0800c188  0000e208  2**0
                  CONTENTS
  4 .ARM          00000008  0800c188  0800c188  0000d188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c190  0800c190  0000e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c190  0800c190  0000d190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c194  0800c194  0000d194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800c198  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000208  0800c3a0  0000e208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aec  0800c3a0  0000eaec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9d7  00000000  00000000  0000e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c66  00000000  00000000  0001dc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00020878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a93  00000000  00000000  00021648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c8b  00000000  00000000  000220db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c28  00000000  00000000  0003ad66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008befd  00000000  00000000  0004e98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da88b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce4  00000000  00000000  000da8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000df5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bba4 	.word	0x0800bba4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0800bba4 	.word	0x0800bba4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f4c:	b08c      	sub	sp, #48	@ 0x30
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000f54:	4b5b      	ldr	r3, [pc, #364]	@ (80010c4 <decodeGGA+0x17c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000f5e:	e004      	b.n	8000f6a <decodeGGA+0x22>
 8000f60:	4b58      	ldr	r3, [pc, #352]	@ (80010c4 <decodeGGA+0x17c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a57      	ldr	r2, [pc, #348]	@ (80010c4 <decodeGGA+0x17c>)
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b56      	ldr	r3, [pc, #344]	@ (80010c4 <decodeGGA+0x17c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f78:	d1f2      	bne.n	8000f60 <decodeGGA+0x18>
	inx++;
 8000f7a:	4b52      	ldr	r3, [pc, #328]	@ (80010c4 <decodeGGA+0x17c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a50      	ldr	r2, [pc, #320]	@ (80010c4 <decodeGGA+0x17c>)
 8000f82:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000f84:	e004      	b.n	8000f90 <decodeGGA+0x48>
 8000f86:	4b4f      	ldr	r3, [pc, #316]	@ (80010c4 <decodeGGA+0x17c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80010c4 <decodeGGA+0x17c>)
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b4c      	ldr	r3, [pc, #304]	@ (80010c4 <decodeGGA+0x17c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f9e:	d1f2      	bne.n	8000f86 <decodeGGA+0x3e>
	inx++;
 8000fa0:	4b48      	ldr	r3, [pc, #288]	@ (80010c4 <decodeGGA+0x17c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a47      	ldr	r2, [pc, #284]	@ (80010c4 <decodeGGA+0x17c>)
 8000fa8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000faa:	e004      	b.n	8000fb6 <decodeGGA+0x6e>
 8000fac:	4b45      	ldr	r3, [pc, #276]	@ (80010c4 <decodeGGA+0x17c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a44      	ldr	r2, [pc, #272]	@ (80010c4 <decodeGGA+0x17c>)
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b43      	ldr	r3, [pc, #268]	@ (80010c4 <decodeGGA+0x17c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000fc4:	d1f2      	bne.n	8000fac <decodeGGA+0x64>
	inx++;
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80010c4 <decodeGGA+0x17c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a3d      	ldr	r2, [pc, #244]	@ (80010c4 <decodeGGA+0x17c>)
 8000fce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000fd0:	e004      	b.n	8000fdc <decodeGGA+0x94>
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80010c4 <decodeGGA+0x17c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a3a      	ldr	r2, [pc, #232]	@ (80010c4 <decodeGGA+0x17c>)
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b39      	ldr	r3, [pc, #228]	@ (80010c4 <decodeGGA+0x17c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b2c      	cmp	r3, #44	@ 0x2c
 8000fea:	d1f2      	bne.n	8000fd2 <decodeGGA+0x8a>
	inx++;
 8000fec:	4b35      	ldr	r3, [pc, #212]	@ (80010c4 <decodeGGA+0x17c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a34      	ldr	r2, [pc, #208]	@ (80010c4 <decodeGGA+0x17c>)
 8000ff4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000ff6:	e004      	b.n	8001002 <decodeGGA+0xba>
 8000ff8:	4b32      	ldr	r3, [pc, #200]	@ (80010c4 <decodeGGA+0x17c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a31      	ldr	r2, [pc, #196]	@ (80010c4 <decodeGGA+0x17c>)
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <decodeGGA+0x17c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001010:	d1f2      	bne.n	8000ff8 <decodeGGA+0xb0>
	inx++;
 8001012:	4b2c      	ldr	r3, [pc, #176]	@ (80010c4 <decodeGGA+0x17c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	4a2a      	ldr	r2, [pc, #168]	@ (80010c4 <decodeGGA+0x17c>)
 800101a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 800101c:	e004      	b.n	8001028 <decodeGGA+0xe0>
 800101e:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <decodeGGA+0x17c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a27      	ldr	r2, [pc, #156]	@ (80010c4 <decodeGGA+0x17c>)
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <decodeGGA+0x17c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b2c      	cmp	r3, #44	@ 0x2c
 8001036:	d1f2      	bne.n	800101e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001038:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <decodeGGA+0x17c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <decodeGGA+0x17c>)
 8001040:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <decodeGGA+0x17c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b31      	cmp	r3, #49	@ 0x31
 8001050:	d00f      	beq.n	8001072 <decodeGGA+0x12a>
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <decodeGGA+0x17c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b32      	cmp	r3, #50	@ 0x32
 8001060:	d007      	beq.n	8001072 <decodeGGA+0x12a>
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <decodeGGA+0x17c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b36      	cmp	r3, #54	@ 0x36
 8001070:	d106      	bne.n	8001080 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2201      	movs	r2, #1
 8001076:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <decodeGGA+0x17c>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800107e:	e009      	b.n	8001094 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001086:	2301      	movs	r3, #1
 8001088:	e2fd      	b.n	8001686 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <decodeGGA+0x17c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <decodeGGA+0x17c>)
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <decodeGGA+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b2c      	cmp	r3, #44	@ 0x2c
 80010a2:	d1f2      	bne.n	800108a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <decodeGGA+0x17c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <decodeGGA+0x17c>)
 80010ac:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	220c      	movs	r2, #12
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f007 fd3a 	bl	8008b30 <memset>
	i=0;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80010c0:	e016      	b.n	80010f0 <decodeGGA+0x1a8>
 80010c2:	bf00      	nop
 80010c4:	20000224 	.word	0x20000224
	{
		buffer[i] = GGAbuffer[inx];
 80010c8:	4bab      	ldr	r3, [pc, #684]	@ (8001378 <decodeGGA+0x430>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	7819      	ldrb	r1, [r3, #0]
 80010d4:	f107 020c 	add.w	r2, r7, #12
 80010d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010da:	4413      	add	r3, r2
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
		i++;
 80010e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e2:	3301      	adds	r3, #1
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80010e6:	4ba4      	ldr	r3, [pc, #656]	@ (8001378 <decodeGGA+0x430>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4aa2      	ldr	r2, [pc, #648]	@ (8001378 <decodeGGA+0x430>)
 80010ee:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80010f0:	4ba1      	ldr	r3, [pc, #644]	@ (8001378 <decodeGGA+0x430>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b2c      	cmp	r3, #44	@ 0x2c
 80010fe:	d1e3      	bne.n	80010c8 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fed4 	bl	8007eb2 <atoi>
 800110a:	4603      	mov	r3, r0
 800110c:	4a9b      	ldr	r2, [pc, #620]	@ (800137c <decodeGGA+0x434>)
 800110e:	fb82 1203 	smull	r1, r2, r2, r3
 8001112:	1312      	asrs	r2, r2, #12
 8001114:	17db      	asrs	r3, r3, #31
 8001116:	1ad2      	subs	r2, r2, r3
 8001118:	4b99      	ldr	r3, [pc, #612]	@ (8001380 <decodeGGA+0x438>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4999      	ldr	r1, [pc, #612]	@ (8001384 <decodeGGA+0x43c>)
 800111e:	fb81 0103 	smull	r0, r1, r1, r3
 8001122:	1149      	asrs	r1, r1, #5
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	1acb      	subs	r3, r1, r3
 8001128:	4413      	add	r3, r2
 800112a:	4a97      	ldr	r2, [pc, #604]	@ (8001388 <decodeGGA+0x440>)
 800112c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4618      	mov	r0, r3
 8001134:	f006 febd 	bl	8007eb2 <atoi>
 8001138:	4603      	mov	r3, r0
 800113a:	4a92      	ldr	r2, [pc, #584]	@ (8001384 <decodeGGA+0x43c>)
 800113c:	fb82 1203 	smull	r1, r2, r2, r3
 8001140:	1152      	asrs	r2, r2, #5
 8001142:	17db      	asrs	r3, r3, #31
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	4a8f      	ldr	r2, [pc, #572]	@ (8001384 <decodeGGA+0x43c>)
 8001148:	fb82 1203 	smull	r1, r2, r2, r3
 800114c:	1151      	asrs	r1, r2, #5
 800114e:	17da      	asrs	r2, r3, #31
 8001150:	1a8a      	subs	r2, r1, r2
 8001152:	2164      	movs	r1, #100	@ 0x64
 8001154:	fb01 f202 	mul.w	r2, r1, r2
 8001158:	1a9a      	subs	r2, r3, r2
 800115a:	4b89      	ldr	r3, [pc, #548]	@ (8001380 <decodeGGA+0x438>)
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	4b89      	ldr	r3, [pc, #548]	@ (8001384 <decodeGGA+0x43c>)
 8001160:	fb83 0301 	smull	r0, r3, r3, r1
 8001164:	1158      	asrs	r0, r3, #5
 8001166:	17cb      	asrs	r3, r1, #31
 8001168:	1ac3      	subs	r3, r0, r3
 800116a:	2064      	movs	r0, #100	@ 0x64
 800116c:	fb00 f303 	mul.w	r3, r0, r3
 8001170:	1acb      	subs	r3, r1, r3
 8001172:	4413      	add	r3, r2
 8001174:	4a85      	ldr	r2, [pc, #532]	@ (800138c <decodeGGA+0x444>)
 8001176:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001178:	4b84      	ldr	r3, [pc, #528]	@ (800138c <decodeGGA+0x444>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b3b      	cmp	r3, #59	@ 0x3b
 800117e:	dd09      	ble.n	8001194 <decodeGGA+0x24c>
	{
		min = min-60;
 8001180:	4b82      	ldr	r3, [pc, #520]	@ (800138c <decodeGGA+0x444>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3b3c      	subs	r3, #60	@ 0x3c
 8001186:	4a81      	ldr	r2, [pc, #516]	@ (800138c <decodeGGA+0x444>)
 8001188:	6013      	str	r3, [r2, #0]
		hr++;
 800118a:	4b7f      	ldr	r3, [pc, #508]	@ (8001388 <decodeGGA+0x440>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a7d      	ldr	r2, [pc, #500]	@ (8001388 <decodeGGA+0x440>)
 8001192:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001194:	4b7c      	ldr	r3, [pc, #496]	@ (8001388 <decodeGGA+0x440>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	da09      	bge.n	80011b0 <decodeGGA+0x268>
	{
		hr=24+hr;
 800119c:	4b7a      	ldr	r3, [pc, #488]	@ (8001388 <decodeGGA+0x440>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3318      	adds	r3, #24
 80011a2:	4a79      	ldr	r2, [pc, #484]	@ (8001388 <decodeGGA+0x440>)
 80011a4:	6013      	str	r3, [r2, #0]
		daychange--;
 80011a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001390 <decodeGGA+0x448>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	4a78      	ldr	r2, [pc, #480]	@ (8001390 <decodeGGA+0x448>)
 80011ae:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 80011b0:	4b75      	ldr	r3, [pc, #468]	@ (8001388 <decodeGGA+0x440>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b17      	cmp	r3, #23
 80011b6:	dd09      	ble.n	80011cc <decodeGGA+0x284>
	{
		hr=hr-24;
 80011b8:	4b73      	ldr	r3, [pc, #460]	@ (8001388 <decodeGGA+0x440>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3b18      	subs	r3, #24
 80011be:	4a72      	ldr	r2, [pc, #456]	@ (8001388 <decodeGGA+0x440>)
 80011c0:	6013      	str	r3, [r2, #0]
		daychange++;
 80011c2:	4b73      	ldr	r3, [pc, #460]	@ (8001390 <decodeGGA+0x448>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a71      	ldr	r2, [pc, #452]	@ (8001390 <decodeGGA+0x448>)
 80011ca:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80011cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001388 <decodeGGA+0x440>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80011d4:	4b6d      	ldr	r3, [pc, #436]	@ (800138c <decodeGGA+0x444>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 fe66 	bl	8007eb2 <atoi>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b66      	ldr	r3, [pc, #408]	@ (8001384 <decodeGGA+0x43c>)
 80011ea:	fb83 1302 	smull	r1, r3, r3, r2
 80011ee:	1159      	asrs	r1, r3, #5
 80011f0:	17d3      	asrs	r3, r2, #31
 80011f2:	1acb      	subs	r3, r1, r3
 80011f4:	2164      	movs	r1, #100	@ 0x64
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001200:	4b5d      	ldr	r3, [pc, #372]	@ (8001378 <decodeGGA+0x430>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a5c      	ldr	r2, [pc, #368]	@ (8001378 <decodeGGA+0x430>)
 8001208:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	220c      	movs	r2, #12
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fc8c 	bl	8008b30 <memset>
	i=0;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800121c:	e013      	b.n	8001246 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 800121e:	4b56      	ldr	r3, [pc, #344]	@ (8001378 <decodeGGA+0x430>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	7819      	ldrb	r1, [r3, #0]
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001230:	4413      	add	r3, r2
 8001232:	460a      	mov	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
		i++;
 8001236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001238:	3301      	adds	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800123c:	4b4e      	ldr	r3, [pc, #312]	@ (8001378 <decodeGGA+0x430>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	4a4d      	ldr	r2, [pc, #308]	@ (8001378 <decodeGGA+0x430>)
 8001244:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001246:	4b4c      	ldr	r3, [pc, #304]	@ (8001378 <decodeGGA+0x430>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b2c      	cmp	r3, #44	@ 0x2c
 8001254:	d1e3      	bne.n	800121e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f810 	bl	8000280 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	2b05      	cmp	r3, #5
 8001264:	d801      	bhi.n	800126a <decodeGGA+0x322>
 8001266:	2302      	movs	r3, #2
 8001268:	e20d      	b.n	8001686 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4618      	mov	r0, r3
 8001270:	f006 fe1f 	bl	8007eb2 <atoi>
 8001274:	4603      	mov	r3, r0
 8001276:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 800127c:	e002      	b.n	8001284 <decodeGGA+0x33c>
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	3301      	adds	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001284:	f107 020c 	add.w	r2, r7, #12
 8001288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001290:	d1f5      	bne.n	800127e <decodeGGA+0x336>
	j++;
 8001292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001294:	3301      	adds	r3, #1
 8001296:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f7fe ffef 	bl	8000280 <strlen>
 80012a2:	4602      	mov	r2, r0
 80012a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80012aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ac:	f107 020c 	add.w	r2, r7, #12
 80012b0:	4413      	add	r3, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f006 fdfd 	bl	8007eb2 <atoi>
 80012b8:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80012ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f938 	bl	8000534 <__aeabi_i2d>
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <decodeGGA+0x44c>)
 80012ca:	f7ff fac7 	bl	800085c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4690      	mov	r8, r2
 80012d4:	4699      	mov	r9, r3
 80012d6:	69f8      	ldr	r0, [r7, #28]
 80012d8:	f7ff f92c 	bl	8000534 <__aeabi_i2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	3302      	adds	r3, #2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f925 	bl	8000534 <__aeabi_i2d>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	ec43 2b11 	vmov	d1, r2, r3
 80012f2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8001370 <decodeGGA+0x428>
 80012f6:	f009 fcf7 	bl	800ace8 <pow>
 80012fa:	ec53 2b10 	vmov	r2, r3, d0
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7ff faab 	bl	800085c <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4640      	mov	r0, r8
 800130c:	4649      	mov	r1, r9
 800130e:	f7fe ffc5 	bl	800029c <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fc4d 	bl	8000bb8 <__aeabi_d2f>
 800131e:	4603      	mov	r3, r0
 8001320:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	601a      	str	r2, [r3, #0]
	inx++;  
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <decodeGGA+0x430>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <decodeGGA+0x430>)
 8001330:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <decodeGGA+0x430>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <decodeGGA+0x430>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <decodeGGA+0x430>)
 800134a:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800134c:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <decodeGGA+0x430>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a09      	ldr	r2, [pc, #36]	@ (8001378 <decodeGGA+0x430>)
 8001354:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	220c      	movs	r2, #12
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f007 fbe6 	bl	8008b30 <memset>
	i=0;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001368:	e02a      	b.n	80013c0 <decodeGGA+0x478>
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	00000000 	.word	0x00000000
 8001374:	40240000 	.word	0x40240000
 8001378:	20000224 	.word	0x20000224
 800137c:	68db8bad 	.word	0x68db8bad
 8001380:	20000000 	.word	0x20000000
 8001384:	51eb851f 	.word	0x51eb851f
 8001388:	20000228 	.word	0x20000228
 800138c:	2000022c 	.word	0x2000022c
 8001390:	20000230 	.word	0x20000230
 8001394:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001398:	4b8b      	ldr	r3, [pc, #556]	@ (80015c8 <decodeGGA+0x680>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	7819      	ldrb	r1, [r3, #0]
 80013a4:	f107 020c 	add.w	r2, r7, #12
 80013a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013aa:	4413      	add	r3, r2
 80013ac:	460a      	mov	r2, r1
 80013ae:	701a      	strb	r2, [r3, #0]
		i++;
 80013b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b2:	3301      	adds	r3, #1
 80013b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80013b6:	4b84      	ldr	r3, [pc, #528]	@ (80015c8 <decodeGGA+0x680>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a82      	ldr	r2, [pc, #520]	@ (80015c8 <decodeGGA+0x680>)
 80013be:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80013c0:	4b81      	ldr	r3, [pc, #516]	@ (80015c8 <decodeGGA+0x680>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b2c      	cmp	r3, #44	@ 0x2c
 80013ce:	d1e3      	bne.n	8001398 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	4618      	mov	r0, r3
 80013d6:	f006 fd6c 	bl	8007eb2 <atoi>
 80013da:	4603      	mov	r3, r0
 80013dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80013e2:	e002      	b.n	80013ea <decodeGGA+0x4a2>
 80013e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e6:	3301      	adds	r3, #1
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ea:	f107 020c 	add.w	r2, r7, #12
 80013ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80013f6:	d1f5      	bne.n	80013e4 <decodeGGA+0x49c>
	j++;
 80013f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fa:	3301      	adds	r3, #1
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe ff3c 	bl	8000280 <strlen>
 8001408:	4602      	mov	r2, r0
 800140a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001412:	f107 020c 	add.w	r2, r7, #12
 8001416:	4413      	add	r3, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f006 fd4a 	bl	8007eb2 <atoi>
 800141e:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001420:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f885 	bl	8000534 <__aeabi_i2d>
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b67      	ldr	r3, [pc, #412]	@ (80015cc <decodeGGA+0x684>)
 8001430:	f7ff fa14 	bl	800085c <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4690      	mov	r8, r2
 800143a:	4699      	mov	r9, r3
 800143c:	69f8      	ldr	r0, [r7, #28]
 800143e:	f7ff f879 	bl	8000534 <__aeabi_i2d>
 8001442:	4604      	mov	r4, r0
 8001444:	460d      	mov	r5, r1
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	3302      	adds	r3, #2
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f872 	bl	8000534 <__aeabi_i2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	ec43 2b11 	vmov	d1, r2, r3
 8001458:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 80015c0 <decodeGGA+0x678>
 800145c:	f009 fc44 	bl	800ace8 <pow>
 8001460:	ec53 2b10 	vmov	r2, r3, d0
 8001464:	4620      	mov	r0, r4
 8001466:	4629      	mov	r1, r5
 8001468:	f7ff f9f8 	bl	800085c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4640      	mov	r0, r8
 8001472:	4649      	mov	r1, r9
 8001474:	f7fe ff12 	bl	800029c <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fb9a 	bl	8000bb8 <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
 8001486:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]
	inx++;
 800148e:	4b4e      	ldr	r3, [pc, #312]	@ (80015c8 <decodeGGA+0x680>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	4a4c      	ldr	r2, [pc, #304]	@ (80015c8 <decodeGGA+0x680>)
 8001496:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001498:	4b4b      	ldr	r3, [pc, #300]	@ (80015c8 <decodeGGA+0x680>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80014a8:	4b47      	ldr	r3, [pc, #284]	@ (80015c8 <decodeGGA+0x680>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a46      	ldr	r2, [pc, #280]	@ (80015c8 <decodeGGA+0x680>)
 80014b0:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80014b2:	4b45      	ldr	r3, [pc, #276]	@ (80015c8 <decodeGGA+0x680>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a43      	ldr	r2, [pc, #268]	@ (80015c8 <decodeGGA+0x680>)
 80014ba:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80014bc:	4b42      	ldr	r3, [pc, #264]	@ (80015c8 <decodeGGA+0x680>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a41      	ldr	r2, [pc, #260]	@ (80015c8 <decodeGGA+0x680>)
 80014c4:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80014c6:	4b40      	ldr	r3, [pc, #256]	@ (80015c8 <decodeGGA+0x680>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a3e      	ldr	r2, [pc, #248]	@ (80015c8 <decodeGGA+0x680>)
 80014ce:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	220c      	movs	r2, #12
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f007 fb29 	bl	8008b30 <memset>
	i=0;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80014e2:	e013      	b.n	800150c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 80014e4:	4b38      	ldr	r3, [pc, #224]	@ (80015c8 <decodeGGA+0x680>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	7819      	ldrb	r1, [r3, #0]
 80014f0:	f107 020c 	add.w	r2, r7, #12
 80014f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f6:	4413      	add	r3, r2
 80014f8:	460a      	mov	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
		i++;
 80014fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fe:	3301      	adds	r3, #1
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001502:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <decodeGGA+0x680>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a2f      	ldr	r2, [pc, #188]	@ (80015c8 <decodeGGA+0x680>)
 800150a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800150c:	4b2e      	ldr	r3, [pc, #184]	@ (80015c8 <decodeGGA+0x680>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b2c      	cmp	r3, #44	@ 0x2c
 800151a:	d1e3      	bne.n	80014e4 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4618      	mov	r0, r3
 8001522:	f006 fcc6 	bl	8007eb2 <atoi>
 8001526:	4602      	mov	r2, r0
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28


	/***************** skip HDOP  *********************/
	inx++;
 800152c:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <decodeGGA+0x680>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a25      	ldr	r2, [pc, #148]	@ (80015c8 <decodeGGA+0x680>)
 8001534:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001536:	e004      	b.n	8001542 <decodeGGA+0x5fa>
 8001538:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <decodeGGA+0x680>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a22      	ldr	r2, [pc, #136]	@ (80015c8 <decodeGGA+0x680>)
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <decodeGGA+0x680>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001550:	d1f2      	bne.n	8001538 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <decodeGGA+0x680>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <decodeGGA+0x680>)
 800155a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	220c      	movs	r2, #12
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f007 fae3 	bl	8008b30 <memset>
	i=0;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 800156e:	e013      	b.n	8001598 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <decodeGGA+0x680>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	7819      	ldrb	r1, [r3, #0]
 800157c:	f107 020c 	add.w	r2, r7, #12
 8001580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001582:	4413      	add	r3, r2
 8001584:	460a      	mov	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
		i++;
 8001588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158a:	3301      	adds	r3, #1
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <decodeGGA+0x680>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	4a0c      	ldr	r2, [pc, #48]	@ (80015c8 <decodeGGA+0x680>)
 8001596:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <decodeGGA+0x680>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b2c      	cmp	r3, #44	@ 0x2c
 80015a6:	d1e3      	bne.n	8001570 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4618      	mov	r0, r3
 80015ae:	f006 fc80 	bl	8007eb2 <atoi>
 80015b2:	4603      	mov	r3, r0
 80015b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 80015ba:	e00c      	b.n	80015d6 <decodeGGA+0x68e>
 80015bc:	f3af 8000 	nop.w
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40240000 	.word	0x40240000
 80015c8:	20000224 	.word	0x20000224
 80015cc:	40590000 	.word	0x40590000
 80015d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d2:	3301      	adds	r3, #1
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015d6:	f107 020c 	add.w	r2, r7, #12
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80015e2:	d1f5      	bne.n	80015d0 <decodeGGA+0x688>
	j++;
 80015e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e6:	3301      	adds	r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fe46 	bl	8000280 <strlen>
 80015f4:	4602      	mov	r2, r0
 80015f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80015fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fe:	f107 020c 	add.w	r2, r7, #12
 8001602:	4413      	add	r3, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f006 fc54 	bl	8007eb2 <atoi>
 800160a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 800160c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff8f 	bl	8000534 <__aeabi_i2d>
 8001616:	4604      	mov	r4, r0
 8001618:	460d      	mov	r5, r1
 800161a:	69f8      	ldr	r0, [r7, #28]
 800161c:	f7fe ff8a 	bl	8000534 <__aeabi_i2d>
 8001620:	4680      	mov	r8, r0
 8001622:	4689      	mov	r9, r1
 8001624:	6a38      	ldr	r0, [r7, #32]
 8001626:	f7fe ff85 	bl	8000534 <__aeabi_i2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	ec43 2b11 	vmov	d1, r2, r3
 8001632:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8001690 <decodeGGA+0x748>
 8001636:	f009 fb57 	bl	800ace8 <pow>
 800163a:	ec53 2b10 	vmov	r2, r3, d0
 800163e:	4640      	mov	r0, r8
 8001640:	4649      	mov	r1, r9
 8001642:	f7ff f90b 	bl	800085c <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4620      	mov	r0, r4
 800164c:	4629      	mov	r1, r5
 800164e:	f7fe fe25 	bl	800029c <__adddf3>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff faad 	bl	8000bb8 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	621a      	str	r2, [r3, #32]

	inx++;
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <decodeGGA+0x750>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <decodeGGA+0x750>)
 8001670:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <decodeGGA+0x750>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 8001684:	2300      	movs	r3, #0

}
 8001686:	4618      	mov	r0, r3
 8001688:	3730      	adds	r7, #48	@ 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001690:	00000000 	.word	0x00000000
 8001694:	40240000 	.word	0x40240000
 8001698:	20000224 	.word	0x20000224

0800169c <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 800169c:	b40f      	push	{r0, r1, r2, r3}
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b2:	480b      	ldr	r0, [pc, #44]	@ (80016e0 <myprintf+0x44>)
 80016b4:	f007 fa2e 	bl	8008b14 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80016b8:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <myprintf+0x44>)
 80016ba:	f7fe fde1 	bl	8000280 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	4905      	ldr	r1, [pc, #20]	@ (80016e0 <myprintf+0x44>)
 80016cc:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <myprintf+0x48>)
 80016ce:	f002 fc8b 	bl	8003fe8 <HAL_UART_Transmit>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016dc:	b004      	add	sp, #16
 80016de:	4770      	bx	lr
 80016e0:	20000434 	.word	0x20000434
 80016e4:	200002d4 	.word	0x200002d4

080016e8 <parse_gps_output>:


int VCCTimeout = 5000; // GGA or RMC will not be received if the VCC is not sufficient

char* parse_gps_output()
{
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af06      	add	r7, sp, #24
	 count++;
 80016ee:	4b32      	ldr	r3, [pc, #200]	@ (80017b8 <parse_gps_output+0xd0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a30      	ldr	r2, [pc, #192]	@ (80017b8 <parse_gps_output+0xd0>)
 80016f6:	6013      	str	r3, [r2, #0]
	  if (Wait_for("GGA") == 1)
 80016f8:	4830      	ldr	r0, [pc, #192]	@ (80017bc <parse_gps_output+0xd4>)
 80016fa:	f000 fe53 	bl	80023a4 <Wait_for>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b01      	cmp	r3, #1
 8001702:	d115      	bne.n	8001730 <parse_gps_output+0x48>
	  {
		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 8001704:	4b2e      	ldr	r3, [pc, #184]	@ (80017c0 <parse_gps_output+0xd8>)
 8001706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170a:	601a      	str	r2, [r3, #0]

		  Copy_upto("*", GGA);
 800170c:	492d      	ldr	r1, [pc, #180]	@ (80017c4 <parse_gps_output+0xdc>)
 800170e:	482e      	ldr	r0, [pc, #184]	@ (80017c8 <parse_gps_output+0xe0>)
 8001710:	f000 fdc8 	bl	80022a4 <Copy_upto>
		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8001714:	492d      	ldr	r1, [pc, #180]	@ (80017cc <parse_gps_output+0xe4>)
 8001716:	482b      	ldr	r0, [pc, #172]	@ (80017c4 <parse_gps_output+0xdc>)
 8001718:	f7ff fc16 	bl	8000f48 <decodeGGA>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <parse_gps_output+0x42>
 8001722:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <parse_gps_output+0xe8>)
 8001724:	2202      	movs	r2, #2
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e002      	b.n	8001730 <parse_gps_output+0x48>
		  else flagGGA = 1;  // 1 indicates the data is invalid
 800172a:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <parse_gps_output+0xe8>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
	  }

	  if ((flagGGA == 2) | (flagRMC == 2))
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <parse_gps_output+0xe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b02      	cmp	r3, #2
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <parse_gps_output+0xec>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b02      	cmp	r3, #2
 8001744:	bf0c      	ite	eq
 8001746:	2301      	moveq	r3, #1
 8001748:	2300      	movne	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d02b      	beq.n	80017ac <parse_gps_output+0xc4>
	  {
		  memset(lcdBuffer, '\0', 50);
 8001754:	2232      	movs	r2, #50	@ 0x32
 8001756:	2100      	movs	r1, #0
 8001758:	481f      	ldr	r0, [pc, #124]	@ (80017d8 <parse_gps_output+0xf0>)
 800175a:	f007 f9e9 	bl	8008b30 <memset>
		  //lcd_put_cur(1, 0);
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <parse_gps_output+0xe4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fef8 	bl	8000558 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <parse_gps_output+0xe4>)
 800176e:	791b      	ldrb	r3, [r3, #4]
 8001770:	461e      	mov	r6, r3
				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001772:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <parse_gps_output+0xe4>)
 8001774:	689b      	ldr	r3, [r3, #8]
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe feee 	bl	8000558 <__aeabi_f2d>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001780:	4912      	ldr	r1, [pc, #72]	@ (80017cc <parse_gps_output+0xe4>)
 8001782:	7b09      	ldrb	r1, [r1, #12]
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001784:	9104      	str	r1, [sp, #16]
 8001786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800178a:	9600      	str	r6, [sp, #0]
 800178c:	4622      	mov	r2, r4
 800178e:	462b      	mov	r3, r5
 8001790:	4912      	ldr	r1, [pc, #72]	@ (80017dc <parse_gps_output+0xf4>)
 8001792:	4811      	ldr	r0, [pc, #68]	@ (80017d8 <parse_gps_output+0xf0>)
 8001794:	f007 f930 	bl	80089f8 <siprintf>
		  myprintf("\r\n %s", lcdBuffer);
 8001798:	490f      	ldr	r1, [pc, #60]	@ (80017d8 <parse_gps_output+0xf0>)
 800179a:	4811      	ldr	r0, [pc, #68]	@ (80017e0 <parse_gps_output+0xf8>)
 800179c:	f7ff ff7e 	bl	800169c <myprintf>
		  HAL_UART_Transmit(&huart2, lcdBuffer, sizeof(lcdBuffer), 100);
 80017a0:	2364      	movs	r3, #100	@ 0x64
 80017a2:	2264      	movs	r2, #100	@ 0x64
 80017a4:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <parse_gps_output+0xf0>)
 80017a6:	480f      	ldr	r0, [pc, #60]	@ (80017e4 <parse_gps_output+0xfc>)
 80017a8:	f002 fc1e 	bl	8003fe8 <HAL_UART_Transmit>
//	 		  lcd_send_string(lcdBuffer);
	  }
	  return lcdBuffer;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <parse_gps_output+0xf0>)
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3704      	adds	r7, #4
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000430 	.word	0x20000430
 80017bc:	0800bbc0 	.word	0x0800bbc0
 80017c0:	20000004 	.word	0x20000004
 80017c4:	2000031c 	.word	0x2000031c
 80017c8:	0800bbc4 	.word	0x0800bbc4
 80017cc:	20000380 	.word	0x20000380
 80017d0:	200003c4 	.word	0x200003c4
 80017d4:	200003c8 	.word	0x200003c8
 80017d8:	200003cc 	.word	0x200003cc
 80017dc:	0800bbc8 	.word	0x0800bbc8
 80017e0:	0800bbdc 	.word	0x0800bbdc
 80017e4:	200002d4 	.word	0x200002d4

080017e8 <sd_card_load>:

void sd_card_load(char buffer[], int size)
{
 80017e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017ec:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80017f6:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 80017fa:	6018      	str	r0, [r3, #0]
 80017fc:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8001800:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 8001804:	6019      	str	r1, [r3, #0]
 8001806:	466b      	mov	r3, sp
 8001808:	461e      	mov	r6, r3
	 myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 800180a:	486f      	ldr	r0, [pc, #444]	@ (80019c8 <sd_card_load+0x1e0>)
 800180c:	f7ff ff46 	bl	800169c <myprintf>

	   HAL_Delay(1000); //a short delay is important to let the SD card settle
 8001810:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001814:	f000 ff48 	bl	80026a8 <HAL_Delay>
	   FRESULT fres; //Result after operations



//	   //Open the file system
	   fres = f_mount(&FatFs, "", 1); //1=mount now
 8001818:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 800181c:	2201      	movs	r2, #1
 800181e:	496b      	ldr	r1, [pc, #428]	@ (80019cc <sd_card_load+0x1e4>)
 8001820:	4618      	mov	r0, r3
 8001822:	f005 fe19 	bl	8007458 <f_mount>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3487 	strb.w	r3, [r7, #1159]	@ 0x487
	   myprintf("Mount status is %d", fres);
 800182c:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 8001830:	4619      	mov	r1, r3
 8001832:	4867      	ldr	r0, [pc, #412]	@ (80019d0 <sd_card_load+0x1e8>)
 8001834:	f7ff ff32 	bl	800169c <myprintf>
	//   if (fres != FR_OK) {
	// 	myprintf("f_mount error (%i)\r\n", fres);
	// 	while(1);
	//   }
	   HAL_Delay(1000);
 8001838:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800183c:	f000 ff34 	bl	80026a8 <HAL_Delay>
//	   //Let's get some statistics from the SD card
	   DWORD free_clusters, free_sectors, total_sectors;

	   FATFS* getFreeFs;
//
	   fres = f_getfree("", &free_clusters, &getFreeFs);
 8001840:	f107 020c 	add.w	r2, r7, #12
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4619      	mov	r1, r3
 800184a:	4860      	ldr	r0, [pc, #384]	@ (80019cc <sd_card_load+0x1e4>)
 800184c:	f006 fa21 	bl	8007c92 <f_getfree>
 8001850:	4603      	mov	r3, r0
 8001852:	f887 3487 	strb.w	r3, [r7, #1159]	@ 0x487
	   myprintf("Free status is %d", fres);
 8001856:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 800185a:	4619      	mov	r1, r3
 800185c:	485d      	ldr	r0, [pc, #372]	@ (80019d4 <sd_card_load+0x1ec>)
 800185e:	f7ff ff1d 	bl	800169c <myprintf>
////	 	while(1);
////	   }
//	   myprintf("SD Card Part");
//
	   //Formula comes from ChaN's documentation
	   total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001862:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8001866:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	3b02      	subs	r3, #2
 8001870:	f507 6291 	add.w	r2, r7, #1160	@ 0x488
 8001874:	f2a2 427c 	subw	r2, r2, #1148	@ 0x47c
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	8952      	ldrh	r2, [r2, #10]
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	f8c7 3480 	str.w	r3, [r7, #1152]	@ 0x480
	   free_sectors = free_clusters * getFreeFs->csize;
 8001884:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8001888:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	895b      	ldrh	r3, [r3, #10]
 8001890:	461a      	mov	r2, r3
 8001892:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8001896:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c

	   myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80018a4:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 80018a8:	0859      	lsrs	r1, r3, #1
 80018aa:	f8d7 347c 	ldr.w	r3, [r7, #1148]	@ 0x47c
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	461a      	mov	r2, r3
 80018b2:	4849      	ldr	r0, [pc, #292]	@ (80019d8 <sd_card_load+0x1f0>)
 80018b4:	f7ff fef2 	bl	800169c <myprintf>

	   BYTE readBuf[size];
 80018b8:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80018bc:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 80018c0:	6819      	ldr	r1, [r3, #0]
 80018c2:	1e4b      	subs	r3, r1, #1
 80018c4:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
 80018c8:	460a      	mov	r2, r1
 80018ca:	2300      	movs	r3, #0
 80018cc:	4690      	mov	r8, r2
 80018ce:	4699      	mov	r9, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018e4:	460a      	mov	r2, r1
 80018e6:	2300      	movs	r3, #0
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	00eb      	lsls	r3, r5, #3
 80018f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018fa:	00e2      	lsls	r2, r4, #3
 80018fc:	460b      	mov	r3, r1
 80018fe:	3307      	adds	r3, #7
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	ebad 0d03 	sub.w	sp, sp, r3
 8001908:	466b      	mov	r3, sp
 800190a:	3300      	adds	r3, #0
 800190c:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474

	   //Now let's try and write a file "write.txt"
	   fres = f_open(&fil, "gps_data.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	221a      	movs	r2, #26
 8001916:	4931      	ldr	r1, [pc, #196]	@ (80019dc <sd_card_load+0x1f4>)
 8001918:	4618      	mov	r0, r3
 800191a:	f005 fde3 	bl	80074e4 <f_open>
 800191e:	4603      	mov	r3, r0
 8001920:	f887 3487 	strb.w	r3, [r7, #1159]	@ 0x487
	   if(fres == FR_OK) {
 8001924:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 8001928:	2b00      	cmp	r3, #0
 800192a:	d103      	bne.n	8001934 <sd_card_load+0x14c>
	 	myprintf("I was able to open 'write.txt' for writing\r\n");
 800192c:	482c      	ldr	r0, [pc, #176]	@ (80019e0 <sd_card_load+0x1f8>)
 800192e:	f7ff feb5 	bl	800169c <myprintf>
 8001932:	e005      	b.n	8001940 <sd_card_load+0x158>
	   } else {
	 	myprintf("f_open error (%i)\r\n", fres);
 8001934:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 8001938:	4619      	mov	r1, r3
 800193a:	482a      	ldr	r0, [pc, #168]	@ (80019e4 <sd_card_load+0x1fc>)
 800193c:	f7ff feae 	bl	800169c <myprintf>
	   }

	   //Copy in a string
	   strncpy((char*)readBuf, buffer, size);
 8001940:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8001944:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800194e:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 8001952:	6819      	ldr	r1, [r3, #0]
 8001954:	f8d7 0474 	ldr.w	r0, [r7, #1140]	@ 0x474
 8001958:	f007 f8f2 	bl	8008b40 <strncpy>
	   UINT bytesWrote;
	   fres = f_write(&fil, readBuf, size, &bytesWrote);
 800195c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8001960:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	f107 0014 	add.w	r0, r7, #20
 800196e:	f8d7 1474 	ldr.w	r1, [r7, #1140]	@ 0x474
 8001972:	f005 ff71 	bl	8007858 <f_write>
 8001976:	4603      	mov	r3, r0
 8001978:	f887 3487 	strb.w	r3, [r7, #1159]	@ 0x487
	   if(fres == FR_OK) {
 800197c:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <sd_card_load+0x1b0>
	 	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8001984:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8001988:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4619      	mov	r1, r3
 8001990:	4815      	ldr	r0, [pc, #84]	@ (80019e8 <sd_card_load+0x200>)
 8001992:	f7ff fe83 	bl	800169c <myprintf>
 8001996:	e005      	b.n	80019a4 <sd_card_load+0x1bc>
	   } else {
	 	myprintf("f_write error (%i)\r\n", fres);
 8001998:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 800199c:	4619      	mov	r1, r3
 800199e:	4813      	ldr	r0, [pc, #76]	@ (80019ec <sd_card_load+0x204>)
 80019a0:	f7ff fe7c 	bl	800169c <myprintf>
	   }

	   //Be a tidy kiwi - don't forget to close your file!
	   f_close(&fil);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4618      	mov	r0, r3
 80019aa:	f006 f948 	bl	8007c3e <f_close>

	   //We're done, so de-mount the drive
	   f_mount(NULL, "", 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	4906      	ldr	r1, [pc, #24]	@ (80019cc <sd_card_load+0x1e4>)
 80019b2:	2000      	movs	r0, #0
 80019b4:	f005 fd50 	bl	8007458 <f_mount>
 80019b8:	46b5      	mov	sp, r6
}
 80019ba:	bf00      	nop
 80019bc:	f207 478c 	addw	r7, r7, #1164	@ 0x48c
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019c6:	bf00      	nop
 80019c8:	0800bbe4 	.word	0x0800bbe4
 80019cc:	0800bc04 	.word	0x0800bc04
 80019d0:	0800bc08 	.word	0x0800bc08
 80019d4:	0800bc1c 	.word	0x0800bc1c
 80019d8:	0800bc30 	.word	0x0800bc30
 80019dc:	0800bc78 	.word	0x0800bc78
 80019e0:	0800bc88 	.word	0x0800bc88
 80019e4:	0800bcb8 	.word	0x0800bcb8
 80019e8:	0800bccc 	.word	0x0800bccc
 80019ec:	0800bcf0 	.word	0x0800bcf0

080019f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f6:	f000 fde5 	bl	80025c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fa:	f000 f82b 	bl	8001a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fe:	f000 f91d 	bl	8001c3c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a02:	f000 f891 	bl	8001b28 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001a06:	f000 f8c5 	bl	8001b94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a0a:	f000 f8ed 	bl	8001be8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001a0e:	f003 fa9d 	bl	8004f4c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  Ringbuf_init();
 8001a12:	f000 fb97 	bl	8002144 <Ringbuf_init>
  HAL_Delay (500);
 8001a16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a1a:	f000 fe45 	bl	80026a8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
 // while(1){}
 while (1)
  {
    /* USER CODE END WHILE */
	  char* data = parse_gps_output();
 8001a1e:	f7ff fe63 	bl	80016e8 <parse_gps_output>
 8001a22:	6078      	str	r0, [r7, #4]
	  if (count % 50 == 0){
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <main+0x5c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <main+0x60>)
 8001a2a:	fb83 1302 	smull	r1, r3, r3, r2
 8001a2e:	1119      	asrs	r1, r3, #4
 8001a30:	17d3      	asrs	r3, r2, #31
 8001a32:	1acb      	subs	r3, r1, r3
 8001a34:	2132      	movs	r1, #50	@ 0x32
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ee      	bne.n	8001a1e <main+0x2e>
		  sd_card_load(data, sizeof(data));
 8001a40:	2104      	movs	r1, #4
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fed0 	bl	80017e8 <sd_card_load>
  {
 8001a48:	e7e9      	b.n	8001a1e <main+0x2e>
 8001a4a:	bf00      	nop
 8001a4c:	20000430 	.word	0x20000430
 8001a50:	51eb851f 	.word	0x51eb851f

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b094      	sub	sp, #80	@ 0x50
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	2230      	movs	r2, #48	@ 0x30
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f007 f864 	bl	8008b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	4b28      	ldr	r3, [pc, #160]	@ (8001b20 <SystemClock_Config+0xcc>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	4a27      	ldr	r2, [pc, #156]	@ (8001b20 <SystemClock_Config+0xcc>)
 8001a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <SystemClock_Config+0xcc>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <SystemClock_Config+0xd0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a21      	ldr	r2, [pc, #132]	@ (8001b24 <SystemClock_Config+0xd0>)
 8001a9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <SystemClock_Config+0xd0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab8:	2310      	movs	r3, #16
 8001aba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abc:	2302      	movs	r3, #2
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ac8:	23c0      	movs	r3, #192	@ 0xc0
 8001aca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001acc:	2304      	movs	r3, #4
 8001ace:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 f94b 	bl	8002d74 <HAL_RCC_OscConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ae4:	f000 f908 	bl	8001cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae8:	230f      	movs	r3, #15
 8001aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aec:	2302      	movs	r3, #2
 8001aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001af4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001afe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2103      	movs	r1, #3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 fbac 	bl	8003264 <HAL_RCC_ClockConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b12:	f000 f8f1 	bl	8001cf8 <Error_Handler>
  }
}
 8001b16:	bf00      	nop
 8001b18:	3750      	adds	r7, #80	@ 0x50
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40007000 	.word	0x40007000

08001b28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b2e:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <MX_SPI1_Init+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b5c:	2238      	movs	r2, #56	@ 0x38
 8001b5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6c:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b74:	220a      	movs	r2, #10
 8001b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	@ (8001b8c <MX_SPI1_Init+0x64>)
 8001b7a:	f001 fd93 	bl	80036a4 <HAL_SPI_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b84:	f000 f8b8 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000234 	.word	0x20000234
 8001b90:	40013000 	.word	0x40013000

08001b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b98:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	@ (8001be4 <MX_USART1_UART_Init+0x50>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001ba0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	@ (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bcc:	f002 f9bc 	bl	8003f48 <HAL_UART_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bd6:	f000 f88f 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000028c 	.word	0x2000028c
 8001be4:	40011000 	.word	0x40011000

08001be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	@ (8001c38 <MX_USART2_UART_Init+0x50>)
 8001bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	220c      	movs	r2, #12
 8001c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c20:	f002 f992 	bl	8003f48 <HAL_UART_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c2a:	f000 f865 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200002d4 	.word	0x200002d4
 8001c38:	40004400 	.word	0x40004400

08001c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	@ 0x28
 8001c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a25      	ldr	r2, [pc, #148]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <MX_GPIO_Init+0xb4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2140      	movs	r1, #64	@ 0x40
 8001cc6:	480b      	ldr	r0, [pc, #44]	@ (8001cf4 <MX_GPIO_Init+0xb8>)
 8001cc8:	f001 f83a 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001ccc:	2340      	movs	r3, #64	@ 0x40
 8001cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4804      	ldr	r0, [pc, #16]	@ (8001cf4 <MX_GPIO_Init+0xb8>)
 8001ce4:	f000 fea8 	bl	8002a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	@ 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <Error_Handler+0x8>

08001d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	4a0f      	ldr	r2, [pc, #60]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	4a08      	ldr	r2, [pc, #32]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d42:	2007      	movs	r0, #7
 8001d44:	f000 fda4 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <HAL_SPI_MspInit+0x84>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12b      	bne.n	8001dce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	4a17      	ldr	r2, [pc, #92]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dae:	23e0      	movs	r3, #224	@ 0xe0
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <HAL_SPI_MspInit+0x8c>)
 8001dca:	f000 fe35 	bl	8002a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	@ 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40013000 	.word	0x40013000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020000 	.word	0x40020000

08001de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	@ 0x30
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a36      	ldr	r2, [pc, #216]	@ (8001edc <HAL_UART_MspInit+0xf8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d135      	bne.n	8001e72 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	4a34      	ldr	r2, [pc, #208]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e10:	f043 0310 	orr.w	r3, r3, #16
 8001e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e16:	4b32      	ldr	r3, [pc, #200]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e50:	2307      	movs	r3, #7
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4822      	ldr	r0, [pc, #136]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e5c:	f000 fdec 	bl	8002a38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	2025      	movs	r0, #37	@ 0x25
 8001e66:	f000 fd1e 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e6a:	2025      	movs	r0, #37	@ 0x25
 8001e6c:	f000 fd37 	bl	80028de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e70:	e030      	b.n	8001ed4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee8 <HAL_UART_MspInit+0x104>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d12b      	bne.n	8001ed4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	4a16      	ldr	r2, [pc, #88]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001ed0:	f000 fdb2 	bl	8002a38 <HAL_GPIO_Init>
}
 8001ed4:	bf00      	nop
 8001ed6:	3730      	adds	r7, #48	@ 0x30
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40011000 	.word	0x40011000
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40004400 	.word	0x40004400

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <HardFault_Handler+0x4>

08001efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <MemManage_Handler+0x4>

08001f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if (timeout > 0)  timeout--;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <SysTick_Handler+0x34>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <SysTick_Handler+0x18>
 8001f4c:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <SysTick_Handler+0x34>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <SysTick_Handler+0x34>)
 8001f56:	801a      	strh	r2, [r3, #0]
  if (VCCTimeout>0) VCCTimeout--;
 8001f58:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <SysTick_Handler+0x38>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	dd04      	ble.n	8001f6a <SysTick_Handler+0x2a>
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <SysTick_Handler+0x38>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <SysTick_Handler+0x38>)
 8001f68:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6a:	f000 fb7d 	bl	8002668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000538 	.word	0x20000538
 8001f78:	20000004 	.word	0x20000004

08001f7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
   Uart_isr(&huart1);
 8001f80:	4803      	ldr	r0, [pc, #12]	@ (8001f90 <USART1_IRQHandler+0x14>)
 8001f82:	f000 fa97 	bl	80024b4 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f86:	4802      	ldr	r0, [pc, #8]	@ (8001f90 <USART1_IRQHandler+0x14>)
 8001f88:	f002 f8ba 	bl	8004100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000028c 	.word	0x2000028c

08001f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return 1;
 8001f98:	2301      	movs	r3, #1
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_kill>:

int _kill(int pid, int sig)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fae:	f006 fe25 	bl	8008bfc <__errno>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2216      	movs	r2, #22
 8001fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_exit>:

void _exit (int status)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ffe7 	bl	8001fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fd6:	bf00      	nop
 8001fd8:	e7fd      	b.n	8001fd6 <_exit+0x12>

08001fda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e00a      	b.n	8002002 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fec:	f3af 8000 	nop.w
 8001ff0:	4601      	mov	r1, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	60ba      	str	r2, [r7, #8]
 8001ff8:	b2ca      	uxtb	r2, r1
 8001ffa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3301      	adds	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	dbf0      	blt.n	8001fec <_read+0x12>
  }

  return len;
 800200a:	687b      	ldr	r3, [r7, #4]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e009      	b.n	800203a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	60ba      	str	r2, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	dbf1      	blt.n	8002026 <_write+0x12>
  }
  return len;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_close>:

int _close(int file)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002074:	605a      	str	r2, [r3, #4]
  return 0;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_isatty>:

int _isatty(int file)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800208c:	2301      	movs	r3, #1
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	@ (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	@ (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f006 fd8a 	bl	8008bfc <__errno>
 80020e8:	4603      	mov	r3, r0
 80020ea:	220c      	movs	r2, #12
 80020ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <_sbrk+0x64>)
 8002104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20020000 	.word	0x20020000
 8002114:	00000400 	.word	0x00000400
 8002118:	20000534 	.word	0x20000534
 800211c:	20000af0 	.word	0x20000af0

08002120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <SystemInit+0x20>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <SystemInit+0x20>)
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002148:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <Ringbuf_init+0x3c>)
 800214a:	4a0e      	ldr	r2, [pc, #56]	@ (8002184 <Ringbuf_init+0x40>)
 800214c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <Ringbuf_init+0x44>)
 8002150:	4a0e      	ldr	r2, [pc, #56]	@ (800218c <Ringbuf_init+0x48>)
 8002152:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002154:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <Ringbuf_init+0x4c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <Ringbuf_init+0x4c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002164:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <Ringbuf_init+0x4c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <Ringbuf_init+0x4c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0220 	orr.w	r2, r2, #32
 8002172:	60da      	str	r2, [r3, #12]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	2000094c 	.word	0x2000094c
 8002184:	2000053c 	.word	0x2000053c
 8002188:	20000950 	.word	0x20000950
 800218c:	20000744 	.word	0x20000744
 8002190:	2000028c 	.word	0x2000028c

08002194 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021a6:	3301      	adds	r3, #1
 80021a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ac:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d009      	beq.n	80021ce <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	79f9      	ldrb	r1, [r7, #7]
 80021c4:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80021e2:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <Uart_read+0x54>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <Uart_read+0x54>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d102      	bne.n	80021fc <Uart_read+0x20>
  {
    return -1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	e013      	b.n	8002224 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <Uart_read+0x54>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <Uart_read+0x54>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800220c:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <Uart_read+0x54>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <Uart_read+0x54>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800221e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 8002222:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	2000094c 	.word	0x2000094c

08002234 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002238:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <IsDataAvailable+0x30>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002240:	b29a      	uxth	r2, r3
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <IsDataAvailable+0x30>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800224a:	b29b      	uxth	r3, r3
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	b29b      	uxth	r3, r3
 8002250:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002254:	b29b      	uxth	r3, r3
 8002256:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	2000094c 	.word	0x2000094c

08002268 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <Uart_peek+0x38>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002274:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <Uart_peek+0x38>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800227c:	429a      	cmp	r2, r3
 800227e:	d102      	bne.n	8002286 <Uart_peek+0x1e>
  {
    return -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	e006      	b.n	8002294 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <Uart_peek+0x38>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <Uart_peek+0x38>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002292:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	2000094c 	.word	0x2000094c

080022a4 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fd ffe4 	bl	8000280 <strlen>
 80022b8:	4603      	mov	r3, r0
 80022ba:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 80022c0:	e01e      	b.n	8002300 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80022c2:	4b36      	ldr	r3, [pc, #216]	@ (800239c <Copy_upto+0xf8>)
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	4b35      	ldr	r3, [pc, #212]	@ (800239c <Copy_upto+0xf8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	6838      	ldr	r0, [r7, #0]
 80022d2:	4403      	add	r3, r0
 80022d4:	5c8a      	ldrb	r2, [r1, r2]
 80022d6:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80022d8:	4b30      	ldr	r3, [pc, #192]	@ (800239c <Copy_upto+0xf8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	4b2e      	ldr	r3, [pc, #184]	@ (800239c <Copy_upto+0xf8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	3301      	adds	r3, #1
 80022f2:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80022f4:	bf00      	nop
 80022f6:	f7ff ff9d 	bl	8002234 <IsDataAvailable>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0fa      	beq.n	80022f6 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002300:	f7ff ffb2 	bl	8002268 <Uart_peek>
 8002304:	4601      	mov	r1, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	4299      	cmp	r1, r3
 8002310:	d1d7      	bne.n	80022c2 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8002312:	e027      	b.n	8002364 <Copy_upto+0xc0>
	{
		so_far++;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3301      	adds	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800231a:	f7ff ff5f 	bl	80021dc <Uart_read>
 800231e:	4601      	mov	r1, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	613a      	str	r2, [r7, #16]
 8002326:	461a      	mov	r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4413      	add	r3, r2
 800232c:	b2ca      	uxtb	r2, r1
 800232e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	d101      	bne.n	800233c <Copy_upto+0x98>
 8002338:	2301      	movs	r3, #1
 800233a:	e02a      	b.n	8002392 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 800233c:	4b18      	ldr	r3, [pc, #96]	@ (80023a0 <Copy_upto+0xfc>)
 800233e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002342:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002344:	bf00      	nop
 8002346:	f7ff ff75 	bl	8002234 <IsDataAvailable>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <Copy_upto+0xb4>
 8002350:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <Copy_upto+0xfc>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f6      	bne.n	8002346 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <Copy_upto+0xfc>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <Copy_upto+0xc0>
 8002360:	2300      	movs	r3, #0
 8002362:	e016      	b.n	8002392 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8002364:	f7ff ff80 	bl	8002268 <Uart_peek>
 8002368:	4601      	mov	r1, r0
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	4299      	cmp	r1, r3
 8002374:	d0ce      	beq.n	8002314 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	429a      	cmp	r2, r3
 800237c:	d002      	beq.n	8002384 <Copy_upto+0xe0>
	{
		so_far = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
		goto again;
 8002382:	e79d      	b.n	80022c0 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	429a      	cmp	r2, r3
 800238a:	d101      	bne.n	8002390 <Copy_upto+0xec>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <Copy_upto+0xee>
	else return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000094c 	.word	0x2000094c
 80023a0:	20000538 	.word	0x20000538

080023a4 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7fd ff65 	bl	8000280 <strlen>
 80023b6:	4603      	mov	r3, r0
 80023b8:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 80023ba:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <Wait_for+0x108>)
 80023bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80023c0:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80023c2:	bf00      	nop
 80023c4:	f7ff ff36 	bl	8002234 <IsDataAvailable>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <Wait_for+0x32>
 80023ce:	4b37      	ldr	r3, [pc, #220]	@ (80024ac <Wait_for+0x108>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f6      	bne.n	80023c4 <Wait_for+0x20>
	if (timeout == 0) return 0;
 80023d6:	4b35      	ldr	r3, [pc, #212]	@ (80024ac <Wait_for+0x108>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d119      	bne.n	8002412 <Wait_for+0x6e>
 80023de:	2300      	movs	r3, #0
 80023e0:	e060      	b.n	80024a4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80023e2:	4b33      	ldr	r3, [pc, #204]	@ (80024b0 <Wait_for+0x10c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80023ea:	4b31      	ldr	r3, [pc, #196]	@ (80024b0 <Wait_for+0x10c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d00b      	beq.n	800240e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80023f6:	4b2e      	ldr	r3, [pc, #184]	@ (80024b0 <Wait_for+0x10c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	4b2b      	ldr	r3, [pc, #172]	@ (80024b0 <Wait_for+0x10c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002408:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800240c:	e001      	b.n	8002412 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800240e:	2300      	movs	r3, #0
 8002410:	e048      	b.n	80024a4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002412:	f7ff ff29 	bl	8002268 <Uart_peek>
 8002416:	4601      	mov	r1, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4299      	cmp	r1, r3
 8002422:	d1de      	bne.n	80023e2 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002424:	e027      	b.n	8002476 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3301      	adds	r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800242c:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <Wait_for+0x10c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	4b1e      	ldr	r3, [pc, #120]	@ (80024b0 <Wait_for+0x10c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800243e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	429a      	cmp	r2, r3
 8002448:	d101      	bne.n	800244e <Wait_for+0xaa>
 800244a:	2301      	movs	r3, #1
 800244c:	e02a      	b.n	80024a4 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 800244e:	4b17      	ldr	r3, [pc, #92]	@ (80024ac <Wait_for+0x108>)
 8002450:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002454:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002456:	bf00      	nop
 8002458:	f7ff feec 	bl	8002234 <IsDataAvailable>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <Wait_for+0xc6>
 8002462:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <Wait_for+0x108>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f6      	bne.n	8002458 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <Wait_for+0x108>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <Wait_for+0xd2>
 8002472:	2300      	movs	r3, #0
 8002474:	e016      	b.n	80024a4 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002476:	f7ff fef7 	bl	8002268 <Uart_peek>
 800247a:	4601      	mov	r1, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4299      	cmp	r1, r3
 8002486:	d0ce      	beq.n	8002426 <Wait_for+0x82>
	}

	if (so_far != len)
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	429a      	cmp	r2, r3
 800248e:	d002      	beq.n	8002496 <Wait_for+0xf2>
	{
		so_far = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
		goto again;
 8002494:	e791      	b.n	80023ba <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	d101      	bne.n	80024a2 <Wait_for+0xfe>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <Wait_for+0x100>
	else return 0;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000538 	.word	0x20000538
 80024b0:	2000094c 	.word	0x2000094c

080024b4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d013      	beq.n	80024fe <Uart_isr+0x4a>
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80024ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <Uart_isr+0xb4>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fe4c 	bl	8002194 <store_char>
        return;
 80024fc:	e031      	b.n	8002562 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002504:	2b00      	cmp	r3, #0
 8002506:	d02c      	beq.n	8002562 <Uart_isr+0xae>
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d027      	beq.n	8002562 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002512:	4b16      	ldr	r3, [pc, #88]	@ (800256c <Uart_isr+0xb8>)
 8002514:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002518:	4b14      	ldr	r3, [pc, #80]	@ (800256c <Uart_isr+0xb8>)
 800251a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800251e:	429a      	cmp	r2, r3
 8002520:	d108      	bne.n	8002534 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002530:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8002532:	e015      	b.n	8002560 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002534:	4b0d      	ldr	r3, [pc, #52]	@ (800256c <Uart_isr+0xb8>)
 8002536:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800253a:	4a0c      	ldr	r2, [pc, #48]	@ (800256c <Uart_isr+0xb8>)
 800253c:	5cd3      	ldrb	r3, [r2, r3]
 800253e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002540:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <Uart_isr+0xb8>)
 8002542:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002546:	3301      	adds	r3, #1
 8002548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254c:	4a07      	ldr	r2, [pc, #28]	@ (800256c <Uart_isr+0xb8>)
 800254e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	7bba      	ldrb	r2, [r7, #14]
 800255e:	605a      	str	r2, [r3, #4]
    	return;
 8002560:	bf00      	nop
    }
}
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	2000094c 	.word	0x2000094c
 800256c:	20000744 	.word	0x20000744

08002570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002574:	f7ff fdd4 	bl	8002120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002578:	480c      	ldr	r0, [pc, #48]	@ (80025ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800257a:	490d      	ldr	r1, [pc, #52]	@ (80025b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800257c:	4a0d      	ldr	r2, [pc, #52]	@ (80025b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002580:	e002      	b.n	8002588 <LoopCopyDataInit>

08002582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002586:	3304      	adds	r3, #4

08002588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800258c:	d3f9      	bcc.n	8002582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258e:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002590:	4c0a      	ldr	r4, [pc, #40]	@ (80025bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002594:	e001      	b.n	800259a <LoopFillZerobss>

08002596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002598:	3204      	adds	r2, #4

0800259a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800259c:	d3fb      	bcc.n	8002596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800259e:	f006 fb33 	bl	8008c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a2:	f7ff fa25 	bl	80019f0 <main>
  bx  lr    
 80025a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80025b4:	0800c198 	.word	0x0800c198
  ldr r2, =_sbss
 80025b8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80025bc:	20000aec 	.word	0x20000aec

080025c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <ADC_IRQHandler>
	...

080025c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002604 <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002604 <HAL_Init+0x40>)
 80025ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_Init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002604 <HAL_Init+0x40>)
 80025da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e0:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a07      	ldr	r2, [pc, #28]	@ (8002604 <HAL_Init+0x40>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f000 f94f 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f000 f808 	bl	8002608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f8:	f7ff fb84 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00

08002608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002610:	4b12      	ldr	r3, [pc, #72]	@ (800265c <HAL_InitTick+0x54>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <HAL_InitTick+0x58>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800261e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f967 	bl	80028fa <HAL_SYSTICK_Config>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e00e      	b.n	8002654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b0f      	cmp	r3, #15
 800263a:	d80a      	bhi.n	8002652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800263c:	2200      	movs	r2, #0
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	f000 f92f 	bl	80028a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002648:	4a06      	ldr	r2, [pc, #24]	@ (8002664 <HAL_InitTick+0x5c>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000008 	.word	0x20000008
 8002660:	20000010 	.word	0x20000010
 8002664:	2000000c 	.word	0x2000000c

08002668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800266c:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <HAL_IncTick+0x20>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_IncTick+0x24>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4413      	add	r3, r2
 8002678:	4a04      	ldr	r2, [pc, #16]	@ (800268c <HAL_IncTick+0x24>)
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000010 	.word	0x20000010
 800268c:	20000954 	.word	0x20000954

08002690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return uwTick;
 8002694:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <HAL_GetTick+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000954 	.word	0x20000954

080026a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff ffee 	bl	8002690 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d005      	beq.n	80026ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_Delay+0x44>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ce:	bf00      	nop
 80026d0:	f7ff ffde 	bl	8002690 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d8f7      	bhi.n	80026d0 <HAL_Delay+0x28>
  {
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000010 	.word	0x20000010

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	@ (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	@ (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	@ (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	@ 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	@ 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	210f      	movs	r1, #15
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f7ff ff8e 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff29 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b8:	f7ff ff3e 	bl	8002738 <__NVIC_GetPriorityGrouping>
 80028bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	6978      	ldr	r0, [r7, #20]
 80028c4:	f7ff ff8e 	bl	80027e4 <NVIC_EncodePriority>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff5d 	bl	8002790 <__NVIC_SetPriority>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff31 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ffa2 	bl	800284c <SysTick_Config>
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002920:	f7ff feb6 	bl	8002690 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d008      	beq.n	8002944 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2280      	movs	r2, #128	@ 0x80
 8002936:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e052      	b.n	80029ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0216 	bic.w	r2, r2, #22
 8002952:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002962:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d103      	bne.n	8002974 <HAL_DMA_Abort+0x62>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0208 	bic.w	r2, r2, #8
 8002982:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002994:	e013      	b.n	80029be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002996:	f7ff fe7b 	bl	8002690 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d90c      	bls.n	80029be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e015      	b.n	80029ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e4      	bne.n	8002996 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	223f      	movs	r2, #63	@ 0x3f
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d004      	beq.n	8002a10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2280      	movs	r2, #128	@ 0x80
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e00c      	b.n	8002a2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2205      	movs	r2, #5
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	@ 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	e159      	b.n	8002d08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	f040 8148 	bne.w	8002d02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d005      	beq.n	8002a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d130      	bne.n	8002aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2203      	movs	r2, #3
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 0201 	and.w	r2, r3, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d017      	beq.n	8002b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d123      	bne.n	8002b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	08da      	lsrs	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3208      	adds	r2, #8
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	08da      	lsrs	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3208      	adds	r2, #8
 8002b76:	69b9      	ldr	r1, [r7, #24]
 8002b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a2 	beq.w	8002d02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b57      	ldr	r3, [pc, #348]	@ (8002d20 <HAL_GPIO_Init+0x2e8>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	4a56      	ldr	r2, [pc, #344]	@ (8002d20 <HAL_GPIO_Init+0x2e8>)
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bce:	4b54      	ldr	r3, [pc, #336]	@ (8002d20 <HAL_GPIO_Init+0x2e8>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bda:	4a52      	ldr	r2, [pc, #328]	@ (8002d24 <HAL_GPIO_Init+0x2ec>)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3302      	adds	r3, #2
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a49      	ldr	r2, [pc, #292]	@ (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d019      	beq.n	8002c3a <HAL_GPIO_Init+0x202>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a48      	ldr	r2, [pc, #288]	@ (8002d2c <HAL_GPIO_Init+0x2f4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0x1fe>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a47      	ldr	r2, [pc, #284]	@ (8002d30 <HAL_GPIO_Init+0x2f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00d      	beq.n	8002c32 <HAL_GPIO_Init+0x1fa>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a46      	ldr	r2, [pc, #280]	@ (8002d34 <HAL_GPIO_Init+0x2fc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_GPIO_Init+0x1f6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a45      	ldr	r2, [pc, #276]	@ (8002d38 <HAL_GPIO_Init+0x300>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_GPIO_Init+0x1f2>
 8002c26:	2304      	movs	r3, #4
 8002c28:	e008      	b.n	8002c3c <HAL_GPIO_Init+0x204>
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	e006      	b.n	8002c3c <HAL_GPIO_Init+0x204>
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e004      	b.n	8002c3c <HAL_GPIO_Init+0x204>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e002      	b.n	8002c3c <HAL_GPIO_Init+0x204>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_GPIO_Init+0x204>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	f002 0203 	and.w	r2, r2, #3
 8002c42:	0092      	lsls	r2, r2, #2
 8002c44:	4093      	lsls	r3, r2
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c4c:	4935      	ldr	r1, [pc, #212]	@ (8002d24 <HAL_GPIO_Init+0x2ec>)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	3302      	adds	r3, #2
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5a:	4b38      	ldr	r3, [pc, #224]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c84:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca8:	4a24      	ldr	r2, [pc, #144]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cae:	4b23      	ldr	r3, [pc, #140]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd8:	4b18      	ldr	r3, [pc, #96]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3301      	adds	r3, #1
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	f67f aea2 	bls.w	8002a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3724      	adds	r7, #36	@ 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40013800 	.word	0x40013800
 8002d28:	40020000 	.word	0x40020000
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	40020800 	.word	0x40020800
 8002d34:	40020c00 	.word	0x40020c00
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40013c00 	.word	0x40013c00

08002d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d50:	787b      	ldrb	r3, [r7, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d5c:	e003      	b.n	8002d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	041a      	lsls	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	619a      	str	r2, [r3, #24]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e267      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d075      	beq.n	8002e7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d92:	4b88      	ldr	r3, [pc, #544]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d00c      	beq.n	8002db8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9e:	4b85      	ldr	r3, [pc, #532]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d112      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002daa:	4b82      	ldr	r3, [pc, #520]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db6:	d10b      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d05b      	beq.n	8002e7c <HAL_RCC_OscConfig+0x108>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d157      	bne.n	8002e7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e242      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_OscConfig+0x74>
 8002dda:	4b76      	ldr	r3, [pc, #472]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a75      	ldr	r2, [pc, #468]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e01d      	b.n	8002e24 <HAL_RCC_OscConfig+0xb0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x98>
 8002df2:	4b70      	ldr	r3, [pc, #448]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6f      	ldr	r2, [pc, #444]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6c      	ldr	r2, [pc, #432]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCC_OscConfig+0xb0>
 8002e0c:	4b69      	ldr	r3, [pc, #420]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a68      	ldr	r2, [pc, #416]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b66      	ldr	r3, [pc, #408]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a65      	ldr	r2, [pc, #404]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7ff fc30 	bl	8002690 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7ff fc2c 	bl	8002690 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	@ 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e207      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0xc0>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7ff fc1c 	bl	8002690 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7ff fc18 	bl	8002690 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	@ 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1f3      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	4b51      	ldr	r3, [pc, #324]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0xe8>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d063      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e96:	4b47      	ldr	r3, [pc, #284]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d11c      	bne.n	8002edc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea2:	4b44      	ldr	r3, [pc, #272]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d116      	bne.n	8002edc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	4b41      	ldr	r3, [pc, #260]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x152>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e1c7      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4937      	ldr	r1, [pc, #220]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	e03a      	b.n	8002f52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee4:	4b34      	ldr	r3, [pc, #208]	@ (8002fb8 <HAL_RCC_OscConfig+0x244>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eea:	f7ff fbd1 	bl	8002690 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef2:	f7ff fbcd 	bl	8002690 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1a8      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f04:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4925      	ldr	r1, [pc, #148]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
 8002f24:	e015      	b.n	8002f52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f26:	4b24      	ldr	r3, [pc, #144]	@ (8002fb8 <HAL_RCC_OscConfig+0x244>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7ff fbb0 	bl	8002690 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f34:	f7ff fbac 	bl	8002690 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e187      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d036      	beq.n	8002fcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f66:	4b15      	ldr	r3, [pc, #84]	@ (8002fbc <HAL_RCC_OscConfig+0x248>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7ff fb90 	bl	8002690 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f74:	f7ff fb8c 	bl	8002690 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e167      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x200>
 8002f92:	e01b      	b.n	8002fcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f94:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <HAL_RCC_OscConfig+0x248>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9a:	f7ff fb79 	bl	8002690 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa0:	e00e      	b.n	8002fc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa2:	f7ff fb75 	bl	8002690 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d907      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e150      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	42470000 	.word	0x42470000
 8002fbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	4b88      	ldr	r3, [pc, #544]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ea      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8097 	beq.w	8003108 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fde:	4b81      	ldr	r3, [pc, #516]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	4b7d      	ldr	r3, [pc, #500]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300a:	4b77      	ldr	r3, [pc, #476]	@ (80031e8 <HAL_RCC_OscConfig+0x474>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d118      	bne.n	8003048 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003016:	4b74      	ldr	r3, [pc, #464]	@ (80031e8 <HAL_RCC_OscConfig+0x474>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a73      	ldr	r2, [pc, #460]	@ (80031e8 <HAL_RCC_OscConfig+0x474>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003022:	f7ff fb35 	bl	8002690 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7ff fb31 	bl	8002690 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e10c      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	4b6a      	ldr	r3, [pc, #424]	@ (80031e8 <HAL_RCC_OscConfig+0x474>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x2ea>
 8003050:	4b64      	ldr	r3, [pc, #400]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003054:	4a63      	ldr	r2, [pc, #396]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6713      	str	r3, [r2, #112]	@ 0x70
 800305c:	e01c      	b.n	8003098 <HAL_RCC_OscConfig+0x324>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x30c>
 8003066:	4b5f      	ldr	r3, [pc, #380]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306a:	4a5e      	ldr	r2, [pc, #376]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6713      	str	r3, [r2, #112]	@ 0x70
 8003072:	4b5c      	ldr	r3, [pc, #368]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003076:	4a5b      	ldr	r2, [pc, #364]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6713      	str	r3, [r2, #112]	@ 0x70
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0x324>
 8003080:	4b58      	ldr	r3, [pc, #352]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	4a57      	ldr	r2, [pc, #348]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	@ 0x70
 800308c:	4b55      	ldr	r3, [pc, #340]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003090:	4a54      	ldr	r2, [pc, #336]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003092:	f023 0304 	bic.w	r3, r3, #4
 8003096:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7ff faf6 	bl	8002690 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	e00a      	b.n	80030be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a8:	f7ff faf2 	bl	8002690 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0cb      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030be:	4b49      	ldr	r3, [pc, #292]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0ee      	beq.n	80030a8 <HAL_RCC_OscConfig+0x334>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030cc:	f7ff fae0 	bl	8002690 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7ff fadc 	bl	8002690 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e0b5      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ea:	4b3e      	ldr	r3, [pc, #248]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ee      	bne.n	80030d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fc:	4b39      	ldr	r3, [pc, #228]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	4a38      	ldr	r2, [pc, #224]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003102:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003106:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80a1 	beq.w	8003254 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003112:	4b34      	ldr	r3, [pc, #208]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b08      	cmp	r3, #8
 800311c:	d05c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d141      	bne.n	80031aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b31      	ldr	r3, [pc, #196]	@ (80031ec <HAL_RCC_OscConfig+0x478>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7ff fab0 	bl	8002690 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7ff faac 	bl	8002690 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e087      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	4b27      	ldr	r3, [pc, #156]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	019b      	lsls	r3, r3, #6
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	3b01      	subs	r3, #1
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	491b      	ldr	r1, [pc, #108]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ec <HAL_RCC_OscConfig+0x478>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7ff fa85 	bl	8002690 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318a:	f7ff fa81 	bl	8002690 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e05c      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319c:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x416>
 80031a8:	e054      	b.n	8003254 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <HAL_RCC_OscConfig+0x478>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7ff fa6e 	bl	8002690 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7ff fa6a 	bl	8002690 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e045      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_RCC_OscConfig+0x470>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x444>
 80031d6:	e03d      	b.n	8003254 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e038      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40007000 	.word	0x40007000
 80031ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <HAL_RCC_OscConfig+0x4ec>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d028      	beq.n	8003250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d121      	bne.n	8003250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d11a      	bne.n	8003250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003226:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003228:	4293      	cmp	r3, r2
 800322a:	d111      	bne.n	8003250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d107      	bne.n	8003250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800

08003264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0cc      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b68      	ldr	r3, [pc, #416]	@ (800341c <HAL_RCC_ClockConfig+0x1b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d90c      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b65      	ldr	r3, [pc, #404]	@ (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b63      	ldr	r3, [pc, #396]	@ (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0b8      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b8:	4b59      	ldr	r3, [pc, #356]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a58      	ldr	r2, [pc, #352]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d0:	4b53      	ldr	r3, [pc, #332]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4a52      	ldr	r2, [pc, #328]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032dc:	4b50      	ldr	r3, [pc, #320]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	494d      	ldr	r1, [pc, #308]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d044      	beq.n	8003384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d119      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e07f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d003      	beq.n	8003322 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331e:	2b03      	cmp	r3, #3
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	4b3f      	ldr	r3, [pc, #252]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003332:	4b3b      	ldr	r3, [pc, #236]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e067      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003342:	4b37      	ldr	r3, [pc, #220]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 0203 	bic.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4934      	ldr	r1, [pc, #208]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003354:	f7ff f99c 	bl	8002690 <HAL_GetTick>
 8003358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	e00a      	b.n	8003372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335c:	f7ff f998 	bl	8002690 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e04f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	4b2b      	ldr	r3, [pc, #172]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 020c 	and.w	r2, r3, #12
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	429a      	cmp	r2, r3
 8003382:	d1eb      	bne.n	800335c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003384:	4b25      	ldr	r3, [pc, #148]	@ (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d20c      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b22      	ldr	r3, [pc, #136]	@ (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b20      	ldr	r3, [pc, #128]	@ (800341c <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e032      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b8:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4916      	ldr	r1, [pc, #88]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d6:	4b12      	ldr	r3, [pc, #72]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	490e      	ldr	r1, [pc, #56]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ea:	f000 f821 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 80033ee:	4602      	mov	r2, r0
 80033f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	490a      	ldr	r1, [pc, #40]	@ (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	5ccb      	ldrb	r3, [r1, r3]
 80033fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003402:	4a09      	ldr	r2, [pc, #36]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 8003404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003406:	4b09      	ldr	r3, [pc, #36]	@ (800342c <HAL_RCC_ClockConfig+0x1c8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f8fc 	bl	8002608 <HAL_InitTick>

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023c00 	.word	0x40023c00
 8003420:	40023800 	.word	0x40023800
 8003424:	0800bd4c 	.word	0x0800bd4c
 8003428:	20000008 	.word	0x20000008
 800342c:	2000000c 	.word	0x2000000c

08003430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003434:	b094      	sub	sp, #80	@ 0x50
 8003436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003448:	4b79      	ldr	r3, [pc, #484]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b08      	cmp	r3, #8
 8003452:	d00d      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x40>
 8003454:	2b08      	cmp	r3, #8
 8003456:	f200 80e1 	bhi.w	800361c <HAL_RCC_GetSysClockFreq+0x1ec>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x34>
 800345e:	2b04      	cmp	r3, #4
 8003460:	d003      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0x3a>
 8003462:	e0db      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4b73      	ldr	r3, [pc, #460]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x204>)
 8003466:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003468:	e0db      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800346a:	4b73      	ldr	r3, [pc, #460]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x208>)
 800346c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800346e:	e0d8      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003470:	4b6f      	ldr	r3, [pc, #444]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003478:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800347a:	4b6d      	ldr	r3, [pc, #436]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003486:	4b6a      	ldr	r3, [pc, #424]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	099b      	lsrs	r3, r3, #6
 800348c:	2200      	movs	r2, #0
 800348e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003490:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003498:	633b      	str	r3, [r7, #48]	@ 0x30
 800349a:	2300      	movs	r3, #0
 800349c:	637b      	str	r3, [r7, #52]	@ 0x34
 800349e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034a2:	4622      	mov	r2, r4
 80034a4:	462b      	mov	r3, r5
 80034a6:	f04f 0000 	mov.w	r0, #0
 80034aa:	f04f 0100 	mov.w	r1, #0
 80034ae:	0159      	lsls	r1, r3, #5
 80034b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b4:	0150      	lsls	r0, r2, #5
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4621      	mov	r1, r4
 80034bc:	1a51      	subs	r1, r2, r1
 80034be:	6139      	str	r1, [r7, #16]
 80034c0:	4629      	mov	r1, r5
 80034c2:	eb63 0301 	sbc.w	r3, r3, r1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d4:	4659      	mov	r1, fp
 80034d6:	018b      	lsls	r3, r1, #6
 80034d8:	4651      	mov	r1, sl
 80034da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034de:	4651      	mov	r1, sl
 80034e0:	018a      	lsls	r2, r1, #6
 80034e2:	4651      	mov	r1, sl
 80034e4:	ebb2 0801 	subs.w	r8, r2, r1
 80034e8:	4659      	mov	r1, fp
 80034ea:	eb63 0901 	sbc.w	r9, r3, r1
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003502:	4690      	mov	r8, r2
 8003504:	4699      	mov	r9, r3
 8003506:	4623      	mov	r3, r4
 8003508:	eb18 0303 	adds.w	r3, r8, r3
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	462b      	mov	r3, r5
 8003510:	eb49 0303 	adc.w	r3, r9, r3
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003522:	4629      	mov	r1, r5
 8003524:	024b      	lsls	r3, r1, #9
 8003526:	4621      	mov	r1, r4
 8003528:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800352c:	4621      	mov	r1, r4
 800352e:	024a      	lsls	r2, r1, #9
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003536:	2200      	movs	r2, #0
 8003538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800353a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800353c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003540:	f7fd fb8a 	bl	8000c58 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4613      	mov	r3, r2
 800354a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800354c:	e058      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354e:	4b38      	ldr	r3, [pc, #224]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	099b      	lsrs	r3, r3, #6
 8003554:	2200      	movs	r2, #0
 8003556:	4618      	mov	r0, r3
 8003558:	4611      	mov	r1, r2
 800355a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800355e:	623b      	str	r3, [r7, #32]
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24
 8003564:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003568:	4642      	mov	r2, r8
 800356a:	464b      	mov	r3, r9
 800356c:	f04f 0000 	mov.w	r0, #0
 8003570:	f04f 0100 	mov.w	r1, #0
 8003574:	0159      	lsls	r1, r3, #5
 8003576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800357a:	0150      	lsls	r0, r2, #5
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4641      	mov	r1, r8
 8003582:	ebb2 0a01 	subs.w	sl, r2, r1
 8003586:	4649      	mov	r1, r9
 8003588:	eb63 0b01 	sbc.w	fp, r3, r1
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003598:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800359c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035a0:	ebb2 040a 	subs.w	r4, r2, sl
 80035a4:	eb63 050b 	sbc.w	r5, r3, fp
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	00eb      	lsls	r3, r5, #3
 80035b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b6:	00e2      	lsls	r2, r4, #3
 80035b8:	4614      	mov	r4, r2
 80035ba:	461d      	mov	r5, r3
 80035bc:	4643      	mov	r3, r8
 80035be:	18e3      	adds	r3, r4, r3
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	464b      	mov	r3, r9
 80035c4:	eb45 0303 	adc.w	r3, r5, r3
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035d6:	4629      	mov	r1, r5
 80035d8:	028b      	lsls	r3, r1, #10
 80035da:	4621      	mov	r1, r4
 80035dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035e0:	4621      	mov	r1, r4
 80035e2:	028a      	lsls	r2, r1, #10
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ea:	2200      	movs	r2, #0
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	61fa      	str	r2, [r7, #28]
 80035f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f4:	f7fd fb30 	bl	8000c58 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4613      	mov	r3, r2
 80035fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	3301      	adds	r3, #1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800361a:	e002      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x204>)
 800361e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003624:	4618      	mov	r0, r3
 8003626:	3750      	adds	r7, #80	@ 0x50
 8003628:	46bd      	mov	sp, r7
 800362a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	00f42400 	.word	0x00f42400
 8003638:	007a1200 	.word	0x007a1200

0800363c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003640:	4b03      	ldr	r3, [pc, #12]	@ (8003650 <HAL_RCC_GetHCLKFreq+0x14>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000008 	.word	0x20000008

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003658:	f7ff fff0 	bl	800363c <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0a9b      	lsrs	r3, r3, #10
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4903      	ldr	r1, [pc, #12]	@ (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	0800bd5c 	.word	0x0800bd5c

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003680:	f7ff ffdc 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	@ (800369c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0b5b      	lsrs	r3, r3, #13
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4903      	ldr	r1, [pc, #12]	@ (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	0800bd5c 	.word	0x0800bd5c

080036a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e07b      	b.n	80037ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036c6:	d009      	beq.n	80036dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	61da      	str	r2, [r3, #28]
 80036ce:	e005      	b.n	80036dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fb2c 	bl	8001d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003712:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003760:	ea42 0103 	orr.w	r1, r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	f003 0104 	and.w	r1, r3, #4
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	f003 0210 	and.w	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800379c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b088      	sub	sp, #32
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c6:	f7fe ff63 	bl	8002690 <HAL_GetTick>
 80037ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d001      	beq.n	80037e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
 80037de:	e12a      	b.n	8003a36 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_SPI_Transmit+0x36>
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e122      	b.n	8003a36 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_SPI_Transmit+0x48>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e11b      	b.n	8003a36 <HAL_SPI_Transmit+0x280>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2203      	movs	r2, #3
 800380a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800384c:	d10f      	bne.n	800386e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800385c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800386c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	d007      	beq.n	800388c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800388a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003894:	d152      	bne.n	800393c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_Transmit+0xee>
 800389e:	8b7b      	ldrh	r3, [r7, #26]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d145      	bne.n	8003930 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038c8:	e032      	b.n	8003930 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d112      	bne.n	80038fe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	881a      	ldrh	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	1c9a      	adds	r2, r3, #2
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038fc:	e018      	b.n	8003930 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038fe:	f7fe fec7 	bl	8002690 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d803      	bhi.n	8003916 <HAL_SPI_Transmit+0x160>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d102      	bne.n	800391c <HAL_SPI_Transmit+0x166>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e082      	b.n	8003a36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1c7      	bne.n	80038ca <HAL_SPI_Transmit+0x114>
 800393a:	e053      	b.n	80039e4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_SPI_Transmit+0x194>
 8003944:	8b7b      	ldrh	r3, [r7, #26]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d147      	bne.n	80039da <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003970:	e033      	b.n	80039da <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b02      	cmp	r3, #2
 800397e:	d113      	bne.n	80039a8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	7812      	ldrb	r2, [r2, #0]
 800398c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039a6:	e018      	b.n	80039da <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039a8:	f7fe fe72 	bl	8002690 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d803      	bhi.n	80039c0 <HAL_SPI_Transmit+0x20a>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d102      	bne.n	80039c6 <HAL_SPI_Transmit+0x210>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e02d      	b.n	8003a36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1c6      	bne.n	8003972 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	6839      	ldr	r1, [r7, #0]
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fa59 	bl	8003ea0 <SPI_EndRxTxTransaction>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b08a      	sub	sp, #40	@ 0x28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a50:	f7fe fe1e 	bl	8002690 <HAL_GetTick>
 8003a54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a68:	7ffb      	ldrb	r3, [r7, #31]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d00c      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x4a>
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a74:	d106      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x46>
 8003a7e:	7ffb      	ldrb	r3, [r7, #31]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d001      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
 8003a86:	e17f      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_SPI_TransmitReceive+0x5c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_SPI_TransmitReceive+0x5c>
 8003a94:	887b      	ldrh	r3, [r7, #2]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e174      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_SPI_TransmitReceive+0x6e>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e16d      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x34a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d003      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2205      	movs	r2, #5
 8003ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	887a      	ldrh	r2, [r7, #2]
 8003ade:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	887a      	ldrh	r2, [r7, #2]
 8003aea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	d007      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b24:	d17e      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_SPI_TransmitReceive+0xf6>
 8003b2e:	8afb      	ldrh	r3, [r7, #22]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d16c      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b38:	881a      	ldrh	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	1c9a      	adds	r2, r3, #2
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b58:	e059      	b.n	8003c0e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d11b      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x162>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <HAL_SPI_TransmitReceive+0x162>
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d113      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7c:	881a      	ldrh	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b88:	1c9a      	adds	r2, r3, #2
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d119      	bne.n	8003be2 <HAL_SPI_TransmitReceive+0x1a4>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d014      	beq.n	8003be2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc2:	b292      	uxth	r2, r2
 8003bc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bca:	1c9a      	adds	r2, r3, #2
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bde:	2301      	movs	r3, #1
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003be2:	f7fe fd55 	bl	8002690 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d80d      	bhi.n	8003c0e <HAL_SPI_TransmitReceive+0x1d0>
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d009      	beq.n	8003c0e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0bc      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1a0      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x11c>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d19b      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x11c>
 8003c22:	e082      	b.n	8003d2a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_SPI_TransmitReceive+0x1f4>
 8003c2c:	8afb      	ldrh	r3, [r7, #22]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d171      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	7812      	ldrb	r2, [r2, #0]
 8003c3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c58:	e05d      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d11c      	bne.n	8003ca2 <HAL_SPI_TransmitReceive+0x264>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d017      	beq.n	8003ca2 <HAL_SPI_TransmitReceive+0x264>
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d114      	bne.n	8003ca2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	7812      	ldrb	r2, [r2, #0]
 8003c84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d119      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x2a6>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d014      	beq.n	8003ce4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ce4:	f7fe fcd4 	bl	8002690 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d803      	bhi.n	8003cfc <HAL_SPI_TransmitReceive+0x2be>
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d102      	bne.n	8003d02 <HAL_SPI_TransmitReceive+0x2c4>
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e038      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d19c      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x21c>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d197      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d2a:	6a3a      	ldr	r2, [r7, #32]
 8003d2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f8b6 	bl	8003ea0 <SPI_EndRxTxTransaction>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e01d      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3728      	adds	r7, #40	@ 0x28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003da0:	f7fe fc76 	bl	8002690 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	4413      	add	r3, r2
 8003dae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003db0:	f7fe fc6e 	bl	8002690 <HAL_GetTick>
 8003db4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003db6:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	015b      	lsls	r3, r3, #5
 8003dbc:	0d1b      	lsrs	r3, r3, #20
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dc6:	e054      	b.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dce:	d050      	beq.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dd0:	f7fe fc5e 	bl	8002690 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d902      	bls.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d13d      	bne.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dfe:	d111      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e08:	d004      	beq.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e12:	d107      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2c:	d10f      	bne.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e017      	b.n	8003e92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d19b      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000008 	.word	0x20000008

08003ea0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff ff6a 	bl	8003d90 <SPI_WaitFlagStateUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e032      	b.n	8003f38 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f40 <SPI_EndRxTxTransaction+0xa0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <SPI_EndRxTxTransaction+0xa4>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	0d5b      	lsrs	r3, r3, #21
 8003ede:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ef0:	d112      	bne.n	8003f18 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2180      	movs	r1, #128	@ 0x80
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff ff47 	bl	8003d90 <SPI_WaitFlagStateUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d016      	beq.n	8003f36 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e00f      	b.n	8003f38 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2e:	2b80      	cmp	r3, #128	@ 0x80
 8003f30:	d0f2      	beq.n	8003f18 <SPI_EndRxTxTransaction+0x78>
 8003f32:	e000      	b.n	8003f36 <SPI_EndRxTxTransaction+0x96>
        break;
 8003f34:	bf00      	nop
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000008 	.word	0x20000008
 8003f44:	165e9f81 	.word	0x165e9f81

08003f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e042      	b.n	8003fe0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd ff38 	bl	8001de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2224      	movs	r2, #36	@ 0x24
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fd69 	bl	8004a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	@ 0x28
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b20      	cmp	r3, #32
 8004006:	d175      	bne.n	80040f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UART_Transmit+0x2c>
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e06e      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2221      	movs	r2, #33	@ 0x21
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004026:	f7fe fb33 	bl	8002690 <HAL_GetTick>
 800402a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004040:	d108      	bne.n	8004054 <HAL_UART_Transmit+0x6c>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e003      	b.n	800405c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800405c:	e02e      	b.n	80040bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	2180      	movs	r1, #128	@ 0x80
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fb05 	bl	8004678 <UART_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e03a      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	3302      	adds	r3, #2
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	e007      	b.n	80040ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	3301      	adds	r3, #1
 80040ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1cb      	bne.n	800405e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2140      	movs	r1, #64	@ 0x40
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fad1 	bl	8004678 <UART_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e006      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b0ba      	sub	sp, #232	@ 0xe8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800413e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HAL_UART_IRQHandler+0x66>
 8004152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fbc2 	bl	80048e8 <UART_Receive_IT>
      return;
 8004164:	e25b      	b.n	800461e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80de 	beq.w	800432c <HAL_UART_IRQHandler+0x22c>
 8004170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800417c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004180:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80d1 	beq.w	800432c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800418a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_UART_IRQHandler+0xae>
 8004196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800419a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	f043 0201 	orr.w	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <HAL_UART_IRQHandler+0xd2>
 80041ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ca:	f043 0202 	orr.w	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <HAL_UART_IRQHandler+0xf6>
 80041de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f043 0204 	orr.w	r2, r3, #4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d011      	beq.n	8004226 <HAL_UART_IRQHandler+0x126>
 8004202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800420e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	f043 0208 	orr.w	r2, r3, #8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 81f2 	beq.w	8004614 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_UART_IRQHandler+0x14e>
 800423c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fb4d 	bl	80048e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004258:	2b40      	cmp	r3, #64	@ 0x40
 800425a:	bf0c      	ite	eq
 800425c:	2301      	moveq	r3, #1
 800425e:	2300      	movne	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d103      	bne.n	800427a <HAL_UART_IRQHandler+0x17a>
 8004272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d04f      	beq.n	800431a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa55 	bl	800472a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428a:	2b40      	cmp	r3, #64	@ 0x40
 800428c:	d141      	bne.n	8004312 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3314      	adds	r3, #20
 8004294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1d9      	bne.n	800428e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d013      	beq.n	800430a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e6:	4a7e      	ldr	r2, [pc, #504]	@ (80044e0 <HAL_UART_IRQHandler+0x3e0>)
 80042e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fb7f 	bl	80029f2 <HAL_DMA_Abort_IT>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004304:	4610      	mov	r0, r2
 8004306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	e00e      	b.n	8004328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f99e 	bl	800464c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004310:	e00a      	b.n	8004328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f99a 	bl	800464c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	e006      	b.n	8004328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f996 	bl	800464c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004326:	e175      	b.n	8004614 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	bf00      	nop
    return;
 800432a:	e173      	b.n	8004614 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 814f 	bne.w	80045d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 8148 	beq.w	80045d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8141 	beq.w	80045d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004372:	2b40      	cmp	r3, #64	@ 0x40
 8004374:	f040 80b6 	bne.w	80044e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8145 	beq.w	8004618 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004396:	429a      	cmp	r2, r3
 8004398:	f080 813e 	bcs.w	8004618 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ae:	f000 8088 	beq.w	80044c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	330c      	adds	r3, #12
 80043da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1d9      	bne.n	80043b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800440e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004422:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004426:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800442a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e1      	bne.n	80043fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3314      	adds	r3, #20
 8004440:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800444a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800444c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800445e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004460:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004464:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800446c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e3      	bne.n	800443a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004492:	f023 0310 	bic.w	r3, r3, #16
 8004496:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80044a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e3      	bne.n	8004480 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe fa28 	bl	8002912 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8c1 	bl	8004660 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044de:	e09b      	b.n	8004618 <HAL_UART_IRQHandler+0x518>
 80044e0:	080047f1 	.word	0x080047f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 808e 	beq.w	800461c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8089 	beq.w	800461c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	330c      	adds	r3, #12
 8004510:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800451a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004520:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800452e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004530:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004534:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800453c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e3      	bne.n	800450a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3314      	adds	r3, #20
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	623b      	str	r3, [r7, #32]
   return(result);
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3314      	adds	r3, #20
 8004562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004566:	633a      	str	r2, [r7, #48]	@ 0x30
 8004568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800456c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e3      	bne.n	8004542 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	60fb      	str	r3, [r7, #12]
   return(result);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0310 	bic.w	r3, r3, #16
 800459e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80045ac:	61fa      	str	r2, [r7, #28]
 80045ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	69b9      	ldr	r1, [r7, #24]
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	617b      	str	r3, [r7, #20]
   return(result);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e3      	bne.n	8004588 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045ca:	4619      	mov	r1, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f847 	bl	8004660 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045d2:	e023      	b.n	800461c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d009      	beq.n	80045f4 <HAL_UART_IRQHandler+0x4f4>
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f913 	bl	8004818 <UART_Transmit_IT>
    return;
 80045f2:	e014      	b.n	800461e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00e      	beq.n	800461e <HAL_UART_IRQHandler+0x51e>
 8004600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f953 	bl	80048b8 <UART_EndTransmit_IT>
    return;
 8004612:	e004      	b.n	800461e <HAL_UART_IRQHandler+0x51e>
    return;
 8004614:	bf00      	nop
 8004616:	e002      	b.n	800461e <HAL_UART_IRQHandler+0x51e>
      return;
 8004618:	bf00      	nop
 800461a:	e000      	b.n	800461e <HAL_UART_IRQHandler+0x51e>
      return;
 800461c:	bf00      	nop
  }
}
 800461e:	37e8      	adds	r7, #232	@ 0xe8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004688:	e03b      	b.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d037      	beq.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004692:	f7fd fffd 	bl	8002690 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d302      	bcc.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e03a      	b.n	8004722 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d023      	beq.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b80      	cmp	r3, #128	@ 0x80
 80046be:	d020      	beq.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b40      	cmp	r3, #64	@ 0x40
 80046c4:	d01d      	beq.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d116      	bne.n	8004702 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f81d 	bl	800472a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2208      	movs	r2, #8
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e00f      	b.n	8004722 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4013      	ands	r3, r2
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	429a      	cmp	r2, r3
 800471e:	d0b4      	beq.n	800468a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800472a:	b480      	push	{r7}
 800472c:	b095      	sub	sp, #84	@ 0x54
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004752:	643a      	str	r2, [r7, #64]	@ 0x40
 8004754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e5      	bne.n	8004732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3314      	adds	r3, #20
 800476c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	61fb      	str	r3, [r7, #28]
   return(result);
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3314      	adds	r3, #20
 8004784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004788:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800478c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e5      	bne.n	8004766 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d119      	bne.n	80047d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f023 0310 	bic.w	r3, r3, #16
 80047b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047c2:	61ba      	str	r2, [r7, #24]
 80047c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6979      	ldr	r1, [r7, #20]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	613b      	str	r3, [r7, #16]
   return(result);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e5      	bne.n	80047a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047e4:	bf00      	nop
 80047e6:	3754      	adds	r7, #84	@ 0x54
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ff1e 	bl	800464c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b21      	cmp	r3, #33	@ 0x21
 800482a:	d13e      	bne.n	80048aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004834:	d114      	bne.n	8004860 <UART_Transmit_IT+0x48>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d110      	bne.n	8004860 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004852:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	1c9a      	adds	r2, r3, #2
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	621a      	str	r2, [r3, #32]
 800485e:	e008      	b.n	8004872 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	1c59      	adds	r1, r3, #1
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6211      	str	r1, [r2, #32]
 800486a:	781a      	ldrb	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29b      	uxth	r3, r3
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4619      	mov	r1, r3
 8004880:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10f      	bne.n	80048a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004894:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e000      	b.n	80048ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff fea3 	bl	8004624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08c      	sub	sp, #48	@ 0x30
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b22      	cmp	r3, #34	@ 0x22
 80048fa:	f040 80ae 	bne.w	8004a5a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004906:	d117      	bne.n	8004938 <UART_Receive_IT+0x50>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d113      	bne.n	8004938 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	b29a      	uxth	r2, r3
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004930:	1c9a      	adds	r2, r3, #2
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	629a      	str	r2, [r3, #40]	@ 0x28
 8004936:	e026      	b.n	8004986 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800494a:	d007      	beq.n	800495c <UART_Receive_IT+0x74>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <UART_Receive_IT+0x82>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	b2da      	uxtb	r2, r3
 8004964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e008      	b.n	800497c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004976:	b2da      	uxtb	r2, r3
 8004978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29b      	uxth	r3, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	4619      	mov	r1, r3
 8004994:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004996:	2b00      	cmp	r3, #0
 8004998:	d15d      	bne.n	8004a56 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0220 	bic.w	r2, r2, #32
 80049a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695a      	ldr	r2, [r3, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d135      	bne.n	8004a4c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	330c      	adds	r3, #12
 80049ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	613b      	str	r3, [r7, #16]
   return(result);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f023 0310 	bic.w	r3, r3, #16
 80049fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a06:	623a      	str	r2, [r7, #32]
 8004a08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	69f9      	ldr	r1, [r7, #28]
 8004a0c:	6a3a      	ldr	r2, [r7, #32]
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e5      	bne.n	80049e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b10      	cmp	r3, #16
 8004a26:	d10a      	bne.n	8004a3e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fe0b 	bl	8004660 <HAL_UARTEx_RxEventCallback>
 8004a4a:	e002      	b.n	8004a52 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff fdf3 	bl	8004638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e002      	b.n	8004a5c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3730      	adds	r7, #48	@ 0x30
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b0c0      	sub	sp, #256	@ 0x100
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a80:	68d9      	ldr	r1, [r3, #12]
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	ea40 0301 	orr.w	r3, r0, r1
 8004a8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004abc:	f021 010c 	bic.w	r1, r1, #12
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004aca:	430b      	orrs	r3, r1
 8004acc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ade:	6999      	ldr	r1, [r3, #24]
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	ea40 0301 	orr.w	r3, r0, r1
 8004aea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b8f      	ldr	r3, [pc, #572]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d005      	beq.n	8004b04 <UART_SetConfig+0xa0>
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b8d      	ldr	r3, [pc, #564]	@ (8004d34 <UART_SetConfig+0x2d0>)
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d104      	bne.n	8004b0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b04:	f7fe fdba 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8004b08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b0c:	e003      	b.n	8004b16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b0e:	f7fe fda1 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8004b12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b20:	f040 810c 	bne.w	8004d3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b36:	4622      	mov	r2, r4
 8004b38:	462b      	mov	r3, r5
 8004b3a:	1891      	adds	r1, r2, r2
 8004b3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b3e:	415b      	adcs	r3, r3
 8004b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b46:	4621      	mov	r1, r4
 8004b48:	eb12 0801 	adds.w	r8, r2, r1
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	eb43 0901 	adc.w	r9, r3, r1
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b66:	4690      	mov	r8, r2
 8004b68:	4699      	mov	r9, r3
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	eb18 0303 	adds.w	r3, r8, r3
 8004b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b74:	462b      	mov	r3, r5
 8004b76:	eb49 0303 	adc.w	r3, r9, r3
 8004b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b92:	460b      	mov	r3, r1
 8004b94:	18db      	adds	r3, r3, r3
 8004b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b98:	4613      	mov	r3, r2
 8004b9a:	eb42 0303 	adc.w	r3, r2, r3
 8004b9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ba0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ba4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ba8:	f7fc f856 	bl	8000c58 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4b61      	ldr	r3, [pc, #388]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	011c      	lsls	r4, r3, #4
 8004bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004bc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bcc:	4642      	mov	r2, r8
 8004bce:	464b      	mov	r3, r9
 8004bd0:	1891      	adds	r1, r2, r2
 8004bd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bd4:	415b      	adcs	r3, r3
 8004bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bdc:	4641      	mov	r1, r8
 8004bde:	eb12 0a01 	adds.w	sl, r2, r1
 8004be2:	4649      	mov	r1, r9
 8004be4:	eb43 0b01 	adc.w	fp, r3, r1
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bfc:	4692      	mov	sl, r2
 8004bfe:	469b      	mov	fp, r3
 8004c00:	4643      	mov	r3, r8
 8004c02:	eb1a 0303 	adds.w	r3, sl, r3
 8004c06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	18db      	adds	r3, r3, r3
 8004c2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c2e:	4613      	mov	r3, r2
 8004c30:	eb42 0303 	adc.w	r3, r2, r3
 8004c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c3e:	f7fc f80b 	bl	8000c58 <__aeabi_uldivmod>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4611      	mov	r1, r2
 8004c48:	4b3b      	ldr	r3, [pc, #236]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	2264      	movs	r2, #100	@ 0x64
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	1acb      	subs	r3, r1, r3
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c5e:	4b36      	ldr	r3, [pc, #216]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004c60:	fba3 2302 	umull	r2, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c6c:	441c      	add	r4, r3
 8004c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c80:	4642      	mov	r2, r8
 8004c82:	464b      	mov	r3, r9
 8004c84:	1891      	adds	r1, r2, r2
 8004c86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c88:	415b      	adcs	r3, r3
 8004c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c90:	4641      	mov	r1, r8
 8004c92:	1851      	adds	r1, r2, r1
 8004c94:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c96:	4649      	mov	r1, r9
 8004c98:	414b      	adcs	r3, r1
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ca8:	4659      	mov	r1, fp
 8004caa:	00cb      	lsls	r3, r1, #3
 8004cac:	4651      	mov	r1, sl
 8004cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cb2:	4651      	mov	r1, sl
 8004cb4:	00ca      	lsls	r2, r1, #3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	460a      	mov	r2, r1
 8004cc8:	eb42 0303 	adc.w	r3, r2, r3
 8004ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cdc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ce0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	18db      	adds	r3, r3, r3
 8004ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cea:	4613      	mov	r3, r2
 8004cec:	eb42 0303 	adc.w	r3, r2, r3
 8004cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004cfa:	f7fb ffad 	bl	8000c58 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4b0d      	ldr	r3, [pc, #52]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004d04:	fba3 1302 	umull	r1, r3, r3, r2
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	2164      	movs	r1, #100	@ 0x64
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	3332      	adds	r3, #50	@ 0x32
 8004d16:	4a08      	ldr	r2, [pc, #32]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004d18:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	f003 0207 	and.w	r2, r3, #7
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4422      	add	r2, r4
 8004d2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d2c:	e106      	b.n	8004f3c <UART_SetConfig+0x4d8>
 8004d2e:	bf00      	nop
 8004d30:	40011000 	.word	0x40011000
 8004d34:	40011400 	.word	0x40011400
 8004d38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d4e:	4642      	mov	r2, r8
 8004d50:	464b      	mov	r3, r9
 8004d52:	1891      	adds	r1, r2, r2
 8004d54:	6239      	str	r1, [r7, #32]
 8004d56:	415b      	adcs	r3, r3
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d5e:	4641      	mov	r1, r8
 8004d60:	1854      	adds	r4, r2, r1
 8004d62:	4649      	mov	r1, r9
 8004d64:	eb43 0501 	adc.w	r5, r3, r1
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	00eb      	lsls	r3, r5, #3
 8004d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d76:	00e2      	lsls	r2, r4, #3
 8004d78:	4614      	mov	r4, r2
 8004d7a:	461d      	mov	r5, r3
 8004d7c:	4643      	mov	r3, r8
 8004d7e:	18e3      	adds	r3, r4, r3
 8004d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d84:	464b      	mov	r3, r9
 8004d86:	eb45 0303 	adc.w	r3, r5, r3
 8004d8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004daa:	4629      	mov	r1, r5
 8004dac:	008b      	lsls	r3, r1, #2
 8004dae:	4621      	mov	r1, r4
 8004db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db4:	4621      	mov	r1, r4
 8004db6:	008a      	lsls	r2, r1, #2
 8004db8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004dbc:	f7fb ff4c 	bl	8000c58 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4b60      	ldr	r3, [pc, #384]	@ (8004f48 <UART_SetConfig+0x4e4>)
 8004dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	011c      	lsls	r4, r3, #4
 8004dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ddc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	61b9      	str	r1, [r7, #24]
 8004de8:	415b      	adcs	r3, r3
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004df0:	4641      	mov	r1, r8
 8004df2:	1851      	adds	r1, r2, r1
 8004df4:	6139      	str	r1, [r7, #16]
 8004df6:	4649      	mov	r1, r9
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e08:	4659      	mov	r1, fp
 8004e0a:	00cb      	lsls	r3, r1, #3
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e12:	4651      	mov	r1, sl
 8004e14:	00ca      	lsls	r2, r1, #3
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e24:	464b      	mov	r3, r9
 8004e26:	460a      	mov	r2, r1
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e48:	4649      	mov	r1, r9
 8004e4a:	008b      	lsls	r3, r1, #2
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e52:	4641      	mov	r1, r8
 8004e54:	008a      	lsls	r2, r1, #2
 8004e56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e5a:	f7fb fefd 	bl	8000c58 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	4b38      	ldr	r3, [pc, #224]	@ (8004f48 <UART_SetConfig+0x4e4>)
 8004e66:	fba3 2301 	umull	r2, r3, r3, r1
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	2264      	movs	r2, #100	@ 0x64
 8004e6e:	fb02 f303 	mul.w	r3, r2, r3
 8004e72:	1acb      	subs	r3, r1, r3
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	3332      	adds	r3, #50	@ 0x32
 8004e78:	4a33      	ldr	r2, [pc, #204]	@ (8004f48 <UART_SetConfig+0x4e4>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e84:	441c      	add	r4, r3
 8004e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	1891      	adds	r1, r2, r2
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	415b      	adcs	r3, r3
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	1851      	adds	r1, r2, r1
 8004ea8:	6039      	str	r1, [r7, #0]
 8004eaa:	4649      	mov	r1, r9
 8004eac:	414b      	adcs	r3, r1
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ebc:	4659      	mov	r1, fp
 8004ebe:	00cb      	lsls	r3, r1, #3
 8004ec0:	4651      	mov	r1, sl
 8004ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ec6:	4651      	mov	r1, sl
 8004ec8:	00ca      	lsls	r2, r1, #3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	189b      	adds	r3, r3, r2
 8004ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	460a      	mov	r2, r1
 8004eda:	eb42 0303 	adc.w	r3, r2, r3
 8004ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004eea:	667a      	str	r2, [r7, #100]	@ 0x64
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ef8:	4649      	mov	r1, r9
 8004efa:	008b      	lsls	r3, r1, #2
 8004efc:	4641      	mov	r1, r8
 8004efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f02:	4641      	mov	r1, r8
 8004f04:	008a      	lsls	r2, r1, #2
 8004f06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f0a:	f7fb fea5 	bl	8000c58 <__aeabi_uldivmod>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <UART_SetConfig+0x4e4>)
 8004f14:	fba3 1302 	umull	r1, r3, r3, r2
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	2164      	movs	r1, #100	@ 0x64
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	3332      	adds	r3, #50	@ 0x32
 8004f26:	4a08      	ldr	r2, [pc, #32]	@ (8004f48 <UART_SetConfig+0x4e4>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	f003 020f 	and.w	r2, r3, #15
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4422      	add	r2, r4
 8004f3a:	609a      	str	r2, [r3, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f42:	46bd      	mov	sp, r7
 8004f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f48:	51eb851f 	.word	0x51eb851f

08004f4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004f50:	4904      	ldr	r1, [pc, #16]	@ (8004f64 <MX_FATFS_Init+0x18>)
 8004f52:	4805      	ldr	r0, [pc, #20]	@ (8004f68 <MX_FATFS_Init+0x1c>)
 8004f54:	f002 ff9e 	bl	8007e94 <FATFS_LinkDriver>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4b03      	ldr	r3, [pc, #12]	@ (8004f6c <MX_FATFS_Init+0x20>)
 8004f5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f60:	bf00      	nop
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	2000095c 	.word	0x2000095c
 8004f68:	20000014 	.word	0x20000014
 8004f6c:	20000958 	.word	0x20000958

08004f70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f9d3 	bl	8005338 <USER_SPI_initialize>
 8004f92:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fab1 	bl	8005510 <USER_SPI_status>
 8004fae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 8004fc8:	7bf8      	ldrb	r0, [r7, #15]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	f000 fab4 	bl	800553c <USER_SPI_read>
 8004fd4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	4603      	mov	r3, r0
 8004fec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004fee:	7bf8      	ldrb	r0, [r7, #15]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	f000 fb07 	bl	8005608 <USER_SPI_write>
 8004ffa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	603a      	str	r2, [r7, #0]
 800500e:	71fb      	strb	r3, [r7, #7]
 8005010:	460b      	mov	r3, r1
 8005012:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005014:	79b9      	ldrb	r1, [r7, #6]
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fb70 	bl	8005700 <USER_SPI_ioctl>
 8005020:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005034:	f7fd fb2c 	bl	8002690 <HAL_GetTick>
 8005038:	4603      	mov	r3, r0
 800503a:	4a04      	ldr	r2, [pc, #16]	@ (800504c <SPI_Timer_On+0x20>)
 800503c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800503e:	4a04      	ldr	r2, [pc, #16]	@ (8005050 <SPI_Timer_On+0x24>)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6013      	str	r3, [r2, #0]
}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000964 	.word	0x20000964
 8005050:	20000968 	.word	0x20000968

08005054 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005058:	f7fd fb1a 	bl	8002690 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	4b06      	ldr	r3, [pc, #24]	@ (8005078 <SPI_Timer_Status+0x24>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <SPI_Timer_Status+0x28>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	bf34      	ite	cc
 800506c:	2301      	movcc	r3, #1
 800506e:	2300      	movcs	r3, #0
 8005070:	b2db      	uxtb	r3, r3
}
 8005072:	4618      	mov	r0, r3
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000964 	.word	0x20000964
 800507c:	20000968 	.word	0x20000968

08005080 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af02      	add	r7, sp, #8
 8005086:	4603      	mov	r3, r0
 8005088:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800508a:	f107 020f 	add.w	r2, r7, #15
 800508e:	1df9      	adds	r1, r7, #7
 8005090:	2332      	movs	r3, #50	@ 0x32
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2301      	movs	r3, #1
 8005096:	4804      	ldr	r0, [pc, #16]	@ (80050a8 <xchg_spi+0x28>)
 8005098:	f7fe fcd1 	bl	8003a3e <HAL_SPI_TransmitReceive>
    return rxDat;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000234 	.word	0x20000234

080050ac <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e00a      	b.n	80050d2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	18d4      	adds	r4, r2, r3
 80050c2:	20ff      	movs	r0, #255	@ 0xff
 80050c4:	f7ff ffdc 	bl	8005080 <xchg_spi>
 80050c8:	4603      	mov	r3, r0
 80050ca:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3301      	adds	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d3f0      	bcc.n	80050bc <rcvr_spi_multi+0x10>
	}
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd90      	pop	{r4, r7, pc}

080050e4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	f04f 33ff 	mov.w	r3, #4294967295
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4803      	ldr	r0, [pc, #12]	@ (8005108 <xmit_spi_multi+0x24>)
 80050fa:	f7fe fb5c 	bl	80037b6 <HAL_SPI_Transmit>
}
 80050fe:	bf00      	nop
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000234 	.word	0x20000234

0800510c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005114:	f7fd fabc 	bl	8002690 <HAL_GetTick>
 8005118:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800511e:	20ff      	movs	r0, #255	@ 0xff
 8005120:	f7ff ffae 	bl	8005080 <xchg_spi>
 8005124:	4603      	mov	r3, r0
 8005126:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2bff      	cmp	r3, #255	@ 0xff
 800512c:	d007      	beq.n	800513e <wait_ready+0x32>
 800512e:	f7fd faaf 	bl	8002690 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	429a      	cmp	r2, r3
 800513c:	d8ef      	bhi.n	800511e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2bff      	cmp	r3, #255	@ 0xff
 8005142:	bf0c      	ite	eq
 8005144:	2301      	moveq	r3, #1
 8005146:	2300      	movne	r3, #0
 8005148:	b2db      	uxtb	r3, r3
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005158:	2201      	movs	r2, #1
 800515a:	2140      	movs	r1, #64	@ 0x40
 800515c:	4803      	ldr	r0, [pc, #12]	@ (800516c <despiselect+0x18>)
 800515e:	f7fd fdef 	bl	8002d40 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005162:	20ff      	movs	r0, #255	@ 0xff
 8005164:	f7ff ff8c 	bl	8005080 <xchg_spi>

}
 8005168:	bf00      	nop
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40020400 	.word	0x40020400

08005170 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005174:	2200      	movs	r2, #0
 8005176:	2140      	movs	r1, #64	@ 0x40
 8005178:	4809      	ldr	r0, [pc, #36]	@ (80051a0 <spiselect+0x30>)
 800517a:	f7fd fde1 	bl	8002d40 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800517e:	20ff      	movs	r0, #255	@ 0xff
 8005180:	f7ff ff7e 	bl	8005080 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005184:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005188:	f7ff ffc0 	bl	800510c <wait_ready>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <spiselect+0x26>
 8005192:	2301      	movs	r3, #1
 8005194:	e002      	b.n	800519c <spiselect+0x2c>

	despiselect();
 8005196:	f7ff ffdd 	bl	8005154 <despiselect>
	return 0;	/* Timeout */
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40020400 	.word	0x40020400

080051a4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80051ae:	20c8      	movs	r0, #200	@ 0xc8
 80051b0:	f7ff ff3c 	bl	800502c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80051b4:	20ff      	movs	r0, #255	@ 0xff
 80051b6:	f7ff ff63 	bl	8005080 <xchg_spi>
 80051ba:	4603      	mov	r3, r0
 80051bc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	2bff      	cmp	r3, #255	@ 0xff
 80051c2:	d104      	bne.n	80051ce <rcvr_datablock+0x2a>
 80051c4:	f7ff ff46 	bl	8005054 <SPI_Timer_Status>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f2      	bne.n	80051b4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2bfe      	cmp	r3, #254	@ 0xfe
 80051d2:	d001      	beq.n	80051d8 <rcvr_datablock+0x34>
 80051d4:	2300      	movs	r3, #0
 80051d6:	e00a      	b.n	80051ee <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff ff66 	bl	80050ac <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80051e0:	20ff      	movs	r0, #255	@ 0xff
 80051e2:	f7ff ff4d 	bl	8005080 <xchg_spi>
 80051e6:	20ff      	movs	r0, #255	@ 0xff
 80051e8:	f7ff ff4a 	bl	8005080 <xchg_spi>

	return 1;						/* Function succeeded */
 80051ec:	2301      	movs	r3, #1
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005202:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005206:	f7ff ff81 	bl	800510c <wait_ready>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <xmit_datablock+0x1e>
 8005210:	2300      	movs	r3, #0
 8005212:	e01e      	b.n	8005252 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff ff32 	bl	8005080 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	2bfd      	cmp	r3, #253	@ 0xfd
 8005220:	d016      	beq.n	8005250 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005222:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff ff5c 	bl	80050e4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800522c:	20ff      	movs	r0, #255	@ 0xff
 800522e:	f7ff ff27 	bl	8005080 <xchg_spi>
 8005232:	20ff      	movs	r0, #255	@ 0xff
 8005234:	f7ff ff24 	bl	8005080 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005238:	20ff      	movs	r0, #255	@ 0xff
 800523a:	f7ff ff21 	bl	8005080 <xchg_spi>
 800523e:	4603      	mov	r3, r0
 8005240:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2b05      	cmp	r3, #5
 800524a:	d001      	beq.n	8005250 <xmit_datablock+0x5a>
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <xmit_datablock+0x5c>
	}
	return 1;
 8005250:	2301      	movs	r3, #1
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	4603      	mov	r3, r0
 8005262:	6039      	str	r1, [r7, #0]
 8005264:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526a:	2b00      	cmp	r3, #0
 800526c:	da0e      	bge.n	800528c <send_cmd+0x32>
		cmd &= 0x7F;
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005274:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005276:	2100      	movs	r1, #0
 8005278:	2037      	movs	r0, #55	@ 0x37
 800527a:	f7ff ffee 	bl	800525a <send_cmd>
 800527e:	4603      	mov	r3, r0
 8005280:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005282:	7bbb      	ldrb	r3, [r7, #14]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d901      	bls.n	800528c <send_cmd+0x32>
 8005288:	7bbb      	ldrb	r3, [r7, #14]
 800528a:	e051      	b.n	8005330 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	2b0c      	cmp	r3, #12
 8005290:	d008      	beq.n	80052a4 <send_cmd+0x4a>
		despiselect();
 8005292:	f7ff ff5f 	bl	8005154 <despiselect>
		if (!spiselect()) return 0xFF;
 8005296:	f7ff ff6b 	bl	8005170 <spiselect>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <send_cmd+0x4a>
 80052a0:	23ff      	movs	r3, #255	@ 0xff
 80052a2:	e045      	b.n	8005330 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fee7 	bl	8005080 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	0e1b      	lsrs	r3, r3, #24
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fee1 	bl	8005080 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fedb 	bl	8005080 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff fed5 	bl	8005080 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff fed0 	bl	8005080 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <send_cmd+0x94>
 80052ea:	2395      	movs	r3, #149	@ 0x95
 80052ec:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d101      	bne.n	80052f8 <send_cmd+0x9e>
 80052f4:	2387      	movs	r3, #135	@ 0x87
 80052f6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fec0 	bl	8005080 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	2b0c      	cmp	r3, #12
 8005304:	d102      	bne.n	800530c <send_cmd+0xb2>
 8005306:	20ff      	movs	r0, #255	@ 0xff
 8005308:	f7ff feba 	bl	8005080 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800530c:	230a      	movs	r3, #10
 800530e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005310:	20ff      	movs	r0, #255	@ 0xff
 8005312:	f7ff feb5 	bl	8005080 <xchg_spi>
 8005316:	4603      	mov	r3, r0
 8005318:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800531a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800531e:	2b00      	cmp	r3, #0
 8005320:	da05      	bge.n	800532e <send_cmd+0xd4>
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	3b01      	subs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <send_cmd+0xb6>

	return res;							/* Return received response */
 800532e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005338:	b590      	push	{r4, r7, lr}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <USER_SPI_initialize+0x14>
 8005348:	2301      	movs	r3, #1
 800534a:	e0d6      	b.n	80054fa <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800534c:	4b6d      	ldr	r3, [pc, #436]	@ (8005504 <USER_SPI_initialize+0x1cc>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <USER_SPI_initialize+0x2a>
 800535a:	4b6a      	ldr	r3, [pc, #424]	@ (8005504 <USER_SPI_initialize+0x1cc>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	e0cb      	b.n	80054fa <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8005362:	4b69      	ldr	r3, [pc, #420]	@ (8005508 <USER_SPI_initialize+0x1d0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800536c:	4b66      	ldr	r3, [pc, #408]	@ (8005508 <USER_SPI_initialize+0x1d0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005374:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005376:	230a      	movs	r3, #10
 8005378:	73fb      	strb	r3, [r7, #15]
 800537a:	e005      	b.n	8005388 <USER_SPI_initialize+0x50>
 800537c:	20ff      	movs	r0, #255	@ 0xff
 800537e:	f7ff fe7f 	bl	8005080 <xchg_spi>
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	3b01      	subs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f6      	bne.n	800537c <USER_SPI_initialize+0x44>

	ty = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005392:	2100      	movs	r1, #0
 8005394:	2000      	movs	r0, #0
 8005396:	f7ff ff60 	bl	800525a <send_cmd>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	f040 808b 	bne.w	80054b8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80053a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053a6:	f7ff fe41 	bl	800502c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80053aa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80053ae:	2008      	movs	r0, #8
 80053b0:	f7ff ff53 	bl	800525a <send_cmd>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d151      	bne.n	800545e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
 80053be:	e00d      	b.n	80053dc <USER_SPI_initialize+0xa4>
 80053c0:	7bfc      	ldrb	r4, [r7, #15]
 80053c2:	20ff      	movs	r0, #255	@ 0xff
 80053c4:	f7ff fe5c 	bl	8005080 <xchg_spi>
 80053c8:	4603      	mov	r3, r0
 80053ca:	461a      	mov	r2, r3
 80053cc:	f104 0310 	add.w	r3, r4, #16
 80053d0:	443b      	add	r3, r7
 80053d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	3301      	adds	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d9ee      	bls.n	80053c0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80053e2:	7abb      	ldrb	r3, [r7, #10]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d167      	bne.n	80054b8 <USER_SPI_initialize+0x180>
 80053e8:	7afb      	ldrb	r3, [r7, #11]
 80053ea:	2baa      	cmp	r3, #170	@ 0xaa
 80053ec:	d164      	bne.n	80054b8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80053ee:	bf00      	nop
 80053f0:	f7ff fe30 	bl	8005054 <SPI_Timer_Status>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <USER_SPI_initialize+0xd2>
 80053fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80053fe:	20a9      	movs	r0, #169	@ 0xa9
 8005400:	f7ff ff2b 	bl	800525a <send_cmd>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f2      	bne.n	80053f0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800540a:	f7ff fe23 	bl	8005054 <SPI_Timer_Status>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d051      	beq.n	80054b8 <USER_SPI_initialize+0x180>
 8005414:	2100      	movs	r1, #0
 8005416:	203a      	movs	r0, #58	@ 0x3a
 8005418:	f7ff ff1f 	bl	800525a <send_cmd>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d14a      	bne.n	80054b8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
 8005426:	e00d      	b.n	8005444 <USER_SPI_initialize+0x10c>
 8005428:	7bfc      	ldrb	r4, [r7, #15]
 800542a:	20ff      	movs	r0, #255	@ 0xff
 800542c:	f7ff fe28 	bl	8005080 <xchg_spi>
 8005430:	4603      	mov	r3, r0
 8005432:	461a      	mov	r2, r3
 8005434:	f104 0310 	add.w	r3, r4, #16
 8005438:	443b      	add	r3, r7
 800543a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	3301      	adds	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d9ee      	bls.n	8005428 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800544a:	7a3b      	ldrb	r3, [r7, #8]
 800544c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <USER_SPI_initialize+0x120>
 8005454:	230c      	movs	r3, #12
 8005456:	e000      	b.n	800545a <USER_SPI_initialize+0x122>
 8005458:	2304      	movs	r3, #4
 800545a:	737b      	strb	r3, [r7, #13]
 800545c:	e02c      	b.n	80054b8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800545e:	2100      	movs	r1, #0
 8005460:	20a9      	movs	r0, #169	@ 0xa9
 8005462:	f7ff fefa 	bl	800525a <send_cmd>
 8005466:	4603      	mov	r3, r0
 8005468:	2b01      	cmp	r3, #1
 800546a:	d804      	bhi.n	8005476 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800546c:	2302      	movs	r3, #2
 800546e:	737b      	strb	r3, [r7, #13]
 8005470:	23a9      	movs	r3, #169	@ 0xa9
 8005472:	73bb      	strb	r3, [r7, #14]
 8005474:	e003      	b.n	800547e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005476:	2301      	movs	r3, #1
 8005478:	737b      	strb	r3, [r7, #13]
 800547a:	2301      	movs	r3, #1
 800547c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800547e:	bf00      	nop
 8005480:	f7ff fde8 	bl	8005054 <SPI_Timer_Status>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <USER_SPI_initialize+0x162>
 800548a:	7bbb      	ldrb	r3, [r7, #14]
 800548c:	2100      	movs	r1, #0
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fee3 	bl	800525a <send_cmd>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f2      	bne.n	8005480 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800549a:	f7ff fddb 	bl	8005054 <SPI_Timer_Status>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <USER_SPI_initialize+0x17c>
 80054a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80054a8:	2010      	movs	r0, #16
 80054aa:	f7ff fed6 	bl	800525a <send_cmd>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <USER_SPI_initialize+0x180>
				ty = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80054b8:	4a14      	ldr	r2, [pc, #80]	@ (800550c <USER_SPI_initialize+0x1d4>)
 80054ba:	7b7b      	ldrb	r3, [r7, #13]
 80054bc:	7013      	strb	r3, [r2, #0]
	despiselect();
 80054be:	f7ff fe49 	bl	8005154 <despiselect>

	if (ty) {			/* OK */
 80054c2:	7b7b      	ldrb	r3, [r7, #13]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d012      	beq.n	80054ee <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80054c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005508 <USER_SPI_initialize+0x1d0>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80054d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005508 <USER_SPI_initialize+0x1d0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0210 	orr.w	r2, r2, #16
 80054da:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80054dc:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <USER_SPI_initialize+0x1cc>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	4b06      	ldr	r3, [pc, #24]	@ (8005504 <USER_SPI_initialize+0x1cc>)
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e002      	b.n	80054f4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80054ee:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <USER_SPI_initialize+0x1cc>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80054f4:	4b03      	ldr	r3, [pc, #12]	@ (8005504 <USER_SPI_initialize+0x1cc>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	b2db      	uxtb	r3, r3
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}
 8005502:	bf00      	nop
 8005504:	20000028 	.word	0x20000028
 8005508:	20000234 	.word	0x20000234
 800550c:	20000960 	.word	0x20000960

08005510 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <USER_SPI_status+0x14>
 8005520:	2301      	movs	r3, #1
 8005522:	e002      	b.n	800552a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005524:	4b04      	ldr	r3, [pc, #16]	@ (8005538 <USER_SPI_status+0x28>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	b2db      	uxtb	r3, r3
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000028 	.word	0x20000028

0800553c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4603      	mov	r3, r0
 800554a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <USER_SPI_read+0x1c>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <USER_SPI_read+0x20>
 8005558:	2304      	movs	r3, #4
 800555a:	e04d      	b.n	80055f8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800555c:	4b28      	ldr	r3, [pc, #160]	@ (8005600 <USER_SPI_read+0xc4>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <USER_SPI_read+0x32>
 800556a:	2303      	movs	r3, #3
 800556c:	e044      	b.n	80055f8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800556e:	4b25      	ldr	r3, [pc, #148]	@ (8005604 <USER_SPI_read+0xc8>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <USER_SPI_read+0x44>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	025b      	lsls	r3, r3, #9
 800557e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d111      	bne.n	80055aa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	2011      	movs	r0, #17
 800558a:	f7ff fe66 	bl	800525a <send_cmd>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d129      	bne.n	80055e8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005594:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005598:	68b8      	ldr	r0, [r7, #8]
 800559a:	f7ff fe03 	bl	80051a4 <rcvr_datablock>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d021      	beq.n	80055e8 <USER_SPI_read+0xac>
			count = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	e01e      	b.n	80055e8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	2012      	movs	r0, #18
 80055ae:	f7ff fe54 	bl	800525a <send_cmd>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d117      	bne.n	80055e8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80055b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80055bc:	68b8      	ldr	r0, [r7, #8]
 80055be:	f7ff fdf1 	bl	80051a4 <rcvr_datablock>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <USER_SPI_read+0xa2>
				buff += 512;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80055ce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	603b      	str	r3, [r7, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1ed      	bne.n	80055b8 <USER_SPI_read+0x7c>
 80055dc:	e000      	b.n	80055e0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80055de:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80055e0:	2100      	movs	r1, #0
 80055e2:	200c      	movs	r0, #12
 80055e4:	f7ff fe39 	bl	800525a <send_cmd>
		}
	}
	despiselect();
 80055e8:	f7ff fdb4 	bl	8005154 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000028 	.word	0x20000028
 8005604:	20000960 	.word	0x20000960

08005608 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <USER_SPI_write+0x1c>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <USER_SPI_write+0x20>
 8005624:	2304      	movs	r3, #4
 8005626:	e063      	b.n	80056f0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005628:	4b33      	ldr	r3, [pc, #204]	@ (80056f8 <USER_SPI_write+0xf0>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <USER_SPI_write+0x32>
 8005636:	2303      	movs	r3, #3
 8005638:	e05a      	b.n	80056f0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800563a:	4b2f      	ldr	r3, [pc, #188]	@ (80056f8 <USER_SPI_write+0xf0>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <USER_SPI_write+0x44>
 8005648:	2302      	movs	r3, #2
 800564a:	e051      	b.n	80056f0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800564c:	4b2b      	ldr	r3, [pc, #172]	@ (80056fc <USER_SPI_write+0xf4>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <USER_SPI_write+0x56>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	025b      	lsls	r3, r3, #9
 800565c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d110      	bne.n	8005686 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	2018      	movs	r0, #24
 8005668:	f7ff fdf7 	bl	800525a <send_cmd>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d136      	bne.n	80056e0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005672:	21fe      	movs	r1, #254	@ 0xfe
 8005674:	68b8      	ldr	r0, [r7, #8]
 8005676:	f7ff fdbe 	bl	80051f6 <xmit_datablock>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d02f      	beq.n	80056e0 <USER_SPI_write+0xd8>
			count = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	e02c      	b.n	80056e0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005686:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <USER_SPI_write+0xf4>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	f003 0306 	and.w	r3, r3, #6
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <USER_SPI_write+0x92>
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	2097      	movs	r0, #151	@ 0x97
 8005696:	f7ff fde0 	bl	800525a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	2019      	movs	r0, #25
 800569e:	f7ff fddc 	bl	800525a <send_cmd>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11b      	bne.n	80056e0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80056a8:	21fc      	movs	r1, #252	@ 0xfc
 80056aa:	68b8      	ldr	r0, [r7, #8]
 80056ac:	f7ff fda3 	bl	80051f6 <xmit_datablock>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <USER_SPI_write+0xc4>
				buff += 512;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80056bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1ee      	bne.n	80056a8 <USER_SPI_write+0xa0>
 80056ca:	e000      	b.n	80056ce <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80056cc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80056ce:	21fd      	movs	r1, #253	@ 0xfd
 80056d0:	2000      	movs	r0, #0
 80056d2:	f7ff fd90 	bl	80051f6 <xmit_datablock>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <USER_SPI_write+0xd8>
 80056dc:	2301      	movs	r3, #1
 80056de:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80056e0:	f7ff fd38 	bl	8005154 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bf14      	ite	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	2300      	moveq	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000028 	.word	0x20000028
 80056fc:	20000960 	.word	0x20000960

08005700 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08c      	sub	sp, #48	@ 0x30
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	603a      	str	r2, [r7, #0]
 800570a:	71fb      	strb	r3, [r7, #7]
 800570c:	460b      	mov	r3, r1
 800570e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <USER_SPI_ioctl+0x1a>
 8005716:	2304      	movs	r3, #4
 8005718:	e15a      	b.n	80059d0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800571a:	4baf      	ldr	r3, [pc, #700]	@ (80059d8 <USER_SPI_ioctl+0x2d8>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <USER_SPI_ioctl+0x2c>
 8005728:	2303      	movs	r3, #3
 800572a:	e151      	b.n	80059d0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8005732:	79bb      	ldrb	r3, [r7, #6]
 8005734:	2b04      	cmp	r3, #4
 8005736:	f200 8136 	bhi.w	80059a6 <USER_SPI_ioctl+0x2a6>
 800573a:	a201      	add	r2, pc, #4	@ (adr r2, 8005740 <USER_SPI_ioctl+0x40>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005755 	.word	0x08005755
 8005744:	08005769 	.word	0x08005769
 8005748:	080059a7 	.word	0x080059a7
 800574c:	08005815 	.word	0x08005815
 8005750:	0800590b 	.word	0x0800590b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005754:	f7ff fd0c 	bl	8005170 <spiselect>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8127 	beq.w	80059ae <USER_SPI_ioctl+0x2ae>
 8005760:	2300      	movs	r3, #0
 8005762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005766:	e122      	b.n	80059ae <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005768:	2100      	movs	r1, #0
 800576a:	2009      	movs	r0, #9
 800576c:	f7ff fd75 	bl	800525a <send_cmd>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	f040 811d 	bne.w	80059b2 <USER_SPI_ioctl+0x2b2>
 8005778:	f107 030c 	add.w	r3, r7, #12
 800577c:	2110      	movs	r1, #16
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff fd10 	bl	80051a4 <rcvr_datablock>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8113 	beq.w	80059b2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800578c:	7b3b      	ldrb	r3, [r7, #12]
 800578e:	099b      	lsrs	r3, r3, #6
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	d111      	bne.n	80057ba <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005796:	7d7b      	ldrb	r3, [r7, #21]
 8005798:	461a      	mov	r2, r3
 800579a:	7d3b      	ldrb	r3, [r7, #20]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	4413      	add	r3, r2
 80057a0:	461a      	mov	r2, r3
 80057a2:	7cfb      	ldrb	r3, [r7, #19]
 80057a4:	041b      	lsls	r3, r3, #16
 80057a6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80057aa:	4413      	add	r3, r2
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	029a      	lsls	r2, r3, #10
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e028      	b.n	800580c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80057ba:	7c7b      	ldrb	r3, [r7, #17]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	7dbb      	ldrb	r3, [r7, #22]
 80057c4:	09db      	lsrs	r3, r3, #7
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4413      	add	r3, r2
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	7d7b      	ldrb	r3, [r7, #21]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 0306 	and.w	r3, r3, #6
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	4413      	add	r3, r2
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	3302      	adds	r3, #2
 80057de:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80057e2:	7d3b      	ldrb	r3, [r7, #20]
 80057e4:	099b      	lsrs	r3, r3, #6
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	7cfb      	ldrb	r3, [r7, #19]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	441a      	add	r2, r3
 80057f0:	7cbb      	ldrb	r3, [r7, #18]
 80057f2:	029b      	lsls	r3, r3, #10
 80057f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80057f8:	4413      	add	r3, r2
 80057fa:	3301      	adds	r3, #1
 80057fc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80057fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005802:	3b09      	subs	r3, #9
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	409a      	lsls	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005812:	e0ce      	b.n	80059b2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005814:	4b71      	ldr	r3, [pc, #452]	@ (80059dc <USER_SPI_ioctl+0x2dc>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d031      	beq.n	8005884 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005820:	2100      	movs	r1, #0
 8005822:	208d      	movs	r0, #141	@ 0x8d
 8005824:	f7ff fd19 	bl	800525a <send_cmd>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 80c3 	bne.w	80059b6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005830:	20ff      	movs	r0, #255	@ 0xff
 8005832:	f7ff fc25 	bl	8005080 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005836:	f107 030c 	add.w	r3, r7, #12
 800583a:	2110      	movs	r1, #16
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff fcb1 	bl	80051a4 <rcvr_datablock>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80b6 	beq.w	80059b6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800584a:	2330      	movs	r3, #48	@ 0x30
 800584c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005850:	e007      	b.n	8005862 <USER_SPI_ioctl+0x162>
 8005852:	20ff      	movs	r0, #255	@ 0xff
 8005854:	f7ff fc14 	bl	8005080 <xchg_spi>
 8005858:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800585c:	3b01      	subs	r3, #1
 800585e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005862:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f3      	bne.n	8005852 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800586a:	7dbb      	ldrb	r3, [r7, #22]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	b2db      	uxtb	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	2310      	movs	r3, #16
 8005874:	fa03 f202 	lsl.w	r2, r3, r2
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005882:	e098      	b.n	80059b6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005884:	2100      	movs	r1, #0
 8005886:	2009      	movs	r0, #9
 8005888:	f7ff fce7 	bl	800525a <send_cmd>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	f040 8091 	bne.w	80059b6 <USER_SPI_ioctl+0x2b6>
 8005894:	f107 030c 	add.w	r3, r7, #12
 8005898:	2110      	movs	r1, #16
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff fc82 	bl	80051a4 <rcvr_datablock>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 8087 	beq.w	80059b6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80058a8:	4b4c      	ldr	r3, [pc, #304]	@ (80059dc <USER_SPI_ioctl+0x2dc>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d012      	beq.n	80058da <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80058b4:	7dbb      	ldrb	r3, [r7, #22]
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80058bc:	7dfa      	ldrb	r2, [r7, #23]
 80058be:	09d2      	lsrs	r2, r2, #7
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	4413      	add	r3, r2
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	7e7b      	ldrb	r3, [r7, #25]
 80058c8:	099b      	lsrs	r3, r3, #6
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e013      	b.n	8005902 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80058da:	7dbb      	ldrb	r3, [r7, #22]
 80058dc:	109b      	asrs	r3, r3, #2
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	3301      	adds	r3, #1
 80058e6:	7dfa      	ldrb	r2, [r7, #23]
 80058e8:	00d2      	lsls	r2, r2, #3
 80058ea:	f002 0218 	and.w	r2, r2, #24
 80058ee:	7df9      	ldrb	r1, [r7, #23]
 80058f0:	0949      	lsrs	r1, r1, #5
 80058f2:	b2c9      	uxtb	r1, r1
 80058f4:	440a      	add	r2, r1
 80058f6:	3201      	adds	r2, #1
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	461a      	mov	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005908:	e055      	b.n	80059b6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800590a:	4b34      	ldr	r3, [pc, #208]	@ (80059dc <USER_SPI_ioctl+0x2dc>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f003 0306 	and.w	r3, r3, #6
 8005912:	2b00      	cmp	r3, #0
 8005914:	d051      	beq.n	80059ba <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005916:	f107 020c 	add.w	r2, r7, #12
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	210b      	movs	r1, #11
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff feee 	bl	8005700 <USER_SPI_ioctl>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d149      	bne.n	80059be <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800592a:	7b3b      	ldrb	r3, [r7, #12]
 800592c:	099b      	lsrs	r3, r3, #6
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <USER_SPI_ioctl+0x23e>
 8005934:	7dbb      	ldrb	r3, [r7, #22]
 8005936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d041      	beq.n	80059c2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	623b      	str	r3, [r7, #32]
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800594e:	4b23      	ldr	r3, [pc, #140]	@ (80059dc <USER_SPI_ioctl+0x2dc>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d105      	bne.n	8005966 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	025b      	lsls	r3, r3, #9
 800595e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	025b      	lsls	r3, r3, #9
 8005964:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005968:	2020      	movs	r0, #32
 800596a:	f7ff fc76 	bl	800525a <send_cmd>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d128      	bne.n	80059c6 <USER_SPI_ioctl+0x2c6>
 8005974:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005976:	2021      	movs	r0, #33	@ 0x21
 8005978:	f7ff fc6f 	bl	800525a <send_cmd>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d121      	bne.n	80059c6 <USER_SPI_ioctl+0x2c6>
 8005982:	2100      	movs	r1, #0
 8005984:	2026      	movs	r0, #38	@ 0x26
 8005986:	f7ff fc68 	bl	800525a <send_cmd>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d11a      	bne.n	80059c6 <USER_SPI_ioctl+0x2c6>
 8005990:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005994:	f7ff fbba 	bl	800510c <wait_ready>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d013      	beq.n	80059c6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800599e:	2300      	movs	r3, #0
 80059a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80059a4:	e00f      	b.n	80059c6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80059a6:	2304      	movs	r3, #4
 80059a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80059ac:	e00c      	b.n	80059c8 <USER_SPI_ioctl+0x2c8>
		break;
 80059ae:	bf00      	nop
 80059b0:	e00a      	b.n	80059c8 <USER_SPI_ioctl+0x2c8>
		break;
 80059b2:	bf00      	nop
 80059b4:	e008      	b.n	80059c8 <USER_SPI_ioctl+0x2c8>
		break;
 80059b6:	bf00      	nop
 80059b8:	e006      	b.n	80059c8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80059ba:	bf00      	nop
 80059bc:	e004      	b.n	80059c8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80059be:	bf00      	nop
 80059c0:	e002      	b.n	80059c8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80059c2:	bf00      	nop
 80059c4:	e000      	b.n	80059c8 <USER_SPI_ioctl+0x2c8>
		break;
 80059c6:	bf00      	nop
	}

	despiselect();
 80059c8:	f7ff fbc4 	bl	8005154 <despiselect>

	return res;
 80059cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3730      	adds	r7, #48	@ 0x30
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000028 	.word	0x20000028
 80059dc:	20000960 	.word	0x20000960

080059e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	4a08      	ldr	r2, [pc, #32]	@ (8005a10 <disk_status+0x30>)
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	79fa      	ldrb	r2, [r7, #7]
 80059f8:	4905      	ldr	r1, [pc, #20]	@ (8005a10 <disk_status+0x30>)
 80059fa:	440a      	add	r2, r1
 80059fc:	7a12      	ldrb	r2, [r2, #8]
 80059fe:	4610      	mov	r0, r2
 8005a00:	4798      	blx	r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20000994 	.word	0x20000994

08005a14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	4a0e      	ldr	r2, [pc, #56]	@ (8005a60 <disk_initialize+0x4c>)
 8005a26:	5cd3      	ldrb	r3, [r2, r3]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d114      	bne.n	8005a56 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a60 <disk_initialize+0x4c>)
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	79fa      	ldrb	r2, [r7, #7]
 8005a3a:	4909      	ldr	r1, [pc, #36]	@ (8005a60 <disk_initialize+0x4c>)
 8005a3c:	440a      	add	r2, r1
 8005a3e:	7a12      	ldrb	r2, [r2, #8]
 8005a40:	4610      	mov	r0, r2
 8005a42:	4798      	blx	r3
 8005a44:	4603      	mov	r3, r0
 8005a46:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	4a03      	ldr	r2, [pc, #12]	@ (8005a60 <disk_initialize+0x4c>)
 8005a52:	2101      	movs	r1, #1
 8005a54:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000994 	.word	0x20000994

08005a64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	4603      	mov	r3, r0
 8005a72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa0 <disk_read+0x3c>)
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	689c      	ldr	r4, [r3, #8]
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	4a07      	ldr	r2, [pc, #28]	@ (8005aa0 <disk_read+0x3c>)
 8005a84:	4413      	add	r3, r2
 8005a86:	7a18      	ldrb	r0, [r3, #8]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	47a0      	blx	r4
 8005a90:	4603      	mov	r3, r0
 8005a92:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd90      	pop	{r4, r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000994 	.word	0x20000994

08005aa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005aa4:	b590      	push	{r4, r7, lr}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae0 <disk_write+0x3c>)
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68dc      	ldr	r4, [r3, #12]
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	4a07      	ldr	r2, [pc, #28]	@ (8005ae0 <disk_write+0x3c>)
 8005ac4:	4413      	add	r3, r2
 8005ac6:	7a18      	ldrb	r0, [r3, #8]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	47a0      	blx	r4
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd90      	pop	{r4, r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000994 	.word	0x20000994

08005ae4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	603a      	str	r2, [r7, #0]
 8005aee:	71fb      	strb	r3, [r7, #7]
 8005af0:	460b      	mov	r3, r1
 8005af2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	4a09      	ldr	r2, [pc, #36]	@ (8005b1c <disk_ioctl+0x38>)
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	79fa      	ldrb	r2, [r7, #7]
 8005b02:	4906      	ldr	r1, [pc, #24]	@ (8005b1c <disk_ioctl+0x38>)
 8005b04:	440a      	add	r2, r1
 8005b06:	7a10      	ldrb	r0, [r2, #8]
 8005b08:	79b9      	ldrb	r1, [r7, #6]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	4798      	blx	r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	73fb      	strb	r3, [r7, #15]
  return res;
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000994 	.word	0x20000994

08005b20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005b30:	89fb      	ldrh	r3, [r7, #14]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	b21a      	sxth	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	b21b      	sxth	r3, r3
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	b21b      	sxth	r3, r3
 8005b40:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005b42:	89fb      	ldrh	r3, [r7, #14]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	3202      	adds	r2, #2
 8005b68:	7812      	ldrb	r2, [r2, #0]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	3201      	adds	r2, #1
 8005b76:	7812      	ldrb	r2, [r2, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
	return rv;
 8005b88:	68fb      	ldr	r3, [r7, #12]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	887a      	ldrh	r2, [r7, #2]
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	887b      	ldrh	r3, [r7, #2]
 8005bb0:	0a1b      	lsrs	r3, r3, #8
 8005bb2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	607a      	str	r2, [r7, #4]
 8005bba:	887a      	ldrh	r2, [r7, #2]
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	0a1b      	lsrs	r3, r3, #8
 8005be6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	607a      	str	r2, [r7, #4]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	0a1b      	lsrs	r3, r3, #8
 8005bf8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	0a1b      	lsrs	r3, r3, #8
 8005c0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00d      	beq.n	8005c5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	1c53      	adds	r3, r2, #1
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	1c59      	adds	r1, r3, #1
 8005c48:	6179      	str	r1, [r7, #20]
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	607b      	str	r3, [r7, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f1      	bne.n	8005c3e <mem_cpy+0x1a>
	}
}
 8005c5a:	bf00      	nop
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005c66:	b480      	push	{r7}
 8005c68:	b087      	sub	sp, #28
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	617a      	str	r2, [r7, #20]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f3      	bne.n	8005c76 <mem_set+0x10>
}
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005c9c:	b480      	push	{r7}
 8005c9e:	b089      	sub	sp, #36	@ 0x24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	61fa      	str	r2, [r7, #28]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	61ba      	str	r2, [r7, #24]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	1acb      	subs	r3, r1, r3
 8005cc8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	607b      	str	r3, [r7, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <mem_cmp+0x40>
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0eb      	beq.n	8005cb4 <mem_cmp+0x18>

	return r;
 8005cdc:	697b      	ldr	r3, [r7, #20]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3724      	adds	r7, #36	@ 0x24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005cf4:	e002      	b.n	8005cfc <chk_chr+0x12>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	607b      	str	r3, [r7, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <chk_chr+0x26>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d1f2      	bne.n	8005cf6 <chk_chr+0xc>
	return *str;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	781b      	ldrb	r3, [r3, #0]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e029      	b.n	8005d88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005d34:	4a27      	ldr	r2, [pc, #156]	@ (8005dd4 <chk_lock+0xb4>)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	4413      	add	r3, r2
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01d      	beq.n	8005d7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005d42:	4a24      	ldr	r2, [pc, #144]	@ (8005dd4 <chk_lock+0xb4>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	4413      	add	r3, r2
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d116      	bne.n	8005d82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005d54:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd4 <chk_lock+0xb4>)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d10c      	bne.n	8005d82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005d68:	4a1a      	ldr	r2, [pc, #104]	@ (8005dd4 <chk_lock+0xb4>)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	4413      	add	r3, r2
 8005d70:	3308      	adds	r3, #8
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d102      	bne.n	8005d82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005d7c:	e007      	b.n	8005d8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3301      	adds	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d9d2      	bls.n	8005d34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d109      	bne.n	8005da8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <chk_lock+0x80>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d101      	bne.n	8005da4 <chk_lock+0x84>
 8005da0:	2300      	movs	r3, #0
 8005da2:	e010      	b.n	8005dc6 <chk_lock+0xa6>
 8005da4:	2312      	movs	r3, #18
 8005da6:	e00e      	b.n	8005dc6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d108      	bne.n	8005dc0 <chk_lock+0xa0>
 8005dae:	4a09      	ldr	r2, [pc, #36]	@ (8005dd4 <chk_lock+0xb4>)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	4413      	add	r3, r2
 8005db6:	330c      	adds	r3, #12
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dbe:	d101      	bne.n	8005dc4 <chk_lock+0xa4>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	e000      	b.n	8005dc6 <chk_lock+0xa6>
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000974 	.word	0x20000974

08005dd8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005dde:	2300      	movs	r3, #0
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	e002      	b.n	8005dea <enq_lock+0x12>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3301      	adds	r3, #1
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d806      	bhi.n	8005dfe <enq_lock+0x26>
 8005df0:	4a09      	ldr	r2, [pc, #36]	@ (8005e18 <enq_lock+0x40>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	4413      	add	r3, r2
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f2      	bne.n	8005de4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	bf14      	ite	ne
 8005e04:	2301      	movne	r3, #1
 8005e06:	2300      	moveq	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	20000974 	.word	0x20000974

08005e1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	e01f      	b.n	8005e6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005e2c:	4a41      	ldr	r2, [pc, #260]	@ (8005f34 <inc_lock+0x118>)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	4413      	add	r3, r2
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d113      	bne.n	8005e66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8005f34 <inc_lock+0x118>)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	4413      	add	r3, r2
 8005e46:	3304      	adds	r3, #4
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d109      	bne.n	8005e66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005e52:	4a38      	ldr	r2, [pc, #224]	@ (8005f34 <inc_lock+0x118>)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	4413      	add	r3, r2
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d006      	beq.n	8005e74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d9dc      	bls.n	8005e2c <inc_lock+0x10>
 8005e72:	e000      	b.n	8005e76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005e74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d132      	bne.n	8005ee2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e002      	b.n	8005e88 <inc_lock+0x6c>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3301      	adds	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d806      	bhi.n	8005e9c <inc_lock+0x80>
 8005e8e:	4a29      	ldr	r2, [pc, #164]	@ (8005f34 <inc_lock+0x118>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	4413      	add	r3, r2
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1f2      	bne.n	8005e82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d101      	bne.n	8005ea6 <inc_lock+0x8a>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e040      	b.n	8005f28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4922      	ldr	r1, [pc, #136]	@ (8005f34 <inc_lock+0x118>)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	440b      	add	r3, r1
 8005eb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	491e      	ldr	r1, [pc, #120]	@ (8005f34 <inc_lock+0x118>)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	440b      	add	r3, r1
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	695a      	ldr	r2, [r3, #20]
 8005ec8:	491a      	ldr	r1, [pc, #104]	@ (8005f34 <inc_lock+0x118>)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	440b      	add	r3, r1
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005ed4:	4a17      	ldr	r2, [pc, #92]	@ (8005f34 <inc_lock+0x118>)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	4413      	add	r3, r2
 8005edc:	330c      	adds	r3, #12
 8005ede:	2200      	movs	r2, #0
 8005ee0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d009      	beq.n	8005efc <inc_lock+0xe0>
 8005ee8:	4a12      	ldr	r2, [pc, #72]	@ (8005f34 <inc_lock+0x118>)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	4413      	add	r3, r2
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <inc_lock+0xe0>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e015      	b.n	8005f28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d108      	bne.n	8005f14 <inc_lock+0xf8>
 8005f02:	4a0c      	ldr	r2, [pc, #48]	@ (8005f34 <inc_lock+0x118>)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	4413      	add	r3, r2
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	e001      	b.n	8005f18 <inc_lock+0xfc>
 8005f14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f18:	4906      	ldr	r1, [pc, #24]	@ (8005f34 <inc_lock+0x118>)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	440b      	add	r3, r1
 8005f20:	330c      	adds	r3, #12
 8005f22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	20000974 	.word	0x20000974

08005f38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d825      	bhi.n	8005f98 <dec_lock+0x60>
		n = Files[i].ctr;
 8005f4c:	4a17      	ldr	r2, [pc, #92]	@ (8005fac <dec_lock+0x74>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	4413      	add	r3, r2
 8005f54:	330c      	adds	r3, #12
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f60:	d101      	bne.n	8005f66 <dec_lock+0x2e>
 8005f62:	2300      	movs	r3, #0
 8005f64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005f66:	89fb      	ldrh	r3, [r7, #14]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <dec_lock+0x3a>
 8005f6c:	89fb      	ldrh	r3, [r7, #14]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005f72:	4a0e      	ldr	r2, [pc, #56]	@ (8005fac <dec_lock+0x74>)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	4413      	add	r3, r2
 8005f7a:	330c      	adds	r3, #12
 8005f7c:	89fa      	ldrh	r2, [r7, #14]
 8005f7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005f80:	89fb      	ldrh	r3, [r7, #14]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d105      	bne.n	8005f92 <dec_lock+0x5a>
 8005f86:	4a09      	ldr	r2, [pc, #36]	@ (8005fac <dec_lock+0x74>)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	4413      	add	r3, r2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	737b      	strb	r3, [r7, #13]
 8005f96:	e001      	b.n	8005f9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005f98:	2302      	movs	r3, #2
 8005f9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005f9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000974 	.word	0x20000974

08005fb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	e010      	b.n	8005fe0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8005ff4 <clear_lock+0x44>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	4413      	add	r3, r2
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d105      	bne.n	8005fda <clear_lock+0x2a>
 8005fce:	4a09      	ldr	r2, [pc, #36]	@ (8005ff4 <clear_lock+0x44>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	4413      	add	r3, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d9eb      	bls.n	8005fbe <clear_lock+0xe>
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	20000974 	.word	0x20000974

08005ff8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	78db      	ldrb	r3, [r3, #3]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d034      	beq.n	8006076 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7858      	ldrb	r0, [r3, #1]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800601c:	2301      	movs	r3, #1
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	f7ff fd40 	bl	8005aa4 <disk_write>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <sync_window+0x38>
			res = FR_DISK_ERR;
 800602a:	2301      	movs	r3, #1
 800602c:	73fb      	strb	r3, [r7, #15]
 800602e:	e022      	b.n	8006076 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	1ad2      	subs	r2, r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	429a      	cmp	r2, r3
 8006044:	d217      	bcs.n	8006076 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	789b      	ldrb	r3, [r3, #2]
 800604a:	613b      	str	r3, [r7, #16]
 800604c:	e010      	b.n	8006070 <sync_window+0x78>
					wsect += fs->fsize;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4413      	add	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	7858      	ldrb	r0, [r3, #1]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006062:	2301      	movs	r3, #1
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	f7ff fd1d 	bl	8005aa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	3b01      	subs	r3, #1
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d8eb      	bhi.n	800604e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006076:	7bfb      	ldrb	r3, [r7, #15]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d01b      	beq.n	80060d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ffad 	bl	8005ff8 <sync_window>
 800609e:	4603      	mov	r3, r0
 80060a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d113      	bne.n	80060d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	7858      	ldrb	r0, [r3, #1]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060b2:	2301      	movs	r3, #1
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	f7ff fcd5 	bl	8005a64 <disk_read>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80060c0:	f04f 33ff 	mov.w	r3, #4294967295
 80060c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff ff87 	bl	8005ff8 <sync_window>
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d158      	bne.n	80061a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d148      	bne.n	800618e <sync_fs+0xb2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	791b      	ldrb	r3, [r3, #4]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d144      	bne.n	800618e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3330      	adds	r3, #48	@ 0x30
 8006108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff fda9 	bl	8005c66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3330      	adds	r3, #48	@ 0x30
 8006118:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800611c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fd38 	bl	8005b96 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3330      	adds	r3, #48	@ 0x30
 800612a:	4921      	ldr	r1, [pc, #132]	@ (80061b0 <sync_fs+0xd4>)
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff fd4d 	bl	8005bcc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3330      	adds	r3, #48	@ 0x30
 8006136:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800613a:	491e      	ldr	r1, [pc, #120]	@ (80061b4 <sync_fs+0xd8>)
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff fd45 	bl	8005bcc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3330      	adds	r3, #48	@ 0x30
 8006146:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f7ff fd3b 	bl	8005bcc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3330      	adds	r3, #48	@ 0x30
 800615a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f7ff fd31 	bl	8005bcc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	7858      	ldrb	r0, [r3, #1]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006182:	2301      	movs	r3, #1
 8006184:	f7ff fc8e 	bl	8005aa4 <disk_write>
			fs->fsi_flag = 0;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	2200      	movs	r2, #0
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff fca4 	bl	8005ae4 <disk_ioctl>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <sync_fs+0xca>
 80061a2:	2301      	movs	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	41615252 	.word	0x41615252
 80061b4:	61417272 	.word	0x61417272

080061b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	3b02      	subs	r3, #2
 80061c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	3b02      	subs	r3, #2
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d301      	bcc.n	80061d8 <clust2sect+0x20>
 80061d4:	2300      	movs	r3, #0
 80061d6:	e008      	b.n	80061ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	895b      	ldrh	r3, [r3, #10]
 80061dc:	461a      	mov	r2, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	fb03 f202 	mul.w	r2, r3, r2
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	4413      	add	r3, r2
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d904      	bls.n	8006216 <get_fat+0x20>
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006216:	2301      	movs	r3, #1
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	e08e      	b.n	800633a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800621c:	f04f 33ff 	mov.w	r3, #4294967295
 8006220:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b03      	cmp	r3, #3
 8006228:	d061      	beq.n	80062ee <get_fat+0xf8>
 800622a:	2b03      	cmp	r3, #3
 800622c:	dc7b      	bgt.n	8006326 <get_fat+0x130>
 800622e:	2b01      	cmp	r3, #1
 8006230:	d002      	beq.n	8006238 <get_fat+0x42>
 8006232:	2b02      	cmp	r3, #2
 8006234:	d041      	beq.n	80062ba <get_fat+0xc4>
 8006236:	e076      	b.n	8006326 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	0a5b      	lsrs	r3, r3, #9
 800624e:	4413      	add	r3, r2
 8006250:	4619      	mov	r1, r3
 8006252:	6938      	ldr	r0, [r7, #16]
 8006254:	f7ff ff14 	bl	8006080 <move_window>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d166      	bne.n	800632c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	60fa      	str	r2, [r7, #12]
 8006264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4413      	add	r3, r2
 800626c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006270:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	6a1a      	ldr	r2, [r3, #32]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	0a5b      	lsrs	r3, r3, #9
 800627a:	4413      	add	r3, r2
 800627c:	4619      	mov	r1, r3
 800627e:	6938      	ldr	r0, [r7, #16]
 8006280:	f7ff fefe 	bl	8006080 <move_window>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d152      	bne.n	8006330 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4413      	add	r3, r2
 8006294:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4313      	orrs	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <get_fat+0xba>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	e002      	b.n	80062b6 <get_fat+0xc0>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b6:	617b      	str	r3, [r7, #20]
			break;
 80062b8:	e03f      	b.n	800633a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	6a1a      	ldr	r2, [r3, #32]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	0a1b      	lsrs	r3, r3, #8
 80062c2:	4413      	add	r3, r2
 80062c4:	4619      	mov	r1, r3
 80062c6:	6938      	ldr	r0, [r7, #16]
 80062c8:	f7ff feda 	bl	8006080 <move_window>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d130      	bne.n	8006334 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80062e0:	4413      	add	r3, r2
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fc1c 	bl	8005b20 <ld_word>
 80062e8:	4603      	mov	r3, r0
 80062ea:	617b      	str	r3, [r7, #20]
			break;
 80062ec:	e025      	b.n	800633a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	09db      	lsrs	r3, r3, #7
 80062f6:	4413      	add	r3, r2
 80062f8:	4619      	mov	r1, r3
 80062fa:	6938      	ldr	r0, [r7, #16]
 80062fc:	f7ff fec0 	bl	8006080 <move_window>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d118      	bne.n	8006338 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006314:	4413      	add	r3, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fc1a 	bl	8005b50 <ld_dword>
 800631c:	4603      	mov	r3, r0
 800631e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006322:	617b      	str	r3, [r7, #20]
			break;
 8006324:	e009      	b.n	800633a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006326:	2301      	movs	r3, #1
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	e006      	b.n	800633a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800632c:	bf00      	nop
 800632e:	e004      	b.n	800633a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006330:	bf00      	nop
 8006332:	e002      	b.n	800633a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006334:	bf00      	nop
 8006336:	e000      	b.n	800633a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006338:	bf00      	nop
		}
	}

	return val;
 800633a:	697b      	ldr	r3, [r7, #20]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006344:	b590      	push	{r4, r7, lr}
 8006346:	b089      	sub	sp, #36	@ 0x24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006350:	2302      	movs	r3, #2
 8006352:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b01      	cmp	r3, #1
 8006358:	f240 80d9 	bls.w	800650e <put_fat+0x1ca>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	429a      	cmp	r2, r3
 8006364:	f080 80d3 	bcs.w	800650e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b03      	cmp	r3, #3
 800636e:	f000 8096 	beq.w	800649e <put_fat+0x15a>
 8006372:	2b03      	cmp	r3, #3
 8006374:	f300 80cb 	bgt.w	800650e <put_fat+0x1ca>
 8006378:	2b01      	cmp	r3, #1
 800637a:	d002      	beq.n	8006382 <put_fat+0x3e>
 800637c:	2b02      	cmp	r3, #2
 800637e:	d06e      	beq.n	800645e <put_fat+0x11a>
 8006380:	e0c5      	b.n	800650e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	4413      	add	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1a      	ldr	r2, [r3, #32]
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	0a5b      	lsrs	r3, r3, #9
 8006398:	4413      	add	r3, r2
 800639a:	4619      	mov	r1, r3
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff fe6f 	bl	8006080 <move_window>
 80063a2:	4603      	mov	r3, r0
 80063a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063a6:	7ffb      	ldrb	r3, [r7, #31]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f040 80a9 	bne.w	8006500 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	1c59      	adds	r1, r3, #1
 80063b8:	61b9      	str	r1, [r7, #24]
 80063ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063be:	4413      	add	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00d      	beq.n	80063e8 <put_fat+0xa4>
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	b25b      	sxtb	r3, r3
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	b25a      	sxtb	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	b25b      	sxtb	r3, r3
 80063e0:	4313      	orrs	r3, r2
 80063e2:	b25b      	sxtb	r3, r3
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	e001      	b.n	80063ec <put_fat+0xa8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1a      	ldr	r2, [r3, #32]
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	0a5b      	lsrs	r3, r3, #9
 80063fe:	4413      	add	r3, r2
 8006400:	4619      	mov	r1, r3
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff fe3c 	bl	8006080 <move_window>
 8006408:	4603      	mov	r3, r0
 800640a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800640c:	7ffb      	ldrb	r3, [r7, #31]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d178      	bne.n	8006504 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	4413      	add	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <put_fat+0xf0>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	091b      	lsrs	r3, r3, #4
 8006430:	b2db      	uxtb	r3, r3
 8006432:	e00e      	b.n	8006452 <put_fat+0x10e>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	b25b      	sxtb	r3, r3
 800643a:	f023 030f 	bic.w	r3, r3, #15
 800643e:	b25a      	sxtb	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	b25b      	sxtb	r3, r3
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	b25b      	sxtb	r3, r3
 800644c:	4313      	orrs	r3, r2
 800644e:	b25b      	sxtb	r3, r3
 8006450:	b2db      	uxtb	r3, r3
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	70da      	strb	r2, [r3, #3]
			break;
 800645c:	e057      	b.n	800650e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a1a      	ldr	r2, [r3, #32]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	0a1b      	lsrs	r3, r3, #8
 8006466:	4413      	add	r3, r2
 8006468:	4619      	mov	r1, r3
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7ff fe08 	bl	8006080 <move_window>
 8006470:	4603      	mov	r3, r0
 8006472:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006474:	7ffb      	ldrb	r3, [r7, #31]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d146      	bne.n	8006508 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006488:	4413      	add	r3, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	b292      	uxth	r2, r2
 800648e:	4611      	mov	r1, r2
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff fb80 	bl	8005b96 <st_word>
			fs->wflag = 1;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	70da      	strb	r2, [r3, #3]
			break;
 800649c:	e037      	b.n	800650e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1a      	ldr	r2, [r3, #32]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	09db      	lsrs	r3, r3, #7
 80064a6:	4413      	add	r3, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff fde8 	bl	8006080 <move_window>
 80064b0:	4603      	mov	r3, r0
 80064b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064b4:	7ffb      	ldrb	r3, [r7, #31]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d128      	bne.n	800650c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80064ce:	4413      	add	r3, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff fb3d 	bl	8005b50 <ld_dword>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80064dc:	4323      	orrs	r3, r4
 80064de:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80064ee:	4413      	add	r3, r2
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fb6a 	bl	8005bcc <st_dword>
			fs->wflag = 1;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	70da      	strb	r2, [r3, #3]
			break;
 80064fe:	e006      	b.n	800650e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006500:	bf00      	nop
 8006502:	e004      	b.n	800650e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006504:	bf00      	nop
 8006506:	e002      	b.n	800650e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006508:	bf00      	nop
 800650a:	e000      	b.n	800650e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800650c:	bf00      	nop
		}
	}
	return res;
 800650e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3724      	adds	r7, #36	@ 0x24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd90      	pop	{r4, r7, pc}

08006518 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d904      	bls.n	800653e <remove_chain+0x26>
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	429a      	cmp	r2, r3
 800653c:	d301      	bcc.n	8006542 <remove_chain+0x2a>
 800653e:	2302      	movs	r3, #2
 8006540:	e04b      	b.n	80065da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00c      	beq.n	8006562 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006548:	f04f 32ff 	mov.w	r2, #4294967295
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	69b8      	ldr	r0, [r7, #24]
 8006550:	f7ff fef8 	bl	8006344 <put_fat>
 8006554:	4603      	mov	r3, r0
 8006556:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006558:	7ffb      	ldrb	r3, [r7, #31]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <remove_chain+0x4a>
 800655e:	7ffb      	ldrb	r3, [r7, #31]
 8006560:	e03b      	b.n	80065da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff fe46 	bl	80061f6 <get_fat>
 800656a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d031      	beq.n	80065d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <remove_chain+0x64>
 8006578:	2302      	movs	r3, #2
 800657a:	e02e      	b.n	80065da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	d101      	bne.n	8006588 <remove_chain+0x70>
 8006584:	2301      	movs	r3, #1
 8006586:	e028      	b.n	80065da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006588:	2200      	movs	r2, #0
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	69b8      	ldr	r0, [r7, #24]
 800658e:	f7ff fed9 	bl	8006344 <put_fat>
 8006592:	4603      	mov	r3, r0
 8006594:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006596:	7ffb      	ldrb	r3, [r7, #31]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <remove_chain+0x88>
 800659c:	7ffb      	ldrb	r3, [r7, #31]
 800659e:	e01c      	b.n	80065da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	3b02      	subs	r3, #2
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d20b      	bcs.n	80065c6 <remove_chain+0xae>
			fs->free_clst++;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	791b      	ldrb	r3, [r3, #4]
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d3c6      	bcc.n	8006562 <remove_chain+0x4a>
 80065d4:	e000      	b.n	80065d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80065d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b088      	sub	sp, #32
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10d      	bne.n	8006614 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <create_chain+0x2c>
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	429a      	cmp	r2, r3
 800660c:	d31b      	bcc.n	8006646 <create_chain+0x64>
 800660e:	2301      	movs	r3, #1
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	e018      	b.n	8006646 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff fded 	bl	80061f6 <get_fat>
 800661c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d801      	bhi.n	8006628 <create_chain+0x46>
 8006624:	2301      	movs	r3, #1
 8006626:	e070      	b.n	800670a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d101      	bne.n	8006634 <create_chain+0x52>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	e06a      	b.n	800670a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	429a      	cmp	r2, r3
 800663c:	d201      	bcs.n	8006642 <create_chain+0x60>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	e063      	b.n	800670a <create_chain+0x128>
		scl = clst;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	3301      	adds	r3, #1
 800664e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	429a      	cmp	r2, r3
 8006658:	d307      	bcc.n	800666a <create_chain+0x88>
				ncl = 2;
 800665a:	2302      	movs	r3, #2
 800665c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	429a      	cmp	r2, r3
 8006664:	d901      	bls.n	800666a <create_chain+0x88>
 8006666:	2300      	movs	r3, #0
 8006668:	e04f      	b.n	800670a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800666a:	69f9      	ldr	r1, [r7, #28]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff fdc2 	bl	80061f6 <get_fat>
 8006672:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d003      	beq.n	8006688 <create_chain+0xa6>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d101      	bne.n	800668c <create_chain+0xaa>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	e03e      	b.n	800670a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	429a      	cmp	r2, r3
 8006692:	d1da      	bne.n	800664a <create_chain+0x68>
 8006694:	2300      	movs	r3, #0
 8006696:	e038      	b.n	800670a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006698:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800669a:	f04f 32ff 	mov.w	r2, #4294967295
 800669e:	69f9      	ldr	r1, [r7, #28]
 80066a0:	6938      	ldr	r0, [r7, #16]
 80066a2:	f7ff fe4f 	bl	8006344 <put_fat>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d109      	bne.n	80066c4 <create_chain+0xe2>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d006      	beq.n	80066c4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6938      	ldr	r0, [r7, #16]
 80066bc:	f7ff fe42 	bl	8006344 <put_fat>
 80066c0:	4603      	mov	r3, r0
 80066c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d116      	bne.n	80066f8 <create_chain+0x116>
		fs->last_clst = ncl;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	69fa      	ldr	r2, [r7, #28]
 80066ce:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	3b02      	subs	r3, #2
 80066da:	429a      	cmp	r2, r3
 80066dc:	d804      	bhi.n	80066e8 <create_chain+0x106>
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	1e5a      	subs	r2, r3, #1
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	791b      	ldrb	r3, [r3, #4]
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	711a      	strb	r2, [r3, #4]
 80066f6:	e007      	b.n	8006708 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d102      	bne.n	8006704 <create_chain+0x122>
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	e000      	b.n	8006706 <create_chain+0x124>
 8006704:	2301      	movs	r3, #1
 8006706:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006708:	69fb      	ldr	r3, [r7, #28]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006712:	b480      	push	{r7}
 8006714:	b087      	sub	sp, #28
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006726:	3304      	adds	r3, #4
 8006728:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	0a5b      	lsrs	r3, r3, #9
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	8952      	ldrh	r2, [r2, #10]
 8006732:	fbb3 f3f2 	udiv	r3, r3, r2
 8006736:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1d1a      	adds	r2, r3, #4
 800673c:	613a      	str	r2, [r7, #16]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <clmt_clust+0x3a>
 8006748:	2300      	movs	r3, #0
 800674a:	e010      	b.n	800676e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	429a      	cmp	r2, r3
 8006752:	d307      	bcc.n	8006764 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	3304      	adds	r3, #4
 8006760:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006762:	e7e9      	b.n	8006738 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006764:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	4413      	add	r3, r2
}
 800676e:	4618      	mov	r0, r3
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b086      	sub	sp, #24
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006790:	d204      	bcs.n	800679c <dir_sdi+0x22>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800679c:	2302      	movs	r3, #2
 800679e:	e063      	b.n	8006868 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <dir_sdi+0x46>
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d902      	bls.n	80067c0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10c      	bne.n	80067e0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	8912      	ldrh	r2, [r2, #8]
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d301      	bcc.n	80067d6 <dir_sdi+0x5c>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e048      	b.n	8006868 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	61da      	str	r2, [r3, #28]
 80067de:	e029      	b.n	8006834 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	895b      	ldrh	r3, [r3, #10]
 80067e4:	025b      	lsls	r3, r3, #9
 80067e6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80067e8:	e019      	b.n	800681e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6979      	ldr	r1, [r7, #20]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fd01 	bl	80061f6 <get_fat>
 80067f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fc:	d101      	bne.n	8006802 <dir_sdi+0x88>
 80067fe:	2301      	movs	r3, #1
 8006800:	e032      	b.n	8006868 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d904      	bls.n	8006812 <dir_sdi+0x98>
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	429a      	cmp	r2, r3
 8006810:	d301      	bcc.n	8006816 <dir_sdi+0x9c>
 8006812:	2302      	movs	r3, #2
 8006814:	e028      	b.n	8006868 <dir_sdi+0xee>
			ofs -= csz;
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	429a      	cmp	r2, r3
 8006824:	d2e1      	bcs.n	80067ea <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006826:	6979      	ldr	r1, [r7, #20]
 8006828:	6938      	ldr	r0, [r7, #16]
 800682a:	f7ff fcc5 	bl	80061b8 <clust2sect>
 800682e:	4602      	mov	r2, r0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <dir_sdi+0xcc>
 8006842:	2302      	movs	r3, #2
 8006844:	e010      	b.n	8006868 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69da      	ldr	r2, [r3, #28]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	0a5b      	lsrs	r3, r3, #9
 800684e:	441a      	add	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006860:	441a      	add	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	3320      	adds	r3, #32
 8006886:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <dir_next+0x28>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006896:	d301      	bcc.n	800689c <dir_next+0x2c>
 8006898:	2304      	movs	r3, #4
 800689a:	e0aa      	b.n	80069f2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 8098 	bne.w	80069d8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10b      	bne.n	80068d2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	8912      	ldrh	r2, [r2, #8]
 80068c2:	4293      	cmp	r3, r2
 80068c4:	f0c0 8088 	bcc.w	80069d8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	61da      	str	r2, [r3, #28]
 80068ce:	2304      	movs	r3, #4
 80068d0:	e08f      	b.n	80069f2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	0a5b      	lsrs	r3, r3, #9
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	8952      	ldrh	r2, [r2, #10]
 80068da:	3a01      	subs	r2, #1
 80068dc:	4013      	ands	r3, r2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d17a      	bne.n	80069d8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	4619      	mov	r1, r3
 80068ea:	4610      	mov	r0, r2
 80068ec:	f7ff fc83 	bl	80061f6 <get_fat>
 80068f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d801      	bhi.n	80068fc <dir_next+0x8c>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e07a      	b.n	80069f2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d101      	bne.n	8006908 <dir_next+0x98>
 8006904:	2301      	movs	r3, #1
 8006906:	e074      	b.n	80069f2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	429a      	cmp	r2, r3
 8006910:	d358      	bcc.n	80069c4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d104      	bne.n	8006922 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	61da      	str	r2, [r3, #28]
 800691e:	2304      	movs	r3, #4
 8006920:	e067      	b.n	80069f2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	4619      	mov	r1, r3
 800692a:	4610      	mov	r0, r2
 800692c:	f7ff fe59 	bl	80065e2 <create_chain>
 8006930:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <dir_next+0xcc>
 8006938:	2307      	movs	r3, #7
 800693a:	e05a      	b.n	80069f2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <dir_next+0xd6>
 8006942:	2302      	movs	r3, #2
 8006944:	e055      	b.n	80069f2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694c:	d101      	bne.n	8006952 <dir_next+0xe2>
 800694e:	2301      	movs	r3, #1
 8006950:	e04f      	b.n	80069f2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff fb50 	bl	8005ff8 <sync_window>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <dir_next+0xf2>
 800695e:	2301      	movs	r3, #1
 8006960:	e047      	b.n	80069f2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3330      	adds	r3, #48	@ 0x30
 8006966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800696a:	2100      	movs	r1, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff f97a 	bl	8005c66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff fc1d 	bl	80061b8 <clust2sect>
 800697e:	4602      	mov	r2, r0
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006984:	e012      	b.n	80069ac <dir_next+0x13c>
						fs->wflag = 1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff fb33 	bl	8005ff8 <sync_window>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <dir_next+0x12c>
 8006998:	2301      	movs	r3, #1
 800699a:	e02a      	b.n	80069f2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	3301      	adds	r3, #1
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	895b      	ldrh	r3, [r3, #10]
 80069b0:	461a      	mov	r2, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d3e6      	bcc.n	8006986 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80069ca:	6979      	ldr	r1, [r7, #20]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff fbf3 	bl	80061b8 <clust2sect>
 80069d2:	4602      	mov	r2, r0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ea:	441a      	add	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b086      	sub	sp, #24
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff feb4 	bl	800677a <dir_sdi>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d12b      	bne.n	8006a74 <dir_alloc+0x7a>
		n = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	4619      	mov	r1, r3
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff fb2a 	bl	8006080 <move_window>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d11d      	bne.n	8006a72 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2be5      	cmp	r3, #229	@ 0xe5
 8006a3e:	d004      	beq.n	8006a4a <dir_alloc+0x50>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d107      	bne.n	8006a5a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	613b      	str	r3, [r7, #16]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d102      	bne.n	8006a5e <dir_alloc+0x64>
 8006a58:	e00c      	b.n	8006a74 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006a5e:	2101      	movs	r1, #1
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff ff05 	bl	8006870 <dir_next>
 8006a66:	4603      	mov	r3, r0
 8006a68:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0d7      	beq.n	8006a20 <dir_alloc+0x26>
 8006a70:	e000      	b.n	8006a74 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006a72:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d101      	bne.n	8006a7e <dir_alloc+0x84>
 8006a7a:	2307      	movs	r3, #7
 8006a7c:	75fb      	strb	r3, [r7, #23]
	return res;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	331a      	adds	r3, #26
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff f842 	bl	8005b20 <ld_word>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d109      	bne.n	8006abc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	3314      	adds	r3, #20
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff f837 	bl	8005b20 <ld_word>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	041b      	lsls	r3, r3, #16
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006abc:	68fb      	ldr	r3, [r7, #12]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	331a      	adds	r3, #26
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	b292      	uxth	r2, r2
 8006ada:	4611      	mov	r1, r2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff f85a 	bl	8005b96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d109      	bne.n	8006afe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f103 0214 	add.w	r2, r3, #20
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	0c1b      	lsrs	r3, r3, #16
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f7ff f84c 	bl	8005b96 <st_word>
	}
}
 8006afe:	bf00      	nop
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b086      	sub	sp, #24
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006b14:	2100      	movs	r1, #0
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff fe2f 	bl	800677a <dir_sdi>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <dir_find+0x24>
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	e03e      	b.n	8006ba8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6938      	ldr	r0, [r7, #16]
 8006b32:	f7ff faa5 	bl	8006080 <move_window>
 8006b36:	4603      	mov	r3, r0
 8006b38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d12f      	bne.n	8006ba0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <dir_find+0x4e>
 8006b4e:	2304      	movs	r3, #4
 8006b50:	75fb      	strb	r3, [r7, #23]
 8006b52:	e028      	b.n	8006ba6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	330b      	adds	r3, #11
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	330b      	adds	r3, #11
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <dir_find+0x86>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a18      	ldr	r0, [r3, #32]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3324      	adds	r3, #36	@ 0x24
 8006b7e:	220b      	movs	r2, #11
 8006b80:	4619      	mov	r1, r3
 8006b82:	f7ff f88b 	bl	8005c9c <mem_cmp>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fe6e 	bl	8006870 <dir_next>
 8006b94:	4603      	mov	r3, r0
 8006b96:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0c5      	beq.n	8006b2a <dir_find+0x24>
 8006b9e:	e002      	b.n	8006ba6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006ba0:	bf00      	nop
 8006ba2:	e000      	b.n	8006ba6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ba4:	bf00      	nop

	return res;
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff ff1a 	bl	80069fa <dir_alloc>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d11c      	bne.n	8006c0a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	68b8      	ldr	r0, [r7, #8]
 8006bd8:	f7ff fa52 	bl	8006080 <move_window>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d111      	bne.n	8006c0a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	2220      	movs	r2, #32
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff f839 	bl	8005c66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a18      	ldr	r0, [r3, #32]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3324      	adds	r3, #36	@ 0x24
 8006bfc:	220b      	movs	r2, #11
 8006bfe:	4619      	mov	r1, r3
 8006c00:	f7ff f810 	bl	8005c24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2201      	movs	r2, #1
 8006c08:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3324      	adds	r3, #36	@ 0x24
 8006c28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c2a:	220b      	movs	r2, #11
 8006c2c:	2120      	movs	r1, #32
 8006c2e:	68b8      	ldr	r0, [r7, #8]
 8006c30:	f7ff f819 	bl	8005c66 <mem_set>
	si = i = 0; ni = 8;
 8006c34:	2300      	movs	r3, #0
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	61fb      	str	r3, [r7, #28]
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	61fa      	str	r2, [r7, #28]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c4e:	7efb      	ldrb	r3, [r7, #27]
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	d94e      	bls.n	8006cf2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006c54:	7efb      	ldrb	r3, [r7, #27]
 8006c56:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c58:	d006      	beq.n	8006c68 <create_name+0x54>
 8006c5a:	7efb      	ldrb	r3, [r7, #27]
 8006c5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006c5e:	d110      	bne.n	8006c82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006c60:	e002      	b.n	8006c68 <create_name+0x54>
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	3301      	adds	r3, #1
 8006c66:	61fb      	str	r3, [r7, #28]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c72:	d0f6      	beq.n	8006c62 <create_name+0x4e>
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006c7e:	d0f0      	beq.n	8006c62 <create_name+0x4e>
			break;
 8006c80:	e038      	b.n	8006cf4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006c82:	7efb      	ldrb	r3, [r7, #27]
 8006c84:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c86:	d003      	beq.n	8006c90 <create_name+0x7c>
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d30c      	bcc.n	8006caa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2b0b      	cmp	r3, #11
 8006c94:	d002      	beq.n	8006c9c <create_name+0x88>
 8006c96:	7efb      	ldrb	r3, [r7, #27]
 8006c98:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c9a:	d001      	beq.n	8006ca0 <create_name+0x8c>
 8006c9c:	2306      	movs	r3, #6
 8006c9e:	e044      	b.n	8006d2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	613b      	str	r3, [r7, #16]
 8006ca4:	230b      	movs	r3, #11
 8006ca6:	617b      	str	r3, [r7, #20]
			continue;
 8006ca8:	e022      	b.n	8006cf0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006caa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	da04      	bge.n	8006cbc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006cb2:	7efb      	ldrb	r3, [r7, #27]
 8006cb4:	3b80      	subs	r3, #128	@ 0x80
 8006cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8006d34 <create_name+0x120>)
 8006cb8:	5cd3      	ldrb	r3, [r2, r3]
 8006cba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006cbc:	7efb      	ldrb	r3, [r7, #27]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	481d      	ldr	r0, [pc, #116]	@ (8006d38 <create_name+0x124>)
 8006cc2:	f7ff f812 	bl	8005cea <chk_chr>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <create_name+0xbc>
 8006ccc:	2306      	movs	r3, #6
 8006cce:	e02c      	b.n	8006d2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006cd0:	7efb      	ldrb	r3, [r7, #27]
 8006cd2:	2b60      	cmp	r3, #96	@ 0x60
 8006cd4:	d905      	bls.n	8006ce2 <create_name+0xce>
 8006cd6:	7efb      	ldrb	r3, [r7, #27]
 8006cd8:	2b7a      	cmp	r3, #122	@ 0x7a
 8006cda:	d802      	bhi.n	8006ce2 <create_name+0xce>
 8006cdc:	7efb      	ldrb	r3, [r7, #27]
 8006cde:	3b20      	subs	r3, #32
 8006ce0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	613a      	str	r2, [r7, #16]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	4413      	add	r3, r2
 8006cec:	7efa      	ldrb	r2, [r7, #27]
 8006cee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006cf0:	e7a6      	b.n	8006c40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006cf2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	441a      	add	r2, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <create_name+0xf4>
 8006d04:	2306      	movs	r3, #6
 8006d06:	e010      	b.n	8006d2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2be5      	cmp	r3, #229	@ 0xe5
 8006d0e:	d102      	bne.n	8006d16 <create_name+0x102>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2205      	movs	r2, #5
 8006d14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d16:	7efb      	ldrb	r3, [r7, #27]
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d801      	bhi.n	8006d20 <create_name+0x10c>
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	e000      	b.n	8006d22 <create_name+0x10e>
 8006d20:	2200      	movs	r2, #0
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	330b      	adds	r3, #11
 8006d26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	0800bd64 	.word	0x0800bd64
 8006d38:	0800bd08 	.word	0x0800bd08

08006d3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d50:	e002      	b.n	8006d58 <follow_path+0x1c>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	3301      	adds	r3, #1
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d5e:	d0f8      	beq.n	8006d52 <follow_path+0x16>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d66:	d0f4      	beq.n	8006d52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b1f      	cmp	r3, #31
 8006d74:	d80a      	bhi.n	8006d8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2280      	movs	r2, #128	@ 0x80
 8006d7a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006d7e:	2100      	movs	r1, #0
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff fcfa 	bl	800677a <dir_sdi>
 8006d86:	4603      	mov	r3, r0
 8006d88:	75fb      	strb	r3, [r7, #23]
 8006d8a:	e043      	b.n	8006e14 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff ff3f 	bl	8006c14 <create_name>
 8006d96:	4603      	mov	r3, r0
 8006d98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d134      	bne.n	8006e0a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff feb0 	bl	8006b06 <dir_find>
 8006da6:	4603      	mov	r3, r0
 8006da8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006db0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d127      	bne.n	8006e0e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d122      	bne.n	8006e0e <follow_path+0xd2>
 8006dc8:	2305      	movs	r3, #5
 8006dca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006dcc:	e01f      	b.n	8006e0e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d11c      	bne.n	8006e12 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	799b      	ldrb	r3, [r3, #6]
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d102      	bne.n	8006dea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006de4:	2305      	movs	r3, #5
 8006de6:	75fb      	strb	r3, [r7, #23]
 8006de8:	e014      	b.n	8006e14 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df8:	4413      	add	r3, r2
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fe43 	bl	8006a88 <ld_clust>
 8006e02:	4602      	mov	r2, r0
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e08:	e7c0      	b.n	8006d8c <follow_path+0x50>
			if (res != FR_OK) break;
 8006e0a:	bf00      	nop
 8006e0c:	e002      	b.n	8006e14 <follow_path+0xd8>
				break;
 8006e0e:	bf00      	nop
 8006e10:	e000      	b.n	8006e14 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e12:	bf00      	nop
			}
		}
	}

	return res;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b087      	sub	sp, #28
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d031      	beq.n	8006e98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	e002      	b.n	8006e42 <get_ldnumber+0x24>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d903      	bls.n	8006e52 <get_ldnumber+0x34>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006e50:	d1f4      	bne.n	8006e3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b3a      	cmp	r3, #58	@ 0x3a
 8006e58:	d11c      	bne.n	8006e94 <get_ldnumber+0x76>
			tp = *path;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	60fa      	str	r2, [r7, #12]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	3b30      	subs	r3, #48	@ 0x30
 8006e6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b09      	cmp	r3, #9
 8006e70:	d80e      	bhi.n	8006e90 <get_ldnumber+0x72>
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d10a      	bne.n	8006e90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d107      	bne.n	8006e90 <get_ldnumber+0x72>
					vol = (int)i;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	3301      	adds	r3, #1
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	e002      	b.n	8006e9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006e94:	2300      	movs	r3, #0
 8006e96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006e98:	693b      	ldr	r3, [r7, #16]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	70da      	strb	r2, [r3, #3]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff f8dc 	bl	8006080 <move_window>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <check_fs+0x2a>
 8006ece:	2304      	movs	r3, #4
 8006ed0:	e038      	b.n	8006f44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3330      	adds	r3, #48	@ 0x30
 8006ed6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fe20 	bl	8005b20 <ld_word>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d001      	beq.n	8006ef0 <check_fs+0x48>
 8006eec:	2303      	movs	r3, #3
 8006eee:	e029      	b.n	8006f44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ef6:	2be9      	cmp	r3, #233	@ 0xe9
 8006ef8:	d009      	beq.n	8006f0e <check_fs+0x66>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f00:	2beb      	cmp	r3, #235	@ 0xeb
 8006f02:	d11e      	bne.n	8006f42 <check_fs+0x9a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006f0a:	2b90      	cmp	r3, #144	@ 0x90
 8006f0c:	d119      	bne.n	8006f42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3330      	adds	r3, #48	@ 0x30
 8006f12:	3336      	adds	r3, #54	@ 0x36
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe fe1b 	bl	8005b50 <ld_dword>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006f20:	4a0a      	ldr	r2, [pc, #40]	@ (8006f4c <check_fs+0xa4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d101      	bne.n	8006f2a <check_fs+0x82>
 8006f26:	2300      	movs	r3, #0
 8006f28:	e00c      	b.n	8006f44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3330      	adds	r3, #48	@ 0x30
 8006f2e:	3352      	adds	r3, #82	@ 0x52
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fe0d 	bl	8005b50 <ld_dword>
 8006f36:	4603      	mov	r3, r0
 8006f38:	4a05      	ldr	r2, [pc, #20]	@ (8006f50 <check_fs+0xa8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d101      	bne.n	8006f42 <check_fs+0x9a>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e000      	b.n	8006f44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f42:	2302      	movs	r3, #2
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	00544146 	.word	0x00544146
 8006f50:	33544146 	.word	0x33544146

08006f54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b096      	sub	sp, #88	@ 0x58
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7ff ff58 	bl	8006e1e <get_ldnumber>
 8006f6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	da01      	bge.n	8006f7a <find_volume+0x26>
 8006f76:	230b      	movs	r3, #11
 8006f78:	e22d      	b.n	80073d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f7a:	4aa1      	ldr	r2, [pc, #644]	@ (8007200 <find_volume+0x2ac>)
 8006f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f82:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <find_volume+0x3a>
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	e223      	b.n	80073d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01a      	beq.n	8006fda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fe fd19 	bl	80059e0 <disk_status>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006fb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10c      	bne.n	8006fda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <find_volume+0x82>
 8006fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006fd2:	230a      	movs	r3, #10
 8006fd4:	e1ff      	b.n	80073d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	e1fd      	b.n	80073d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe fd11 	bl	8005a14 <disk_initialize>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007004:	2303      	movs	r3, #3
 8007006:	e1e6      	b.n	80073d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <find_volume+0xca>
 800700e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800701a:	230a      	movs	r3, #10
 800701c:	e1db      	b.n	80073d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007022:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007024:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007026:	f7ff ff3f 	bl	8006ea8 <check_fs>
 800702a:	4603      	mov	r3, r0
 800702c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007030:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007034:	2b02      	cmp	r3, #2
 8007036:	d149      	bne.n	80070cc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007038:	2300      	movs	r3, #0
 800703a:	643b      	str	r3, [r7, #64]	@ 0x40
 800703c:	e01e      	b.n	800707c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800703e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007040:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800704c:	4413      	add	r3, r2
 800704e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007052:	3304      	adds	r3, #4
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d006      	beq.n	8007068 <find_volume+0x114>
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	3308      	adds	r3, #8
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fd76 	bl	8005b50 <ld_dword>
 8007064:	4602      	mov	r2, r0
 8007066:	e000      	b.n	800706a <find_volume+0x116>
 8007068:	2200      	movs	r2, #0
 800706a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	3358      	adds	r3, #88	@ 0x58
 8007070:	443b      	add	r3, r7
 8007072:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007078:	3301      	adds	r3, #1
 800707a:	643b      	str	r3, [r7, #64]	@ 0x40
 800707c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800707e:	2b03      	cmp	r3, #3
 8007080:	d9dd      	bls.n	800703e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007082:	2300      	movs	r3, #0
 8007084:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <find_volume+0x13e>
 800708c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800708e:	3b01      	subs	r3, #1
 8007090:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	3358      	adds	r3, #88	@ 0x58
 8007098:	443b      	add	r3, r7
 800709a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800709e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <find_volume+0x15e>
 80070a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070aa:	f7ff fefd 	bl	8006ea8 <check_fs>
 80070ae:	4603      	mov	r3, r0
 80070b0:	e000      	b.n	80070b4 <find_volume+0x160>
 80070b2:	2303      	movs	r3, #3
 80070b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80070b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d905      	bls.n	80070cc <find_volume+0x178>
 80070c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c2:	3301      	adds	r3, #1
 80070c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80070c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d9e2      	bls.n	8007092 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80070cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d101      	bne.n	80070d8 <find_volume+0x184>
 80070d4:	2301      	movs	r3, #1
 80070d6:	e17e      	b.n	80073d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80070d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d901      	bls.n	80070e4 <find_volume+0x190>
 80070e0:	230d      	movs	r3, #13
 80070e2:	e178      	b.n	80073d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	3330      	adds	r3, #48	@ 0x30
 80070e8:	330b      	adds	r3, #11
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe fd18 	bl	8005b20 <ld_word>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070f6:	d001      	beq.n	80070fc <find_volume+0x1a8>
 80070f8:	230d      	movs	r3, #13
 80070fa:	e16c      	b.n	80073d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	3330      	adds	r3, #48	@ 0x30
 8007100:	3316      	adds	r3, #22
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe fd0c 	bl	8005b20 <ld_word>
 8007108:	4603      	mov	r3, r0
 800710a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800710c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <find_volume+0x1cc>
 8007112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007114:	3330      	adds	r3, #48	@ 0x30
 8007116:	3324      	adds	r3, #36	@ 0x24
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fd19 	bl	8005b50 <ld_dword>
 800711e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007124:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007128:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800712c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007132:	789b      	ldrb	r3, [r3, #2]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d005      	beq.n	8007144 <find_volume+0x1f0>
 8007138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713a:	789b      	ldrb	r3, [r3, #2]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d001      	beq.n	8007144 <find_volume+0x1f0>
 8007140:	230d      	movs	r3, #13
 8007142:	e148      	b.n	80073d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007146:	789b      	ldrb	r3, [r3, #2]
 8007148:	461a      	mov	r2, r3
 800714a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800714c:	fb02 f303 	mul.w	r3, r2, r3
 8007150:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007158:	461a      	mov	r2, r3
 800715a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800715e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007160:	895b      	ldrh	r3, [r3, #10]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d008      	beq.n	8007178 <find_volume+0x224>
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	895b      	ldrh	r3, [r3, #10]
 800716a:	461a      	mov	r2, r3
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	895b      	ldrh	r3, [r3, #10]
 8007170:	3b01      	subs	r3, #1
 8007172:	4013      	ands	r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <find_volume+0x228>
 8007178:	230d      	movs	r3, #13
 800717a:	e12c      	b.n	80073d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800717c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717e:	3330      	adds	r3, #48	@ 0x30
 8007180:	3311      	adds	r3, #17
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fccc 	bl	8005b20 <ld_word>
 8007188:	4603      	mov	r3, r0
 800718a:	461a      	mov	r2, r3
 800718c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007192:	891b      	ldrh	r3, [r3, #8]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	b29b      	uxth	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <find_volume+0x24e>
 800719e:	230d      	movs	r3, #13
 80071a0:	e119      	b.n	80073d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80071a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a4:	3330      	adds	r3, #48	@ 0x30
 80071a6:	3313      	adds	r3, #19
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fe fcb9 	bl	8005b20 <ld_word>
 80071ae:	4603      	mov	r3, r0
 80071b0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80071b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <find_volume+0x272>
 80071b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ba:	3330      	adds	r3, #48	@ 0x30
 80071bc:	3320      	adds	r3, #32
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe fcc6 	bl	8005b50 <ld_dword>
 80071c4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c8:	3330      	adds	r3, #48	@ 0x30
 80071ca:	330e      	adds	r3, #14
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fca7 	bl	8005b20 <ld_word>
 80071d2:	4603      	mov	r3, r0
 80071d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80071d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <find_volume+0x28c>
 80071dc:	230d      	movs	r3, #13
 80071de:	e0fa      	b.n	80073d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80071e0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80071e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071e4:	4413      	add	r3, r2
 80071e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071e8:	8912      	ldrh	r2, [r2, #8]
 80071ea:	0912      	lsrs	r2, r2, #4
 80071ec:	b292      	uxth	r2, r2
 80071ee:	4413      	add	r3, r2
 80071f0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80071f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d204      	bcs.n	8007204 <find_volume+0x2b0>
 80071fa:	230d      	movs	r3, #13
 80071fc:	e0eb      	b.n	80073d6 <find_volume+0x482>
 80071fe:	bf00      	nop
 8007200:	2000096c 	.word	0x2000096c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800720c:	8952      	ldrh	r2, [r2, #10]
 800720e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <find_volume+0x2ca>
 800721a:	230d      	movs	r3, #13
 800721c:	e0db      	b.n	80073d6 <find_volume+0x482>
		fmt = FS_FAT32;
 800721e:	2303      	movs	r3, #3
 8007220:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800722a:	4293      	cmp	r3, r2
 800722c:	d802      	bhi.n	8007234 <find_volume+0x2e0>
 800722e:	2302      	movs	r3, #2
 8007230:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007236:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800723a:	4293      	cmp	r3, r2
 800723c:	d802      	bhi.n	8007244 <find_volume+0x2f0>
 800723e:	2301      	movs	r3, #1
 8007240:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	1c9a      	adds	r2, r3, #2
 8007248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007250:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007252:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007256:	441a      	add	r2, r3
 8007258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800725c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	441a      	add	r2, r3
 8007262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007264:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007266:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800726a:	2b03      	cmp	r3, #3
 800726c:	d11e      	bne.n	80072ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800726e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007270:	3330      	adds	r3, #48	@ 0x30
 8007272:	332a      	adds	r3, #42	@ 0x2a
 8007274:	4618      	mov	r0, r3
 8007276:	f7fe fc53 	bl	8005b20 <ld_word>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <find_volume+0x330>
 8007280:	230d      	movs	r3, #13
 8007282:	e0a8      	b.n	80073d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007286:	891b      	ldrh	r3, [r3, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <find_volume+0x33c>
 800728c:	230d      	movs	r3, #13
 800728e:	e0a2      	b.n	80073d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007292:	3330      	adds	r3, #48	@ 0x30
 8007294:	332c      	adds	r3, #44	@ 0x2c
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe fc5a 	bl	8005b50 <ld_dword>
 800729c:	4602      	mov	r2, r0
 800729e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80072a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072aa:	e01f      	b.n	80072ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	891b      	ldrh	r3, [r3, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <find_volume+0x364>
 80072b4:	230d      	movs	r3, #13
 80072b6:	e08e      	b.n	80073d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80072b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ba:	6a1a      	ldr	r2, [r3, #32]
 80072bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072be:	441a      	add	r2, r3
 80072c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d103      	bne.n	80072d4 <find_volume+0x380>
 80072cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	e00a      	b.n	80072ea <find_volume+0x396>
 80072d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d6:	695a      	ldr	r2, [r3, #20]
 80072d8:	4613      	mov	r3, r2
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	4413      	add	r3, r2
 80072de:	085a      	lsrs	r2, r3, #1
 80072e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80072ea:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80072ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ee:	699a      	ldr	r2, [r3, #24]
 80072f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072f2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80072f6:	0a5b      	lsrs	r3, r3, #9
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d201      	bcs.n	8007300 <find_volume+0x3ac>
 80072fc:	230d      	movs	r3, #13
 80072fe:	e06a      	b.n	80073d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007302:	f04f 32ff 	mov.w	r2, #4294967295
 8007306:	611a      	str	r2, [r3, #16]
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	2280      	movs	r2, #128	@ 0x80
 8007314:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007316:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800731a:	2b03      	cmp	r3, #3
 800731c:	d149      	bne.n	80073b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007320:	3330      	adds	r3, #48	@ 0x30
 8007322:	3330      	adds	r3, #48	@ 0x30
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe fbfb 	bl	8005b20 <ld_word>
 800732a:	4603      	mov	r3, r0
 800732c:	2b01      	cmp	r3, #1
 800732e:	d140      	bne.n	80073b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007332:	3301      	adds	r3, #1
 8007334:	4619      	mov	r1, r3
 8007336:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007338:	f7fe fea2 	bl	8006080 <move_window>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d137      	bne.n	80073b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007344:	2200      	movs	r2, #0
 8007346:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734a:	3330      	adds	r3, #48	@ 0x30
 800734c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007350:	4618      	mov	r0, r3
 8007352:	f7fe fbe5 	bl	8005b20 <ld_word>
 8007356:	4603      	mov	r3, r0
 8007358:	461a      	mov	r2, r3
 800735a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800735e:	429a      	cmp	r2, r3
 8007360:	d127      	bne.n	80073b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007364:	3330      	adds	r3, #48	@ 0x30
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fbf2 	bl	8005b50 <ld_dword>
 800736c:	4603      	mov	r3, r0
 800736e:	4a1c      	ldr	r2, [pc, #112]	@ (80073e0 <find_volume+0x48c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d11e      	bne.n	80073b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007376:	3330      	adds	r3, #48	@ 0x30
 8007378:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fbe7 	bl	8005b50 <ld_dword>
 8007382:	4603      	mov	r3, r0
 8007384:	4a17      	ldr	r2, [pc, #92]	@ (80073e4 <find_volume+0x490>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d113      	bne.n	80073b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800738a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738c:	3330      	adds	r3, #48	@ 0x30
 800738e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fbdc 	bl	8005b50 <ld_dword>
 8007398:	4602      	mov	r2, r0
 800739a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800739e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a0:	3330      	adds	r3, #48	@ 0x30
 80073a2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fbd2 	bl	8005b50 <ld_dword>
 80073ac:	4602      	mov	r2, r0
 80073ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80073b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80073b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073ba:	4b0b      	ldr	r3, [pc, #44]	@ (80073e8 <find_volume+0x494>)
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	3301      	adds	r3, #1
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	4b09      	ldr	r3, [pc, #36]	@ (80073e8 <find_volume+0x494>)
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	4b08      	ldr	r3, [pc, #32]	@ (80073e8 <find_volume+0x494>)
 80073c8:	881a      	ldrh	r2, [r3, #0]
 80073ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80073ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073d0:	f7fe fdee 	bl	8005fb0 <clear_lock>
#endif
	return FR_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3758      	adds	r7, #88	@ 0x58
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	41615252 	.word	0x41615252
 80073e4:	61417272 	.word	0x61417272
 80073e8:	20000970 	.word	0x20000970

080073ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80073f6:	2309      	movs	r3, #9
 80073f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01c      	beq.n	800743a <validate+0x4e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d018      	beq.n	800743a <validate+0x4e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d013      	beq.n	800743a <validate+0x4e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	889a      	ldrh	r2, [r3, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	88db      	ldrh	r3, [r3, #6]
 800741c:	429a      	cmp	r2, r3
 800741e:	d10c      	bne.n	800743a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fada 	bl	80059e0 <disk_status>
 800742c:	4603      	mov	r3, r0
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <validate+0x4e>
			res = FR_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <validate+0x5a>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	e000      	b.n	8007448 <validate+0x5c>
 8007446:	2300      	movs	r3, #0
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	6013      	str	r3, [r2, #0]
	return res;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	4613      	mov	r3, r2
 8007464:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800746a:	f107 0310 	add.w	r3, r7, #16
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fcd5 	bl	8006e1e <get_ldnumber>
 8007474:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	da01      	bge.n	8007480 <f_mount+0x28>
 800747c:	230b      	movs	r3, #11
 800747e:	e02b      	b.n	80074d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007480:	4a17      	ldr	r2, [pc, #92]	@ (80074e0 <f_mount+0x88>)
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007488:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007490:	69b8      	ldr	r0, [r7, #24]
 8007492:	f7fe fd8d 	bl	8005fb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	490d      	ldr	r1, [pc, #52]	@ (80074e0 <f_mount+0x88>)
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <f_mount+0x66>
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d001      	beq.n	80074c2 <f_mount+0x6a>
 80074be:	2300      	movs	r3, #0
 80074c0:	e00a      	b.n	80074d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80074c2:	f107 010c 	add.w	r1, r7, #12
 80074c6:	f107 0308 	add.w	r3, r7, #8
 80074ca:	2200      	movs	r2, #0
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fd41 	bl	8006f54 <find_volume>
 80074d2:	4603      	mov	r3, r0
 80074d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3720      	adds	r7, #32
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	2000096c 	.word	0x2000096c

080074e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b098      	sub	sp, #96	@ 0x60
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	4613      	mov	r3, r2
 80074f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <f_open+0x18>
 80074f8:	2309      	movs	r3, #9
 80074fa:	e1a9      	b.n	8007850 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007502:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007504:	79fa      	ldrb	r2, [r7, #7]
 8007506:	f107 0110 	add.w	r1, r7, #16
 800750a:	f107 0308 	add.w	r3, r7, #8
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff fd20 	bl	8006f54 <find_volume>
 8007514:	4603      	mov	r3, r0
 8007516:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800751a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800751e:	2b00      	cmp	r3, #0
 8007520:	f040 818d 	bne.w	800783e <f_open+0x35a>
		dj.obj.fs = fs;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	f107 0314 	add.w	r3, r7, #20
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff fc03 	bl	8006d3c <follow_path>
 8007536:	4603      	mov	r3, r0
 8007538:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800753c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007540:	2b00      	cmp	r3, #0
 8007542:	d118      	bne.n	8007576 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007544:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007548:	b25b      	sxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	da03      	bge.n	8007556 <f_open+0x72>
				res = FR_INVALID_NAME;
 800754e:	2306      	movs	r3, #6
 8007550:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007554:	e00f      	b.n	8007576 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	2b01      	cmp	r3, #1
 800755a:	bf8c      	ite	hi
 800755c:	2301      	movhi	r3, #1
 800755e:	2300      	movls	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	461a      	mov	r2, r3
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe fbd8 	bl	8005d20 <chk_lock>
 8007570:	4603      	mov	r3, r0
 8007572:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	f003 031c 	and.w	r3, r3, #28
 800757c:	2b00      	cmp	r3, #0
 800757e:	d07f      	beq.n	8007680 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007580:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007584:	2b00      	cmp	r3, #0
 8007586:	d017      	beq.n	80075b8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007588:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800758c:	2b04      	cmp	r3, #4
 800758e:	d10e      	bne.n	80075ae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007590:	f7fe fc22 	bl	8005dd8 <enq_lock>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d006      	beq.n	80075a8 <f_open+0xc4>
 800759a:	f107 0314 	add.w	r3, r7, #20
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fb06 	bl	8006bb0 <dir_register>
 80075a4:	4603      	mov	r3, r0
 80075a6:	e000      	b.n	80075aa <f_open+0xc6>
 80075a8:	2312      	movs	r3, #18
 80075aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	f043 0308 	orr.w	r3, r3, #8
 80075b4:	71fb      	strb	r3, [r7, #7]
 80075b6:	e010      	b.n	80075da <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80075b8:	7ebb      	ldrb	r3, [r7, #26]
 80075ba:	f003 0311 	and.w	r3, r3, #17
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <f_open+0xe6>
					res = FR_DENIED;
 80075c2:	2307      	movs	r3, #7
 80075c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80075c8:	e007      	b.n	80075da <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <f_open+0xf6>
 80075d4:	2308      	movs	r3, #8
 80075d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80075da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d168      	bne.n	80076b4 <f_open+0x1d0>
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d063      	beq.n	80076b4 <f_open+0x1d0>
				dw = GET_FATTIME();
 80075ec:	f7fd fcc0 	bl	8004f70 <get_fattime>
 80075f0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80075f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f4:	330e      	adds	r3, #14
 80075f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fae7 	bl	8005bcc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80075fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007600:	3316      	adds	r3, #22
 8007602:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fae1 	bl	8005bcc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800760a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760c:	330b      	adds	r3, #11
 800760e:	2220      	movs	r2, #32
 8007610:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007616:	4611      	mov	r1, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fa35 	bl	8006a88 <ld_clust>
 800761e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007624:	2200      	movs	r2, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff fa4d 	bl	8006ac6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800762c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762e:	331c      	adds	r3, #28
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe faca 	bl	8005bcc <st_dword>
					fs->wflag = 1;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2201      	movs	r2, #1
 800763c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800763e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d037      	beq.n	80076b4 <f_open+0x1d0>
						dw = fs->winsect;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007648:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800764a:	f107 0314 	add.w	r3, r7, #20
 800764e:	2200      	movs	r2, #0
 8007650:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe ff60 	bl	8006518 <remove_chain>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800765e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007662:	2b00      	cmp	r3, #0
 8007664:	d126      	bne.n	80076b4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fd08 	bl	8006080 <move_window>
 8007670:	4603      	mov	r3, r0
 8007672:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800767a:	3a01      	subs	r2, #1
 800767c:	60da      	str	r2, [r3, #12]
 800767e:	e019      	b.n	80076b4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007680:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007684:	2b00      	cmp	r3, #0
 8007686:	d115      	bne.n	80076b4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007688:	7ebb      	ldrb	r3, [r7, #26]
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <f_open+0x1b6>
					res = FR_NO_FILE;
 8007692:	2304      	movs	r3, #4
 8007694:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007698:	e00c      	b.n	80076b4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d007      	beq.n	80076b4 <f_open+0x1d0>
 80076a4:	7ebb      	ldrb	r3, [r7, #26]
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <f_open+0x1d0>
						res = FR_DENIED;
 80076ae:	2307      	movs	r3, #7
 80076b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80076b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d126      	bne.n	800770a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80076d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80076dc:	79fb      	ldrb	r3, [r7, #7]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	bf8c      	ite	hi
 80076e2:	2301      	movhi	r3, #1
 80076e4:	2300      	movls	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	f107 0314 	add.w	r3, r7, #20
 80076ee:	4611      	mov	r1, r2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe fb93 	bl	8005e1c <inc_lock>
 80076f6:	4602      	mov	r2, r0
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <f_open+0x226>
 8007704:	2302      	movs	r3, #2
 8007706:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800770a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800770e:	2b00      	cmp	r3, #0
 8007710:	f040 8095 	bne.w	800783e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff f9b4 	bl	8006a88 <ld_clust>
 8007720:	4602      	mov	r2, r0
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007728:	331c      	adds	r3, #28
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fa10 	bl	8005b50 <ld_dword>
 8007730:	4602      	mov	r2, r0
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	88da      	ldrh	r2, [r3, #6]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	79fa      	ldrb	r2, [r7, #7]
 800774e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3330      	adds	r3, #48	@ 0x30
 8007766:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800776a:	2100      	movs	r1, #0
 800776c:	4618      	mov	r0, r3
 800776e:	f7fe fa7a 	bl	8005c66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d060      	beq.n	800783e <f_open+0x35a>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d05c      	beq.n	800783e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	895b      	ldrh	r3, [r3, #10]
 8007790:	025b      	lsls	r3, r3, #9
 8007792:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	657b      	str	r3, [r7, #84]	@ 0x54
 80077a0:	e016      	b.n	80077d0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe fd25 	bl	80061f6 <get_fat>
 80077ac:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80077ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d802      	bhi.n	80077ba <f_open+0x2d6>
 80077b4:	2302      	movs	r3, #2
 80077b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80077ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c0:	d102      	bne.n	80077c8 <f_open+0x2e4>
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80077d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d103      	bne.n	80077e0 <f_open+0x2fc>
 80077d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077dc:	429a      	cmp	r2, r3
 80077de:	d8e0      	bhi.n	80077a2 <f_open+0x2be>
				}
				fp->clust = clst;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80077e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d127      	bne.n	800783e <f_open+0x35a>
 80077ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d022      	beq.n	800783e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fe fcdb 	bl	80061b8 <clust2sect>
 8007802:	6478      	str	r0, [r7, #68]	@ 0x44
 8007804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <f_open+0x32e>
						res = FR_INT_ERR;
 800780a:	2302      	movs	r3, #2
 800780c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007810:	e015      	b.n	800783e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007814:	0a5a      	lsrs	r2, r3, #9
 8007816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007818:	441a      	add	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	7858      	ldrb	r0, [r3, #1]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1a      	ldr	r2, [r3, #32]
 800782c:	2301      	movs	r3, #1
 800782e:	f7fe f919 	bl	8005a64 <disk_read>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <f_open+0x35a>
 8007838:	2301      	movs	r3, #1
 800783a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800783e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <f_open+0x368>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800784c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007850:	4618      	mov	r0, r3
 8007852:	3760      	adds	r7, #96	@ 0x60
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08c      	sub	sp, #48	@ 0x30
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f107 0210 	add.w	r2, r7, #16
 8007876:	4611      	mov	r1, r2
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fdb7 	bl	80073ec <validate>
 800787e:	4603      	mov	r3, r0
 8007880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007888:	2b00      	cmp	r3, #0
 800788a:	d107      	bne.n	800789c <f_write+0x44>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	7d5b      	ldrb	r3, [r3, #21]
 8007890:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007894:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <f_write+0x4a>
 800789c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078a0:	e14b      	b.n	8007b3a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	7d1b      	ldrb	r3, [r3, #20]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <f_write+0x5a>
 80078ae:	2307      	movs	r3, #7
 80078b0:	e143      	b.n	8007b3a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	441a      	add	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	429a      	cmp	r2, r3
 80078c0:	f080 812d 	bcs.w	8007b1e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	43db      	mvns	r3, r3
 80078ca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80078cc:	e127      	b.n	8007b1e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f040 80e3 	bne.w	8007aa2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	0a5b      	lsrs	r3, r3, #9
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	8952      	ldrh	r2, [r2, #10]
 80078e6:	3a01      	subs	r2, #1
 80078e8:	4013      	ands	r3, r2
 80078ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d143      	bne.n	800797a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10c      	bne.n	8007914 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	2b00      	cmp	r3, #0
 8007904:	d11a      	bne.n	800793c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2100      	movs	r1, #0
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe fe69 	bl	80065e2 <create_chain>
 8007910:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007912:	e013      	b.n	800793c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	4619      	mov	r1, r3
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7fe fef5 	bl	8006712 <clmt_clust>
 8007928:	62b8      	str	r0, [r7, #40]	@ 0x28
 800792a:	e007      	b.n	800793c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	4619      	mov	r1, r3
 8007934:	4610      	mov	r0, r2
 8007936:	f7fe fe54 	bl	80065e2 <create_chain>
 800793a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80f2 	beq.w	8007b28 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007946:	2b01      	cmp	r3, #1
 8007948:	d104      	bne.n	8007954 <f_write+0xfc>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2202      	movs	r2, #2
 800794e:	755a      	strb	r2, [r3, #21]
 8007950:	2302      	movs	r3, #2
 8007952:	e0f2      	b.n	8007b3a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795a:	d104      	bne.n	8007966 <f_write+0x10e>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	755a      	strb	r2, [r3, #21]
 8007962:	2301      	movs	r3, #1
 8007964:	e0e9      	b.n	8007b3a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800796a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <f_write+0x122>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007978:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	7d1b      	ldrb	r3, [r3, #20]
 800797e:	b25b      	sxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	da18      	bge.n	80079b6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	7858      	ldrb	r0, [r3, #1]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1a      	ldr	r2, [r3, #32]
 8007992:	2301      	movs	r3, #1
 8007994:	f7fe f886 	bl	8005aa4 <disk_write>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d004      	beq.n	80079a8 <f_write+0x150>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	755a      	strb	r2, [r3, #21]
 80079a4:	2301      	movs	r3, #1
 80079a6:	e0c8      	b.n	8007b3a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	7d1b      	ldrb	r3, [r3, #20]
 80079ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	4619      	mov	r1, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	f7fe fbfa 	bl	80061b8 <clust2sect>
 80079c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d104      	bne.n	80079d6 <f_write+0x17e>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2202      	movs	r2, #2
 80079d0:	755a      	strb	r2, [r3, #21]
 80079d2:	2302      	movs	r3, #2
 80079d4:	e0b1      	b.n	8007b3a <f_write+0x2e2>
			sect += csect;
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	4413      	add	r3, r2
 80079dc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	0a5b      	lsrs	r3, r3, #9
 80079e2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d03c      	beq.n	8007a64 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	4413      	add	r3, r2
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	8952      	ldrh	r2, [r2, #10]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d905      	bls.n	8007a04 <f_write+0x1ac>
					cc = fs->csize - csect;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	895b      	ldrh	r3, [r3, #10]
 80079fc:	461a      	mov	r2, r3
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	7858      	ldrb	r0, [r3, #1]
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	69f9      	ldr	r1, [r7, #28]
 8007a0e:	f7fe f849 	bl	8005aa4 <disk_write>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <f_write+0x1ca>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	755a      	strb	r2, [r3, #21]
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e08b      	b.n	8007b3a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	6a3a      	ldr	r2, [r7, #32]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d915      	bls.n	8007a5c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a1a      	ldr	r2, [r3, #32]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	025b      	lsls	r3, r3, #9
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	4413      	add	r3, r2
 8007a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f7fe f8eb 	bl	8005c24 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	7d1b      	ldrb	r3, [r3, #20]
 8007a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	025b      	lsls	r3, r3, #9
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007a62:	e03f      	b.n	8007ae4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d016      	beq.n	8007a9c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d210      	bcs.n	8007a9c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	7858      	ldrb	r0, [r3, #1]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a84:	2301      	movs	r3, #1
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	f7fd ffec 	bl	8005a64 <disk_read>
 8007a8c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	755a      	strb	r2, [r3, #21]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e04e      	b.n	8007b3a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aaa:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d901      	bls.n	8007abc <f_write+0x264>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aca:	4413      	add	r3, r2
 8007acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ace:	69f9      	ldr	r1, [r7, #28]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe f8a7 	bl	8005c24 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	7d1b      	ldrb	r3, [r3, #20]
 8007ada:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007ae4:	69fa      	ldr	r2, [r7, #28]
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	4413      	add	r3, r2
 8007aea:	61fb      	str	r3, [r7, #28]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	699a      	ldr	r2, [r3, #24]
 8007af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af2:	441a      	add	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	619a      	str	r2, [r3, #24]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	bf38      	it	cc
 8007b04:	461a      	movcc	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	60da      	str	r2, [r3, #12]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	441a      	add	r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f47f aed4 	bne.w	80078ce <f_write+0x76>
 8007b26:	e000      	b.n	8007b2a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b28:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	7d1b      	ldrb	r3, [r3, #20]
 8007b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3730      	adds	r7, #48	@ 0x30
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b086      	sub	sp, #24
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f107 0208 	add.w	r2, r7, #8
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7ff fc4a 	bl	80073ec <validate>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d168      	bne.n	8007c34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	7d1b      	ldrb	r3, [r3, #20]
 8007b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d062      	beq.n	8007c34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	7d1b      	ldrb	r3, [r3, #20]
 8007b72:	b25b      	sxtb	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da15      	bge.n	8007ba4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	7858      	ldrb	r0, [r3, #1]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1a      	ldr	r2, [r3, #32]
 8007b86:	2301      	movs	r3, #1
 8007b88:	f7fd ff8c 	bl	8005aa4 <disk_write>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <f_sync+0x54>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e04f      	b.n	8007c36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	7d1b      	ldrb	r3, [r3, #20]
 8007b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007ba4:	f7fd f9e4 	bl	8004f70 <get_fattime>
 8007ba8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	f7fe fa64 	bl	8006080 <move_window>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d138      	bne.n	8007c34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	330b      	adds	r3, #11
 8007bcc:	781a      	ldrb	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	330b      	adds	r3, #11
 8007bd2:	f042 0220 	orr.w	r2, r2, #32
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	461a      	mov	r2, r3
 8007be4:	68f9      	ldr	r1, [r7, #12]
 8007be6:	f7fe ff6e 	bl	8006ac6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f103 021c 	add.w	r2, r3, #28
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	f7fd ffe8 	bl	8005bcc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3316      	adds	r3, #22
 8007c00:	6939      	ldr	r1, [r7, #16]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fd ffe2 	bl	8005bcc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3312      	adds	r3, #18
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fd ffc1 	bl	8005b96 <st_word>
					fs->wflag = 1;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2201      	movs	r2, #1
 8007c18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe fa5d 	bl	80060dc <sync_fs>
 8007c22:	4603      	mov	r3, r0
 8007c24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	7d1b      	ldrb	r3, [r3, #20]
 8007c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff ff7b 	bl	8007b42 <f_sync>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d118      	bne.n	8007c88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f107 0208 	add.w	r2, r7, #8
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff fbc4 	bl	80073ec <validate>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10c      	bne.n	8007c88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe f960 	bl	8005f38 <dec_lock>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b092      	sub	sp, #72	@ 0x48
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007c9e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007ca2:	f107 030c 	add.w	r3, r7, #12
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff f953 	bl	8006f54 <find_volume>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8007cb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f040 8099 	bne.w	8007df0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	3b02      	subs	r3, #2
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d804      	bhi.n	8007cdc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd4:	691a      	ldr	r2, [r3, #16]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	e089      	b.n	8007df0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d128      	bne.n	8007d3a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cee:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007cf0:	f107 0314 	add.w	r3, r7, #20
 8007cf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fa7d 	bl	80061f6 <get_fat>
 8007cfc:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d103      	bne.n	8007d0e <f_getfree+0x7c>
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007d0c:	e063      	b.n	8007dd6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d103      	bne.n	8007d1c <f_getfree+0x8a>
 8007d14:	2302      	movs	r3, #2
 8007d16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007d1a:	e05c      	b.n	8007dd6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d102      	bne.n	8007d28 <f_getfree+0x96>
 8007d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d24:	3301      	adds	r3, #1
 8007d26:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8007d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d3db      	bcc.n	8007cf0 <f_getfree+0x5e>
 8007d38:	e04d      	b.n	8007dd6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d113      	bne.n	8007d7c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007d54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f7fe f98f 	bl	8006080 <move_window>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007d68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d131      	bne.n	8007dd4 <f_getfree+0x142>
							p = fs->win;
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	3330      	adds	r3, #48	@ 0x30
 8007d74:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8007d76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d7a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d10f      	bne.n	8007da4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d86:	f7fd fecb 	bl	8005b20 <ld_word>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <f_getfree+0x104>
 8007d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d92:	3301      	adds	r3, #1
 8007d94:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	3302      	adds	r3, #2
 8007d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9e:	3b02      	subs	r3, #2
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da2:	e010      	b.n	8007dc6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007da4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007da6:	f7fd fed3 	bl	8005b50 <ld_dword>
 8007daa:	4603      	mov	r3, r0
 8007dac:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <f_getfree+0x128>
 8007db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007db6:	3301      	adds	r3, #1
 8007db8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc2:	3b04      	subs	r3, #4
 8007dc4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8007dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1bd      	bne.n	8007d4e <f_getfree+0xbc>
 8007dd2:	e000      	b.n	8007dd6 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007dd4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dda:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007de0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de4:	791a      	ldrb	r2, [r3, #4]
 8007de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de8:	f042 0201 	orr.w	r2, r2, #1
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007df0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3748      	adds	r7, #72	@ 0x48
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	4613      	mov	r3, r2
 8007e08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007e12:	4b1f      	ldr	r3, [pc, #124]	@ (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e14:	7a5b      	ldrb	r3, [r3, #9]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d131      	bne.n	8007e80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e1e:	7a5b      	ldrb	r3, [r3, #9]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	4b1a      	ldr	r3, [pc, #104]	@ (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e26:	2100      	movs	r1, #0
 8007e28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e2a:	4b19      	ldr	r3, [pc, #100]	@ (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e2c:	7a5b      	ldrb	r3, [r3, #9]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	4a17      	ldr	r2, [pc, #92]	@ (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e3a:	4b15      	ldr	r3, [pc, #84]	@ (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e3c:	7a5b      	ldrb	r3, [r3, #9]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	4b13      	ldr	r3, [pc, #76]	@ (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e44:	4413      	add	r3, r2
 8007e46:	79fa      	ldrb	r2, [r7, #7]
 8007e48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e4a:	4b11      	ldr	r3, [pc, #68]	@ (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e4c:	7a5b      	ldrb	r3, [r3, #9]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	b2d1      	uxtb	r1, r2
 8007e54:	4a0e      	ldr	r2, [pc, #56]	@ (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e56:	7251      	strb	r1, [r2, #9]
 8007e58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e5a:	7dbb      	ldrb	r3, [r7, #22]
 8007e5c:	3330      	adds	r3, #48	@ 0x30
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	3301      	adds	r3, #1
 8007e68:	223a      	movs	r2, #58	@ 0x3a
 8007e6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	222f      	movs	r2, #47	@ 0x2f
 8007e72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	3303      	adds	r3, #3
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20000994 	.word	0x20000994

08007e94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff ffaa 	bl	8007dfc <FATFS_LinkDriverEx>
 8007ea8:	4603      	mov	r3, r0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <atoi>:
 8007eb2:	220a      	movs	r2, #10
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	f000 b87b 	b.w	8007fb0 <strtol>
	...

08007ebc <_strtol_l.constprop.0>:
 8007ebc:	2b24      	cmp	r3, #36	@ 0x24
 8007ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec2:	4686      	mov	lr, r0
 8007ec4:	4690      	mov	r8, r2
 8007ec6:	d801      	bhi.n	8007ecc <_strtol_l.constprop.0+0x10>
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d106      	bne.n	8007eda <_strtol_l.constprop.0+0x1e>
 8007ecc:	f000 fe96 	bl	8008bfc <__errno>
 8007ed0:	2316      	movs	r3, #22
 8007ed2:	6003      	str	r3, [r0, #0]
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eda:	4834      	ldr	r0, [pc, #208]	@ (8007fac <_strtol_l.constprop.0+0xf0>)
 8007edc:	460d      	mov	r5, r1
 8007ede:	462a      	mov	r2, r5
 8007ee0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ee4:	5d06      	ldrb	r6, [r0, r4]
 8007ee6:	f016 0608 	ands.w	r6, r6, #8
 8007eea:	d1f8      	bne.n	8007ede <_strtol_l.constprop.0+0x22>
 8007eec:	2c2d      	cmp	r4, #45	@ 0x2d
 8007eee:	d12d      	bne.n	8007f4c <_strtol_l.constprop.0+0x90>
 8007ef0:	782c      	ldrb	r4, [r5, #0]
 8007ef2:	2601      	movs	r6, #1
 8007ef4:	1c95      	adds	r5, r2, #2
 8007ef6:	f033 0210 	bics.w	r2, r3, #16
 8007efa:	d109      	bne.n	8007f10 <_strtol_l.constprop.0+0x54>
 8007efc:	2c30      	cmp	r4, #48	@ 0x30
 8007efe:	d12a      	bne.n	8007f56 <_strtol_l.constprop.0+0x9a>
 8007f00:	782a      	ldrb	r2, [r5, #0]
 8007f02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f06:	2a58      	cmp	r2, #88	@ 0x58
 8007f08:	d125      	bne.n	8007f56 <_strtol_l.constprop.0+0x9a>
 8007f0a:	786c      	ldrb	r4, [r5, #1]
 8007f0c:	2310      	movs	r3, #16
 8007f0e:	3502      	adds	r5, #2
 8007f10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f18:	2200      	movs	r2, #0
 8007f1a:	fbbc f9f3 	udiv	r9, ip, r3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f28:	2f09      	cmp	r7, #9
 8007f2a:	d81b      	bhi.n	8007f64 <_strtol_l.constprop.0+0xa8>
 8007f2c:	463c      	mov	r4, r7
 8007f2e:	42a3      	cmp	r3, r4
 8007f30:	dd27      	ble.n	8007f82 <_strtol_l.constprop.0+0xc6>
 8007f32:	1c57      	adds	r7, r2, #1
 8007f34:	d007      	beq.n	8007f46 <_strtol_l.constprop.0+0x8a>
 8007f36:	4581      	cmp	r9, r0
 8007f38:	d320      	bcc.n	8007f7c <_strtol_l.constprop.0+0xc0>
 8007f3a:	d101      	bne.n	8007f40 <_strtol_l.constprop.0+0x84>
 8007f3c:	45a2      	cmp	sl, r4
 8007f3e:	db1d      	blt.n	8007f7c <_strtol_l.constprop.0+0xc0>
 8007f40:	fb00 4003 	mla	r0, r0, r3, r4
 8007f44:	2201      	movs	r2, #1
 8007f46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f4a:	e7eb      	b.n	8007f24 <_strtol_l.constprop.0+0x68>
 8007f4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f4e:	bf04      	itt	eq
 8007f50:	782c      	ldrbeq	r4, [r5, #0]
 8007f52:	1c95      	addeq	r5, r2, #2
 8007f54:	e7cf      	b.n	8007ef6 <_strtol_l.constprop.0+0x3a>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1da      	bne.n	8007f10 <_strtol_l.constprop.0+0x54>
 8007f5a:	2c30      	cmp	r4, #48	@ 0x30
 8007f5c:	bf0c      	ite	eq
 8007f5e:	2308      	moveq	r3, #8
 8007f60:	230a      	movne	r3, #10
 8007f62:	e7d5      	b.n	8007f10 <_strtol_l.constprop.0+0x54>
 8007f64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f68:	2f19      	cmp	r7, #25
 8007f6a:	d801      	bhi.n	8007f70 <_strtol_l.constprop.0+0xb4>
 8007f6c:	3c37      	subs	r4, #55	@ 0x37
 8007f6e:	e7de      	b.n	8007f2e <_strtol_l.constprop.0+0x72>
 8007f70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007f74:	2f19      	cmp	r7, #25
 8007f76:	d804      	bhi.n	8007f82 <_strtol_l.constprop.0+0xc6>
 8007f78:	3c57      	subs	r4, #87	@ 0x57
 8007f7a:	e7d8      	b.n	8007f2e <_strtol_l.constprop.0+0x72>
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f80:	e7e1      	b.n	8007f46 <_strtol_l.constprop.0+0x8a>
 8007f82:	1c53      	adds	r3, r2, #1
 8007f84:	d108      	bne.n	8007f98 <_strtol_l.constprop.0+0xdc>
 8007f86:	2322      	movs	r3, #34	@ 0x22
 8007f88:	f8ce 3000 	str.w	r3, [lr]
 8007f8c:	4660      	mov	r0, ip
 8007f8e:	f1b8 0f00 	cmp.w	r8, #0
 8007f92:	d0a0      	beq.n	8007ed6 <_strtol_l.constprop.0+0x1a>
 8007f94:	1e69      	subs	r1, r5, #1
 8007f96:	e006      	b.n	8007fa6 <_strtol_l.constprop.0+0xea>
 8007f98:	b106      	cbz	r6, 8007f9c <_strtol_l.constprop.0+0xe0>
 8007f9a:	4240      	negs	r0, r0
 8007f9c:	f1b8 0f00 	cmp.w	r8, #0
 8007fa0:	d099      	beq.n	8007ed6 <_strtol_l.constprop.0+0x1a>
 8007fa2:	2a00      	cmp	r2, #0
 8007fa4:	d1f6      	bne.n	8007f94 <_strtol_l.constprop.0+0xd8>
 8007fa6:	f8c8 1000 	str.w	r1, [r8]
 8007faa:	e794      	b.n	8007ed6 <_strtol_l.constprop.0+0x1a>
 8007fac:	0800bde5 	.word	0x0800bde5

08007fb0 <strtol>:
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	460a      	mov	r2, r1
 8007fb4:	4601      	mov	r1, r0
 8007fb6:	4802      	ldr	r0, [pc, #8]	@ (8007fc0 <strtol+0x10>)
 8007fb8:	6800      	ldr	r0, [r0, #0]
 8007fba:	f7ff bf7f 	b.w	8007ebc <_strtol_l.constprop.0>
 8007fbe:	bf00      	nop
 8007fc0:	20000038 	.word	0x20000038

08007fc4 <__cvt>:
 8007fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc8:	ec57 6b10 	vmov	r6, r7, d0
 8007fcc:	2f00      	cmp	r7, #0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	463b      	mov	r3, r7
 8007fd4:	bfbb      	ittet	lt
 8007fd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007fda:	461f      	movlt	r7, r3
 8007fdc:	2300      	movge	r3, #0
 8007fde:	232d      	movlt	r3, #45	@ 0x2d
 8007fe0:	700b      	strb	r3, [r1, #0]
 8007fe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fe4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007fe8:	4691      	mov	r9, r2
 8007fea:	f023 0820 	bic.w	r8, r3, #32
 8007fee:	bfbc      	itt	lt
 8007ff0:	4632      	movlt	r2, r6
 8007ff2:	4616      	movlt	r6, r2
 8007ff4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ff8:	d005      	beq.n	8008006 <__cvt+0x42>
 8007ffa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007ffe:	d100      	bne.n	8008002 <__cvt+0x3e>
 8008000:	3401      	adds	r4, #1
 8008002:	2102      	movs	r1, #2
 8008004:	e000      	b.n	8008008 <__cvt+0x44>
 8008006:	2103      	movs	r1, #3
 8008008:	ab03      	add	r3, sp, #12
 800800a:	9301      	str	r3, [sp, #4]
 800800c:	ab02      	add	r3, sp, #8
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	ec47 6b10 	vmov	d0, r6, r7
 8008014:	4653      	mov	r3, sl
 8008016:	4622      	mov	r2, r4
 8008018:	f000 fea6 	bl	8008d68 <_dtoa_r>
 800801c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008020:	4605      	mov	r5, r0
 8008022:	d119      	bne.n	8008058 <__cvt+0x94>
 8008024:	f019 0f01 	tst.w	r9, #1
 8008028:	d00e      	beq.n	8008048 <__cvt+0x84>
 800802a:	eb00 0904 	add.w	r9, r0, r4
 800802e:	2200      	movs	r2, #0
 8008030:	2300      	movs	r3, #0
 8008032:	4630      	mov	r0, r6
 8008034:	4639      	mov	r1, r7
 8008036:	f7f8 fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800803a:	b108      	cbz	r0, 8008040 <__cvt+0x7c>
 800803c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008040:	2230      	movs	r2, #48	@ 0x30
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	454b      	cmp	r3, r9
 8008046:	d31e      	bcc.n	8008086 <__cvt+0xc2>
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800804c:	1b5b      	subs	r3, r3, r5
 800804e:	4628      	mov	r0, r5
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	b004      	add	sp, #16
 8008054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008058:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800805c:	eb00 0904 	add.w	r9, r0, r4
 8008060:	d1e5      	bne.n	800802e <__cvt+0x6a>
 8008062:	7803      	ldrb	r3, [r0, #0]
 8008064:	2b30      	cmp	r3, #48	@ 0x30
 8008066:	d10a      	bne.n	800807e <__cvt+0xba>
 8008068:	2200      	movs	r2, #0
 800806a:	2300      	movs	r3, #0
 800806c:	4630      	mov	r0, r6
 800806e:	4639      	mov	r1, r7
 8008070:	f7f8 fd32 	bl	8000ad8 <__aeabi_dcmpeq>
 8008074:	b918      	cbnz	r0, 800807e <__cvt+0xba>
 8008076:	f1c4 0401 	rsb	r4, r4, #1
 800807a:	f8ca 4000 	str.w	r4, [sl]
 800807e:	f8da 3000 	ldr.w	r3, [sl]
 8008082:	4499      	add	r9, r3
 8008084:	e7d3      	b.n	800802e <__cvt+0x6a>
 8008086:	1c59      	adds	r1, r3, #1
 8008088:	9103      	str	r1, [sp, #12]
 800808a:	701a      	strb	r2, [r3, #0]
 800808c:	e7d9      	b.n	8008042 <__cvt+0x7e>

0800808e <__exponent>:
 800808e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008090:	2900      	cmp	r1, #0
 8008092:	bfba      	itte	lt
 8008094:	4249      	neglt	r1, r1
 8008096:	232d      	movlt	r3, #45	@ 0x2d
 8008098:	232b      	movge	r3, #43	@ 0x2b
 800809a:	2909      	cmp	r1, #9
 800809c:	7002      	strb	r2, [r0, #0]
 800809e:	7043      	strb	r3, [r0, #1]
 80080a0:	dd29      	ble.n	80080f6 <__exponent+0x68>
 80080a2:	f10d 0307 	add.w	r3, sp, #7
 80080a6:	461d      	mov	r5, r3
 80080a8:	270a      	movs	r7, #10
 80080aa:	461a      	mov	r2, r3
 80080ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80080b0:	fb07 1416 	mls	r4, r7, r6, r1
 80080b4:	3430      	adds	r4, #48	@ 0x30
 80080b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80080ba:	460c      	mov	r4, r1
 80080bc:	2c63      	cmp	r4, #99	@ 0x63
 80080be:	f103 33ff 	add.w	r3, r3, #4294967295
 80080c2:	4631      	mov	r1, r6
 80080c4:	dcf1      	bgt.n	80080aa <__exponent+0x1c>
 80080c6:	3130      	adds	r1, #48	@ 0x30
 80080c8:	1e94      	subs	r4, r2, #2
 80080ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80080ce:	1c41      	adds	r1, r0, #1
 80080d0:	4623      	mov	r3, r4
 80080d2:	42ab      	cmp	r3, r5
 80080d4:	d30a      	bcc.n	80080ec <__exponent+0x5e>
 80080d6:	f10d 0309 	add.w	r3, sp, #9
 80080da:	1a9b      	subs	r3, r3, r2
 80080dc:	42ac      	cmp	r4, r5
 80080de:	bf88      	it	hi
 80080e0:	2300      	movhi	r3, #0
 80080e2:	3302      	adds	r3, #2
 80080e4:	4403      	add	r3, r0
 80080e6:	1a18      	subs	r0, r3, r0
 80080e8:	b003      	add	sp, #12
 80080ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 80080f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80080f4:	e7ed      	b.n	80080d2 <__exponent+0x44>
 80080f6:	2330      	movs	r3, #48	@ 0x30
 80080f8:	3130      	adds	r1, #48	@ 0x30
 80080fa:	7083      	strb	r3, [r0, #2]
 80080fc:	70c1      	strb	r1, [r0, #3]
 80080fe:	1d03      	adds	r3, r0, #4
 8008100:	e7f1      	b.n	80080e6 <__exponent+0x58>
	...

08008104 <_printf_float>:
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	b08d      	sub	sp, #52	@ 0x34
 800810a:	460c      	mov	r4, r1
 800810c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008110:	4616      	mov	r6, r2
 8008112:	461f      	mov	r7, r3
 8008114:	4605      	mov	r5, r0
 8008116:	f000 fd27 	bl	8008b68 <_localeconv_r>
 800811a:	6803      	ldr	r3, [r0, #0]
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	4618      	mov	r0, r3
 8008120:	f7f8 f8ae 	bl	8000280 <strlen>
 8008124:	2300      	movs	r3, #0
 8008126:	930a      	str	r3, [sp, #40]	@ 0x28
 8008128:	f8d8 3000 	ldr.w	r3, [r8]
 800812c:	9005      	str	r0, [sp, #20]
 800812e:	3307      	adds	r3, #7
 8008130:	f023 0307 	bic.w	r3, r3, #7
 8008134:	f103 0208 	add.w	r2, r3, #8
 8008138:	f894 a018 	ldrb.w	sl, [r4, #24]
 800813c:	f8d4 b000 	ldr.w	fp, [r4]
 8008140:	f8c8 2000 	str.w	r2, [r8]
 8008144:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008148:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800814c:	9307      	str	r3, [sp, #28]
 800814e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008152:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800815a:	4b9c      	ldr	r3, [pc, #624]	@ (80083cc <_printf_float+0x2c8>)
 800815c:	f04f 32ff 	mov.w	r2, #4294967295
 8008160:	f7f8 fcec 	bl	8000b3c <__aeabi_dcmpun>
 8008164:	bb70      	cbnz	r0, 80081c4 <_printf_float+0xc0>
 8008166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800816a:	4b98      	ldr	r3, [pc, #608]	@ (80083cc <_printf_float+0x2c8>)
 800816c:	f04f 32ff 	mov.w	r2, #4294967295
 8008170:	f7f8 fcc6 	bl	8000b00 <__aeabi_dcmple>
 8008174:	bb30      	cbnz	r0, 80081c4 <_printf_float+0xc0>
 8008176:	2200      	movs	r2, #0
 8008178:	2300      	movs	r3, #0
 800817a:	4640      	mov	r0, r8
 800817c:	4649      	mov	r1, r9
 800817e:	f7f8 fcb5 	bl	8000aec <__aeabi_dcmplt>
 8008182:	b110      	cbz	r0, 800818a <_printf_float+0x86>
 8008184:	232d      	movs	r3, #45	@ 0x2d
 8008186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800818a:	4a91      	ldr	r2, [pc, #580]	@ (80083d0 <_printf_float+0x2cc>)
 800818c:	4b91      	ldr	r3, [pc, #580]	@ (80083d4 <_printf_float+0x2d0>)
 800818e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008192:	bf94      	ite	ls
 8008194:	4690      	movls	r8, r2
 8008196:	4698      	movhi	r8, r3
 8008198:	2303      	movs	r3, #3
 800819a:	6123      	str	r3, [r4, #16]
 800819c:	f02b 0304 	bic.w	r3, fp, #4
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	f04f 0900 	mov.w	r9, #0
 80081a6:	9700      	str	r7, [sp, #0]
 80081a8:	4633      	mov	r3, r6
 80081aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80081ac:	4621      	mov	r1, r4
 80081ae:	4628      	mov	r0, r5
 80081b0:	f000 f9d2 	bl	8008558 <_printf_common>
 80081b4:	3001      	adds	r0, #1
 80081b6:	f040 808d 	bne.w	80082d4 <_printf_float+0x1d0>
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295
 80081be:	b00d      	add	sp, #52	@ 0x34
 80081c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	4640      	mov	r0, r8
 80081ca:	4649      	mov	r1, r9
 80081cc:	f7f8 fcb6 	bl	8000b3c <__aeabi_dcmpun>
 80081d0:	b140      	cbz	r0, 80081e4 <_printf_float+0xe0>
 80081d2:	464b      	mov	r3, r9
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bfbc      	itt	lt
 80081d8:	232d      	movlt	r3, #45	@ 0x2d
 80081da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80081de:	4a7e      	ldr	r2, [pc, #504]	@ (80083d8 <_printf_float+0x2d4>)
 80081e0:	4b7e      	ldr	r3, [pc, #504]	@ (80083dc <_printf_float+0x2d8>)
 80081e2:	e7d4      	b.n	800818e <_printf_float+0x8a>
 80081e4:	6863      	ldr	r3, [r4, #4]
 80081e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80081ea:	9206      	str	r2, [sp, #24]
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	d13b      	bne.n	8008268 <_printf_float+0x164>
 80081f0:	2306      	movs	r3, #6
 80081f2:	6063      	str	r3, [r4, #4]
 80081f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80081f8:	2300      	movs	r3, #0
 80081fa:	6022      	str	r2, [r4, #0]
 80081fc:	9303      	str	r3, [sp, #12]
 80081fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8008200:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008204:	ab09      	add	r3, sp, #36	@ 0x24
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	6861      	ldr	r1, [r4, #4]
 800820a:	ec49 8b10 	vmov	d0, r8, r9
 800820e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008212:	4628      	mov	r0, r5
 8008214:	f7ff fed6 	bl	8007fc4 <__cvt>
 8008218:	9b06      	ldr	r3, [sp, #24]
 800821a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800821c:	2b47      	cmp	r3, #71	@ 0x47
 800821e:	4680      	mov	r8, r0
 8008220:	d129      	bne.n	8008276 <_printf_float+0x172>
 8008222:	1cc8      	adds	r0, r1, #3
 8008224:	db02      	blt.n	800822c <_printf_float+0x128>
 8008226:	6863      	ldr	r3, [r4, #4]
 8008228:	4299      	cmp	r1, r3
 800822a:	dd41      	ble.n	80082b0 <_printf_float+0x1ac>
 800822c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008230:	fa5f fa8a 	uxtb.w	sl, sl
 8008234:	3901      	subs	r1, #1
 8008236:	4652      	mov	r2, sl
 8008238:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800823c:	9109      	str	r1, [sp, #36]	@ 0x24
 800823e:	f7ff ff26 	bl	800808e <__exponent>
 8008242:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008244:	1813      	adds	r3, r2, r0
 8008246:	2a01      	cmp	r2, #1
 8008248:	4681      	mov	r9, r0
 800824a:	6123      	str	r3, [r4, #16]
 800824c:	dc02      	bgt.n	8008254 <_printf_float+0x150>
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	07d2      	lsls	r2, r2, #31
 8008252:	d501      	bpl.n	8008258 <_printf_float+0x154>
 8008254:	3301      	adds	r3, #1
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0a2      	beq.n	80081a6 <_printf_float+0xa2>
 8008260:	232d      	movs	r3, #45	@ 0x2d
 8008262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008266:	e79e      	b.n	80081a6 <_printf_float+0xa2>
 8008268:	9a06      	ldr	r2, [sp, #24]
 800826a:	2a47      	cmp	r2, #71	@ 0x47
 800826c:	d1c2      	bne.n	80081f4 <_printf_float+0xf0>
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1c0      	bne.n	80081f4 <_printf_float+0xf0>
 8008272:	2301      	movs	r3, #1
 8008274:	e7bd      	b.n	80081f2 <_printf_float+0xee>
 8008276:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800827a:	d9db      	bls.n	8008234 <_printf_float+0x130>
 800827c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008280:	d118      	bne.n	80082b4 <_printf_float+0x1b0>
 8008282:	2900      	cmp	r1, #0
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	dd0b      	ble.n	80082a0 <_printf_float+0x19c>
 8008288:	6121      	str	r1, [r4, #16]
 800828a:	b913      	cbnz	r3, 8008292 <_printf_float+0x18e>
 800828c:	6822      	ldr	r2, [r4, #0]
 800828e:	07d0      	lsls	r0, r2, #31
 8008290:	d502      	bpl.n	8008298 <_printf_float+0x194>
 8008292:	3301      	adds	r3, #1
 8008294:	440b      	add	r3, r1
 8008296:	6123      	str	r3, [r4, #16]
 8008298:	65a1      	str	r1, [r4, #88]	@ 0x58
 800829a:	f04f 0900 	mov.w	r9, #0
 800829e:	e7db      	b.n	8008258 <_printf_float+0x154>
 80082a0:	b913      	cbnz	r3, 80082a8 <_printf_float+0x1a4>
 80082a2:	6822      	ldr	r2, [r4, #0]
 80082a4:	07d2      	lsls	r2, r2, #31
 80082a6:	d501      	bpl.n	80082ac <_printf_float+0x1a8>
 80082a8:	3302      	adds	r3, #2
 80082aa:	e7f4      	b.n	8008296 <_printf_float+0x192>
 80082ac:	2301      	movs	r3, #1
 80082ae:	e7f2      	b.n	8008296 <_printf_float+0x192>
 80082b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80082b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082b6:	4299      	cmp	r1, r3
 80082b8:	db05      	blt.n	80082c6 <_printf_float+0x1c2>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	6121      	str	r1, [r4, #16]
 80082be:	07d8      	lsls	r0, r3, #31
 80082c0:	d5ea      	bpl.n	8008298 <_printf_float+0x194>
 80082c2:	1c4b      	adds	r3, r1, #1
 80082c4:	e7e7      	b.n	8008296 <_printf_float+0x192>
 80082c6:	2900      	cmp	r1, #0
 80082c8:	bfd4      	ite	le
 80082ca:	f1c1 0202 	rsble	r2, r1, #2
 80082ce:	2201      	movgt	r2, #1
 80082d0:	4413      	add	r3, r2
 80082d2:	e7e0      	b.n	8008296 <_printf_float+0x192>
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	055a      	lsls	r2, r3, #21
 80082d8:	d407      	bmi.n	80082ea <_printf_float+0x1e6>
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	4642      	mov	r2, r8
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	d12b      	bne.n	8008340 <_printf_float+0x23c>
 80082e8:	e767      	b.n	80081ba <_printf_float+0xb6>
 80082ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80082ee:	f240 80dd 	bls.w	80084ac <_printf_float+0x3a8>
 80082f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082f6:	2200      	movs	r2, #0
 80082f8:	2300      	movs	r3, #0
 80082fa:	f7f8 fbed 	bl	8000ad8 <__aeabi_dcmpeq>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d033      	beq.n	800836a <_printf_float+0x266>
 8008302:	4a37      	ldr	r2, [pc, #220]	@ (80083e0 <_printf_float+0x2dc>)
 8008304:	2301      	movs	r3, #1
 8008306:	4631      	mov	r1, r6
 8008308:	4628      	mov	r0, r5
 800830a:	47b8      	blx	r7
 800830c:	3001      	adds	r0, #1
 800830e:	f43f af54 	beq.w	80081ba <_printf_float+0xb6>
 8008312:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008316:	4543      	cmp	r3, r8
 8008318:	db02      	blt.n	8008320 <_printf_float+0x21c>
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	07d8      	lsls	r0, r3, #31
 800831e:	d50f      	bpl.n	8008340 <_printf_float+0x23c>
 8008320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008324:	4631      	mov	r1, r6
 8008326:	4628      	mov	r0, r5
 8008328:	47b8      	blx	r7
 800832a:	3001      	adds	r0, #1
 800832c:	f43f af45 	beq.w	80081ba <_printf_float+0xb6>
 8008330:	f04f 0900 	mov.w	r9, #0
 8008334:	f108 38ff 	add.w	r8, r8, #4294967295
 8008338:	f104 0a1a 	add.w	sl, r4, #26
 800833c:	45c8      	cmp	r8, r9
 800833e:	dc09      	bgt.n	8008354 <_printf_float+0x250>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	079b      	lsls	r3, r3, #30
 8008344:	f100 8103 	bmi.w	800854e <_printf_float+0x44a>
 8008348:	68e0      	ldr	r0, [r4, #12]
 800834a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800834c:	4298      	cmp	r0, r3
 800834e:	bfb8      	it	lt
 8008350:	4618      	movlt	r0, r3
 8008352:	e734      	b.n	80081be <_printf_float+0xba>
 8008354:	2301      	movs	r3, #1
 8008356:	4652      	mov	r2, sl
 8008358:	4631      	mov	r1, r6
 800835a:	4628      	mov	r0, r5
 800835c:	47b8      	blx	r7
 800835e:	3001      	adds	r0, #1
 8008360:	f43f af2b 	beq.w	80081ba <_printf_float+0xb6>
 8008364:	f109 0901 	add.w	r9, r9, #1
 8008368:	e7e8      	b.n	800833c <_printf_float+0x238>
 800836a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836c:	2b00      	cmp	r3, #0
 800836e:	dc39      	bgt.n	80083e4 <_printf_float+0x2e0>
 8008370:	4a1b      	ldr	r2, [pc, #108]	@ (80083e0 <_printf_float+0x2dc>)
 8008372:	2301      	movs	r3, #1
 8008374:	4631      	mov	r1, r6
 8008376:	4628      	mov	r0, r5
 8008378:	47b8      	blx	r7
 800837a:	3001      	adds	r0, #1
 800837c:	f43f af1d 	beq.w	80081ba <_printf_float+0xb6>
 8008380:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008384:	ea59 0303 	orrs.w	r3, r9, r3
 8008388:	d102      	bne.n	8008390 <_printf_float+0x28c>
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	07d9      	lsls	r1, r3, #31
 800838e:	d5d7      	bpl.n	8008340 <_printf_float+0x23c>
 8008390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f43f af0d 	beq.w	80081ba <_printf_float+0xb6>
 80083a0:	f04f 0a00 	mov.w	sl, #0
 80083a4:	f104 0b1a 	add.w	fp, r4, #26
 80083a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083aa:	425b      	negs	r3, r3
 80083ac:	4553      	cmp	r3, sl
 80083ae:	dc01      	bgt.n	80083b4 <_printf_float+0x2b0>
 80083b0:	464b      	mov	r3, r9
 80083b2:	e793      	b.n	80082dc <_printf_float+0x1d8>
 80083b4:	2301      	movs	r3, #1
 80083b6:	465a      	mov	r2, fp
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f aefb 	beq.w	80081ba <_printf_float+0xb6>
 80083c4:	f10a 0a01 	add.w	sl, sl, #1
 80083c8:	e7ee      	b.n	80083a8 <_printf_float+0x2a4>
 80083ca:	bf00      	nop
 80083cc:	7fefffff 	.word	0x7fefffff
 80083d0:	0800bee5 	.word	0x0800bee5
 80083d4:	0800bee9 	.word	0x0800bee9
 80083d8:	0800beed 	.word	0x0800beed
 80083dc:	0800bef1 	.word	0x0800bef1
 80083e0:	0800bef5 	.word	0x0800bef5
 80083e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80083e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80083ea:	4553      	cmp	r3, sl
 80083ec:	bfa8      	it	ge
 80083ee:	4653      	movge	r3, sl
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	4699      	mov	r9, r3
 80083f4:	dc36      	bgt.n	8008464 <_printf_float+0x360>
 80083f6:	f04f 0b00 	mov.w	fp, #0
 80083fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083fe:	f104 021a 	add.w	r2, r4, #26
 8008402:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008404:	9306      	str	r3, [sp, #24]
 8008406:	eba3 0309 	sub.w	r3, r3, r9
 800840a:	455b      	cmp	r3, fp
 800840c:	dc31      	bgt.n	8008472 <_printf_float+0x36e>
 800840e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008410:	459a      	cmp	sl, r3
 8008412:	dc3a      	bgt.n	800848a <_printf_float+0x386>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	07da      	lsls	r2, r3, #31
 8008418:	d437      	bmi.n	800848a <_printf_float+0x386>
 800841a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800841c:	ebaa 0903 	sub.w	r9, sl, r3
 8008420:	9b06      	ldr	r3, [sp, #24]
 8008422:	ebaa 0303 	sub.w	r3, sl, r3
 8008426:	4599      	cmp	r9, r3
 8008428:	bfa8      	it	ge
 800842a:	4699      	movge	r9, r3
 800842c:	f1b9 0f00 	cmp.w	r9, #0
 8008430:	dc33      	bgt.n	800849a <_printf_float+0x396>
 8008432:	f04f 0800 	mov.w	r8, #0
 8008436:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800843a:	f104 0b1a 	add.w	fp, r4, #26
 800843e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008440:	ebaa 0303 	sub.w	r3, sl, r3
 8008444:	eba3 0309 	sub.w	r3, r3, r9
 8008448:	4543      	cmp	r3, r8
 800844a:	f77f af79 	ble.w	8008340 <_printf_float+0x23c>
 800844e:	2301      	movs	r3, #1
 8008450:	465a      	mov	r2, fp
 8008452:	4631      	mov	r1, r6
 8008454:	4628      	mov	r0, r5
 8008456:	47b8      	blx	r7
 8008458:	3001      	adds	r0, #1
 800845a:	f43f aeae 	beq.w	80081ba <_printf_float+0xb6>
 800845e:	f108 0801 	add.w	r8, r8, #1
 8008462:	e7ec      	b.n	800843e <_printf_float+0x33a>
 8008464:	4642      	mov	r2, r8
 8008466:	4631      	mov	r1, r6
 8008468:	4628      	mov	r0, r5
 800846a:	47b8      	blx	r7
 800846c:	3001      	adds	r0, #1
 800846e:	d1c2      	bne.n	80083f6 <_printf_float+0x2f2>
 8008470:	e6a3      	b.n	80081ba <_printf_float+0xb6>
 8008472:	2301      	movs	r3, #1
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	9206      	str	r2, [sp, #24]
 800847a:	47b8      	blx	r7
 800847c:	3001      	adds	r0, #1
 800847e:	f43f ae9c 	beq.w	80081ba <_printf_float+0xb6>
 8008482:	9a06      	ldr	r2, [sp, #24]
 8008484:	f10b 0b01 	add.w	fp, fp, #1
 8008488:	e7bb      	b.n	8008402 <_printf_float+0x2fe>
 800848a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800848e:	4631      	mov	r1, r6
 8008490:	4628      	mov	r0, r5
 8008492:	47b8      	blx	r7
 8008494:	3001      	adds	r0, #1
 8008496:	d1c0      	bne.n	800841a <_printf_float+0x316>
 8008498:	e68f      	b.n	80081ba <_printf_float+0xb6>
 800849a:	9a06      	ldr	r2, [sp, #24]
 800849c:	464b      	mov	r3, r9
 800849e:	4442      	add	r2, r8
 80084a0:	4631      	mov	r1, r6
 80084a2:	4628      	mov	r0, r5
 80084a4:	47b8      	blx	r7
 80084a6:	3001      	adds	r0, #1
 80084a8:	d1c3      	bne.n	8008432 <_printf_float+0x32e>
 80084aa:	e686      	b.n	80081ba <_printf_float+0xb6>
 80084ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80084b0:	f1ba 0f01 	cmp.w	sl, #1
 80084b4:	dc01      	bgt.n	80084ba <_printf_float+0x3b6>
 80084b6:	07db      	lsls	r3, r3, #31
 80084b8:	d536      	bpl.n	8008528 <_printf_float+0x424>
 80084ba:	2301      	movs	r3, #1
 80084bc:	4642      	mov	r2, r8
 80084be:	4631      	mov	r1, r6
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b8      	blx	r7
 80084c4:	3001      	adds	r0, #1
 80084c6:	f43f ae78 	beq.w	80081ba <_printf_float+0xb6>
 80084ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ce:	4631      	mov	r1, r6
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	f43f ae70 	beq.w	80081ba <_printf_float+0xb6>
 80084da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084de:	2200      	movs	r2, #0
 80084e0:	2300      	movs	r3, #0
 80084e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084e6:	f7f8 faf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80084ea:	b9c0      	cbnz	r0, 800851e <_printf_float+0x41a>
 80084ec:	4653      	mov	r3, sl
 80084ee:	f108 0201 	add.w	r2, r8, #1
 80084f2:	4631      	mov	r1, r6
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b8      	blx	r7
 80084f8:	3001      	adds	r0, #1
 80084fa:	d10c      	bne.n	8008516 <_printf_float+0x412>
 80084fc:	e65d      	b.n	80081ba <_printf_float+0xb6>
 80084fe:	2301      	movs	r3, #1
 8008500:	465a      	mov	r2, fp
 8008502:	4631      	mov	r1, r6
 8008504:	4628      	mov	r0, r5
 8008506:	47b8      	blx	r7
 8008508:	3001      	adds	r0, #1
 800850a:	f43f ae56 	beq.w	80081ba <_printf_float+0xb6>
 800850e:	f108 0801 	add.w	r8, r8, #1
 8008512:	45d0      	cmp	r8, sl
 8008514:	dbf3      	blt.n	80084fe <_printf_float+0x3fa>
 8008516:	464b      	mov	r3, r9
 8008518:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800851c:	e6df      	b.n	80082de <_printf_float+0x1da>
 800851e:	f04f 0800 	mov.w	r8, #0
 8008522:	f104 0b1a 	add.w	fp, r4, #26
 8008526:	e7f4      	b.n	8008512 <_printf_float+0x40e>
 8008528:	2301      	movs	r3, #1
 800852a:	4642      	mov	r2, r8
 800852c:	e7e1      	b.n	80084f2 <_printf_float+0x3ee>
 800852e:	2301      	movs	r3, #1
 8008530:	464a      	mov	r2, r9
 8008532:	4631      	mov	r1, r6
 8008534:	4628      	mov	r0, r5
 8008536:	47b8      	blx	r7
 8008538:	3001      	adds	r0, #1
 800853a:	f43f ae3e 	beq.w	80081ba <_printf_float+0xb6>
 800853e:	f108 0801 	add.w	r8, r8, #1
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008546:	1a5b      	subs	r3, r3, r1
 8008548:	4543      	cmp	r3, r8
 800854a:	dcf0      	bgt.n	800852e <_printf_float+0x42a>
 800854c:	e6fc      	b.n	8008348 <_printf_float+0x244>
 800854e:	f04f 0800 	mov.w	r8, #0
 8008552:	f104 0919 	add.w	r9, r4, #25
 8008556:	e7f4      	b.n	8008542 <_printf_float+0x43e>

08008558 <_printf_common>:
 8008558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	4616      	mov	r6, r2
 800855e:	4698      	mov	r8, r3
 8008560:	688a      	ldr	r2, [r1, #8]
 8008562:	690b      	ldr	r3, [r1, #16]
 8008564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008568:	4293      	cmp	r3, r2
 800856a:	bfb8      	it	lt
 800856c:	4613      	movlt	r3, r2
 800856e:	6033      	str	r3, [r6, #0]
 8008570:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008574:	4607      	mov	r7, r0
 8008576:	460c      	mov	r4, r1
 8008578:	b10a      	cbz	r2, 800857e <_printf_common+0x26>
 800857a:	3301      	adds	r3, #1
 800857c:	6033      	str	r3, [r6, #0]
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	0699      	lsls	r1, r3, #26
 8008582:	bf42      	ittt	mi
 8008584:	6833      	ldrmi	r3, [r6, #0]
 8008586:	3302      	addmi	r3, #2
 8008588:	6033      	strmi	r3, [r6, #0]
 800858a:	6825      	ldr	r5, [r4, #0]
 800858c:	f015 0506 	ands.w	r5, r5, #6
 8008590:	d106      	bne.n	80085a0 <_printf_common+0x48>
 8008592:	f104 0a19 	add.w	sl, r4, #25
 8008596:	68e3      	ldr	r3, [r4, #12]
 8008598:	6832      	ldr	r2, [r6, #0]
 800859a:	1a9b      	subs	r3, r3, r2
 800859c:	42ab      	cmp	r3, r5
 800859e:	dc26      	bgt.n	80085ee <_printf_common+0x96>
 80085a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085a4:	6822      	ldr	r2, [r4, #0]
 80085a6:	3b00      	subs	r3, #0
 80085a8:	bf18      	it	ne
 80085aa:	2301      	movne	r3, #1
 80085ac:	0692      	lsls	r2, r2, #26
 80085ae:	d42b      	bmi.n	8008608 <_printf_common+0xb0>
 80085b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085b4:	4641      	mov	r1, r8
 80085b6:	4638      	mov	r0, r7
 80085b8:	47c8      	blx	r9
 80085ba:	3001      	adds	r0, #1
 80085bc:	d01e      	beq.n	80085fc <_printf_common+0xa4>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	6922      	ldr	r2, [r4, #16]
 80085c2:	f003 0306 	and.w	r3, r3, #6
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	bf02      	ittt	eq
 80085ca:	68e5      	ldreq	r5, [r4, #12]
 80085cc:	6833      	ldreq	r3, [r6, #0]
 80085ce:	1aed      	subeq	r5, r5, r3
 80085d0:	68a3      	ldr	r3, [r4, #8]
 80085d2:	bf0c      	ite	eq
 80085d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085d8:	2500      	movne	r5, #0
 80085da:	4293      	cmp	r3, r2
 80085dc:	bfc4      	itt	gt
 80085de:	1a9b      	subgt	r3, r3, r2
 80085e0:	18ed      	addgt	r5, r5, r3
 80085e2:	2600      	movs	r6, #0
 80085e4:	341a      	adds	r4, #26
 80085e6:	42b5      	cmp	r5, r6
 80085e8:	d11a      	bne.n	8008620 <_printf_common+0xc8>
 80085ea:	2000      	movs	r0, #0
 80085ec:	e008      	b.n	8008600 <_printf_common+0xa8>
 80085ee:	2301      	movs	r3, #1
 80085f0:	4652      	mov	r2, sl
 80085f2:	4641      	mov	r1, r8
 80085f4:	4638      	mov	r0, r7
 80085f6:	47c8      	blx	r9
 80085f8:	3001      	adds	r0, #1
 80085fa:	d103      	bne.n	8008604 <_printf_common+0xac>
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008604:	3501      	adds	r5, #1
 8008606:	e7c6      	b.n	8008596 <_printf_common+0x3e>
 8008608:	18e1      	adds	r1, r4, r3
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	2030      	movs	r0, #48	@ 0x30
 800860e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008612:	4422      	add	r2, r4
 8008614:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008618:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800861c:	3302      	adds	r3, #2
 800861e:	e7c7      	b.n	80085b0 <_printf_common+0x58>
 8008620:	2301      	movs	r3, #1
 8008622:	4622      	mov	r2, r4
 8008624:	4641      	mov	r1, r8
 8008626:	4638      	mov	r0, r7
 8008628:	47c8      	blx	r9
 800862a:	3001      	adds	r0, #1
 800862c:	d0e6      	beq.n	80085fc <_printf_common+0xa4>
 800862e:	3601      	adds	r6, #1
 8008630:	e7d9      	b.n	80085e6 <_printf_common+0x8e>
	...

08008634 <_printf_i>:
 8008634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	7e0f      	ldrb	r7, [r1, #24]
 800863a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800863c:	2f78      	cmp	r7, #120	@ 0x78
 800863e:	4691      	mov	r9, r2
 8008640:	4680      	mov	r8, r0
 8008642:	460c      	mov	r4, r1
 8008644:	469a      	mov	sl, r3
 8008646:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800864a:	d807      	bhi.n	800865c <_printf_i+0x28>
 800864c:	2f62      	cmp	r7, #98	@ 0x62
 800864e:	d80a      	bhi.n	8008666 <_printf_i+0x32>
 8008650:	2f00      	cmp	r7, #0
 8008652:	f000 80d2 	beq.w	80087fa <_printf_i+0x1c6>
 8008656:	2f58      	cmp	r7, #88	@ 0x58
 8008658:	f000 80b9 	beq.w	80087ce <_printf_i+0x19a>
 800865c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008660:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008664:	e03a      	b.n	80086dc <_printf_i+0xa8>
 8008666:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800866a:	2b15      	cmp	r3, #21
 800866c:	d8f6      	bhi.n	800865c <_printf_i+0x28>
 800866e:	a101      	add	r1, pc, #4	@ (adr r1, 8008674 <_printf_i+0x40>)
 8008670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008674:	080086cd 	.word	0x080086cd
 8008678:	080086e1 	.word	0x080086e1
 800867c:	0800865d 	.word	0x0800865d
 8008680:	0800865d 	.word	0x0800865d
 8008684:	0800865d 	.word	0x0800865d
 8008688:	0800865d 	.word	0x0800865d
 800868c:	080086e1 	.word	0x080086e1
 8008690:	0800865d 	.word	0x0800865d
 8008694:	0800865d 	.word	0x0800865d
 8008698:	0800865d 	.word	0x0800865d
 800869c:	0800865d 	.word	0x0800865d
 80086a0:	080087e1 	.word	0x080087e1
 80086a4:	0800870b 	.word	0x0800870b
 80086a8:	0800879b 	.word	0x0800879b
 80086ac:	0800865d 	.word	0x0800865d
 80086b0:	0800865d 	.word	0x0800865d
 80086b4:	08008803 	.word	0x08008803
 80086b8:	0800865d 	.word	0x0800865d
 80086bc:	0800870b 	.word	0x0800870b
 80086c0:	0800865d 	.word	0x0800865d
 80086c4:	0800865d 	.word	0x0800865d
 80086c8:	080087a3 	.word	0x080087a3
 80086cc:	6833      	ldr	r3, [r6, #0]
 80086ce:	1d1a      	adds	r2, r3, #4
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6032      	str	r2, [r6, #0]
 80086d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086dc:	2301      	movs	r3, #1
 80086de:	e09d      	b.n	800881c <_printf_i+0x1e8>
 80086e0:	6833      	ldr	r3, [r6, #0]
 80086e2:	6820      	ldr	r0, [r4, #0]
 80086e4:	1d19      	adds	r1, r3, #4
 80086e6:	6031      	str	r1, [r6, #0]
 80086e8:	0606      	lsls	r6, r0, #24
 80086ea:	d501      	bpl.n	80086f0 <_printf_i+0xbc>
 80086ec:	681d      	ldr	r5, [r3, #0]
 80086ee:	e003      	b.n	80086f8 <_printf_i+0xc4>
 80086f0:	0645      	lsls	r5, r0, #25
 80086f2:	d5fb      	bpl.n	80086ec <_printf_i+0xb8>
 80086f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	da03      	bge.n	8008704 <_printf_i+0xd0>
 80086fc:	232d      	movs	r3, #45	@ 0x2d
 80086fe:	426d      	negs	r5, r5
 8008700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008704:	4859      	ldr	r0, [pc, #356]	@ (800886c <_printf_i+0x238>)
 8008706:	230a      	movs	r3, #10
 8008708:	e011      	b.n	800872e <_printf_i+0xfa>
 800870a:	6821      	ldr	r1, [r4, #0]
 800870c:	6833      	ldr	r3, [r6, #0]
 800870e:	0608      	lsls	r0, r1, #24
 8008710:	f853 5b04 	ldr.w	r5, [r3], #4
 8008714:	d402      	bmi.n	800871c <_printf_i+0xe8>
 8008716:	0649      	lsls	r1, r1, #25
 8008718:	bf48      	it	mi
 800871a:	b2ad      	uxthmi	r5, r5
 800871c:	2f6f      	cmp	r7, #111	@ 0x6f
 800871e:	4853      	ldr	r0, [pc, #332]	@ (800886c <_printf_i+0x238>)
 8008720:	6033      	str	r3, [r6, #0]
 8008722:	bf14      	ite	ne
 8008724:	230a      	movne	r3, #10
 8008726:	2308      	moveq	r3, #8
 8008728:	2100      	movs	r1, #0
 800872a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800872e:	6866      	ldr	r6, [r4, #4]
 8008730:	60a6      	str	r6, [r4, #8]
 8008732:	2e00      	cmp	r6, #0
 8008734:	bfa2      	ittt	ge
 8008736:	6821      	ldrge	r1, [r4, #0]
 8008738:	f021 0104 	bicge.w	r1, r1, #4
 800873c:	6021      	strge	r1, [r4, #0]
 800873e:	b90d      	cbnz	r5, 8008744 <_printf_i+0x110>
 8008740:	2e00      	cmp	r6, #0
 8008742:	d04b      	beq.n	80087dc <_printf_i+0x1a8>
 8008744:	4616      	mov	r6, r2
 8008746:	fbb5 f1f3 	udiv	r1, r5, r3
 800874a:	fb03 5711 	mls	r7, r3, r1, r5
 800874e:	5dc7      	ldrb	r7, [r0, r7]
 8008750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008754:	462f      	mov	r7, r5
 8008756:	42bb      	cmp	r3, r7
 8008758:	460d      	mov	r5, r1
 800875a:	d9f4      	bls.n	8008746 <_printf_i+0x112>
 800875c:	2b08      	cmp	r3, #8
 800875e:	d10b      	bne.n	8008778 <_printf_i+0x144>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	07df      	lsls	r7, r3, #31
 8008764:	d508      	bpl.n	8008778 <_printf_i+0x144>
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	6861      	ldr	r1, [r4, #4]
 800876a:	4299      	cmp	r1, r3
 800876c:	bfde      	ittt	le
 800876e:	2330      	movle	r3, #48	@ 0x30
 8008770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008774:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008778:	1b92      	subs	r2, r2, r6
 800877a:	6122      	str	r2, [r4, #16]
 800877c:	f8cd a000 	str.w	sl, [sp]
 8008780:	464b      	mov	r3, r9
 8008782:	aa03      	add	r2, sp, #12
 8008784:	4621      	mov	r1, r4
 8008786:	4640      	mov	r0, r8
 8008788:	f7ff fee6 	bl	8008558 <_printf_common>
 800878c:	3001      	adds	r0, #1
 800878e:	d14a      	bne.n	8008826 <_printf_i+0x1f2>
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	b004      	add	sp, #16
 8008796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	f043 0320 	orr.w	r3, r3, #32
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	4833      	ldr	r0, [pc, #204]	@ (8008870 <_printf_i+0x23c>)
 80087a4:	2778      	movs	r7, #120	@ 0x78
 80087a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	6831      	ldr	r1, [r6, #0]
 80087ae:	061f      	lsls	r7, r3, #24
 80087b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80087b4:	d402      	bmi.n	80087bc <_printf_i+0x188>
 80087b6:	065f      	lsls	r7, r3, #25
 80087b8:	bf48      	it	mi
 80087ba:	b2ad      	uxthmi	r5, r5
 80087bc:	6031      	str	r1, [r6, #0]
 80087be:	07d9      	lsls	r1, r3, #31
 80087c0:	bf44      	itt	mi
 80087c2:	f043 0320 	orrmi.w	r3, r3, #32
 80087c6:	6023      	strmi	r3, [r4, #0]
 80087c8:	b11d      	cbz	r5, 80087d2 <_printf_i+0x19e>
 80087ca:	2310      	movs	r3, #16
 80087cc:	e7ac      	b.n	8008728 <_printf_i+0xf4>
 80087ce:	4827      	ldr	r0, [pc, #156]	@ (800886c <_printf_i+0x238>)
 80087d0:	e7e9      	b.n	80087a6 <_printf_i+0x172>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	f023 0320 	bic.w	r3, r3, #32
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	e7f6      	b.n	80087ca <_printf_i+0x196>
 80087dc:	4616      	mov	r6, r2
 80087de:	e7bd      	b.n	800875c <_printf_i+0x128>
 80087e0:	6833      	ldr	r3, [r6, #0]
 80087e2:	6825      	ldr	r5, [r4, #0]
 80087e4:	6961      	ldr	r1, [r4, #20]
 80087e6:	1d18      	adds	r0, r3, #4
 80087e8:	6030      	str	r0, [r6, #0]
 80087ea:	062e      	lsls	r6, r5, #24
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	d501      	bpl.n	80087f4 <_printf_i+0x1c0>
 80087f0:	6019      	str	r1, [r3, #0]
 80087f2:	e002      	b.n	80087fa <_printf_i+0x1c6>
 80087f4:	0668      	lsls	r0, r5, #25
 80087f6:	d5fb      	bpl.n	80087f0 <_printf_i+0x1bc>
 80087f8:	8019      	strh	r1, [r3, #0]
 80087fa:	2300      	movs	r3, #0
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	4616      	mov	r6, r2
 8008800:	e7bc      	b.n	800877c <_printf_i+0x148>
 8008802:	6833      	ldr	r3, [r6, #0]
 8008804:	1d1a      	adds	r2, r3, #4
 8008806:	6032      	str	r2, [r6, #0]
 8008808:	681e      	ldr	r6, [r3, #0]
 800880a:	6862      	ldr	r2, [r4, #4]
 800880c:	2100      	movs	r1, #0
 800880e:	4630      	mov	r0, r6
 8008810:	f7f7 fce6 	bl	80001e0 <memchr>
 8008814:	b108      	cbz	r0, 800881a <_printf_i+0x1e6>
 8008816:	1b80      	subs	r0, r0, r6
 8008818:	6060      	str	r0, [r4, #4]
 800881a:	6863      	ldr	r3, [r4, #4]
 800881c:	6123      	str	r3, [r4, #16]
 800881e:	2300      	movs	r3, #0
 8008820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008824:	e7aa      	b.n	800877c <_printf_i+0x148>
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	4632      	mov	r2, r6
 800882a:	4649      	mov	r1, r9
 800882c:	4640      	mov	r0, r8
 800882e:	47d0      	blx	sl
 8008830:	3001      	adds	r0, #1
 8008832:	d0ad      	beq.n	8008790 <_printf_i+0x15c>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	079b      	lsls	r3, r3, #30
 8008838:	d413      	bmi.n	8008862 <_printf_i+0x22e>
 800883a:	68e0      	ldr	r0, [r4, #12]
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	4298      	cmp	r0, r3
 8008840:	bfb8      	it	lt
 8008842:	4618      	movlt	r0, r3
 8008844:	e7a6      	b.n	8008794 <_printf_i+0x160>
 8008846:	2301      	movs	r3, #1
 8008848:	4632      	mov	r2, r6
 800884a:	4649      	mov	r1, r9
 800884c:	4640      	mov	r0, r8
 800884e:	47d0      	blx	sl
 8008850:	3001      	adds	r0, #1
 8008852:	d09d      	beq.n	8008790 <_printf_i+0x15c>
 8008854:	3501      	adds	r5, #1
 8008856:	68e3      	ldr	r3, [r4, #12]
 8008858:	9903      	ldr	r1, [sp, #12]
 800885a:	1a5b      	subs	r3, r3, r1
 800885c:	42ab      	cmp	r3, r5
 800885e:	dcf2      	bgt.n	8008846 <_printf_i+0x212>
 8008860:	e7eb      	b.n	800883a <_printf_i+0x206>
 8008862:	2500      	movs	r5, #0
 8008864:	f104 0619 	add.w	r6, r4, #25
 8008868:	e7f5      	b.n	8008856 <_printf_i+0x222>
 800886a:	bf00      	nop
 800886c:	0800bef7 	.word	0x0800bef7
 8008870:	0800bf08 	.word	0x0800bf08

08008874 <std>:
 8008874:	2300      	movs	r3, #0
 8008876:	b510      	push	{r4, lr}
 8008878:	4604      	mov	r4, r0
 800887a:	e9c0 3300 	strd	r3, r3, [r0]
 800887e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008882:	6083      	str	r3, [r0, #8]
 8008884:	8181      	strh	r1, [r0, #12]
 8008886:	6643      	str	r3, [r0, #100]	@ 0x64
 8008888:	81c2      	strh	r2, [r0, #14]
 800888a:	6183      	str	r3, [r0, #24]
 800888c:	4619      	mov	r1, r3
 800888e:	2208      	movs	r2, #8
 8008890:	305c      	adds	r0, #92	@ 0x5c
 8008892:	f000 f94d 	bl	8008b30 <memset>
 8008896:	4b0d      	ldr	r3, [pc, #52]	@ (80088cc <std+0x58>)
 8008898:	6263      	str	r3, [r4, #36]	@ 0x24
 800889a:	4b0d      	ldr	r3, [pc, #52]	@ (80088d0 <std+0x5c>)
 800889c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800889e:	4b0d      	ldr	r3, [pc, #52]	@ (80088d4 <std+0x60>)
 80088a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088a2:	4b0d      	ldr	r3, [pc, #52]	@ (80088d8 <std+0x64>)
 80088a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80088a6:	4b0d      	ldr	r3, [pc, #52]	@ (80088dc <std+0x68>)
 80088a8:	6224      	str	r4, [r4, #32]
 80088aa:	429c      	cmp	r4, r3
 80088ac:	d006      	beq.n	80088bc <std+0x48>
 80088ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088b2:	4294      	cmp	r4, r2
 80088b4:	d002      	beq.n	80088bc <std+0x48>
 80088b6:	33d0      	adds	r3, #208	@ 0xd0
 80088b8:	429c      	cmp	r4, r3
 80088ba:	d105      	bne.n	80088c8 <std+0x54>
 80088bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c4:	f000 b9c4 	b.w	8008c50 <__retarget_lock_init_recursive>
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	bf00      	nop
 80088cc:	08008a39 	.word	0x08008a39
 80088d0:	08008a5b 	.word	0x08008a5b
 80088d4:	08008a93 	.word	0x08008a93
 80088d8:	08008ab7 	.word	0x08008ab7
 80088dc:	200009a0 	.word	0x200009a0

080088e0 <stdio_exit_handler>:
 80088e0:	4a02      	ldr	r2, [pc, #8]	@ (80088ec <stdio_exit_handler+0xc>)
 80088e2:	4903      	ldr	r1, [pc, #12]	@ (80088f0 <stdio_exit_handler+0x10>)
 80088e4:	4803      	ldr	r0, [pc, #12]	@ (80088f4 <stdio_exit_handler+0x14>)
 80088e6:	f000 b869 	b.w	80089bc <_fwalk_sglue>
 80088ea:	bf00      	nop
 80088ec:	2000002c 	.word	0x2000002c
 80088f0:	0800a5ad 	.word	0x0800a5ad
 80088f4:	2000003c 	.word	0x2000003c

080088f8 <cleanup_stdio>:
 80088f8:	6841      	ldr	r1, [r0, #4]
 80088fa:	4b0c      	ldr	r3, [pc, #48]	@ (800892c <cleanup_stdio+0x34>)
 80088fc:	4299      	cmp	r1, r3
 80088fe:	b510      	push	{r4, lr}
 8008900:	4604      	mov	r4, r0
 8008902:	d001      	beq.n	8008908 <cleanup_stdio+0x10>
 8008904:	f001 fe52 	bl	800a5ac <_fflush_r>
 8008908:	68a1      	ldr	r1, [r4, #8]
 800890a:	4b09      	ldr	r3, [pc, #36]	@ (8008930 <cleanup_stdio+0x38>)
 800890c:	4299      	cmp	r1, r3
 800890e:	d002      	beq.n	8008916 <cleanup_stdio+0x1e>
 8008910:	4620      	mov	r0, r4
 8008912:	f001 fe4b 	bl	800a5ac <_fflush_r>
 8008916:	68e1      	ldr	r1, [r4, #12]
 8008918:	4b06      	ldr	r3, [pc, #24]	@ (8008934 <cleanup_stdio+0x3c>)
 800891a:	4299      	cmp	r1, r3
 800891c:	d004      	beq.n	8008928 <cleanup_stdio+0x30>
 800891e:	4620      	mov	r0, r4
 8008920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008924:	f001 be42 	b.w	800a5ac <_fflush_r>
 8008928:	bd10      	pop	{r4, pc}
 800892a:	bf00      	nop
 800892c:	200009a0 	.word	0x200009a0
 8008930:	20000a08 	.word	0x20000a08
 8008934:	20000a70 	.word	0x20000a70

08008938 <global_stdio_init.part.0>:
 8008938:	b510      	push	{r4, lr}
 800893a:	4b0b      	ldr	r3, [pc, #44]	@ (8008968 <global_stdio_init.part.0+0x30>)
 800893c:	4c0b      	ldr	r4, [pc, #44]	@ (800896c <global_stdio_init.part.0+0x34>)
 800893e:	4a0c      	ldr	r2, [pc, #48]	@ (8008970 <global_stdio_init.part.0+0x38>)
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	4620      	mov	r0, r4
 8008944:	2200      	movs	r2, #0
 8008946:	2104      	movs	r1, #4
 8008948:	f7ff ff94 	bl	8008874 <std>
 800894c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008950:	2201      	movs	r2, #1
 8008952:	2109      	movs	r1, #9
 8008954:	f7ff ff8e 	bl	8008874 <std>
 8008958:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800895c:	2202      	movs	r2, #2
 800895e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008962:	2112      	movs	r1, #18
 8008964:	f7ff bf86 	b.w	8008874 <std>
 8008968:	20000ad8 	.word	0x20000ad8
 800896c:	200009a0 	.word	0x200009a0
 8008970:	080088e1 	.word	0x080088e1

08008974 <__sfp_lock_acquire>:
 8008974:	4801      	ldr	r0, [pc, #4]	@ (800897c <__sfp_lock_acquire+0x8>)
 8008976:	f000 b96c 	b.w	8008c52 <__retarget_lock_acquire_recursive>
 800897a:	bf00      	nop
 800897c:	20000ae1 	.word	0x20000ae1

08008980 <__sfp_lock_release>:
 8008980:	4801      	ldr	r0, [pc, #4]	@ (8008988 <__sfp_lock_release+0x8>)
 8008982:	f000 b967 	b.w	8008c54 <__retarget_lock_release_recursive>
 8008986:	bf00      	nop
 8008988:	20000ae1 	.word	0x20000ae1

0800898c <__sinit>:
 800898c:	b510      	push	{r4, lr}
 800898e:	4604      	mov	r4, r0
 8008990:	f7ff fff0 	bl	8008974 <__sfp_lock_acquire>
 8008994:	6a23      	ldr	r3, [r4, #32]
 8008996:	b11b      	cbz	r3, 80089a0 <__sinit+0x14>
 8008998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800899c:	f7ff bff0 	b.w	8008980 <__sfp_lock_release>
 80089a0:	4b04      	ldr	r3, [pc, #16]	@ (80089b4 <__sinit+0x28>)
 80089a2:	6223      	str	r3, [r4, #32]
 80089a4:	4b04      	ldr	r3, [pc, #16]	@ (80089b8 <__sinit+0x2c>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1f5      	bne.n	8008998 <__sinit+0xc>
 80089ac:	f7ff ffc4 	bl	8008938 <global_stdio_init.part.0>
 80089b0:	e7f2      	b.n	8008998 <__sinit+0xc>
 80089b2:	bf00      	nop
 80089b4:	080088f9 	.word	0x080088f9
 80089b8:	20000ad8 	.word	0x20000ad8

080089bc <_fwalk_sglue>:
 80089bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c0:	4607      	mov	r7, r0
 80089c2:	4688      	mov	r8, r1
 80089c4:	4614      	mov	r4, r2
 80089c6:	2600      	movs	r6, #0
 80089c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089cc:	f1b9 0901 	subs.w	r9, r9, #1
 80089d0:	d505      	bpl.n	80089de <_fwalk_sglue+0x22>
 80089d2:	6824      	ldr	r4, [r4, #0]
 80089d4:	2c00      	cmp	r4, #0
 80089d6:	d1f7      	bne.n	80089c8 <_fwalk_sglue+0xc>
 80089d8:	4630      	mov	r0, r6
 80089da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089de:	89ab      	ldrh	r3, [r5, #12]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d907      	bls.n	80089f4 <_fwalk_sglue+0x38>
 80089e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089e8:	3301      	adds	r3, #1
 80089ea:	d003      	beq.n	80089f4 <_fwalk_sglue+0x38>
 80089ec:	4629      	mov	r1, r5
 80089ee:	4638      	mov	r0, r7
 80089f0:	47c0      	blx	r8
 80089f2:	4306      	orrs	r6, r0
 80089f4:	3568      	adds	r5, #104	@ 0x68
 80089f6:	e7e9      	b.n	80089cc <_fwalk_sglue+0x10>

080089f8 <siprintf>:
 80089f8:	b40e      	push	{r1, r2, r3}
 80089fa:	b500      	push	{lr}
 80089fc:	b09c      	sub	sp, #112	@ 0x70
 80089fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a00:	9002      	str	r0, [sp, #8]
 8008a02:	9006      	str	r0, [sp, #24]
 8008a04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a08:	4809      	ldr	r0, [pc, #36]	@ (8008a30 <siprintf+0x38>)
 8008a0a:	9107      	str	r1, [sp, #28]
 8008a0c:	9104      	str	r1, [sp, #16]
 8008a0e:	4909      	ldr	r1, [pc, #36]	@ (8008a34 <siprintf+0x3c>)
 8008a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a14:	9105      	str	r1, [sp, #20]
 8008a16:	6800      	ldr	r0, [r0, #0]
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	a902      	add	r1, sp, #8
 8008a1c:	f001 fc46 	bl	800a2ac <_svfiprintf_r>
 8008a20:	9b02      	ldr	r3, [sp, #8]
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	b01c      	add	sp, #112	@ 0x70
 8008a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a2c:	b003      	add	sp, #12
 8008a2e:	4770      	bx	lr
 8008a30:	20000038 	.word	0x20000038
 8008a34:	ffff0208 	.word	0xffff0208

08008a38 <__sread>:
 8008a38:	b510      	push	{r4, lr}
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a40:	f000 f8b8 	bl	8008bb4 <_read_r>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	bfab      	itete	ge
 8008a48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a4c:	181b      	addge	r3, r3, r0
 8008a4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a52:	bfac      	ite	ge
 8008a54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a56:	81a3      	strhlt	r3, [r4, #12]
 8008a58:	bd10      	pop	{r4, pc}

08008a5a <__swrite>:
 8008a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5e:	461f      	mov	r7, r3
 8008a60:	898b      	ldrh	r3, [r1, #12]
 8008a62:	05db      	lsls	r3, r3, #23
 8008a64:	4605      	mov	r5, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	4616      	mov	r6, r2
 8008a6a:	d505      	bpl.n	8008a78 <__swrite+0x1e>
 8008a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a70:	2302      	movs	r3, #2
 8008a72:	2200      	movs	r2, #0
 8008a74:	f000 f88c 	bl	8008b90 <_lseek_r>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	4632      	mov	r2, r6
 8008a86:	463b      	mov	r3, r7
 8008a88:	4628      	mov	r0, r5
 8008a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8e:	f000 b8a3 	b.w	8008bd8 <_write_r>

08008a92 <__sseek>:
 8008a92:	b510      	push	{r4, lr}
 8008a94:	460c      	mov	r4, r1
 8008a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9a:	f000 f879 	bl	8008b90 <_lseek_r>
 8008a9e:	1c43      	adds	r3, r0, #1
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	bf15      	itete	ne
 8008aa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008aa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008aaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008aae:	81a3      	strheq	r3, [r4, #12]
 8008ab0:	bf18      	it	ne
 8008ab2:	81a3      	strhne	r3, [r4, #12]
 8008ab4:	bd10      	pop	{r4, pc}

08008ab6 <__sclose>:
 8008ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aba:	f000 b859 	b.w	8008b70 <_close_r>

08008abe <_vsniprintf_r>:
 8008abe:	b530      	push	{r4, r5, lr}
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	2c00      	cmp	r4, #0
 8008ac4:	b09b      	sub	sp, #108	@ 0x6c
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	461a      	mov	r2, r3
 8008aca:	da05      	bge.n	8008ad8 <_vsniprintf_r+0x1a>
 8008acc:	238b      	movs	r3, #139	@ 0x8b
 8008ace:	6003      	str	r3, [r0, #0]
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad4:	b01b      	add	sp, #108	@ 0x6c
 8008ad6:	bd30      	pop	{r4, r5, pc}
 8008ad8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008adc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008ae0:	bf14      	ite	ne
 8008ae2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ae6:	4623      	moveq	r3, r4
 8008ae8:	9302      	str	r3, [sp, #8]
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008af0:	9100      	str	r1, [sp, #0]
 8008af2:	9104      	str	r1, [sp, #16]
 8008af4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008af8:	4669      	mov	r1, sp
 8008afa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008afc:	f001 fbd6 	bl	800a2ac <_svfiprintf_r>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	bfbc      	itt	lt
 8008b04:	238b      	movlt	r3, #139	@ 0x8b
 8008b06:	602b      	strlt	r3, [r5, #0]
 8008b08:	2c00      	cmp	r4, #0
 8008b0a:	d0e3      	beq.n	8008ad4 <_vsniprintf_r+0x16>
 8008b0c:	9b00      	ldr	r3, [sp, #0]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	701a      	strb	r2, [r3, #0]
 8008b12:	e7df      	b.n	8008ad4 <_vsniprintf_r+0x16>

08008b14 <vsniprintf>:
 8008b14:	b507      	push	{r0, r1, r2, lr}
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	460a      	mov	r2, r1
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	4803      	ldr	r0, [pc, #12]	@ (8008b2c <vsniprintf+0x18>)
 8008b20:	6800      	ldr	r0, [r0, #0]
 8008b22:	f7ff ffcc 	bl	8008abe <_vsniprintf_r>
 8008b26:	b003      	add	sp, #12
 8008b28:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b2c:	20000038 	.word	0x20000038

08008b30 <memset>:
 8008b30:	4402      	add	r2, r0
 8008b32:	4603      	mov	r3, r0
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d100      	bne.n	8008b3a <memset+0xa>
 8008b38:	4770      	bx	lr
 8008b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b3e:	e7f9      	b.n	8008b34 <memset+0x4>

08008b40 <strncpy>:
 8008b40:	b510      	push	{r4, lr}
 8008b42:	3901      	subs	r1, #1
 8008b44:	4603      	mov	r3, r0
 8008b46:	b132      	cbz	r2, 8008b56 <strncpy+0x16>
 8008b48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008b4c:	f803 4b01 	strb.w	r4, [r3], #1
 8008b50:	3a01      	subs	r2, #1
 8008b52:	2c00      	cmp	r4, #0
 8008b54:	d1f7      	bne.n	8008b46 <strncpy+0x6>
 8008b56:	441a      	add	r2, r3
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d100      	bne.n	8008b60 <strncpy+0x20>
 8008b5e:	bd10      	pop	{r4, pc}
 8008b60:	f803 1b01 	strb.w	r1, [r3], #1
 8008b64:	e7f9      	b.n	8008b5a <strncpy+0x1a>
	...

08008b68 <_localeconv_r>:
 8008b68:	4800      	ldr	r0, [pc, #0]	@ (8008b6c <_localeconv_r+0x4>)
 8008b6a:	4770      	bx	lr
 8008b6c:	20000178 	.word	0x20000178

08008b70 <_close_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d06      	ldr	r5, [pc, #24]	@ (8008b8c <_close_r+0x1c>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7f9 fa66 	bl	800204c <_close>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_close_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_close_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20000adc 	.word	0x20000adc

08008b90 <_lseek_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d07      	ldr	r5, [pc, #28]	@ (8008bb0 <_lseek_r+0x20>)
 8008b94:	4604      	mov	r4, r0
 8008b96:	4608      	mov	r0, r1
 8008b98:	4611      	mov	r1, r2
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	602a      	str	r2, [r5, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f7f9 fa7b 	bl	800209a <_lseek>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d102      	bne.n	8008bae <_lseek_r+0x1e>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	b103      	cbz	r3, 8008bae <_lseek_r+0x1e>
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	20000adc 	.word	0x20000adc

08008bb4 <_read_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d07      	ldr	r5, [pc, #28]	@ (8008bd4 <_read_r+0x20>)
 8008bb8:	4604      	mov	r4, r0
 8008bba:	4608      	mov	r0, r1
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	602a      	str	r2, [r5, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f7f9 fa09 	bl	8001fda <_read>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_read_r+0x1e>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_read_r+0x1e>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	20000adc 	.word	0x20000adc

08008bd8 <_write_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4d07      	ldr	r5, [pc, #28]	@ (8008bf8 <_write_r+0x20>)
 8008bdc:	4604      	mov	r4, r0
 8008bde:	4608      	mov	r0, r1
 8008be0:	4611      	mov	r1, r2
 8008be2:	2200      	movs	r2, #0
 8008be4:	602a      	str	r2, [r5, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f7f9 fa14 	bl	8002014 <_write>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_write_r+0x1e>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_write_r+0x1e>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	20000adc 	.word	0x20000adc

08008bfc <__errno>:
 8008bfc:	4b01      	ldr	r3, [pc, #4]	@ (8008c04 <__errno+0x8>)
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20000038 	.word	0x20000038

08008c08 <__libc_init_array>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8008c40 <__libc_init_array+0x38>)
 8008c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8008c44 <__libc_init_array+0x3c>)
 8008c0e:	1b64      	subs	r4, r4, r5
 8008c10:	10a4      	asrs	r4, r4, #2
 8008c12:	2600      	movs	r6, #0
 8008c14:	42a6      	cmp	r6, r4
 8008c16:	d109      	bne.n	8008c2c <__libc_init_array+0x24>
 8008c18:	4d0b      	ldr	r5, [pc, #44]	@ (8008c48 <__libc_init_array+0x40>)
 8008c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8008c4c <__libc_init_array+0x44>)
 8008c1c:	f002 ffc2 	bl	800bba4 <_init>
 8008c20:	1b64      	subs	r4, r4, r5
 8008c22:	10a4      	asrs	r4, r4, #2
 8008c24:	2600      	movs	r6, #0
 8008c26:	42a6      	cmp	r6, r4
 8008c28:	d105      	bne.n	8008c36 <__libc_init_array+0x2e>
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
 8008c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c30:	4798      	blx	r3
 8008c32:	3601      	adds	r6, #1
 8008c34:	e7ee      	b.n	8008c14 <__libc_init_array+0xc>
 8008c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3a:	4798      	blx	r3
 8008c3c:	3601      	adds	r6, #1
 8008c3e:	e7f2      	b.n	8008c26 <__libc_init_array+0x1e>
 8008c40:	0800c190 	.word	0x0800c190
 8008c44:	0800c190 	.word	0x0800c190
 8008c48:	0800c190 	.word	0x0800c190
 8008c4c:	0800c194 	.word	0x0800c194

08008c50 <__retarget_lock_init_recursive>:
 8008c50:	4770      	bx	lr

08008c52 <__retarget_lock_acquire_recursive>:
 8008c52:	4770      	bx	lr

08008c54 <__retarget_lock_release_recursive>:
 8008c54:	4770      	bx	lr

08008c56 <quorem>:
 8008c56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5a:	6903      	ldr	r3, [r0, #16]
 8008c5c:	690c      	ldr	r4, [r1, #16]
 8008c5e:	42a3      	cmp	r3, r4
 8008c60:	4607      	mov	r7, r0
 8008c62:	db7e      	blt.n	8008d62 <quorem+0x10c>
 8008c64:	3c01      	subs	r4, #1
 8008c66:	f101 0814 	add.w	r8, r1, #20
 8008c6a:	00a3      	lsls	r3, r4, #2
 8008c6c:	f100 0514 	add.w	r5, r0, #20
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c76:	9301      	str	r3, [sp, #4]
 8008c78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c80:	3301      	adds	r3, #1
 8008c82:	429a      	cmp	r2, r3
 8008c84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c88:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c8c:	d32e      	bcc.n	8008cec <quorem+0x96>
 8008c8e:	f04f 0a00 	mov.w	sl, #0
 8008c92:	46c4      	mov	ip, r8
 8008c94:	46ae      	mov	lr, r5
 8008c96:	46d3      	mov	fp, sl
 8008c98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c9c:	b298      	uxth	r0, r3
 8008c9e:	fb06 a000 	mla	r0, r6, r0, sl
 8008ca2:	0c02      	lsrs	r2, r0, #16
 8008ca4:	0c1b      	lsrs	r3, r3, #16
 8008ca6:	fb06 2303 	mla	r3, r6, r3, r2
 8008caa:	f8de 2000 	ldr.w	r2, [lr]
 8008cae:	b280      	uxth	r0, r0
 8008cb0:	b292      	uxth	r2, r2
 8008cb2:	1a12      	subs	r2, r2, r0
 8008cb4:	445a      	add	r2, fp
 8008cb6:	f8de 0000 	ldr.w	r0, [lr]
 8008cba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008cc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008cc8:	b292      	uxth	r2, r2
 8008cca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008cce:	45e1      	cmp	r9, ip
 8008cd0:	f84e 2b04 	str.w	r2, [lr], #4
 8008cd4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008cd8:	d2de      	bcs.n	8008c98 <quorem+0x42>
 8008cda:	9b00      	ldr	r3, [sp, #0]
 8008cdc:	58eb      	ldr	r3, [r5, r3]
 8008cde:	b92b      	cbnz	r3, 8008cec <quorem+0x96>
 8008ce0:	9b01      	ldr	r3, [sp, #4]
 8008ce2:	3b04      	subs	r3, #4
 8008ce4:	429d      	cmp	r5, r3
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	d32f      	bcc.n	8008d4a <quorem+0xf4>
 8008cea:	613c      	str	r4, [r7, #16]
 8008cec:	4638      	mov	r0, r7
 8008cee:	f001 f979 	bl	8009fe4 <__mcmp>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	db25      	blt.n	8008d42 <quorem+0xec>
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cfe:	f8d1 c000 	ldr.w	ip, [r1]
 8008d02:	fa1f fe82 	uxth.w	lr, r2
 8008d06:	fa1f f38c 	uxth.w	r3, ip
 8008d0a:	eba3 030e 	sub.w	r3, r3, lr
 8008d0e:	4403      	add	r3, r0
 8008d10:	0c12      	lsrs	r2, r2, #16
 8008d12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d20:	45c1      	cmp	r9, r8
 8008d22:	f841 3b04 	str.w	r3, [r1], #4
 8008d26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d2a:	d2e6      	bcs.n	8008cfa <quorem+0xa4>
 8008d2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d34:	b922      	cbnz	r2, 8008d40 <quorem+0xea>
 8008d36:	3b04      	subs	r3, #4
 8008d38:	429d      	cmp	r5, r3
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	d30b      	bcc.n	8008d56 <quorem+0x100>
 8008d3e:	613c      	str	r4, [r7, #16]
 8008d40:	3601      	adds	r6, #1
 8008d42:	4630      	mov	r0, r6
 8008d44:	b003      	add	sp, #12
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4a:	6812      	ldr	r2, [r2, #0]
 8008d4c:	3b04      	subs	r3, #4
 8008d4e:	2a00      	cmp	r2, #0
 8008d50:	d1cb      	bne.n	8008cea <quorem+0x94>
 8008d52:	3c01      	subs	r4, #1
 8008d54:	e7c6      	b.n	8008ce4 <quorem+0x8e>
 8008d56:	6812      	ldr	r2, [r2, #0]
 8008d58:	3b04      	subs	r3, #4
 8008d5a:	2a00      	cmp	r2, #0
 8008d5c:	d1ef      	bne.n	8008d3e <quorem+0xe8>
 8008d5e:	3c01      	subs	r4, #1
 8008d60:	e7ea      	b.n	8008d38 <quorem+0xe2>
 8008d62:	2000      	movs	r0, #0
 8008d64:	e7ee      	b.n	8008d44 <quorem+0xee>
	...

08008d68 <_dtoa_r>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	69c7      	ldr	r7, [r0, #28]
 8008d6e:	b099      	sub	sp, #100	@ 0x64
 8008d70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d74:	ec55 4b10 	vmov	r4, r5, d0
 8008d78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008d7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d7c:	4683      	mov	fp, r0
 8008d7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d82:	b97f      	cbnz	r7, 8008da4 <_dtoa_r+0x3c>
 8008d84:	2010      	movs	r0, #16
 8008d86:	f000 fdfd 	bl	8009984 <malloc>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008d90:	b920      	cbnz	r0, 8008d9c <_dtoa_r+0x34>
 8008d92:	4ba7      	ldr	r3, [pc, #668]	@ (8009030 <_dtoa_r+0x2c8>)
 8008d94:	21ef      	movs	r1, #239	@ 0xef
 8008d96:	48a7      	ldr	r0, [pc, #668]	@ (8009034 <_dtoa_r+0x2cc>)
 8008d98:	f001 fc68 	bl	800a66c <__assert_func>
 8008d9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008da0:	6007      	str	r7, [r0, #0]
 8008da2:	60c7      	str	r7, [r0, #12]
 8008da4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008da8:	6819      	ldr	r1, [r3, #0]
 8008daa:	b159      	cbz	r1, 8008dc4 <_dtoa_r+0x5c>
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	604a      	str	r2, [r1, #4]
 8008db0:	2301      	movs	r3, #1
 8008db2:	4093      	lsls	r3, r2
 8008db4:	608b      	str	r3, [r1, #8]
 8008db6:	4658      	mov	r0, fp
 8008db8:	f000 feda 	bl	8009b70 <_Bfree>
 8008dbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	1e2b      	subs	r3, r5, #0
 8008dc6:	bfb9      	ittee	lt
 8008dc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008dcc:	9303      	strlt	r3, [sp, #12]
 8008dce:	2300      	movge	r3, #0
 8008dd0:	6033      	strge	r3, [r6, #0]
 8008dd2:	9f03      	ldr	r7, [sp, #12]
 8008dd4:	4b98      	ldr	r3, [pc, #608]	@ (8009038 <_dtoa_r+0x2d0>)
 8008dd6:	bfbc      	itt	lt
 8008dd8:	2201      	movlt	r2, #1
 8008dda:	6032      	strlt	r2, [r6, #0]
 8008ddc:	43bb      	bics	r3, r7
 8008dde:	d112      	bne.n	8008e06 <_dtoa_r+0x9e>
 8008de0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008de2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dec:	4323      	orrs	r3, r4
 8008dee:	f000 854d 	beq.w	800988c <_dtoa_r+0xb24>
 8008df2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008df4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800904c <_dtoa_r+0x2e4>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 854f 	beq.w	800989c <_dtoa_r+0xb34>
 8008dfe:	f10a 0303 	add.w	r3, sl, #3
 8008e02:	f000 bd49 	b.w	8009898 <_dtoa_r+0xb30>
 8008e06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	ec51 0b17 	vmov	r0, r1, d7
 8008e10:	2300      	movs	r3, #0
 8008e12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008e16:	f7f7 fe5f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	b158      	cbz	r0, 8008e36 <_dtoa_r+0xce>
 8008e1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e20:	2301      	movs	r3, #1
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e26:	b113      	cbz	r3, 8008e2e <_dtoa_r+0xc6>
 8008e28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e2a:	4b84      	ldr	r3, [pc, #528]	@ (800903c <_dtoa_r+0x2d4>)
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009050 <_dtoa_r+0x2e8>
 8008e32:	f000 bd33 	b.w	800989c <_dtoa_r+0xb34>
 8008e36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e3a:	aa16      	add	r2, sp, #88	@ 0x58
 8008e3c:	a917      	add	r1, sp, #92	@ 0x5c
 8008e3e:	4658      	mov	r0, fp
 8008e40:	f001 f980 	bl	800a144 <__d2b>
 8008e44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e48:	4681      	mov	r9, r0
 8008e4a:	2e00      	cmp	r6, #0
 8008e4c:	d077      	beq.n	8008f3e <_dtoa_r+0x1d6>
 8008e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e68:	4619      	mov	r1, r3
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	4b74      	ldr	r3, [pc, #464]	@ (8009040 <_dtoa_r+0x2d8>)
 8008e6e:	f7f7 fa13 	bl	8000298 <__aeabi_dsub>
 8008e72:	a369      	add	r3, pc, #420	@ (adr r3, 8009018 <_dtoa_r+0x2b0>)
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	f7f7 fbc6 	bl	8000608 <__aeabi_dmul>
 8008e7c:	a368      	add	r3, pc, #416	@ (adr r3, 8009020 <_dtoa_r+0x2b8>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fa0b 	bl	800029c <__adddf3>
 8008e86:	4604      	mov	r4, r0
 8008e88:	4630      	mov	r0, r6
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	f7f7 fb52 	bl	8000534 <__aeabi_i2d>
 8008e90:	a365      	add	r3, pc, #404	@ (adr r3, 8009028 <_dtoa_r+0x2c0>)
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f7f7 fbb7 	bl	8000608 <__aeabi_dmul>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 f9fb 	bl	800029c <__adddf3>
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	f7f7 fe5d 	bl	8000b68 <__aeabi_d2iz>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fe18 	bl	8000aec <__aeabi_dcmplt>
 8008ebc:	b140      	cbz	r0, 8008ed0 <_dtoa_r+0x168>
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	f7f7 fb38 	bl	8000534 <__aeabi_i2d>
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	462b      	mov	r3, r5
 8008ec8:	f7f7 fe06 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ecc:	b900      	cbnz	r0, 8008ed0 <_dtoa_r+0x168>
 8008ece:	3f01      	subs	r7, #1
 8008ed0:	2f16      	cmp	r7, #22
 8008ed2:	d851      	bhi.n	8008f78 <_dtoa_r+0x210>
 8008ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8009044 <_dtoa_r+0x2dc>)
 8008ed6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ee2:	f7f7 fe03 	bl	8000aec <__aeabi_dcmplt>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d048      	beq.n	8008f7c <_dtoa_r+0x214>
 8008eea:	3f01      	subs	r7, #1
 8008eec:	2300      	movs	r3, #0
 8008eee:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ef0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ef2:	1b9b      	subs	r3, r3, r6
 8008ef4:	1e5a      	subs	r2, r3, #1
 8008ef6:	bf44      	itt	mi
 8008ef8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008efc:	2300      	movmi	r3, #0
 8008efe:	9208      	str	r2, [sp, #32]
 8008f00:	bf54      	ite	pl
 8008f02:	f04f 0800 	movpl.w	r8, #0
 8008f06:	9308      	strmi	r3, [sp, #32]
 8008f08:	2f00      	cmp	r7, #0
 8008f0a:	db39      	blt.n	8008f80 <_dtoa_r+0x218>
 8008f0c:	9b08      	ldr	r3, [sp, #32]
 8008f0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008f10:	443b      	add	r3, r7
 8008f12:	9308      	str	r3, [sp, #32]
 8008f14:	2300      	movs	r3, #0
 8008f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f1a:	2b09      	cmp	r3, #9
 8008f1c:	d864      	bhi.n	8008fe8 <_dtoa_r+0x280>
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	bfc4      	itt	gt
 8008f22:	3b04      	subgt	r3, #4
 8008f24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f28:	f1a3 0302 	sub.w	r3, r3, #2
 8008f2c:	bfcc      	ite	gt
 8008f2e:	2400      	movgt	r4, #0
 8008f30:	2401      	movle	r4, #1
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d863      	bhi.n	8008ffe <_dtoa_r+0x296>
 8008f36:	e8df f003 	tbb	[pc, r3]
 8008f3a:	372a      	.short	0x372a
 8008f3c:	5535      	.short	0x5535
 8008f3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008f42:	441e      	add	r6, r3
 8008f44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	bfc1      	itttt	gt
 8008f4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f50:	409f      	lslgt	r7, r3
 8008f52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f5a:	bfd6      	itet	le
 8008f5c:	f1c3 0320 	rsble	r3, r3, #32
 8008f60:	ea47 0003 	orrgt.w	r0, r7, r3
 8008f64:	fa04 f003 	lslle.w	r0, r4, r3
 8008f68:	f7f7 fad4 	bl	8000514 <__aeabi_ui2d>
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f72:	3e01      	subs	r6, #1
 8008f74:	9214      	str	r2, [sp, #80]	@ 0x50
 8008f76:	e777      	b.n	8008e68 <_dtoa_r+0x100>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e7b8      	b.n	8008eee <_dtoa_r+0x186>
 8008f7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008f7e:	e7b7      	b.n	8008ef0 <_dtoa_r+0x188>
 8008f80:	427b      	negs	r3, r7
 8008f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f84:	2300      	movs	r3, #0
 8008f86:	eba8 0807 	sub.w	r8, r8, r7
 8008f8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f8c:	e7c4      	b.n	8008f18 <_dtoa_r+0x1b0>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	dc35      	bgt.n	8009004 <_dtoa_r+0x29c>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	9307      	str	r3, [sp, #28]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fa2:	e00b      	b.n	8008fbc <_dtoa_r+0x254>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e7f3      	b.n	8008f90 <_dtoa_r+0x228>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fae:	18fb      	adds	r3, r7, r3
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	9307      	str	r3, [sp, #28]
 8008fb8:	bfb8      	it	lt
 8008fba:	2301      	movlt	r3, #1
 8008fbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	2204      	movs	r2, #4
 8008fc4:	f102 0514 	add.w	r5, r2, #20
 8008fc8:	429d      	cmp	r5, r3
 8008fca:	d91f      	bls.n	800900c <_dtoa_r+0x2a4>
 8008fcc:	6041      	str	r1, [r0, #4]
 8008fce:	4658      	mov	r0, fp
 8008fd0:	f000 fd8e 	bl	8009af0 <_Balloc>
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d13c      	bne.n	8009054 <_dtoa_r+0x2ec>
 8008fda:	4b1b      	ldr	r3, [pc, #108]	@ (8009048 <_dtoa_r+0x2e0>)
 8008fdc:	4602      	mov	r2, r0
 8008fde:	f240 11af 	movw	r1, #431	@ 0x1af
 8008fe2:	e6d8      	b.n	8008d96 <_dtoa_r+0x2e>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e7e0      	b.n	8008faa <_dtoa_r+0x242>
 8008fe8:	2401      	movs	r4, #1
 8008fea:	2300      	movs	r3, #0
 8008fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	9307      	str	r3, [sp, #28]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2312      	movs	r3, #18
 8008ffc:	e7d0      	b.n	8008fa0 <_dtoa_r+0x238>
 8008ffe:	2301      	movs	r3, #1
 8009000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009002:	e7f5      	b.n	8008ff0 <_dtoa_r+0x288>
 8009004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	9307      	str	r3, [sp, #28]
 800900a:	e7d7      	b.n	8008fbc <_dtoa_r+0x254>
 800900c:	3101      	adds	r1, #1
 800900e:	0052      	lsls	r2, r2, #1
 8009010:	e7d8      	b.n	8008fc4 <_dtoa_r+0x25c>
 8009012:	bf00      	nop
 8009014:	f3af 8000 	nop.w
 8009018:	636f4361 	.word	0x636f4361
 800901c:	3fd287a7 	.word	0x3fd287a7
 8009020:	8b60c8b3 	.word	0x8b60c8b3
 8009024:	3fc68a28 	.word	0x3fc68a28
 8009028:	509f79fb 	.word	0x509f79fb
 800902c:	3fd34413 	.word	0x3fd34413
 8009030:	0800bf26 	.word	0x0800bf26
 8009034:	0800bf3d 	.word	0x0800bf3d
 8009038:	7ff00000 	.word	0x7ff00000
 800903c:	0800bef6 	.word	0x0800bef6
 8009040:	3ff80000 	.word	0x3ff80000
 8009044:	0800c038 	.word	0x0800c038
 8009048:	0800bf95 	.word	0x0800bf95
 800904c:	0800bf22 	.word	0x0800bf22
 8009050:	0800bef5 	.word	0x0800bef5
 8009054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009058:	6018      	str	r0, [r3, #0]
 800905a:	9b07      	ldr	r3, [sp, #28]
 800905c:	2b0e      	cmp	r3, #14
 800905e:	f200 80a4 	bhi.w	80091aa <_dtoa_r+0x442>
 8009062:	2c00      	cmp	r4, #0
 8009064:	f000 80a1 	beq.w	80091aa <_dtoa_r+0x442>
 8009068:	2f00      	cmp	r7, #0
 800906a:	dd33      	ble.n	80090d4 <_dtoa_r+0x36c>
 800906c:	4bad      	ldr	r3, [pc, #692]	@ (8009324 <_dtoa_r+0x5bc>)
 800906e:	f007 020f 	and.w	r2, r7, #15
 8009072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009076:	ed93 7b00 	vldr	d7, [r3]
 800907a:	05f8      	lsls	r0, r7, #23
 800907c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009080:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009084:	d516      	bpl.n	80090b4 <_dtoa_r+0x34c>
 8009086:	4ba8      	ldr	r3, [pc, #672]	@ (8009328 <_dtoa_r+0x5c0>)
 8009088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800908c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009090:	f7f7 fbe4 	bl	800085c <__aeabi_ddiv>
 8009094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009098:	f004 040f 	and.w	r4, r4, #15
 800909c:	2603      	movs	r6, #3
 800909e:	4da2      	ldr	r5, [pc, #648]	@ (8009328 <_dtoa_r+0x5c0>)
 80090a0:	b954      	cbnz	r4, 80090b8 <_dtoa_r+0x350>
 80090a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090aa:	f7f7 fbd7 	bl	800085c <__aeabi_ddiv>
 80090ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090b2:	e028      	b.n	8009106 <_dtoa_r+0x39e>
 80090b4:	2602      	movs	r6, #2
 80090b6:	e7f2      	b.n	800909e <_dtoa_r+0x336>
 80090b8:	07e1      	lsls	r1, r4, #31
 80090ba:	d508      	bpl.n	80090ce <_dtoa_r+0x366>
 80090bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090c4:	f7f7 faa0 	bl	8000608 <__aeabi_dmul>
 80090c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090cc:	3601      	adds	r6, #1
 80090ce:	1064      	asrs	r4, r4, #1
 80090d0:	3508      	adds	r5, #8
 80090d2:	e7e5      	b.n	80090a0 <_dtoa_r+0x338>
 80090d4:	f000 80d2 	beq.w	800927c <_dtoa_r+0x514>
 80090d8:	427c      	negs	r4, r7
 80090da:	4b92      	ldr	r3, [pc, #584]	@ (8009324 <_dtoa_r+0x5bc>)
 80090dc:	4d92      	ldr	r5, [pc, #584]	@ (8009328 <_dtoa_r+0x5c0>)
 80090de:	f004 020f 	and.w	r2, r4, #15
 80090e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090ee:	f7f7 fa8b 	bl	8000608 <__aeabi_dmul>
 80090f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090f6:	1124      	asrs	r4, r4, #4
 80090f8:	2300      	movs	r3, #0
 80090fa:	2602      	movs	r6, #2
 80090fc:	2c00      	cmp	r4, #0
 80090fe:	f040 80b2 	bne.w	8009266 <_dtoa_r+0x4fe>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1d3      	bne.n	80090ae <_dtoa_r+0x346>
 8009106:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009108:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 80b7 	beq.w	8009280 <_dtoa_r+0x518>
 8009112:	4b86      	ldr	r3, [pc, #536]	@ (800932c <_dtoa_r+0x5c4>)
 8009114:	2200      	movs	r2, #0
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	f7f7 fce7 	bl	8000aec <__aeabi_dcmplt>
 800911e:	2800      	cmp	r0, #0
 8009120:	f000 80ae 	beq.w	8009280 <_dtoa_r+0x518>
 8009124:	9b07      	ldr	r3, [sp, #28]
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 80aa 	beq.w	8009280 <_dtoa_r+0x518>
 800912c:	9b00      	ldr	r3, [sp, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	dd37      	ble.n	80091a2 <_dtoa_r+0x43a>
 8009132:	1e7b      	subs	r3, r7, #1
 8009134:	9304      	str	r3, [sp, #16]
 8009136:	4620      	mov	r0, r4
 8009138:	4b7d      	ldr	r3, [pc, #500]	@ (8009330 <_dtoa_r+0x5c8>)
 800913a:	2200      	movs	r2, #0
 800913c:	4629      	mov	r1, r5
 800913e:	f7f7 fa63 	bl	8000608 <__aeabi_dmul>
 8009142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009146:	9c00      	ldr	r4, [sp, #0]
 8009148:	3601      	adds	r6, #1
 800914a:	4630      	mov	r0, r6
 800914c:	f7f7 f9f2 	bl	8000534 <__aeabi_i2d>
 8009150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009154:	f7f7 fa58 	bl	8000608 <__aeabi_dmul>
 8009158:	4b76      	ldr	r3, [pc, #472]	@ (8009334 <_dtoa_r+0x5cc>)
 800915a:	2200      	movs	r2, #0
 800915c:	f7f7 f89e 	bl	800029c <__adddf3>
 8009160:	4605      	mov	r5, r0
 8009162:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009166:	2c00      	cmp	r4, #0
 8009168:	f040 808d 	bne.w	8009286 <_dtoa_r+0x51e>
 800916c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009170:	4b71      	ldr	r3, [pc, #452]	@ (8009338 <_dtoa_r+0x5d0>)
 8009172:	2200      	movs	r2, #0
 8009174:	f7f7 f890 	bl	8000298 <__aeabi_dsub>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009180:	462a      	mov	r2, r5
 8009182:	4633      	mov	r3, r6
 8009184:	f7f7 fcd0 	bl	8000b28 <__aeabi_dcmpgt>
 8009188:	2800      	cmp	r0, #0
 800918a:	f040 828b 	bne.w	80096a4 <_dtoa_r+0x93c>
 800918e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009192:	462a      	mov	r2, r5
 8009194:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009198:	f7f7 fca8 	bl	8000aec <__aeabi_dcmplt>
 800919c:	2800      	cmp	r0, #0
 800919e:	f040 8128 	bne.w	80093f2 <_dtoa_r+0x68a>
 80091a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80091a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80091aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f2c0 815a 	blt.w	8009466 <_dtoa_r+0x6fe>
 80091b2:	2f0e      	cmp	r7, #14
 80091b4:	f300 8157 	bgt.w	8009466 <_dtoa_r+0x6fe>
 80091b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009324 <_dtoa_r+0x5bc>)
 80091ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091be:	ed93 7b00 	vldr	d7, [r3]
 80091c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	ed8d 7b00 	vstr	d7, [sp]
 80091ca:	da03      	bge.n	80091d4 <_dtoa_r+0x46c>
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f340 8101 	ble.w	80093d6 <_dtoa_r+0x66e>
 80091d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80091d8:	4656      	mov	r6, sl
 80091da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091de:	4620      	mov	r0, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	f7f7 fb3b 	bl	800085c <__aeabi_ddiv>
 80091e6:	f7f7 fcbf 	bl	8000b68 <__aeabi_d2iz>
 80091ea:	4680      	mov	r8, r0
 80091ec:	f7f7 f9a2 	bl	8000534 <__aeabi_i2d>
 80091f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091f4:	f7f7 fa08 	bl	8000608 <__aeabi_dmul>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009204:	f7f7 f848 	bl	8000298 <__aeabi_dsub>
 8009208:	f806 4b01 	strb.w	r4, [r6], #1
 800920c:	9d07      	ldr	r5, [sp, #28]
 800920e:	eba6 040a 	sub.w	r4, r6, sl
 8009212:	42a5      	cmp	r5, r4
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	f040 8117 	bne.w	800944a <_dtoa_r+0x6e2>
 800921c:	f7f7 f83e 	bl	800029c <__adddf3>
 8009220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	f7f7 fc7e 	bl	8000b28 <__aeabi_dcmpgt>
 800922c:	2800      	cmp	r0, #0
 800922e:	f040 80f9 	bne.w	8009424 <_dtoa_r+0x6bc>
 8009232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009236:	4620      	mov	r0, r4
 8009238:	4629      	mov	r1, r5
 800923a:	f7f7 fc4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800923e:	b118      	cbz	r0, 8009248 <_dtoa_r+0x4e0>
 8009240:	f018 0f01 	tst.w	r8, #1
 8009244:	f040 80ee 	bne.w	8009424 <_dtoa_r+0x6bc>
 8009248:	4649      	mov	r1, r9
 800924a:	4658      	mov	r0, fp
 800924c:	f000 fc90 	bl	8009b70 <_Bfree>
 8009250:	2300      	movs	r3, #0
 8009252:	7033      	strb	r3, [r6, #0]
 8009254:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009256:	3701      	adds	r7, #1
 8009258:	601f      	str	r7, [r3, #0]
 800925a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 831d 	beq.w	800989c <_dtoa_r+0xb34>
 8009262:	601e      	str	r6, [r3, #0]
 8009264:	e31a      	b.n	800989c <_dtoa_r+0xb34>
 8009266:	07e2      	lsls	r2, r4, #31
 8009268:	d505      	bpl.n	8009276 <_dtoa_r+0x50e>
 800926a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800926e:	f7f7 f9cb 	bl	8000608 <__aeabi_dmul>
 8009272:	3601      	adds	r6, #1
 8009274:	2301      	movs	r3, #1
 8009276:	1064      	asrs	r4, r4, #1
 8009278:	3508      	adds	r5, #8
 800927a:	e73f      	b.n	80090fc <_dtoa_r+0x394>
 800927c:	2602      	movs	r6, #2
 800927e:	e742      	b.n	8009106 <_dtoa_r+0x39e>
 8009280:	9c07      	ldr	r4, [sp, #28]
 8009282:	9704      	str	r7, [sp, #16]
 8009284:	e761      	b.n	800914a <_dtoa_r+0x3e2>
 8009286:	4b27      	ldr	r3, [pc, #156]	@ (8009324 <_dtoa_r+0x5bc>)
 8009288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800928a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800928e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009292:	4454      	add	r4, sl
 8009294:	2900      	cmp	r1, #0
 8009296:	d053      	beq.n	8009340 <_dtoa_r+0x5d8>
 8009298:	4928      	ldr	r1, [pc, #160]	@ (800933c <_dtoa_r+0x5d4>)
 800929a:	2000      	movs	r0, #0
 800929c:	f7f7 fade 	bl	800085c <__aeabi_ddiv>
 80092a0:	4633      	mov	r3, r6
 80092a2:	462a      	mov	r2, r5
 80092a4:	f7f6 fff8 	bl	8000298 <__aeabi_dsub>
 80092a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80092ac:	4656      	mov	r6, sl
 80092ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092b2:	f7f7 fc59 	bl	8000b68 <__aeabi_d2iz>
 80092b6:	4605      	mov	r5, r0
 80092b8:	f7f7 f93c 	bl	8000534 <__aeabi_i2d>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092c4:	f7f6 ffe8 	bl	8000298 <__aeabi_dsub>
 80092c8:	3530      	adds	r5, #48	@ 0x30
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092d2:	f806 5b01 	strb.w	r5, [r6], #1
 80092d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092da:	f7f7 fc07 	bl	8000aec <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d171      	bne.n	80093c6 <_dtoa_r+0x65e>
 80092e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092e6:	4911      	ldr	r1, [pc, #68]	@ (800932c <_dtoa_r+0x5c4>)
 80092e8:	2000      	movs	r0, #0
 80092ea:	f7f6 ffd5 	bl	8000298 <__aeabi_dsub>
 80092ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092f2:	f7f7 fbfb 	bl	8000aec <__aeabi_dcmplt>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f040 8095 	bne.w	8009426 <_dtoa_r+0x6be>
 80092fc:	42a6      	cmp	r6, r4
 80092fe:	f43f af50 	beq.w	80091a2 <_dtoa_r+0x43a>
 8009302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009306:	4b0a      	ldr	r3, [pc, #40]	@ (8009330 <_dtoa_r+0x5c8>)
 8009308:	2200      	movs	r2, #0
 800930a:	f7f7 f97d 	bl	8000608 <__aeabi_dmul>
 800930e:	4b08      	ldr	r3, [pc, #32]	@ (8009330 <_dtoa_r+0x5c8>)
 8009310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009314:	2200      	movs	r2, #0
 8009316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800931a:	f7f7 f975 	bl	8000608 <__aeabi_dmul>
 800931e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009322:	e7c4      	b.n	80092ae <_dtoa_r+0x546>
 8009324:	0800c038 	.word	0x0800c038
 8009328:	0800c010 	.word	0x0800c010
 800932c:	3ff00000 	.word	0x3ff00000
 8009330:	40240000 	.word	0x40240000
 8009334:	401c0000 	.word	0x401c0000
 8009338:	40140000 	.word	0x40140000
 800933c:	3fe00000 	.word	0x3fe00000
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	f7f7 f960 	bl	8000608 <__aeabi_dmul>
 8009348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800934c:	9415      	str	r4, [sp, #84]	@ 0x54
 800934e:	4656      	mov	r6, sl
 8009350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009354:	f7f7 fc08 	bl	8000b68 <__aeabi_d2iz>
 8009358:	4605      	mov	r5, r0
 800935a:	f7f7 f8eb 	bl	8000534 <__aeabi_i2d>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009366:	f7f6 ff97 	bl	8000298 <__aeabi_dsub>
 800936a:	3530      	adds	r5, #48	@ 0x30
 800936c:	f806 5b01 	strb.w	r5, [r6], #1
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	42a6      	cmp	r6, r4
 8009376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	d124      	bne.n	80093ca <_dtoa_r+0x662>
 8009380:	4bac      	ldr	r3, [pc, #688]	@ (8009634 <_dtoa_r+0x8cc>)
 8009382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009386:	f7f6 ff89 	bl	800029c <__adddf3>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009392:	f7f7 fbc9 	bl	8000b28 <__aeabi_dcmpgt>
 8009396:	2800      	cmp	r0, #0
 8009398:	d145      	bne.n	8009426 <_dtoa_r+0x6be>
 800939a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800939e:	49a5      	ldr	r1, [pc, #660]	@ (8009634 <_dtoa_r+0x8cc>)
 80093a0:	2000      	movs	r0, #0
 80093a2:	f7f6 ff79 	bl	8000298 <__aeabi_dsub>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ae:	f7f7 fb9d 	bl	8000aec <__aeabi_dcmplt>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f43f aef5 	beq.w	80091a2 <_dtoa_r+0x43a>
 80093b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80093ba:	1e73      	subs	r3, r6, #1
 80093bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80093be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093c2:	2b30      	cmp	r3, #48	@ 0x30
 80093c4:	d0f8      	beq.n	80093b8 <_dtoa_r+0x650>
 80093c6:	9f04      	ldr	r7, [sp, #16]
 80093c8:	e73e      	b.n	8009248 <_dtoa_r+0x4e0>
 80093ca:	4b9b      	ldr	r3, [pc, #620]	@ (8009638 <_dtoa_r+0x8d0>)
 80093cc:	f7f7 f91c 	bl	8000608 <__aeabi_dmul>
 80093d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d4:	e7bc      	b.n	8009350 <_dtoa_r+0x5e8>
 80093d6:	d10c      	bne.n	80093f2 <_dtoa_r+0x68a>
 80093d8:	4b98      	ldr	r3, [pc, #608]	@ (800963c <_dtoa_r+0x8d4>)
 80093da:	2200      	movs	r2, #0
 80093dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093e0:	f7f7 f912 	bl	8000608 <__aeabi_dmul>
 80093e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093e8:	f7f7 fb94 	bl	8000b14 <__aeabi_dcmpge>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f000 8157 	beq.w	80096a0 <_dtoa_r+0x938>
 80093f2:	2400      	movs	r4, #0
 80093f4:	4625      	mov	r5, r4
 80093f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f8:	43db      	mvns	r3, r3
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	4656      	mov	r6, sl
 80093fe:	2700      	movs	r7, #0
 8009400:	4621      	mov	r1, r4
 8009402:	4658      	mov	r0, fp
 8009404:	f000 fbb4 	bl	8009b70 <_Bfree>
 8009408:	2d00      	cmp	r5, #0
 800940a:	d0dc      	beq.n	80093c6 <_dtoa_r+0x65e>
 800940c:	b12f      	cbz	r7, 800941a <_dtoa_r+0x6b2>
 800940e:	42af      	cmp	r7, r5
 8009410:	d003      	beq.n	800941a <_dtoa_r+0x6b2>
 8009412:	4639      	mov	r1, r7
 8009414:	4658      	mov	r0, fp
 8009416:	f000 fbab 	bl	8009b70 <_Bfree>
 800941a:	4629      	mov	r1, r5
 800941c:	4658      	mov	r0, fp
 800941e:	f000 fba7 	bl	8009b70 <_Bfree>
 8009422:	e7d0      	b.n	80093c6 <_dtoa_r+0x65e>
 8009424:	9704      	str	r7, [sp, #16]
 8009426:	4633      	mov	r3, r6
 8009428:	461e      	mov	r6, r3
 800942a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800942e:	2a39      	cmp	r2, #57	@ 0x39
 8009430:	d107      	bne.n	8009442 <_dtoa_r+0x6da>
 8009432:	459a      	cmp	sl, r3
 8009434:	d1f8      	bne.n	8009428 <_dtoa_r+0x6c0>
 8009436:	9a04      	ldr	r2, [sp, #16]
 8009438:	3201      	adds	r2, #1
 800943a:	9204      	str	r2, [sp, #16]
 800943c:	2230      	movs	r2, #48	@ 0x30
 800943e:	f88a 2000 	strb.w	r2, [sl]
 8009442:	781a      	ldrb	r2, [r3, #0]
 8009444:	3201      	adds	r2, #1
 8009446:	701a      	strb	r2, [r3, #0]
 8009448:	e7bd      	b.n	80093c6 <_dtoa_r+0x65e>
 800944a:	4b7b      	ldr	r3, [pc, #492]	@ (8009638 <_dtoa_r+0x8d0>)
 800944c:	2200      	movs	r2, #0
 800944e:	f7f7 f8db 	bl	8000608 <__aeabi_dmul>
 8009452:	2200      	movs	r2, #0
 8009454:	2300      	movs	r3, #0
 8009456:	4604      	mov	r4, r0
 8009458:	460d      	mov	r5, r1
 800945a:	f7f7 fb3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800945e:	2800      	cmp	r0, #0
 8009460:	f43f aebb 	beq.w	80091da <_dtoa_r+0x472>
 8009464:	e6f0      	b.n	8009248 <_dtoa_r+0x4e0>
 8009466:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009468:	2a00      	cmp	r2, #0
 800946a:	f000 80db 	beq.w	8009624 <_dtoa_r+0x8bc>
 800946e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009470:	2a01      	cmp	r2, #1
 8009472:	f300 80bf 	bgt.w	80095f4 <_dtoa_r+0x88c>
 8009476:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009478:	2a00      	cmp	r2, #0
 800947a:	f000 80b7 	beq.w	80095ec <_dtoa_r+0x884>
 800947e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009482:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009484:	4646      	mov	r6, r8
 8009486:	9a08      	ldr	r2, [sp, #32]
 8009488:	2101      	movs	r1, #1
 800948a:	441a      	add	r2, r3
 800948c:	4658      	mov	r0, fp
 800948e:	4498      	add	r8, r3
 8009490:	9208      	str	r2, [sp, #32]
 8009492:	f000 fc21 	bl	8009cd8 <__i2b>
 8009496:	4605      	mov	r5, r0
 8009498:	b15e      	cbz	r6, 80094b2 <_dtoa_r+0x74a>
 800949a:	9b08      	ldr	r3, [sp, #32]
 800949c:	2b00      	cmp	r3, #0
 800949e:	dd08      	ble.n	80094b2 <_dtoa_r+0x74a>
 80094a0:	42b3      	cmp	r3, r6
 80094a2:	9a08      	ldr	r2, [sp, #32]
 80094a4:	bfa8      	it	ge
 80094a6:	4633      	movge	r3, r6
 80094a8:	eba8 0803 	sub.w	r8, r8, r3
 80094ac:	1af6      	subs	r6, r6, r3
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	9308      	str	r3, [sp, #32]
 80094b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094b4:	b1f3      	cbz	r3, 80094f4 <_dtoa_r+0x78c>
 80094b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80b7 	beq.w	800962c <_dtoa_r+0x8c4>
 80094be:	b18c      	cbz	r4, 80094e4 <_dtoa_r+0x77c>
 80094c0:	4629      	mov	r1, r5
 80094c2:	4622      	mov	r2, r4
 80094c4:	4658      	mov	r0, fp
 80094c6:	f000 fcc7 	bl	8009e58 <__pow5mult>
 80094ca:	464a      	mov	r2, r9
 80094cc:	4601      	mov	r1, r0
 80094ce:	4605      	mov	r5, r0
 80094d0:	4658      	mov	r0, fp
 80094d2:	f000 fc17 	bl	8009d04 <__multiply>
 80094d6:	4649      	mov	r1, r9
 80094d8:	9004      	str	r0, [sp, #16]
 80094da:	4658      	mov	r0, fp
 80094dc:	f000 fb48 	bl	8009b70 <_Bfree>
 80094e0:	9b04      	ldr	r3, [sp, #16]
 80094e2:	4699      	mov	r9, r3
 80094e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094e6:	1b1a      	subs	r2, r3, r4
 80094e8:	d004      	beq.n	80094f4 <_dtoa_r+0x78c>
 80094ea:	4649      	mov	r1, r9
 80094ec:	4658      	mov	r0, fp
 80094ee:	f000 fcb3 	bl	8009e58 <__pow5mult>
 80094f2:	4681      	mov	r9, r0
 80094f4:	2101      	movs	r1, #1
 80094f6:	4658      	mov	r0, fp
 80094f8:	f000 fbee 	bl	8009cd8 <__i2b>
 80094fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094fe:	4604      	mov	r4, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 81cf 	beq.w	80098a4 <_dtoa_r+0xb3c>
 8009506:	461a      	mov	r2, r3
 8009508:	4601      	mov	r1, r0
 800950a:	4658      	mov	r0, fp
 800950c:	f000 fca4 	bl	8009e58 <__pow5mult>
 8009510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009512:	2b01      	cmp	r3, #1
 8009514:	4604      	mov	r4, r0
 8009516:	f300 8095 	bgt.w	8009644 <_dtoa_r+0x8dc>
 800951a:	9b02      	ldr	r3, [sp, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f040 8087 	bne.w	8009630 <_dtoa_r+0x8c8>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009528:	2b00      	cmp	r3, #0
 800952a:	f040 8089 	bne.w	8009640 <_dtoa_r+0x8d8>
 800952e:	9b03      	ldr	r3, [sp, #12]
 8009530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009534:	0d1b      	lsrs	r3, r3, #20
 8009536:	051b      	lsls	r3, r3, #20
 8009538:	b12b      	cbz	r3, 8009546 <_dtoa_r+0x7de>
 800953a:	9b08      	ldr	r3, [sp, #32]
 800953c:	3301      	adds	r3, #1
 800953e:	9308      	str	r3, [sp, #32]
 8009540:	f108 0801 	add.w	r8, r8, #1
 8009544:	2301      	movs	r3, #1
 8009546:	930a      	str	r3, [sp, #40]	@ 0x28
 8009548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 81b0 	beq.w	80098b0 <_dtoa_r+0xb48>
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009556:	6918      	ldr	r0, [r3, #16]
 8009558:	f000 fb72 	bl	8009c40 <__hi0bits>
 800955c:	f1c0 0020 	rsb	r0, r0, #32
 8009560:	9b08      	ldr	r3, [sp, #32]
 8009562:	4418      	add	r0, r3
 8009564:	f010 001f 	ands.w	r0, r0, #31
 8009568:	d077      	beq.n	800965a <_dtoa_r+0x8f2>
 800956a:	f1c0 0320 	rsb	r3, r0, #32
 800956e:	2b04      	cmp	r3, #4
 8009570:	dd6b      	ble.n	800964a <_dtoa_r+0x8e2>
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	f1c0 001c 	rsb	r0, r0, #28
 8009578:	4403      	add	r3, r0
 800957a:	4480      	add	r8, r0
 800957c:	4406      	add	r6, r0
 800957e:	9308      	str	r3, [sp, #32]
 8009580:	f1b8 0f00 	cmp.w	r8, #0
 8009584:	dd05      	ble.n	8009592 <_dtoa_r+0x82a>
 8009586:	4649      	mov	r1, r9
 8009588:	4642      	mov	r2, r8
 800958a:	4658      	mov	r0, fp
 800958c:	f000 fcbe 	bl	8009f0c <__lshift>
 8009590:	4681      	mov	r9, r0
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	2b00      	cmp	r3, #0
 8009596:	dd05      	ble.n	80095a4 <_dtoa_r+0x83c>
 8009598:	4621      	mov	r1, r4
 800959a:	461a      	mov	r2, r3
 800959c:	4658      	mov	r0, fp
 800959e:	f000 fcb5 	bl	8009f0c <__lshift>
 80095a2:	4604      	mov	r4, r0
 80095a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d059      	beq.n	800965e <_dtoa_r+0x8f6>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4648      	mov	r0, r9
 80095ae:	f000 fd19 	bl	8009fe4 <__mcmp>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	da53      	bge.n	800965e <_dtoa_r+0x8f6>
 80095b6:	1e7b      	subs	r3, r7, #1
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	4649      	mov	r1, r9
 80095bc:	2300      	movs	r3, #0
 80095be:	220a      	movs	r2, #10
 80095c0:	4658      	mov	r0, fp
 80095c2:	f000 faf7 	bl	8009bb4 <__multadd>
 80095c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095c8:	4681      	mov	r9, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8172 	beq.w	80098b4 <_dtoa_r+0xb4c>
 80095d0:	2300      	movs	r3, #0
 80095d2:	4629      	mov	r1, r5
 80095d4:	220a      	movs	r2, #10
 80095d6:	4658      	mov	r0, fp
 80095d8:	f000 faec 	bl	8009bb4 <__multadd>
 80095dc:	9b00      	ldr	r3, [sp, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	4605      	mov	r5, r0
 80095e2:	dc67      	bgt.n	80096b4 <_dtoa_r+0x94c>
 80095e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	dc41      	bgt.n	800966e <_dtoa_r+0x906>
 80095ea:	e063      	b.n	80096b4 <_dtoa_r+0x94c>
 80095ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80095f2:	e746      	b.n	8009482 <_dtoa_r+0x71a>
 80095f4:	9b07      	ldr	r3, [sp, #28]
 80095f6:	1e5c      	subs	r4, r3, #1
 80095f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095fa:	42a3      	cmp	r3, r4
 80095fc:	bfbf      	itttt	lt
 80095fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009600:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009602:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009604:	1ae3      	sublt	r3, r4, r3
 8009606:	bfb4      	ite	lt
 8009608:	18d2      	addlt	r2, r2, r3
 800960a:	1b1c      	subge	r4, r3, r4
 800960c:	9b07      	ldr	r3, [sp, #28]
 800960e:	bfbc      	itt	lt
 8009610:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009612:	2400      	movlt	r4, #0
 8009614:	2b00      	cmp	r3, #0
 8009616:	bfb5      	itete	lt
 8009618:	eba8 0603 	sublt.w	r6, r8, r3
 800961c:	9b07      	ldrge	r3, [sp, #28]
 800961e:	2300      	movlt	r3, #0
 8009620:	4646      	movge	r6, r8
 8009622:	e730      	b.n	8009486 <_dtoa_r+0x71e>
 8009624:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009626:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009628:	4646      	mov	r6, r8
 800962a:	e735      	b.n	8009498 <_dtoa_r+0x730>
 800962c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800962e:	e75c      	b.n	80094ea <_dtoa_r+0x782>
 8009630:	2300      	movs	r3, #0
 8009632:	e788      	b.n	8009546 <_dtoa_r+0x7de>
 8009634:	3fe00000 	.word	0x3fe00000
 8009638:	40240000 	.word	0x40240000
 800963c:	40140000 	.word	0x40140000
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	e780      	b.n	8009546 <_dtoa_r+0x7de>
 8009644:	2300      	movs	r3, #0
 8009646:	930a      	str	r3, [sp, #40]	@ 0x28
 8009648:	e782      	b.n	8009550 <_dtoa_r+0x7e8>
 800964a:	d099      	beq.n	8009580 <_dtoa_r+0x818>
 800964c:	9a08      	ldr	r2, [sp, #32]
 800964e:	331c      	adds	r3, #28
 8009650:	441a      	add	r2, r3
 8009652:	4498      	add	r8, r3
 8009654:	441e      	add	r6, r3
 8009656:	9208      	str	r2, [sp, #32]
 8009658:	e792      	b.n	8009580 <_dtoa_r+0x818>
 800965a:	4603      	mov	r3, r0
 800965c:	e7f6      	b.n	800964c <_dtoa_r+0x8e4>
 800965e:	9b07      	ldr	r3, [sp, #28]
 8009660:	9704      	str	r7, [sp, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	dc20      	bgt.n	80096a8 <_dtoa_r+0x940>
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800966a:	2b02      	cmp	r3, #2
 800966c:	dd1e      	ble.n	80096ac <_dtoa_r+0x944>
 800966e:	9b00      	ldr	r3, [sp, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f47f aec0 	bne.w	80093f6 <_dtoa_r+0x68e>
 8009676:	4621      	mov	r1, r4
 8009678:	2205      	movs	r2, #5
 800967a:	4658      	mov	r0, fp
 800967c:	f000 fa9a 	bl	8009bb4 <__multadd>
 8009680:	4601      	mov	r1, r0
 8009682:	4604      	mov	r4, r0
 8009684:	4648      	mov	r0, r9
 8009686:	f000 fcad 	bl	8009fe4 <__mcmp>
 800968a:	2800      	cmp	r0, #0
 800968c:	f77f aeb3 	ble.w	80093f6 <_dtoa_r+0x68e>
 8009690:	4656      	mov	r6, sl
 8009692:	2331      	movs	r3, #49	@ 0x31
 8009694:	f806 3b01 	strb.w	r3, [r6], #1
 8009698:	9b04      	ldr	r3, [sp, #16]
 800969a:	3301      	adds	r3, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	e6ae      	b.n	80093fe <_dtoa_r+0x696>
 80096a0:	9c07      	ldr	r4, [sp, #28]
 80096a2:	9704      	str	r7, [sp, #16]
 80096a4:	4625      	mov	r5, r4
 80096a6:	e7f3      	b.n	8009690 <_dtoa_r+0x928>
 80096a8:	9b07      	ldr	r3, [sp, #28]
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8104 	beq.w	80098bc <_dtoa_r+0xb54>
 80096b4:	2e00      	cmp	r6, #0
 80096b6:	dd05      	ble.n	80096c4 <_dtoa_r+0x95c>
 80096b8:	4629      	mov	r1, r5
 80096ba:	4632      	mov	r2, r6
 80096bc:	4658      	mov	r0, fp
 80096be:	f000 fc25 	bl	8009f0c <__lshift>
 80096c2:	4605      	mov	r5, r0
 80096c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d05a      	beq.n	8009780 <_dtoa_r+0xa18>
 80096ca:	6869      	ldr	r1, [r5, #4]
 80096cc:	4658      	mov	r0, fp
 80096ce:	f000 fa0f 	bl	8009af0 <_Balloc>
 80096d2:	4606      	mov	r6, r0
 80096d4:	b928      	cbnz	r0, 80096e2 <_dtoa_r+0x97a>
 80096d6:	4b84      	ldr	r3, [pc, #528]	@ (80098e8 <_dtoa_r+0xb80>)
 80096d8:	4602      	mov	r2, r0
 80096da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096de:	f7ff bb5a 	b.w	8008d96 <_dtoa_r+0x2e>
 80096e2:	692a      	ldr	r2, [r5, #16]
 80096e4:	3202      	adds	r2, #2
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	f105 010c 	add.w	r1, r5, #12
 80096ec:	300c      	adds	r0, #12
 80096ee:	f000 ffaf 	bl	800a650 <memcpy>
 80096f2:	2201      	movs	r2, #1
 80096f4:	4631      	mov	r1, r6
 80096f6:	4658      	mov	r0, fp
 80096f8:	f000 fc08 	bl	8009f0c <__lshift>
 80096fc:	f10a 0301 	add.w	r3, sl, #1
 8009700:	9307      	str	r3, [sp, #28]
 8009702:	9b00      	ldr	r3, [sp, #0]
 8009704:	4453      	add	r3, sl
 8009706:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009708:	9b02      	ldr	r3, [sp, #8]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	462f      	mov	r7, r5
 8009710:	930a      	str	r3, [sp, #40]	@ 0x28
 8009712:	4605      	mov	r5, r0
 8009714:	9b07      	ldr	r3, [sp, #28]
 8009716:	4621      	mov	r1, r4
 8009718:	3b01      	subs	r3, #1
 800971a:	4648      	mov	r0, r9
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	f7ff fa9a 	bl	8008c56 <quorem>
 8009722:	4639      	mov	r1, r7
 8009724:	9002      	str	r0, [sp, #8]
 8009726:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800972a:	4648      	mov	r0, r9
 800972c:	f000 fc5a 	bl	8009fe4 <__mcmp>
 8009730:	462a      	mov	r2, r5
 8009732:	9008      	str	r0, [sp, #32]
 8009734:	4621      	mov	r1, r4
 8009736:	4658      	mov	r0, fp
 8009738:	f000 fc70 	bl	800a01c <__mdiff>
 800973c:	68c2      	ldr	r2, [r0, #12]
 800973e:	4606      	mov	r6, r0
 8009740:	bb02      	cbnz	r2, 8009784 <_dtoa_r+0xa1c>
 8009742:	4601      	mov	r1, r0
 8009744:	4648      	mov	r0, r9
 8009746:	f000 fc4d 	bl	8009fe4 <__mcmp>
 800974a:	4602      	mov	r2, r0
 800974c:	4631      	mov	r1, r6
 800974e:	4658      	mov	r0, fp
 8009750:	920e      	str	r2, [sp, #56]	@ 0x38
 8009752:	f000 fa0d 	bl	8009b70 <_Bfree>
 8009756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009758:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800975a:	9e07      	ldr	r6, [sp, #28]
 800975c:	ea43 0102 	orr.w	r1, r3, r2
 8009760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009762:	4319      	orrs	r1, r3
 8009764:	d110      	bne.n	8009788 <_dtoa_r+0xa20>
 8009766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800976a:	d029      	beq.n	80097c0 <_dtoa_r+0xa58>
 800976c:	9b08      	ldr	r3, [sp, #32]
 800976e:	2b00      	cmp	r3, #0
 8009770:	dd02      	ble.n	8009778 <_dtoa_r+0xa10>
 8009772:	9b02      	ldr	r3, [sp, #8]
 8009774:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009778:	9b00      	ldr	r3, [sp, #0]
 800977a:	f883 8000 	strb.w	r8, [r3]
 800977e:	e63f      	b.n	8009400 <_dtoa_r+0x698>
 8009780:	4628      	mov	r0, r5
 8009782:	e7bb      	b.n	80096fc <_dtoa_r+0x994>
 8009784:	2201      	movs	r2, #1
 8009786:	e7e1      	b.n	800974c <_dtoa_r+0x9e4>
 8009788:	9b08      	ldr	r3, [sp, #32]
 800978a:	2b00      	cmp	r3, #0
 800978c:	db04      	blt.n	8009798 <_dtoa_r+0xa30>
 800978e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009790:	430b      	orrs	r3, r1
 8009792:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009794:	430b      	orrs	r3, r1
 8009796:	d120      	bne.n	80097da <_dtoa_r+0xa72>
 8009798:	2a00      	cmp	r2, #0
 800979a:	dded      	ble.n	8009778 <_dtoa_r+0xa10>
 800979c:	4649      	mov	r1, r9
 800979e:	2201      	movs	r2, #1
 80097a0:	4658      	mov	r0, fp
 80097a2:	f000 fbb3 	bl	8009f0c <__lshift>
 80097a6:	4621      	mov	r1, r4
 80097a8:	4681      	mov	r9, r0
 80097aa:	f000 fc1b 	bl	8009fe4 <__mcmp>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	dc03      	bgt.n	80097ba <_dtoa_r+0xa52>
 80097b2:	d1e1      	bne.n	8009778 <_dtoa_r+0xa10>
 80097b4:	f018 0f01 	tst.w	r8, #1
 80097b8:	d0de      	beq.n	8009778 <_dtoa_r+0xa10>
 80097ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097be:	d1d8      	bne.n	8009772 <_dtoa_r+0xa0a>
 80097c0:	9a00      	ldr	r2, [sp, #0]
 80097c2:	2339      	movs	r3, #57	@ 0x39
 80097c4:	7013      	strb	r3, [r2, #0]
 80097c6:	4633      	mov	r3, r6
 80097c8:	461e      	mov	r6, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80097d0:	2a39      	cmp	r2, #57	@ 0x39
 80097d2:	d052      	beq.n	800987a <_dtoa_r+0xb12>
 80097d4:	3201      	adds	r2, #1
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	e612      	b.n	8009400 <_dtoa_r+0x698>
 80097da:	2a00      	cmp	r2, #0
 80097dc:	dd07      	ble.n	80097ee <_dtoa_r+0xa86>
 80097de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097e2:	d0ed      	beq.n	80097c0 <_dtoa_r+0xa58>
 80097e4:	9a00      	ldr	r2, [sp, #0]
 80097e6:	f108 0301 	add.w	r3, r8, #1
 80097ea:	7013      	strb	r3, [r2, #0]
 80097ec:	e608      	b.n	8009400 <_dtoa_r+0x698>
 80097ee:	9b07      	ldr	r3, [sp, #28]
 80097f0:	9a07      	ldr	r2, [sp, #28]
 80097f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80097f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d028      	beq.n	800984e <_dtoa_r+0xae6>
 80097fc:	4649      	mov	r1, r9
 80097fe:	2300      	movs	r3, #0
 8009800:	220a      	movs	r2, #10
 8009802:	4658      	mov	r0, fp
 8009804:	f000 f9d6 	bl	8009bb4 <__multadd>
 8009808:	42af      	cmp	r7, r5
 800980a:	4681      	mov	r9, r0
 800980c:	f04f 0300 	mov.w	r3, #0
 8009810:	f04f 020a 	mov.w	r2, #10
 8009814:	4639      	mov	r1, r7
 8009816:	4658      	mov	r0, fp
 8009818:	d107      	bne.n	800982a <_dtoa_r+0xac2>
 800981a:	f000 f9cb 	bl	8009bb4 <__multadd>
 800981e:	4607      	mov	r7, r0
 8009820:	4605      	mov	r5, r0
 8009822:	9b07      	ldr	r3, [sp, #28]
 8009824:	3301      	adds	r3, #1
 8009826:	9307      	str	r3, [sp, #28]
 8009828:	e774      	b.n	8009714 <_dtoa_r+0x9ac>
 800982a:	f000 f9c3 	bl	8009bb4 <__multadd>
 800982e:	4629      	mov	r1, r5
 8009830:	4607      	mov	r7, r0
 8009832:	2300      	movs	r3, #0
 8009834:	220a      	movs	r2, #10
 8009836:	4658      	mov	r0, fp
 8009838:	f000 f9bc 	bl	8009bb4 <__multadd>
 800983c:	4605      	mov	r5, r0
 800983e:	e7f0      	b.n	8009822 <_dtoa_r+0xaba>
 8009840:	9b00      	ldr	r3, [sp, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	bfcc      	ite	gt
 8009846:	461e      	movgt	r6, r3
 8009848:	2601      	movle	r6, #1
 800984a:	4456      	add	r6, sl
 800984c:	2700      	movs	r7, #0
 800984e:	4649      	mov	r1, r9
 8009850:	2201      	movs	r2, #1
 8009852:	4658      	mov	r0, fp
 8009854:	f000 fb5a 	bl	8009f0c <__lshift>
 8009858:	4621      	mov	r1, r4
 800985a:	4681      	mov	r9, r0
 800985c:	f000 fbc2 	bl	8009fe4 <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	dcb0      	bgt.n	80097c6 <_dtoa_r+0xa5e>
 8009864:	d102      	bne.n	800986c <_dtoa_r+0xb04>
 8009866:	f018 0f01 	tst.w	r8, #1
 800986a:	d1ac      	bne.n	80097c6 <_dtoa_r+0xa5e>
 800986c:	4633      	mov	r3, r6
 800986e:	461e      	mov	r6, r3
 8009870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009874:	2a30      	cmp	r2, #48	@ 0x30
 8009876:	d0fa      	beq.n	800986e <_dtoa_r+0xb06>
 8009878:	e5c2      	b.n	8009400 <_dtoa_r+0x698>
 800987a:	459a      	cmp	sl, r3
 800987c:	d1a4      	bne.n	80097c8 <_dtoa_r+0xa60>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	3301      	adds	r3, #1
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	2331      	movs	r3, #49	@ 0x31
 8009886:	f88a 3000 	strb.w	r3, [sl]
 800988a:	e5b9      	b.n	8009400 <_dtoa_r+0x698>
 800988c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800988e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80098ec <_dtoa_r+0xb84>
 8009892:	b11b      	cbz	r3, 800989c <_dtoa_r+0xb34>
 8009894:	f10a 0308 	add.w	r3, sl, #8
 8009898:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	4650      	mov	r0, sl
 800989e:	b019      	add	sp, #100	@ 0x64
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	f77f ae37 	ble.w	800951a <_dtoa_r+0x7b2>
 80098ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b0:	2001      	movs	r0, #1
 80098b2:	e655      	b.n	8009560 <_dtoa_r+0x7f8>
 80098b4:	9b00      	ldr	r3, [sp, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f77f aed6 	ble.w	8009668 <_dtoa_r+0x900>
 80098bc:	4656      	mov	r6, sl
 80098be:	4621      	mov	r1, r4
 80098c0:	4648      	mov	r0, r9
 80098c2:	f7ff f9c8 	bl	8008c56 <quorem>
 80098c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80098ca:	f806 8b01 	strb.w	r8, [r6], #1
 80098ce:	9b00      	ldr	r3, [sp, #0]
 80098d0:	eba6 020a 	sub.w	r2, r6, sl
 80098d4:	4293      	cmp	r3, r2
 80098d6:	ddb3      	ble.n	8009840 <_dtoa_r+0xad8>
 80098d8:	4649      	mov	r1, r9
 80098da:	2300      	movs	r3, #0
 80098dc:	220a      	movs	r2, #10
 80098de:	4658      	mov	r0, fp
 80098e0:	f000 f968 	bl	8009bb4 <__multadd>
 80098e4:	4681      	mov	r9, r0
 80098e6:	e7ea      	b.n	80098be <_dtoa_r+0xb56>
 80098e8:	0800bf95 	.word	0x0800bf95
 80098ec:	0800bf19 	.word	0x0800bf19

080098f0 <_free_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4605      	mov	r5, r0
 80098f4:	2900      	cmp	r1, #0
 80098f6:	d041      	beq.n	800997c <_free_r+0x8c>
 80098f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fc:	1f0c      	subs	r4, r1, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfb8      	it	lt
 8009902:	18e4      	addlt	r4, r4, r3
 8009904:	f000 f8e8 	bl	8009ad8 <__malloc_lock>
 8009908:	4a1d      	ldr	r2, [pc, #116]	@ (8009980 <_free_r+0x90>)
 800990a:	6813      	ldr	r3, [r2, #0]
 800990c:	b933      	cbnz	r3, 800991c <_free_r+0x2c>
 800990e:	6063      	str	r3, [r4, #4]
 8009910:	6014      	str	r4, [r2, #0]
 8009912:	4628      	mov	r0, r5
 8009914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009918:	f000 b8e4 	b.w	8009ae4 <__malloc_unlock>
 800991c:	42a3      	cmp	r3, r4
 800991e:	d908      	bls.n	8009932 <_free_r+0x42>
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	1821      	adds	r1, r4, r0
 8009924:	428b      	cmp	r3, r1
 8009926:	bf01      	itttt	eq
 8009928:	6819      	ldreq	r1, [r3, #0]
 800992a:	685b      	ldreq	r3, [r3, #4]
 800992c:	1809      	addeq	r1, r1, r0
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	e7ed      	b.n	800990e <_free_r+0x1e>
 8009932:	461a      	mov	r2, r3
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	b10b      	cbz	r3, 800993c <_free_r+0x4c>
 8009938:	42a3      	cmp	r3, r4
 800993a:	d9fa      	bls.n	8009932 <_free_r+0x42>
 800993c:	6811      	ldr	r1, [r2, #0]
 800993e:	1850      	adds	r0, r2, r1
 8009940:	42a0      	cmp	r0, r4
 8009942:	d10b      	bne.n	800995c <_free_r+0x6c>
 8009944:	6820      	ldr	r0, [r4, #0]
 8009946:	4401      	add	r1, r0
 8009948:	1850      	adds	r0, r2, r1
 800994a:	4283      	cmp	r3, r0
 800994c:	6011      	str	r1, [r2, #0]
 800994e:	d1e0      	bne.n	8009912 <_free_r+0x22>
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	6053      	str	r3, [r2, #4]
 8009956:	4408      	add	r0, r1
 8009958:	6010      	str	r0, [r2, #0]
 800995a:	e7da      	b.n	8009912 <_free_r+0x22>
 800995c:	d902      	bls.n	8009964 <_free_r+0x74>
 800995e:	230c      	movs	r3, #12
 8009960:	602b      	str	r3, [r5, #0]
 8009962:	e7d6      	b.n	8009912 <_free_r+0x22>
 8009964:	6820      	ldr	r0, [r4, #0]
 8009966:	1821      	adds	r1, r4, r0
 8009968:	428b      	cmp	r3, r1
 800996a:	bf04      	itt	eq
 800996c:	6819      	ldreq	r1, [r3, #0]
 800996e:	685b      	ldreq	r3, [r3, #4]
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	bf04      	itt	eq
 8009974:	1809      	addeq	r1, r1, r0
 8009976:	6021      	streq	r1, [r4, #0]
 8009978:	6054      	str	r4, [r2, #4]
 800997a:	e7ca      	b.n	8009912 <_free_r+0x22>
 800997c:	bd38      	pop	{r3, r4, r5, pc}
 800997e:	bf00      	nop
 8009980:	20000ae8 	.word	0x20000ae8

08009984 <malloc>:
 8009984:	4b02      	ldr	r3, [pc, #8]	@ (8009990 <malloc+0xc>)
 8009986:	4601      	mov	r1, r0
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	f000 b825 	b.w	80099d8 <_malloc_r>
 800998e:	bf00      	nop
 8009990:	20000038 	.word	0x20000038

08009994 <sbrk_aligned>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	4e0f      	ldr	r6, [pc, #60]	@ (80099d4 <sbrk_aligned+0x40>)
 8009998:	460c      	mov	r4, r1
 800999a:	6831      	ldr	r1, [r6, #0]
 800999c:	4605      	mov	r5, r0
 800999e:	b911      	cbnz	r1, 80099a6 <sbrk_aligned+0x12>
 80099a0:	f000 fe46 	bl	800a630 <_sbrk_r>
 80099a4:	6030      	str	r0, [r6, #0]
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	f000 fe41 	bl	800a630 <_sbrk_r>
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	d103      	bne.n	80099ba <sbrk_aligned+0x26>
 80099b2:	f04f 34ff 	mov.w	r4, #4294967295
 80099b6:	4620      	mov	r0, r4
 80099b8:	bd70      	pop	{r4, r5, r6, pc}
 80099ba:	1cc4      	adds	r4, r0, #3
 80099bc:	f024 0403 	bic.w	r4, r4, #3
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d0f8      	beq.n	80099b6 <sbrk_aligned+0x22>
 80099c4:	1a21      	subs	r1, r4, r0
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 fe32 	bl	800a630 <_sbrk_r>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d1f2      	bne.n	80099b6 <sbrk_aligned+0x22>
 80099d0:	e7ef      	b.n	80099b2 <sbrk_aligned+0x1e>
 80099d2:	bf00      	nop
 80099d4:	20000ae4 	.word	0x20000ae4

080099d8 <_malloc_r>:
 80099d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099dc:	1ccd      	adds	r5, r1, #3
 80099de:	f025 0503 	bic.w	r5, r5, #3
 80099e2:	3508      	adds	r5, #8
 80099e4:	2d0c      	cmp	r5, #12
 80099e6:	bf38      	it	cc
 80099e8:	250c      	movcc	r5, #12
 80099ea:	2d00      	cmp	r5, #0
 80099ec:	4606      	mov	r6, r0
 80099ee:	db01      	blt.n	80099f4 <_malloc_r+0x1c>
 80099f0:	42a9      	cmp	r1, r5
 80099f2:	d904      	bls.n	80099fe <_malloc_r+0x26>
 80099f4:	230c      	movs	r3, #12
 80099f6:	6033      	str	r3, [r6, #0]
 80099f8:	2000      	movs	r0, #0
 80099fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ad4 <_malloc_r+0xfc>
 8009a02:	f000 f869 	bl	8009ad8 <__malloc_lock>
 8009a06:	f8d8 3000 	ldr.w	r3, [r8]
 8009a0a:	461c      	mov	r4, r3
 8009a0c:	bb44      	cbnz	r4, 8009a60 <_malloc_r+0x88>
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4630      	mov	r0, r6
 8009a12:	f7ff ffbf 	bl	8009994 <sbrk_aligned>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	4604      	mov	r4, r0
 8009a1a:	d158      	bne.n	8009ace <_malloc_r+0xf6>
 8009a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a20:	4627      	mov	r7, r4
 8009a22:	2f00      	cmp	r7, #0
 8009a24:	d143      	bne.n	8009aae <_malloc_r+0xd6>
 8009a26:	2c00      	cmp	r4, #0
 8009a28:	d04b      	beq.n	8009ac2 <_malloc_r+0xea>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	4639      	mov	r1, r7
 8009a2e:	4630      	mov	r0, r6
 8009a30:	eb04 0903 	add.w	r9, r4, r3
 8009a34:	f000 fdfc 	bl	800a630 <_sbrk_r>
 8009a38:	4581      	cmp	r9, r0
 8009a3a:	d142      	bne.n	8009ac2 <_malloc_r+0xea>
 8009a3c:	6821      	ldr	r1, [r4, #0]
 8009a3e:	1a6d      	subs	r5, r5, r1
 8009a40:	4629      	mov	r1, r5
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ffa6 	bl	8009994 <sbrk_aligned>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d03a      	beq.n	8009ac2 <_malloc_r+0xea>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	442b      	add	r3, r5
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	f8d8 3000 	ldr.w	r3, [r8]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	bb62      	cbnz	r2, 8009ab4 <_malloc_r+0xdc>
 8009a5a:	f8c8 7000 	str.w	r7, [r8]
 8009a5e:	e00f      	b.n	8009a80 <_malloc_r+0xa8>
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	1b52      	subs	r2, r2, r5
 8009a64:	d420      	bmi.n	8009aa8 <_malloc_r+0xd0>
 8009a66:	2a0b      	cmp	r2, #11
 8009a68:	d917      	bls.n	8009a9a <_malloc_r+0xc2>
 8009a6a:	1961      	adds	r1, r4, r5
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	6025      	str	r5, [r4, #0]
 8009a70:	bf18      	it	ne
 8009a72:	6059      	strne	r1, [r3, #4]
 8009a74:	6863      	ldr	r3, [r4, #4]
 8009a76:	bf08      	it	eq
 8009a78:	f8c8 1000 	streq.w	r1, [r8]
 8009a7c:	5162      	str	r2, [r4, r5]
 8009a7e:	604b      	str	r3, [r1, #4]
 8009a80:	4630      	mov	r0, r6
 8009a82:	f000 f82f 	bl	8009ae4 <__malloc_unlock>
 8009a86:	f104 000b 	add.w	r0, r4, #11
 8009a8a:	1d23      	adds	r3, r4, #4
 8009a8c:	f020 0007 	bic.w	r0, r0, #7
 8009a90:	1ac2      	subs	r2, r0, r3
 8009a92:	bf1c      	itt	ne
 8009a94:	1a1b      	subne	r3, r3, r0
 8009a96:	50a3      	strne	r3, [r4, r2]
 8009a98:	e7af      	b.n	80099fa <_malloc_r+0x22>
 8009a9a:	6862      	ldr	r2, [r4, #4]
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	bf0c      	ite	eq
 8009aa0:	f8c8 2000 	streq.w	r2, [r8]
 8009aa4:	605a      	strne	r2, [r3, #4]
 8009aa6:	e7eb      	b.n	8009a80 <_malloc_r+0xa8>
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	6864      	ldr	r4, [r4, #4]
 8009aac:	e7ae      	b.n	8009a0c <_malloc_r+0x34>
 8009aae:	463c      	mov	r4, r7
 8009ab0:	687f      	ldr	r7, [r7, #4]
 8009ab2:	e7b6      	b.n	8009a22 <_malloc_r+0x4a>
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	d1fb      	bne.n	8009ab4 <_malloc_r+0xdc>
 8009abc:	2300      	movs	r3, #0
 8009abe:	6053      	str	r3, [r2, #4]
 8009ac0:	e7de      	b.n	8009a80 <_malloc_r+0xa8>
 8009ac2:	230c      	movs	r3, #12
 8009ac4:	6033      	str	r3, [r6, #0]
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f000 f80c 	bl	8009ae4 <__malloc_unlock>
 8009acc:	e794      	b.n	80099f8 <_malloc_r+0x20>
 8009ace:	6005      	str	r5, [r0, #0]
 8009ad0:	e7d6      	b.n	8009a80 <_malloc_r+0xa8>
 8009ad2:	bf00      	nop
 8009ad4:	20000ae8 	.word	0x20000ae8

08009ad8 <__malloc_lock>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	@ (8009ae0 <__malloc_lock+0x8>)
 8009ada:	f7ff b8ba 	b.w	8008c52 <__retarget_lock_acquire_recursive>
 8009ade:	bf00      	nop
 8009ae0:	20000ae0 	.word	0x20000ae0

08009ae4 <__malloc_unlock>:
 8009ae4:	4801      	ldr	r0, [pc, #4]	@ (8009aec <__malloc_unlock+0x8>)
 8009ae6:	f7ff b8b5 	b.w	8008c54 <__retarget_lock_release_recursive>
 8009aea:	bf00      	nop
 8009aec:	20000ae0 	.word	0x20000ae0

08009af0 <_Balloc>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	69c6      	ldr	r6, [r0, #28]
 8009af4:	4604      	mov	r4, r0
 8009af6:	460d      	mov	r5, r1
 8009af8:	b976      	cbnz	r6, 8009b18 <_Balloc+0x28>
 8009afa:	2010      	movs	r0, #16
 8009afc:	f7ff ff42 	bl	8009984 <malloc>
 8009b00:	4602      	mov	r2, r0
 8009b02:	61e0      	str	r0, [r4, #28]
 8009b04:	b920      	cbnz	r0, 8009b10 <_Balloc+0x20>
 8009b06:	4b18      	ldr	r3, [pc, #96]	@ (8009b68 <_Balloc+0x78>)
 8009b08:	4818      	ldr	r0, [pc, #96]	@ (8009b6c <_Balloc+0x7c>)
 8009b0a:	216b      	movs	r1, #107	@ 0x6b
 8009b0c:	f000 fdae 	bl	800a66c <__assert_func>
 8009b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b14:	6006      	str	r6, [r0, #0]
 8009b16:	60c6      	str	r6, [r0, #12]
 8009b18:	69e6      	ldr	r6, [r4, #28]
 8009b1a:	68f3      	ldr	r3, [r6, #12]
 8009b1c:	b183      	cbz	r3, 8009b40 <_Balloc+0x50>
 8009b1e:	69e3      	ldr	r3, [r4, #28]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b26:	b9b8      	cbnz	r0, 8009b58 <_Balloc+0x68>
 8009b28:	2101      	movs	r1, #1
 8009b2a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b2e:	1d72      	adds	r2, r6, #5
 8009b30:	0092      	lsls	r2, r2, #2
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 fdb8 	bl	800a6a8 <_calloc_r>
 8009b38:	b160      	cbz	r0, 8009b54 <_Balloc+0x64>
 8009b3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b3e:	e00e      	b.n	8009b5e <_Balloc+0x6e>
 8009b40:	2221      	movs	r2, #33	@ 0x21
 8009b42:	2104      	movs	r1, #4
 8009b44:	4620      	mov	r0, r4
 8009b46:	f000 fdaf 	bl	800a6a8 <_calloc_r>
 8009b4a:	69e3      	ldr	r3, [r4, #28]
 8009b4c:	60f0      	str	r0, [r6, #12]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e4      	bne.n	8009b1e <_Balloc+0x2e>
 8009b54:	2000      	movs	r0, #0
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	6802      	ldr	r2, [r0, #0]
 8009b5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b64:	e7f7      	b.n	8009b56 <_Balloc+0x66>
 8009b66:	bf00      	nop
 8009b68:	0800bf26 	.word	0x0800bf26
 8009b6c:	0800bfa6 	.word	0x0800bfa6

08009b70 <_Bfree>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	69c6      	ldr	r6, [r0, #28]
 8009b74:	4605      	mov	r5, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	b976      	cbnz	r6, 8009b98 <_Bfree+0x28>
 8009b7a:	2010      	movs	r0, #16
 8009b7c:	f7ff ff02 	bl	8009984 <malloc>
 8009b80:	4602      	mov	r2, r0
 8009b82:	61e8      	str	r0, [r5, #28]
 8009b84:	b920      	cbnz	r0, 8009b90 <_Bfree+0x20>
 8009b86:	4b09      	ldr	r3, [pc, #36]	@ (8009bac <_Bfree+0x3c>)
 8009b88:	4809      	ldr	r0, [pc, #36]	@ (8009bb0 <_Bfree+0x40>)
 8009b8a:	218f      	movs	r1, #143	@ 0x8f
 8009b8c:	f000 fd6e 	bl	800a66c <__assert_func>
 8009b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b94:	6006      	str	r6, [r0, #0]
 8009b96:	60c6      	str	r6, [r0, #12]
 8009b98:	b13c      	cbz	r4, 8009baa <_Bfree+0x3a>
 8009b9a:	69eb      	ldr	r3, [r5, #28]
 8009b9c:	6862      	ldr	r2, [r4, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ba4:	6021      	str	r1, [r4, #0]
 8009ba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	0800bf26 	.word	0x0800bf26
 8009bb0:	0800bfa6 	.word	0x0800bfa6

08009bb4 <__multadd>:
 8009bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	690d      	ldr	r5, [r1, #16]
 8009bba:	4607      	mov	r7, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	461e      	mov	r6, r3
 8009bc0:	f101 0c14 	add.w	ip, r1, #20
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f8dc 3000 	ldr.w	r3, [ip]
 8009bca:	b299      	uxth	r1, r3
 8009bcc:	fb02 6101 	mla	r1, r2, r1, r6
 8009bd0:	0c1e      	lsrs	r6, r3, #16
 8009bd2:	0c0b      	lsrs	r3, r1, #16
 8009bd4:	fb02 3306 	mla	r3, r2, r6, r3
 8009bd8:	b289      	uxth	r1, r1
 8009bda:	3001      	adds	r0, #1
 8009bdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009be0:	4285      	cmp	r5, r0
 8009be2:	f84c 1b04 	str.w	r1, [ip], #4
 8009be6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bea:	dcec      	bgt.n	8009bc6 <__multadd+0x12>
 8009bec:	b30e      	cbz	r6, 8009c32 <__multadd+0x7e>
 8009bee:	68a3      	ldr	r3, [r4, #8]
 8009bf0:	42ab      	cmp	r3, r5
 8009bf2:	dc19      	bgt.n	8009c28 <__multadd+0x74>
 8009bf4:	6861      	ldr	r1, [r4, #4]
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	3101      	adds	r1, #1
 8009bfa:	f7ff ff79 	bl	8009af0 <_Balloc>
 8009bfe:	4680      	mov	r8, r0
 8009c00:	b928      	cbnz	r0, 8009c0e <__multadd+0x5a>
 8009c02:	4602      	mov	r2, r0
 8009c04:	4b0c      	ldr	r3, [pc, #48]	@ (8009c38 <__multadd+0x84>)
 8009c06:	480d      	ldr	r0, [pc, #52]	@ (8009c3c <__multadd+0x88>)
 8009c08:	21ba      	movs	r1, #186	@ 0xba
 8009c0a:	f000 fd2f 	bl	800a66c <__assert_func>
 8009c0e:	6922      	ldr	r2, [r4, #16]
 8009c10:	3202      	adds	r2, #2
 8009c12:	f104 010c 	add.w	r1, r4, #12
 8009c16:	0092      	lsls	r2, r2, #2
 8009c18:	300c      	adds	r0, #12
 8009c1a:	f000 fd19 	bl	800a650 <memcpy>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	4638      	mov	r0, r7
 8009c22:	f7ff ffa5 	bl	8009b70 <_Bfree>
 8009c26:	4644      	mov	r4, r8
 8009c28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c2c:	3501      	adds	r5, #1
 8009c2e:	615e      	str	r6, [r3, #20]
 8009c30:	6125      	str	r5, [r4, #16]
 8009c32:	4620      	mov	r0, r4
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	0800bf95 	.word	0x0800bf95
 8009c3c:	0800bfa6 	.word	0x0800bfa6

08009c40 <__hi0bits>:
 8009c40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c44:	4603      	mov	r3, r0
 8009c46:	bf36      	itet	cc
 8009c48:	0403      	lslcc	r3, r0, #16
 8009c4a:	2000      	movcs	r0, #0
 8009c4c:	2010      	movcc	r0, #16
 8009c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c52:	bf3c      	itt	cc
 8009c54:	021b      	lslcc	r3, r3, #8
 8009c56:	3008      	addcc	r0, #8
 8009c58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c5c:	bf3c      	itt	cc
 8009c5e:	011b      	lslcc	r3, r3, #4
 8009c60:	3004      	addcc	r0, #4
 8009c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c66:	bf3c      	itt	cc
 8009c68:	009b      	lslcc	r3, r3, #2
 8009c6a:	3002      	addcc	r0, #2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	db05      	blt.n	8009c7c <__hi0bits+0x3c>
 8009c70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009c74:	f100 0001 	add.w	r0, r0, #1
 8009c78:	bf08      	it	eq
 8009c7a:	2020      	moveq	r0, #32
 8009c7c:	4770      	bx	lr

08009c7e <__lo0bits>:
 8009c7e:	6803      	ldr	r3, [r0, #0]
 8009c80:	4602      	mov	r2, r0
 8009c82:	f013 0007 	ands.w	r0, r3, #7
 8009c86:	d00b      	beq.n	8009ca0 <__lo0bits+0x22>
 8009c88:	07d9      	lsls	r1, r3, #31
 8009c8a:	d421      	bmi.n	8009cd0 <__lo0bits+0x52>
 8009c8c:	0798      	lsls	r0, r3, #30
 8009c8e:	bf49      	itett	mi
 8009c90:	085b      	lsrmi	r3, r3, #1
 8009c92:	089b      	lsrpl	r3, r3, #2
 8009c94:	2001      	movmi	r0, #1
 8009c96:	6013      	strmi	r3, [r2, #0]
 8009c98:	bf5c      	itt	pl
 8009c9a:	6013      	strpl	r3, [r2, #0]
 8009c9c:	2002      	movpl	r0, #2
 8009c9e:	4770      	bx	lr
 8009ca0:	b299      	uxth	r1, r3
 8009ca2:	b909      	cbnz	r1, 8009ca8 <__lo0bits+0x2a>
 8009ca4:	0c1b      	lsrs	r3, r3, #16
 8009ca6:	2010      	movs	r0, #16
 8009ca8:	b2d9      	uxtb	r1, r3
 8009caa:	b909      	cbnz	r1, 8009cb0 <__lo0bits+0x32>
 8009cac:	3008      	adds	r0, #8
 8009cae:	0a1b      	lsrs	r3, r3, #8
 8009cb0:	0719      	lsls	r1, r3, #28
 8009cb2:	bf04      	itt	eq
 8009cb4:	091b      	lsreq	r3, r3, #4
 8009cb6:	3004      	addeq	r0, #4
 8009cb8:	0799      	lsls	r1, r3, #30
 8009cba:	bf04      	itt	eq
 8009cbc:	089b      	lsreq	r3, r3, #2
 8009cbe:	3002      	addeq	r0, #2
 8009cc0:	07d9      	lsls	r1, r3, #31
 8009cc2:	d403      	bmi.n	8009ccc <__lo0bits+0x4e>
 8009cc4:	085b      	lsrs	r3, r3, #1
 8009cc6:	f100 0001 	add.w	r0, r0, #1
 8009cca:	d003      	beq.n	8009cd4 <__lo0bits+0x56>
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	4770      	bx	lr
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	4770      	bx	lr
 8009cd4:	2020      	movs	r0, #32
 8009cd6:	4770      	bx	lr

08009cd8 <__i2b>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	460c      	mov	r4, r1
 8009cdc:	2101      	movs	r1, #1
 8009cde:	f7ff ff07 	bl	8009af0 <_Balloc>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	b928      	cbnz	r0, 8009cf2 <__i2b+0x1a>
 8009ce6:	4b05      	ldr	r3, [pc, #20]	@ (8009cfc <__i2b+0x24>)
 8009ce8:	4805      	ldr	r0, [pc, #20]	@ (8009d00 <__i2b+0x28>)
 8009cea:	f240 1145 	movw	r1, #325	@ 0x145
 8009cee:	f000 fcbd 	bl	800a66c <__assert_func>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	6144      	str	r4, [r0, #20]
 8009cf6:	6103      	str	r3, [r0, #16]
 8009cf8:	bd10      	pop	{r4, pc}
 8009cfa:	bf00      	nop
 8009cfc:	0800bf95 	.word	0x0800bf95
 8009d00:	0800bfa6 	.word	0x0800bfa6

08009d04 <__multiply>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	4614      	mov	r4, r2
 8009d0a:	690a      	ldr	r2, [r1, #16]
 8009d0c:	6923      	ldr	r3, [r4, #16]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	bfa8      	it	ge
 8009d12:	4623      	movge	r3, r4
 8009d14:	460f      	mov	r7, r1
 8009d16:	bfa4      	itt	ge
 8009d18:	460c      	movge	r4, r1
 8009d1a:	461f      	movge	r7, r3
 8009d1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009d20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009d24:	68a3      	ldr	r3, [r4, #8]
 8009d26:	6861      	ldr	r1, [r4, #4]
 8009d28:	eb0a 0609 	add.w	r6, sl, r9
 8009d2c:	42b3      	cmp	r3, r6
 8009d2e:	b085      	sub	sp, #20
 8009d30:	bfb8      	it	lt
 8009d32:	3101      	addlt	r1, #1
 8009d34:	f7ff fedc 	bl	8009af0 <_Balloc>
 8009d38:	b930      	cbnz	r0, 8009d48 <__multiply+0x44>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	4b44      	ldr	r3, [pc, #272]	@ (8009e50 <__multiply+0x14c>)
 8009d3e:	4845      	ldr	r0, [pc, #276]	@ (8009e54 <__multiply+0x150>)
 8009d40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d44:	f000 fc92 	bl	800a66c <__assert_func>
 8009d48:	f100 0514 	add.w	r5, r0, #20
 8009d4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d50:	462b      	mov	r3, r5
 8009d52:	2200      	movs	r2, #0
 8009d54:	4543      	cmp	r3, r8
 8009d56:	d321      	bcc.n	8009d9c <__multiply+0x98>
 8009d58:	f107 0114 	add.w	r1, r7, #20
 8009d5c:	f104 0214 	add.w	r2, r4, #20
 8009d60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009d64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009d68:	9302      	str	r3, [sp, #8]
 8009d6a:	1b13      	subs	r3, r2, r4
 8009d6c:	3b15      	subs	r3, #21
 8009d6e:	f023 0303 	bic.w	r3, r3, #3
 8009d72:	3304      	adds	r3, #4
 8009d74:	f104 0715 	add.w	r7, r4, #21
 8009d78:	42ba      	cmp	r2, r7
 8009d7a:	bf38      	it	cc
 8009d7c:	2304      	movcc	r3, #4
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	9b02      	ldr	r3, [sp, #8]
 8009d82:	9103      	str	r1, [sp, #12]
 8009d84:	428b      	cmp	r3, r1
 8009d86:	d80c      	bhi.n	8009da2 <__multiply+0x9e>
 8009d88:	2e00      	cmp	r6, #0
 8009d8a:	dd03      	ble.n	8009d94 <__multiply+0x90>
 8009d8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d05b      	beq.n	8009e4c <__multiply+0x148>
 8009d94:	6106      	str	r6, [r0, #16]
 8009d96:	b005      	add	sp, #20
 8009d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9c:	f843 2b04 	str.w	r2, [r3], #4
 8009da0:	e7d8      	b.n	8009d54 <__multiply+0x50>
 8009da2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009da6:	f1ba 0f00 	cmp.w	sl, #0
 8009daa:	d024      	beq.n	8009df6 <__multiply+0xf2>
 8009dac:	f104 0e14 	add.w	lr, r4, #20
 8009db0:	46a9      	mov	r9, r5
 8009db2:	f04f 0c00 	mov.w	ip, #0
 8009db6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009dba:	f8d9 3000 	ldr.w	r3, [r9]
 8009dbe:	fa1f fb87 	uxth.w	fp, r7
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009dc8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009dcc:	f8d9 7000 	ldr.w	r7, [r9]
 8009dd0:	4463      	add	r3, ip
 8009dd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009dd6:	fb0a c70b 	mla	r7, sl, fp, ip
 8009dda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009de4:	4572      	cmp	r2, lr
 8009de6:	f849 3b04 	str.w	r3, [r9], #4
 8009dea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009dee:	d8e2      	bhi.n	8009db6 <__multiply+0xb2>
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	f845 c003 	str.w	ip, [r5, r3]
 8009df6:	9b03      	ldr	r3, [sp, #12]
 8009df8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009dfc:	3104      	adds	r1, #4
 8009dfe:	f1b9 0f00 	cmp.w	r9, #0
 8009e02:	d021      	beq.n	8009e48 <__multiply+0x144>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	f104 0c14 	add.w	ip, r4, #20
 8009e0a:	46ae      	mov	lr, r5
 8009e0c:	f04f 0a00 	mov.w	sl, #0
 8009e10:	f8bc b000 	ldrh.w	fp, [ip]
 8009e14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009e18:	fb09 770b 	mla	r7, r9, fp, r7
 8009e1c:	4457      	add	r7, sl
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e24:	f84e 3b04 	str.w	r3, [lr], #4
 8009e28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e30:	f8be 3000 	ldrh.w	r3, [lr]
 8009e34:	fb09 330a 	mla	r3, r9, sl, r3
 8009e38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009e3c:	4562      	cmp	r2, ip
 8009e3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e42:	d8e5      	bhi.n	8009e10 <__multiply+0x10c>
 8009e44:	9f01      	ldr	r7, [sp, #4]
 8009e46:	51eb      	str	r3, [r5, r7]
 8009e48:	3504      	adds	r5, #4
 8009e4a:	e799      	b.n	8009d80 <__multiply+0x7c>
 8009e4c:	3e01      	subs	r6, #1
 8009e4e:	e79b      	b.n	8009d88 <__multiply+0x84>
 8009e50:	0800bf95 	.word	0x0800bf95
 8009e54:	0800bfa6 	.word	0x0800bfa6

08009e58 <__pow5mult>:
 8009e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e5c:	4615      	mov	r5, r2
 8009e5e:	f012 0203 	ands.w	r2, r2, #3
 8009e62:	4607      	mov	r7, r0
 8009e64:	460e      	mov	r6, r1
 8009e66:	d007      	beq.n	8009e78 <__pow5mult+0x20>
 8009e68:	4c25      	ldr	r4, [pc, #148]	@ (8009f00 <__pow5mult+0xa8>)
 8009e6a:	3a01      	subs	r2, #1
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e72:	f7ff fe9f 	bl	8009bb4 <__multadd>
 8009e76:	4606      	mov	r6, r0
 8009e78:	10ad      	asrs	r5, r5, #2
 8009e7a:	d03d      	beq.n	8009ef8 <__pow5mult+0xa0>
 8009e7c:	69fc      	ldr	r4, [r7, #28]
 8009e7e:	b97c      	cbnz	r4, 8009ea0 <__pow5mult+0x48>
 8009e80:	2010      	movs	r0, #16
 8009e82:	f7ff fd7f 	bl	8009984 <malloc>
 8009e86:	4602      	mov	r2, r0
 8009e88:	61f8      	str	r0, [r7, #28]
 8009e8a:	b928      	cbnz	r0, 8009e98 <__pow5mult+0x40>
 8009e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8009f04 <__pow5mult+0xac>)
 8009e8e:	481e      	ldr	r0, [pc, #120]	@ (8009f08 <__pow5mult+0xb0>)
 8009e90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e94:	f000 fbea 	bl	800a66c <__assert_func>
 8009e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e9c:	6004      	str	r4, [r0, #0]
 8009e9e:	60c4      	str	r4, [r0, #12]
 8009ea0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ea8:	b94c      	cbnz	r4, 8009ebe <__pow5mult+0x66>
 8009eaa:	f240 2171 	movw	r1, #625	@ 0x271
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f7ff ff12 	bl	8009cd8 <__i2b>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eba:	4604      	mov	r4, r0
 8009ebc:	6003      	str	r3, [r0, #0]
 8009ebe:	f04f 0900 	mov.w	r9, #0
 8009ec2:	07eb      	lsls	r3, r5, #31
 8009ec4:	d50a      	bpl.n	8009edc <__pow5mult+0x84>
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4622      	mov	r2, r4
 8009eca:	4638      	mov	r0, r7
 8009ecc:	f7ff ff1a 	bl	8009d04 <__multiply>
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4680      	mov	r8, r0
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f7ff fe4b 	bl	8009b70 <_Bfree>
 8009eda:	4646      	mov	r6, r8
 8009edc:	106d      	asrs	r5, r5, #1
 8009ede:	d00b      	beq.n	8009ef8 <__pow5mult+0xa0>
 8009ee0:	6820      	ldr	r0, [r4, #0]
 8009ee2:	b938      	cbnz	r0, 8009ef4 <__pow5mult+0x9c>
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	4638      	mov	r0, r7
 8009eea:	f7ff ff0b 	bl	8009d04 <__multiply>
 8009eee:	6020      	str	r0, [r4, #0]
 8009ef0:	f8c0 9000 	str.w	r9, [r0]
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	e7e4      	b.n	8009ec2 <__pow5mult+0x6a>
 8009ef8:	4630      	mov	r0, r6
 8009efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efe:	bf00      	nop
 8009f00:	0800c000 	.word	0x0800c000
 8009f04:	0800bf26 	.word	0x0800bf26
 8009f08:	0800bfa6 	.word	0x0800bfa6

08009f0c <__lshift>:
 8009f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f10:	460c      	mov	r4, r1
 8009f12:	6849      	ldr	r1, [r1, #4]
 8009f14:	6923      	ldr	r3, [r4, #16]
 8009f16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	4691      	mov	r9, r2
 8009f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f24:	f108 0601 	add.w	r6, r8, #1
 8009f28:	42b3      	cmp	r3, r6
 8009f2a:	db0b      	blt.n	8009f44 <__lshift+0x38>
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f7ff fddf 	bl	8009af0 <_Balloc>
 8009f32:	4605      	mov	r5, r0
 8009f34:	b948      	cbnz	r0, 8009f4a <__lshift+0x3e>
 8009f36:	4602      	mov	r2, r0
 8009f38:	4b28      	ldr	r3, [pc, #160]	@ (8009fdc <__lshift+0xd0>)
 8009f3a:	4829      	ldr	r0, [pc, #164]	@ (8009fe0 <__lshift+0xd4>)
 8009f3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f40:	f000 fb94 	bl	800a66c <__assert_func>
 8009f44:	3101      	adds	r1, #1
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	e7ee      	b.n	8009f28 <__lshift+0x1c>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f100 0114 	add.w	r1, r0, #20
 8009f50:	f100 0210 	add.w	r2, r0, #16
 8009f54:	4618      	mov	r0, r3
 8009f56:	4553      	cmp	r3, sl
 8009f58:	db33      	blt.n	8009fc2 <__lshift+0xb6>
 8009f5a:	6920      	ldr	r0, [r4, #16]
 8009f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f60:	f104 0314 	add.w	r3, r4, #20
 8009f64:	f019 091f 	ands.w	r9, r9, #31
 8009f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f70:	d02b      	beq.n	8009fca <__lshift+0xbe>
 8009f72:	f1c9 0e20 	rsb	lr, r9, #32
 8009f76:	468a      	mov	sl, r1
 8009f78:	2200      	movs	r2, #0
 8009f7a:	6818      	ldr	r0, [r3, #0]
 8009f7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009f80:	4310      	orrs	r0, r2
 8009f82:	f84a 0b04 	str.w	r0, [sl], #4
 8009f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8a:	459c      	cmp	ip, r3
 8009f8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f90:	d8f3      	bhi.n	8009f7a <__lshift+0x6e>
 8009f92:	ebac 0304 	sub.w	r3, ip, r4
 8009f96:	3b15      	subs	r3, #21
 8009f98:	f023 0303 	bic.w	r3, r3, #3
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	f104 0015 	add.w	r0, r4, #21
 8009fa2:	4584      	cmp	ip, r0
 8009fa4:	bf38      	it	cc
 8009fa6:	2304      	movcc	r3, #4
 8009fa8:	50ca      	str	r2, [r1, r3]
 8009faa:	b10a      	cbz	r2, 8009fb0 <__lshift+0xa4>
 8009fac:	f108 0602 	add.w	r6, r8, #2
 8009fb0:	3e01      	subs	r6, #1
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	612e      	str	r6, [r5, #16]
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	f7ff fdda 	bl	8009b70 <_Bfree>
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	e7c5      	b.n	8009f56 <__lshift+0x4a>
 8009fca:	3904      	subs	r1, #4
 8009fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fd4:	459c      	cmp	ip, r3
 8009fd6:	d8f9      	bhi.n	8009fcc <__lshift+0xc0>
 8009fd8:	e7ea      	b.n	8009fb0 <__lshift+0xa4>
 8009fda:	bf00      	nop
 8009fdc:	0800bf95 	.word	0x0800bf95
 8009fe0:	0800bfa6 	.word	0x0800bfa6

08009fe4 <__mcmp>:
 8009fe4:	690a      	ldr	r2, [r1, #16]
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	6900      	ldr	r0, [r0, #16]
 8009fea:	1a80      	subs	r0, r0, r2
 8009fec:	b530      	push	{r4, r5, lr}
 8009fee:	d10e      	bne.n	800a00e <__mcmp+0x2a>
 8009ff0:	3314      	adds	r3, #20
 8009ff2:	3114      	adds	r1, #20
 8009ff4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ff8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a004:	4295      	cmp	r5, r2
 800a006:	d003      	beq.n	800a010 <__mcmp+0x2c>
 800a008:	d205      	bcs.n	800a016 <__mcmp+0x32>
 800a00a:	f04f 30ff 	mov.w	r0, #4294967295
 800a00e:	bd30      	pop	{r4, r5, pc}
 800a010:	42a3      	cmp	r3, r4
 800a012:	d3f3      	bcc.n	8009ffc <__mcmp+0x18>
 800a014:	e7fb      	b.n	800a00e <__mcmp+0x2a>
 800a016:	2001      	movs	r0, #1
 800a018:	e7f9      	b.n	800a00e <__mcmp+0x2a>
	...

0800a01c <__mdiff>:
 800a01c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	4689      	mov	r9, r1
 800a022:	4606      	mov	r6, r0
 800a024:	4611      	mov	r1, r2
 800a026:	4648      	mov	r0, r9
 800a028:	4614      	mov	r4, r2
 800a02a:	f7ff ffdb 	bl	8009fe4 <__mcmp>
 800a02e:	1e05      	subs	r5, r0, #0
 800a030:	d112      	bne.n	800a058 <__mdiff+0x3c>
 800a032:	4629      	mov	r1, r5
 800a034:	4630      	mov	r0, r6
 800a036:	f7ff fd5b 	bl	8009af0 <_Balloc>
 800a03a:	4602      	mov	r2, r0
 800a03c:	b928      	cbnz	r0, 800a04a <__mdiff+0x2e>
 800a03e:	4b3f      	ldr	r3, [pc, #252]	@ (800a13c <__mdiff+0x120>)
 800a040:	f240 2137 	movw	r1, #567	@ 0x237
 800a044:	483e      	ldr	r0, [pc, #248]	@ (800a140 <__mdiff+0x124>)
 800a046:	f000 fb11 	bl	800a66c <__assert_func>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a050:	4610      	mov	r0, r2
 800a052:	b003      	add	sp, #12
 800a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a058:	bfbc      	itt	lt
 800a05a:	464b      	movlt	r3, r9
 800a05c:	46a1      	movlt	r9, r4
 800a05e:	4630      	mov	r0, r6
 800a060:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a064:	bfba      	itte	lt
 800a066:	461c      	movlt	r4, r3
 800a068:	2501      	movlt	r5, #1
 800a06a:	2500      	movge	r5, #0
 800a06c:	f7ff fd40 	bl	8009af0 <_Balloc>
 800a070:	4602      	mov	r2, r0
 800a072:	b918      	cbnz	r0, 800a07c <__mdiff+0x60>
 800a074:	4b31      	ldr	r3, [pc, #196]	@ (800a13c <__mdiff+0x120>)
 800a076:	f240 2145 	movw	r1, #581	@ 0x245
 800a07a:	e7e3      	b.n	800a044 <__mdiff+0x28>
 800a07c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a080:	6926      	ldr	r6, [r4, #16]
 800a082:	60c5      	str	r5, [r0, #12]
 800a084:	f109 0310 	add.w	r3, r9, #16
 800a088:	f109 0514 	add.w	r5, r9, #20
 800a08c:	f104 0e14 	add.w	lr, r4, #20
 800a090:	f100 0b14 	add.w	fp, r0, #20
 800a094:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a098:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	46d9      	mov	r9, fp
 800a0a0:	f04f 0c00 	mov.w	ip, #0
 800a0a4:	9b01      	ldr	r3, [sp, #4]
 800a0a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a0aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	fa1f f38a 	uxth.w	r3, sl
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	b283      	uxth	r3, r0
 800a0b8:	1acb      	subs	r3, r1, r3
 800a0ba:	0c00      	lsrs	r0, r0, #16
 800a0bc:	4463      	add	r3, ip
 800a0be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a0c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a0cc:	4576      	cmp	r6, lr
 800a0ce:	f849 3b04 	str.w	r3, [r9], #4
 800a0d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0d6:	d8e5      	bhi.n	800a0a4 <__mdiff+0x88>
 800a0d8:	1b33      	subs	r3, r6, r4
 800a0da:	3b15      	subs	r3, #21
 800a0dc:	f023 0303 	bic.w	r3, r3, #3
 800a0e0:	3415      	adds	r4, #21
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	42a6      	cmp	r6, r4
 800a0e6:	bf38      	it	cc
 800a0e8:	2304      	movcc	r3, #4
 800a0ea:	441d      	add	r5, r3
 800a0ec:	445b      	add	r3, fp
 800a0ee:	461e      	mov	r6, r3
 800a0f0:	462c      	mov	r4, r5
 800a0f2:	4544      	cmp	r4, r8
 800a0f4:	d30e      	bcc.n	800a114 <__mdiff+0xf8>
 800a0f6:	f108 0103 	add.w	r1, r8, #3
 800a0fa:	1b49      	subs	r1, r1, r5
 800a0fc:	f021 0103 	bic.w	r1, r1, #3
 800a100:	3d03      	subs	r5, #3
 800a102:	45a8      	cmp	r8, r5
 800a104:	bf38      	it	cc
 800a106:	2100      	movcc	r1, #0
 800a108:	440b      	add	r3, r1
 800a10a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a10e:	b191      	cbz	r1, 800a136 <__mdiff+0x11a>
 800a110:	6117      	str	r7, [r2, #16]
 800a112:	e79d      	b.n	800a050 <__mdiff+0x34>
 800a114:	f854 1b04 	ldr.w	r1, [r4], #4
 800a118:	46e6      	mov	lr, ip
 800a11a:	0c08      	lsrs	r0, r1, #16
 800a11c:	fa1c fc81 	uxtah	ip, ip, r1
 800a120:	4471      	add	r1, lr
 800a122:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a126:	b289      	uxth	r1, r1
 800a128:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a12c:	f846 1b04 	str.w	r1, [r6], #4
 800a130:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a134:	e7dd      	b.n	800a0f2 <__mdiff+0xd6>
 800a136:	3f01      	subs	r7, #1
 800a138:	e7e7      	b.n	800a10a <__mdiff+0xee>
 800a13a:	bf00      	nop
 800a13c:	0800bf95 	.word	0x0800bf95
 800a140:	0800bfa6 	.word	0x0800bfa6

0800a144 <__d2b>:
 800a144:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a148:	460f      	mov	r7, r1
 800a14a:	2101      	movs	r1, #1
 800a14c:	ec59 8b10 	vmov	r8, r9, d0
 800a150:	4616      	mov	r6, r2
 800a152:	f7ff fccd 	bl	8009af0 <_Balloc>
 800a156:	4604      	mov	r4, r0
 800a158:	b930      	cbnz	r0, 800a168 <__d2b+0x24>
 800a15a:	4602      	mov	r2, r0
 800a15c:	4b23      	ldr	r3, [pc, #140]	@ (800a1ec <__d2b+0xa8>)
 800a15e:	4824      	ldr	r0, [pc, #144]	@ (800a1f0 <__d2b+0xac>)
 800a160:	f240 310f 	movw	r1, #783	@ 0x30f
 800a164:	f000 fa82 	bl	800a66c <__assert_func>
 800a168:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a16c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a170:	b10d      	cbz	r5, 800a176 <__d2b+0x32>
 800a172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	f1b8 0300 	subs.w	r3, r8, #0
 800a17c:	d023      	beq.n	800a1c6 <__d2b+0x82>
 800a17e:	4668      	mov	r0, sp
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	f7ff fd7c 	bl	8009c7e <__lo0bits>
 800a186:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a18a:	b1d0      	cbz	r0, 800a1c2 <__d2b+0x7e>
 800a18c:	f1c0 0320 	rsb	r3, r0, #32
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	430b      	orrs	r3, r1
 800a196:	40c2      	lsrs	r2, r0
 800a198:	6163      	str	r3, [r4, #20]
 800a19a:	9201      	str	r2, [sp, #4]
 800a19c:	9b01      	ldr	r3, [sp, #4]
 800a19e:	61a3      	str	r3, [r4, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	bf0c      	ite	eq
 800a1a4:	2201      	moveq	r2, #1
 800a1a6:	2202      	movne	r2, #2
 800a1a8:	6122      	str	r2, [r4, #16]
 800a1aa:	b1a5      	cbz	r5, 800a1d6 <__d2b+0x92>
 800a1ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1b0:	4405      	add	r5, r0
 800a1b2:	603d      	str	r5, [r7, #0]
 800a1b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a1b8:	6030      	str	r0, [r6, #0]
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	b003      	add	sp, #12
 800a1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1c2:	6161      	str	r1, [r4, #20]
 800a1c4:	e7ea      	b.n	800a19c <__d2b+0x58>
 800a1c6:	a801      	add	r0, sp, #4
 800a1c8:	f7ff fd59 	bl	8009c7e <__lo0bits>
 800a1cc:	9b01      	ldr	r3, [sp, #4]
 800a1ce:	6163      	str	r3, [r4, #20]
 800a1d0:	3020      	adds	r0, #32
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	e7e8      	b.n	800a1a8 <__d2b+0x64>
 800a1d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a1de:	6038      	str	r0, [r7, #0]
 800a1e0:	6918      	ldr	r0, [r3, #16]
 800a1e2:	f7ff fd2d 	bl	8009c40 <__hi0bits>
 800a1e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1ea:	e7e5      	b.n	800a1b8 <__d2b+0x74>
 800a1ec:	0800bf95 	.word	0x0800bf95
 800a1f0:	0800bfa6 	.word	0x0800bfa6

0800a1f4 <__ssputs_r>:
 800a1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f8:	688e      	ldr	r6, [r1, #8]
 800a1fa:	461f      	mov	r7, r3
 800a1fc:	42be      	cmp	r6, r7
 800a1fe:	680b      	ldr	r3, [r1, #0]
 800a200:	4682      	mov	sl, r0
 800a202:	460c      	mov	r4, r1
 800a204:	4690      	mov	r8, r2
 800a206:	d82d      	bhi.n	800a264 <__ssputs_r+0x70>
 800a208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a20c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a210:	d026      	beq.n	800a260 <__ssputs_r+0x6c>
 800a212:	6965      	ldr	r5, [r4, #20]
 800a214:	6909      	ldr	r1, [r1, #16]
 800a216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a21a:	eba3 0901 	sub.w	r9, r3, r1
 800a21e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a222:	1c7b      	adds	r3, r7, #1
 800a224:	444b      	add	r3, r9
 800a226:	106d      	asrs	r5, r5, #1
 800a228:	429d      	cmp	r5, r3
 800a22a:	bf38      	it	cc
 800a22c:	461d      	movcc	r5, r3
 800a22e:	0553      	lsls	r3, r2, #21
 800a230:	d527      	bpl.n	800a282 <__ssputs_r+0x8e>
 800a232:	4629      	mov	r1, r5
 800a234:	f7ff fbd0 	bl	80099d8 <_malloc_r>
 800a238:	4606      	mov	r6, r0
 800a23a:	b360      	cbz	r0, 800a296 <__ssputs_r+0xa2>
 800a23c:	6921      	ldr	r1, [r4, #16]
 800a23e:	464a      	mov	r2, r9
 800a240:	f000 fa06 	bl	800a650 <memcpy>
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a24a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	6126      	str	r6, [r4, #16]
 800a252:	6165      	str	r5, [r4, #20]
 800a254:	444e      	add	r6, r9
 800a256:	eba5 0509 	sub.w	r5, r5, r9
 800a25a:	6026      	str	r6, [r4, #0]
 800a25c:	60a5      	str	r5, [r4, #8]
 800a25e:	463e      	mov	r6, r7
 800a260:	42be      	cmp	r6, r7
 800a262:	d900      	bls.n	800a266 <__ssputs_r+0x72>
 800a264:	463e      	mov	r6, r7
 800a266:	6820      	ldr	r0, [r4, #0]
 800a268:	4632      	mov	r2, r6
 800a26a:	4641      	mov	r1, r8
 800a26c:	f000 f9c6 	bl	800a5fc <memmove>
 800a270:	68a3      	ldr	r3, [r4, #8]
 800a272:	1b9b      	subs	r3, r3, r6
 800a274:	60a3      	str	r3, [r4, #8]
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	4433      	add	r3, r6
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	2000      	movs	r0, #0
 800a27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a282:	462a      	mov	r2, r5
 800a284:	f000 fa36 	bl	800a6f4 <_realloc_r>
 800a288:	4606      	mov	r6, r0
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d1e0      	bne.n	800a250 <__ssputs_r+0x5c>
 800a28e:	6921      	ldr	r1, [r4, #16]
 800a290:	4650      	mov	r0, sl
 800a292:	f7ff fb2d 	bl	80098f0 <_free_r>
 800a296:	230c      	movs	r3, #12
 800a298:	f8ca 3000 	str.w	r3, [sl]
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a8:	e7e9      	b.n	800a27e <__ssputs_r+0x8a>
	...

0800a2ac <_svfiprintf_r>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	4698      	mov	r8, r3
 800a2b2:	898b      	ldrh	r3, [r1, #12]
 800a2b4:	061b      	lsls	r3, r3, #24
 800a2b6:	b09d      	sub	sp, #116	@ 0x74
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	4614      	mov	r4, r2
 800a2be:	d510      	bpl.n	800a2e2 <_svfiprintf_r+0x36>
 800a2c0:	690b      	ldr	r3, [r1, #16]
 800a2c2:	b973      	cbnz	r3, 800a2e2 <_svfiprintf_r+0x36>
 800a2c4:	2140      	movs	r1, #64	@ 0x40
 800a2c6:	f7ff fb87 	bl	80099d8 <_malloc_r>
 800a2ca:	6028      	str	r0, [r5, #0]
 800a2cc:	6128      	str	r0, [r5, #16]
 800a2ce:	b930      	cbnz	r0, 800a2de <_svfiprintf_r+0x32>
 800a2d0:	230c      	movs	r3, #12
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	b01d      	add	sp, #116	@ 0x74
 800a2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2de:	2340      	movs	r3, #64	@ 0x40
 800a2e0:	616b      	str	r3, [r5, #20]
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2e6:	2320      	movs	r3, #32
 800a2e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2f0:	2330      	movs	r3, #48	@ 0x30
 800a2f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a490 <_svfiprintf_r+0x1e4>
 800a2f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2fa:	f04f 0901 	mov.w	r9, #1
 800a2fe:	4623      	mov	r3, r4
 800a300:	469a      	mov	sl, r3
 800a302:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a306:	b10a      	cbz	r2, 800a30c <_svfiprintf_r+0x60>
 800a308:	2a25      	cmp	r2, #37	@ 0x25
 800a30a:	d1f9      	bne.n	800a300 <_svfiprintf_r+0x54>
 800a30c:	ebba 0b04 	subs.w	fp, sl, r4
 800a310:	d00b      	beq.n	800a32a <_svfiprintf_r+0x7e>
 800a312:	465b      	mov	r3, fp
 800a314:	4622      	mov	r2, r4
 800a316:	4629      	mov	r1, r5
 800a318:	4638      	mov	r0, r7
 800a31a:	f7ff ff6b 	bl	800a1f4 <__ssputs_r>
 800a31e:	3001      	adds	r0, #1
 800a320:	f000 80a7 	beq.w	800a472 <_svfiprintf_r+0x1c6>
 800a324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a326:	445a      	add	r2, fp
 800a328:	9209      	str	r2, [sp, #36]	@ 0x24
 800a32a:	f89a 3000 	ldrb.w	r3, [sl]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 809f 	beq.w	800a472 <_svfiprintf_r+0x1c6>
 800a334:	2300      	movs	r3, #0
 800a336:	f04f 32ff 	mov.w	r2, #4294967295
 800a33a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a33e:	f10a 0a01 	add.w	sl, sl, #1
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	9307      	str	r3, [sp, #28]
 800a346:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a34a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a34c:	4654      	mov	r4, sl
 800a34e:	2205      	movs	r2, #5
 800a350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a354:	484e      	ldr	r0, [pc, #312]	@ (800a490 <_svfiprintf_r+0x1e4>)
 800a356:	f7f5 ff43 	bl	80001e0 <memchr>
 800a35a:	9a04      	ldr	r2, [sp, #16]
 800a35c:	b9d8      	cbnz	r0, 800a396 <_svfiprintf_r+0xea>
 800a35e:	06d0      	lsls	r0, r2, #27
 800a360:	bf44      	itt	mi
 800a362:	2320      	movmi	r3, #32
 800a364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a368:	0711      	lsls	r1, r2, #28
 800a36a:	bf44      	itt	mi
 800a36c:	232b      	movmi	r3, #43	@ 0x2b
 800a36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a372:	f89a 3000 	ldrb.w	r3, [sl]
 800a376:	2b2a      	cmp	r3, #42	@ 0x2a
 800a378:	d015      	beq.n	800a3a6 <_svfiprintf_r+0xfa>
 800a37a:	9a07      	ldr	r2, [sp, #28]
 800a37c:	4654      	mov	r4, sl
 800a37e:	2000      	movs	r0, #0
 800a380:	f04f 0c0a 	mov.w	ip, #10
 800a384:	4621      	mov	r1, r4
 800a386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a38a:	3b30      	subs	r3, #48	@ 0x30
 800a38c:	2b09      	cmp	r3, #9
 800a38e:	d94b      	bls.n	800a428 <_svfiprintf_r+0x17c>
 800a390:	b1b0      	cbz	r0, 800a3c0 <_svfiprintf_r+0x114>
 800a392:	9207      	str	r2, [sp, #28]
 800a394:	e014      	b.n	800a3c0 <_svfiprintf_r+0x114>
 800a396:	eba0 0308 	sub.w	r3, r0, r8
 800a39a:	fa09 f303 	lsl.w	r3, r9, r3
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	9304      	str	r3, [sp, #16]
 800a3a2:	46a2      	mov	sl, r4
 800a3a4:	e7d2      	b.n	800a34c <_svfiprintf_r+0xa0>
 800a3a6:	9b03      	ldr	r3, [sp, #12]
 800a3a8:	1d19      	adds	r1, r3, #4
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	9103      	str	r1, [sp, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	bfbb      	ittet	lt
 800a3b2:	425b      	neglt	r3, r3
 800a3b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3b8:	9307      	strge	r3, [sp, #28]
 800a3ba:	9307      	strlt	r3, [sp, #28]
 800a3bc:	bfb8      	it	lt
 800a3be:	9204      	strlt	r2, [sp, #16]
 800a3c0:	7823      	ldrb	r3, [r4, #0]
 800a3c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3c4:	d10a      	bne.n	800a3dc <_svfiprintf_r+0x130>
 800a3c6:	7863      	ldrb	r3, [r4, #1]
 800a3c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ca:	d132      	bne.n	800a432 <_svfiprintf_r+0x186>
 800a3cc:	9b03      	ldr	r3, [sp, #12]
 800a3ce:	1d1a      	adds	r2, r3, #4
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	9203      	str	r2, [sp, #12]
 800a3d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3d8:	3402      	adds	r4, #2
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4a0 <_svfiprintf_r+0x1f4>
 800a3e0:	7821      	ldrb	r1, [r4, #0]
 800a3e2:	2203      	movs	r2, #3
 800a3e4:	4650      	mov	r0, sl
 800a3e6:	f7f5 fefb 	bl	80001e0 <memchr>
 800a3ea:	b138      	cbz	r0, 800a3fc <_svfiprintf_r+0x150>
 800a3ec:	9b04      	ldr	r3, [sp, #16]
 800a3ee:	eba0 000a 	sub.w	r0, r0, sl
 800a3f2:	2240      	movs	r2, #64	@ 0x40
 800a3f4:	4082      	lsls	r2, r0
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	3401      	adds	r4, #1
 800a3fa:	9304      	str	r3, [sp, #16]
 800a3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a400:	4824      	ldr	r0, [pc, #144]	@ (800a494 <_svfiprintf_r+0x1e8>)
 800a402:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a406:	2206      	movs	r2, #6
 800a408:	f7f5 feea 	bl	80001e0 <memchr>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d036      	beq.n	800a47e <_svfiprintf_r+0x1d2>
 800a410:	4b21      	ldr	r3, [pc, #132]	@ (800a498 <_svfiprintf_r+0x1ec>)
 800a412:	bb1b      	cbnz	r3, 800a45c <_svfiprintf_r+0x1b0>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	3307      	adds	r3, #7
 800a418:	f023 0307 	bic.w	r3, r3, #7
 800a41c:	3308      	adds	r3, #8
 800a41e:	9303      	str	r3, [sp, #12]
 800a420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a422:	4433      	add	r3, r6
 800a424:	9309      	str	r3, [sp, #36]	@ 0x24
 800a426:	e76a      	b.n	800a2fe <_svfiprintf_r+0x52>
 800a428:	fb0c 3202 	mla	r2, ip, r2, r3
 800a42c:	460c      	mov	r4, r1
 800a42e:	2001      	movs	r0, #1
 800a430:	e7a8      	b.n	800a384 <_svfiprintf_r+0xd8>
 800a432:	2300      	movs	r3, #0
 800a434:	3401      	adds	r4, #1
 800a436:	9305      	str	r3, [sp, #20]
 800a438:	4619      	mov	r1, r3
 800a43a:	f04f 0c0a 	mov.w	ip, #10
 800a43e:	4620      	mov	r0, r4
 800a440:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a444:	3a30      	subs	r2, #48	@ 0x30
 800a446:	2a09      	cmp	r2, #9
 800a448:	d903      	bls.n	800a452 <_svfiprintf_r+0x1a6>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0c6      	beq.n	800a3dc <_svfiprintf_r+0x130>
 800a44e:	9105      	str	r1, [sp, #20]
 800a450:	e7c4      	b.n	800a3dc <_svfiprintf_r+0x130>
 800a452:	fb0c 2101 	mla	r1, ip, r1, r2
 800a456:	4604      	mov	r4, r0
 800a458:	2301      	movs	r3, #1
 800a45a:	e7f0      	b.n	800a43e <_svfiprintf_r+0x192>
 800a45c:	ab03      	add	r3, sp, #12
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	462a      	mov	r2, r5
 800a462:	4b0e      	ldr	r3, [pc, #56]	@ (800a49c <_svfiprintf_r+0x1f0>)
 800a464:	a904      	add	r1, sp, #16
 800a466:	4638      	mov	r0, r7
 800a468:	f7fd fe4c 	bl	8008104 <_printf_float>
 800a46c:	1c42      	adds	r2, r0, #1
 800a46e:	4606      	mov	r6, r0
 800a470:	d1d6      	bne.n	800a420 <_svfiprintf_r+0x174>
 800a472:	89ab      	ldrh	r3, [r5, #12]
 800a474:	065b      	lsls	r3, r3, #25
 800a476:	f53f af2d 	bmi.w	800a2d4 <_svfiprintf_r+0x28>
 800a47a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a47c:	e72c      	b.n	800a2d8 <_svfiprintf_r+0x2c>
 800a47e:	ab03      	add	r3, sp, #12
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	462a      	mov	r2, r5
 800a484:	4b05      	ldr	r3, [pc, #20]	@ (800a49c <_svfiprintf_r+0x1f0>)
 800a486:	a904      	add	r1, sp, #16
 800a488:	4638      	mov	r0, r7
 800a48a:	f7fe f8d3 	bl	8008634 <_printf_i>
 800a48e:	e7ed      	b.n	800a46c <_svfiprintf_r+0x1c0>
 800a490:	0800c100 	.word	0x0800c100
 800a494:	0800c10a 	.word	0x0800c10a
 800a498:	08008105 	.word	0x08008105
 800a49c:	0800a1f5 	.word	0x0800a1f5
 800a4a0:	0800c106 	.word	0x0800c106

0800a4a4 <__sflush_r>:
 800a4a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ac:	0716      	lsls	r6, r2, #28
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	d454      	bmi.n	800a55e <__sflush_r+0xba>
 800a4b4:	684b      	ldr	r3, [r1, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	dc02      	bgt.n	800a4c0 <__sflush_r+0x1c>
 800a4ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dd48      	ble.n	800a552 <__sflush_r+0xae>
 800a4c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4c2:	2e00      	cmp	r6, #0
 800a4c4:	d045      	beq.n	800a552 <__sflush_r+0xae>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4cc:	682f      	ldr	r7, [r5, #0]
 800a4ce:	6a21      	ldr	r1, [r4, #32]
 800a4d0:	602b      	str	r3, [r5, #0]
 800a4d2:	d030      	beq.n	800a536 <__sflush_r+0x92>
 800a4d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4d6:	89a3      	ldrh	r3, [r4, #12]
 800a4d8:	0759      	lsls	r1, r3, #29
 800a4da:	d505      	bpl.n	800a4e8 <__sflush_r+0x44>
 800a4dc:	6863      	ldr	r3, [r4, #4]
 800a4de:	1ad2      	subs	r2, r2, r3
 800a4e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4e2:	b10b      	cbz	r3, 800a4e8 <__sflush_r+0x44>
 800a4e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4e6:	1ad2      	subs	r2, r2, r3
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4ec:	6a21      	ldr	r1, [r4, #32]
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b0      	blx	r6
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	d106      	bne.n	800a506 <__sflush_r+0x62>
 800a4f8:	6829      	ldr	r1, [r5, #0]
 800a4fa:	291d      	cmp	r1, #29
 800a4fc:	d82b      	bhi.n	800a556 <__sflush_r+0xb2>
 800a4fe:	4a2a      	ldr	r2, [pc, #168]	@ (800a5a8 <__sflush_r+0x104>)
 800a500:	410a      	asrs	r2, r1
 800a502:	07d6      	lsls	r6, r2, #31
 800a504:	d427      	bmi.n	800a556 <__sflush_r+0xb2>
 800a506:	2200      	movs	r2, #0
 800a508:	6062      	str	r2, [r4, #4]
 800a50a:	04d9      	lsls	r1, r3, #19
 800a50c:	6922      	ldr	r2, [r4, #16]
 800a50e:	6022      	str	r2, [r4, #0]
 800a510:	d504      	bpl.n	800a51c <__sflush_r+0x78>
 800a512:	1c42      	adds	r2, r0, #1
 800a514:	d101      	bne.n	800a51a <__sflush_r+0x76>
 800a516:	682b      	ldr	r3, [r5, #0]
 800a518:	b903      	cbnz	r3, 800a51c <__sflush_r+0x78>
 800a51a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a51c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a51e:	602f      	str	r7, [r5, #0]
 800a520:	b1b9      	cbz	r1, 800a552 <__sflush_r+0xae>
 800a522:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a526:	4299      	cmp	r1, r3
 800a528:	d002      	beq.n	800a530 <__sflush_r+0x8c>
 800a52a:	4628      	mov	r0, r5
 800a52c:	f7ff f9e0 	bl	80098f0 <_free_r>
 800a530:	2300      	movs	r3, #0
 800a532:	6363      	str	r3, [r4, #52]	@ 0x34
 800a534:	e00d      	b.n	800a552 <__sflush_r+0xae>
 800a536:	2301      	movs	r3, #1
 800a538:	4628      	mov	r0, r5
 800a53a:	47b0      	blx	r6
 800a53c:	4602      	mov	r2, r0
 800a53e:	1c50      	adds	r0, r2, #1
 800a540:	d1c9      	bne.n	800a4d6 <__sflush_r+0x32>
 800a542:	682b      	ldr	r3, [r5, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0c6      	beq.n	800a4d6 <__sflush_r+0x32>
 800a548:	2b1d      	cmp	r3, #29
 800a54a:	d001      	beq.n	800a550 <__sflush_r+0xac>
 800a54c:	2b16      	cmp	r3, #22
 800a54e:	d11e      	bne.n	800a58e <__sflush_r+0xea>
 800a550:	602f      	str	r7, [r5, #0]
 800a552:	2000      	movs	r0, #0
 800a554:	e022      	b.n	800a59c <__sflush_r+0xf8>
 800a556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a55a:	b21b      	sxth	r3, r3
 800a55c:	e01b      	b.n	800a596 <__sflush_r+0xf2>
 800a55e:	690f      	ldr	r7, [r1, #16]
 800a560:	2f00      	cmp	r7, #0
 800a562:	d0f6      	beq.n	800a552 <__sflush_r+0xae>
 800a564:	0793      	lsls	r3, r2, #30
 800a566:	680e      	ldr	r6, [r1, #0]
 800a568:	bf08      	it	eq
 800a56a:	694b      	ldreq	r3, [r1, #20]
 800a56c:	600f      	str	r7, [r1, #0]
 800a56e:	bf18      	it	ne
 800a570:	2300      	movne	r3, #0
 800a572:	eba6 0807 	sub.w	r8, r6, r7
 800a576:	608b      	str	r3, [r1, #8]
 800a578:	f1b8 0f00 	cmp.w	r8, #0
 800a57c:	dde9      	ble.n	800a552 <__sflush_r+0xae>
 800a57e:	6a21      	ldr	r1, [r4, #32]
 800a580:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a582:	4643      	mov	r3, r8
 800a584:	463a      	mov	r2, r7
 800a586:	4628      	mov	r0, r5
 800a588:	47b0      	blx	r6
 800a58a:	2800      	cmp	r0, #0
 800a58c:	dc08      	bgt.n	800a5a0 <__sflush_r+0xfc>
 800a58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a596:	81a3      	strh	r3, [r4, #12]
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a0:	4407      	add	r7, r0
 800a5a2:	eba8 0800 	sub.w	r8, r8, r0
 800a5a6:	e7e7      	b.n	800a578 <__sflush_r+0xd4>
 800a5a8:	dfbffffe 	.word	0xdfbffffe

0800a5ac <_fflush_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	690b      	ldr	r3, [r1, #16]
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	b913      	cbnz	r3, 800a5bc <_fflush_r+0x10>
 800a5b6:	2500      	movs	r5, #0
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	b118      	cbz	r0, 800a5c6 <_fflush_r+0x1a>
 800a5be:	6a03      	ldr	r3, [r0, #32]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <_fflush_r+0x1a>
 800a5c2:	f7fe f9e3 	bl	800898c <__sinit>
 800a5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d0f3      	beq.n	800a5b6 <_fflush_r+0xa>
 800a5ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5d0:	07d0      	lsls	r0, r2, #31
 800a5d2:	d404      	bmi.n	800a5de <_fflush_r+0x32>
 800a5d4:	0599      	lsls	r1, r3, #22
 800a5d6:	d402      	bmi.n	800a5de <_fflush_r+0x32>
 800a5d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5da:	f7fe fb3a 	bl	8008c52 <__retarget_lock_acquire_recursive>
 800a5de:	4628      	mov	r0, r5
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	f7ff ff5f 	bl	800a4a4 <__sflush_r>
 800a5e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5e8:	07da      	lsls	r2, r3, #31
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	d4e4      	bmi.n	800a5b8 <_fflush_r+0xc>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	059b      	lsls	r3, r3, #22
 800a5f2:	d4e1      	bmi.n	800a5b8 <_fflush_r+0xc>
 800a5f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5f6:	f7fe fb2d 	bl	8008c54 <__retarget_lock_release_recursive>
 800a5fa:	e7dd      	b.n	800a5b8 <_fflush_r+0xc>

0800a5fc <memmove>:
 800a5fc:	4288      	cmp	r0, r1
 800a5fe:	b510      	push	{r4, lr}
 800a600:	eb01 0402 	add.w	r4, r1, r2
 800a604:	d902      	bls.n	800a60c <memmove+0x10>
 800a606:	4284      	cmp	r4, r0
 800a608:	4623      	mov	r3, r4
 800a60a:	d807      	bhi.n	800a61c <memmove+0x20>
 800a60c:	1e43      	subs	r3, r0, #1
 800a60e:	42a1      	cmp	r1, r4
 800a610:	d008      	beq.n	800a624 <memmove+0x28>
 800a612:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a61a:	e7f8      	b.n	800a60e <memmove+0x12>
 800a61c:	4402      	add	r2, r0
 800a61e:	4601      	mov	r1, r0
 800a620:	428a      	cmp	r2, r1
 800a622:	d100      	bne.n	800a626 <memmove+0x2a>
 800a624:	bd10      	pop	{r4, pc}
 800a626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a62a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a62e:	e7f7      	b.n	800a620 <memmove+0x24>

0800a630 <_sbrk_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d06      	ldr	r5, [pc, #24]	@ (800a64c <_sbrk_r+0x1c>)
 800a634:	2300      	movs	r3, #0
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	602b      	str	r3, [r5, #0]
 800a63c:	f7f7 fd3a 	bl	80020b4 <_sbrk>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_sbrk_r+0x1a>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_sbrk_r+0x1a>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	20000adc 	.word	0x20000adc

0800a650 <memcpy>:
 800a650:	440a      	add	r2, r1
 800a652:	4291      	cmp	r1, r2
 800a654:	f100 33ff 	add.w	r3, r0, #4294967295
 800a658:	d100      	bne.n	800a65c <memcpy+0xc>
 800a65a:	4770      	bx	lr
 800a65c:	b510      	push	{r4, lr}
 800a65e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a662:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a666:	4291      	cmp	r1, r2
 800a668:	d1f9      	bne.n	800a65e <memcpy+0xe>
 800a66a:	bd10      	pop	{r4, pc}

0800a66c <__assert_func>:
 800a66c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a66e:	4614      	mov	r4, r2
 800a670:	461a      	mov	r2, r3
 800a672:	4b09      	ldr	r3, [pc, #36]	@ (800a698 <__assert_func+0x2c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4605      	mov	r5, r0
 800a678:	68d8      	ldr	r0, [r3, #12]
 800a67a:	b954      	cbnz	r4, 800a692 <__assert_func+0x26>
 800a67c:	4b07      	ldr	r3, [pc, #28]	@ (800a69c <__assert_func+0x30>)
 800a67e:	461c      	mov	r4, r3
 800a680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a684:	9100      	str	r1, [sp, #0]
 800a686:	462b      	mov	r3, r5
 800a688:	4905      	ldr	r1, [pc, #20]	@ (800a6a0 <__assert_func+0x34>)
 800a68a:	f000 f86f 	bl	800a76c <fiprintf>
 800a68e:	f000 f87f 	bl	800a790 <abort>
 800a692:	4b04      	ldr	r3, [pc, #16]	@ (800a6a4 <__assert_func+0x38>)
 800a694:	e7f4      	b.n	800a680 <__assert_func+0x14>
 800a696:	bf00      	nop
 800a698:	20000038 	.word	0x20000038
 800a69c:	0800c156 	.word	0x0800c156
 800a6a0:	0800c128 	.word	0x0800c128
 800a6a4:	0800c11b 	.word	0x0800c11b

0800a6a8 <_calloc_r>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	fba1 5402 	umull	r5, r4, r1, r2
 800a6ae:	b93c      	cbnz	r4, 800a6c0 <_calloc_r+0x18>
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	f7ff f991 	bl	80099d8 <_malloc_r>
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	b928      	cbnz	r0, 800a6c6 <_calloc_r+0x1e>
 800a6ba:	2600      	movs	r6, #0
 800a6bc:	4630      	mov	r0, r6
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	220c      	movs	r2, #12
 800a6c2:	6002      	str	r2, [r0, #0]
 800a6c4:	e7f9      	b.n	800a6ba <_calloc_r+0x12>
 800a6c6:	462a      	mov	r2, r5
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	f7fe fa31 	bl	8008b30 <memset>
 800a6ce:	e7f5      	b.n	800a6bc <_calloc_r+0x14>

0800a6d0 <__ascii_mbtowc>:
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	b901      	cbnz	r1, 800a6d6 <__ascii_mbtowc+0x6>
 800a6d4:	a901      	add	r1, sp, #4
 800a6d6:	b142      	cbz	r2, 800a6ea <__ascii_mbtowc+0x1a>
 800a6d8:	b14b      	cbz	r3, 800a6ee <__ascii_mbtowc+0x1e>
 800a6da:	7813      	ldrb	r3, [r2, #0]
 800a6dc:	600b      	str	r3, [r1, #0]
 800a6de:	7812      	ldrb	r2, [r2, #0]
 800a6e0:	1e10      	subs	r0, r2, #0
 800a6e2:	bf18      	it	ne
 800a6e4:	2001      	movne	r0, #1
 800a6e6:	b002      	add	sp, #8
 800a6e8:	4770      	bx	lr
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	e7fb      	b.n	800a6e6 <__ascii_mbtowc+0x16>
 800a6ee:	f06f 0001 	mvn.w	r0, #1
 800a6f2:	e7f8      	b.n	800a6e6 <__ascii_mbtowc+0x16>

0800a6f4 <_realloc_r>:
 800a6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	4615      	mov	r5, r2
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	b921      	cbnz	r1, 800a70a <_realloc_r+0x16>
 800a700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a704:	4611      	mov	r1, r2
 800a706:	f7ff b967 	b.w	80099d8 <_malloc_r>
 800a70a:	b92a      	cbnz	r2, 800a718 <_realloc_r+0x24>
 800a70c:	f7ff f8f0 	bl	80098f0 <_free_r>
 800a710:	2400      	movs	r4, #0
 800a712:	4620      	mov	r0, r4
 800a714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a718:	f000 f841 	bl	800a79e <_malloc_usable_size_r>
 800a71c:	4285      	cmp	r5, r0
 800a71e:	4606      	mov	r6, r0
 800a720:	d802      	bhi.n	800a728 <_realloc_r+0x34>
 800a722:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a726:	d8f4      	bhi.n	800a712 <_realloc_r+0x1e>
 800a728:	4629      	mov	r1, r5
 800a72a:	4640      	mov	r0, r8
 800a72c:	f7ff f954 	bl	80099d8 <_malloc_r>
 800a730:	4607      	mov	r7, r0
 800a732:	2800      	cmp	r0, #0
 800a734:	d0ec      	beq.n	800a710 <_realloc_r+0x1c>
 800a736:	42b5      	cmp	r5, r6
 800a738:	462a      	mov	r2, r5
 800a73a:	4621      	mov	r1, r4
 800a73c:	bf28      	it	cs
 800a73e:	4632      	movcs	r2, r6
 800a740:	f7ff ff86 	bl	800a650 <memcpy>
 800a744:	4621      	mov	r1, r4
 800a746:	4640      	mov	r0, r8
 800a748:	f7ff f8d2 	bl	80098f0 <_free_r>
 800a74c:	463c      	mov	r4, r7
 800a74e:	e7e0      	b.n	800a712 <_realloc_r+0x1e>

0800a750 <__ascii_wctomb>:
 800a750:	4603      	mov	r3, r0
 800a752:	4608      	mov	r0, r1
 800a754:	b141      	cbz	r1, 800a768 <__ascii_wctomb+0x18>
 800a756:	2aff      	cmp	r2, #255	@ 0xff
 800a758:	d904      	bls.n	800a764 <__ascii_wctomb+0x14>
 800a75a:	228a      	movs	r2, #138	@ 0x8a
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	f04f 30ff 	mov.w	r0, #4294967295
 800a762:	4770      	bx	lr
 800a764:	700a      	strb	r2, [r1, #0]
 800a766:	2001      	movs	r0, #1
 800a768:	4770      	bx	lr
	...

0800a76c <fiprintf>:
 800a76c:	b40e      	push	{r1, r2, r3}
 800a76e:	b503      	push	{r0, r1, lr}
 800a770:	4601      	mov	r1, r0
 800a772:	ab03      	add	r3, sp, #12
 800a774:	4805      	ldr	r0, [pc, #20]	@ (800a78c <fiprintf+0x20>)
 800a776:	f853 2b04 	ldr.w	r2, [r3], #4
 800a77a:	6800      	ldr	r0, [r0, #0]
 800a77c:	9301      	str	r3, [sp, #4]
 800a77e:	f000 f83f 	bl	800a800 <_vfiprintf_r>
 800a782:	b002      	add	sp, #8
 800a784:	f85d eb04 	ldr.w	lr, [sp], #4
 800a788:	b003      	add	sp, #12
 800a78a:	4770      	bx	lr
 800a78c:	20000038 	.word	0x20000038

0800a790 <abort>:
 800a790:	b508      	push	{r3, lr}
 800a792:	2006      	movs	r0, #6
 800a794:	f000 fa08 	bl	800aba8 <raise>
 800a798:	2001      	movs	r0, #1
 800a79a:	f7f7 fc13 	bl	8001fc4 <_exit>

0800a79e <_malloc_usable_size_r>:
 800a79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a2:	1f18      	subs	r0, r3, #4
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bfbc      	itt	lt
 800a7a8:	580b      	ldrlt	r3, [r1, r0]
 800a7aa:	18c0      	addlt	r0, r0, r3
 800a7ac:	4770      	bx	lr

0800a7ae <__sfputc_r>:
 800a7ae:	6893      	ldr	r3, [r2, #8]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	b410      	push	{r4}
 800a7b6:	6093      	str	r3, [r2, #8]
 800a7b8:	da08      	bge.n	800a7cc <__sfputc_r+0x1e>
 800a7ba:	6994      	ldr	r4, [r2, #24]
 800a7bc:	42a3      	cmp	r3, r4
 800a7be:	db01      	blt.n	800a7c4 <__sfputc_r+0x16>
 800a7c0:	290a      	cmp	r1, #10
 800a7c2:	d103      	bne.n	800a7cc <__sfputc_r+0x1e>
 800a7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7c8:	f000 b932 	b.w	800aa30 <__swbuf_r>
 800a7cc:	6813      	ldr	r3, [r2, #0]
 800a7ce:	1c58      	adds	r0, r3, #1
 800a7d0:	6010      	str	r0, [r2, #0]
 800a7d2:	7019      	strb	r1, [r3, #0]
 800a7d4:	4608      	mov	r0, r1
 800a7d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <__sfputs_r>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460f      	mov	r7, r1
 800a7e2:	4614      	mov	r4, r2
 800a7e4:	18d5      	adds	r5, r2, r3
 800a7e6:	42ac      	cmp	r4, r5
 800a7e8:	d101      	bne.n	800a7ee <__sfputs_r+0x12>
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	e007      	b.n	800a7fe <__sfputs_r+0x22>
 800a7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f2:	463a      	mov	r2, r7
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7ff ffda 	bl	800a7ae <__sfputc_r>
 800a7fa:	1c43      	adds	r3, r0, #1
 800a7fc:	d1f3      	bne.n	800a7e6 <__sfputs_r+0xa>
 800a7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a800 <_vfiprintf_r>:
 800a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	460d      	mov	r5, r1
 800a806:	b09d      	sub	sp, #116	@ 0x74
 800a808:	4614      	mov	r4, r2
 800a80a:	4698      	mov	r8, r3
 800a80c:	4606      	mov	r6, r0
 800a80e:	b118      	cbz	r0, 800a818 <_vfiprintf_r+0x18>
 800a810:	6a03      	ldr	r3, [r0, #32]
 800a812:	b90b      	cbnz	r3, 800a818 <_vfiprintf_r+0x18>
 800a814:	f7fe f8ba 	bl	800898c <__sinit>
 800a818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a81a:	07d9      	lsls	r1, r3, #31
 800a81c:	d405      	bmi.n	800a82a <_vfiprintf_r+0x2a>
 800a81e:	89ab      	ldrh	r3, [r5, #12]
 800a820:	059a      	lsls	r2, r3, #22
 800a822:	d402      	bmi.n	800a82a <_vfiprintf_r+0x2a>
 800a824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a826:	f7fe fa14 	bl	8008c52 <__retarget_lock_acquire_recursive>
 800a82a:	89ab      	ldrh	r3, [r5, #12]
 800a82c:	071b      	lsls	r3, r3, #28
 800a82e:	d501      	bpl.n	800a834 <_vfiprintf_r+0x34>
 800a830:	692b      	ldr	r3, [r5, #16]
 800a832:	b99b      	cbnz	r3, 800a85c <_vfiprintf_r+0x5c>
 800a834:	4629      	mov	r1, r5
 800a836:	4630      	mov	r0, r6
 800a838:	f000 f938 	bl	800aaac <__swsetup_r>
 800a83c:	b170      	cbz	r0, 800a85c <_vfiprintf_r+0x5c>
 800a83e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a840:	07dc      	lsls	r4, r3, #31
 800a842:	d504      	bpl.n	800a84e <_vfiprintf_r+0x4e>
 800a844:	f04f 30ff 	mov.w	r0, #4294967295
 800a848:	b01d      	add	sp, #116	@ 0x74
 800a84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84e:	89ab      	ldrh	r3, [r5, #12]
 800a850:	0598      	lsls	r0, r3, #22
 800a852:	d4f7      	bmi.n	800a844 <_vfiprintf_r+0x44>
 800a854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a856:	f7fe f9fd 	bl	8008c54 <__retarget_lock_release_recursive>
 800a85a:	e7f3      	b.n	800a844 <_vfiprintf_r+0x44>
 800a85c:	2300      	movs	r3, #0
 800a85e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a860:	2320      	movs	r3, #32
 800a862:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a866:	f8cd 800c 	str.w	r8, [sp, #12]
 800a86a:	2330      	movs	r3, #48	@ 0x30
 800a86c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa1c <_vfiprintf_r+0x21c>
 800a870:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a874:	f04f 0901 	mov.w	r9, #1
 800a878:	4623      	mov	r3, r4
 800a87a:	469a      	mov	sl, r3
 800a87c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a880:	b10a      	cbz	r2, 800a886 <_vfiprintf_r+0x86>
 800a882:	2a25      	cmp	r2, #37	@ 0x25
 800a884:	d1f9      	bne.n	800a87a <_vfiprintf_r+0x7a>
 800a886:	ebba 0b04 	subs.w	fp, sl, r4
 800a88a:	d00b      	beq.n	800a8a4 <_vfiprintf_r+0xa4>
 800a88c:	465b      	mov	r3, fp
 800a88e:	4622      	mov	r2, r4
 800a890:	4629      	mov	r1, r5
 800a892:	4630      	mov	r0, r6
 800a894:	f7ff ffa2 	bl	800a7dc <__sfputs_r>
 800a898:	3001      	adds	r0, #1
 800a89a:	f000 80a7 	beq.w	800a9ec <_vfiprintf_r+0x1ec>
 800a89e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8a0:	445a      	add	r2, fp
 800a8a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 809f 	beq.w	800a9ec <_vfiprintf_r+0x1ec>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8b8:	f10a 0a01 	add.w	sl, sl, #1
 800a8bc:	9304      	str	r3, [sp, #16]
 800a8be:	9307      	str	r3, [sp, #28]
 800a8c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8c6:	4654      	mov	r4, sl
 800a8c8:	2205      	movs	r2, #5
 800a8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ce:	4853      	ldr	r0, [pc, #332]	@ (800aa1c <_vfiprintf_r+0x21c>)
 800a8d0:	f7f5 fc86 	bl	80001e0 <memchr>
 800a8d4:	9a04      	ldr	r2, [sp, #16]
 800a8d6:	b9d8      	cbnz	r0, 800a910 <_vfiprintf_r+0x110>
 800a8d8:	06d1      	lsls	r1, r2, #27
 800a8da:	bf44      	itt	mi
 800a8dc:	2320      	movmi	r3, #32
 800a8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8e2:	0713      	lsls	r3, r2, #28
 800a8e4:	bf44      	itt	mi
 800a8e6:	232b      	movmi	r3, #43	@ 0x2b
 800a8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8f2:	d015      	beq.n	800a920 <_vfiprintf_r+0x120>
 800a8f4:	9a07      	ldr	r2, [sp, #28]
 800a8f6:	4654      	mov	r4, sl
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	f04f 0c0a 	mov.w	ip, #10
 800a8fe:	4621      	mov	r1, r4
 800a900:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a904:	3b30      	subs	r3, #48	@ 0x30
 800a906:	2b09      	cmp	r3, #9
 800a908:	d94b      	bls.n	800a9a2 <_vfiprintf_r+0x1a2>
 800a90a:	b1b0      	cbz	r0, 800a93a <_vfiprintf_r+0x13a>
 800a90c:	9207      	str	r2, [sp, #28]
 800a90e:	e014      	b.n	800a93a <_vfiprintf_r+0x13a>
 800a910:	eba0 0308 	sub.w	r3, r0, r8
 800a914:	fa09 f303 	lsl.w	r3, r9, r3
 800a918:	4313      	orrs	r3, r2
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	46a2      	mov	sl, r4
 800a91e:	e7d2      	b.n	800a8c6 <_vfiprintf_r+0xc6>
 800a920:	9b03      	ldr	r3, [sp, #12]
 800a922:	1d19      	adds	r1, r3, #4
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	9103      	str	r1, [sp, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	bfbb      	ittet	lt
 800a92c:	425b      	neglt	r3, r3
 800a92e:	f042 0202 	orrlt.w	r2, r2, #2
 800a932:	9307      	strge	r3, [sp, #28]
 800a934:	9307      	strlt	r3, [sp, #28]
 800a936:	bfb8      	it	lt
 800a938:	9204      	strlt	r2, [sp, #16]
 800a93a:	7823      	ldrb	r3, [r4, #0]
 800a93c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a93e:	d10a      	bne.n	800a956 <_vfiprintf_r+0x156>
 800a940:	7863      	ldrb	r3, [r4, #1]
 800a942:	2b2a      	cmp	r3, #42	@ 0x2a
 800a944:	d132      	bne.n	800a9ac <_vfiprintf_r+0x1ac>
 800a946:	9b03      	ldr	r3, [sp, #12]
 800a948:	1d1a      	adds	r2, r3, #4
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	9203      	str	r2, [sp, #12]
 800a94e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a952:	3402      	adds	r4, #2
 800a954:	9305      	str	r3, [sp, #20]
 800a956:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa2c <_vfiprintf_r+0x22c>
 800a95a:	7821      	ldrb	r1, [r4, #0]
 800a95c:	2203      	movs	r2, #3
 800a95e:	4650      	mov	r0, sl
 800a960:	f7f5 fc3e 	bl	80001e0 <memchr>
 800a964:	b138      	cbz	r0, 800a976 <_vfiprintf_r+0x176>
 800a966:	9b04      	ldr	r3, [sp, #16]
 800a968:	eba0 000a 	sub.w	r0, r0, sl
 800a96c:	2240      	movs	r2, #64	@ 0x40
 800a96e:	4082      	lsls	r2, r0
 800a970:	4313      	orrs	r3, r2
 800a972:	3401      	adds	r4, #1
 800a974:	9304      	str	r3, [sp, #16]
 800a976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a97a:	4829      	ldr	r0, [pc, #164]	@ (800aa20 <_vfiprintf_r+0x220>)
 800a97c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a980:	2206      	movs	r2, #6
 800a982:	f7f5 fc2d 	bl	80001e0 <memchr>
 800a986:	2800      	cmp	r0, #0
 800a988:	d03f      	beq.n	800aa0a <_vfiprintf_r+0x20a>
 800a98a:	4b26      	ldr	r3, [pc, #152]	@ (800aa24 <_vfiprintf_r+0x224>)
 800a98c:	bb1b      	cbnz	r3, 800a9d6 <_vfiprintf_r+0x1d6>
 800a98e:	9b03      	ldr	r3, [sp, #12]
 800a990:	3307      	adds	r3, #7
 800a992:	f023 0307 	bic.w	r3, r3, #7
 800a996:	3308      	adds	r3, #8
 800a998:	9303      	str	r3, [sp, #12]
 800a99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a99c:	443b      	add	r3, r7
 800a99e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9a0:	e76a      	b.n	800a878 <_vfiprintf_r+0x78>
 800a9a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	e7a8      	b.n	800a8fe <_vfiprintf_r+0xfe>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	3401      	adds	r4, #1
 800a9b0:	9305      	str	r3, [sp, #20]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	f04f 0c0a 	mov.w	ip, #10
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9be:	3a30      	subs	r2, #48	@ 0x30
 800a9c0:	2a09      	cmp	r2, #9
 800a9c2:	d903      	bls.n	800a9cc <_vfiprintf_r+0x1cc>
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d0c6      	beq.n	800a956 <_vfiprintf_r+0x156>
 800a9c8:	9105      	str	r1, [sp, #20]
 800a9ca:	e7c4      	b.n	800a956 <_vfiprintf_r+0x156>
 800a9cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e7f0      	b.n	800a9b8 <_vfiprintf_r+0x1b8>
 800a9d6:	ab03      	add	r3, sp, #12
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	462a      	mov	r2, r5
 800a9dc:	4b12      	ldr	r3, [pc, #72]	@ (800aa28 <_vfiprintf_r+0x228>)
 800a9de:	a904      	add	r1, sp, #16
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f7fd fb8f 	bl	8008104 <_printf_float>
 800a9e6:	4607      	mov	r7, r0
 800a9e8:	1c78      	adds	r0, r7, #1
 800a9ea:	d1d6      	bne.n	800a99a <_vfiprintf_r+0x19a>
 800a9ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ee:	07d9      	lsls	r1, r3, #31
 800a9f0:	d405      	bmi.n	800a9fe <_vfiprintf_r+0x1fe>
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	059a      	lsls	r2, r3, #22
 800a9f6:	d402      	bmi.n	800a9fe <_vfiprintf_r+0x1fe>
 800a9f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9fa:	f7fe f92b 	bl	8008c54 <__retarget_lock_release_recursive>
 800a9fe:	89ab      	ldrh	r3, [r5, #12]
 800aa00:	065b      	lsls	r3, r3, #25
 800aa02:	f53f af1f 	bmi.w	800a844 <_vfiprintf_r+0x44>
 800aa06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa08:	e71e      	b.n	800a848 <_vfiprintf_r+0x48>
 800aa0a:	ab03      	add	r3, sp, #12
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	462a      	mov	r2, r5
 800aa10:	4b05      	ldr	r3, [pc, #20]	@ (800aa28 <_vfiprintf_r+0x228>)
 800aa12:	a904      	add	r1, sp, #16
 800aa14:	4630      	mov	r0, r6
 800aa16:	f7fd fe0d 	bl	8008634 <_printf_i>
 800aa1a:	e7e4      	b.n	800a9e6 <_vfiprintf_r+0x1e6>
 800aa1c:	0800c100 	.word	0x0800c100
 800aa20:	0800c10a 	.word	0x0800c10a
 800aa24:	08008105 	.word	0x08008105
 800aa28:	0800a7dd 	.word	0x0800a7dd
 800aa2c:	0800c106 	.word	0x0800c106

0800aa30 <__swbuf_r>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	460e      	mov	r6, r1
 800aa34:	4614      	mov	r4, r2
 800aa36:	4605      	mov	r5, r0
 800aa38:	b118      	cbz	r0, 800aa42 <__swbuf_r+0x12>
 800aa3a:	6a03      	ldr	r3, [r0, #32]
 800aa3c:	b90b      	cbnz	r3, 800aa42 <__swbuf_r+0x12>
 800aa3e:	f7fd ffa5 	bl	800898c <__sinit>
 800aa42:	69a3      	ldr	r3, [r4, #24]
 800aa44:	60a3      	str	r3, [r4, #8]
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	071a      	lsls	r2, r3, #28
 800aa4a:	d501      	bpl.n	800aa50 <__swbuf_r+0x20>
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	b943      	cbnz	r3, 800aa62 <__swbuf_r+0x32>
 800aa50:	4621      	mov	r1, r4
 800aa52:	4628      	mov	r0, r5
 800aa54:	f000 f82a 	bl	800aaac <__swsetup_r>
 800aa58:	b118      	cbz	r0, 800aa62 <__swbuf_r+0x32>
 800aa5a:	f04f 37ff 	mov.w	r7, #4294967295
 800aa5e:	4638      	mov	r0, r7
 800aa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	6922      	ldr	r2, [r4, #16]
 800aa66:	1a98      	subs	r0, r3, r2
 800aa68:	6963      	ldr	r3, [r4, #20]
 800aa6a:	b2f6      	uxtb	r6, r6
 800aa6c:	4283      	cmp	r3, r0
 800aa6e:	4637      	mov	r7, r6
 800aa70:	dc05      	bgt.n	800aa7e <__swbuf_r+0x4e>
 800aa72:	4621      	mov	r1, r4
 800aa74:	4628      	mov	r0, r5
 800aa76:	f7ff fd99 	bl	800a5ac <_fflush_r>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d1ed      	bne.n	800aa5a <__swbuf_r+0x2a>
 800aa7e:	68a3      	ldr	r3, [r4, #8]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	60a3      	str	r3, [r4, #8]
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	6022      	str	r2, [r4, #0]
 800aa8a:	701e      	strb	r6, [r3, #0]
 800aa8c:	6962      	ldr	r2, [r4, #20]
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d004      	beq.n	800aa9e <__swbuf_r+0x6e>
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	07db      	lsls	r3, r3, #31
 800aa98:	d5e1      	bpl.n	800aa5e <__swbuf_r+0x2e>
 800aa9a:	2e0a      	cmp	r6, #10
 800aa9c:	d1df      	bne.n	800aa5e <__swbuf_r+0x2e>
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f7ff fd83 	bl	800a5ac <_fflush_r>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d0d9      	beq.n	800aa5e <__swbuf_r+0x2e>
 800aaaa:	e7d6      	b.n	800aa5a <__swbuf_r+0x2a>

0800aaac <__swsetup_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4b29      	ldr	r3, [pc, #164]	@ (800ab54 <__swsetup_r+0xa8>)
 800aab0:	4605      	mov	r5, r0
 800aab2:	6818      	ldr	r0, [r3, #0]
 800aab4:	460c      	mov	r4, r1
 800aab6:	b118      	cbz	r0, 800aac0 <__swsetup_r+0x14>
 800aab8:	6a03      	ldr	r3, [r0, #32]
 800aaba:	b90b      	cbnz	r3, 800aac0 <__swsetup_r+0x14>
 800aabc:	f7fd ff66 	bl	800898c <__sinit>
 800aac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aac4:	0719      	lsls	r1, r3, #28
 800aac6:	d422      	bmi.n	800ab0e <__swsetup_r+0x62>
 800aac8:	06da      	lsls	r2, r3, #27
 800aaca:	d407      	bmi.n	800aadc <__swsetup_r+0x30>
 800aacc:	2209      	movs	r2, #9
 800aace:	602a      	str	r2, [r5, #0]
 800aad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	e033      	b.n	800ab44 <__swsetup_r+0x98>
 800aadc:	0758      	lsls	r0, r3, #29
 800aade:	d512      	bpl.n	800ab06 <__swsetup_r+0x5a>
 800aae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aae2:	b141      	cbz	r1, 800aaf6 <__swsetup_r+0x4a>
 800aae4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aae8:	4299      	cmp	r1, r3
 800aaea:	d002      	beq.n	800aaf2 <__swsetup_r+0x46>
 800aaec:	4628      	mov	r0, r5
 800aaee:	f7fe feff 	bl	80098f0 <_free_r>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	2300      	movs	r3, #0
 800ab00:	6063      	str	r3, [r4, #4]
 800ab02:	6923      	ldr	r3, [r4, #16]
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	f043 0308 	orr.w	r3, r3, #8
 800ab0c:	81a3      	strh	r3, [r4, #12]
 800ab0e:	6923      	ldr	r3, [r4, #16]
 800ab10:	b94b      	cbnz	r3, 800ab26 <__swsetup_r+0x7a>
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab1c:	d003      	beq.n	800ab26 <__swsetup_r+0x7a>
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4628      	mov	r0, r5
 800ab22:	f000 f883 	bl	800ac2c <__smakebuf_r>
 800ab26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2a:	f013 0201 	ands.w	r2, r3, #1
 800ab2e:	d00a      	beq.n	800ab46 <__swsetup_r+0x9a>
 800ab30:	2200      	movs	r2, #0
 800ab32:	60a2      	str	r2, [r4, #8]
 800ab34:	6962      	ldr	r2, [r4, #20]
 800ab36:	4252      	negs	r2, r2
 800ab38:	61a2      	str	r2, [r4, #24]
 800ab3a:	6922      	ldr	r2, [r4, #16]
 800ab3c:	b942      	cbnz	r2, 800ab50 <__swsetup_r+0xa4>
 800ab3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab42:	d1c5      	bne.n	800aad0 <__swsetup_r+0x24>
 800ab44:	bd38      	pop	{r3, r4, r5, pc}
 800ab46:	0799      	lsls	r1, r3, #30
 800ab48:	bf58      	it	pl
 800ab4a:	6962      	ldrpl	r2, [r4, #20]
 800ab4c:	60a2      	str	r2, [r4, #8]
 800ab4e:	e7f4      	b.n	800ab3a <__swsetup_r+0x8e>
 800ab50:	2000      	movs	r0, #0
 800ab52:	e7f7      	b.n	800ab44 <__swsetup_r+0x98>
 800ab54:	20000038 	.word	0x20000038

0800ab58 <_raise_r>:
 800ab58:	291f      	cmp	r1, #31
 800ab5a:	b538      	push	{r3, r4, r5, lr}
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	460c      	mov	r4, r1
 800ab60:	d904      	bls.n	800ab6c <_raise_r+0x14>
 800ab62:	2316      	movs	r3, #22
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab6e:	b112      	cbz	r2, 800ab76 <_raise_r+0x1e>
 800ab70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab74:	b94b      	cbnz	r3, 800ab8a <_raise_r+0x32>
 800ab76:	4628      	mov	r0, r5
 800ab78:	f000 f830 	bl	800abdc <_getpid_r>
 800ab7c:	4622      	mov	r2, r4
 800ab7e:	4601      	mov	r1, r0
 800ab80:	4628      	mov	r0, r5
 800ab82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab86:	f000 b817 	b.w	800abb8 <_kill_r>
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d00a      	beq.n	800aba4 <_raise_r+0x4c>
 800ab8e:	1c59      	adds	r1, r3, #1
 800ab90:	d103      	bne.n	800ab9a <_raise_r+0x42>
 800ab92:	2316      	movs	r3, #22
 800ab94:	6003      	str	r3, [r0, #0]
 800ab96:	2001      	movs	r0, #1
 800ab98:	e7e7      	b.n	800ab6a <_raise_r+0x12>
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aba0:	4620      	mov	r0, r4
 800aba2:	4798      	blx	r3
 800aba4:	2000      	movs	r0, #0
 800aba6:	e7e0      	b.n	800ab6a <_raise_r+0x12>

0800aba8 <raise>:
 800aba8:	4b02      	ldr	r3, [pc, #8]	@ (800abb4 <raise+0xc>)
 800abaa:	4601      	mov	r1, r0
 800abac:	6818      	ldr	r0, [r3, #0]
 800abae:	f7ff bfd3 	b.w	800ab58 <_raise_r>
 800abb2:	bf00      	nop
 800abb4:	20000038 	.word	0x20000038

0800abb8 <_kill_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4d07      	ldr	r5, [pc, #28]	@ (800abd8 <_kill_r+0x20>)
 800abbc:	2300      	movs	r3, #0
 800abbe:	4604      	mov	r4, r0
 800abc0:	4608      	mov	r0, r1
 800abc2:	4611      	mov	r1, r2
 800abc4:	602b      	str	r3, [r5, #0]
 800abc6:	f7f7 f9ed 	bl	8001fa4 <_kill>
 800abca:	1c43      	adds	r3, r0, #1
 800abcc:	d102      	bne.n	800abd4 <_kill_r+0x1c>
 800abce:	682b      	ldr	r3, [r5, #0]
 800abd0:	b103      	cbz	r3, 800abd4 <_kill_r+0x1c>
 800abd2:	6023      	str	r3, [r4, #0]
 800abd4:	bd38      	pop	{r3, r4, r5, pc}
 800abd6:	bf00      	nop
 800abd8:	20000adc 	.word	0x20000adc

0800abdc <_getpid_r>:
 800abdc:	f7f7 b9da 	b.w	8001f94 <_getpid>

0800abe0 <__swhatbuf_r>:
 800abe0:	b570      	push	{r4, r5, r6, lr}
 800abe2:	460c      	mov	r4, r1
 800abe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe8:	2900      	cmp	r1, #0
 800abea:	b096      	sub	sp, #88	@ 0x58
 800abec:	4615      	mov	r5, r2
 800abee:	461e      	mov	r6, r3
 800abf0:	da0d      	bge.n	800ac0e <__swhatbuf_r+0x2e>
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800abf8:	f04f 0100 	mov.w	r1, #0
 800abfc:	bf14      	ite	ne
 800abfe:	2340      	movne	r3, #64	@ 0x40
 800ac00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac04:	2000      	movs	r0, #0
 800ac06:	6031      	str	r1, [r6, #0]
 800ac08:	602b      	str	r3, [r5, #0]
 800ac0a:	b016      	add	sp, #88	@ 0x58
 800ac0c:	bd70      	pop	{r4, r5, r6, pc}
 800ac0e:	466a      	mov	r2, sp
 800ac10:	f000 f848 	bl	800aca4 <_fstat_r>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	dbec      	blt.n	800abf2 <__swhatbuf_r+0x12>
 800ac18:	9901      	ldr	r1, [sp, #4]
 800ac1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac22:	4259      	negs	r1, r3
 800ac24:	4159      	adcs	r1, r3
 800ac26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac2a:	e7eb      	b.n	800ac04 <__swhatbuf_r+0x24>

0800ac2c <__smakebuf_r>:
 800ac2c:	898b      	ldrh	r3, [r1, #12]
 800ac2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac30:	079d      	lsls	r5, r3, #30
 800ac32:	4606      	mov	r6, r0
 800ac34:	460c      	mov	r4, r1
 800ac36:	d507      	bpl.n	800ac48 <__smakebuf_r+0x1c>
 800ac38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	6123      	str	r3, [r4, #16]
 800ac40:	2301      	movs	r3, #1
 800ac42:	6163      	str	r3, [r4, #20]
 800ac44:	b003      	add	sp, #12
 800ac46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac48:	ab01      	add	r3, sp, #4
 800ac4a:	466a      	mov	r2, sp
 800ac4c:	f7ff ffc8 	bl	800abe0 <__swhatbuf_r>
 800ac50:	9f00      	ldr	r7, [sp, #0]
 800ac52:	4605      	mov	r5, r0
 800ac54:	4639      	mov	r1, r7
 800ac56:	4630      	mov	r0, r6
 800ac58:	f7fe febe 	bl	80099d8 <_malloc_r>
 800ac5c:	b948      	cbnz	r0, 800ac72 <__smakebuf_r+0x46>
 800ac5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac62:	059a      	lsls	r2, r3, #22
 800ac64:	d4ee      	bmi.n	800ac44 <__smakebuf_r+0x18>
 800ac66:	f023 0303 	bic.w	r3, r3, #3
 800ac6a:	f043 0302 	orr.w	r3, r3, #2
 800ac6e:	81a3      	strh	r3, [r4, #12]
 800ac70:	e7e2      	b.n	800ac38 <__smakebuf_r+0xc>
 800ac72:	89a3      	ldrh	r3, [r4, #12]
 800ac74:	6020      	str	r0, [r4, #0]
 800ac76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac7a:	81a3      	strh	r3, [r4, #12]
 800ac7c:	9b01      	ldr	r3, [sp, #4]
 800ac7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac82:	b15b      	cbz	r3, 800ac9c <__smakebuf_r+0x70>
 800ac84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f000 f81d 	bl	800acc8 <_isatty_r>
 800ac8e:	b128      	cbz	r0, 800ac9c <__smakebuf_r+0x70>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f023 0303 	bic.w	r3, r3, #3
 800ac96:	f043 0301 	orr.w	r3, r3, #1
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	431d      	orrs	r5, r3
 800aca0:	81a5      	strh	r5, [r4, #12]
 800aca2:	e7cf      	b.n	800ac44 <__smakebuf_r+0x18>

0800aca4 <_fstat_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4d07      	ldr	r5, [pc, #28]	@ (800acc4 <_fstat_r+0x20>)
 800aca8:	2300      	movs	r3, #0
 800acaa:	4604      	mov	r4, r0
 800acac:	4608      	mov	r0, r1
 800acae:	4611      	mov	r1, r2
 800acb0:	602b      	str	r3, [r5, #0]
 800acb2:	f7f7 f9d7 	bl	8002064 <_fstat>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	d102      	bne.n	800acc0 <_fstat_r+0x1c>
 800acba:	682b      	ldr	r3, [r5, #0]
 800acbc:	b103      	cbz	r3, 800acc0 <_fstat_r+0x1c>
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	bd38      	pop	{r3, r4, r5, pc}
 800acc2:	bf00      	nop
 800acc4:	20000adc 	.word	0x20000adc

0800acc8 <_isatty_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4d06      	ldr	r5, [pc, #24]	@ (800ace4 <_isatty_r+0x1c>)
 800accc:	2300      	movs	r3, #0
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	602b      	str	r3, [r5, #0]
 800acd4:	f7f7 f9d6 	bl	8002084 <_isatty>
 800acd8:	1c43      	adds	r3, r0, #1
 800acda:	d102      	bne.n	800ace2 <_isatty_r+0x1a>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	b103      	cbz	r3, 800ace2 <_isatty_r+0x1a>
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	bd38      	pop	{r3, r4, r5, pc}
 800ace4:	20000adc 	.word	0x20000adc

0800ace8 <pow>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	ed2d 8b02 	vpush	{d8}
 800acee:	eeb0 8a40 	vmov.f32	s16, s0
 800acf2:	eef0 8a60 	vmov.f32	s17, s1
 800acf6:	ec55 4b11 	vmov	r4, r5, d1
 800acfa:	f000 f871 	bl	800ade0 <__ieee754_pow>
 800acfe:	4622      	mov	r2, r4
 800ad00:	462b      	mov	r3, r5
 800ad02:	4620      	mov	r0, r4
 800ad04:	4629      	mov	r1, r5
 800ad06:	ec57 6b10 	vmov	r6, r7, d0
 800ad0a:	f7f5 ff17 	bl	8000b3c <__aeabi_dcmpun>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d13b      	bne.n	800ad8a <pow+0xa2>
 800ad12:	ec51 0b18 	vmov	r0, r1, d8
 800ad16:	2200      	movs	r2, #0
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f7f5 fedd 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad1e:	b1b8      	cbz	r0, 800ad50 <pow+0x68>
 800ad20:	2200      	movs	r2, #0
 800ad22:	2300      	movs	r3, #0
 800ad24:	4620      	mov	r0, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	f7f5 fed6 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d146      	bne.n	800adbe <pow+0xd6>
 800ad30:	ec45 4b10 	vmov	d0, r4, r5
 800ad34:	f000 f848 	bl	800adc8 <finite>
 800ad38:	b338      	cbz	r0, 800ad8a <pow+0xa2>
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	4620      	mov	r0, r4
 800ad40:	4629      	mov	r1, r5
 800ad42:	f7f5 fed3 	bl	8000aec <__aeabi_dcmplt>
 800ad46:	b300      	cbz	r0, 800ad8a <pow+0xa2>
 800ad48:	f7fd ff58 	bl	8008bfc <__errno>
 800ad4c:	2322      	movs	r3, #34	@ 0x22
 800ad4e:	e01b      	b.n	800ad88 <pow+0xa0>
 800ad50:	ec47 6b10 	vmov	d0, r6, r7
 800ad54:	f000 f838 	bl	800adc8 <finite>
 800ad58:	b9e0      	cbnz	r0, 800ad94 <pow+0xac>
 800ad5a:	eeb0 0a48 	vmov.f32	s0, s16
 800ad5e:	eef0 0a68 	vmov.f32	s1, s17
 800ad62:	f000 f831 	bl	800adc8 <finite>
 800ad66:	b1a8      	cbz	r0, 800ad94 <pow+0xac>
 800ad68:	ec45 4b10 	vmov	d0, r4, r5
 800ad6c:	f000 f82c 	bl	800adc8 <finite>
 800ad70:	b180      	cbz	r0, 800ad94 <pow+0xac>
 800ad72:	4632      	mov	r2, r6
 800ad74:	463b      	mov	r3, r7
 800ad76:	4630      	mov	r0, r6
 800ad78:	4639      	mov	r1, r7
 800ad7a:	f7f5 fedf 	bl	8000b3c <__aeabi_dcmpun>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d0e2      	beq.n	800ad48 <pow+0x60>
 800ad82:	f7fd ff3b 	bl	8008bfc <__errno>
 800ad86:	2321      	movs	r3, #33	@ 0x21
 800ad88:	6003      	str	r3, [r0, #0]
 800ad8a:	ecbd 8b02 	vpop	{d8}
 800ad8e:	ec47 6b10 	vmov	d0, r6, r7
 800ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad94:	2200      	movs	r2, #0
 800ad96:	2300      	movs	r3, #0
 800ad98:	4630      	mov	r0, r6
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	f7f5 fe9c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d0f2      	beq.n	800ad8a <pow+0xa2>
 800ada4:	eeb0 0a48 	vmov.f32	s0, s16
 800ada8:	eef0 0a68 	vmov.f32	s1, s17
 800adac:	f000 f80c 	bl	800adc8 <finite>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0ea      	beq.n	800ad8a <pow+0xa2>
 800adb4:	ec45 4b10 	vmov	d0, r4, r5
 800adb8:	f000 f806 	bl	800adc8 <finite>
 800adbc:	e7c3      	b.n	800ad46 <pow+0x5e>
 800adbe:	4f01      	ldr	r7, [pc, #4]	@ (800adc4 <pow+0xdc>)
 800adc0:	2600      	movs	r6, #0
 800adc2:	e7e2      	b.n	800ad8a <pow+0xa2>
 800adc4:	3ff00000 	.word	0x3ff00000

0800adc8 <finite>:
 800adc8:	b082      	sub	sp, #8
 800adca:	ed8d 0b00 	vstr	d0, [sp]
 800adce:	9801      	ldr	r0, [sp, #4]
 800add0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800add4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800add8:	0fc0      	lsrs	r0, r0, #31
 800adda:	b002      	add	sp, #8
 800addc:	4770      	bx	lr
	...

0800ade0 <__ieee754_pow>:
 800ade0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade4:	b091      	sub	sp, #68	@ 0x44
 800ade6:	ed8d 1b00 	vstr	d1, [sp]
 800adea:	e9dd 1900 	ldrd	r1, r9, [sp]
 800adee:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800adf2:	ea5a 0001 	orrs.w	r0, sl, r1
 800adf6:	ec57 6b10 	vmov	r6, r7, d0
 800adfa:	d113      	bne.n	800ae24 <__ieee754_pow+0x44>
 800adfc:	19b3      	adds	r3, r6, r6
 800adfe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ae02:	4152      	adcs	r2, r2
 800ae04:	4298      	cmp	r0, r3
 800ae06:	4b98      	ldr	r3, [pc, #608]	@ (800b068 <__ieee754_pow+0x288>)
 800ae08:	4193      	sbcs	r3, r2
 800ae0a:	f080 84ea 	bcs.w	800b7e2 <__ieee754_pow+0xa02>
 800ae0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae12:	4630      	mov	r0, r6
 800ae14:	4639      	mov	r1, r7
 800ae16:	f7f5 fa41 	bl	800029c <__adddf3>
 800ae1a:	ec41 0b10 	vmov	d0, r0, r1
 800ae1e:	b011      	add	sp, #68	@ 0x44
 800ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae24:	4a91      	ldr	r2, [pc, #580]	@ (800b06c <__ieee754_pow+0x28c>)
 800ae26:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ae2a:	4590      	cmp	r8, r2
 800ae2c:	463d      	mov	r5, r7
 800ae2e:	4633      	mov	r3, r6
 800ae30:	d806      	bhi.n	800ae40 <__ieee754_pow+0x60>
 800ae32:	d101      	bne.n	800ae38 <__ieee754_pow+0x58>
 800ae34:	2e00      	cmp	r6, #0
 800ae36:	d1ea      	bne.n	800ae0e <__ieee754_pow+0x2e>
 800ae38:	4592      	cmp	sl, r2
 800ae3a:	d801      	bhi.n	800ae40 <__ieee754_pow+0x60>
 800ae3c:	d10e      	bne.n	800ae5c <__ieee754_pow+0x7c>
 800ae3e:	b169      	cbz	r1, 800ae5c <__ieee754_pow+0x7c>
 800ae40:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ae44:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ae48:	431d      	orrs	r5, r3
 800ae4a:	d1e0      	bne.n	800ae0e <__ieee754_pow+0x2e>
 800ae4c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ae50:	18db      	adds	r3, r3, r3
 800ae52:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ae56:	4152      	adcs	r2, r2
 800ae58:	429d      	cmp	r5, r3
 800ae5a:	e7d4      	b.n	800ae06 <__ieee754_pow+0x26>
 800ae5c:	2d00      	cmp	r5, #0
 800ae5e:	46c3      	mov	fp, r8
 800ae60:	da3a      	bge.n	800aed8 <__ieee754_pow+0xf8>
 800ae62:	4a83      	ldr	r2, [pc, #524]	@ (800b070 <__ieee754_pow+0x290>)
 800ae64:	4592      	cmp	sl, r2
 800ae66:	d84d      	bhi.n	800af04 <__ieee754_pow+0x124>
 800ae68:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ae6c:	4592      	cmp	sl, r2
 800ae6e:	f240 84c7 	bls.w	800b800 <__ieee754_pow+0xa20>
 800ae72:	ea4f 522a 	mov.w	r2, sl, asr #20
 800ae76:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ae7a:	2a14      	cmp	r2, #20
 800ae7c:	dd0f      	ble.n	800ae9e <__ieee754_pow+0xbe>
 800ae7e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ae82:	fa21 f402 	lsr.w	r4, r1, r2
 800ae86:	fa04 f202 	lsl.w	r2, r4, r2
 800ae8a:	428a      	cmp	r2, r1
 800ae8c:	f040 84b8 	bne.w	800b800 <__ieee754_pow+0xa20>
 800ae90:	f004 0401 	and.w	r4, r4, #1
 800ae94:	f1c4 0402 	rsb	r4, r4, #2
 800ae98:	2900      	cmp	r1, #0
 800ae9a:	d158      	bne.n	800af4e <__ieee754_pow+0x16e>
 800ae9c:	e00e      	b.n	800aebc <__ieee754_pow+0xdc>
 800ae9e:	2900      	cmp	r1, #0
 800aea0:	d154      	bne.n	800af4c <__ieee754_pow+0x16c>
 800aea2:	f1c2 0214 	rsb	r2, r2, #20
 800aea6:	fa4a f402 	asr.w	r4, sl, r2
 800aeaa:	fa04 f202 	lsl.w	r2, r4, r2
 800aeae:	4552      	cmp	r2, sl
 800aeb0:	f040 84a3 	bne.w	800b7fa <__ieee754_pow+0xa1a>
 800aeb4:	f004 0401 	and.w	r4, r4, #1
 800aeb8:	f1c4 0402 	rsb	r4, r4, #2
 800aebc:	4a6d      	ldr	r2, [pc, #436]	@ (800b074 <__ieee754_pow+0x294>)
 800aebe:	4592      	cmp	sl, r2
 800aec0:	d12e      	bne.n	800af20 <__ieee754_pow+0x140>
 800aec2:	f1b9 0f00 	cmp.w	r9, #0
 800aec6:	f280 8494 	bge.w	800b7f2 <__ieee754_pow+0xa12>
 800aeca:	496a      	ldr	r1, [pc, #424]	@ (800b074 <__ieee754_pow+0x294>)
 800aecc:	4632      	mov	r2, r6
 800aece:	463b      	mov	r3, r7
 800aed0:	2000      	movs	r0, #0
 800aed2:	f7f5 fcc3 	bl	800085c <__aeabi_ddiv>
 800aed6:	e7a0      	b.n	800ae1a <__ieee754_pow+0x3a>
 800aed8:	2400      	movs	r4, #0
 800aeda:	bbc1      	cbnz	r1, 800af4e <__ieee754_pow+0x16e>
 800aedc:	4a63      	ldr	r2, [pc, #396]	@ (800b06c <__ieee754_pow+0x28c>)
 800aede:	4592      	cmp	sl, r2
 800aee0:	d1ec      	bne.n	800aebc <__ieee754_pow+0xdc>
 800aee2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800aee6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800aeea:	431a      	orrs	r2, r3
 800aeec:	f000 8479 	beq.w	800b7e2 <__ieee754_pow+0xa02>
 800aef0:	4b61      	ldr	r3, [pc, #388]	@ (800b078 <__ieee754_pow+0x298>)
 800aef2:	4598      	cmp	r8, r3
 800aef4:	d908      	bls.n	800af08 <__ieee754_pow+0x128>
 800aef6:	f1b9 0f00 	cmp.w	r9, #0
 800aefa:	f2c0 8476 	blt.w	800b7ea <__ieee754_pow+0xa0a>
 800aefe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af02:	e78a      	b.n	800ae1a <__ieee754_pow+0x3a>
 800af04:	2402      	movs	r4, #2
 800af06:	e7e8      	b.n	800aeda <__ieee754_pow+0xfa>
 800af08:	f1b9 0f00 	cmp.w	r9, #0
 800af0c:	f04f 0000 	mov.w	r0, #0
 800af10:	f04f 0100 	mov.w	r1, #0
 800af14:	da81      	bge.n	800ae1a <__ieee754_pow+0x3a>
 800af16:	e9dd 0300 	ldrd	r0, r3, [sp]
 800af1a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800af1e:	e77c      	b.n	800ae1a <__ieee754_pow+0x3a>
 800af20:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800af24:	d106      	bne.n	800af34 <__ieee754_pow+0x154>
 800af26:	4632      	mov	r2, r6
 800af28:	463b      	mov	r3, r7
 800af2a:	4630      	mov	r0, r6
 800af2c:	4639      	mov	r1, r7
 800af2e:	f7f5 fb6b 	bl	8000608 <__aeabi_dmul>
 800af32:	e772      	b.n	800ae1a <__ieee754_pow+0x3a>
 800af34:	4a51      	ldr	r2, [pc, #324]	@ (800b07c <__ieee754_pow+0x29c>)
 800af36:	4591      	cmp	r9, r2
 800af38:	d109      	bne.n	800af4e <__ieee754_pow+0x16e>
 800af3a:	2d00      	cmp	r5, #0
 800af3c:	db07      	blt.n	800af4e <__ieee754_pow+0x16e>
 800af3e:	ec47 6b10 	vmov	d0, r6, r7
 800af42:	b011      	add	sp, #68	@ 0x44
 800af44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	f000 bd52 	b.w	800b9f0 <__ieee754_sqrt>
 800af4c:	2400      	movs	r4, #0
 800af4e:	ec47 6b10 	vmov	d0, r6, r7
 800af52:	9302      	str	r3, [sp, #8]
 800af54:	f000 fc88 	bl	800b868 <fabs>
 800af58:	9b02      	ldr	r3, [sp, #8]
 800af5a:	ec51 0b10 	vmov	r0, r1, d0
 800af5e:	bb53      	cbnz	r3, 800afb6 <__ieee754_pow+0x1d6>
 800af60:	4b44      	ldr	r3, [pc, #272]	@ (800b074 <__ieee754_pow+0x294>)
 800af62:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800af66:	429a      	cmp	r2, r3
 800af68:	d002      	beq.n	800af70 <__ieee754_pow+0x190>
 800af6a:	f1b8 0f00 	cmp.w	r8, #0
 800af6e:	d122      	bne.n	800afb6 <__ieee754_pow+0x1d6>
 800af70:	f1b9 0f00 	cmp.w	r9, #0
 800af74:	da05      	bge.n	800af82 <__ieee754_pow+0x1a2>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	2000      	movs	r0, #0
 800af7c:	493d      	ldr	r1, [pc, #244]	@ (800b074 <__ieee754_pow+0x294>)
 800af7e:	f7f5 fc6d 	bl	800085c <__aeabi_ddiv>
 800af82:	2d00      	cmp	r5, #0
 800af84:	f6bf af49 	bge.w	800ae1a <__ieee754_pow+0x3a>
 800af88:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800af8c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800af90:	ea58 0804 	orrs.w	r8, r8, r4
 800af94:	d108      	bne.n	800afa8 <__ieee754_pow+0x1c8>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	4610      	mov	r0, r2
 800af9c:	4619      	mov	r1, r3
 800af9e:	f7f5 f97b 	bl	8000298 <__aeabi_dsub>
 800afa2:	4602      	mov	r2, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	e794      	b.n	800aed2 <__ieee754_pow+0xf2>
 800afa8:	2c01      	cmp	r4, #1
 800afaa:	f47f af36 	bne.w	800ae1a <__ieee754_pow+0x3a>
 800afae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afb2:	4619      	mov	r1, r3
 800afb4:	e731      	b.n	800ae1a <__ieee754_pow+0x3a>
 800afb6:	0feb      	lsrs	r3, r5, #31
 800afb8:	3b01      	subs	r3, #1
 800afba:	ea53 0204 	orrs.w	r2, r3, r4
 800afbe:	d102      	bne.n	800afc6 <__ieee754_pow+0x1e6>
 800afc0:	4632      	mov	r2, r6
 800afc2:	463b      	mov	r3, r7
 800afc4:	e7e9      	b.n	800af9a <__ieee754_pow+0x1ba>
 800afc6:	3c01      	subs	r4, #1
 800afc8:	431c      	orrs	r4, r3
 800afca:	d016      	beq.n	800affa <__ieee754_pow+0x21a>
 800afcc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b058 <__ieee754_pow+0x278>
 800afd0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800afd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800afd8:	f240 8112 	bls.w	800b200 <__ieee754_pow+0x420>
 800afdc:	4b28      	ldr	r3, [pc, #160]	@ (800b080 <__ieee754_pow+0x2a0>)
 800afde:	459a      	cmp	sl, r3
 800afe0:	4b25      	ldr	r3, [pc, #148]	@ (800b078 <__ieee754_pow+0x298>)
 800afe2:	d916      	bls.n	800b012 <__ieee754_pow+0x232>
 800afe4:	4598      	cmp	r8, r3
 800afe6:	d80b      	bhi.n	800b000 <__ieee754_pow+0x220>
 800afe8:	f1b9 0f00 	cmp.w	r9, #0
 800afec:	da0b      	bge.n	800b006 <__ieee754_pow+0x226>
 800afee:	2000      	movs	r0, #0
 800aff0:	b011      	add	sp, #68	@ 0x44
 800aff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff6:	f000 bcf3 	b.w	800b9e0 <__math_oflow>
 800affa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b060 <__ieee754_pow+0x280>
 800affe:	e7e7      	b.n	800afd0 <__ieee754_pow+0x1f0>
 800b000:	f1b9 0f00 	cmp.w	r9, #0
 800b004:	dcf3      	bgt.n	800afee <__ieee754_pow+0x20e>
 800b006:	2000      	movs	r0, #0
 800b008:	b011      	add	sp, #68	@ 0x44
 800b00a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00e:	f000 bcdf 	b.w	800b9d0 <__math_uflow>
 800b012:	4598      	cmp	r8, r3
 800b014:	d20c      	bcs.n	800b030 <__ieee754_pow+0x250>
 800b016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b01a:	2200      	movs	r2, #0
 800b01c:	2300      	movs	r3, #0
 800b01e:	f7f5 fd65 	bl	8000aec <__aeabi_dcmplt>
 800b022:	3800      	subs	r0, #0
 800b024:	bf18      	it	ne
 800b026:	2001      	movne	r0, #1
 800b028:	f1b9 0f00 	cmp.w	r9, #0
 800b02c:	daec      	bge.n	800b008 <__ieee754_pow+0x228>
 800b02e:	e7df      	b.n	800aff0 <__ieee754_pow+0x210>
 800b030:	4b10      	ldr	r3, [pc, #64]	@ (800b074 <__ieee754_pow+0x294>)
 800b032:	4598      	cmp	r8, r3
 800b034:	f04f 0200 	mov.w	r2, #0
 800b038:	d924      	bls.n	800b084 <__ieee754_pow+0x2a4>
 800b03a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b03e:	2300      	movs	r3, #0
 800b040:	f7f5 fd54 	bl	8000aec <__aeabi_dcmplt>
 800b044:	3800      	subs	r0, #0
 800b046:	bf18      	it	ne
 800b048:	2001      	movne	r0, #1
 800b04a:	f1b9 0f00 	cmp.w	r9, #0
 800b04e:	dccf      	bgt.n	800aff0 <__ieee754_pow+0x210>
 800b050:	e7da      	b.n	800b008 <__ieee754_pow+0x228>
 800b052:	bf00      	nop
 800b054:	f3af 8000 	nop.w
 800b058:	00000000 	.word	0x00000000
 800b05c:	3ff00000 	.word	0x3ff00000
 800b060:	00000000 	.word	0x00000000
 800b064:	bff00000 	.word	0xbff00000
 800b068:	fff00000 	.word	0xfff00000
 800b06c:	7ff00000 	.word	0x7ff00000
 800b070:	433fffff 	.word	0x433fffff
 800b074:	3ff00000 	.word	0x3ff00000
 800b078:	3fefffff 	.word	0x3fefffff
 800b07c:	3fe00000 	.word	0x3fe00000
 800b080:	43f00000 	.word	0x43f00000
 800b084:	4b5a      	ldr	r3, [pc, #360]	@ (800b1f0 <__ieee754_pow+0x410>)
 800b086:	f7f5 f907 	bl	8000298 <__aeabi_dsub>
 800b08a:	a351      	add	r3, pc, #324	@ (adr r3, 800b1d0 <__ieee754_pow+0x3f0>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	f7f5 fab8 	bl	8000608 <__aeabi_dmul>
 800b098:	a34f      	add	r3, pc, #316	@ (adr r3, 800b1d8 <__ieee754_pow+0x3f8>)
 800b09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09e:	4606      	mov	r6, r0
 800b0a0:	460f      	mov	r7, r1
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	f7f5 faaf 	bl	8000608 <__aeabi_dmul>
 800b0aa:	4b52      	ldr	r3, [pc, #328]	@ (800b1f4 <__ieee754_pow+0x414>)
 800b0ac:	4682      	mov	sl, r0
 800b0ae:	468b      	mov	fp, r1
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	f7f5 faa7 	bl	8000608 <__aeabi_dmul>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	a148      	add	r1, pc, #288	@ (adr r1, 800b1e0 <__ieee754_pow+0x400>)
 800b0c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0c4:	f7f5 f8e8 	bl	8000298 <__aeabi_dsub>
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	f7f5 fa9c 	bl	8000608 <__aeabi_dmul>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	4948      	ldr	r1, [pc, #288]	@ (800b1f8 <__ieee754_pow+0x418>)
 800b0d8:	f7f5 f8de 	bl	8000298 <__aeabi_dsub>
 800b0dc:	4622      	mov	r2, r4
 800b0de:	4680      	mov	r8, r0
 800b0e0:	4689      	mov	r9, r1
 800b0e2:	462b      	mov	r3, r5
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	f7f5 fa8e 	bl	8000608 <__aeabi_dmul>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4640      	mov	r0, r8
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	f7f5 fa88 	bl	8000608 <__aeabi_dmul>
 800b0f8:	a33b      	add	r3, pc, #236	@ (adr r3, 800b1e8 <__ieee754_pow+0x408>)
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	f7f5 fa83 	bl	8000608 <__aeabi_dmul>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	4650      	mov	r0, sl
 800b108:	4659      	mov	r1, fp
 800b10a:	f7f5 f8c5 	bl	8000298 <__aeabi_dsub>
 800b10e:	4602      	mov	r2, r0
 800b110:	460b      	mov	r3, r1
 800b112:	4680      	mov	r8, r0
 800b114:	4689      	mov	r9, r1
 800b116:	4630      	mov	r0, r6
 800b118:	4639      	mov	r1, r7
 800b11a:	f7f5 f8bf 	bl	800029c <__adddf3>
 800b11e:	2400      	movs	r4, #0
 800b120:	4632      	mov	r2, r6
 800b122:	463b      	mov	r3, r7
 800b124:	4620      	mov	r0, r4
 800b126:	460d      	mov	r5, r1
 800b128:	f7f5 f8b6 	bl	8000298 <__aeabi_dsub>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4640      	mov	r0, r8
 800b132:	4649      	mov	r1, r9
 800b134:	f7f5 f8b0 	bl	8000298 <__aeabi_dsub>
 800b138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b13c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b140:	2300      	movs	r3, #0
 800b142:	9304      	str	r3, [sp, #16]
 800b144:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b148:	4606      	mov	r6, r0
 800b14a:	460f      	mov	r7, r1
 800b14c:	4652      	mov	r2, sl
 800b14e:	465b      	mov	r3, fp
 800b150:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b154:	f7f5 f8a0 	bl	8000298 <__aeabi_dsub>
 800b158:	4622      	mov	r2, r4
 800b15a:	462b      	mov	r3, r5
 800b15c:	f7f5 fa54 	bl	8000608 <__aeabi_dmul>
 800b160:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b164:	4680      	mov	r8, r0
 800b166:	4689      	mov	r9, r1
 800b168:	4630      	mov	r0, r6
 800b16a:	4639      	mov	r1, r7
 800b16c:	f7f5 fa4c 	bl	8000608 <__aeabi_dmul>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	4640      	mov	r0, r8
 800b176:	4649      	mov	r1, r9
 800b178:	f7f5 f890 	bl	800029c <__adddf3>
 800b17c:	4652      	mov	r2, sl
 800b17e:	465b      	mov	r3, fp
 800b180:	4606      	mov	r6, r0
 800b182:	460f      	mov	r7, r1
 800b184:	4620      	mov	r0, r4
 800b186:	4629      	mov	r1, r5
 800b188:	f7f5 fa3e 	bl	8000608 <__aeabi_dmul>
 800b18c:	460b      	mov	r3, r1
 800b18e:	4602      	mov	r2, r0
 800b190:	4680      	mov	r8, r0
 800b192:	4689      	mov	r9, r1
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 f880 	bl	800029c <__adddf3>
 800b19c:	4b17      	ldr	r3, [pc, #92]	@ (800b1fc <__ieee754_pow+0x41c>)
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	468a      	mov	sl, r1
 800b1a6:	468b      	mov	fp, r1
 800b1a8:	f340 82ef 	ble.w	800b78a <__ieee754_pow+0x9aa>
 800b1ac:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b1b0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b1b4:	4303      	orrs	r3, r0
 800b1b6:	f000 81e8 	beq.w	800b58a <__ieee754_pow+0x7aa>
 800b1ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	f7f5 fc93 	bl	8000aec <__aeabi_dcmplt>
 800b1c6:	3800      	subs	r0, #0
 800b1c8:	bf18      	it	ne
 800b1ca:	2001      	movne	r0, #1
 800b1cc:	e710      	b.n	800aff0 <__ieee754_pow+0x210>
 800b1ce:	bf00      	nop
 800b1d0:	60000000 	.word	0x60000000
 800b1d4:	3ff71547 	.word	0x3ff71547
 800b1d8:	f85ddf44 	.word	0xf85ddf44
 800b1dc:	3e54ae0b 	.word	0x3e54ae0b
 800b1e0:	55555555 	.word	0x55555555
 800b1e4:	3fd55555 	.word	0x3fd55555
 800b1e8:	652b82fe 	.word	0x652b82fe
 800b1ec:	3ff71547 	.word	0x3ff71547
 800b1f0:	3ff00000 	.word	0x3ff00000
 800b1f4:	3fd00000 	.word	0x3fd00000
 800b1f8:	3fe00000 	.word	0x3fe00000
 800b1fc:	408fffff 	.word	0x408fffff
 800b200:	4bd5      	ldr	r3, [pc, #852]	@ (800b558 <__ieee754_pow+0x778>)
 800b202:	402b      	ands	r3, r5
 800b204:	2200      	movs	r2, #0
 800b206:	b92b      	cbnz	r3, 800b214 <__ieee754_pow+0x434>
 800b208:	4bd4      	ldr	r3, [pc, #848]	@ (800b55c <__ieee754_pow+0x77c>)
 800b20a:	f7f5 f9fd 	bl	8000608 <__aeabi_dmul>
 800b20e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b212:	468b      	mov	fp, r1
 800b214:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b218:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b21c:	4413      	add	r3, r2
 800b21e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b220:	4bcf      	ldr	r3, [pc, #828]	@ (800b560 <__ieee754_pow+0x780>)
 800b222:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b226:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b22a:	459b      	cmp	fp, r3
 800b22c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b230:	dd08      	ble.n	800b244 <__ieee754_pow+0x464>
 800b232:	4bcc      	ldr	r3, [pc, #816]	@ (800b564 <__ieee754_pow+0x784>)
 800b234:	459b      	cmp	fp, r3
 800b236:	f340 81a5 	ble.w	800b584 <__ieee754_pow+0x7a4>
 800b23a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b23c:	3301      	adds	r3, #1
 800b23e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b240:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b244:	f04f 0a00 	mov.w	sl, #0
 800b248:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b24c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b24e:	4bc6      	ldr	r3, [pc, #792]	@ (800b568 <__ieee754_pow+0x788>)
 800b250:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b254:	ed93 7b00 	vldr	d7, [r3]
 800b258:	4629      	mov	r1, r5
 800b25a:	ec53 2b17 	vmov	r2, r3, d7
 800b25e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b262:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b266:	f7f5 f817 	bl	8000298 <__aeabi_dsub>
 800b26a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b26e:	4606      	mov	r6, r0
 800b270:	460f      	mov	r7, r1
 800b272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b276:	f7f5 f811 	bl	800029c <__adddf3>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	2000      	movs	r0, #0
 800b280:	49ba      	ldr	r1, [pc, #744]	@ (800b56c <__ieee754_pow+0x78c>)
 800b282:	f7f5 faeb 	bl	800085c <__aeabi_ddiv>
 800b286:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	4630      	mov	r0, r6
 800b290:	4639      	mov	r1, r7
 800b292:	f7f5 f9b9 	bl	8000608 <__aeabi_dmul>
 800b296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b29a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b29e:	106d      	asrs	r5, r5, #1
 800b2a0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b2a4:	f04f 0b00 	mov.w	fp, #0
 800b2a8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b2ac:	4661      	mov	r1, ip
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b2b4:	4658      	mov	r0, fp
 800b2b6:	46e1      	mov	r9, ip
 800b2b8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b2bc:	4614      	mov	r4, r2
 800b2be:	461d      	mov	r5, r3
 800b2c0:	f7f5 f9a2 	bl	8000608 <__aeabi_dmul>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	4639      	mov	r1, r7
 800b2cc:	f7f4 ffe4 	bl	8000298 <__aeabi_dsub>
 800b2d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	460f      	mov	r7, r1
 800b2d8:	4620      	mov	r0, r4
 800b2da:	4629      	mov	r1, r5
 800b2dc:	f7f4 ffdc 	bl	8000298 <__aeabi_dsub>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b2e8:	f7f4 ffd6 	bl	8000298 <__aeabi_dsub>
 800b2ec:	465a      	mov	r2, fp
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	f7f5 f98a 	bl	8000608 <__aeabi_dmul>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	f7f4 ffcc 	bl	8000298 <__aeabi_dsub>
 800b300:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b304:	f7f5 f980 	bl	8000608 <__aeabi_dmul>
 800b308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b30c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b310:	4610      	mov	r0, r2
 800b312:	4619      	mov	r1, r3
 800b314:	f7f5 f978 	bl	8000608 <__aeabi_dmul>
 800b318:	a37d      	add	r3, pc, #500	@ (adr r3, 800b510 <__ieee754_pow+0x730>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	4604      	mov	r4, r0
 800b320:	460d      	mov	r5, r1
 800b322:	f7f5 f971 	bl	8000608 <__aeabi_dmul>
 800b326:	a37c      	add	r3, pc, #496	@ (adr r3, 800b518 <__ieee754_pow+0x738>)
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	f7f4 ffb6 	bl	800029c <__adddf3>
 800b330:	4622      	mov	r2, r4
 800b332:	462b      	mov	r3, r5
 800b334:	f7f5 f968 	bl	8000608 <__aeabi_dmul>
 800b338:	a379      	add	r3, pc, #484	@ (adr r3, 800b520 <__ieee754_pow+0x740>)
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	f7f4 ffad 	bl	800029c <__adddf3>
 800b342:	4622      	mov	r2, r4
 800b344:	462b      	mov	r3, r5
 800b346:	f7f5 f95f 	bl	8000608 <__aeabi_dmul>
 800b34a:	a377      	add	r3, pc, #476	@ (adr r3, 800b528 <__ieee754_pow+0x748>)
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	f7f4 ffa4 	bl	800029c <__adddf3>
 800b354:	4622      	mov	r2, r4
 800b356:	462b      	mov	r3, r5
 800b358:	f7f5 f956 	bl	8000608 <__aeabi_dmul>
 800b35c:	a374      	add	r3, pc, #464	@ (adr r3, 800b530 <__ieee754_pow+0x750>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7f4 ff9b 	bl	800029c <__adddf3>
 800b366:	4622      	mov	r2, r4
 800b368:	462b      	mov	r3, r5
 800b36a:	f7f5 f94d 	bl	8000608 <__aeabi_dmul>
 800b36e:	a372      	add	r3, pc, #456	@ (adr r3, 800b538 <__ieee754_pow+0x758>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	f7f4 ff92 	bl	800029c <__adddf3>
 800b378:	4622      	mov	r2, r4
 800b37a:	4606      	mov	r6, r0
 800b37c:	460f      	mov	r7, r1
 800b37e:	462b      	mov	r3, r5
 800b380:	4620      	mov	r0, r4
 800b382:	4629      	mov	r1, r5
 800b384:	f7f5 f940 	bl	8000608 <__aeabi_dmul>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4630      	mov	r0, r6
 800b38e:	4639      	mov	r1, r7
 800b390:	f7f5 f93a 	bl	8000608 <__aeabi_dmul>
 800b394:	465a      	mov	r2, fp
 800b396:	4604      	mov	r4, r0
 800b398:	460d      	mov	r5, r1
 800b39a:	464b      	mov	r3, r9
 800b39c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3a0:	f7f4 ff7c 	bl	800029c <__adddf3>
 800b3a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3a8:	f7f5 f92e 	bl	8000608 <__aeabi_dmul>
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	462b      	mov	r3, r5
 800b3b0:	f7f4 ff74 	bl	800029c <__adddf3>
 800b3b4:	465a      	mov	r2, fp
 800b3b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3ba:	464b      	mov	r3, r9
 800b3bc:	4658      	mov	r0, fp
 800b3be:	4649      	mov	r1, r9
 800b3c0:	f7f5 f922 	bl	8000608 <__aeabi_dmul>
 800b3c4:	4b6a      	ldr	r3, [pc, #424]	@ (800b570 <__ieee754_pow+0x790>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	460f      	mov	r7, r1
 800b3cc:	f7f4 ff66 	bl	800029c <__adddf3>
 800b3d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3d4:	f7f4 ff62 	bl	800029c <__adddf3>
 800b3d8:	46d8      	mov	r8, fp
 800b3da:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b3de:	460d      	mov	r5, r1
 800b3e0:	465a      	mov	r2, fp
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	4649      	mov	r1, r9
 800b3e8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b3ec:	f7f5 f90c 	bl	8000608 <__aeabi_dmul>
 800b3f0:	465c      	mov	r4, fp
 800b3f2:	4680      	mov	r8, r0
 800b3f4:	4689      	mov	r9, r1
 800b3f6:	4b5e      	ldr	r3, [pc, #376]	@ (800b570 <__ieee754_pow+0x790>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	f7f4 ff4b 	bl	8000298 <__aeabi_dsub>
 800b402:	4632      	mov	r2, r6
 800b404:	463b      	mov	r3, r7
 800b406:	f7f4 ff47 	bl	8000298 <__aeabi_dsub>
 800b40a:	4602      	mov	r2, r0
 800b40c:	460b      	mov	r3, r1
 800b40e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b412:	f7f4 ff41 	bl	8000298 <__aeabi_dsub>
 800b416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b41a:	f7f5 f8f5 	bl	8000608 <__aeabi_dmul>
 800b41e:	4622      	mov	r2, r4
 800b420:	4606      	mov	r6, r0
 800b422:	460f      	mov	r7, r1
 800b424:	462b      	mov	r3, r5
 800b426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b42a:	f7f5 f8ed 	bl	8000608 <__aeabi_dmul>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	4630      	mov	r0, r6
 800b434:	4639      	mov	r1, r7
 800b436:	f7f4 ff31 	bl	800029c <__adddf3>
 800b43a:	4606      	mov	r6, r0
 800b43c:	460f      	mov	r7, r1
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4640      	mov	r0, r8
 800b444:	4649      	mov	r1, r9
 800b446:	f7f4 ff29 	bl	800029c <__adddf3>
 800b44a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b44e:	a33c      	add	r3, pc, #240	@ (adr r3, 800b540 <__ieee754_pow+0x760>)
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	4658      	mov	r0, fp
 800b456:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b45a:	460d      	mov	r5, r1
 800b45c:	f7f5 f8d4 	bl	8000608 <__aeabi_dmul>
 800b460:	465c      	mov	r4, fp
 800b462:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b466:	4642      	mov	r2, r8
 800b468:	464b      	mov	r3, r9
 800b46a:	4620      	mov	r0, r4
 800b46c:	4629      	mov	r1, r5
 800b46e:	f7f4 ff13 	bl	8000298 <__aeabi_dsub>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4630      	mov	r0, r6
 800b478:	4639      	mov	r1, r7
 800b47a:	f7f4 ff0d 	bl	8000298 <__aeabi_dsub>
 800b47e:	a332      	add	r3, pc, #200	@ (adr r3, 800b548 <__ieee754_pow+0x768>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	f7f5 f8c0 	bl	8000608 <__aeabi_dmul>
 800b488:	a331      	add	r3, pc, #196	@ (adr r3, 800b550 <__ieee754_pow+0x770>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	4606      	mov	r6, r0
 800b490:	460f      	mov	r7, r1
 800b492:	4620      	mov	r0, r4
 800b494:	4629      	mov	r1, r5
 800b496:	f7f5 f8b7 	bl	8000608 <__aeabi_dmul>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4630      	mov	r0, r6
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	f7f4 fefb 	bl	800029c <__adddf3>
 800b4a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b4a8:	4b32      	ldr	r3, [pc, #200]	@ (800b574 <__ieee754_pow+0x794>)
 800b4aa:	4413      	add	r3, r2
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f7f4 fef4 	bl	800029c <__adddf3>
 800b4b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b4b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b4ba:	f7f5 f83b 	bl	8000534 <__aeabi_i2d>
 800b4be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b4c0:	4b2d      	ldr	r3, [pc, #180]	@ (800b578 <__ieee754_pow+0x798>)
 800b4c2:	4413      	add	r3, r2
 800b4c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4ce:	460f      	mov	r7, r1
 800b4d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4d4:	f7f4 fee2 	bl	800029c <__adddf3>
 800b4d8:	4642      	mov	r2, r8
 800b4da:	464b      	mov	r3, r9
 800b4dc:	f7f4 fede 	bl	800029c <__adddf3>
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	f7f4 feda 	bl	800029c <__adddf3>
 800b4e8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	463b      	mov	r3, r7
 800b4f0:	4658      	mov	r0, fp
 800b4f2:	460d      	mov	r5, r1
 800b4f4:	f7f4 fed0 	bl	8000298 <__aeabi_dsub>
 800b4f8:	4642      	mov	r2, r8
 800b4fa:	464b      	mov	r3, r9
 800b4fc:	f7f4 fecc 	bl	8000298 <__aeabi_dsub>
 800b500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b504:	f7f4 fec8 	bl	8000298 <__aeabi_dsub>
 800b508:	465c      	mov	r4, fp
 800b50a:	4602      	mov	r2, r0
 800b50c:	e036      	b.n	800b57c <__ieee754_pow+0x79c>
 800b50e:	bf00      	nop
 800b510:	4a454eef 	.word	0x4a454eef
 800b514:	3fca7e28 	.word	0x3fca7e28
 800b518:	93c9db65 	.word	0x93c9db65
 800b51c:	3fcd864a 	.word	0x3fcd864a
 800b520:	a91d4101 	.word	0xa91d4101
 800b524:	3fd17460 	.word	0x3fd17460
 800b528:	518f264d 	.word	0x518f264d
 800b52c:	3fd55555 	.word	0x3fd55555
 800b530:	db6fabff 	.word	0xdb6fabff
 800b534:	3fdb6db6 	.word	0x3fdb6db6
 800b538:	33333303 	.word	0x33333303
 800b53c:	3fe33333 	.word	0x3fe33333
 800b540:	e0000000 	.word	0xe0000000
 800b544:	3feec709 	.word	0x3feec709
 800b548:	dc3a03fd 	.word	0xdc3a03fd
 800b54c:	3feec709 	.word	0x3feec709
 800b550:	145b01f5 	.word	0x145b01f5
 800b554:	be3e2fe0 	.word	0xbe3e2fe0
 800b558:	7ff00000 	.word	0x7ff00000
 800b55c:	43400000 	.word	0x43400000
 800b560:	0003988e 	.word	0x0003988e
 800b564:	000bb679 	.word	0x000bb679
 800b568:	0800c178 	.word	0x0800c178
 800b56c:	3ff00000 	.word	0x3ff00000
 800b570:	40080000 	.word	0x40080000
 800b574:	0800c158 	.word	0x0800c158
 800b578:	0800c168 	.word	0x0800c168
 800b57c:	460b      	mov	r3, r1
 800b57e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b582:	e5d7      	b.n	800b134 <__ieee754_pow+0x354>
 800b584:	f04f 0a01 	mov.w	sl, #1
 800b588:	e65e      	b.n	800b248 <__ieee754_pow+0x468>
 800b58a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b85c <__ieee754_pow+0xa7c>)
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	4630      	mov	r0, r6
 800b592:	4639      	mov	r1, r7
 800b594:	f7f4 fe82 	bl	800029c <__adddf3>
 800b598:	4642      	mov	r2, r8
 800b59a:	e9cd 0100 	strd	r0, r1, [sp]
 800b59e:	464b      	mov	r3, r9
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	f7f4 fe78 	bl	8000298 <__aeabi_dsub>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5b0:	f7f5 faba 	bl	8000b28 <__aeabi_dcmpgt>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f47f ae00 	bne.w	800b1ba <__ieee754_pow+0x3da>
 800b5ba:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b5be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b5c2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b5c6:	fa43 fa0a 	asr.w	sl, r3, sl
 800b5ca:	44da      	add	sl, fp
 800b5cc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b5d0:	489d      	ldr	r0, [pc, #628]	@ (800b848 <__ieee754_pow+0xa68>)
 800b5d2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b5d6:	4108      	asrs	r0, r1
 800b5d8:	ea00 030a 	and.w	r3, r0, sl
 800b5dc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b5e0:	f1c1 0114 	rsb	r1, r1, #20
 800b5e4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b5e8:	fa4a fa01 	asr.w	sl, sl, r1
 800b5ec:	f1bb 0f00 	cmp.w	fp, #0
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	f04f 0200 	mov.w	r2, #0
 800b5f8:	bfb8      	it	lt
 800b5fa:	f1ca 0a00 	rsblt	sl, sl, #0
 800b5fe:	f7f4 fe4b 	bl	8000298 <__aeabi_dsub>
 800b602:	4680      	mov	r8, r0
 800b604:	4689      	mov	r9, r1
 800b606:	4632      	mov	r2, r6
 800b608:	463b      	mov	r3, r7
 800b60a:	4640      	mov	r0, r8
 800b60c:	4649      	mov	r1, r9
 800b60e:	f7f4 fe45 	bl	800029c <__adddf3>
 800b612:	2400      	movs	r4, #0
 800b614:	a37c      	add	r3, pc, #496	@ (adr r3, 800b808 <__ieee754_pow+0xa28>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	4620      	mov	r0, r4
 800b61c:	460d      	mov	r5, r1
 800b61e:	f7f4 fff3 	bl	8000608 <__aeabi_dmul>
 800b622:	4642      	mov	r2, r8
 800b624:	e9cd 0100 	strd	r0, r1, [sp]
 800b628:	464b      	mov	r3, r9
 800b62a:	4620      	mov	r0, r4
 800b62c:	4629      	mov	r1, r5
 800b62e:	f7f4 fe33 	bl	8000298 <__aeabi_dsub>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4630      	mov	r0, r6
 800b638:	4639      	mov	r1, r7
 800b63a:	f7f4 fe2d 	bl	8000298 <__aeabi_dsub>
 800b63e:	a374      	add	r3, pc, #464	@ (adr r3, 800b810 <__ieee754_pow+0xa30>)
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	f7f4 ffe0 	bl	8000608 <__aeabi_dmul>
 800b648:	a373      	add	r3, pc, #460	@ (adr r3, 800b818 <__ieee754_pow+0xa38>)
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	4680      	mov	r8, r0
 800b650:	4689      	mov	r9, r1
 800b652:	4620      	mov	r0, r4
 800b654:	4629      	mov	r1, r5
 800b656:	f7f4 ffd7 	bl	8000608 <__aeabi_dmul>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4640      	mov	r0, r8
 800b660:	4649      	mov	r1, r9
 800b662:	f7f4 fe1b 	bl	800029c <__adddf3>
 800b666:	4604      	mov	r4, r0
 800b668:	460d      	mov	r5, r1
 800b66a:	4602      	mov	r2, r0
 800b66c:	460b      	mov	r3, r1
 800b66e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b672:	f7f4 fe13 	bl	800029c <__adddf3>
 800b676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b67a:	4680      	mov	r8, r0
 800b67c:	4689      	mov	r9, r1
 800b67e:	f7f4 fe0b 	bl	8000298 <__aeabi_dsub>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	4620      	mov	r0, r4
 800b688:	4629      	mov	r1, r5
 800b68a:	f7f4 fe05 	bl	8000298 <__aeabi_dsub>
 800b68e:	4642      	mov	r2, r8
 800b690:	4606      	mov	r6, r0
 800b692:	460f      	mov	r7, r1
 800b694:	464b      	mov	r3, r9
 800b696:	4640      	mov	r0, r8
 800b698:	4649      	mov	r1, r9
 800b69a:	f7f4 ffb5 	bl	8000608 <__aeabi_dmul>
 800b69e:	a360      	add	r3, pc, #384	@ (adr r3, 800b820 <__ieee754_pow+0xa40>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	460d      	mov	r5, r1
 800b6a8:	f7f4 ffae 	bl	8000608 <__aeabi_dmul>
 800b6ac:	a35e      	add	r3, pc, #376	@ (adr r3, 800b828 <__ieee754_pow+0xa48>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f7f4 fdf1 	bl	8000298 <__aeabi_dsub>
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	f7f4 ffa5 	bl	8000608 <__aeabi_dmul>
 800b6be:	a35c      	add	r3, pc, #368	@ (adr r3, 800b830 <__ieee754_pow+0xa50>)
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f7f4 fdea 	bl	800029c <__adddf3>
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	f7f4 ff9c 	bl	8000608 <__aeabi_dmul>
 800b6d0:	a359      	add	r3, pc, #356	@ (adr r3, 800b838 <__ieee754_pow+0xa58>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f7f4 fddf 	bl	8000298 <__aeabi_dsub>
 800b6da:	4622      	mov	r2, r4
 800b6dc:	462b      	mov	r3, r5
 800b6de:	f7f4 ff93 	bl	8000608 <__aeabi_dmul>
 800b6e2:	a357      	add	r3, pc, #348	@ (adr r3, 800b840 <__ieee754_pow+0xa60>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f7f4 fdd8 	bl	800029c <__adddf3>
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	462b      	mov	r3, r5
 800b6f0:	f7f4 ff8a 	bl	8000608 <__aeabi_dmul>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	f7f4 fdcc 	bl	8000298 <__aeabi_dsub>
 800b700:	4604      	mov	r4, r0
 800b702:	460d      	mov	r5, r1
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4640      	mov	r0, r8
 800b70a:	4649      	mov	r1, r9
 800b70c:	f7f4 ff7c 	bl	8000608 <__aeabi_dmul>
 800b710:	2200      	movs	r2, #0
 800b712:	e9cd 0100 	strd	r0, r1, [sp]
 800b716:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b71a:	4620      	mov	r0, r4
 800b71c:	4629      	mov	r1, r5
 800b71e:	f7f4 fdbb 	bl	8000298 <__aeabi_dsub>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b72a:	f7f5 f897 	bl	800085c <__aeabi_ddiv>
 800b72e:	4632      	mov	r2, r6
 800b730:	4604      	mov	r4, r0
 800b732:	460d      	mov	r5, r1
 800b734:	463b      	mov	r3, r7
 800b736:	4640      	mov	r0, r8
 800b738:	4649      	mov	r1, r9
 800b73a:	f7f4 ff65 	bl	8000608 <__aeabi_dmul>
 800b73e:	4632      	mov	r2, r6
 800b740:	463b      	mov	r3, r7
 800b742:	f7f4 fdab 	bl	800029c <__adddf3>
 800b746:	4602      	mov	r2, r0
 800b748:	460b      	mov	r3, r1
 800b74a:	4620      	mov	r0, r4
 800b74c:	4629      	mov	r1, r5
 800b74e:	f7f4 fda3 	bl	8000298 <__aeabi_dsub>
 800b752:	4642      	mov	r2, r8
 800b754:	464b      	mov	r3, r9
 800b756:	f7f4 fd9f 	bl	8000298 <__aeabi_dsub>
 800b75a:	460b      	mov	r3, r1
 800b75c:	4602      	mov	r2, r0
 800b75e:	493b      	ldr	r1, [pc, #236]	@ (800b84c <__ieee754_pow+0xa6c>)
 800b760:	2000      	movs	r0, #0
 800b762:	f7f4 fd99 	bl	8000298 <__aeabi_dsub>
 800b766:	ec41 0b10 	vmov	d0, r0, r1
 800b76a:	ee10 3a90 	vmov	r3, s1
 800b76e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b776:	da30      	bge.n	800b7da <__ieee754_pow+0x9fa>
 800b778:	4650      	mov	r0, sl
 800b77a:	f000 f87d 	bl	800b878 <scalbn>
 800b77e:	ec51 0b10 	vmov	r0, r1, d0
 800b782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b786:	f7ff bbd2 	b.w	800af2e <__ieee754_pow+0x14e>
 800b78a:	4c31      	ldr	r4, [pc, #196]	@ (800b850 <__ieee754_pow+0xa70>)
 800b78c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b790:	42a3      	cmp	r3, r4
 800b792:	d91a      	bls.n	800b7ca <__ieee754_pow+0x9ea>
 800b794:	4b2f      	ldr	r3, [pc, #188]	@ (800b854 <__ieee754_pow+0xa74>)
 800b796:	440b      	add	r3, r1
 800b798:	4303      	orrs	r3, r0
 800b79a:	d009      	beq.n	800b7b0 <__ieee754_pow+0x9d0>
 800b79c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f7f5 f9a2 	bl	8000aec <__aeabi_dcmplt>
 800b7a8:	3800      	subs	r0, #0
 800b7aa:	bf18      	it	ne
 800b7ac:	2001      	movne	r0, #1
 800b7ae:	e42b      	b.n	800b008 <__ieee754_pow+0x228>
 800b7b0:	4642      	mov	r2, r8
 800b7b2:	464b      	mov	r3, r9
 800b7b4:	f7f4 fd70 	bl	8000298 <__aeabi_dsub>
 800b7b8:	4632      	mov	r2, r6
 800b7ba:	463b      	mov	r3, r7
 800b7bc:	f7f5 f9aa 	bl	8000b14 <__aeabi_dcmpge>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d1eb      	bne.n	800b79c <__ieee754_pow+0x9bc>
 800b7c4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b864 <__ieee754_pow+0xa84>
 800b7c8:	e6f7      	b.n	800b5ba <__ieee754_pow+0x7da>
 800b7ca:	469a      	mov	sl, r3
 800b7cc:	4b22      	ldr	r3, [pc, #136]	@ (800b858 <__ieee754_pow+0xa78>)
 800b7ce:	459a      	cmp	sl, r3
 800b7d0:	f63f aef3 	bhi.w	800b5ba <__ieee754_pow+0x7da>
 800b7d4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b7d8:	e715      	b.n	800b606 <__ieee754_pow+0x826>
 800b7da:	ec51 0b10 	vmov	r0, r1, d0
 800b7de:	4619      	mov	r1, r3
 800b7e0:	e7cf      	b.n	800b782 <__ieee754_pow+0x9a2>
 800b7e2:	491a      	ldr	r1, [pc, #104]	@ (800b84c <__ieee754_pow+0xa6c>)
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	f7ff bb18 	b.w	800ae1a <__ieee754_pow+0x3a>
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	f7ff bb14 	b.w	800ae1a <__ieee754_pow+0x3a>
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	f7ff bb10 	b.w	800ae1a <__ieee754_pow+0x3a>
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	f7ff bb5e 	b.w	800aebc <__ieee754_pow+0xdc>
 800b800:	2400      	movs	r4, #0
 800b802:	f7ff bb49 	b.w	800ae98 <__ieee754_pow+0xb8>
 800b806:	bf00      	nop
 800b808:	00000000 	.word	0x00000000
 800b80c:	3fe62e43 	.word	0x3fe62e43
 800b810:	fefa39ef 	.word	0xfefa39ef
 800b814:	3fe62e42 	.word	0x3fe62e42
 800b818:	0ca86c39 	.word	0x0ca86c39
 800b81c:	be205c61 	.word	0xbe205c61
 800b820:	72bea4d0 	.word	0x72bea4d0
 800b824:	3e663769 	.word	0x3e663769
 800b828:	c5d26bf1 	.word	0xc5d26bf1
 800b82c:	3ebbbd41 	.word	0x3ebbbd41
 800b830:	af25de2c 	.word	0xaf25de2c
 800b834:	3f11566a 	.word	0x3f11566a
 800b838:	16bebd93 	.word	0x16bebd93
 800b83c:	3f66c16c 	.word	0x3f66c16c
 800b840:	5555553e 	.word	0x5555553e
 800b844:	3fc55555 	.word	0x3fc55555
 800b848:	fff00000 	.word	0xfff00000
 800b84c:	3ff00000 	.word	0x3ff00000
 800b850:	4090cbff 	.word	0x4090cbff
 800b854:	3f6f3400 	.word	0x3f6f3400
 800b858:	3fe00000 	.word	0x3fe00000
 800b85c:	652b82fe 	.word	0x652b82fe
 800b860:	3c971547 	.word	0x3c971547
 800b864:	4090cc00 	.word	0x4090cc00

0800b868 <fabs>:
 800b868:	ec51 0b10 	vmov	r0, r1, d0
 800b86c:	4602      	mov	r2, r0
 800b86e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b872:	ec43 2b10 	vmov	d0, r2, r3
 800b876:	4770      	bx	lr

0800b878 <scalbn>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	ec55 4b10 	vmov	r4, r5, d0
 800b87e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b882:	4606      	mov	r6, r0
 800b884:	462b      	mov	r3, r5
 800b886:	b991      	cbnz	r1, 800b8ae <scalbn+0x36>
 800b888:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b88c:	4323      	orrs	r3, r4
 800b88e:	d03d      	beq.n	800b90c <scalbn+0x94>
 800b890:	4b35      	ldr	r3, [pc, #212]	@ (800b968 <scalbn+0xf0>)
 800b892:	4620      	mov	r0, r4
 800b894:	4629      	mov	r1, r5
 800b896:	2200      	movs	r2, #0
 800b898:	f7f4 feb6 	bl	8000608 <__aeabi_dmul>
 800b89c:	4b33      	ldr	r3, [pc, #204]	@ (800b96c <scalbn+0xf4>)
 800b89e:	429e      	cmp	r6, r3
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	460d      	mov	r5, r1
 800b8a4:	da0f      	bge.n	800b8c6 <scalbn+0x4e>
 800b8a6:	a328      	add	r3, pc, #160	@ (adr r3, 800b948 <scalbn+0xd0>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	e01e      	b.n	800b8ec <scalbn+0x74>
 800b8ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b8b2:	4291      	cmp	r1, r2
 800b8b4:	d10b      	bne.n	800b8ce <scalbn+0x56>
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	f7f4 fcee 	bl	800029c <__adddf3>
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	460d      	mov	r5, r1
 800b8c4:	e022      	b.n	800b90c <scalbn+0x94>
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b8cc:	3936      	subs	r1, #54	@ 0x36
 800b8ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b8d2:	4296      	cmp	r6, r2
 800b8d4:	dd0d      	ble.n	800b8f2 <scalbn+0x7a>
 800b8d6:	2d00      	cmp	r5, #0
 800b8d8:	a11d      	add	r1, pc, #116	@ (adr r1, 800b950 <scalbn+0xd8>)
 800b8da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8de:	da02      	bge.n	800b8e6 <scalbn+0x6e>
 800b8e0:	a11d      	add	r1, pc, #116	@ (adr r1, 800b958 <scalbn+0xe0>)
 800b8e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e6:	a31a      	add	r3, pc, #104	@ (adr r3, 800b950 <scalbn+0xd8>)
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	f7f4 fe8c 	bl	8000608 <__aeabi_dmul>
 800b8f0:	e7e6      	b.n	800b8c0 <scalbn+0x48>
 800b8f2:	1872      	adds	r2, r6, r1
 800b8f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b8f8:	428a      	cmp	r2, r1
 800b8fa:	dcec      	bgt.n	800b8d6 <scalbn+0x5e>
 800b8fc:	2a00      	cmp	r2, #0
 800b8fe:	dd08      	ble.n	800b912 <scalbn+0x9a>
 800b900:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b904:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b908:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b90c:	ec45 4b10 	vmov	d0, r4, r5
 800b910:	bd70      	pop	{r4, r5, r6, pc}
 800b912:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b916:	da08      	bge.n	800b92a <scalbn+0xb2>
 800b918:	2d00      	cmp	r5, #0
 800b91a:	a10b      	add	r1, pc, #44	@ (adr r1, 800b948 <scalbn+0xd0>)
 800b91c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b920:	dac1      	bge.n	800b8a6 <scalbn+0x2e>
 800b922:	a10f      	add	r1, pc, #60	@ (adr r1, 800b960 <scalbn+0xe8>)
 800b924:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b928:	e7bd      	b.n	800b8a6 <scalbn+0x2e>
 800b92a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b92e:	3236      	adds	r2, #54	@ 0x36
 800b930:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b934:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b938:	4620      	mov	r0, r4
 800b93a:	4b0d      	ldr	r3, [pc, #52]	@ (800b970 <scalbn+0xf8>)
 800b93c:	4629      	mov	r1, r5
 800b93e:	2200      	movs	r2, #0
 800b940:	e7d4      	b.n	800b8ec <scalbn+0x74>
 800b942:	bf00      	nop
 800b944:	f3af 8000 	nop.w
 800b948:	c2f8f359 	.word	0xc2f8f359
 800b94c:	01a56e1f 	.word	0x01a56e1f
 800b950:	8800759c 	.word	0x8800759c
 800b954:	7e37e43c 	.word	0x7e37e43c
 800b958:	8800759c 	.word	0x8800759c
 800b95c:	fe37e43c 	.word	0xfe37e43c
 800b960:	c2f8f359 	.word	0xc2f8f359
 800b964:	81a56e1f 	.word	0x81a56e1f
 800b968:	43500000 	.word	0x43500000
 800b96c:	ffff3cb0 	.word	0xffff3cb0
 800b970:	3c900000 	.word	0x3c900000

0800b974 <with_errno>:
 800b974:	b510      	push	{r4, lr}
 800b976:	ed2d 8b02 	vpush	{d8}
 800b97a:	eeb0 8a40 	vmov.f32	s16, s0
 800b97e:	eef0 8a60 	vmov.f32	s17, s1
 800b982:	4604      	mov	r4, r0
 800b984:	f7fd f93a 	bl	8008bfc <__errno>
 800b988:	eeb0 0a48 	vmov.f32	s0, s16
 800b98c:	eef0 0a68 	vmov.f32	s1, s17
 800b990:	ecbd 8b02 	vpop	{d8}
 800b994:	6004      	str	r4, [r0, #0]
 800b996:	bd10      	pop	{r4, pc}

0800b998 <xflow>:
 800b998:	4603      	mov	r3, r0
 800b99a:	b507      	push	{r0, r1, r2, lr}
 800b99c:	ec51 0b10 	vmov	r0, r1, d0
 800b9a0:	b183      	cbz	r3, 800b9c4 <xflow+0x2c>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9a8:	e9cd 2300 	strd	r2, r3, [sp]
 800b9ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9b0:	f7f4 fe2a 	bl	8000608 <__aeabi_dmul>
 800b9b4:	ec41 0b10 	vmov	d0, r0, r1
 800b9b8:	2022      	movs	r0, #34	@ 0x22
 800b9ba:	b003      	add	sp, #12
 800b9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9c0:	f7ff bfd8 	b.w	800b974 <with_errno>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	e7ee      	b.n	800b9a8 <xflow+0x10>
 800b9ca:	0000      	movs	r0, r0
 800b9cc:	0000      	movs	r0, r0
	...

0800b9d0 <__math_uflow>:
 800b9d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b9d8 <__math_uflow+0x8>
 800b9d4:	f7ff bfe0 	b.w	800b998 <xflow>
 800b9d8:	00000000 	.word	0x00000000
 800b9dc:	10000000 	.word	0x10000000

0800b9e0 <__math_oflow>:
 800b9e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b9e8 <__math_oflow+0x8>
 800b9e4:	f7ff bfd8 	b.w	800b998 <xflow>
 800b9e8:	00000000 	.word	0x00000000
 800b9ec:	70000000 	.word	0x70000000

0800b9f0 <__ieee754_sqrt>:
 800b9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	4a68      	ldr	r2, [pc, #416]	@ (800bb98 <__ieee754_sqrt+0x1a8>)
 800b9f6:	ec55 4b10 	vmov	r4, r5, d0
 800b9fa:	43aa      	bics	r2, r5
 800b9fc:	462b      	mov	r3, r5
 800b9fe:	4621      	mov	r1, r4
 800ba00:	d110      	bne.n	800ba24 <__ieee754_sqrt+0x34>
 800ba02:	4622      	mov	r2, r4
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	f7f4 fdfe 	bl	8000608 <__aeabi_dmul>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	4620      	mov	r0, r4
 800ba12:	4629      	mov	r1, r5
 800ba14:	f7f4 fc42 	bl	800029c <__adddf3>
 800ba18:	4604      	mov	r4, r0
 800ba1a:	460d      	mov	r5, r1
 800ba1c:	ec45 4b10 	vmov	d0, r4, r5
 800ba20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba24:	2d00      	cmp	r5, #0
 800ba26:	dc0e      	bgt.n	800ba46 <__ieee754_sqrt+0x56>
 800ba28:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ba2c:	4322      	orrs	r2, r4
 800ba2e:	d0f5      	beq.n	800ba1c <__ieee754_sqrt+0x2c>
 800ba30:	b19d      	cbz	r5, 800ba5a <__ieee754_sqrt+0x6a>
 800ba32:	4622      	mov	r2, r4
 800ba34:	4620      	mov	r0, r4
 800ba36:	4629      	mov	r1, r5
 800ba38:	f7f4 fc2e 	bl	8000298 <__aeabi_dsub>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	460b      	mov	r3, r1
 800ba40:	f7f4 ff0c 	bl	800085c <__aeabi_ddiv>
 800ba44:	e7e8      	b.n	800ba18 <__ieee754_sqrt+0x28>
 800ba46:	152a      	asrs	r2, r5, #20
 800ba48:	d115      	bne.n	800ba76 <__ieee754_sqrt+0x86>
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	e009      	b.n	800ba62 <__ieee754_sqrt+0x72>
 800ba4e:	0acb      	lsrs	r3, r1, #11
 800ba50:	3a15      	subs	r2, #21
 800ba52:	0549      	lsls	r1, r1, #21
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d0fa      	beq.n	800ba4e <__ieee754_sqrt+0x5e>
 800ba58:	e7f7      	b.n	800ba4a <__ieee754_sqrt+0x5a>
 800ba5a:	462a      	mov	r2, r5
 800ba5c:	e7fa      	b.n	800ba54 <__ieee754_sqrt+0x64>
 800ba5e:	005b      	lsls	r3, r3, #1
 800ba60:	3001      	adds	r0, #1
 800ba62:	02dc      	lsls	r4, r3, #11
 800ba64:	d5fb      	bpl.n	800ba5e <__ieee754_sqrt+0x6e>
 800ba66:	1e44      	subs	r4, r0, #1
 800ba68:	1b12      	subs	r2, r2, r4
 800ba6a:	f1c0 0420 	rsb	r4, r0, #32
 800ba6e:	fa21 f404 	lsr.w	r4, r1, r4
 800ba72:	4323      	orrs	r3, r4
 800ba74:	4081      	lsls	r1, r0
 800ba76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba7a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ba7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba82:	07d2      	lsls	r2, r2, #31
 800ba84:	bf5c      	itt	pl
 800ba86:	005b      	lslpl	r3, r3, #1
 800ba88:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ba8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba90:	bf58      	it	pl
 800ba92:	0049      	lslpl	r1, r1, #1
 800ba94:	2600      	movs	r6, #0
 800ba96:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ba9a:	106d      	asrs	r5, r5, #1
 800ba9c:	0049      	lsls	r1, r1, #1
 800ba9e:	2016      	movs	r0, #22
 800baa0:	4632      	mov	r2, r6
 800baa2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800baa6:	1917      	adds	r7, r2, r4
 800baa8:	429f      	cmp	r7, r3
 800baaa:	bfde      	ittt	le
 800baac:	193a      	addle	r2, r7, r4
 800baae:	1bdb      	suble	r3, r3, r7
 800bab0:	1936      	addle	r6, r6, r4
 800bab2:	0fcf      	lsrs	r7, r1, #31
 800bab4:	3801      	subs	r0, #1
 800bab6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800baba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800babe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bac2:	d1f0      	bne.n	800baa6 <__ieee754_sqrt+0xb6>
 800bac4:	4604      	mov	r4, r0
 800bac6:	2720      	movs	r7, #32
 800bac8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bacc:	429a      	cmp	r2, r3
 800bace:	eb00 0e0c 	add.w	lr, r0, ip
 800bad2:	db02      	blt.n	800bada <__ieee754_sqrt+0xea>
 800bad4:	d113      	bne.n	800bafe <__ieee754_sqrt+0x10e>
 800bad6:	458e      	cmp	lr, r1
 800bad8:	d811      	bhi.n	800bafe <__ieee754_sqrt+0x10e>
 800bada:	f1be 0f00 	cmp.w	lr, #0
 800bade:	eb0e 000c 	add.w	r0, lr, ip
 800bae2:	da42      	bge.n	800bb6a <__ieee754_sqrt+0x17a>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	db40      	blt.n	800bb6a <__ieee754_sqrt+0x17a>
 800bae8:	f102 0801 	add.w	r8, r2, #1
 800baec:	1a9b      	subs	r3, r3, r2
 800baee:	458e      	cmp	lr, r1
 800baf0:	bf88      	it	hi
 800baf2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800baf6:	eba1 010e 	sub.w	r1, r1, lr
 800bafa:	4464      	add	r4, ip
 800bafc:	4642      	mov	r2, r8
 800bafe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bb02:	3f01      	subs	r7, #1
 800bb04:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bb08:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bb0c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bb10:	d1dc      	bne.n	800bacc <__ieee754_sqrt+0xdc>
 800bb12:	4319      	orrs	r1, r3
 800bb14:	d01b      	beq.n	800bb4e <__ieee754_sqrt+0x15e>
 800bb16:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bb9c <__ieee754_sqrt+0x1ac>
 800bb1a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bba0 <__ieee754_sqrt+0x1b0>
 800bb1e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bb22:	e9db 2300 	ldrd	r2, r3, [fp]
 800bb26:	f7f4 fbb7 	bl	8000298 <__aeabi_dsub>
 800bb2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	4640      	mov	r0, r8
 800bb34:	4649      	mov	r1, r9
 800bb36:	f7f4 ffe3 	bl	8000b00 <__aeabi_dcmple>
 800bb3a:	b140      	cbz	r0, 800bb4e <__ieee754_sqrt+0x15e>
 800bb3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bb40:	e9da 0100 	ldrd	r0, r1, [sl]
 800bb44:	e9db 2300 	ldrd	r2, r3, [fp]
 800bb48:	d111      	bne.n	800bb6e <__ieee754_sqrt+0x17e>
 800bb4a:	3601      	adds	r6, #1
 800bb4c:	463c      	mov	r4, r7
 800bb4e:	1072      	asrs	r2, r6, #1
 800bb50:	0863      	lsrs	r3, r4, #1
 800bb52:	07f1      	lsls	r1, r6, #31
 800bb54:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bb58:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bb5c:	bf48      	it	mi
 800bb5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bb62:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bb66:	4618      	mov	r0, r3
 800bb68:	e756      	b.n	800ba18 <__ieee754_sqrt+0x28>
 800bb6a:	4690      	mov	r8, r2
 800bb6c:	e7be      	b.n	800baec <__ieee754_sqrt+0xfc>
 800bb6e:	f7f4 fb95 	bl	800029c <__adddf3>
 800bb72:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4640      	mov	r0, r8
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	f7f4 ffb5 	bl	8000aec <__aeabi_dcmplt>
 800bb82:	b120      	cbz	r0, 800bb8e <__ieee754_sqrt+0x19e>
 800bb84:	1ca0      	adds	r0, r4, #2
 800bb86:	bf08      	it	eq
 800bb88:	3601      	addeq	r6, #1
 800bb8a:	3402      	adds	r4, #2
 800bb8c:	e7df      	b.n	800bb4e <__ieee754_sqrt+0x15e>
 800bb8e:	1c63      	adds	r3, r4, #1
 800bb90:	f023 0401 	bic.w	r4, r3, #1
 800bb94:	e7db      	b.n	800bb4e <__ieee754_sqrt+0x15e>
 800bb96:	bf00      	nop
 800bb98:	7ff00000 	.word	0x7ff00000
 800bb9c:	20000200 	.word	0x20000200
 800bba0:	200001f8 	.word	0x200001f8

0800bba4 <_init>:
 800bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba6:	bf00      	nop
 800bba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbaa:	bc08      	pop	{r3}
 800bbac:	469e      	mov	lr, r3
 800bbae:	4770      	bx	lr

0800bbb0 <_fini>:
 800bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb2:	bf00      	nop
 800bbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbb6:	bc08      	pop	{r3}
 800bbb8:	469e      	mov	lr, r3
 800bbba:	4770      	bx	lr
