
ESD_FP_GPS_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007974  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08007b18  08007b18  00008b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f18  08007f18  000091f0  2**0
                  CONTENTS
  4 .ARM          00000008  08007f18  08007f18  00008f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f20  08007f20  000091f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f20  08007f20  00008f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f24  08007f24  00008f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08007f28  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200001f0  08008118  000091f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000970  08008118  00009970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000916b  00000000  00000000  00009220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcd  00000000  00000000  0001238b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00013f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d8  00000000  00000000  00014708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a58  00000000  00000000  00014ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1ee  00000000  00000000  0002b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000880d0  00000000  00000000  00035926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd9f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032ac  00000000  00000000  000bda3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c0ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007afc 	.word	0x08007afc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08007afc 	.word	0x08007afc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f4c:	b08c      	sub	sp, #48	@ 0x30
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000f54:	4b5b      	ldr	r3, [pc, #364]	@ (80010c4 <decodeGGA+0x17c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000f5e:	e004      	b.n	8000f6a <decodeGGA+0x22>
 8000f60:	4b58      	ldr	r3, [pc, #352]	@ (80010c4 <decodeGGA+0x17c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a57      	ldr	r2, [pc, #348]	@ (80010c4 <decodeGGA+0x17c>)
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b56      	ldr	r3, [pc, #344]	@ (80010c4 <decodeGGA+0x17c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f78:	d1f2      	bne.n	8000f60 <decodeGGA+0x18>
	inx++;
 8000f7a:	4b52      	ldr	r3, [pc, #328]	@ (80010c4 <decodeGGA+0x17c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a50      	ldr	r2, [pc, #320]	@ (80010c4 <decodeGGA+0x17c>)
 8000f82:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000f84:	e004      	b.n	8000f90 <decodeGGA+0x48>
 8000f86:	4b4f      	ldr	r3, [pc, #316]	@ (80010c4 <decodeGGA+0x17c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80010c4 <decodeGGA+0x17c>)
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b4c      	ldr	r3, [pc, #304]	@ (80010c4 <decodeGGA+0x17c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f9e:	d1f2      	bne.n	8000f86 <decodeGGA+0x3e>
	inx++;
 8000fa0:	4b48      	ldr	r3, [pc, #288]	@ (80010c4 <decodeGGA+0x17c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a47      	ldr	r2, [pc, #284]	@ (80010c4 <decodeGGA+0x17c>)
 8000fa8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000faa:	e004      	b.n	8000fb6 <decodeGGA+0x6e>
 8000fac:	4b45      	ldr	r3, [pc, #276]	@ (80010c4 <decodeGGA+0x17c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a44      	ldr	r2, [pc, #272]	@ (80010c4 <decodeGGA+0x17c>)
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b43      	ldr	r3, [pc, #268]	@ (80010c4 <decodeGGA+0x17c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000fc4:	d1f2      	bne.n	8000fac <decodeGGA+0x64>
	inx++;
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80010c4 <decodeGGA+0x17c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a3d      	ldr	r2, [pc, #244]	@ (80010c4 <decodeGGA+0x17c>)
 8000fce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000fd0:	e004      	b.n	8000fdc <decodeGGA+0x94>
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80010c4 <decodeGGA+0x17c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a3a      	ldr	r2, [pc, #232]	@ (80010c4 <decodeGGA+0x17c>)
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b39      	ldr	r3, [pc, #228]	@ (80010c4 <decodeGGA+0x17c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b2c      	cmp	r3, #44	@ 0x2c
 8000fea:	d1f2      	bne.n	8000fd2 <decodeGGA+0x8a>
	inx++;
 8000fec:	4b35      	ldr	r3, [pc, #212]	@ (80010c4 <decodeGGA+0x17c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a34      	ldr	r2, [pc, #208]	@ (80010c4 <decodeGGA+0x17c>)
 8000ff4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000ff6:	e004      	b.n	8001002 <decodeGGA+0xba>
 8000ff8:	4b32      	ldr	r3, [pc, #200]	@ (80010c4 <decodeGGA+0x17c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a31      	ldr	r2, [pc, #196]	@ (80010c4 <decodeGGA+0x17c>)
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <decodeGGA+0x17c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001010:	d1f2      	bne.n	8000ff8 <decodeGGA+0xb0>
	inx++;
 8001012:	4b2c      	ldr	r3, [pc, #176]	@ (80010c4 <decodeGGA+0x17c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	4a2a      	ldr	r2, [pc, #168]	@ (80010c4 <decodeGGA+0x17c>)
 800101a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 800101c:	e004      	b.n	8001028 <decodeGGA+0xe0>
 800101e:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <decodeGGA+0x17c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a27      	ldr	r2, [pc, #156]	@ (80010c4 <decodeGGA+0x17c>)
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <decodeGGA+0x17c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b2c      	cmp	r3, #44	@ 0x2c
 8001036:	d1f2      	bne.n	800101e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001038:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <decodeGGA+0x17c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <decodeGGA+0x17c>)
 8001040:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <decodeGGA+0x17c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b31      	cmp	r3, #49	@ 0x31
 8001050:	d00f      	beq.n	8001072 <decodeGGA+0x12a>
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <decodeGGA+0x17c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b32      	cmp	r3, #50	@ 0x32
 8001060:	d007      	beq.n	8001072 <decodeGGA+0x12a>
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <decodeGGA+0x17c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b36      	cmp	r3, #54	@ 0x36
 8001070:	d106      	bne.n	8001080 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2201      	movs	r2, #1
 8001076:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <decodeGGA+0x17c>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800107e:	e009      	b.n	8001094 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001086:	2301      	movs	r3, #1
 8001088:	e2fd      	b.n	8001686 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <decodeGGA+0x17c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <decodeGGA+0x17c>)
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <decodeGGA+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b2c      	cmp	r3, #44	@ 0x2c
 80010a2:	d1f2      	bne.n	800108a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <decodeGGA+0x17c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <decodeGGA+0x17c>)
 80010ac:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	220c      	movs	r2, #12
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fcf7 	bl	8004aaa <memset>
	i=0;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80010c0:	e016      	b.n	80010f0 <decodeGGA+0x1a8>
 80010c2:	bf00      	nop
 80010c4:	2000020c 	.word	0x2000020c
	{
		buffer[i] = GGAbuffer[inx];
 80010c8:	4bab      	ldr	r3, [pc, #684]	@ (8001378 <decodeGGA+0x430>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	7819      	ldrb	r1, [r3, #0]
 80010d4:	f107 020c 	add.w	r2, r7, #12
 80010d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010da:	4413      	add	r3, r2
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
		i++;
 80010e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e2:	3301      	adds	r3, #1
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80010e6:	4ba4      	ldr	r3, [pc, #656]	@ (8001378 <decodeGGA+0x430>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4aa2      	ldr	r2, [pc, #648]	@ (8001378 <decodeGGA+0x430>)
 80010ee:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80010f0:	4ba1      	ldr	r3, [pc, #644]	@ (8001378 <decodeGGA+0x430>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b2c      	cmp	r3, #44	@ 0x2c
 80010fe:	d1e3      	bne.n	80010c8 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fecb 	bl	8003ea0 <atoi>
 800110a:	4603      	mov	r3, r0
 800110c:	4a9b      	ldr	r2, [pc, #620]	@ (800137c <decodeGGA+0x434>)
 800110e:	fb82 1203 	smull	r1, r2, r2, r3
 8001112:	1312      	asrs	r2, r2, #12
 8001114:	17db      	asrs	r3, r3, #31
 8001116:	1ad2      	subs	r2, r2, r3
 8001118:	4b99      	ldr	r3, [pc, #612]	@ (8001380 <decodeGGA+0x438>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4999      	ldr	r1, [pc, #612]	@ (8001384 <decodeGGA+0x43c>)
 800111e:	fb81 0103 	smull	r0, r1, r1, r3
 8001122:	1149      	asrs	r1, r1, #5
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	1acb      	subs	r3, r1, r3
 8001128:	4413      	add	r3, r2
 800112a:	4a97      	ldr	r2, [pc, #604]	@ (8001388 <decodeGGA+0x440>)
 800112c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4618      	mov	r0, r3
 8001134:	f002 feb4 	bl	8003ea0 <atoi>
 8001138:	4603      	mov	r3, r0
 800113a:	4a92      	ldr	r2, [pc, #584]	@ (8001384 <decodeGGA+0x43c>)
 800113c:	fb82 1203 	smull	r1, r2, r2, r3
 8001140:	1152      	asrs	r2, r2, #5
 8001142:	17db      	asrs	r3, r3, #31
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	4a8f      	ldr	r2, [pc, #572]	@ (8001384 <decodeGGA+0x43c>)
 8001148:	fb82 1203 	smull	r1, r2, r2, r3
 800114c:	1151      	asrs	r1, r2, #5
 800114e:	17da      	asrs	r2, r3, #31
 8001150:	1a8a      	subs	r2, r1, r2
 8001152:	2164      	movs	r1, #100	@ 0x64
 8001154:	fb01 f202 	mul.w	r2, r1, r2
 8001158:	1a9a      	subs	r2, r3, r2
 800115a:	4b89      	ldr	r3, [pc, #548]	@ (8001380 <decodeGGA+0x438>)
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	4b89      	ldr	r3, [pc, #548]	@ (8001384 <decodeGGA+0x43c>)
 8001160:	fb83 0301 	smull	r0, r3, r3, r1
 8001164:	1158      	asrs	r0, r3, #5
 8001166:	17cb      	asrs	r3, r1, #31
 8001168:	1ac3      	subs	r3, r0, r3
 800116a:	2064      	movs	r0, #100	@ 0x64
 800116c:	fb00 f303 	mul.w	r3, r0, r3
 8001170:	1acb      	subs	r3, r1, r3
 8001172:	4413      	add	r3, r2
 8001174:	4a85      	ldr	r2, [pc, #532]	@ (800138c <decodeGGA+0x444>)
 8001176:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001178:	4b84      	ldr	r3, [pc, #528]	@ (800138c <decodeGGA+0x444>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b3b      	cmp	r3, #59	@ 0x3b
 800117e:	dd09      	ble.n	8001194 <decodeGGA+0x24c>
	{
		min = min-60;
 8001180:	4b82      	ldr	r3, [pc, #520]	@ (800138c <decodeGGA+0x444>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3b3c      	subs	r3, #60	@ 0x3c
 8001186:	4a81      	ldr	r2, [pc, #516]	@ (800138c <decodeGGA+0x444>)
 8001188:	6013      	str	r3, [r2, #0]
		hr++;
 800118a:	4b7f      	ldr	r3, [pc, #508]	@ (8001388 <decodeGGA+0x440>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a7d      	ldr	r2, [pc, #500]	@ (8001388 <decodeGGA+0x440>)
 8001192:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001194:	4b7c      	ldr	r3, [pc, #496]	@ (8001388 <decodeGGA+0x440>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	da09      	bge.n	80011b0 <decodeGGA+0x268>
	{
		hr=24+hr;
 800119c:	4b7a      	ldr	r3, [pc, #488]	@ (8001388 <decodeGGA+0x440>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3318      	adds	r3, #24
 80011a2:	4a79      	ldr	r2, [pc, #484]	@ (8001388 <decodeGGA+0x440>)
 80011a4:	6013      	str	r3, [r2, #0]
		daychange--;
 80011a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001390 <decodeGGA+0x448>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	4a78      	ldr	r2, [pc, #480]	@ (8001390 <decodeGGA+0x448>)
 80011ae:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 80011b0:	4b75      	ldr	r3, [pc, #468]	@ (8001388 <decodeGGA+0x440>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b17      	cmp	r3, #23
 80011b6:	dd09      	ble.n	80011cc <decodeGGA+0x284>
	{
		hr=hr-24;
 80011b8:	4b73      	ldr	r3, [pc, #460]	@ (8001388 <decodeGGA+0x440>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3b18      	subs	r3, #24
 80011be:	4a72      	ldr	r2, [pc, #456]	@ (8001388 <decodeGGA+0x440>)
 80011c0:	6013      	str	r3, [r2, #0]
		daychange++;
 80011c2:	4b73      	ldr	r3, [pc, #460]	@ (8001390 <decodeGGA+0x448>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a71      	ldr	r2, [pc, #452]	@ (8001390 <decodeGGA+0x448>)
 80011ca:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80011cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001388 <decodeGGA+0x440>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80011d4:	4b6d      	ldr	r3, [pc, #436]	@ (800138c <decodeGGA+0x444>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fe5d 	bl	8003ea0 <atoi>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b66      	ldr	r3, [pc, #408]	@ (8001384 <decodeGGA+0x43c>)
 80011ea:	fb83 1302 	smull	r1, r3, r3, r2
 80011ee:	1159      	asrs	r1, r3, #5
 80011f0:	17d3      	asrs	r3, r2, #31
 80011f2:	1acb      	subs	r3, r1, r3
 80011f4:	2164      	movs	r1, #100	@ 0x64
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001200:	4b5d      	ldr	r3, [pc, #372]	@ (8001378 <decodeGGA+0x430>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a5c      	ldr	r2, [pc, #368]	@ (8001378 <decodeGGA+0x430>)
 8001208:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	220c      	movs	r2, #12
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fc49 	bl	8004aaa <memset>
	i=0;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800121c:	e013      	b.n	8001246 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 800121e:	4b56      	ldr	r3, [pc, #344]	@ (8001378 <decodeGGA+0x430>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	7819      	ldrb	r1, [r3, #0]
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001230:	4413      	add	r3, r2
 8001232:	460a      	mov	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
		i++;
 8001236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001238:	3301      	adds	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800123c:	4b4e      	ldr	r3, [pc, #312]	@ (8001378 <decodeGGA+0x430>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	4a4d      	ldr	r2, [pc, #308]	@ (8001378 <decodeGGA+0x430>)
 8001244:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001246:	4b4c      	ldr	r3, [pc, #304]	@ (8001378 <decodeGGA+0x430>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b2c      	cmp	r3, #44	@ 0x2c
 8001254:	d1e3      	bne.n	800121e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f810 	bl	8000280 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	2b05      	cmp	r3, #5
 8001264:	d801      	bhi.n	800126a <decodeGGA+0x322>
 8001266:	2302      	movs	r3, #2
 8001268:	e20d      	b.n	8001686 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fe16 	bl	8003ea0 <atoi>
 8001274:	4603      	mov	r3, r0
 8001276:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 800127c:	e002      	b.n	8001284 <decodeGGA+0x33c>
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	3301      	adds	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001284:	f107 020c 	add.w	r2, r7, #12
 8001288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001290:	d1f5      	bne.n	800127e <decodeGGA+0x336>
	j++;
 8001292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001294:	3301      	adds	r3, #1
 8001296:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f7fe ffef 	bl	8000280 <strlen>
 80012a2:	4602      	mov	r2, r0
 80012a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80012aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ac:	f107 020c 	add.w	r2, r7, #12
 80012b0:	4413      	add	r3, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fdf4 	bl	8003ea0 <atoi>
 80012b8:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80012ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f938 	bl	8000534 <__aeabi_i2d>
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <decodeGGA+0x44c>)
 80012ca:	f7ff fac7 	bl	800085c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4690      	mov	r8, r2
 80012d4:	4699      	mov	r9, r3
 80012d6:	69f8      	ldr	r0, [r7, #28]
 80012d8:	f7ff f92c 	bl	8000534 <__aeabi_i2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	3302      	adds	r3, #2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f925 	bl	8000534 <__aeabi_i2d>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	ec43 2b11 	vmov	d1, r2, r3
 80012f2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8001370 <decodeGGA+0x428>
 80012f6:	f005 fca3 	bl	8006c40 <pow>
 80012fa:	ec53 2b10 	vmov	r2, r3, d0
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7ff faab 	bl	800085c <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4640      	mov	r0, r8
 800130c:	4649      	mov	r1, r9
 800130e:	f7fe ffc5 	bl	800029c <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fc4d 	bl	8000bb8 <__aeabi_d2f>
 800131e:	4603      	mov	r3, r0
 8001320:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	601a      	str	r2, [r3, #0]
	inx++;  
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <decodeGGA+0x430>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <decodeGGA+0x430>)
 8001330:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <decodeGGA+0x430>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <decodeGGA+0x430>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <decodeGGA+0x430>)
 800134a:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800134c:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <decodeGGA+0x430>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a09      	ldr	r2, [pc, #36]	@ (8001378 <decodeGGA+0x430>)
 8001354:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	220c      	movs	r2, #12
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fba3 	bl	8004aaa <memset>
	i=0;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001368:	e02a      	b.n	80013c0 <decodeGGA+0x478>
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	00000000 	.word	0x00000000
 8001374:	40240000 	.word	0x40240000
 8001378:	2000020c 	.word	0x2000020c
 800137c:	68db8bad 	.word	0x68db8bad
 8001380:	20000000 	.word	0x20000000
 8001384:	51eb851f 	.word	0x51eb851f
 8001388:	20000210 	.word	0x20000210
 800138c:	20000214 	.word	0x20000214
 8001390:	20000224 	.word	0x20000224
 8001394:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001398:	4b8b      	ldr	r3, [pc, #556]	@ (80015c8 <decodeGGA+0x680>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	7819      	ldrb	r1, [r3, #0]
 80013a4:	f107 020c 	add.w	r2, r7, #12
 80013a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013aa:	4413      	add	r3, r2
 80013ac:	460a      	mov	r2, r1
 80013ae:	701a      	strb	r2, [r3, #0]
		i++;
 80013b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b2:	3301      	adds	r3, #1
 80013b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80013b6:	4b84      	ldr	r3, [pc, #528]	@ (80015c8 <decodeGGA+0x680>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a82      	ldr	r2, [pc, #520]	@ (80015c8 <decodeGGA+0x680>)
 80013be:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80013c0:	4b81      	ldr	r3, [pc, #516]	@ (80015c8 <decodeGGA+0x680>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b2c      	cmp	r3, #44	@ 0x2c
 80013ce:	d1e3      	bne.n	8001398 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 fd63 	bl	8003ea0 <atoi>
 80013da:	4603      	mov	r3, r0
 80013dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80013e2:	e002      	b.n	80013ea <decodeGGA+0x4a2>
 80013e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e6:	3301      	adds	r3, #1
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ea:	f107 020c 	add.w	r2, r7, #12
 80013ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80013f6:	d1f5      	bne.n	80013e4 <decodeGGA+0x49c>
	j++;
 80013f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fa:	3301      	adds	r3, #1
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe ff3c 	bl	8000280 <strlen>
 8001408:	4602      	mov	r2, r0
 800140a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001412:	f107 020c 	add.w	r2, r7, #12
 8001416:	4413      	add	r3, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fd41 	bl	8003ea0 <atoi>
 800141e:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001420:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f885 	bl	8000534 <__aeabi_i2d>
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b67      	ldr	r3, [pc, #412]	@ (80015cc <decodeGGA+0x684>)
 8001430:	f7ff fa14 	bl	800085c <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4690      	mov	r8, r2
 800143a:	4699      	mov	r9, r3
 800143c:	69f8      	ldr	r0, [r7, #28]
 800143e:	f7ff f879 	bl	8000534 <__aeabi_i2d>
 8001442:	4604      	mov	r4, r0
 8001444:	460d      	mov	r5, r1
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	3302      	adds	r3, #2
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f872 	bl	8000534 <__aeabi_i2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	ec43 2b11 	vmov	d1, r2, r3
 8001458:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 80015c0 <decodeGGA+0x678>
 800145c:	f005 fbf0 	bl	8006c40 <pow>
 8001460:	ec53 2b10 	vmov	r2, r3, d0
 8001464:	4620      	mov	r0, r4
 8001466:	4629      	mov	r1, r5
 8001468:	f7ff f9f8 	bl	800085c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4640      	mov	r0, r8
 8001472:	4649      	mov	r1, r9
 8001474:	f7fe ff12 	bl	800029c <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fb9a 	bl	8000bb8 <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
 8001486:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]
	inx++;
 800148e:	4b4e      	ldr	r3, [pc, #312]	@ (80015c8 <decodeGGA+0x680>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	4a4c      	ldr	r2, [pc, #304]	@ (80015c8 <decodeGGA+0x680>)
 8001496:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001498:	4b4b      	ldr	r3, [pc, #300]	@ (80015c8 <decodeGGA+0x680>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80014a8:	4b47      	ldr	r3, [pc, #284]	@ (80015c8 <decodeGGA+0x680>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a46      	ldr	r2, [pc, #280]	@ (80015c8 <decodeGGA+0x680>)
 80014b0:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80014b2:	4b45      	ldr	r3, [pc, #276]	@ (80015c8 <decodeGGA+0x680>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a43      	ldr	r2, [pc, #268]	@ (80015c8 <decodeGGA+0x680>)
 80014ba:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80014bc:	4b42      	ldr	r3, [pc, #264]	@ (80015c8 <decodeGGA+0x680>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a41      	ldr	r2, [pc, #260]	@ (80015c8 <decodeGGA+0x680>)
 80014c4:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80014c6:	4b40      	ldr	r3, [pc, #256]	@ (80015c8 <decodeGGA+0x680>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a3e      	ldr	r2, [pc, #248]	@ (80015c8 <decodeGGA+0x680>)
 80014ce:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	220c      	movs	r2, #12
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 fae6 	bl	8004aaa <memset>
	i=0;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80014e2:	e013      	b.n	800150c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 80014e4:	4b38      	ldr	r3, [pc, #224]	@ (80015c8 <decodeGGA+0x680>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	7819      	ldrb	r1, [r3, #0]
 80014f0:	f107 020c 	add.w	r2, r7, #12
 80014f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f6:	4413      	add	r3, r2
 80014f8:	460a      	mov	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
		i++;
 80014fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fe:	3301      	adds	r3, #1
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001502:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <decodeGGA+0x680>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a2f      	ldr	r2, [pc, #188]	@ (80015c8 <decodeGGA+0x680>)
 800150a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800150c:	4b2e      	ldr	r3, [pc, #184]	@ (80015c8 <decodeGGA+0x680>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b2c      	cmp	r3, #44	@ 0x2c
 800151a:	d1e3      	bne.n	80014e4 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fcbd 	bl	8003ea0 <atoi>
 8001526:	4602      	mov	r2, r0
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28


	/***************** skip HDOP  *********************/
	inx++;
 800152c:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <decodeGGA+0x680>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a25      	ldr	r2, [pc, #148]	@ (80015c8 <decodeGGA+0x680>)
 8001534:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001536:	e004      	b.n	8001542 <decodeGGA+0x5fa>
 8001538:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <decodeGGA+0x680>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a22      	ldr	r2, [pc, #136]	@ (80015c8 <decodeGGA+0x680>)
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <decodeGGA+0x680>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001550:	d1f2      	bne.n	8001538 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <decodeGGA+0x680>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <decodeGGA+0x680>)
 800155a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	220c      	movs	r2, #12
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f003 faa0 	bl	8004aaa <memset>
	i=0;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 800156e:	e013      	b.n	8001598 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <decodeGGA+0x680>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	7819      	ldrb	r1, [r3, #0]
 800157c:	f107 020c 	add.w	r2, r7, #12
 8001580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001582:	4413      	add	r3, r2
 8001584:	460a      	mov	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
		i++;
 8001588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158a:	3301      	adds	r3, #1
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <decodeGGA+0x680>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	4a0c      	ldr	r2, [pc, #48]	@ (80015c8 <decodeGGA+0x680>)
 8001596:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <decodeGGA+0x680>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b2c      	cmp	r3, #44	@ 0x2c
 80015a6:	d1e3      	bne.n	8001570 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fc77 	bl	8003ea0 <atoi>
 80015b2:	4603      	mov	r3, r0
 80015b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 80015ba:	e00c      	b.n	80015d6 <decodeGGA+0x68e>
 80015bc:	f3af 8000 	nop.w
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40240000 	.word	0x40240000
 80015c8:	2000020c 	.word	0x2000020c
 80015cc:	40590000 	.word	0x40590000
 80015d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d2:	3301      	adds	r3, #1
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015d6:	f107 020c 	add.w	r2, r7, #12
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80015e2:	d1f5      	bne.n	80015d0 <decodeGGA+0x688>
	j++;
 80015e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e6:	3301      	adds	r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fe46 	bl	8000280 <strlen>
 80015f4:	4602      	mov	r2, r0
 80015f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80015fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fe:	f107 020c 	add.w	r2, r7, #12
 8001602:	4413      	add	r3, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f002 fc4b 	bl	8003ea0 <atoi>
 800160a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 800160c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff8f 	bl	8000534 <__aeabi_i2d>
 8001616:	4604      	mov	r4, r0
 8001618:	460d      	mov	r5, r1
 800161a:	69f8      	ldr	r0, [r7, #28]
 800161c:	f7fe ff8a 	bl	8000534 <__aeabi_i2d>
 8001620:	4680      	mov	r8, r0
 8001622:	4689      	mov	r9, r1
 8001624:	6a38      	ldr	r0, [r7, #32]
 8001626:	f7fe ff85 	bl	8000534 <__aeabi_i2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	ec43 2b11 	vmov	d1, r2, r3
 8001632:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8001690 <decodeGGA+0x748>
 8001636:	f005 fb03 	bl	8006c40 <pow>
 800163a:	ec53 2b10 	vmov	r2, r3, d0
 800163e:	4640      	mov	r0, r8
 8001640:	4649      	mov	r1, r9
 8001642:	f7ff f90b 	bl	800085c <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4620      	mov	r0, r4
 800164c:	4629      	mov	r1, r5
 800164e:	f7fe fe25 	bl	800029c <__adddf3>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff faad 	bl	8000bb8 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	621a      	str	r2, [r3, #32]

	inx++;
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <decodeGGA+0x750>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <decodeGGA+0x750>)
 8001670:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <decodeGGA+0x750>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 8001684:	2300      	movs	r3, #0

}
 8001686:	4618      	mov	r0, r3
 8001688:	3730      	adds	r7, #48	@ 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001690:	00000000 	.word	0x00000000
 8001694:	40240000 	.word	0x40240000
 8001698:	2000020c 	.word	0x2000020c
 800169c:	00000000 	.word	0x00000000

080016a0 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 80016a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016a4:	b090      	sub	sp, #64	@ 0x40
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
	inx = 0;
 80016ac:	4b94      	ldr	r3, [pc, #592]	@ (8001900 <decodeRMC+0x260>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 80016b6:	e004      	b.n	80016c2 <decodeRMC+0x22>
 80016b8:	4b91      	ldr	r3, [pc, #580]	@ (8001900 <decodeRMC+0x260>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	4a90      	ldr	r2, [pc, #576]	@ (8001900 <decodeRMC+0x260>)
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b8f      	ldr	r3, [pc, #572]	@ (8001900 <decodeRMC+0x260>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4413      	add	r3, r2
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b2c      	cmp	r3, #44	@ 0x2c
 80016d0:	d1f2      	bne.n	80016b8 <decodeRMC+0x18>
	inx++;
 80016d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001900 <decodeRMC+0x260>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	4a89      	ldr	r2, [pc, #548]	@ (8001900 <decodeRMC+0x260>)
 80016da:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 80016dc:	e004      	b.n	80016e8 <decodeRMC+0x48>
 80016de:	4b88      	ldr	r3, [pc, #544]	@ (8001900 <decodeRMC+0x260>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a86      	ldr	r2, [pc, #536]	@ (8001900 <decodeRMC+0x260>)
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b85      	ldr	r3, [pc, #532]	@ (8001900 <decodeRMC+0x260>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b2c      	cmp	r3, #44	@ 0x2c
 80016f6:	d1f2      	bne.n	80016de <decodeRMC+0x3e>
	inx++;
 80016f8:	4b81      	ldr	r3, [pc, #516]	@ (8001900 <decodeRMC+0x260>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a80      	ldr	r2, [pc, #512]	@ (8001900 <decodeRMC+0x260>)
 8001700:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001702:	4b7f      	ldr	r3, [pc, #508]	@ (8001900 <decodeRMC+0x260>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b41      	cmp	r3, #65	@ 0x41
 8001710:	d10d      	bne.n	800172e <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001718:	4b79      	ldr	r3, [pc, #484]	@ (8001900 <decodeRMC+0x260>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a78      	ldr	r2, [pc, #480]	@ (8001900 <decodeRMC+0x260>)
 8001720:	6013      	str	r3, [r2, #0]
	inx++;
 8001722:	4b77      	ldr	r3, [pc, #476]	@ (8001900 <decodeRMC+0x260>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a75      	ldr	r2, [pc, #468]	@ (8001900 <decodeRMC+0x260>)
 800172a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 800172c:	e009      	b.n	8001742 <decodeRMC+0xa2>
		rmc->isValid =0;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
		return 1;
 8001734:	2301      	movs	r3, #1
 8001736:	e1d8      	b.n	8001aea <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001738:	4b71      	ldr	r3, [pc, #452]	@ (8001900 <decodeRMC+0x260>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	4a70      	ldr	r2, [pc, #448]	@ (8001900 <decodeRMC+0x260>)
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b6f      	ldr	r3, [pc, #444]	@ (8001900 <decodeRMC+0x260>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001750:	d1f2      	bne.n	8001738 <decodeRMC+0x98>
	inx++;
 8001752:	4b6b      	ldr	r3, [pc, #428]	@ (8001900 <decodeRMC+0x260>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	4a69      	ldr	r2, [pc, #420]	@ (8001900 <decodeRMC+0x260>)
 800175a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 800175c:	e004      	b.n	8001768 <decodeRMC+0xc8>
 800175e:	4b68      	ldr	r3, [pc, #416]	@ (8001900 <decodeRMC+0x260>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a66      	ldr	r2, [pc, #408]	@ (8001900 <decodeRMC+0x260>)
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b65      	ldr	r3, [pc, #404]	@ (8001900 <decodeRMC+0x260>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b2c      	cmp	r3, #44	@ 0x2c
 8001776:	d1f2      	bne.n	800175e <decodeRMC+0xbe>
	inx++;
 8001778:	4b61      	ldr	r3, [pc, #388]	@ (8001900 <decodeRMC+0x260>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a60      	ldr	r2, [pc, #384]	@ (8001900 <decodeRMC+0x260>)
 8001780:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001782:	e004      	b.n	800178e <decodeRMC+0xee>
 8001784:	4b5e      	ldr	r3, [pc, #376]	@ (8001900 <decodeRMC+0x260>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a5d      	ldr	r2, [pc, #372]	@ (8001900 <decodeRMC+0x260>)
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b5c      	ldr	r3, [pc, #368]	@ (8001900 <decodeRMC+0x260>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b2c      	cmp	r3, #44	@ 0x2c
 800179c:	d1f2      	bne.n	8001784 <decodeRMC+0xe4>
	inx++;
 800179e:	4b58      	ldr	r3, [pc, #352]	@ (8001900 <decodeRMC+0x260>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	4a56      	ldr	r2, [pc, #344]	@ (8001900 <decodeRMC+0x260>)
 80017a6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 80017a8:	e004      	b.n	80017b4 <decodeRMC+0x114>
 80017aa:	4b55      	ldr	r3, [pc, #340]	@ (8001900 <decodeRMC+0x260>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	4a53      	ldr	r2, [pc, #332]	@ (8001900 <decodeRMC+0x260>)
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b52      	ldr	r3, [pc, #328]	@ (8001900 <decodeRMC+0x260>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b2c      	cmp	r3, #44	@ 0x2c
 80017c2:	d1f2      	bne.n	80017aa <decodeRMC+0x10a>

	// Get Speed
	inx++;
 80017c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001900 <decodeRMC+0x260>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001900 <decodeRMC+0x260>)
 80017cc:	6013      	str	r3, [r2, #0]
	i=0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	220c      	movs	r2, #12
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 f965 	bl	8004aaa <memset>
	while (RMCbuffer[inx] != ',')
 80017e0:	e013      	b.n	800180a <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <decodeRMC+0x260>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	7819      	ldrb	r1, [r3, #0]
 80017ee:	f107 0208 	add.w	r2, r7, #8
 80017f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017f4:	4413      	add	r3, r2
 80017f6:	460a      	mov	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
		i++;
 80017fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017fc:	3301      	adds	r3, #1
 80017fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001800:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <decodeRMC+0x260>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a3e      	ldr	r2, [pc, #248]	@ (8001900 <decodeRMC+0x260>)
 8001808:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800180a:	4b3d      	ldr	r3, [pc, #244]	@ (8001900 <decodeRMC+0x260>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b2c      	cmp	r3, #44	@ 0x2c
 8001818:	d1e3      	bne.n	80017e2 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d056      	beq.n	80018d2 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	4618      	mov	r0, r3
 800182a:	f002 fb39 	bl	8003ea0 <atoi>
 800182e:	4603      	mov	r3, r0
 8001830:	867b      	strh	r3, [r7, #50]	@ 0x32
		int j = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	63bb      	str	r3, [r7, #56]	@ 0x38
		while (buffer[j] != '.') j++;   // same as above
 8001836:	e002      	b.n	800183e <decodeRMC+0x19e>
 8001838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800183a:	3301      	adds	r3, #1
 800183c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800183e:	f107 0208 	add.w	r2, r7, #8
 8001842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001844:	4413      	add	r3, r2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b2e      	cmp	r3, #46	@ 0x2e
 800184a:	d1f5      	bne.n	8001838 <decodeRMC+0x198>
		j++;
 800184c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800184e:	3301      	adds	r3, #1
 8001850:	63bb      	str	r3, [r7, #56]	@ 0x38
		int declen = (strlen(buffer))-j;
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fd12 	bl	8000280 <strlen>
 800185c:	4602      	mov	r2, r0
 800185e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int dec = atoi ((char *) buffer+j);
 8001864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001866:	f107 0208 	add.w	r2, r7, #8
 800186a:	4413      	add	r3, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fb17 	bl	8003ea0 <atoi>
 8001872:	62b8      	str	r0, [r7, #40]	@ 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001874:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe5b 	bl	8000534 <__aeabi_i2d>
 800187e:	4604      	mov	r4, r0
 8001880:	460d      	mov	r5, r1
 8001882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001884:	f7fe fe56 	bl	8000534 <__aeabi_i2d>
 8001888:	4680      	mov	r8, r0
 800188a:	4689      	mov	r9, r1
 800188c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800188e:	f7fe fe51 	bl	8000534 <__aeabi_i2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	ec43 2b11 	vmov	d1, r2, r3
 800189a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80018f8 <decodeRMC+0x258>
 800189e:	f005 f9cf 	bl	8006c40 <pow>
 80018a2:	ec53 2b10 	vmov	r2, r3, d0
 80018a6:	4640      	mov	r0, r8
 80018a8:	4649      	mov	r1, r9
 80018aa:	f7fe ffd7 	bl	800085c <__aeabi_ddiv>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	f7fe fcf1 	bl	800029c <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f979 	bl	8000bb8 <__aeabi_d2f>
 80018c6:	4603      	mov	r3, r0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
		rmc->speed = lat;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	e003      	b.n	80018da <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <decodeRMC+0x260>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <decodeRMC+0x260>)
 80018e2:	6013      	str	r3, [r2, #0]
	i=0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	220c      	movs	r2, #12
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 f8da 	bl	8004aaa <memset>
	while (RMCbuffer[inx] != ',')
 80018f6:	e019      	b.n	800192c <decodeRMC+0x28c>
 80018f8:	00000000 	.word	0x00000000
 80018fc:	40240000 	.word	0x40240000
 8001900:	2000020c 	.word	0x2000020c
	{
		buffer[i] = RMCbuffer[inx];
 8001904:	4b7e      	ldr	r3, [pc, #504]	@ (8001b00 <decodeRMC+0x460>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	7819      	ldrb	r1, [r3, #0]
 8001910:	f107 0208 	add.w	r2, r7, #8
 8001914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001916:	4413      	add	r3, r2
 8001918:	460a      	mov	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
		i++;
 800191c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800191e:	3301      	adds	r3, #1
 8001920:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001922:	4b77      	ldr	r3, [pc, #476]	@ (8001b00 <decodeRMC+0x460>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	4a75      	ldr	r2, [pc, #468]	@ (8001b00 <decodeRMC+0x460>)
 800192a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800192c:	4b74      	ldr	r3, [pc, #464]	@ (8001b00 <decodeRMC+0x460>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b2c      	cmp	r3, #44	@ 0x2c
 800193a:	d1e3      	bne.n	8001904 <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d056      	beq.n	80019f4 <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	4618      	mov	r0, r3
 800194c:	f002 faa8 	bl	8003ea0 <atoi>
 8001950:	4603      	mov	r3, r0
 8001952:	847b      	strh	r3, [r7, #34]	@ 0x22
		int j = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	@ 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001958:	e002      	b.n	8001960 <decodeRMC+0x2c0>
 800195a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800195c:	3301      	adds	r3, #1
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001960:	f107 0208 	add.w	r2, r7, #8
 8001964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001966:	4413      	add	r3, r2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b2e      	cmp	r3, #46	@ 0x2e
 800196c:	d1f5      	bne.n	800195a <decodeRMC+0x2ba>
		j++;
 800196e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001970:	3301      	adds	r3, #1
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34
		int declen = (strlen(buffer))-j;
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fc81 	bl	8000280 <strlen>
 800197e:	4602      	mov	r2, r0
 8001980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001988:	f107 0208 	add.w	r2, r7, #8
 800198c:	4413      	add	r3, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f002 fa86 	bl	8003ea0 <atoi>
 8001994:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001996:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdca 	bl	8000534 <__aeabi_i2d>
 80019a0:	4604      	mov	r4, r0
 80019a2:	460d      	mov	r5, r1
 80019a4:	69b8      	ldr	r0, [r7, #24]
 80019a6:	f7fe fdc5 	bl	8000534 <__aeabi_i2d>
 80019aa:	4680      	mov	r8, r0
 80019ac:	4689      	mov	r9, r1
 80019ae:	69f8      	ldr	r0, [r7, #28]
 80019b0:	f7fe fdc0 	bl	8000534 <__aeabi_i2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ec43 2b11 	vmov	d1, r2, r3
 80019bc:	ed9f 0b4e 	vldr	d0, [pc, #312]	@ 8001af8 <decodeRMC+0x458>
 80019c0:	f005 f93e 	bl	8006c40 <pow>
 80019c4:	ec53 2b10 	vmov	r2, r3, d0
 80019c8:	4640      	mov	r0, r8
 80019ca:	4649      	mov	r1, r9
 80019cc:	f7fe ff46 	bl	800085c <__aeabi_ddiv>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7fe fc60 	bl	800029c <__adddf3>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f8e8 	bl	8000bb8 <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	e003      	b.n	80019fc <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 80019fc:	4b40      	ldr	r3, [pc, #256]	@ (8001b00 <decodeRMC+0x460>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a3f      	ldr	r2, [pc, #252]	@ (8001b00 <decodeRMC+0x460>)
 8001a04:	6013      	str	r3, [r2, #0]
	i=0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	220c      	movs	r2, #12
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 f849 	bl	8004aaa <memset>
	while (RMCbuffer[inx] != ',')
 8001a18:	e013      	b.n	8001a42 <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 8001a1a:	4b39      	ldr	r3, [pc, #228]	@ (8001b00 <decodeRMC+0x460>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	7819      	ldrb	r1, [r3, #0]
 8001a26:	f107 0208 	add.w	r2, r7, #8
 8001a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a2c:	4413      	add	r3, r2
 8001a2e:	460a      	mov	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
		i++;
 8001a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a34:	3301      	adds	r3, #1
 8001a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001a38:	4b31      	ldr	r3, [pc, #196]	@ (8001b00 <decodeRMC+0x460>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a30      	ldr	r2, [pc, #192]	@ (8001b00 <decodeRMC+0x460>)
 8001a40:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001a42:	4b2f      	ldr	r3, [pc, #188]	@ (8001b00 <decodeRMC+0x460>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a50:	d1e3      	bne.n	8001a1a <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fa22 	bl	8003ea0 <atoi>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a29      	ldr	r2, [pc, #164]	@ (8001b04 <decodeRMC+0x464>)
 8001a60:	fb82 1203 	smull	r1, r2, r2, r3
 8001a64:	1312      	asrs	r2, r2, #12
 8001a66:	17db      	asrs	r3, r3, #31
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	4a27      	ldr	r2, [pc, #156]	@ (8001b08 <decodeRMC+0x468>)
 8001a6c:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fa14 	bl	8003ea0 <atoi>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4a24      	ldr	r2, [pc, #144]	@ (8001b0c <decodeRMC+0x46c>)
 8001a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a80:	1152      	asrs	r2, r2, #5
 8001a82:	17db      	asrs	r3, r3, #31
 8001a84:	1ad2      	subs	r2, r2, r3
 8001a86:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <decodeRMC+0x46c>)
 8001a88:	fb83 1302 	smull	r1, r3, r3, r2
 8001a8c:	1159      	asrs	r1, r3, #5
 8001a8e:	17d3      	asrs	r3, r2, #31
 8001a90:	1acb      	subs	r3, r1, r3
 8001a92:	2164      	movs	r1, #100	@ 0x64
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b10 <decodeRMC+0x470>)
 8001a9c:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 f9fc 	bl	8003ea0 <atoi>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <decodeRMC+0x46c>)
 8001aac:	fb83 1302 	smull	r1, r3, r3, r2
 8001ab0:	1159      	asrs	r1, r3, #5
 8001ab2:	17d3      	asrs	r3, r2, #31
 8001ab4:	1acb      	subs	r3, r1, r3
 8001ab6:	2164      	movs	r1, #100	@ 0x64
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	4a15      	ldr	r2, [pc, #84]	@ (8001b14 <decodeRMC+0x474>)
 8001ac0:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001ac2:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <decodeRMC+0x468>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <decodeRMC+0x478>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a0e      	ldr	r2, [pc, #56]	@ (8001b08 <decodeRMC+0x468>)
 8001ace:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b08 <decodeRMC+0x468>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <decodeRMC+0x470>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <decodeRMC+0x474>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	609a      	str	r2, [r3, #8]

	return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3740      	adds	r7, #64	@ 0x40
 8001aee:	46bd      	mov	sp, r7
 8001af0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001af4:	f3af 8000 	nop.w
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40240000 	.word	0x40240000
 8001b00:	2000020c 	.word	0x2000020c
 8001b04:	68db8bad 	.word	0x68db8bad
 8001b08:	20000218 	.word	0x20000218
 8001b0c:	51eb851f 	.word	0x51eb851f
 8001b10:	2000021c 	.word	0x2000021c
 8001b14:	20000220 	.word	0x20000220
 8001b18:	20000224 	.word	0x20000224

08001b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	b091      	sub	sp, #68	@ 0x44
 8001b20:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b22:	f000 fded 	bl	8002700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b26:	f000 f8dd 	bl	8001ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2a:	f000 f997 	bl	8001e5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b2e:	f000 f941 	bl	8001db4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b32:	f000 f969 	bl	8001e08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 8001b36:	f000 fba3 	bl	8002280 <Ringbuf_init>
  HAL_Delay (500);
 8001b3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b3e:	f000 fe51 	bl	80027e4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (Wait_for("GGA") == 1)
 8001b42:	4859      	ldr	r0, [pc, #356]	@ (8001ca8 <main+0x18c>)
 8001b44:	f000 fccc 	bl	80024e0 <Wait_for>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d115      	bne.n	8001b7a <main+0x5e>
	 	  {
	 		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 8001b4e:	4b57      	ldr	r3, [pc, #348]	@ (8001cac <main+0x190>)
 8001b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b54:	601a      	str	r2, [r3, #0]

	 		  Copy_upto("*", GGA);
 8001b56:	4956      	ldr	r1, [pc, #344]	@ (8001cb0 <main+0x194>)
 8001b58:	4856      	ldr	r0, [pc, #344]	@ (8001cb4 <main+0x198>)
 8001b5a:	f000 fc41 	bl	80023e0 <Copy_upto>
	 		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8001b5e:	4956      	ldr	r1, [pc, #344]	@ (8001cb8 <main+0x19c>)
 8001b60:	4853      	ldr	r0, [pc, #332]	@ (8001cb0 <main+0x194>)
 8001b62:	f7ff f9f1 	bl	8000f48 <decodeGGA>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d103      	bne.n	8001b74 <main+0x58>
 8001b6c:	4b53      	ldr	r3, [pc, #332]	@ (8001cbc <main+0x1a0>)
 8001b6e:	2202      	movs	r2, #2
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e002      	b.n	8001b7a <main+0x5e>
	 		  else flagGGA = 1;  // 1 indicates the data is invalid
 8001b74:	4b51      	ldr	r3, [pc, #324]	@ (8001cbc <main+0x1a0>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if (Wait_for("RMC") == 1)
 8001b7a:	4851      	ldr	r0, [pc, #324]	@ (8001cc0 <main+0x1a4>)
 8001b7c:	f000 fcb0 	bl	80024e0 <Wait_for>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d115      	bne.n	8001bb2 <main+0x96>
	 	  {

	 		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 8001b86:	4b49      	ldr	r3, [pc, #292]	@ (8001cac <main+0x190>)
 8001b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8c:	601a      	str	r2, [r3, #0]

	 		  Copy_upto("*", RMC);
 8001b8e:	494d      	ldr	r1, [pc, #308]	@ (8001cc4 <main+0x1a8>)
 8001b90:	4848      	ldr	r0, [pc, #288]	@ (8001cb4 <main+0x198>)
 8001b92:	f000 fc25 	bl	80023e0 <Copy_upto>
	 		  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 8001b96:	494c      	ldr	r1, [pc, #304]	@ (8001cc8 <main+0x1ac>)
 8001b98:	484a      	ldr	r0, [pc, #296]	@ (8001cc4 <main+0x1a8>)
 8001b9a:	f7ff fd81 	bl	80016a0 <decodeRMC>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d103      	bne.n	8001bac <main+0x90>
 8001ba4:	4b49      	ldr	r3, [pc, #292]	@ (8001ccc <main+0x1b0>)
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e002      	b.n	8001bb2 <main+0x96>
	 		  else flagRMC = 1;  // 1 indicates the data is invalid
 8001bac:	4b47      	ldr	r3, [pc, #284]	@ (8001ccc <main+0x1b0>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if ((flagGGA == 2) | (flagRMC == 2))
 8001bb2:	4b42      	ldr	r3, [pc, #264]	@ (8001cbc <main+0x1a0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	bf0c      	ite	eq
 8001bba:	2301      	moveq	r3, #1
 8001bbc:	2300      	movne	r3, #0
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b42      	ldr	r3, [pc, #264]	@ (8001ccc <main+0x1b0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d028      	beq.n	8001c28 <main+0x10c>
	 		  //sprintf (lcdBuffer, "%02d:%02d:%02d, %02d%02d%02d", gpsData.ggastruct.tim.hour, \
	 			//	  gpsData.ggastruct.tim.min, gpsData.ggastruct.tim.sec, gpsData.rmcstruct.date.Day, \
	 				//  gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
	 		  //HAL_UART_Transmit(&huart2, lcdBuffer, sizeof(lcdBuffer), 100);
	 		  //lcd_send_string(lcdBuffer);
	 		  memset(lcdBuffer, '\0', 50);
 8001bd6:	2232      	movs	r2, #50	@ 0x32
 8001bd8:	2100      	movs	r1, #0
 8001bda:	483d      	ldr	r0, [pc, #244]	@ (8001cd0 <main+0x1b4>)
 8001bdc:	f002 ff65 	bl	8004aaa <memset>
	 		  //lcd_put_cur(1, 0);
	 		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001be0:	4b35      	ldr	r3, [pc, #212]	@ (8001cb8 <main+0x19c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fcb7 	bl	8000558 <__aeabi_f2d>
 8001bea:	4604      	mov	r4, r0
 8001bec:	460d      	mov	r5, r1
 8001bee:	4b32      	ldr	r3, [pc, #200]	@ (8001cb8 <main+0x19c>)
 8001bf0:	791b      	ldrb	r3, [r3, #4]
 8001bf2:	461e      	mov	r6, r3
	 				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001bf4:	4b30      	ldr	r3, [pc, #192]	@ (8001cb8 <main+0x19c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
	 		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fcad 	bl	8000558 <__aeabi_f2d>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
	 				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001c02:	492d      	ldr	r1, [pc, #180]	@ (8001cb8 <main+0x19c>)
 8001c04:	7b09      	ldrb	r1, [r1, #12]
	 		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001c06:	9104      	str	r1, [sp, #16]
 8001c08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c0c:	9600      	str	r6, [sp, #0]
 8001c0e:	4622      	mov	r2, r4
 8001c10:	462b      	mov	r3, r5
 8001c12:	4930      	ldr	r1, [pc, #192]	@ (8001cd4 <main+0x1b8>)
 8001c14:	482e      	ldr	r0, [pc, #184]	@ (8001cd0 <main+0x1b4>)
 8001c16:	f002 fee5 	bl	80049e4 <siprintf>
	 		  HAL_UART_Transmit(&huart2, lcdBuffer, sizeof(lcdBuffer), 100);
 8001c1a:	2364      	movs	r3, #100	@ 0x64
 8001c1c:	2232      	movs	r2, #50	@ 0x32
 8001c1e:	492c      	ldr	r1, [pc, #176]	@ (8001cd0 <main+0x1b4>)
 8001c20:	482d      	ldr	r0, [pc, #180]	@ (8001cd8 <main+0x1bc>)
 8001c22:	f001 fd81 	bl	8003728 <HAL_UART_Transmit>
 8001c26:	e020      	b.n	8001c6a <main+0x14e>
//	 		  lcd_send_string(lcdBuffer);
	 	  }

	 	  else if ((flagGGA == 1) | (flagRMC == 1))
 8001c28:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <main+0x1a0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <main+0x1b0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	bf0c      	ite	eq
 8001c3e:	2301      	moveq	r3, #1
 8001c40:	2300      	movne	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00e      	beq.n	8001c6a <main+0x14e>
	 	  {
	 		  // Instead of clearing the display, it's better if we print spaces.
	 		  // This will avoid the "refreshing" part
	 		  //lcd_put_cur(0, 0);
	 		  char message[] = "   NO FIX YET   ";
 8001c4c:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <main+0x1c0>)
 8001c4e:	f107 0414 	add.w	r4, r7, #20
 8001c52:	461d      	mov	r5, r3
 8001c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	7023      	strb	r3, [r4, #0]
	 		  HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8001c5c:	f107 0114 	add.w	r1, r7, #20
 8001c60:	2364      	movs	r3, #100	@ 0x64
 8001c62:	2211      	movs	r2, #17
 8001c64:	481c      	ldr	r0, [pc, #112]	@ (8001cd8 <main+0x1bc>)
 8001c66:	f001 fd5f 	bl	8003728 <HAL_UART_Transmit>
//	 		  lcd_put_cur(1, 0);
//	 		  lcd_send_string("   Please wait  ");
	 	  }

	 	  if (VCCTimeout <= 0)
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <main+0x190>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f73f af67 	bgt.w	8001b42 <main+0x26>
	 	  {
	 		  VCCTimeout = 5000;  // Reset the timeout
 8001c74:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <main+0x190>)
 8001c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7a:	601a      	str	r2, [r3, #0]

	 		  //reset flags
	 		  flagGGA =flagRMC =0;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <main+0x1b0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <main+0x1b0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <main+0x1a0>)
 8001c88:	6013      	str	r3, [r2, #0]

	 		  // You are here means the VCC is less, or maybe there is some connection issue
	 		  // Check the VCC, also you can try connecting to the external 5V

//	 		  lcd_put_cur(0, 0);
	 		 char message[] = "    VCC Issue   ";
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <main+0x1c4>)
 8001c8c:	463c      	mov	r4, r7
 8001c8e:	461d      	mov	r5, r3
 8001c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	7023      	strb	r3, [r4, #0]
	 		 HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8001c98:	4639      	mov	r1, r7
 8001c9a:	2364      	movs	r3, #100	@ 0x64
 8001c9c:	2211      	movs	r2, #17
 8001c9e:	480e      	ldr	r0, [pc, #56]	@ (8001cd8 <main+0x1bc>)
 8001ca0:	f001 fd42 	bl	8003728 <HAL_UART_Transmit>
	  if (Wait_for("GGA") == 1)
 8001ca4:	e74d      	b.n	8001b42 <main+0x26>
 8001ca6:	bf00      	nop
 8001ca8:	08007b18 	.word	0x08007b18
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	200002b8 	.word	0x200002b8
 8001cb4:	08007b1c 	.word	0x08007b1c
 8001cb8:	20000380 	.word	0x20000380
 8001cbc:	200003c4 	.word	0x200003c4
 8001cc0:	08007b20 	.word	0x08007b20
 8001cc4:	2000031c 	.word	0x2000031c
 8001cc8:	200003ac 	.word	0x200003ac
 8001ccc:	200003c8 	.word	0x200003c8
 8001cd0:	200003cc 	.word	0x200003cc
 8001cd4:	08007b24 	.word	0x08007b24
 8001cd8:	20000270 	.word	0x20000270
 8001cdc:	08007b38 	.word	0x08007b38
 8001ce0:	08007b4c 	.word	0x08007b4c

08001ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b094      	sub	sp, #80	@ 0x50
 8001ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cea:	f107 0320 	add.w	r3, r7, #32
 8001cee:	2230      	movs	r2, #48	@ 0x30
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 fed9 	bl	8004aaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <SystemClock_Config+0xc8>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	4a26      	ldr	r2, [pc, #152]	@ (8001dac <SystemClock_Config+0xc8>)
 8001d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d18:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <SystemClock_Config+0xc8>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <SystemClock_Config+0xcc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a20      	ldr	r2, [pc, #128]	@ (8001db0 <SystemClock_Config+0xcc>)
 8001d2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <SystemClock_Config+0xcc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d54:	2304      	movs	r3, #4
 8001d56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001d58:	23c0      	movs	r3, #192	@ 0xc0
 8001d5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001d60:	2308      	movs	r3, #8
 8001d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d64:	f107 0320 	add.w	r3, r7, #32
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fff5 	bl	8002d58 <HAL_RCC_OscConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d74:	f000 f8a8 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d78:	230f      	movs	r3, #15
 8001d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	2103      	movs	r1, #3
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 fa57 	bl	8003248 <HAL_RCC_ClockConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001da0:	f000 f892 	bl	8001ec8 <Error_Handler>
  }
}
 8001da4:	bf00      	nop
 8001da6:	3750      	adds	r7, #80	@ 0x50
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40007000 	.word	0x40007000

08001db4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <MX_USART1_UART_Init+0x50>)
 8001dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dc0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dda:	220c      	movs	r2, #12
 8001ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dec:	f001 fc4c 	bl	8003688 <HAL_UART_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001df6:	f000 f867 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000228 	.word	0x20000228
 8001e04:	40011000 	.word	0x40011000

08001e08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <MX_USART2_UART_Init+0x50>)
 8001e10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	220c      	movs	r2, #12
 8001e30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e40:	f001 fc22 	bl	8003688 <HAL_UART_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e4a:	f000 f83d 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000270 	.word	0x20000270
 8001e58:	40004400 	.word	0x40004400

08001e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <MX_GPIO_Init+0x68>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a16      	ldr	r2, [pc, #88]	@ (8001ec4 <MX_GPIO_Init+0x68>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <MX_GPIO_Init+0x68>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <MX_GPIO_Init+0x68>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec4 <MX_GPIO_Init+0x68>)
 8001e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <MX_GPIO_Init+0x68>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <MX_GPIO_Init+0x68>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a08      	ldr	r2, [pc, #32]	@ (8001ec4 <MX_GPIO_Init+0x68>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <MX_GPIO_Init+0x68>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <Error_Handler+0x8>

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <HAL_MspInit+0x4c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eea:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	4a08      	ldr	r2, [pc, #32]	@ (8001f20 <HAL_MspInit+0x4c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f12:	2007      	movs	r0, #7
 8001f14:	f000 fd5a 	bl	80029cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	@ 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a36      	ldr	r2, [pc, #216]	@ (800201c <HAL_UART_MspInit+0xf8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d135      	bne.n	8001fb2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	4b35      	ldr	r3, [pc, #212]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	4a34      	ldr	r2, [pc, #208]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001f50:	f043 0310 	orr.w	r3, r3, #16
 8001f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f56:	4b32      	ldr	r3, [pc, #200]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f72:	4b2b      	ldr	r3, [pc, #172]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f90:	2307      	movs	r3, #7
 8001f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4822      	ldr	r0, [pc, #136]	@ (8002024 <HAL_UART_MspInit+0x100>)
 8001f9c:	f000 fd58 	bl	8002a50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2025      	movs	r0, #37	@ 0x25
 8001fa6:	f000 fd1c 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001faa:	2025      	movs	r0, #37	@ 0x25
 8001fac:	f000 fd35 	bl	8002a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fb0:	e030      	b.n	8002014 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002028 <HAL_UART_MspInit+0x104>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d12b      	bne.n	8002014 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	4b17      	ldr	r3, [pc, #92]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	4a16      	ldr	r2, [pc, #88]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fcc:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_UART_MspInit+0xfc>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ff4:	230c      	movs	r3, #12
 8001ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002004:	2307      	movs	r3, #7
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	4805      	ldr	r0, [pc, #20]	@ (8002024 <HAL_UART_MspInit+0x100>)
 8002010:	f000 fd1e 	bl	8002a50 <HAL_GPIO_Init>
}
 8002014:	bf00      	nop
 8002016:	3730      	adds	r7, #48	@ 0x30
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40011000 	.word	0x40011000
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000
 8002028:	40004400 	.word	0x40004400

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <NMI_Handler+0x4>

08002034 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <MemManage_Handler+0x4>

08002044 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <BusFault_Handler+0x4>

0800204c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <UsageFault_Handler+0x4>

08002054 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if (timeout > 0)  timeout--;
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <SysTick_Handler+0x34>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <SysTick_Handler+0x18>
 800208c:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <SysTick_Handler+0x34>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <SysTick_Handler+0x34>)
 8002096:	801a      	strh	r2, [r3, #0]
  if (VCCTimeout>0) VCCTimeout--;
 8002098:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <SysTick_Handler+0x38>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	dd04      	ble.n	80020aa <SysTick_Handler+0x2a>
 80020a0:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <SysTick_Handler+0x38>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <SysTick_Handler+0x38>)
 80020a8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020aa:	f000 fb7b 	bl	80027a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000404 	.word	0x20000404
 80020b8:	20000004 	.word	0x20000004

080020bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <USART1_IRQHandler+0x10>)
 80020c2:	f000 fa95 	bl	80025f0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000228 	.word	0x20000228

080020d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return 1;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <_kill>:

int _kill(int pid, int sig)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ea:	f002 fd31 	bl	8004b50 <__errno>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2216      	movs	r2, #22
 80020f2:	601a      	str	r2, [r3, #0]
  return -1;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_exit>:

void _exit (int status)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ffe7 	bl	80020e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002112:	bf00      	nop
 8002114:	e7fd      	b.n	8002112 <_exit+0x12>

08002116 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e00a      	b.n	800213e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002128:	f3af 8000 	nop.w
 800212c:	4601      	mov	r1, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	60ba      	str	r2, [r7, #8]
 8002134:	b2ca      	uxtb	r2, r1
 8002136:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	dbf0      	blt.n	8002128 <_read+0x12>
  }

  return len;
 8002146:	687b      	ldr	r3, [r7, #4]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e009      	b.n	8002176 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	60ba      	str	r2, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	dbf1      	blt.n	8002162 <_write+0x12>
  }
  return len;
 800217e:	687b      	ldr	r3, [r7, #4]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_close>:

int _close(int file)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b0:	605a      	str	r2, [r3, #4]
  return 0;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_isatty>:

int _isatty(int file)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f8:	4a14      	ldr	r2, [pc, #80]	@ (800224c <_sbrk+0x5c>)
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <_sbrk+0x60>)
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002204:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <_sbrk+0x64>)
 800220e:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <_sbrk+0x68>)
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	d207      	bcs.n	8002230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002220:	f002 fc96 	bl	8004b50 <__errno>
 8002224:	4603      	mov	r3, r0
 8002226:	220c      	movs	r2, #12
 8002228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
 800222e:	e009      	b.n	8002244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002236:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	4a05      	ldr	r2, [pc, #20]	@ (8002254 <_sbrk+0x64>)
 8002240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20020000 	.word	0x20020000
 8002250:	00000400 	.word	0x00000400
 8002254:	20000400 	.word	0x20000400
 8002258:	20000970 	.word	0x20000970

0800225c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <SystemInit+0x20>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	4a05      	ldr	r2, [pc, #20]	@ (800227c <SystemInit+0x20>)
 8002268:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800226c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002284:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <Ringbuf_init+0x3c>)
 8002286:	4a0e      	ldr	r2, [pc, #56]	@ (80022c0 <Ringbuf_init+0x40>)
 8002288:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800228a:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <Ringbuf_init+0x44>)
 800228c:	4a0e      	ldr	r2, [pc, #56]	@ (80022c8 <Ringbuf_init+0x48>)
 800228e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002290:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <Ringbuf_init+0x4c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <Ringbuf_init+0x4c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80022a0:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <Ringbuf_init+0x4c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <Ringbuf_init+0x4c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0220 	orr.w	r2, r2, #32
 80022ae:	60da      	str	r2, [r3, #12]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000818 	.word	0x20000818
 80022c0:	20000408 	.word	0x20000408
 80022c4:	2000081c 	.word	0x2000081c
 80022c8:	20000610 	.word	0x20000610
 80022cc:	20000228 	.word	0x20000228

080022d0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e8:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d009      	beq.n	800230a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	79f9      	ldrb	r1, [r7, #7]
 8002300:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800231e:	4b13      	ldr	r3, [pc, #76]	@ (800236c <Uart_read+0x54>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002326:	4b11      	ldr	r3, [pc, #68]	@ (800236c <Uart_read+0x54>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800232e:	429a      	cmp	r2, r3
 8002330:	d102      	bne.n	8002338 <Uart_read+0x20>
  {
    return -1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	e013      	b.n	8002360 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <Uart_read+0x54>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <Uart_read+0x54>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002344:	5cd3      	ldrb	r3, [r2, r3]
 8002346:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <Uart_read+0x54>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <Uart_read+0x54>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800235a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 800235e:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	20000818 	.word	0x20000818

08002370 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002374:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <IsDataAvailable+0x30>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800237c:	b29a      	uxth	r2, r3
 800237e:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <IsDataAvailable+0x30>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002386:	b29b      	uxth	r3, r3
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	b29b      	uxth	r3, r3
 800238c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002390:	b29b      	uxth	r3, r3
 8002392:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	20000818 	.word	0x20000818

080023a4 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80023a8:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <Uart_peek+0x38>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80023b0:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <Uart_peek+0x38>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d102      	bne.n	80023c2 <Uart_peek+0x1e>
  {
    return -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
 80023c0:	e006      	b.n	80023d0 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80023c2:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <Uart_peek+0x38>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <Uart_peek+0x38>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000818 	.word	0x20000818

080023e0 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fd ff46 	bl	8000280 <strlen>
 80023f4:	4603      	mov	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 80023fc:	e01e      	b.n	800243c <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80023fe:	4b36      	ldr	r3, [pc, #216]	@ (80024d8 <Copy_upto+0xf8>)
 8002400:	6819      	ldr	r1, [r3, #0]
 8002402:	4b35      	ldr	r3, [pc, #212]	@ (80024d8 <Copy_upto+0xf8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6838      	ldr	r0, [r7, #0]
 800240e:	4403      	add	r3, r0
 8002410:	5c8a      	ldrb	r2, [r1, r2]
 8002412:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002414:	4b30      	ldr	r3, [pc, #192]	@ (80024d8 <Copy_upto+0xf8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	4b2e      	ldr	r3, [pc, #184]	@ (80024d8 <Copy_upto+0xf8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002426:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	3301      	adds	r3, #1
 800242e:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002430:	bf00      	nop
 8002432:	f7ff ff9d 	bl	8002370 <IsDataAvailable>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0fa      	beq.n	8002432 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 800243c:	f7ff ffb2 	bl	80023a4 <Uart_peek>
 8002440:	4601      	mov	r1, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	4299      	cmp	r1, r3
 800244c:	d1d7      	bne.n	80023fe <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 800244e:	e027      	b.n	80024a0 <Copy_upto+0xc0>
	{
		so_far++;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3301      	adds	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002456:	f7ff ff5f 	bl	8002318 <Uart_read>
 800245a:	4601      	mov	r1, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	613a      	str	r2, [r7, #16]
 8002462:	461a      	mov	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	b2ca      	uxtb	r2, r1
 800246a:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d101      	bne.n	8002478 <Copy_upto+0x98>
 8002474:	2301      	movs	r3, #1
 8002476:	e02a      	b.n	80024ce <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002478:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <Copy_upto+0xfc>)
 800247a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800247e:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002480:	bf00      	nop
 8002482:	f7ff ff75 	bl	8002370 <IsDataAvailable>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <Copy_upto+0xb4>
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <Copy_upto+0xfc>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f6      	bne.n	8002482 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <Copy_upto+0xfc>)
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <Copy_upto+0xc0>
 800249c:	2300      	movs	r3, #0
 800249e:	e016      	b.n	80024ce <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 80024a0:	f7ff ff80 	bl	80023a4 <Uart_peek>
 80024a4:	4601      	mov	r1, r0
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	4299      	cmp	r1, r3
 80024b0:	d0ce      	beq.n	8002450 <Copy_upto+0x70>
	}

	if (so_far != len)
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d002      	beq.n	80024c0 <Copy_upto+0xe0>
	{
		so_far = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
		goto again;
 80024be:	e79d      	b.n	80023fc <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d101      	bne.n	80024cc <Copy_upto+0xec>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <Copy_upto+0xee>
	else return 0;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000818 	.word	0x20000818
 80024dc:	20000404 	.word	0x20000404

080024e0 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7fd fec7 	bl	8000280 <strlen>
 80024f2:	4603      	mov	r3, r0
 80024f4:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 80024f6:	4b3c      	ldr	r3, [pc, #240]	@ (80025e8 <Wait_for+0x108>)
 80024f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024fc:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80024fe:	bf00      	nop
 8002500:	f7ff ff36 	bl	8002370 <IsDataAvailable>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <Wait_for+0x32>
 800250a:	4b37      	ldr	r3, [pc, #220]	@ (80025e8 <Wait_for+0x108>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f6      	bne.n	8002500 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002512:	4b35      	ldr	r3, [pc, #212]	@ (80025e8 <Wait_for+0x108>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d119      	bne.n	800254e <Wait_for+0x6e>
 800251a:	2300      	movs	r3, #0
 800251c:	e060      	b.n	80025e0 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 800251e:	4b33      	ldr	r3, [pc, #204]	@ (80025ec <Wait_for+0x10c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002526:	4b31      	ldr	r3, [pc, #196]	@ (80025ec <Wait_for+0x10c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800252e:	429a      	cmp	r2, r3
 8002530:	d00b      	beq.n	800254a <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002532:	4b2e      	ldr	r3, [pc, #184]	@ (80025ec <Wait_for+0x10c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	4b2b      	ldr	r3, [pc, #172]	@ (80025ec <Wait_for+0x10c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002544:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002548:	e001      	b.n	800254e <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800254a:	2300      	movs	r3, #0
 800254c:	e048      	b.n	80025e0 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 800254e:	f7ff ff29 	bl	80023a4 <Uart_peek>
 8002552:	4601      	mov	r1, r0
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4299      	cmp	r1, r3
 800255e:	d1de      	bne.n	800251e <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002560:	e027      	b.n	80025b2 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3301      	adds	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002568:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <Wait_for+0x10c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	4b1e      	ldr	r3, [pc, #120]	@ (80025ec <Wait_for+0x10c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800257a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	429a      	cmp	r2, r3
 8002584:	d101      	bne.n	800258a <Wait_for+0xaa>
 8002586:	2301      	movs	r3, #1
 8002588:	e02a      	b.n	80025e0 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 800258a:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <Wait_for+0x108>)
 800258c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002590:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002592:	bf00      	nop
 8002594:	f7ff feec 	bl	8002370 <IsDataAvailable>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <Wait_for+0xc6>
 800259e:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <Wait_for+0x108>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f6      	bne.n	8002594 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <Wait_for+0x108>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <Wait_for+0xd2>
 80025ae:	2300      	movs	r3, #0
 80025b0:	e016      	b.n	80025e0 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80025b2:	f7ff fef7 	bl	80023a4 <Uart_peek>
 80025b6:	4601      	mov	r1, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4299      	cmp	r1, r3
 80025c2:	d0ce      	beq.n	8002562 <Wait_for+0x82>
	}

	if (so_far != len)
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d002      	beq.n	80025d2 <Wait_for+0xf2>
	{
		so_far = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
		goto again;
 80025d0:	e791      	b.n	80024f6 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d101      	bne.n	80025de <Wait_for+0xfe>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <Wait_for+0x100>
	else return 0;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000404 	.word	0x20000404
 80025ec:	20000818 	.word	0x20000818

080025f0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d013      	beq.n	800263a <Uart_isr+0x4a>
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800262a:	4b1e      	ldr	r3, [pc, #120]	@ (80026a4 <Uart_isr+0xb4>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fe4c 	bl	80022d0 <store_char>
        return;
 8002638:	e031      	b.n	800269e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002640:	2b00      	cmp	r3, #0
 8002642:	d02c      	beq.n	800269e <Uart_isr+0xae>
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d027      	beq.n	800269e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800264e:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <Uart_isr+0xb8>)
 8002650:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002654:	4b14      	ldr	r3, [pc, #80]	@ (80026a8 <Uart_isr+0xb8>)
 8002656:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800265a:	429a      	cmp	r2, r3
 800265c:	d108      	bne.n	8002670 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800266c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800266e:	e015      	b.n	800269c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002670:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <Uart_isr+0xb8>)
 8002672:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002676:	4a0c      	ldr	r2, [pc, #48]	@ (80026a8 <Uart_isr+0xb8>)
 8002678:	5cd3      	ldrb	r3, [r2, r3]
 800267a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <Uart_isr+0xb8>)
 800267e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002682:	3301      	adds	r3, #1
 8002684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <Uart_isr+0xb8>)
 800268a:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	7bba      	ldrb	r2, [r7, #14]
 800269a:	605a      	str	r2, [r3, #4]
    	return;
 800269c:	bf00      	nop
    }
}
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000818 	.word	0x20000818
 80026a8:	20000610 	.word	0x20000610

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026b0:	f7ff fdd4 	bl	800225c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b4:	480c      	ldr	r0, [pc, #48]	@ (80026e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026b6:	490d      	ldr	r1, [pc, #52]	@ (80026ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026cc:	4c0a      	ldr	r4, [pc, #40]	@ (80026f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026da:	f002 fa3f 	bl	8004b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026de:	f7ff fa1d 	bl	8001b1c <main>
  bx  lr    
 80026e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ec:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80026f0:	08007f28 	.word	0x08007f28
  ldr r2, =_sbss
 80026f4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80026f8:	20000970 	.word	0x20000970

080026fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC_IRQHandler>
	...

08002700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002704:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <HAL_Init+0x40>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0d      	ldr	r2, [pc, #52]	@ (8002740 <HAL_Init+0x40>)
 800270a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800270e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002710:	4b0b      	ldr	r3, [pc, #44]	@ (8002740 <HAL_Init+0x40>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <HAL_Init+0x40>)
 8002716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800271a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800271c:	4b08      	ldr	r3, [pc, #32]	@ (8002740 <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a07      	ldr	r2, [pc, #28]	@ (8002740 <HAL_Init+0x40>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002728:	2003      	movs	r0, #3
 800272a:	f000 f94f 	bl	80029cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800272e:	2000      	movs	r0, #0
 8002730:	f000 f808 	bl	8002744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002734:	f7ff fbce 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023c00 	.word	0x40023c00

08002744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800274c:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_InitTick+0x54>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <HAL_InitTick+0x58>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800275a:	fbb3 f3f1 	udiv	r3, r3, r1
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f967 	bl	8002a36 <HAL_SYSTICK_Config>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e00e      	b.n	8002790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b0f      	cmp	r3, #15
 8002776:	d80a      	bhi.n	800278e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002778:	2200      	movs	r2, #0
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f000 f92f 	bl	80029e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002784:	4a06      	ldr	r2, [pc, #24]	@ (80027a0 <HAL_InitTick+0x5c>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000008 	.word	0x20000008
 800279c:	20000010 	.word	0x20000010
 80027a0:	2000000c 	.word	0x2000000c

080027a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_IncTick+0x20>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_IncTick+0x24>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	4a04      	ldr	r2, [pc, #16]	@ (80027c8 <HAL_IncTick+0x24>)
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000010 	.word	0x20000010
 80027c8:	20000820 	.word	0x20000820

080027cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return uwTick;
 80027d0:	4b03      	ldr	r3, [pc, #12]	@ (80027e0 <HAL_GetTick+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000820 	.word	0x20000820

080027e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff ffee 	bl	80027cc <HAL_GetTick>
 80027f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d005      	beq.n	800280a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <HAL_Delay+0x44>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800280a:	bf00      	nop
 800280c:	f7ff ffde 	bl	80027cc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	429a      	cmp	r2, r3
 800281a:	d8f7      	bhi.n	800280c <HAL_Delay+0x28>
  {
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000010 	.word	0x20000010

0800282c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800283c:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800285c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285e:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	60d3      	str	r3, [r2, #12]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002878:	4b04      	ldr	r3, [pc, #16]	@ (800288c <__NVIC_GetPriorityGrouping+0x18>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	f003 0307 	and.w	r3, r3, #7
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	db0b      	blt.n	80028ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4907      	ldr	r1, [pc, #28]	@ (80028c8 <__NVIC_EnableIRQ+0x38>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2001      	movs	r0, #1
 80028b2:	fa00 f202 	lsl.w	r2, r0, r2
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	@ (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	@ (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
         );
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	@ 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002998:	d301      	bcc.n	800299e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299a:	2301      	movs	r3, #1
 800299c:	e00f      	b.n	80029be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <SysTick_Config+0x40>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a6:	210f      	movs	r1, #15
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	f7ff ff8e 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <SysTick_Config+0x40>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b6:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <SysTick_Config+0x40>)
 80029b8:	2207      	movs	r2, #7
 80029ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff29 	bl	800282c <__NVIC_SetPriorityGrouping>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f4:	f7ff ff3e 	bl	8002874 <__NVIC_GetPriorityGrouping>
 80029f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	6978      	ldr	r0, [r7, #20]
 8002a00:	f7ff ff8e 	bl	8002920 <NVIC_EncodePriority>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff5d 	bl	80028cc <__NVIC_SetPriority>
}
 8002a12:	bf00      	nop
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	4603      	mov	r3, r0
 8002a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff31 	bl	8002890 <__NVIC_EnableIRQ>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ffa2 	bl	8002988 <SysTick_Config>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	@ 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e159      	b.n	8002d20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f040 8148 	bne.w	8002d1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d005      	beq.n	8002aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d130      	bne.n	8002b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 0201 	and.w	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d017      	beq.n	8002b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d123      	bne.n	8002b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80a2 	beq.w	8002d1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b57      	ldr	r3, [pc, #348]	@ (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	4a56      	ldr	r2, [pc, #344]	@ (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002be6:	4b54      	ldr	r3, [pc, #336]	@ (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf2:	4a52      	ldr	r2, [pc, #328]	@ (8002d3c <HAL_GPIO_Init+0x2ec>)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a49      	ldr	r2, [pc, #292]	@ (8002d40 <HAL_GPIO_Init+0x2f0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d019      	beq.n	8002c52 <HAL_GPIO_Init+0x202>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a48      	ldr	r2, [pc, #288]	@ (8002d44 <HAL_GPIO_Init+0x2f4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <HAL_GPIO_Init+0x1fe>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a47      	ldr	r2, [pc, #284]	@ (8002d48 <HAL_GPIO_Init+0x2f8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00d      	beq.n	8002c4a <HAL_GPIO_Init+0x1fa>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a46      	ldr	r2, [pc, #280]	@ (8002d4c <HAL_GPIO_Init+0x2fc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d007      	beq.n	8002c46 <HAL_GPIO_Init+0x1f6>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a45      	ldr	r2, [pc, #276]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_GPIO_Init+0x1f2>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	e008      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c42:	2307      	movs	r3, #7
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e004      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e002      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c52:	2300      	movs	r3, #0
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f002 0203 	and.w	r2, r2, #3
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	4093      	lsls	r3, r2
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c64:	4935      	ldr	r1, [pc, #212]	@ (8002d3c <HAL_GPIO_Init+0x2ec>)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c72:	4b38      	ldr	r3, [pc, #224]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c96:	4a2f      	ldr	r2, [pc, #188]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc0:	4a24      	ldr	r2, [pc, #144]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cc6:	4b23      	ldr	r3, [pc, #140]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cea:	4a1a      	ldr	r2, [pc, #104]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d14:	4a0f      	ldr	r2, [pc, #60]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b0f      	cmp	r3, #15
 8002d24:	f67f aea2 	bls.w	8002a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3724      	adds	r7, #36	@ 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40013c00 	.word	0x40013c00

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e267      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d075      	beq.n	8002e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d76:	4b88      	ldr	r3, [pc, #544]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d00c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d82:	4b85      	ldr	r3, [pc, #532]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d112      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8e:	4b82      	ldr	r3, [pc, #520]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d9a:	d10b      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d05b      	beq.n	8002e60 <HAL_RCC_OscConfig+0x108>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d157      	bne.n	8002e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e242      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x74>
 8002dbe:	4b76      	ldr	r3, [pc, #472]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a75      	ldr	r2, [pc, #468]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e01d      	b.n	8002e08 <HAL_RCC_OscConfig+0xb0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x98>
 8002dd6:	4b70      	ldr	r3, [pc, #448]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6f      	ldr	r2, [pc, #444]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6c      	ldr	r2, [pc, #432]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0xb0>
 8002df0:	4b69      	ldr	r3, [pc, #420]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a68      	ldr	r2, [pc, #416]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b66      	ldr	r3, [pc, #408]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a65      	ldr	r2, [pc, #404]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff fcdc 	bl	80027cc <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7ff fcd8 	bl	80027cc <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	@ 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e207      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0xc0>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7ff fcc8 	bl	80027cc <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7ff fcc4 	bl	80027cc <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	@ 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1f3      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	4b51      	ldr	r3, [pc, #324]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0xe8>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d063      	beq.n	8002f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7a:	4b47      	ldr	r3, [pc, #284]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d11c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e86:	4b44      	ldr	r3, [pc, #272]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d116      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	4b41      	ldr	r3, [pc, #260]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_RCC_OscConfig+0x152>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e1c7      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4937      	ldr	r1, [pc, #220]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	e03a      	b.n	8002f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec8:	4b34      	ldr	r3, [pc, #208]	@ (8002f9c <HAL_RCC_OscConfig+0x244>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7ff fc7d 	bl	80027cc <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7ff fc79 	bl	80027cc <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e1a8      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b28      	ldr	r3, [pc, #160]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4925      	ldr	r1, [pc, #148]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
 8002f08:	e015      	b.n	8002f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <HAL_RCC_OscConfig+0x244>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7ff fc5c 	bl	80027cc <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f18:	f7ff fc58 	bl	80027cc <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e187      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d036      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <HAL_RCC_OscConfig+0x248>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7ff fc3c 	bl	80027cc <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f58:	f7ff fc38 	bl	80027cc <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e167      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x200>
 8002f76:	e01b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <HAL_RCC_OscConfig+0x248>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7ff fc25 	bl	80027cc <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	e00e      	b.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f86:	f7ff fc21 	bl	80027cc <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d907      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e150      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	42470000 	.word	0x42470000
 8002fa0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	4b88      	ldr	r3, [pc, #544]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ea      	bne.n	8002f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8097 	beq.w	80030ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc2:	4b81      	ldr	r3, [pc, #516]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fde:	4b7a      	ldr	r3, [pc, #488]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b77      	ldr	r3, [pc, #476]	@ (80031cc <HAL_RCC_OscConfig+0x474>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d118      	bne.n	800302c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffa:	4b74      	ldr	r3, [pc, #464]	@ (80031cc <HAL_RCC_OscConfig+0x474>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a73      	ldr	r2, [pc, #460]	@ (80031cc <HAL_RCC_OscConfig+0x474>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003006:	f7ff fbe1 	bl	80027cc <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7ff fbdd 	bl	80027cc <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e10c      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	4b6a      	ldr	r3, [pc, #424]	@ (80031cc <HAL_RCC_OscConfig+0x474>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x2ea>
 8003034:	4b64      	ldr	r3, [pc, #400]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003038:	4a63      	ldr	r2, [pc, #396]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003040:	e01c      	b.n	800307c <HAL_RCC_OscConfig+0x324>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b05      	cmp	r3, #5
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x30c>
 800304a:	4b5f      	ldr	r3, [pc, #380]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	4a5e      	ldr	r2, [pc, #376]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	6713      	str	r3, [r2, #112]	@ 0x70
 8003056:	4b5c      	ldr	r3, [pc, #368]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305a:	4a5b      	ldr	r2, [pc, #364]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6713      	str	r3, [r2, #112]	@ 0x70
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0x324>
 8003064:	4b58      	ldr	r3, [pc, #352]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003068:	4a57      	ldr	r2, [pc, #348]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003070:	4b55      	ldr	r3, [pc, #340]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003074:	4a54      	ldr	r2, [pc, #336]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003076:	f023 0304 	bic.w	r3, r3, #4
 800307a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d015      	beq.n	80030b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7ff fba2 	bl	80027cc <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7ff fb9e 	bl	80027cc <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0cb      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	4b49      	ldr	r3, [pc, #292]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0ee      	beq.n	800308c <HAL_RCC_OscConfig+0x334>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7ff fb8c 	bl	80027cc <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7ff fb88 	bl	80027cc <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0b5      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ce:	4b3e      	ldr	r3, [pc, #248]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ee      	bne.n	80030b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b39      	ldr	r3, [pc, #228]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	4a38      	ldr	r2, [pc, #224]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80a1 	beq.w	8003238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030f6:	4b34      	ldr	r3, [pc, #208]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d05c      	beq.n	80031bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d141      	bne.n	800318e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310a:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <HAL_RCC_OscConfig+0x478>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7ff fb5c 	bl	80027cc <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7ff fb58 	bl	80027cc <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e087      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	4b27      	ldr	r3, [pc, #156]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	019b      	lsls	r3, r3, #6
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	3b01      	subs	r3, #1
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	491b      	ldr	r1, [pc, #108]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003160:	4b1b      	ldr	r3, [pc, #108]	@ (80031d0 <HAL_RCC_OscConfig+0x478>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7ff fb31 	bl	80027cc <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316e:	f7ff fb2d 	bl	80027cc <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e05c      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003180:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x416>
 800318c:	e054      	b.n	8003238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318e:	4b10      	ldr	r3, [pc, #64]	@ (80031d0 <HAL_RCC_OscConfig+0x478>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff fb1a 	bl	80027cc <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7ff fb16 	bl	80027cc <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e045      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ae:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x444>
 80031ba:	e03d      	b.n	8003238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d107      	bne.n	80031d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e038      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40007000 	.word	0x40007000
 80031d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003244 <HAL_RCC_OscConfig+0x4ec>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d028      	beq.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d121      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d11a      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003204:	4013      	ands	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800320a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800320c:	4293      	cmp	r3, r2
 800320e:	d111      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	3b01      	subs	r3, #1
 800321e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0cc      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b68      	ldr	r3, [pc, #416]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d90c      	bls.n	8003284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b65      	ldr	r3, [pc, #404]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b63      	ldr	r3, [pc, #396]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0b8      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800329c:	4b59      	ldr	r3, [pc, #356]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a58      	ldr	r2, [pc, #352]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b4:	4b53      	ldr	r3, [pc, #332]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a52      	ldr	r2, [pc, #328]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c0:	4b50      	ldr	r3, [pc, #320]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	494d      	ldr	r1, [pc, #308]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d044      	beq.n	8003368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b47      	ldr	r3, [pc, #284]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d119      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e07f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d003      	beq.n	8003306 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003302:	2b03      	cmp	r3, #3
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	4b3f      	ldr	r3, [pc, #252]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e06f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003316:	4b3b      	ldr	r3, [pc, #236]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e067      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b37      	ldr	r3, [pc, #220]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4934      	ldr	r1, [pc, #208]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003338:	f7ff fa48 	bl	80027cc <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7ff fa44 	bl	80027cc <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e04f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b2b      	ldr	r3, [pc, #172]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d20c      	bcs.n	8003390 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e032      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800339c:	4b19      	ldr	r3, [pc, #100]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4916      	ldr	r1, [pc, #88]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ba:	4b12      	ldr	r3, [pc, #72]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	490e      	ldr	r1, [pc, #56]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ce:	f000 f821 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	490a      	ldr	r1, [pc, #40]	@ (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	5ccb      	ldrb	r3, [r1, r3]
 80033e2:	fa22 f303 	lsr.w	r3, r2, r3
 80033e6:	4a09      	ldr	r2, [pc, #36]	@ (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033ea:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff f9a8 	bl	8002744 <HAL_InitTick>

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023c00 	.word	0x40023c00
 8003404:	40023800 	.word	0x40023800
 8003408:	08007b60 	.word	0x08007b60
 800340c:	20000008 	.word	0x20000008
 8003410:	2000000c 	.word	0x2000000c

08003414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003418:	b094      	sub	sp, #80	@ 0x50
 800341a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800342c:	4b79      	ldr	r3, [pc, #484]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d00d      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x40>
 8003438:	2b08      	cmp	r3, #8
 800343a:	f200 80e1 	bhi.w	8003600 <HAL_RCC_GetSysClockFreq+0x1ec>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x34>
 8003442:	2b04      	cmp	r3, #4
 8003444:	d003      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x3a>
 8003446:	e0db      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b73      	ldr	r3, [pc, #460]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x204>)
 800344a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800344c:	e0db      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800344e:	4b73      	ldr	r3, [pc, #460]	@ (800361c <HAL_RCC_GetSysClockFreq+0x208>)
 8003450:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003452:	e0d8      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003454:	4b6f      	ldr	r3, [pc, #444]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800345c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800345e:	4b6d      	ldr	r3, [pc, #436]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346a:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	099b      	lsrs	r3, r3, #6
 8003470:	2200      	movs	r2, #0
 8003472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003474:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347c:	633b      	str	r3, [r7, #48]	@ 0x30
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	@ 0x34
 8003482:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003486:	4622      	mov	r2, r4
 8003488:	462b      	mov	r3, r5
 800348a:	f04f 0000 	mov.w	r0, #0
 800348e:	f04f 0100 	mov.w	r1, #0
 8003492:	0159      	lsls	r1, r3, #5
 8003494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003498:	0150      	lsls	r0, r2, #5
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4621      	mov	r1, r4
 80034a0:	1a51      	subs	r1, r2, r1
 80034a2:	6139      	str	r1, [r7, #16]
 80034a4:	4629      	mov	r1, r5
 80034a6:	eb63 0301 	sbc.w	r3, r3, r1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b8:	4659      	mov	r1, fp
 80034ba:	018b      	lsls	r3, r1, #6
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c2:	4651      	mov	r1, sl
 80034c4:	018a      	lsls	r2, r1, #6
 80034c6:	4651      	mov	r1, sl
 80034c8:	ebb2 0801 	subs.w	r8, r2, r1
 80034cc:	4659      	mov	r1, fp
 80034ce:	eb63 0901 	sbc.w	r9, r3, r1
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e6:	4690      	mov	r8, r2
 80034e8:	4699      	mov	r9, r3
 80034ea:	4623      	mov	r3, r4
 80034ec:	eb18 0303 	adds.w	r3, r8, r3
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	462b      	mov	r3, r5
 80034f4:	eb49 0303 	adc.w	r3, r9, r3
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003506:	4629      	mov	r1, r5
 8003508:	024b      	lsls	r3, r1, #9
 800350a:	4621      	mov	r1, r4
 800350c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003510:	4621      	mov	r1, r4
 8003512:	024a      	lsls	r2, r1, #9
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800351a:	2200      	movs	r2, #0
 800351c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003524:	f7fd fb98 	bl	8000c58 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003530:	e058      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b38      	ldr	r3, [pc, #224]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	2200      	movs	r2, #0
 800353a:	4618      	mov	r0, r3
 800353c:	4611      	mov	r1, r2
 800353e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
 8003548:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	f04f 0000 	mov.w	r0, #0
 8003554:	f04f 0100 	mov.w	r1, #0
 8003558:	0159      	lsls	r1, r3, #5
 800355a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355e:	0150      	lsls	r0, r2, #5
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4641      	mov	r1, r8
 8003566:	ebb2 0a01 	subs.w	sl, r2, r1
 800356a:	4649      	mov	r1, r9
 800356c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800357c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003580:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003584:	ebb2 040a 	subs.w	r4, r2, sl
 8003588:	eb63 050b 	sbc.w	r5, r3, fp
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	00eb      	lsls	r3, r5, #3
 8003596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359a:	00e2      	lsls	r2, r4, #3
 800359c:	4614      	mov	r4, r2
 800359e:	461d      	mov	r5, r3
 80035a0:	4643      	mov	r3, r8
 80035a2:	18e3      	adds	r3, r4, r3
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	464b      	mov	r3, r9
 80035a8:	eb45 0303 	adc.w	r3, r5, r3
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ba:	4629      	mov	r1, r5
 80035bc:	028b      	lsls	r3, r1, #10
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c4:	4621      	mov	r1, r4
 80035c6:	028a      	lsls	r2, r1, #10
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ce:	2200      	movs	r2, #0
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	61fa      	str	r2, [r7, #28]
 80035d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d8:	f7fd fb3e 	bl	8000c58 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4613      	mov	r3, r2
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	3301      	adds	r3, #1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80035f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x204>)
 8003602:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003608:	4618      	mov	r0, r3
 800360a:	3750      	adds	r7, #80	@ 0x50
 800360c:	46bd      	mov	sp, r7
 800360e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200

08003620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <HAL_RCC_GetHCLKFreq+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000008 	.word	0x20000008

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800363c:	f7ff fff0 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0a9b      	lsrs	r3, r3, #10
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	@ (800365c <HAL_RCC_GetPCLK1Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	08007b70 	.word	0x08007b70

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003664:	f7ff ffdc 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0b5b      	lsrs	r3, r3, #13
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4903      	ldr	r1, [pc, #12]	@ (8003684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40023800 	.word	0x40023800
 8003684:	08007b70 	.word	0x08007b70

08003688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e042      	b.n	8003720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fe fc38 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	@ 0x24
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f973 	bl	80039b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	d175      	bne.n	8003834 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_UART_Transmit+0x2c>
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e06e      	b.n	8003836 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2221      	movs	r2, #33	@ 0x21
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003766:	f7ff f831 	bl	80027cc <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003780:	d108      	bne.n	8003794 <HAL_UART_Transmit+0x6c>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d104      	bne.n	8003794 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	e003      	b.n	800379c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800379c:	e02e      	b.n	80037fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2180      	movs	r1, #128	@ 0x80
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f848 	bl	800383e <UART_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e03a      	b.n	8003836 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	3302      	adds	r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	e007      	b.n	80037ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	3301      	adds	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1cb      	bne.n	800379e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2200      	movs	r2, #0
 800380e:	2140      	movs	r1, #64	@ 0x40
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f814 	bl	800383e <UART_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e006      	b.n	8003836 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384e:	e03b      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d037      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fe ffb8 	bl	80027cc <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	6a3a      	ldr	r2, [r7, #32]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <UART_WaitOnFlagUntilTimeout+0x30>
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e03a      	b.n	80038e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b80      	cmp	r3, #128	@ 0x80
 8003884:	d020      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b40      	cmp	r3, #64	@ 0x40
 800388a:	d01d      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	d116      	bne.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f81d 	bl	80038f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2208      	movs	r2, #8
 80038ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e00f      	b.n	80038e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d0b4      	beq.n	8003850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b095      	sub	sp, #84	@ 0x54
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800390e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	330c      	adds	r3, #12
 8003916:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003918:	643a      	str	r2, [r7, #64]	@ 0x40
 800391a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800391e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e5      	bne.n	80038f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	61fb      	str	r3, [r7, #28]
   return(result);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3314      	adds	r3, #20
 800394a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800394c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800394e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e5      	bne.n	800392c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	2b01      	cmp	r3, #1
 8003966:	d119      	bne.n	800399c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	60bb      	str	r3, [r7, #8]
   return(result);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f023 0310 	bic.w	r3, r3, #16
 800397e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003988:	61ba      	str	r2, [r7, #24]
 800398a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6979      	ldr	r1, [r7, #20]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	613b      	str	r3, [r7, #16]
   return(result);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e5      	bne.n	8003968 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039aa:	bf00      	nop
 80039ac:	3754      	adds	r7, #84	@ 0x54
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b0c0      	sub	sp, #256	@ 0x100
 80039be:	af00      	add	r7, sp, #0
 80039c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d4:	68d9      	ldr	r1, [r3, #12]
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	ea40 0301 	orr.w	r3, r0, r1
 80039e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a10:	f021 010c 	bic.w	r1, r1, #12
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a32:	6999      	ldr	r1, [r3, #24]
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	ea40 0301 	orr.w	r3, r0, r1
 8003a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b8f      	ldr	r3, [pc, #572]	@ (8003c84 <UART_SetConfig+0x2cc>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d005      	beq.n	8003a58 <UART_SetConfig+0xa0>
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b8d      	ldr	r3, [pc, #564]	@ (8003c88 <UART_SetConfig+0x2d0>)
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d104      	bne.n	8003a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7ff fe02 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a60:	e003      	b.n	8003a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a62:	f7ff fde9 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8003a66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a74:	f040 810c 	bne.w	8003c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	1891      	adds	r1, r2, r2
 8003a90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a92:	415b      	adcs	r3, r3
 8003a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	eb12 0801 	adds.w	r8, r2, r1
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	eb43 0901 	adc.w	r9, r3, r1
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	eb18 0303 	adds.w	r3, r8, r3
 8003ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ac8:	462b      	mov	r3, r5
 8003aca:	eb49 0303 	adc.w	r3, r9, r3
 8003ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ade:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	18db      	adds	r3, r3, r3
 8003aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aec:	4613      	mov	r3, r2
 8003aee:	eb42 0303 	adc.w	r3, r2, r3
 8003af2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003afc:	f7fd f8ac 	bl	8000c58 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4b61      	ldr	r3, [pc, #388]	@ (8003c8c <UART_SetConfig+0x2d4>)
 8003b06:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	011c      	lsls	r4, r3, #4
 8003b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b30:	4641      	mov	r1, r8
 8003b32:	eb12 0a01 	adds.w	sl, r2, r1
 8003b36:	4649      	mov	r1, r9
 8003b38:	eb43 0b01 	adc.w	fp, r3, r1
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b50:	4692      	mov	sl, r2
 8003b52:	469b      	mov	fp, r3
 8003b54:	4643      	mov	r3, r8
 8003b56:	eb1a 0303 	adds.w	r3, sl, r3
 8003b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	eb4b 0303 	adc.w	r3, fp, r3
 8003b64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	18db      	adds	r3, r3, r3
 8003b80:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b82:	4613      	mov	r3, r2
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b92:	f7fd f861 	bl	8000c58 <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c8c <UART_SetConfig+0x2d4>)
 8003b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2264      	movs	r2, #100	@ 0x64
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	1acb      	subs	r3, r1, r3
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bb2:	4b36      	ldr	r3, [pc, #216]	@ (8003c8c <UART_SetConfig+0x2d4>)
 8003bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bc0:	441c      	add	r4, r3
 8003bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	1891      	adds	r1, r2, r2
 8003bda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003be4:	4641      	mov	r1, r8
 8003be6:	1851      	adds	r1, r2, r1
 8003be8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bea:	4649      	mov	r1, r9
 8003bec:	414b      	adcs	r3, r1
 8003bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	00cb      	lsls	r3, r1, #3
 8003c00:	4651      	mov	r1, sl
 8003c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c06:	4651      	mov	r1, sl
 8003c08:	00ca      	lsls	r2, r1, #3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4642      	mov	r2, r8
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c18:	464b      	mov	r3, r9
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	eb42 0303 	adc.w	r3, r2, r3
 8003c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c38:	460b      	mov	r3, r1
 8003c3a:	18db      	adds	r3, r3, r3
 8003c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c3e:	4613      	mov	r3, r2
 8003c40:	eb42 0303 	adc.w	r3, r2, r3
 8003c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c4e:	f7fd f803 	bl	8000c58 <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <UART_SetConfig+0x2d4>)
 8003c58:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2164      	movs	r1, #100	@ 0x64
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	3332      	adds	r3, #50	@ 0x32
 8003c6a:	4a08      	ldr	r2, [pc, #32]	@ (8003c8c <UART_SetConfig+0x2d4>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 0207 	and.w	r2, r3, #7
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4422      	add	r2, r4
 8003c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c80:	e106      	b.n	8003e90 <UART_SetConfig+0x4d8>
 8003c82:	bf00      	nop
 8003c84:	40011000 	.word	0x40011000
 8003c88:	40011400 	.word	0x40011400
 8003c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ca2:	4642      	mov	r2, r8
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	1891      	adds	r1, r2, r2
 8003ca8:	6239      	str	r1, [r7, #32]
 8003caa:	415b      	adcs	r3, r3
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	1854      	adds	r4, r2, r1
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	eb43 0501 	adc.w	r5, r3, r1
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	00eb      	lsls	r3, r5, #3
 8003cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cca:	00e2      	lsls	r2, r4, #3
 8003ccc:	4614      	mov	r4, r2
 8003cce:	461d      	mov	r5, r3
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	18e3      	adds	r3, r4, r3
 8003cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cd8:	464b      	mov	r3, r9
 8003cda:	eb45 0303 	adc.w	r3, r5, r3
 8003cde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cfe:	4629      	mov	r1, r5
 8003d00:	008b      	lsls	r3, r1, #2
 8003d02:	4621      	mov	r1, r4
 8003d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d08:	4621      	mov	r1, r4
 8003d0a:	008a      	lsls	r2, r1, #2
 8003d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d10:	f7fc ffa2 	bl	8000c58 <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4b60      	ldr	r3, [pc, #384]	@ (8003e9c <UART_SetConfig+0x4e4>)
 8003d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	011c      	lsls	r4, r3, #4
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	61b9      	str	r1, [r7, #24]
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d44:	4641      	mov	r1, r8
 8003d46:	1851      	adds	r1, r2, r1
 8003d48:	6139      	str	r1, [r7, #16]
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	00cb      	lsls	r3, r1, #3
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d66:	4651      	mov	r1, sl
 8003d68:	00ca      	lsls	r2, r1, #3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4642      	mov	r2, r8
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	008b      	lsls	r3, r1, #2
 8003da0:	4641      	mov	r1, r8
 8003da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da6:	4641      	mov	r1, r8
 8003da8:	008a      	lsls	r2, r1, #2
 8003daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003dae:	f7fc ff53 	bl	8000c58 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	4b38      	ldr	r3, [pc, #224]	@ (8003e9c <UART_SetConfig+0x4e4>)
 8003dba:	fba3 2301 	umull	r2, r3, r3, r1
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2264      	movs	r2, #100	@ 0x64
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	1acb      	subs	r3, r1, r3
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	3332      	adds	r3, #50	@ 0x32
 8003dcc:	4a33      	ldr	r2, [pc, #204]	@ (8003e9c <UART_SetConfig+0x4e4>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dd8:	441c      	add	r4, r3
 8003dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dde:	2200      	movs	r2, #0
 8003de0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003de2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003de4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003de8:	4642      	mov	r2, r8
 8003dea:	464b      	mov	r3, r9
 8003dec:	1891      	adds	r1, r2, r2
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	415b      	adcs	r3, r3
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df8:	4641      	mov	r1, r8
 8003dfa:	1851      	adds	r1, r2, r1
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	4649      	mov	r1, r9
 8003e00:	414b      	adcs	r3, r1
 8003e02:	607b      	str	r3, [r7, #4]
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e10:	4659      	mov	r1, fp
 8003e12:	00cb      	lsls	r3, r1, #3
 8003e14:	4651      	mov	r1, sl
 8003e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1a:	4651      	mov	r1, sl
 8003e1c:	00ca      	lsls	r2, r1, #3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	4642      	mov	r2, r8
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	460a      	mov	r2, r1
 8003e2e:	eb42 0303 	adc.w	r3, r2, r3
 8003e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	008b      	lsls	r3, r1, #2
 8003e50:	4641      	mov	r1, r8
 8003e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e56:	4641      	mov	r1, r8
 8003e58:	008a      	lsls	r2, r1, #2
 8003e5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e5e:	f7fc fefb 	bl	8000c58 <__aeabi_uldivmod>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <UART_SetConfig+0x4e4>)
 8003e68:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	2164      	movs	r1, #100	@ 0x64
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	3332      	adds	r3, #50	@ 0x32
 8003e7a:	4a08      	ldr	r2, [pc, #32]	@ (8003e9c <UART_SetConfig+0x4e4>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	f003 020f 	and.w	r2, r3, #15
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4422      	add	r2, r4
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e96:	46bd      	mov	sp, r7
 8003e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9c:	51eb851f 	.word	0x51eb851f

08003ea0 <atoi>:
 8003ea0:	220a      	movs	r2, #10
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f000 b87a 	b.w	8003f9c <strtol>

08003ea8 <_strtol_l.constprop.0>:
 8003ea8:	2b24      	cmp	r3, #36	@ 0x24
 8003eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eae:	4686      	mov	lr, r0
 8003eb0:	4690      	mov	r8, r2
 8003eb2:	d801      	bhi.n	8003eb8 <_strtol_l.constprop.0+0x10>
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d106      	bne.n	8003ec6 <_strtol_l.constprop.0+0x1e>
 8003eb8:	f000 fe4a 	bl	8004b50 <__errno>
 8003ebc:	2316      	movs	r3, #22
 8003ebe:	6003      	str	r3, [r0, #0]
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec6:	4834      	ldr	r0, [pc, #208]	@ (8003f98 <_strtol_l.constprop.0+0xf0>)
 8003ec8:	460d      	mov	r5, r1
 8003eca:	462a      	mov	r2, r5
 8003ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ed0:	5d06      	ldrb	r6, [r0, r4]
 8003ed2:	f016 0608 	ands.w	r6, r6, #8
 8003ed6:	d1f8      	bne.n	8003eca <_strtol_l.constprop.0+0x22>
 8003ed8:	2c2d      	cmp	r4, #45	@ 0x2d
 8003eda:	d12d      	bne.n	8003f38 <_strtol_l.constprop.0+0x90>
 8003edc:	782c      	ldrb	r4, [r5, #0]
 8003ede:	2601      	movs	r6, #1
 8003ee0:	1c95      	adds	r5, r2, #2
 8003ee2:	f033 0210 	bics.w	r2, r3, #16
 8003ee6:	d109      	bne.n	8003efc <_strtol_l.constprop.0+0x54>
 8003ee8:	2c30      	cmp	r4, #48	@ 0x30
 8003eea:	d12a      	bne.n	8003f42 <_strtol_l.constprop.0+0x9a>
 8003eec:	782a      	ldrb	r2, [r5, #0]
 8003eee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003ef2:	2a58      	cmp	r2, #88	@ 0x58
 8003ef4:	d125      	bne.n	8003f42 <_strtol_l.constprop.0+0x9a>
 8003ef6:	786c      	ldrb	r4, [r5, #1]
 8003ef8:	2310      	movs	r3, #16
 8003efa:	3502      	adds	r5, #2
 8003efc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003f00:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003f04:	2200      	movs	r2, #0
 8003f06:	fbbc f9f3 	udiv	r9, ip, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	fb03 ca19 	mls	sl, r3, r9, ip
 8003f10:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003f14:	2f09      	cmp	r7, #9
 8003f16:	d81b      	bhi.n	8003f50 <_strtol_l.constprop.0+0xa8>
 8003f18:	463c      	mov	r4, r7
 8003f1a:	42a3      	cmp	r3, r4
 8003f1c:	dd27      	ble.n	8003f6e <_strtol_l.constprop.0+0xc6>
 8003f1e:	1c57      	adds	r7, r2, #1
 8003f20:	d007      	beq.n	8003f32 <_strtol_l.constprop.0+0x8a>
 8003f22:	4581      	cmp	r9, r0
 8003f24:	d320      	bcc.n	8003f68 <_strtol_l.constprop.0+0xc0>
 8003f26:	d101      	bne.n	8003f2c <_strtol_l.constprop.0+0x84>
 8003f28:	45a2      	cmp	sl, r4
 8003f2a:	db1d      	blt.n	8003f68 <_strtol_l.constprop.0+0xc0>
 8003f2c:	fb00 4003 	mla	r0, r0, r3, r4
 8003f30:	2201      	movs	r2, #1
 8003f32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f36:	e7eb      	b.n	8003f10 <_strtol_l.constprop.0+0x68>
 8003f38:	2c2b      	cmp	r4, #43	@ 0x2b
 8003f3a:	bf04      	itt	eq
 8003f3c:	782c      	ldrbeq	r4, [r5, #0]
 8003f3e:	1c95      	addeq	r5, r2, #2
 8003f40:	e7cf      	b.n	8003ee2 <_strtol_l.constprop.0+0x3a>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1da      	bne.n	8003efc <_strtol_l.constprop.0+0x54>
 8003f46:	2c30      	cmp	r4, #48	@ 0x30
 8003f48:	bf0c      	ite	eq
 8003f4a:	2308      	moveq	r3, #8
 8003f4c:	230a      	movne	r3, #10
 8003f4e:	e7d5      	b.n	8003efc <_strtol_l.constprop.0+0x54>
 8003f50:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003f54:	2f19      	cmp	r7, #25
 8003f56:	d801      	bhi.n	8003f5c <_strtol_l.constprop.0+0xb4>
 8003f58:	3c37      	subs	r4, #55	@ 0x37
 8003f5a:	e7de      	b.n	8003f1a <_strtol_l.constprop.0+0x72>
 8003f5c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003f60:	2f19      	cmp	r7, #25
 8003f62:	d804      	bhi.n	8003f6e <_strtol_l.constprop.0+0xc6>
 8003f64:	3c57      	subs	r4, #87	@ 0x57
 8003f66:	e7d8      	b.n	8003f1a <_strtol_l.constprop.0+0x72>
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6c:	e7e1      	b.n	8003f32 <_strtol_l.constprop.0+0x8a>
 8003f6e:	1c53      	adds	r3, r2, #1
 8003f70:	d108      	bne.n	8003f84 <_strtol_l.constprop.0+0xdc>
 8003f72:	2322      	movs	r3, #34	@ 0x22
 8003f74:	f8ce 3000 	str.w	r3, [lr]
 8003f78:	4660      	mov	r0, ip
 8003f7a:	f1b8 0f00 	cmp.w	r8, #0
 8003f7e:	d0a0      	beq.n	8003ec2 <_strtol_l.constprop.0+0x1a>
 8003f80:	1e69      	subs	r1, r5, #1
 8003f82:	e006      	b.n	8003f92 <_strtol_l.constprop.0+0xea>
 8003f84:	b106      	cbz	r6, 8003f88 <_strtol_l.constprop.0+0xe0>
 8003f86:	4240      	negs	r0, r0
 8003f88:	f1b8 0f00 	cmp.w	r8, #0
 8003f8c:	d099      	beq.n	8003ec2 <_strtol_l.constprop.0+0x1a>
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	d1f6      	bne.n	8003f80 <_strtol_l.constprop.0+0xd8>
 8003f92:	f8c8 1000 	str.w	r1, [r8]
 8003f96:	e794      	b.n	8003ec2 <_strtol_l.constprop.0+0x1a>
 8003f98:	08007b79 	.word	0x08007b79

08003f9c <strtol>:
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	460a      	mov	r2, r1
 8003fa0:	4601      	mov	r1, r0
 8003fa2:	4802      	ldr	r0, [pc, #8]	@ (8003fac <strtol+0x10>)
 8003fa4:	6800      	ldr	r0, [r0, #0]
 8003fa6:	f7ff bf7f 	b.w	8003ea8 <_strtol_l.constprop.0>
 8003faa:	bf00      	nop
 8003fac:	20000020 	.word	0x20000020

08003fb0 <__cvt>:
 8003fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb4:	ec57 6b10 	vmov	r6, r7, d0
 8003fb8:	2f00      	cmp	r7, #0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	bfbb      	ittet	lt
 8003fc2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003fc6:	461f      	movlt	r7, r3
 8003fc8:	2300      	movge	r3, #0
 8003fca:	232d      	movlt	r3, #45	@ 0x2d
 8003fcc:	700b      	strb	r3, [r1, #0]
 8003fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fd0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003fd4:	4691      	mov	r9, r2
 8003fd6:	f023 0820 	bic.w	r8, r3, #32
 8003fda:	bfbc      	itt	lt
 8003fdc:	4632      	movlt	r2, r6
 8003fde:	4616      	movlt	r6, r2
 8003fe0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003fe4:	d005      	beq.n	8003ff2 <__cvt+0x42>
 8003fe6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003fea:	d100      	bne.n	8003fee <__cvt+0x3e>
 8003fec:	3401      	adds	r4, #1
 8003fee:	2102      	movs	r1, #2
 8003ff0:	e000      	b.n	8003ff4 <__cvt+0x44>
 8003ff2:	2103      	movs	r1, #3
 8003ff4:	ab03      	add	r3, sp, #12
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	ab02      	add	r3, sp, #8
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	ec47 6b10 	vmov	d0, r6, r7
 8004000:	4653      	mov	r3, sl
 8004002:	4622      	mov	r2, r4
 8004004:	f000 fe5c 	bl	8004cc0 <_dtoa_r>
 8004008:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800400c:	4605      	mov	r5, r0
 800400e:	d119      	bne.n	8004044 <__cvt+0x94>
 8004010:	f019 0f01 	tst.w	r9, #1
 8004014:	d00e      	beq.n	8004034 <__cvt+0x84>
 8004016:	eb00 0904 	add.w	r9, r0, r4
 800401a:	2200      	movs	r2, #0
 800401c:	2300      	movs	r3, #0
 800401e:	4630      	mov	r0, r6
 8004020:	4639      	mov	r1, r7
 8004022:	f7fc fd59 	bl	8000ad8 <__aeabi_dcmpeq>
 8004026:	b108      	cbz	r0, 800402c <__cvt+0x7c>
 8004028:	f8cd 900c 	str.w	r9, [sp, #12]
 800402c:	2230      	movs	r2, #48	@ 0x30
 800402e:	9b03      	ldr	r3, [sp, #12]
 8004030:	454b      	cmp	r3, r9
 8004032:	d31e      	bcc.n	8004072 <__cvt+0xc2>
 8004034:	9b03      	ldr	r3, [sp, #12]
 8004036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004038:	1b5b      	subs	r3, r3, r5
 800403a:	4628      	mov	r0, r5
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	b004      	add	sp, #16
 8004040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004044:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004048:	eb00 0904 	add.w	r9, r0, r4
 800404c:	d1e5      	bne.n	800401a <__cvt+0x6a>
 800404e:	7803      	ldrb	r3, [r0, #0]
 8004050:	2b30      	cmp	r3, #48	@ 0x30
 8004052:	d10a      	bne.n	800406a <__cvt+0xba>
 8004054:	2200      	movs	r2, #0
 8004056:	2300      	movs	r3, #0
 8004058:	4630      	mov	r0, r6
 800405a:	4639      	mov	r1, r7
 800405c:	f7fc fd3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004060:	b918      	cbnz	r0, 800406a <__cvt+0xba>
 8004062:	f1c4 0401 	rsb	r4, r4, #1
 8004066:	f8ca 4000 	str.w	r4, [sl]
 800406a:	f8da 3000 	ldr.w	r3, [sl]
 800406e:	4499      	add	r9, r3
 8004070:	e7d3      	b.n	800401a <__cvt+0x6a>
 8004072:	1c59      	adds	r1, r3, #1
 8004074:	9103      	str	r1, [sp, #12]
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	e7d9      	b.n	800402e <__cvt+0x7e>

0800407a <__exponent>:
 800407a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800407c:	2900      	cmp	r1, #0
 800407e:	bfba      	itte	lt
 8004080:	4249      	neglt	r1, r1
 8004082:	232d      	movlt	r3, #45	@ 0x2d
 8004084:	232b      	movge	r3, #43	@ 0x2b
 8004086:	2909      	cmp	r1, #9
 8004088:	7002      	strb	r2, [r0, #0]
 800408a:	7043      	strb	r3, [r0, #1]
 800408c:	dd29      	ble.n	80040e2 <__exponent+0x68>
 800408e:	f10d 0307 	add.w	r3, sp, #7
 8004092:	461d      	mov	r5, r3
 8004094:	270a      	movs	r7, #10
 8004096:	461a      	mov	r2, r3
 8004098:	fbb1 f6f7 	udiv	r6, r1, r7
 800409c:	fb07 1416 	mls	r4, r7, r6, r1
 80040a0:	3430      	adds	r4, #48	@ 0x30
 80040a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80040a6:	460c      	mov	r4, r1
 80040a8:	2c63      	cmp	r4, #99	@ 0x63
 80040aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80040ae:	4631      	mov	r1, r6
 80040b0:	dcf1      	bgt.n	8004096 <__exponent+0x1c>
 80040b2:	3130      	adds	r1, #48	@ 0x30
 80040b4:	1e94      	subs	r4, r2, #2
 80040b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80040ba:	1c41      	adds	r1, r0, #1
 80040bc:	4623      	mov	r3, r4
 80040be:	42ab      	cmp	r3, r5
 80040c0:	d30a      	bcc.n	80040d8 <__exponent+0x5e>
 80040c2:	f10d 0309 	add.w	r3, sp, #9
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	42ac      	cmp	r4, r5
 80040ca:	bf88      	it	hi
 80040cc:	2300      	movhi	r3, #0
 80040ce:	3302      	adds	r3, #2
 80040d0:	4403      	add	r3, r0
 80040d2:	1a18      	subs	r0, r3, r0
 80040d4:	b003      	add	sp, #12
 80040d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80040dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80040e0:	e7ed      	b.n	80040be <__exponent+0x44>
 80040e2:	2330      	movs	r3, #48	@ 0x30
 80040e4:	3130      	adds	r1, #48	@ 0x30
 80040e6:	7083      	strb	r3, [r0, #2]
 80040e8:	70c1      	strb	r1, [r0, #3]
 80040ea:	1d03      	adds	r3, r0, #4
 80040ec:	e7f1      	b.n	80040d2 <__exponent+0x58>
	...

080040f0 <_printf_float>:
 80040f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f4:	b08d      	sub	sp, #52	@ 0x34
 80040f6:	460c      	mov	r4, r1
 80040f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80040fc:	4616      	mov	r6, r2
 80040fe:	461f      	mov	r7, r3
 8004100:	4605      	mov	r5, r0
 8004102:	f000 fcdb 	bl	8004abc <_localeconv_r>
 8004106:	6803      	ldr	r3, [r0, #0]
 8004108:	9304      	str	r3, [sp, #16]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc f8b8 	bl	8000280 <strlen>
 8004110:	2300      	movs	r3, #0
 8004112:	930a      	str	r3, [sp, #40]	@ 0x28
 8004114:	f8d8 3000 	ldr.w	r3, [r8]
 8004118:	9005      	str	r0, [sp, #20]
 800411a:	3307      	adds	r3, #7
 800411c:	f023 0307 	bic.w	r3, r3, #7
 8004120:	f103 0208 	add.w	r2, r3, #8
 8004124:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004128:	f8d4 b000 	ldr.w	fp, [r4]
 800412c:	f8c8 2000 	str.w	r2, [r8]
 8004130:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004134:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004138:	9307      	str	r3, [sp, #28]
 800413a:	f8cd 8018 	str.w	r8, [sp, #24]
 800413e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004146:	4b9c      	ldr	r3, [pc, #624]	@ (80043b8 <_printf_float+0x2c8>)
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	f7fc fcf6 	bl	8000b3c <__aeabi_dcmpun>
 8004150:	bb70      	cbnz	r0, 80041b0 <_printf_float+0xc0>
 8004152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004156:	4b98      	ldr	r3, [pc, #608]	@ (80043b8 <_printf_float+0x2c8>)
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	f7fc fcd0 	bl	8000b00 <__aeabi_dcmple>
 8004160:	bb30      	cbnz	r0, 80041b0 <_printf_float+0xc0>
 8004162:	2200      	movs	r2, #0
 8004164:	2300      	movs	r3, #0
 8004166:	4640      	mov	r0, r8
 8004168:	4649      	mov	r1, r9
 800416a:	f7fc fcbf 	bl	8000aec <__aeabi_dcmplt>
 800416e:	b110      	cbz	r0, 8004176 <_printf_float+0x86>
 8004170:	232d      	movs	r3, #45	@ 0x2d
 8004172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004176:	4a91      	ldr	r2, [pc, #580]	@ (80043bc <_printf_float+0x2cc>)
 8004178:	4b91      	ldr	r3, [pc, #580]	@ (80043c0 <_printf_float+0x2d0>)
 800417a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800417e:	bf94      	ite	ls
 8004180:	4690      	movls	r8, r2
 8004182:	4698      	movhi	r8, r3
 8004184:	2303      	movs	r3, #3
 8004186:	6123      	str	r3, [r4, #16]
 8004188:	f02b 0304 	bic.w	r3, fp, #4
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	f04f 0900 	mov.w	r9, #0
 8004192:	9700      	str	r7, [sp, #0]
 8004194:	4633      	mov	r3, r6
 8004196:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004198:	4621      	mov	r1, r4
 800419a:	4628      	mov	r0, r5
 800419c:	f000 f9d2 	bl	8004544 <_printf_common>
 80041a0:	3001      	adds	r0, #1
 80041a2:	f040 808d 	bne.w	80042c0 <_printf_float+0x1d0>
 80041a6:	f04f 30ff 	mov.w	r0, #4294967295
 80041aa:	b00d      	add	sp, #52	@ 0x34
 80041ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	4640      	mov	r0, r8
 80041b6:	4649      	mov	r1, r9
 80041b8:	f7fc fcc0 	bl	8000b3c <__aeabi_dcmpun>
 80041bc:	b140      	cbz	r0, 80041d0 <_printf_float+0xe0>
 80041be:	464b      	mov	r3, r9
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bfbc      	itt	lt
 80041c4:	232d      	movlt	r3, #45	@ 0x2d
 80041c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80041ca:	4a7e      	ldr	r2, [pc, #504]	@ (80043c4 <_printf_float+0x2d4>)
 80041cc:	4b7e      	ldr	r3, [pc, #504]	@ (80043c8 <_printf_float+0x2d8>)
 80041ce:	e7d4      	b.n	800417a <_printf_float+0x8a>
 80041d0:	6863      	ldr	r3, [r4, #4]
 80041d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80041d6:	9206      	str	r2, [sp, #24]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	d13b      	bne.n	8004254 <_printf_float+0x164>
 80041dc:	2306      	movs	r3, #6
 80041de:	6063      	str	r3, [r4, #4]
 80041e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80041e4:	2300      	movs	r3, #0
 80041e6:	6022      	str	r2, [r4, #0]
 80041e8:	9303      	str	r3, [sp, #12]
 80041ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80041ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80041f0:	ab09      	add	r3, sp, #36	@ 0x24
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	6861      	ldr	r1, [r4, #4]
 80041f6:	ec49 8b10 	vmov	d0, r8, r9
 80041fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80041fe:	4628      	mov	r0, r5
 8004200:	f7ff fed6 	bl	8003fb0 <__cvt>
 8004204:	9b06      	ldr	r3, [sp, #24]
 8004206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004208:	2b47      	cmp	r3, #71	@ 0x47
 800420a:	4680      	mov	r8, r0
 800420c:	d129      	bne.n	8004262 <_printf_float+0x172>
 800420e:	1cc8      	adds	r0, r1, #3
 8004210:	db02      	blt.n	8004218 <_printf_float+0x128>
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	4299      	cmp	r1, r3
 8004216:	dd41      	ble.n	800429c <_printf_float+0x1ac>
 8004218:	f1aa 0a02 	sub.w	sl, sl, #2
 800421c:	fa5f fa8a 	uxtb.w	sl, sl
 8004220:	3901      	subs	r1, #1
 8004222:	4652      	mov	r2, sl
 8004224:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004228:	9109      	str	r1, [sp, #36]	@ 0x24
 800422a:	f7ff ff26 	bl	800407a <__exponent>
 800422e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004230:	1813      	adds	r3, r2, r0
 8004232:	2a01      	cmp	r2, #1
 8004234:	4681      	mov	r9, r0
 8004236:	6123      	str	r3, [r4, #16]
 8004238:	dc02      	bgt.n	8004240 <_printf_float+0x150>
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	07d2      	lsls	r2, r2, #31
 800423e:	d501      	bpl.n	8004244 <_printf_float+0x154>
 8004240:	3301      	adds	r3, #1
 8004242:	6123      	str	r3, [r4, #16]
 8004244:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0a2      	beq.n	8004192 <_printf_float+0xa2>
 800424c:	232d      	movs	r3, #45	@ 0x2d
 800424e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004252:	e79e      	b.n	8004192 <_printf_float+0xa2>
 8004254:	9a06      	ldr	r2, [sp, #24]
 8004256:	2a47      	cmp	r2, #71	@ 0x47
 8004258:	d1c2      	bne.n	80041e0 <_printf_float+0xf0>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1c0      	bne.n	80041e0 <_printf_float+0xf0>
 800425e:	2301      	movs	r3, #1
 8004260:	e7bd      	b.n	80041de <_printf_float+0xee>
 8004262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004266:	d9db      	bls.n	8004220 <_printf_float+0x130>
 8004268:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800426c:	d118      	bne.n	80042a0 <_printf_float+0x1b0>
 800426e:	2900      	cmp	r1, #0
 8004270:	6863      	ldr	r3, [r4, #4]
 8004272:	dd0b      	ble.n	800428c <_printf_float+0x19c>
 8004274:	6121      	str	r1, [r4, #16]
 8004276:	b913      	cbnz	r3, 800427e <_printf_float+0x18e>
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	07d0      	lsls	r0, r2, #31
 800427c:	d502      	bpl.n	8004284 <_printf_float+0x194>
 800427e:	3301      	adds	r3, #1
 8004280:	440b      	add	r3, r1
 8004282:	6123      	str	r3, [r4, #16]
 8004284:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004286:	f04f 0900 	mov.w	r9, #0
 800428a:	e7db      	b.n	8004244 <_printf_float+0x154>
 800428c:	b913      	cbnz	r3, 8004294 <_printf_float+0x1a4>
 800428e:	6822      	ldr	r2, [r4, #0]
 8004290:	07d2      	lsls	r2, r2, #31
 8004292:	d501      	bpl.n	8004298 <_printf_float+0x1a8>
 8004294:	3302      	adds	r3, #2
 8004296:	e7f4      	b.n	8004282 <_printf_float+0x192>
 8004298:	2301      	movs	r3, #1
 800429a:	e7f2      	b.n	8004282 <_printf_float+0x192>
 800429c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042a2:	4299      	cmp	r1, r3
 80042a4:	db05      	blt.n	80042b2 <_printf_float+0x1c2>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	6121      	str	r1, [r4, #16]
 80042aa:	07d8      	lsls	r0, r3, #31
 80042ac:	d5ea      	bpl.n	8004284 <_printf_float+0x194>
 80042ae:	1c4b      	adds	r3, r1, #1
 80042b0:	e7e7      	b.n	8004282 <_printf_float+0x192>
 80042b2:	2900      	cmp	r1, #0
 80042b4:	bfd4      	ite	le
 80042b6:	f1c1 0202 	rsble	r2, r1, #2
 80042ba:	2201      	movgt	r2, #1
 80042bc:	4413      	add	r3, r2
 80042be:	e7e0      	b.n	8004282 <_printf_float+0x192>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	055a      	lsls	r2, r3, #21
 80042c4:	d407      	bmi.n	80042d6 <_printf_float+0x1e6>
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	4642      	mov	r2, r8
 80042ca:	4631      	mov	r1, r6
 80042cc:	4628      	mov	r0, r5
 80042ce:	47b8      	blx	r7
 80042d0:	3001      	adds	r0, #1
 80042d2:	d12b      	bne.n	800432c <_printf_float+0x23c>
 80042d4:	e767      	b.n	80041a6 <_printf_float+0xb6>
 80042d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042da:	f240 80dd 	bls.w	8004498 <_printf_float+0x3a8>
 80042de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042e2:	2200      	movs	r2, #0
 80042e4:	2300      	movs	r3, #0
 80042e6:	f7fc fbf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d033      	beq.n	8004356 <_printf_float+0x266>
 80042ee:	4a37      	ldr	r2, [pc, #220]	@ (80043cc <_printf_float+0x2dc>)
 80042f0:	2301      	movs	r3, #1
 80042f2:	4631      	mov	r1, r6
 80042f4:	4628      	mov	r0, r5
 80042f6:	47b8      	blx	r7
 80042f8:	3001      	adds	r0, #1
 80042fa:	f43f af54 	beq.w	80041a6 <_printf_float+0xb6>
 80042fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004302:	4543      	cmp	r3, r8
 8004304:	db02      	blt.n	800430c <_printf_float+0x21c>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	07d8      	lsls	r0, r3, #31
 800430a:	d50f      	bpl.n	800432c <_printf_float+0x23c>
 800430c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004310:	4631      	mov	r1, r6
 8004312:	4628      	mov	r0, r5
 8004314:	47b8      	blx	r7
 8004316:	3001      	adds	r0, #1
 8004318:	f43f af45 	beq.w	80041a6 <_printf_float+0xb6>
 800431c:	f04f 0900 	mov.w	r9, #0
 8004320:	f108 38ff 	add.w	r8, r8, #4294967295
 8004324:	f104 0a1a 	add.w	sl, r4, #26
 8004328:	45c8      	cmp	r8, r9
 800432a:	dc09      	bgt.n	8004340 <_printf_float+0x250>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	079b      	lsls	r3, r3, #30
 8004330:	f100 8103 	bmi.w	800453a <_printf_float+0x44a>
 8004334:	68e0      	ldr	r0, [r4, #12]
 8004336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004338:	4298      	cmp	r0, r3
 800433a:	bfb8      	it	lt
 800433c:	4618      	movlt	r0, r3
 800433e:	e734      	b.n	80041aa <_printf_float+0xba>
 8004340:	2301      	movs	r3, #1
 8004342:	4652      	mov	r2, sl
 8004344:	4631      	mov	r1, r6
 8004346:	4628      	mov	r0, r5
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	f43f af2b 	beq.w	80041a6 <_printf_float+0xb6>
 8004350:	f109 0901 	add.w	r9, r9, #1
 8004354:	e7e8      	b.n	8004328 <_printf_float+0x238>
 8004356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	dc39      	bgt.n	80043d0 <_printf_float+0x2e0>
 800435c:	4a1b      	ldr	r2, [pc, #108]	@ (80043cc <_printf_float+0x2dc>)
 800435e:	2301      	movs	r3, #1
 8004360:	4631      	mov	r1, r6
 8004362:	4628      	mov	r0, r5
 8004364:	47b8      	blx	r7
 8004366:	3001      	adds	r0, #1
 8004368:	f43f af1d 	beq.w	80041a6 <_printf_float+0xb6>
 800436c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004370:	ea59 0303 	orrs.w	r3, r9, r3
 8004374:	d102      	bne.n	800437c <_printf_float+0x28c>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	07d9      	lsls	r1, r3, #31
 800437a:	d5d7      	bpl.n	800432c <_printf_float+0x23c>
 800437c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004380:	4631      	mov	r1, r6
 8004382:	4628      	mov	r0, r5
 8004384:	47b8      	blx	r7
 8004386:	3001      	adds	r0, #1
 8004388:	f43f af0d 	beq.w	80041a6 <_printf_float+0xb6>
 800438c:	f04f 0a00 	mov.w	sl, #0
 8004390:	f104 0b1a 	add.w	fp, r4, #26
 8004394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004396:	425b      	negs	r3, r3
 8004398:	4553      	cmp	r3, sl
 800439a:	dc01      	bgt.n	80043a0 <_printf_float+0x2b0>
 800439c:	464b      	mov	r3, r9
 800439e:	e793      	b.n	80042c8 <_printf_float+0x1d8>
 80043a0:	2301      	movs	r3, #1
 80043a2:	465a      	mov	r2, fp
 80043a4:	4631      	mov	r1, r6
 80043a6:	4628      	mov	r0, r5
 80043a8:	47b8      	blx	r7
 80043aa:	3001      	adds	r0, #1
 80043ac:	f43f aefb 	beq.w	80041a6 <_printf_float+0xb6>
 80043b0:	f10a 0a01 	add.w	sl, sl, #1
 80043b4:	e7ee      	b.n	8004394 <_printf_float+0x2a4>
 80043b6:	bf00      	nop
 80043b8:	7fefffff 	.word	0x7fefffff
 80043bc:	08007c79 	.word	0x08007c79
 80043c0:	08007c7d 	.word	0x08007c7d
 80043c4:	08007c81 	.word	0x08007c81
 80043c8:	08007c85 	.word	0x08007c85
 80043cc:	08007c89 	.word	0x08007c89
 80043d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80043d6:	4553      	cmp	r3, sl
 80043d8:	bfa8      	it	ge
 80043da:	4653      	movge	r3, sl
 80043dc:	2b00      	cmp	r3, #0
 80043de:	4699      	mov	r9, r3
 80043e0:	dc36      	bgt.n	8004450 <_printf_float+0x360>
 80043e2:	f04f 0b00 	mov.w	fp, #0
 80043e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043ea:	f104 021a 	add.w	r2, r4, #26
 80043ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043f0:	9306      	str	r3, [sp, #24]
 80043f2:	eba3 0309 	sub.w	r3, r3, r9
 80043f6:	455b      	cmp	r3, fp
 80043f8:	dc31      	bgt.n	800445e <_printf_float+0x36e>
 80043fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043fc:	459a      	cmp	sl, r3
 80043fe:	dc3a      	bgt.n	8004476 <_printf_float+0x386>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	07da      	lsls	r2, r3, #31
 8004404:	d437      	bmi.n	8004476 <_printf_float+0x386>
 8004406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004408:	ebaa 0903 	sub.w	r9, sl, r3
 800440c:	9b06      	ldr	r3, [sp, #24]
 800440e:	ebaa 0303 	sub.w	r3, sl, r3
 8004412:	4599      	cmp	r9, r3
 8004414:	bfa8      	it	ge
 8004416:	4699      	movge	r9, r3
 8004418:	f1b9 0f00 	cmp.w	r9, #0
 800441c:	dc33      	bgt.n	8004486 <_printf_float+0x396>
 800441e:	f04f 0800 	mov.w	r8, #0
 8004422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004426:	f104 0b1a 	add.w	fp, r4, #26
 800442a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800442c:	ebaa 0303 	sub.w	r3, sl, r3
 8004430:	eba3 0309 	sub.w	r3, r3, r9
 8004434:	4543      	cmp	r3, r8
 8004436:	f77f af79 	ble.w	800432c <_printf_float+0x23c>
 800443a:	2301      	movs	r3, #1
 800443c:	465a      	mov	r2, fp
 800443e:	4631      	mov	r1, r6
 8004440:	4628      	mov	r0, r5
 8004442:	47b8      	blx	r7
 8004444:	3001      	adds	r0, #1
 8004446:	f43f aeae 	beq.w	80041a6 <_printf_float+0xb6>
 800444a:	f108 0801 	add.w	r8, r8, #1
 800444e:	e7ec      	b.n	800442a <_printf_float+0x33a>
 8004450:	4642      	mov	r2, r8
 8004452:	4631      	mov	r1, r6
 8004454:	4628      	mov	r0, r5
 8004456:	47b8      	blx	r7
 8004458:	3001      	adds	r0, #1
 800445a:	d1c2      	bne.n	80043e2 <_printf_float+0x2f2>
 800445c:	e6a3      	b.n	80041a6 <_printf_float+0xb6>
 800445e:	2301      	movs	r3, #1
 8004460:	4631      	mov	r1, r6
 8004462:	4628      	mov	r0, r5
 8004464:	9206      	str	r2, [sp, #24]
 8004466:	47b8      	blx	r7
 8004468:	3001      	adds	r0, #1
 800446a:	f43f ae9c 	beq.w	80041a6 <_printf_float+0xb6>
 800446e:	9a06      	ldr	r2, [sp, #24]
 8004470:	f10b 0b01 	add.w	fp, fp, #1
 8004474:	e7bb      	b.n	80043ee <_printf_float+0x2fe>
 8004476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800447a:	4631      	mov	r1, r6
 800447c:	4628      	mov	r0, r5
 800447e:	47b8      	blx	r7
 8004480:	3001      	adds	r0, #1
 8004482:	d1c0      	bne.n	8004406 <_printf_float+0x316>
 8004484:	e68f      	b.n	80041a6 <_printf_float+0xb6>
 8004486:	9a06      	ldr	r2, [sp, #24]
 8004488:	464b      	mov	r3, r9
 800448a:	4442      	add	r2, r8
 800448c:	4631      	mov	r1, r6
 800448e:	4628      	mov	r0, r5
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	d1c3      	bne.n	800441e <_printf_float+0x32e>
 8004496:	e686      	b.n	80041a6 <_printf_float+0xb6>
 8004498:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800449c:	f1ba 0f01 	cmp.w	sl, #1
 80044a0:	dc01      	bgt.n	80044a6 <_printf_float+0x3b6>
 80044a2:	07db      	lsls	r3, r3, #31
 80044a4:	d536      	bpl.n	8004514 <_printf_float+0x424>
 80044a6:	2301      	movs	r3, #1
 80044a8:	4642      	mov	r2, r8
 80044aa:	4631      	mov	r1, r6
 80044ac:	4628      	mov	r0, r5
 80044ae:	47b8      	blx	r7
 80044b0:	3001      	adds	r0, #1
 80044b2:	f43f ae78 	beq.w	80041a6 <_printf_float+0xb6>
 80044b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044ba:	4631      	mov	r1, r6
 80044bc:	4628      	mov	r0, r5
 80044be:	47b8      	blx	r7
 80044c0:	3001      	adds	r0, #1
 80044c2:	f43f ae70 	beq.w	80041a6 <_printf_float+0xb6>
 80044c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044ca:	2200      	movs	r2, #0
 80044cc:	2300      	movs	r3, #0
 80044ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044d2:	f7fc fb01 	bl	8000ad8 <__aeabi_dcmpeq>
 80044d6:	b9c0      	cbnz	r0, 800450a <_printf_float+0x41a>
 80044d8:	4653      	mov	r3, sl
 80044da:	f108 0201 	add.w	r2, r8, #1
 80044de:	4631      	mov	r1, r6
 80044e0:	4628      	mov	r0, r5
 80044e2:	47b8      	blx	r7
 80044e4:	3001      	adds	r0, #1
 80044e6:	d10c      	bne.n	8004502 <_printf_float+0x412>
 80044e8:	e65d      	b.n	80041a6 <_printf_float+0xb6>
 80044ea:	2301      	movs	r3, #1
 80044ec:	465a      	mov	r2, fp
 80044ee:	4631      	mov	r1, r6
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b8      	blx	r7
 80044f4:	3001      	adds	r0, #1
 80044f6:	f43f ae56 	beq.w	80041a6 <_printf_float+0xb6>
 80044fa:	f108 0801 	add.w	r8, r8, #1
 80044fe:	45d0      	cmp	r8, sl
 8004500:	dbf3      	blt.n	80044ea <_printf_float+0x3fa>
 8004502:	464b      	mov	r3, r9
 8004504:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004508:	e6df      	b.n	80042ca <_printf_float+0x1da>
 800450a:	f04f 0800 	mov.w	r8, #0
 800450e:	f104 0b1a 	add.w	fp, r4, #26
 8004512:	e7f4      	b.n	80044fe <_printf_float+0x40e>
 8004514:	2301      	movs	r3, #1
 8004516:	4642      	mov	r2, r8
 8004518:	e7e1      	b.n	80044de <_printf_float+0x3ee>
 800451a:	2301      	movs	r3, #1
 800451c:	464a      	mov	r2, r9
 800451e:	4631      	mov	r1, r6
 8004520:	4628      	mov	r0, r5
 8004522:	47b8      	blx	r7
 8004524:	3001      	adds	r0, #1
 8004526:	f43f ae3e 	beq.w	80041a6 <_printf_float+0xb6>
 800452a:	f108 0801 	add.w	r8, r8, #1
 800452e:	68e3      	ldr	r3, [r4, #12]
 8004530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004532:	1a5b      	subs	r3, r3, r1
 8004534:	4543      	cmp	r3, r8
 8004536:	dcf0      	bgt.n	800451a <_printf_float+0x42a>
 8004538:	e6fc      	b.n	8004334 <_printf_float+0x244>
 800453a:	f04f 0800 	mov.w	r8, #0
 800453e:	f104 0919 	add.w	r9, r4, #25
 8004542:	e7f4      	b.n	800452e <_printf_float+0x43e>

08004544 <_printf_common>:
 8004544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004548:	4616      	mov	r6, r2
 800454a:	4698      	mov	r8, r3
 800454c:	688a      	ldr	r2, [r1, #8]
 800454e:	690b      	ldr	r3, [r1, #16]
 8004550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004554:	4293      	cmp	r3, r2
 8004556:	bfb8      	it	lt
 8004558:	4613      	movlt	r3, r2
 800455a:	6033      	str	r3, [r6, #0]
 800455c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004560:	4607      	mov	r7, r0
 8004562:	460c      	mov	r4, r1
 8004564:	b10a      	cbz	r2, 800456a <_printf_common+0x26>
 8004566:	3301      	adds	r3, #1
 8004568:	6033      	str	r3, [r6, #0]
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	0699      	lsls	r1, r3, #26
 800456e:	bf42      	ittt	mi
 8004570:	6833      	ldrmi	r3, [r6, #0]
 8004572:	3302      	addmi	r3, #2
 8004574:	6033      	strmi	r3, [r6, #0]
 8004576:	6825      	ldr	r5, [r4, #0]
 8004578:	f015 0506 	ands.w	r5, r5, #6
 800457c:	d106      	bne.n	800458c <_printf_common+0x48>
 800457e:	f104 0a19 	add.w	sl, r4, #25
 8004582:	68e3      	ldr	r3, [r4, #12]
 8004584:	6832      	ldr	r2, [r6, #0]
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	42ab      	cmp	r3, r5
 800458a:	dc26      	bgt.n	80045da <_printf_common+0x96>
 800458c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	3b00      	subs	r3, #0
 8004594:	bf18      	it	ne
 8004596:	2301      	movne	r3, #1
 8004598:	0692      	lsls	r2, r2, #26
 800459a:	d42b      	bmi.n	80045f4 <_printf_common+0xb0>
 800459c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045a0:	4641      	mov	r1, r8
 80045a2:	4638      	mov	r0, r7
 80045a4:	47c8      	blx	r9
 80045a6:	3001      	adds	r0, #1
 80045a8:	d01e      	beq.n	80045e8 <_printf_common+0xa4>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	6922      	ldr	r2, [r4, #16]
 80045ae:	f003 0306 	and.w	r3, r3, #6
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	bf02      	ittt	eq
 80045b6:	68e5      	ldreq	r5, [r4, #12]
 80045b8:	6833      	ldreq	r3, [r6, #0]
 80045ba:	1aed      	subeq	r5, r5, r3
 80045bc:	68a3      	ldr	r3, [r4, #8]
 80045be:	bf0c      	ite	eq
 80045c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045c4:	2500      	movne	r5, #0
 80045c6:	4293      	cmp	r3, r2
 80045c8:	bfc4      	itt	gt
 80045ca:	1a9b      	subgt	r3, r3, r2
 80045cc:	18ed      	addgt	r5, r5, r3
 80045ce:	2600      	movs	r6, #0
 80045d0:	341a      	adds	r4, #26
 80045d2:	42b5      	cmp	r5, r6
 80045d4:	d11a      	bne.n	800460c <_printf_common+0xc8>
 80045d6:	2000      	movs	r0, #0
 80045d8:	e008      	b.n	80045ec <_printf_common+0xa8>
 80045da:	2301      	movs	r3, #1
 80045dc:	4652      	mov	r2, sl
 80045de:	4641      	mov	r1, r8
 80045e0:	4638      	mov	r0, r7
 80045e2:	47c8      	blx	r9
 80045e4:	3001      	adds	r0, #1
 80045e6:	d103      	bne.n	80045f0 <_printf_common+0xac>
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f0:	3501      	adds	r5, #1
 80045f2:	e7c6      	b.n	8004582 <_printf_common+0x3e>
 80045f4:	18e1      	adds	r1, r4, r3
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	2030      	movs	r0, #48	@ 0x30
 80045fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045fe:	4422      	add	r2, r4
 8004600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004608:	3302      	adds	r3, #2
 800460a:	e7c7      	b.n	800459c <_printf_common+0x58>
 800460c:	2301      	movs	r3, #1
 800460e:	4622      	mov	r2, r4
 8004610:	4641      	mov	r1, r8
 8004612:	4638      	mov	r0, r7
 8004614:	47c8      	blx	r9
 8004616:	3001      	adds	r0, #1
 8004618:	d0e6      	beq.n	80045e8 <_printf_common+0xa4>
 800461a:	3601      	adds	r6, #1
 800461c:	e7d9      	b.n	80045d2 <_printf_common+0x8e>
	...

08004620 <_printf_i>:
 8004620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	7e0f      	ldrb	r7, [r1, #24]
 8004626:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004628:	2f78      	cmp	r7, #120	@ 0x78
 800462a:	4691      	mov	r9, r2
 800462c:	4680      	mov	r8, r0
 800462e:	460c      	mov	r4, r1
 8004630:	469a      	mov	sl, r3
 8004632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004636:	d807      	bhi.n	8004648 <_printf_i+0x28>
 8004638:	2f62      	cmp	r7, #98	@ 0x62
 800463a:	d80a      	bhi.n	8004652 <_printf_i+0x32>
 800463c:	2f00      	cmp	r7, #0
 800463e:	f000 80d2 	beq.w	80047e6 <_printf_i+0x1c6>
 8004642:	2f58      	cmp	r7, #88	@ 0x58
 8004644:	f000 80b9 	beq.w	80047ba <_printf_i+0x19a>
 8004648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800464c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004650:	e03a      	b.n	80046c8 <_printf_i+0xa8>
 8004652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004656:	2b15      	cmp	r3, #21
 8004658:	d8f6      	bhi.n	8004648 <_printf_i+0x28>
 800465a:	a101      	add	r1, pc, #4	@ (adr r1, 8004660 <_printf_i+0x40>)
 800465c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004660:	080046b9 	.word	0x080046b9
 8004664:	080046cd 	.word	0x080046cd
 8004668:	08004649 	.word	0x08004649
 800466c:	08004649 	.word	0x08004649
 8004670:	08004649 	.word	0x08004649
 8004674:	08004649 	.word	0x08004649
 8004678:	080046cd 	.word	0x080046cd
 800467c:	08004649 	.word	0x08004649
 8004680:	08004649 	.word	0x08004649
 8004684:	08004649 	.word	0x08004649
 8004688:	08004649 	.word	0x08004649
 800468c:	080047cd 	.word	0x080047cd
 8004690:	080046f7 	.word	0x080046f7
 8004694:	08004787 	.word	0x08004787
 8004698:	08004649 	.word	0x08004649
 800469c:	08004649 	.word	0x08004649
 80046a0:	080047ef 	.word	0x080047ef
 80046a4:	08004649 	.word	0x08004649
 80046a8:	080046f7 	.word	0x080046f7
 80046ac:	08004649 	.word	0x08004649
 80046b0:	08004649 	.word	0x08004649
 80046b4:	0800478f 	.word	0x0800478f
 80046b8:	6833      	ldr	r3, [r6, #0]
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6032      	str	r2, [r6, #0]
 80046c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046c8:	2301      	movs	r3, #1
 80046ca:	e09d      	b.n	8004808 <_printf_i+0x1e8>
 80046cc:	6833      	ldr	r3, [r6, #0]
 80046ce:	6820      	ldr	r0, [r4, #0]
 80046d0:	1d19      	adds	r1, r3, #4
 80046d2:	6031      	str	r1, [r6, #0]
 80046d4:	0606      	lsls	r6, r0, #24
 80046d6:	d501      	bpl.n	80046dc <_printf_i+0xbc>
 80046d8:	681d      	ldr	r5, [r3, #0]
 80046da:	e003      	b.n	80046e4 <_printf_i+0xc4>
 80046dc:	0645      	lsls	r5, r0, #25
 80046de:	d5fb      	bpl.n	80046d8 <_printf_i+0xb8>
 80046e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	da03      	bge.n	80046f0 <_printf_i+0xd0>
 80046e8:	232d      	movs	r3, #45	@ 0x2d
 80046ea:	426d      	negs	r5, r5
 80046ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046f0:	4859      	ldr	r0, [pc, #356]	@ (8004858 <_printf_i+0x238>)
 80046f2:	230a      	movs	r3, #10
 80046f4:	e011      	b.n	800471a <_printf_i+0xfa>
 80046f6:	6821      	ldr	r1, [r4, #0]
 80046f8:	6833      	ldr	r3, [r6, #0]
 80046fa:	0608      	lsls	r0, r1, #24
 80046fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004700:	d402      	bmi.n	8004708 <_printf_i+0xe8>
 8004702:	0649      	lsls	r1, r1, #25
 8004704:	bf48      	it	mi
 8004706:	b2ad      	uxthmi	r5, r5
 8004708:	2f6f      	cmp	r7, #111	@ 0x6f
 800470a:	4853      	ldr	r0, [pc, #332]	@ (8004858 <_printf_i+0x238>)
 800470c:	6033      	str	r3, [r6, #0]
 800470e:	bf14      	ite	ne
 8004710:	230a      	movne	r3, #10
 8004712:	2308      	moveq	r3, #8
 8004714:	2100      	movs	r1, #0
 8004716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800471a:	6866      	ldr	r6, [r4, #4]
 800471c:	60a6      	str	r6, [r4, #8]
 800471e:	2e00      	cmp	r6, #0
 8004720:	bfa2      	ittt	ge
 8004722:	6821      	ldrge	r1, [r4, #0]
 8004724:	f021 0104 	bicge.w	r1, r1, #4
 8004728:	6021      	strge	r1, [r4, #0]
 800472a:	b90d      	cbnz	r5, 8004730 <_printf_i+0x110>
 800472c:	2e00      	cmp	r6, #0
 800472e:	d04b      	beq.n	80047c8 <_printf_i+0x1a8>
 8004730:	4616      	mov	r6, r2
 8004732:	fbb5 f1f3 	udiv	r1, r5, r3
 8004736:	fb03 5711 	mls	r7, r3, r1, r5
 800473a:	5dc7      	ldrb	r7, [r0, r7]
 800473c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004740:	462f      	mov	r7, r5
 8004742:	42bb      	cmp	r3, r7
 8004744:	460d      	mov	r5, r1
 8004746:	d9f4      	bls.n	8004732 <_printf_i+0x112>
 8004748:	2b08      	cmp	r3, #8
 800474a:	d10b      	bne.n	8004764 <_printf_i+0x144>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	07df      	lsls	r7, r3, #31
 8004750:	d508      	bpl.n	8004764 <_printf_i+0x144>
 8004752:	6923      	ldr	r3, [r4, #16]
 8004754:	6861      	ldr	r1, [r4, #4]
 8004756:	4299      	cmp	r1, r3
 8004758:	bfde      	ittt	le
 800475a:	2330      	movle	r3, #48	@ 0x30
 800475c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004760:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004764:	1b92      	subs	r2, r2, r6
 8004766:	6122      	str	r2, [r4, #16]
 8004768:	f8cd a000 	str.w	sl, [sp]
 800476c:	464b      	mov	r3, r9
 800476e:	aa03      	add	r2, sp, #12
 8004770:	4621      	mov	r1, r4
 8004772:	4640      	mov	r0, r8
 8004774:	f7ff fee6 	bl	8004544 <_printf_common>
 8004778:	3001      	adds	r0, #1
 800477a:	d14a      	bne.n	8004812 <_printf_i+0x1f2>
 800477c:	f04f 30ff 	mov.w	r0, #4294967295
 8004780:	b004      	add	sp, #16
 8004782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	f043 0320 	orr.w	r3, r3, #32
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	4833      	ldr	r0, [pc, #204]	@ (800485c <_printf_i+0x23c>)
 8004790:	2778      	movs	r7, #120	@ 0x78
 8004792:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	6831      	ldr	r1, [r6, #0]
 800479a:	061f      	lsls	r7, r3, #24
 800479c:	f851 5b04 	ldr.w	r5, [r1], #4
 80047a0:	d402      	bmi.n	80047a8 <_printf_i+0x188>
 80047a2:	065f      	lsls	r7, r3, #25
 80047a4:	bf48      	it	mi
 80047a6:	b2ad      	uxthmi	r5, r5
 80047a8:	6031      	str	r1, [r6, #0]
 80047aa:	07d9      	lsls	r1, r3, #31
 80047ac:	bf44      	itt	mi
 80047ae:	f043 0320 	orrmi.w	r3, r3, #32
 80047b2:	6023      	strmi	r3, [r4, #0]
 80047b4:	b11d      	cbz	r5, 80047be <_printf_i+0x19e>
 80047b6:	2310      	movs	r3, #16
 80047b8:	e7ac      	b.n	8004714 <_printf_i+0xf4>
 80047ba:	4827      	ldr	r0, [pc, #156]	@ (8004858 <_printf_i+0x238>)
 80047bc:	e7e9      	b.n	8004792 <_printf_i+0x172>
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	f023 0320 	bic.w	r3, r3, #32
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	e7f6      	b.n	80047b6 <_printf_i+0x196>
 80047c8:	4616      	mov	r6, r2
 80047ca:	e7bd      	b.n	8004748 <_printf_i+0x128>
 80047cc:	6833      	ldr	r3, [r6, #0]
 80047ce:	6825      	ldr	r5, [r4, #0]
 80047d0:	6961      	ldr	r1, [r4, #20]
 80047d2:	1d18      	adds	r0, r3, #4
 80047d4:	6030      	str	r0, [r6, #0]
 80047d6:	062e      	lsls	r6, r5, #24
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	d501      	bpl.n	80047e0 <_printf_i+0x1c0>
 80047dc:	6019      	str	r1, [r3, #0]
 80047de:	e002      	b.n	80047e6 <_printf_i+0x1c6>
 80047e0:	0668      	lsls	r0, r5, #25
 80047e2:	d5fb      	bpl.n	80047dc <_printf_i+0x1bc>
 80047e4:	8019      	strh	r1, [r3, #0]
 80047e6:	2300      	movs	r3, #0
 80047e8:	6123      	str	r3, [r4, #16]
 80047ea:	4616      	mov	r6, r2
 80047ec:	e7bc      	b.n	8004768 <_printf_i+0x148>
 80047ee:	6833      	ldr	r3, [r6, #0]
 80047f0:	1d1a      	adds	r2, r3, #4
 80047f2:	6032      	str	r2, [r6, #0]
 80047f4:	681e      	ldr	r6, [r3, #0]
 80047f6:	6862      	ldr	r2, [r4, #4]
 80047f8:	2100      	movs	r1, #0
 80047fa:	4630      	mov	r0, r6
 80047fc:	f7fb fcf0 	bl	80001e0 <memchr>
 8004800:	b108      	cbz	r0, 8004806 <_printf_i+0x1e6>
 8004802:	1b80      	subs	r0, r0, r6
 8004804:	6060      	str	r0, [r4, #4]
 8004806:	6863      	ldr	r3, [r4, #4]
 8004808:	6123      	str	r3, [r4, #16]
 800480a:	2300      	movs	r3, #0
 800480c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004810:	e7aa      	b.n	8004768 <_printf_i+0x148>
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	4632      	mov	r2, r6
 8004816:	4649      	mov	r1, r9
 8004818:	4640      	mov	r0, r8
 800481a:	47d0      	blx	sl
 800481c:	3001      	adds	r0, #1
 800481e:	d0ad      	beq.n	800477c <_printf_i+0x15c>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	079b      	lsls	r3, r3, #30
 8004824:	d413      	bmi.n	800484e <_printf_i+0x22e>
 8004826:	68e0      	ldr	r0, [r4, #12]
 8004828:	9b03      	ldr	r3, [sp, #12]
 800482a:	4298      	cmp	r0, r3
 800482c:	bfb8      	it	lt
 800482e:	4618      	movlt	r0, r3
 8004830:	e7a6      	b.n	8004780 <_printf_i+0x160>
 8004832:	2301      	movs	r3, #1
 8004834:	4632      	mov	r2, r6
 8004836:	4649      	mov	r1, r9
 8004838:	4640      	mov	r0, r8
 800483a:	47d0      	blx	sl
 800483c:	3001      	adds	r0, #1
 800483e:	d09d      	beq.n	800477c <_printf_i+0x15c>
 8004840:	3501      	adds	r5, #1
 8004842:	68e3      	ldr	r3, [r4, #12]
 8004844:	9903      	ldr	r1, [sp, #12]
 8004846:	1a5b      	subs	r3, r3, r1
 8004848:	42ab      	cmp	r3, r5
 800484a:	dcf2      	bgt.n	8004832 <_printf_i+0x212>
 800484c:	e7eb      	b.n	8004826 <_printf_i+0x206>
 800484e:	2500      	movs	r5, #0
 8004850:	f104 0619 	add.w	r6, r4, #25
 8004854:	e7f5      	b.n	8004842 <_printf_i+0x222>
 8004856:	bf00      	nop
 8004858:	08007c8b 	.word	0x08007c8b
 800485c:	08007c9c 	.word	0x08007c9c

08004860 <std>:
 8004860:	2300      	movs	r3, #0
 8004862:	b510      	push	{r4, lr}
 8004864:	4604      	mov	r4, r0
 8004866:	e9c0 3300 	strd	r3, r3, [r0]
 800486a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800486e:	6083      	str	r3, [r0, #8]
 8004870:	8181      	strh	r1, [r0, #12]
 8004872:	6643      	str	r3, [r0, #100]	@ 0x64
 8004874:	81c2      	strh	r2, [r0, #14]
 8004876:	6183      	str	r3, [r0, #24]
 8004878:	4619      	mov	r1, r3
 800487a:	2208      	movs	r2, #8
 800487c:	305c      	adds	r0, #92	@ 0x5c
 800487e:	f000 f914 	bl	8004aaa <memset>
 8004882:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <std+0x58>)
 8004884:	6263      	str	r3, [r4, #36]	@ 0x24
 8004886:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <std+0x5c>)
 8004888:	62a3      	str	r3, [r4, #40]	@ 0x28
 800488a:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <std+0x60>)
 800488c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <std+0x64>)
 8004890:	6323      	str	r3, [r4, #48]	@ 0x30
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <std+0x68>)
 8004894:	6224      	str	r4, [r4, #32]
 8004896:	429c      	cmp	r4, r3
 8004898:	d006      	beq.n	80048a8 <std+0x48>
 800489a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800489e:	4294      	cmp	r4, r2
 80048a0:	d002      	beq.n	80048a8 <std+0x48>
 80048a2:	33d0      	adds	r3, #208	@ 0xd0
 80048a4:	429c      	cmp	r4, r3
 80048a6:	d105      	bne.n	80048b4 <std+0x54>
 80048a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b0:	f000 b978 	b.w	8004ba4 <__retarget_lock_init_recursive>
 80048b4:	bd10      	pop	{r4, pc}
 80048b6:	bf00      	nop
 80048b8:	08004a25 	.word	0x08004a25
 80048bc:	08004a47 	.word	0x08004a47
 80048c0:	08004a7f 	.word	0x08004a7f
 80048c4:	08004aa3 	.word	0x08004aa3
 80048c8:	20000824 	.word	0x20000824

080048cc <stdio_exit_handler>:
 80048cc:	4a02      	ldr	r2, [pc, #8]	@ (80048d8 <stdio_exit_handler+0xc>)
 80048ce:	4903      	ldr	r1, [pc, #12]	@ (80048dc <stdio_exit_handler+0x10>)
 80048d0:	4803      	ldr	r0, [pc, #12]	@ (80048e0 <stdio_exit_handler+0x14>)
 80048d2:	f000 b869 	b.w	80049a8 <_fwalk_sglue>
 80048d6:	bf00      	nop
 80048d8:	20000014 	.word	0x20000014
 80048dc:	08006505 	.word	0x08006505
 80048e0:	20000024 	.word	0x20000024

080048e4 <cleanup_stdio>:
 80048e4:	6841      	ldr	r1, [r0, #4]
 80048e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <cleanup_stdio+0x34>)
 80048e8:	4299      	cmp	r1, r3
 80048ea:	b510      	push	{r4, lr}
 80048ec:	4604      	mov	r4, r0
 80048ee:	d001      	beq.n	80048f4 <cleanup_stdio+0x10>
 80048f0:	f001 fe08 	bl	8006504 <_fflush_r>
 80048f4:	68a1      	ldr	r1, [r4, #8]
 80048f6:	4b09      	ldr	r3, [pc, #36]	@ (800491c <cleanup_stdio+0x38>)
 80048f8:	4299      	cmp	r1, r3
 80048fa:	d002      	beq.n	8004902 <cleanup_stdio+0x1e>
 80048fc:	4620      	mov	r0, r4
 80048fe:	f001 fe01 	bl	8006504 <_fflush_r>
 8004902:	68e1      	ldr	r1, [r4, #12]
 8004904:	4b06      	ldr	r3, [pc, #24]	@ (8004920 <cleanup_stdio+0x3c>)
 8004906:	4299      	cmp	r1, r3
 8004908:	d004      	beq.n	8004914 <cleanup_stdio+0x30>
 800490a:	4620      	mov	r0, r4
 800490c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004910:	f001 bdf8 	b.w	8006504 <_fflush_r>
 8004914:	bd10      	pop	{r4, pc}
 8004916:	bf00      	nop
 8004918:	20000824 	.word	0x20000824
 800491c:	2000088c 	.word	0x2000088c
 8004920:	200008f4 	.word	0x200008f4

08004924 <global_stdio_init.part.0>:
 8004924:	b510      	push	{r4, lr}
 8004926:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <global_stdio_init.part.0+0x30>)
 8004928:	4c0b      	ldr	r4, [pc, #44]	@ (8004958 <global_stdio_init.part.0+0x34>)
 800492a:	4a0c      	ldr	r2, [pc, #48]	@ (800495c <global_stdio_init.part.0+0x38>)
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	4620      	mov	r0, r4
 8004930:	2200      	movs	r2, #0
 8004932:	2104      	movs	r1, #4
 8004934:	f7ff ff94 	bl	8004860 <std>
 8004938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800493c:	2201      	movs	r2, #1
 800493e:	2109      	movs	r1, #9
 8004940:	f7ff ff8e 	bl	8004860 <std>
 8004944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004948:	2202      	movs	r2, #2
 800494a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800494e:	2112      	movs	r1, #18
 8004950:	f7ff bf86 	b.w	8004860 <std>
 8004954:	2000095c 	.word	0x2000095c
 8004958:	20000824 	.word	0x20000824
 800495c:	080048cd 	.word	0x080048cd

08004960 <__sfp_lock_acquire>:
 8004960:	4801      	ldr	r0, [pc, #4]	@ (8004968 <__sfp_lock_acquire+0x8>)
 8004962:	f000 b920 	b.w	8004ba6 <__retarget_lock_acquire_recursive>
 8004966:	bf00      	nop
 8004968:	20000965 	.word	0x20000965

0800496c <__sfp_lock_release>:
 800496c:	4801      	ldr	r0, [pc, #4]	@ (8004974 <__sfp_lock_release+0x8>)
 800496e:	f000 b91b 	b.w	8004ba8 <__retarget_lock_release_recursive>
 8004972:	bf00      	nop
 8004974:	20000965 	.word	0x20000965

08004978 <__sinit>:
 8004978:	b510      	push	{r4, lr}
 800497a:	4604      	mov	r4, r0
 800497c:	f7ff fff0 	bl	8004960 <__sfp_lock_acquire>
 8004980:	6a23      	ldr	r3, [r4, #32]
 8004982:	b11b      	cbz	r3, 800498c <__sinit+0x14>
 8004984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004988:	f7ff bff0 	b.w	800496c <__sfp_lock_release>
 800498c:	4b04      	ldr	r3, [pc, #16]	@ (80049a0 <__sinit+0x28>)
 800498e:	6223      	str	r3, [r4, #32]
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <__sinit+0x2c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f5      	bne.n	8004984 <__sinit+0xc>
 8004998:	f7ff ffc4 	bl	8004924 <global_stdio_init.part.0>
 800499c:	e7f2      	b.n	8004984 <__sinit+0xc>
 800499e:	bf00      	nop
 80049a0:	080048e5 	.word	0x080048e5
 80049a4:	2000095c 	.word	0x2000095c

080049a8 <_fwalk_sglue>:
 80049a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ac:	4607      	mov	r7, r0
 80049ae:	4688      	mov	r8, r1
 80049b0:	4614      	mov	r4, r2
 80049b2:	2600      	movs	r6, #0
 80049b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049b8:	f1b9 0901 	subs.w	r9, r9, #1
 80049bc:	d505      	bpl.n	80049ca <_fwalk_sglue+0x22>
 80049be:	6824      	ldr	r4, [r4, #0]
 80049c0:	2c00      	cmp	r4, #0
 80049c2:	d1f7      	bne.n	80049b4 <_fwalk_sglue+0xc>
 80049c4:	4630      	mov	r0, r6
 80049c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ca:	89ab      	ldrh	r3, [r5, #12]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d907      	bls.n	80049e0 <_fwalk_sglue+0x38>
 80049d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049d4:	3301      	adds	r3, #1
 80049d6:	d003      	beq.n	80049e0 <_fwalk_sglue+0x38>
 80049d8:	4629      	mov	r1, r5
 80049da:	4638      	mov	r0, r7
 80049dc:	47c0      	blx	r8
 80049de:	4306      	orrs	r6, r0
 80049e0:	3568      	adds	r5, #104	@ 0x68
 80049e2:	e7e9      	b.n	80049b8 <_fwalk_sglue+0x10>

080049e4 <siprintf>:
 80049e4:	b40e      	push	{r1, r2, r3}
 80049e6:	b500      	push	{lr}
 80049e8:	b09c      	sub	sp, #112	@ 0x70
 80049ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80049ec:	9002      	str	r0, [sp, #8]
 80049ee:	9006      	str	r0, [sp, #24]
 80049f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049f4:	4809      	ldr	r0, [pc, #36]	@ (8004a1c <siprintf+0x38>)
 80049f6:	9107      	str	r1, [sp, #28]
 80049f8:	9104      	str	r1, [sp, #16]
 80049fa:	4909      	ldr	r1, [pc, #36]	@ (8004a20 <siprintf+0x3c>)
 80049fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a00:	9105      	str	r1, [sp, #20]
 8004a02:	6800      	ldr	r0, [r0, #0]
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	a902      	add	r1, sp, #8
 8004a08:	f001 fbfc 	bl	8006204 <_svfiprintf_r>
 8004a0c:	9b02      	ldr	r3, [sp, #8]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	b01c      	add	sp, #112	@ 0x70
 8004a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a18:	b003      	add	sp, #12
 8004a1a:	4770      	bx	lr
 8004a1c:	20000020 	.word	0x20000020
 8004a20:	ffff0208 	.word	0xffff0208

08004a24 <__sread>:
 8004a24:	b510      	push	{r4, lr}
 8004a26:	460c      	mov	r4, r1
 8004a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2c:	f000 f86c 	bl	8004b08 <_read_r>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	bfab      	itete	ge
 8004a34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a36:	89a3      	ldrhlt	r3, [r4, #12]
 8004a38:	181b      	addge	r3, r3, r0
 8004a3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a3e:	bfac      	ite	ge
 8004a40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a42:	81a3      	strhlt	r3, [r4, #12]
 8004a44:	bd10      	pop	{r4, pc}

08004a46 <__swrite>:
 8004a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4a:	461f      	mov	r7, r3
 8004a4c:	898b      	ldrh	r3, [r1, #12]
 8004a4e:	05db      	lsls	r3, r3, #23
 8004a50:	4605      	mov	r5, r0
 8004a52:	460c      	mov	r4, r1
 8004a54:	4616      	mov	r6, r2
 8004a56:	d505      	bpl.n	8004a64 <__swrite+0x1e>
 8004a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f000 f840 	bl	8004ae4 <_lseek_r>
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a6e:	81a3      	strh	r3, [r4, #12]
 8004a70:	4632      	mov	r2, r6
 8004a72:	463b      	mov	r3, r7
 8004a74:	4628      	mov	r0, r5
 8004a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7a:	f000 b857 	b.w	8004b2c <_write_r>

08004a7e <__sseek>:
 8004a7e:	b510      	push	{r4, lr}
 8004a80:	460c      	mov	r4, r1
 8004a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a86:	f000 f82d 	bl	8004ae4 <_lseek_r>
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	bf15      	itete	ne
 8004a90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a9a:	81a3      	strheq	r3, [r4, #12]
 8004a9c:	bf18      	it	ne
 8004a9e:	81a3      	strhne	r3, [r4, #12]
 8004aa0:	bd10      	pop	{r4, pc}

08004aa2 <__sclose>:
 8004aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa6:	f000 b80d 	b.w	8004ac4 <_close_r>

08004aaa <memset>:
 8004aaa:	4402      	add	r2, r0
 8004aac:	4603      	mov	r3, r0
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d100      	bne.n	8004ab4 <memset+0xa>
 8004ab2:	4770      	bx	lr
 8004ab4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ab8:	e7f9      	b.n	8004aae <memset+0x4>
	...

08004abc <_localeconv_r>:
 8004abc:	4800      	ldr	r0, [pc, #0]	@ (8004ac0 <_localeconv_r+0x4>)
 8004abe:	4770      	bx	lr
 8004ac0:	20000160 	.word	0x20000160

08004ac4 <_close_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d06      	ldr	r5, [pc, #24]	@ (8004ae0 <_close_r+0x1c>)
 8004ac8:	2300      	movs	r3, #0
 8004aca:	4604      	mov	r4, r0
 8004acc:	4608      	mov	r0, r1
 8004ace:	602b      	str	r3, [r5, #0]
 8004ad0:	f7fd fb5a 	bl	8002188 <_close>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_close_r+0x1a>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_close_r+0x1a>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	20000960 	.word	0x20000960

08004ae4 <_lseek_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d07      	ldr	r5, [pc, #28]	@ (8004b04 <_lseek_r+0x20>)
 8004ae8:	4604      	mov	r4, r0
 8004aea:	4608      	mov	r0, r1
 8004aec:	4611      	mov	r1, r2
 8004aee:	2200      	movs	r2, #0
 8004af0:	602a      	str	r2, [r5, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7fd fb6f 	bl	80021d6 <_lseek>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d102      	bne.n	8004b02 <_lseek_r+0x1e>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	b103      	cbz	r3, 8004b02 <_lseek_r+0x1e>
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	20000960 	.word	0x20000960

08004b08 <_read_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4d07      	ldr	r5, [pc, #28]	@ (8004b28 <_read_r+0x20>)
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	4608      	mov	r0, r1
 8004b10:	4611      	mov	r1, r2
 8004b12:	2200      	movs	r2, #0
 8004b14:	602a      	str	r2, [r5, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f7fd fafd 	bl	8002116 <_read>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	d102      	bne.n	8004b26 <_read_r+0x1e>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	b103      	cbz	r3, 8004b26 <_read_r+0x1e>
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	20000960 	.word	0x20000960

08004b2c <_write_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4d07      	ldr	r5, [pc, #28]	@ (8004b4c <_write_r+0x20>)
 8004b30:	4604      	mov	r4, r0
 8004b32:	4608      	mov	r0, r1
 8004b34:	4611      	mov	r1, r2
 8004b36:	2200      	movs	r2, #0
 8004b38:	602a      	str	r2, [r5, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f7fd fb08 	bl	8002150 <_write>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d102      	bne.n	8004b4a <_write_r+0x1e>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	b103      	cbz	r3, 8004b4a <_write_r+0x1e>
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	20000960 	.word	0x20000960

08004b50 <__errno>:
 8004b50:	4b01      	ldr	r3, [pc, #4]	@ (8004b58 <__errno+0x8>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000020 	.word	0x20000020

08004b5c <__libc_init_array>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b94 <__libc_init_array+0x38>)
 8004b60:	4c0d      	ldr	r4, [pc, #52]	@ (8004b98 <__libc_init_array+0x3c>)
 8004b62:	1b64      	subs	r4, r4, r5
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	2600      	movs	r6, #0
 8004b68:	42a6      	cmp	r6, r4
 8004b6a:	d109      	bne.n	8004b80 <__libc_init_array+0x24>
 8004b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b9c <__libc_init_array+0x40>)
 8004b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ba0 <__libc_init_array+0x44>)
 8004b70:	f002 ffc4 	bl	8007afc <_init>
 8004b74:	1b64      	subs	r4, r4, r5
 8004b76:	10a4      	asrs	r4, r4, #2
 8004b78:	2600      	movs	r6, #0
 8004b7a:	42a6      	cmp	r6, r4
 8004b7c:	d105      	bne.n	8004b8a <__libc_init_array+0x2e>
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b84:	4798      	blx	r3
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7ee      	b.n	8004b68 <__libc_init_array+0xc>
 8004b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8e:	4798      	blx	r3
 8004b90:	3601      	adds	r6, #1
 8004b92:	e7f2      	b.n	8004b7a <__libc_init_array+0x1e>
 8004b94:	08007f20 	.word	0x08007f20
 8004b98:	08007f20 	.word	0x08007f20
 8004b9c:	08007f20 	.word	0x08007f20
 8004ba0:	08007f24 	.word	0x08007f24

08004ba4 <__retarget_lock_init_recursive>:
 8004ba4:	4770      	bx	lr

08004ba6 <__retarget_lock_acquire_recursive>:
 8004ba6:	4770      	bx	lr

08004ba8 <__retarget_lock_release_recursive>:
 8004ba8:	4770      	bx	lr

08004baa <quorem>:
 8004baa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bae:	6903      	ldr	r3, [r0, #16]
 8004bb0:	690c      	ldr	r4, [r1, #16]
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	4607      	mov	r7, r0
 8004bb6:	db7e      	blt.n	8004cb6 <quorem+0x10c>
 8004bb8:	3c01      	subs	r4, #1
 8004bba:	f101 0814 	add.w	r8, r1, #20
 8004bbe:	00a3      	lsls	r3, r4, #2
 8004bc0:	f100 0514 	add.w	r5, r0, #20
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004bdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004be0:	d32e      	bcc.n	8004c40 <quorem+0x96>
 8004be2:	f04f 0a00 	mov.w	sl, #0
 8004be6:	46c4      	mov	ip, r8
 8004be8:	46ae      	mov	lr, r5
 8004bea:	46d3      	mov	fp, sl
 8004bec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004bf0:	b298      	uxth	r0, r3
 8004bf2:	fb06 a000 	mla	r0, r6, r0, sl
 8004bf6:	0c02      	lsrs	r2, r0, #16
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	fb06 2303 	mla	r3, r6, r3, r2
 8004bfe:	f8de 2000 	ldr.w	r2, [lr]
 8004c02:	b280      	uxth	r0, r0
 8004c04:	b292      	uxth	r2, r2
 8004c06:	1a12      	subs	r2, r2, r0
 8004c08:	445a      	add	r2, fp
 8004c0a:	f8de 0000 	ldr.w	r0, [lr]
 8004c0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004c18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c22:	45e1      	cmp	r9, ip
 8004c24:	f84e 2b04 	str.w	r2, [lr], #4
 8004c28:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004c2c:	d2de      	bcs.n	8004bec <quorem+0x42>
 8004c2e:	9b00      	ldr	r3, [sp, #0]
 8004c30:	58eb      	ldr	r3, [r5, r3]
 8004c32:	b92b      	cbnz	r3, 8004c40 <quorem+0x96>
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	3b04      	subs	r3, #4
 8004c38:	429d      	cmp	r5, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	d32f      	bcc.n	8004c9e <quorem+0xf4>
 8004c3e:	613c      	str	r4, [r7, #16]
 8004c40:	4638      	mov	r0, r7
 8004c42:	f001 f97b 	bl	8005f3c <__mcmp>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	db25      	blt.n	8004c96 <quorem+0xec>
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c52:	f8d1 c000 	ldr.w	ip, [r1]
 8004c56:	fa1f fe82 	uxth.w	lr, r2
 8004c5a:	fa1f f38c 	uxth.w	r3, ip
 8004c5e:	eba3 030e 	sub.w	r3, r3, lr
 8004c62:	4403      	add	r3, r0
 8004c64:	0c12      	lsrs	r2, r2, #16
 8004c66:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004c6a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c74:	45c1      	cmp	r9, r8
 8004c76:	f841 3b04 	str.w	r3, [r1], #4
 8004c7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c7e:	d2e6      	bcs.n	8004c4e <quorem+0xa4>
 8004c80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c88:	b922      	cbnz	r2, 8004c94 <quorem+0xea>
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	429d      	cmp	r5, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	d30b      	bcc.n	8004caa <quorem+0x100>
 8004c92:	613c      	str	r4, [r7, #16]
 8004c94:	3601      	adds	r6, #1
 8004c96:	4630      	mov	r0, r6
 8004c98:	b003      	add	sp, #12
 8004c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	3b04      	subs	r3, #4
 8004ca2:	2a00      	cmp	r2, #0
 8004ca4:	d1cb      	bne.n	8004c3e <quorem+0x94>
 8004ca6:	3c01      	subs	r4, #1
 8004ca8:	e7c6      	b.n	8004c38 <quorem+0x8e>
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	3b04      	subs	r3, #4
 8004cae:	2a00      	cmp	r2, #0
 8004cb0:	d1ef      	bne.n	8004c92 <quorem+0xe8>
 8004cb2:	3c01      	subs	r4, #1
 8004cb4:	e7ea      	b.n	8004c8c <quorem+0xe2>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	e7ee      	b.n	8004c98 <quorem+0xee>
 8004cba:	0000      	movs	r0, r0
 8004cbc:	0000      	movs	r0, r0
	...

08004cc0 <_dtoa_r>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	69c7      	ldr	r7, [r0, #28]
 8004cc6:	b099      	sub	sp, #100	@ 0x64
 8004cc8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004ccc:	ec55 4b10 	vmov	r4, r5, d0
 8004cd0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004cd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cd4:	4683      	mov	fp, r0
 8004cd6:	920e      	str	r2, [sp, #56]	@ 0x38
 8004cd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004cda:	b97f      	cbnz	r7, 8004cfc <_dtoa_r+0x3c>
 8004cdc:	2010      	movs	r0, #16
 8004cde:	f000 fdfd 	bl	80058dc <malloc>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	f8cb 001c 	str.w	r0, [fp, #28]
 8004ce8:	b920      	cbnz	r0, 8004cf4 <_dtoa_r+0x34>
 8004cea:	4ba7      	ldr	r3, [pc, #668]	@ (8004f88 <_dtoa_r+0x2c8>)
 8004cec:	21ef      	movs	r1, #239	@ 0xef
 8004cee:	48a7      	ldr	r0, [pc, #668]	@ (8004f8c <_dtoa_r+0x2cc>)
 8004cf0:	f001 fc68 	bl	80065c4 <__assert_func>
 8004cf4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004cf8:	6007      	str	r7, [r0, #0]
 8004cfa:	60c7      	str	r7, [r0, #12]
 8004cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	b159      	cbz	r1, 8004d1c <_dtoa_r+0x5c>
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	604a      	str	r2, [r1, #4]
 8004d08:	2301      	movs	r3, #1
 8004d0a:	4093      	lsls	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
 8004d0e:	4658      	mov	r0, fp
 8004d10:	f000 feda 	bl	8005ac8 <_Bfree>
 8004d14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	1e2b      	subs	r3, r5, #0
 8004d1e:	bfb9      	ittee	lt
 8004d20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004d24:	9303      	strlt	r3, [sp, #12]
 8004d26:	2300      	movge	r3, #0
 8004d28:	6033      	strge	r3, [r6, #0]
 8004d2a:	9f03      	ldr	r7, [sp, #12]
 8004d2c:	4b98      	ldr	r3, [pc, #608]	@ (8004f90 <_dtoa_r+0x2d0>)
 8004d2e:	bfbc      	itt	lt
 8004d30:	2201      	movlt	r2, #1
 8004d32:	6032      	strlt	r2, [r6, #0]
 8004d34:	43bb      	bics	r3, r7
 8004d36:	d112      	bne.n	8004d5e <_dtoa_r+0x9e>
 8004d38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004d3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d44:	4323      	orrs	r3, r4
 8004d46:	f000 854d 	beq.w	80057e4 <_dtoa_r+0xb24>
 8004d4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d4c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004fa4 <_dtoa_r+0x2e4>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 854f 	beq.w	80057f4 <_dtoa_r+0xb34>
 8004d56:	f10a 0303 	add.w	r3, sl, #3
 8004d5a:	f000 bd49 	b.w	80057f0 <_dtoa_r+0xb30>
 8004d5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d62:	2200      	movs	r2, #0
 8004d64:	ec51 0b17 	vmov	r0, r1, d7
 8004d68:	2300      	movs	r3, #0
 8004d6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004d6e:	f7fb feb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d72:	4680      	mov	r8, r0
 8004d74:	b158      	cbz	r0, 8004d8e <_dtoa_r+0xce>
 8004d76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004d78:	2301      	movs	r3, #1
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d7e:	b113      	cbz	r3, 8004d86 <_dtoa_r+0xc6>
 8004d80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004d82:	4b84      	ldr	r3, [pc, #528]	@ (8004f94 <_dtoa_r+0x2d4>)
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004fa8 <_dtoa_r+0x2e8>
 8004d8a:	f000 bd33 	b.w	80057f4 <_dtoa_r+0xb34>
 8004d8e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004d92:	aa16      	add	r2, sp, #88	@ 0x58
 8004d94:	a917      	add	r1, sp, #92	@ 0x5c
 8004d96:	4658      	mov	r0, fp
 8004d98:	f001 f980 	bl	800609c <__d2b>
 8004d9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004da0:	4681      	mov	r9, r0
 8004da2:	2e00      	cmp	r6, #0
 8004da4:	d077      	beq.n	8004e96 <_dtoa_r+0x1d6>
 8004da6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004da8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004db4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004db8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004dbc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	4b74      	ldr	r3, [pc, #464]	@ (8004f98 <_dtoa_r+0x2d8>)
 8004dc6:	f7fb fa67 	bl	8000298 <__aeabi_dsub>
 8004dca:	a369      	add	r3, pc, #420	@ (adr r3, 8004f70 <_dtoa_r+0x2b0>)
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f7fb fc1a 	bl	8000608 <__aeabi_dmul>
 8004dd4:	a368      	add	r3, pc, #416	@ (adr r3, 8004f78 <_dtoa_r+0x2b8>)
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f7fb fa5f 	bl	800029c <__adddf3>
 8004dde:	4604      	mov	r4, r0
 8004de0:	4630      	mov	r0, r6
 8004de2:	460d      	mov	r5, r1
 8004de4:	f7fb fba6 	bl	8000534 <__aeabi_i2d>
 8004de8:	a365      	add	r3, pc, #404	@ (adr r3, 8004f80 <_dtoa_r+0x2c0>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	f7fb fc0b 	bl	8000608 <__aeabi_dmul>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4620      	mov	r0, r4
 8004df8:	4629      	mov	r1, r5
 8004dfa:	f7fb fa4f 	bl	800029c <__adddf3>
 8004dfe:	4604      	mov	r4, r0
 8004e00:	460d      	mov	r5, r1
 8004e02:	f7fb feb1 	bl	8000b68 <__aeabi_d2iz>
 8004e06:	2200      	movs	r2, #0
 8004e08:	4607      	mov	r7, r0
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	4629      	mov	r1, r5
 8004e10:	f7fb fe6c 	bl	8000aec <__aeabi_dcmplt>
 8004e14:	b140      	cbz	r0, 8004e28 <_dtoa_r+0x168>
 8004e16:	4638      	mov	r0, r7
 8004e18:	f7fb fb8c 	bl	8000534 <__aeabi_i2d>
 8004e1c:	4622      	mov	r2, r4
 8004e1e:	462b      	mov	r3, r5
 8004e20:	f7fb fe5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e24:	b900      	cbnz	r0, 8004e28 <_dtoa_r+0x168>
 8004e26:	3f01      	subs	r7, #1
 8004e28:	2f16      	cmp	r7, #22
 8004e2a:	d851      	bhi.n	8004ed0 <_dtoa_r+0x210>
 8004e2c:	4b5b      	ldr	r3, [pc, #364]	@ (8004f9c <_dtoa_r+0x2dc>)
 8004e2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e3a:	f7fb fe57 	bl	8000aec <__aeabi_dcmplt>
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d048      	beq.n	8004ed4 <_dtoa_r+0x214>
 8004e42:	3f01      	subs	r7, #1
 8004e44:	2300      	movs	r3, #0
 8004e46:	9312      	str	r3, [sp, #72]	@ 0x48
 8004e48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004e4a:	1b9b      	subs	r3, r3, r6
 8004e4c:	1e5a      	subs	r2, r3, #1
 8004e4e:	bf44      	itt	mi
 8004e50:	f1c3 0801 	rsbmi	r8, r3, #1
 8004e54:	2300      	movmi	r3, #0
 8004e56:	9208      	str	r2, [sp, #32]
 8004e58:	bf54      	ite	pl
 8004e5a:	f04f 0800 	movpl.w	r8, #0
 8004e5e:	9308      	strmi	r3, [sp, #32]
 8004e60:	2f00      	cmp	r7, #0
 8004e62:	db39      	blt.n	8004ed8 <_dtoa_r+0x218>
 8004e64:	9b08      	ldr	r3, [sp, #32]
 8004e66:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004e68:	443b      	add	r3, r7
 8004e6a:	9308      	str	r3, [sp, #32]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e72:	2b09      	cmp	r3, #9
 8004e74:	d864      	bhi.n	8004f40 <_dtoa_r+0x280>
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	bfc4      	itt	gt
 8004e7a:	3b04      	subgt	r3, #4
 8004e7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e80:	f1a3 0302 	sub.w	r3, r3, #2
 8004e84:	bfcc      	ite	gt
 8004e86:	2400      	movgt	r4, #0
 8004e88:	2401      	movle	r4, #1
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d863      	bhi.n	8004f56 <_dtoa_r+0x296>
 8004e8e:	e8df f003 	tbb	[pc, r3]
 8004e92:	372a      	.short	0x372a
 8004e94:	5535      	.short	0x5535
 8004e96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004e9a:	441e      	add	r6, r3
 8004e9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	bfc1      	itttt	gt
 8004ea4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004ea8:	409f      	lslgt	r7, r3
 8004eaa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004eae:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004eb2:	bfd6      	itet	le
 8004eb4:	f1c3 0320 	rsble	r3, r3, #32
 8004eb8:	ea47 0003 	orrgt.w	r0, r7, r3
 8004ebc:	fa04 f003 	lslle.w	r0, r4, r3
 8004ec0:	f7fb fb28 	bl	8000514 <__aeabi_ui2d>
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004eca:	3e01      	subs	r6, #1
 8004ecc:	9214      	str	r2, [sp, #80]	@ 0x50
 8004ece:	e777      	b.n	8004dc0 <_dtoa_r+0x100>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e7b8      	b.n	8004e46 <_dtoa_r+0x186>
 8004ed4:	9012      	str	r0, [sp, #72]	@ 0x48
 8004ed6:	e7b7      	b.n	8004e48 <_dtoa_r+0x188>
 8004ed8:	427b      	negs	r3, r7
 8004eda:	930a      	str	r3, [sp, #40]	@ 0x28
 8004edc:	2300      	movs	r3, #0
 8004ede:	eba8 0807 	sub.w	r8, r8, r7
 8004ee2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004ee4:	e7c4      	b.n	8004e70 <_dtoa_r+0x1b0>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	dc35      	bgt.n	8004f5c <_dtoa_r+0x29c>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	9307      	str	r3, [sp, #28]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004efa:	e00b      	b.n	8004f14 <_dtoa_r+0x254>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e7f3      	b.n	8004ee8 <_dtoa_r+0x228>
 8004f00:	2300      	movs	r3, #0
 8004f02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	9307      	str	r3, [sp, #28]
 8004f10:	bfb8      	it	lt
 8004f12:	2301      	movlt	r3, #1
 8004f14:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004f18:	2100      	movs	r1, #0
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	f102 0514 	add.w	r5, r2, #20
 8004f20:	429d      	cmp	r5, r3
 8004f22:	d91f      	bls.n	8004f64 <_dtoa_r+0x2a4>
 8004f24:	6041      	str	r1, [r0, #4]
 8004f26:	4658      	mov	r0, fp
 8004f28:	f000 fd8e 	bl	8005a48 <_Balloc>
 8004f2c:	4682      	mov	sl, r0
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d13c      	bne.n	8004fac <_dtoa_r+0x2ec>
 8004f32:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <_dtoa_r+0x2e0>)
 8004f34:	4602      	mov	r2, r0
 8004f36:	f240 11af 	movw	r1, #431	@ 0x1af
 8004f3a:	e6d8      	b.n	8004cee <_dtoa_r+0x2e>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e7e0      	b.n	8004f02 <_dtoa_r+0x242>
 8004f40:	2401      	movs	r4, #1
 8004f42:	2300      	movs	r3, #0
 8004f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	9307      	str	r3, [sp, #28]
 8004f50:	2200      	movs	r2, #0
 8004f52:	2312      	movs	r3, #18
 8004f54:	e7d0      	b.n	8004ef8 <_dtoa_r+0x238>
 8004f56:	2301      	movs	r3, #1
 8004f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f5a:	e7f5      	b.n	8004f48 <_dtoa_r+0x288>
 8004f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	9307      	str	r3, [sp, #28]
 8004f62:	e7d7      	b.n	8004f14 <_dtoa_r+0x254>
 8004f64:	3101      	adds	r1, #1
 8004f66:	0052      	lsls	r2, r2, #1
 8004f68:	e7d8      	b.n	8004f1c <_dtoa_r+0x25c>
 8004f6a:	bf00      	nop
 8004f6c:	f3af 8000 	nop.w
 8004f70:	636f4361 	.word	0x636f4361
 8004f74:	3fd287a7 	.word	0x3fd287a7
 8004f78:	8b60c8b3 	.word	0x8b60c8b3
 8004f7c:	3fc68a28 	.word	0x3fc68a28
 8004f80:	509f79fb 	.word	0x509f79fb
 8004f84:	3fd34413 	.word	0x3fd34413
 8004f88:	08007cba 	.word	0x08007cba
 8004f8c:	08007cd1 	.word	0x08007cd1
 8004f90:	7ff00000 	.word	0x7ff00000
 8004f94:	08007c8a 	.word	0x08007c8a
 8004f98:	3ff80000 	.word	0x3ff80000
 8004f9c:	08007dc8 	.word	0x08007dc8
 8004fa0:	08007d29 	.word	0x08007d29
 8004fa4:	08007cb6 	.word	0x08007cb6
 8004fa8:	08007c89 	.word	0x08007c89
 8004fac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fb0:	6018      	str	r0, [r3, #0]
 8004fb2:	9b07      	ldr	r3, [sp, #28]
 8004fb4:	2b0e      	cmp	r3, #14
 8004fb6:	f200 80a4 	bhi.w	8005102 <_dtoa_r+0x442>
 8004fba:	2c00      	cmp	r4, #0
 8004fbc:	f000 80a1 	beq.w	8005102 <_dtoa_r+0x442>
 8004fc0:	2f00      	cmp	r7, #0
 8004fc2:	dd33      	ble.n	800502c <_dtoa_r+0x36c>
 8004fc4:	4bad      	ldr	r3, [pc, #692]	@ (800527c <_dtoa_r+0x5bc>)
 8004fc6:	f007 020f 	and.w	r2, r7, #15
 8004fca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fce:	ed93 7b00 	vldr	d7, [r3]
 8004fd2:	05f8      	lsls	r0, r7, #23
 8004fd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004fd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004fdc:	d516      	bpl.n	800500c <_dtoa_r+0x34c>
 8004fde:	4ba8      	ldr	r3, [pc, #672]	@ (8005280 <_dtoa_r+0x5c0>)
 8004fe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fe8:	f7fb fc38 	bl	800085c <__aeabi_ddiv>
 8004fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ff0:	f004 040f 	and.w	r4, r4, #15
 8004ff4:	2603      	movs	r6, #3
 8004ff6:	4da2      	ldr	r5, [pc, #648]	@ (8005280 <_dtoa_r+0x5c0>)
 8004ff8:	b954      	cbnz	r4, 8005010 <_dtoa_r+0x350>
 8004ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005002:	f7fb fc2b 	bl	800085c <__aeabi_ddiv>
 8005006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800500a:	e028      	b.n	800505e <_dtoa_r+0x39e>
 800500c:	2602      	movs	r6, #2
 800500e:	e7f2      	b.n	8004ff6 <_dtoa_r+0x336>
 8005010:	07e1      	lsls	r1, r4, #31
 8005012:	d508      	bpl.n	8005026 <_dtoa_r+0x366>
 8005014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005018:	e9d5 2300 	ldrd	r2, r3, [r5]
 800501c:	f7fb faf4 	bl	8000608 <__aeabi_dmul>
 8005020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005024:	3601      	adds	r6, #1
 8005026:	1064      	asrs	r4, r4, #1
 8005028:	3508      	adds	r5, #8
 800502a:	e7e5      	b.n	8004ff8 <_dtoa_r+0x338>
 800502c:	f000 80d2 	beq.w	80051d4 <_dtoa_r+0x514>
 8005030:	427c      	negs	r4, r7
 8005032:	4b92      	ldr	r3, [pc, #584]	@ (800527c <_dtoa_r+0x5bc>)
 8005034:	4d92      	ldr	r5, [pc, #584]	@ (8005280 <_dtoa_r+0x5c0>)
 8005036:	f004 020f 	and.w	r2, r4, #15
 800503a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005046:	f7fb fadf 	bl	8000608 <__aeabi_dmul>
 800504a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800504e:	1124      	asrs	r4, r4, #4
 8005050:	2300      	movs	r3, #0
 8005052:	2602      	movs	r6, #2
 8005054:	2c00      	cmp	r4, #0
 8005056:	f040 80b2 	bne.w	80051be <_dtoa_r+0x4fe>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1d3      	bne.n	8005006 <_dtoa_r+0x346>
 800505e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005060:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80b7 	beq.w	80051d8 <_dtoa_r+0x518>
 800506a:	4b86      	ldr	r3, [pc, #536]	@ (8005284 <_dtoa_r+0x5c4>)
 800506c:	2200      	movs	r2, #0
 800506e:	4620      	mov	r0, r4
 8005070:	4629      	mov	r1, r5
 8005072:	f7fb fd3b 	bl	8000aec <__aeabi_dcmplt>
 8005076:	2800      	cmp	r0, #0
 8005078:	f000 80ae 	beq.w	80051d8 <_dtoa_r+0x518>
 800507c:	9b07      	ldr	r3, [sp, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80aa 	beq.w	80051d8 <_dtoa_r+0x518>
 8005084:	9b00      	ldr	r3, [sp, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	dd37      	ble.n	80050fa <_dtoa_r+0x43a>
 800508a:	1e7b      	subs	r3, r7, #1
 800508c:	9304      	str	r3, [sp, #16]
 800508e:	4620      	mov	r0, r4
 8005090:	4b7d      	ldr	r3, [pc, #500]	@ (8005288 <_dtoa_r+0x5c8>)
 8005092:	2200      	movs	r2, #0
 8005094:	4629      	mov	r1, r5
 8005096:	f7fb fab7 	bl	8000608 <__aeabi_dmul>
 800509a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800509e:	9c00      	ldr	r4, [sp, #0]
 80050a0:	3601      	adds	r6, #1
 80050a2:	4630      	mov	r0, r6
 80050a4:	f7fb fa46 	bl	8000534 <__aeabi_i2d>
 80050a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ac:	f7fb faac 	bl	8000608 <__aeabi_dmul>
 80050b0:	4b76      	ldr	r3, [pc, #472]	@ (800528c <_dtoa_r+0x5cc>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	f7fb f8f2 	bl	800029c <__adddf3>
 80050b8:	4605      	mov	r5, r0
 80050ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80050be:	2c00      	cmp	r4, #0
 80050c0:	f040 808d 	bne.w	80051de <_dtoa_r+0x51e>
 80050c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c8:	4b71      	ldr	r3, [pc, #452]	@ (8005290 <_dtoa_r+0x5d0>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	f7fb f8e4 	bl	8000298 <__aeabi_dsub>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050d8:	462a      	mov	r2, r5
 80050da:	4633      	mov	r3, r6
 80050dc:	f7fb fd24 	bl	8000b28 <__aeabi_dcmpgt>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f040 828b 	bne.w	80055fc <_dtoa_r+0x93c>
 80050e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ea:	462a      	mov	r2, r5
 80050ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80050f0:	f7fb fcfc 	bl	8000aec <__aeabi_dcmplt>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f040 8128 	bne.w	800534a <_dtoa_r+0x68a>
 80050fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80050fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005102:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005104:	2b00      	cmp	r3, #0
 8005106:	f2c0 815a 	blt.w	80053be <_dtoa_r+0x6fe>
 800510a:	2f0e      	cmp	r7, #14
 800510c:	f300 8157 	bgt.w	80053be <_dtoa_r+0x6fe>
 8005110:	4b5a      	ldr	r3, [pc, #360]	@ (800527c <_dtoa_r+0x5bc>)
 8005112:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005116:	ed93 7b00 	vldr	d7, [r3]
 800511a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800511c:	2b00      	cmp	r3, #0
 800511e:	ed8d 7b00 	vstr	d7, [sp]
 8005122:	da03      	bge.n	800512c <_dtoa_r+0x46c>
 8005124:	9b07      	ldr	r3, [sp, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f340 8101 	ble.w	800532e <_dtoa_r+0x66e>
 800512c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005130:	4656      	mov	r6, sl
 8005132:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005136:	4620      	mov	r0, r4
 8005138:	4629      	mov	r1, r5
 800513a:	f7fb fb8f 	bl	800085c <__aeabi_ddiv>
 800513e:	f7fb fd13 	bl	8000b68 <__aeabi_d2iz>
 8005142:	4680      	mov	r8, r0
 8005144:	f7fb f9f6 	bl	8000534 <__aeabi_i2d>
 8005148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800514c:	f7fb fa5c 	bl	8000608 <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800515c:	f7fb f89c 	bl	8000298 <__aeabi_dsub>
 8005160:	f806 4b01 	strb.w	r4, [r6], #1
 8005164:	9d07      	ldr	r5, [sp, #28]
 8005166:	eba6 040a 	sub.w	r4, r6, sl
 800516a:	42a5      	cmp	r5, r4
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	f040 8117 	bne.w	80053a2 <_dtoa_r+0x6e2>
 8005174:	f7fb f892 	bl	800029c <__adddf3>
 8005178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800517c:	4604      	mov	r4, r0
 800517e:	460d      	mov	r5, r1
 8005180:	f7fb fcd2 	bl	8000b28 <__aeabi_dcmpgt>
 8005184:	2800      	cmp	r0, #0
 8005186:	f040 80f9 	bne.w	800537c <_dtoa_r+0x6bc>
 800518a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800518e:	4620      	mov	r0, r4
 8005190:	4629      	mov	r1, r5
 8005192:	f7fb fca1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005196:	b118      	cbz	r0, 80051a0 <_dtoa_r+0x4e0>
 8005198:	f018 0f01 	tst.w	r8, #1
 800519c:	f040 80ee 	bne.w	800537c <_dtoa_r+0x6bc>
 80051a0:	4649      	mov	r1, r9
 80051a2:	4658      	mov	r0, fp
 80051a4:	f000 fc90 	bl	8005ac8 <_Bfree>
 80051a8:	2300      	movs	r3, #0
 80051aa:	7033      	strb	r3, [r6, #0]
 80051ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80051ae:	3701      	adds	r7, #1
 80051b0:	601f      	str	r7, [r3, #0]
 80051b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 831d 	beq.w	80057f4 <_dtoa_r+0xb34>
 80051ba:	601e      	str	r6, [r3, #0]
 80051bc:	e31a      	b.n	80057f4 <_dtoa_r+0xb34>
 80051be:	07e2      	lsls	r2, r4, #31
 80051c0:	d505      	bpl.n	80051ce <_dtoa_r+0x50e>
 80051c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051c6:	f7fb fa1f 	bl	8000608 <__aeabi_dmul>
 80051ca:	3601      	adds	r6, #1
 80051cc:	2301      	movs	r3, #1
 80051ce:	1064      	asrs	r4, r4, #1
 80051d0:	3508      	adds	r5, #8
 80051d2:	e73f      	b.n	8005054 <_dtoa_r+0x394>
 80051d4:	2602      	movs	r6, #2
 80051d6:	e742      	b.n	800505e <_dtoa_r+0x39e>
 80051d8:	9c07      	ldr	r4, [sp, #28]
 80051da:	9704      	str	r7, [sp, #16]
 80051dc:	e761      	b.n	80050a2 <_dtoa_r+0x3e2>
 80051de:	4b27      	ldr	r3, [pc, #156]	@ (800527c <_dtoa_r+0x5bc>)
 80051e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80051e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051ea:	4454      	add	r4, sl
 80051ec:	2900      	cmp	r1, #0
 80051ee:	d053      	beq.n	8005298 <_dtoa_r+0x5d8>
 80051f0:	4928      	ldr	r1, [pc, #160]	@ (8005294 <_dtoa_r+0x5d4>)
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7fb fb32 	bl	800085c <__aeabi_ddiv>
 80051f8:	4633      	mov	r3, r6
 80051fa:	462a      	mov	r2, r5
 80051fc:	f7fb f84c 	bl	8000298 <__aeabi_dsub>
 8005200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005204:	4656      	mov	r6, sl
 8005206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800520a:	f7fb fcad 	bl	8000b68 <__aeabi_d2iz>
 800520e:	4605      	mov	r5, r0
 8005210:	f7fb f990 	bl	8000534 <__aeabi_i2d>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800521c:	f7fb f83c 	bl	8000298 <__aeabi_dsub>
 8005220:	3530      	adds	r5, #48	@ 0x30
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800522a:	f806 5b01 	strb.w	r5, [r6], #1
 800522e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005232:	f7fb fc5b 	bl	8000aec <__aeabi_dcmplt>
 8005236:	2800      	cmp	r0, #0
 8005238:	d171      	bne.n	800531e <_dtoa_r+0x65e>
 800523a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800523e:	4911      	ldr	r1, [pc, #68]	@ (8005284 <_dtoa_r+0x5c4>)
 8005240:	2000      	movs	r0, #0
 8005242:	f7fb f829 	bl	8000298 <__aeabi_dsub>
 8005246:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800524a:	f7fb fc4f 	bl	8000aec <__aeabi_dcmplt>
 800524e:	2800      	cmp	r0, #0
 8005250:	f040 8095 	bne.w	800537e <_dtoa_r+0x6be>
 8005254:	42a6      	cmp	r6, r4
 8005256:	f43f af50 	beq.w	80050fa <_dtoa_r+0x43a>
 800525a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800525e:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <_dtoa_r+0x5c8>)
 8005260:	2200      	movs	r2, #0
 8005262:	f7fb f9d1 	bl	8000608 <__aeabi_dmul>
 8005266:	4b08      	ldr	r3, [pc, #32]	@ (8005288 <_dtoa_r+0x5c8>)
 8005268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800526c:	2200      	movs	r2, #0
 800526e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005272:	f7fb f9c9 	bl	8000608 <__aeabi_dmul>
 8005276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800527a:	e7c4      	b.n	8005206 <_dtoa_r+0x546>
 800527c:	08007dc8 	.word	0x08007dc8
 8005280:	08007da0 	.word	0x08007da0
 8005284:	3ff00000 	.word	0x3ff00000
 8005288:	40240000 	.word	0x40240000
 800528c:	401c0000 	.word	0x401c0000
 8005290:	40140000 	.word	0x40140000
 8005294:	3fe00000 	.word	0x3fe00000
 8005298:	4631      	mov	r1, r6
 800529a:	4628      	mov	r0, r5
 800529c:	f7fb f9b4 	bl	8000608 <__aeabi_dmul>
 80052a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80052a6:	4656      	mov	r6, sl
 80052a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ac:	f7fb fc5c 	bl	8000b68 <__aeabi_d2iz>
 80052b0:	4605      	mov	r5, r0
 80052b2:	f7fb f93f 	bl	8000534 <__aeabi_i2d>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052be:	f7fa ffeb 	bl	8000298 <__aeabi_dsub>
 80052c2:	3530      	adds	r5, #48	@ 0x30
 80052c4:	f806 5b01 	strb.w	r5, [r6], #1
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	42a6      	cmp	r6, r4
 80052ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	d124      	bne.n	8005322 <_dtoa_r+0x662>
 80052d8:	4bac      	ldr	r3, [pc, #688]	@ (800558c <_dtoa_r+0x8cc>)
 80052da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80052de:	f7fa ffdd 	bl	800029c <__adddf3>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ea:	f7fb fc1d 	bl	8000b28 <__aeabi_dcmpgt>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d145      	bne.n	800537e <_dtoa_r+0x6be>
 80052f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052f6:	49a5      	ldr	r1, [pc, #660]	@ (800558c <_dtoa_r+0x8cc>)
 80052f8:	2000      	movs	r0, #0
 80052fa:	f7fa ffcd 	bl	8000298 <__aeabi_dsub>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005306:	f7fb fbf1 	bl	8000aec <__aeabi_dcmplt>
 800530a:	2800      	cmp	r0, #0
 800530c:	f43f aef5 	beq.w	80050fa <_dtoa_r+0x43a>
 8005310:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005312:	1e73      	subs	r3, r6, #1
 8005314:	9315      	str	r3, [sp, #84]	@ 0x54
 8005316:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800531a:	2b30      	cmp	r3, #48	@ 0x30
 800531c:	d0f8      	beq.n	8005310 <_dtoa_r+0x650>
 800531e:	9f04      	ldr	r7, [sp, #16]
 8005320:	e73e      	b.n	80051a0 <_dtoa_r+0x4e0>
 8005322:	4b9b      	ldr	r3, [pc, #620]	@ (8005590 <_dtoa_r+0x8d0>)
 8005324:	f7fb f970 	bl	8000608 <__aeabi_dmul>
 8005328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800532c:	e7bc      	b.n	80052a8 <_dtoa_r+0x5e8>
 800532e:	d10c      	bne.n	800534a <_dtoa_r+0x68a>
 8005330:	4b98      	ldr	r3, [pc, #608]	@ (8005594 <_dtoa_r+0x8d4>)
 8005332:	2200      	movs	r2, #0
 8005334:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005338:	f7fb f966 	bl	8000608 <__aeabi_dmul>
 800533c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005340:	f7fb fbe8 	bl	8000b14 <__aeabi_dcmpge>
 8005344:	2800      	cmp	r0, #0
 8005346:	f000 8157 	beq.w	80055f8 <_dtoa_r+0x938>
 800534a:	2400      	movs	r4, #0
 800534c:	4625      	mov	r5, r4
 800534e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005350:	43db      	mvns	r3, r3
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	4656      	mov	r6, sl
 8005356:	2700      	movs	r7, #0
 8005358:	4621      	mov	r1, r4
 800535a:	4658      	mov	r0, fp
 800535c:	f000 fbb4 	bl	8005ac8 <_Bfree>
 8005360:	2d00      	cmp	r5, #0
 8005362:	d0dc      	beq.n	800531e <_dtoa_r+0x65e>
 8005364:	b12f      	cbz	r7, 8005372 <_dtoa_r+0x6b2>
 8005366:	42af      	cmp	r7, r5
 8005368:	d003      	beq.n	8005372 <_dtoa_r+0x6b2>
 800536a:	4639      	mov	r1, r7
 800536c:	4658      	mov	r0, fp
 800536e:	f000 fbab 	bl	8005ac8 <_Bfree>
 8005372:	4629      	mov	r1, r5
 8005374:	4658      	mov	r0, fp
 8005376:	f000 fba7 	bl	8005ac8 <_Bfree>
 800537a:	e7d0      	b.n	800531e <_dtoa_r+0x65e>
 800537c:	9704      	str	r7, [sp, #16]
 800537e:	4633      	mov	r3, r6
 8005380:	461e      	mov	r6, r3
 8005382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005386:	2a39      	cmp	r2, #57	@ 0x39
 8005388:	d107      	bne.n	800539a <_dtoa_r+0x6da>
 800538a:	459a      	cmp	sl, r3
 800538c:	d1f8      	bne.n	8005380 <_dtoa_r+0x6c0>
 800538e:	9a04      	ldr	r2, [sp, #16]
 8005390:	3201      	adds	r2, #1
 8005392:	9204      	str	r2, [sp, #16]
 8005394:	2230      	movs	r2, #48	@ 0x30
 8005396:	f88a 2000 	strb.w	r2, [sl]
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	3201      	adds	r2, #1
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e7bd      	b.n	800531e <_dtoa_r+0x65e>
 80053a2:	4b7b      	ldr	r3, [pc, #492]	@ (8005590 <_dtoa_r+0x8d0>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	f7fb f92f 	bl	8000608 <__aeabi_dmul>
 80053aa:	2200      	movs	r2, #0
 80053ac:	2300      	movs	r3, #0
 80053ae:	4604      	mov	r4, r0
 80053b0:	460d      	mov	r5, r1
 80053b2:	f7fb fb91 	bl	8000ad8 <__aeabi_dcmpeq>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	f43f aebb 	beq.w	8005132 <_dtoa_r+0x472>
 80053bc:	e6f0      	b.n	80051a0 <_dtoa_r+0x4e0>
 80053be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80053c0:	2a00      	cmp	r2, #0
 80053c2:	f000 80db 	beq.w	800557c <_dtoa_r+0x8bc>
 80053c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053c8:	2a01      	cmp	r2, #1
 80053ca:	f300 80bf 	bgt.w	800554c <_dtoa_r+0x88c>
 80053ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80053d0:	2a00      	cmp	r2, #0
 80053d2:	f000 80b7 	beq.w	8005544 <_dtoa_r+0x884>
 80053d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80053da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80053dc:	4646      	mov	r6, r8
 80053de:	9a08      	ldr	r2, [sp, #32]
 80053e0:	2101      	movs	r1, #1
 80053e2:	441a      	add	r2, r3
 80053e4:	4658      	mov	r0, fp
 80053e6:	4498      	add	r8, r3
 80053e8:	9208      	str	r2, [sp, #32]
 80053ea:	f000 fc21 	bl	8005c30 <__i2b>
 80053ee:	4605      	mov	r5, r0
 80053f0:	b15e      	cbz	r6, 800540a <_dtoa_r+0x74a>
 80053f2:	9b08      	ldr	r3, [sp, #32]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	dd08      	ble.n	800540a <_dtoa_r+0x74a>
 80053f8:	42b3      	cmp	r3, r6
 80053fa:	9a08      	ldr	r2, [sp, #32]
 80053fc:	bfa8      	it	ge
 80053fe:	4633      	movge	r3, r6
 8005400:	eba8 0803 	sub.w	r8, r8, r3
 8005404:	1af6      	subs	r6, r6, r3
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	9308      	str	r3, [sp, #32]
 800540a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800540c:	b1f3      	cbz	r3, 800544c <_dtoa_r+0x78c>
 800540e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80b7 	beq.w	8005584 <_dtoa_r+0x8c4>
 8005416:	b18c      	cbz	r4, 800543c <_dtoa_r+0x77c>
 8005418:	4629      	mov	r1, r5
 800541a:	4622      	mov	r2, r4
 800541c:	4658      	mov	r0, fp
 800541e:	f000 fcc7 	bl	8005db0 <__pow5mult>
 8005422:	464a      	mov	r2, r9
 8005424:	4601      	mov	r1, r0
 8005426:	4605      	mov	r5, r0
 8005428:	4658      	mov	r0, fp
 800542a:	f000 fc17 	bl	8005c5c <__multiply>
 800542e:	4649      	mov	r1, r9
 8005430:	9004      	str	r0, [sp, #16]
 8005432:	4658      	mov	r0, fp
 8005434:	f000 fb48 	bl	8005ac8 <_Bfree>
 8005438:	9b04      	ldr	r3, [sp, #16]
 800543a:	4699      	mov	r9, r3
 800543c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800543e:	1b1a      	subs	r2, r3, r4
 8005440:	d004      	beq.n	800544c <_dtoa_r+0x78c>
 8005442:	4649      	mov	r1, r9
 8005444:	4658      	mov	r0, fp
 8005446:	f000 fcb3 	bl	8005db0 <__pow5mult>
 800544a:	4681      	mov	r9, r0
 800544c:	2101      	movs	r1, #1
 800544e:	4658      	mov	r0, fp
 8005450:	f000 fbee 	bl	8005c30 <__i2b>
 8005454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005456:	4604      	mov	r4, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 81cf 	beq.w	80057fc <_dtoa_r+0xb3c>
 800545e:	461a      	mov	r2, r3
 8005460:	4601      	mov	r1, r0
 8005462:	4658      	mov	r0, fp
 8005464:	f000 fca4 	bl	8005db0 <__pow5mult>
 8005468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800546a:	2b01      	cmp	r3, #1
 800546c:	4604      	mov	r4, r0
 800546e:	f300 8095 	bgt.w	800559c <_dtoa_r+0x8dc>
 8005472:	9b02      	ldr	r3, [sp, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f040 8087 	bne.w	8005588 <_dtoa_r+0x8c8>
 800547a:	9b03      	ldr	r3, [sp, #12]
 800547c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 8089 	bne.w	8005598 <_dtoa_r+0x8d8>
 8005486:	9b03      	ldr	r3, [sp, #12]
 8005488:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800548c:	0d1b      	lsrs	r3, r3, #20
 800548e:	051b      	lsls	r3, r3, #20
 8005490:	b12b      	cbz	r3, 800549e <_dtoa_r+0x7de>
 8005492:	9b08      	ldr	r3, [sp, #32]
 8005494:	3301      	adds	r3, #1
 8005496:	9308      	str	r3, [sp, #32]
 8005498:	f108 0801 	add.w	r8, r8, #1
 800549c:	2301      	movs	r3, #1
 800549e:	930a      	str	r3, [sp, #40]	@ 0x28
 80054a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 81b0 	beq.w	8005808 <_dtoa_r+0xb48>
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054ae:	6918      	ldr	r0, [r3, #16]
 80054b0:	f000 fb72 	bl	8005b98 <__hi0bits>
 80054b4:	f1c0 0020 	rsb	r0, r0, #32
 80054b8:	9b08      	ldr	r3, [sp, #32]
 80054ba:	4418      	add	r0, r3
 80054bc:	f010 001f 	ands.w	r0, r0, #31
 80054c0:	d077      	beq.n	80055b2 <_dtoa_r+0x8f2>
 80054c2:	f1c0 0320 	rsb	r3, r0, #32
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	dd6b      	ble.n	80055a2 <_dtoa_r+0x8e2>
 80054ca:	9b08      	ldr	r3, [sp, #32]
 80054cc:	f1c0 001c 	rsb	r0, r0, #28
 80054d0:	4403      	add	r3, r0
 80054d2:	4480      	add	r8, r0
 80054d4:	4406      	add	r6, r0
 80054d6:	9308      	str	r3, [sp, #32]
 80054d8:	f1b8 0f00 	cmp.w	r8, #0
 80054dc:	dd05      	ble.n	80054ea <_dtoa_r+0x82a>
 80054de:	4649      	mov	r1, r9
 80054e0:	4642      	mov	r2, r8
 80054e2:	4658      	mov	r0, fp
 80054e4:	f000 fcbe 	bl	8005e64 <__lshift>
 80054e8:	4681      	mov	r9, r0
 80054ea:	9b08      	ldr	r3, [sp, #32]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dd05      	ble.n	80054fc <_dtoa_r+0x83c>
 80054f0:	4621      	mov	r1, r4
 80054f2:	461a      	mov	r2, r3
 80054f4:	4658      	mov	r0, fp
 80054f6:	f000 fcb5 	bl	8005e64 <__lshift>
 80054fa:	4604      	mov	r4, r0
 80054fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d059      	beq.n	80055b6 <_dtoa_r+0x8f6>
 8005502:	4621      	mov	r1, r4
 8005504:	4648      	mov	r0, r9
 8005506:	f000 fd19 	bl	8005f3c <__mcmp>
 800550a:	2800      	cmp	r0, #0
 800550c:	da53      	bge.n	80055b6 <_dtoa_r+0x8f6>
 800550e:	1e7b      	subs	r3, r7, #1
 8005510:	9304      	str	r3, [sp, #16]
 8005512:	4649      	mov	r1, r9
 8005514:	2300      	movs	r3, #0
 8005516:	220a      	movs	r2, #10
 8005518:	4658      	mov	r0, fp
 800551a:	f000 faf7 	bl	8005b0c <__multadd>
 800551e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005520:	4681      	mov	r9, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 8172 	beq.w	800580c <_dtoa_r+0xb4c>
 8005528:	2300      	movs	r3, #0
 800552a:	4629      	mov	r1, r5
 800552c:	220a      	movs	r2, #10
 800552e:	4658      	mov	r0, fp
 8005530:	f000 faec 	bl	8005b0c <__multadd>
 8005534:	9b00      	ldr	r3, [sp, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	4605      	mov	r5, r0
 800553a:	dc67      	bgt.n	800560c <_dtoa_r+0x94c>
 800553c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800553e:	2b02      	cmp	r3, #2
 8005540:	dc41      	bgt.n	80055c6 <_dtoa_r+0x906>
 8005542:	e063      	b.n	800560c <_dtoa_r+0x94c>
 8005544:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005546:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800554a:	e746      	b.n	80053da <_dtoa_r+0x71a>
 800554c:	9b07      	ldr	r3, [sp, #28]
 800554e:	1e5c      	subs	r4, r3, #1
 8005550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005552:	42a3      	cmp	r3, r4
 8005554:	bfbf      	itttt	lt
 8005556:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005558:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800555a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800555c:	1ae3      	sublt	r3, r4, r3
 800555e:	bfb4      	ite	lt
 8005560:	18d2      	addlt	r2, r2, r3
 8005562:	1b1c      	subge	r4, r3, r4
 8005564:	9b07      	ldr	r3, [sp, #28]
 8005566:	bfbc      	itt	lt
 8005568:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800556a:	2400      	movlt	r4, #0
 800556c:	2b00      	cmp	r3, #0
 800556e:	bfb5      	itete	lt
 8005570:	eba8 0603 	sublt.w	r6, r8, r3
 8005574:	9b07      	ldrge	r3, [sp, #28]
 8005576:	2300      	movlt	r3, #0
 8005578:	4646      	movge	r6, r8
 800557a:	e730      	b.n	80053de <_dtoa_r+0x71e>
 800557c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800557e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005580:	4646      	mov	r6, r8
 8005582:	e735      	b.n	80053f0 <_dtoa_r+0x730>
 8005584:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005586:	e75c      	b.n	8005442 <_dtoa_r+0x782>
 8005588:	2300      	movs	r3, #0
 800558a:	e788      	b.n	800549e <_dtoa_r+0x7de>
 800558c:	3fe00000 	.word	0x3fe00000
 8005590:	40240000 	.word	0x40240000
 8005594:	40140000 	.word	0x40140000
 8005598:	9b02      	ldr	r3, [sp, #8]
 800559a:	e780      	b.n	800549e <_dtoa_r+0x7de>
 800559c:	2300      	movs	r3, #0
 800559e:	930a      	str	r3, [sp, #40]	@ 0x28
 80055a0:	e782      	b.n	80054a8 <_dtoa_r+0x7e8>
 80055a2:	d099      	beq.n	80054d8 <_dtoa_r+0x818>
 80055a4:	9a08      	ldr	r2, [sp, #32]
 80055a6:	331c      	adds	r3, #28
 80055a8:	441a      	add	r2, r3
 80055aa:	4498      	add	r8, r3
 80055ac:	441e      	add	r6, r3
 80055ae:	9208      	str	r2, [sp, #32]
 80055b0:	e792      	b.n	80054d8 <_dtoa_r+0x818>
 80055b2:	4603      	mov	r3, r0
 80055b4:	e7f6      	b.n	80055a4 <_dtoa_r+0x8e4>
 80055b6:	9b07      	ldr	r3, [sp, #28]
 80055b8:	9704      	str	r7, [sp, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	dc20      	bgt.n	8005600 <_dtoa_r+0x940>
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	dd1e      	ble.n	8005604 <_dtoa_r+0x944>
 80055c6:	9b00      	ldr	r3, [sp, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f47f aec0 	bne.w	800534e <_dtoa_r+0x68e>
 80055ce:	4621      	mov	r1, r4
 80055d0:	2205      	movs	r2, #5
 80055d2:	4658      	mov	r0, fp
 80055d4:	f000 fa9a 	bl	8005b0c <__multadd>
 80055d8:	4601      	mov	r1, r0
 80055da:	4604      	mov	r4, r0
 80055dc:	4648      	mov	r0, r9
 80055de:	f000 fcad 	bl	8005f3c <__mcmp>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	f77f aeb3 	ble.w	800534e <_dtoa_r+0x68e>
 80055e8:	4656      	mov	r6, sl
 80055ea:	2331      	movs	r3, #49	@ 0x31
 80055ec:	f806 3b01 	strb.w	r3, [r6], #1
 80055f0:	9b04      	ldr	r3, [sp, #16]
 80055f2:	3301      	adds	r3, #1
 80055f4:	9304      	str	r3, [sp, #16]
 80055f6:	e6ae      	b.n	8005356 <_dtoa_r+0x696>
 80055f8:	9c07      	ldr	r4, [sp, #28]
 80055fa:	9704      	str	r7, [sp, #16]
 80055fc:	4625      	mov	r5, r4
 80055fe:	e7f3      	b.n	80055e8 <_dtoa_r+0x928>
 8005600:	9b07      	ldr	r3, [sp, #28]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8104 	beq.w	8005814 <_dtoa_r+0xb54>
 800560c:	2e00      	cmp	r6, #0
 800560e:	dd05      	ble.n	800561c <_dtoa_r+0x95c>
 8005610:	4629      	mov	r1, r5
 8005612:	4632      	mov	r2, r6
 8005614:	4658      	mov	r0, fp
 8005616:	f000 fc25 	bl	8005e64 <__lshift>
 800561a:	4605      	mov	r5, r0
 800561c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d05a      	beq.n	80056d8 <_dtoa_r+0xa18>
 8005622:	6869      	ldr	r1, [r5, #4]
 8005624:	4658      	mov	r0, fp
 8005626:	f000 fa0f 	bl	8005a48 <_Balloc>
 800562a:	4606      	mov	r6, r0
 800562c:	b928      	cbnz	r0, 800563a <_dtoa_r+0x97a>
 800562e:	4b84      	ldr	r3, [pc, #528]	@ (8005840 <_dtoa_r+0xb80>)
 8005630:	4602      	mov	r2, r0
 8005632:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005636:	f7ff bb5a 	b.w	8004cee <_dtoa_r+0x2e>
 800563a:	692a      	ldr	r2, [r5, #16]
 800563c:	3202      	adds	r2, #2
 800563e:	0092      	lsls	r2, r2, #2
 8005640:	f105 010c 	add.w	r1, r5, #12
 8005644:	300c      	adds	r0, #12
 8005646:	f000 ffaf 	bl	80065a8 <memcpy>
 800564a:	2201      	movs	r2, #1
 800564c:	4631      	mov	r1, r6
 800564e:	4658      	mov	r0, fp
 8005650:	f000 fc08 	bl	8005e64 <__lshift>
 8005654:	f10a 0301 	add.w	r3, sl, #1
 8005658:	9307      	str	r3, [sp, #28]
 800565a:	9b00      	ldr	r3, [sp, #0]
 800565c:	4453      	add	r3, sl
 800565e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005660:	9b02      	ldr	r3, [sp, #8]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	462f      	mov	r7, r5
 8005668:	930a      	str	r3, [sp, #40]	@ 0x28
 800566a:	4605      	mov	r5, r0
 800566c:	9b07      	ldr	r3, [sp, #28]
 800566e:	4621      	mov	r1, r4
 8005670:	3b01      	subs	r3, #1
 8005672:	4648      	mov	r0, r9
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	f7ff fa98 	bl	8004baa <quorem>
 800567a:	4639      	mov	r1, r7
 800567c:	9002      	str	r0, [sp, #8]
 800567e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005682:	4648      	mov	r0, r9
 8005684:	f000 fc5a 	bl	8005f3c <__mcmp>
 8005688:	462a      	mov	r2, r5
 800568a:	9008      	str	r0, [sp, #32]
 800568c:	4621      	mov	r1, r4
 800568e:	4658      	mov	r0, fp
 8005690:	f000 fc70 	bl	8005f74 <__mdiff>
 8005694:	68c2      	ldr	r2, [r0, #12]
 8005696:	4606      	mov	r6, r0
 8005698:	bb02      	cbnz	r2, 80056dc <_dtoa_r+0xa1c>
 800569a:	4601      	mov	r1, r0
 800569c:	4648      	mov	r0, r9
 800569e:	f000 fc4d 	bl	8005f3c <__mcmp>
 80056a2:	4602      	mov	r2, r0
 80056a4:	4631      	mov	r1, r6
 80056a6:	4658      	mov	r0, fp
 80056a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80056aa:	f000 fa0d 	bl	8005ac8 <_Bfree>
 80056ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056b2:	9e07      	ldr	r6, [sp, #28]
 80056b4:	ea43 0102 	orr.w	r1, r3, r2
 80056b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056ba:	4319      	orrs	r1, r3
 80056bc:	d110      	bne.n	80056e0 <_dtoa_r+0xa20>
 80056be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056c2:	d029      	beq.n	8005718 <_dtoa_r+0xa58>
 80056c4:	9b08      	ldr	r3, [sp, #32]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	dd02      	ble.n	80056d0 <_dtoa_r+0xa10>
 80056ca:	9b02      	ldr	r3, [sp, #8]
 80056cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80056d0:	9b00      	ldr	r3, [sp, #0]
 80056d2:	f883 8000 	strb.w	r8, [r3]
 80056d6:	e63f      	b.n	8005358 <_dtoa_r+0x698>
 80056d8:	4628      	mov	r0, r5
 80056da:	e7bb      	b.n	8005654 <_dtoa_r+0x994>
 80056dc:	2201      	movs	r2, #1
 80056de:	e7e1      	b.n	80056a4 <_dtoa_r+0x9e4>
 80056e0:	9b08      	ldr	r3, [sp, #32]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	db04      	blt.n	80056f0 <_dtoa_r+0xa30>
 80056e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80056e8:	430b      	orrs	r3, r1
 80056ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056ec:	430b      	orrs	r3, r1
 80056ee:	d120      	bne.n	8005732 <_dtoa_r+0xa72>
 80056f0:	2a00      	cmp	r2, #0
 80056f2:	dded      	ble.n	80056d0 <_dtoa_r+0xa10>
 80056f4:	4649      	mov	r1, r9
 80056f6:	2201      	movs	r2, #1
 80056f8:	4658      	mov	r0, fp
 80056fa:	f000 fbb3 	bl	8005e64 <__lshift>
 80056fe:	4621      	mov	r1, r4
 8005700:	4681      	mov	r9, r0
 8005702:	f000 fc1b 	bl	8005f3c <__mcmp>
 8005706:	2800      	cmp	r0, #0
 8005708:	dc03      	bgt.n	8005712 <_dtoa_r+0xa52>
 800570a:	d1e1      	bne.n	80056d0 <_dtoa_r+0xa10>
 800570c:	f018 0f01 	tst.w	r8, #1
 8005710:	d0de      	beq.n	80056d0 <_dtoa_r+0xa10>
 8005712:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005716:	d1d8      	bne.n	80056ca <_dtoa_r+0xa0a>
 8005718:	9a00      	ldr	r2, [sp, #0]
 800571a:	2339      	movs	r3, #57	@ 0x39
 800571c:	7013      	strb	r3, [r2, #0]
 800571e:	4633      	mov	r3, r6
 8005720:	461e      	mov	r6, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005728:	2a39      	cmp	r2, #57	@ 0x39
 800572a:	d052      	beq.n	80057d2 <_dtoa_r+0xb12>
 800572c:	3201      	adds	r2, #1
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	e612      	b.n	8005358 <_dtoa_r+0x698>
 8005732:	2a00      	cmp	r2, #0
 8005734:	dd07      	ble.n	8005746 <_dtoa_r+0xa86>
 8005736:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800573a:	d0ed      	beq.n	8005718 <_dtoa_r+0xa58>
 800573c:	9a00      	ldr	r2, [sp, #0]
 800573e:	f108 0301 	add.w	r3, r8, #1
 8005742:	7013      	strb	r3, [r2, #0]
 8005744:	e608      	b.n	8005358 <_dtoa_r+0x698>
 8005746:	9b07      	ldr	r3, [sp, #28]
 8005748:	9a07      	ldr	r2, [sp, #28]
 800574a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800574e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005750:	4293      	cmp	r3, r2
 8005752:	d028      	beq.n	80057a6 <_dtoa_r+0xae6>
 8005754:	4649      	mov	r1, r9
 8005756:	2300      	movs	r3, #0
 8005758:	220a      	movs	r2, #10
 800575a:	4658      	mov	r0, fp
 800575c:	f000 f9d6 	bl	8005b0c <__multadd>
 8005760:	42af      	cmp	r7, r5
 8005762:	4681      	mov	r9, r0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	f04f 020a 	mov.w	r2, #10
 800576c:	4639      	mov	r1, r7
 800576e:	4658      	mov	r0, fp
 8005770:	d107      	bne.n	8005782 <_dtoa_r+0xac2>
 8005772:	f000 f9cb 	bl	8005b0c <__multadd>
 8005776:	4607      	mov	r7, r0
 8005778:	4605      	mov	r5, r0
 800577a:	9b07      	ldr	r3, [sp, #28]
 800577c:	3301      	adds	r3, #1
 800577e:	9307      	str	r3, [sp, #28]
 8005780:	e774      	b.n	800566c <_dtoa_r+0x9ac>
 8005782:	f000 f9c3 	bl	8005b0c <__multadd>
 8005786:	4629      	mov	r1, r5
 8005788:	4607      	mov	r7, r0
 800578a:	2300      	movs	r3, #0
 800578c:	220a      	movs	r2, #10
 800578e:	4658      	mov	r0, fp
 8005790:	f000 f9bc 	bl	8005b0c <__multadd>
 8005794:	4605      	mov	r5, r0
 8005796:	e7f0      	b.n	800577a <_dtoa_r+0xaba>
 8005798:	9b00      	ldr	r3, [sp, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	bfcc      	ite	gt
 800579e:	461e      	movgt	r6, r3
 80057a0:	2601      	movle	r6, #1
 80057a2:	4456      	add	r6, sl
 80057a4:	2700      	movs	r7, #0
 80057a6:	4649      	mov	r1, r9
 80057a8:	2201      	movs	r2, #1
 80057aa:	4658      	mov	r0, fp
 80057ac:	f000 fb5a 	bl	8005e64 <__lshift>
 80057b0:	4621      	mov	r1, r4
 80057b2:	4681      	mov	r9, r0
 80057b4:	f000 fbc2 	bl	8005f3c <__mcmp>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	dcb0      	bgt.n	800571e <_dtoa_r+0xa5e>
 80057bc:	d102      	bne.n	80057c4 <_dtoa_r+0xb04>
 80057be:	f018 0f01 	tst.w	r8, #1
 80057c2:	d1ac      	bne.n	800571e <_dtoa_r+0xa5e>
 80057c4:	4633      	mov	r3, r6
 80057c6:	461e      	mov	r6, r3
 80057c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057cc:	2a30      	cmp	r2, #48	@ 0x30
 80057ce:	d0fa      	beq.n	80057c6 <_dtoa_r+0xb06>
 80057d0:	e5c2      	b.n	8005358 <_dtoa_r+0x698>
 80057d2:	459a      	cmp	sl, r3
 80057d4:	d1a4      	bne.n	8005720 <_dtoa_r+0xa60>
 80057d6:	9b04      	ldr	r3, [sp, #16]
 80057d8:	3301      	adds	r3, #1
 80057da:	9304      	str	r3, [sp, #16]
 80057dc:	2331      	movs	r3, #49	@ 0x31
 80057de:	f88a 3000 	strb.w	r3, [sl]
 80057e2:	e5b9      	b.n	8005358 <_dtoa_r+0x698>
 80057e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80057e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005844 <_dtoa_r+0xb84>
 80057ea:	b11b      	cbz	r3, 80057f4 <_dtoa_r+0xb34>
 80057ec:	f10a 0308 	add.w	r3, sl, #8
 80057f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4650      	mov	r0, sl
 80057f6:	b019      	add	sp, #100	@ 0x64
 80057f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057fe:	2b01      	cmp	r3, #1
 8005800:	f77f ae37 	ble.w	8005472 <_dtoa_r+0x7b2>
 8005804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005806:	930a      	str	r3, [sp, #40]	@ 0x28
 8005808:	2001      	movs	r0, #1
 800580a:	e655      	b.n	80054b8 <_dtoa_r+0x7f8>
 800580c:	9b00      	ldr	r3, [sp, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f77f aed6 	ble.w	80055c0 <_dtoa_r+0x900>
 8005814:	4656      	mov	r6, sl
 8005816:	4621      	mov	r1, r4
 8005818:	4648      	mov	r0, r9
 800581a:	f7ff f9c6 	bl	8004baa <quorem>
 800581e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005822:	f806 8b01 	strb.w	r8, [r6], #1
 8005826:	9b00      	ldr	r3, [sp, #0]
 8005828:	eba6 020a 	sub.w	r2, r6, sl
 800582c:	4293      	cmp	r3, r2
 800582e:	ddb3      	ble.n	8005798 <_dtoa_r+0xad8>
 8005830:	4649      	mov	r1, r9
 8005832:	2300      	movs	r3, #0
 8005834:	220a      	movs	r2, #10
 8005836:	4658      	mov	r0, fp
 8005838:	f000 f968 	bl	8005b0c <__multadd>
 800583c:	4681      	mov	r9, r0
 800583e:	e7ea      	b.n	8005816 <_dtoa_r+0xb56>
 8005840:	08007d29 	.word	0x08007d29
 8005844:	08007cad 	.word	0x08007cad

08005848 <_free_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4605      	mov	r5, r0
 800584c:	2900      	cmp	r1, #0
 800584e:	d041      	beq.n	80058d4 <_free_r+0x8c>
 8005850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005854:	1f0c      	subs	r4, r1, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	bfb8      	it	lt
 800585a:	18e4      	addlt	r4, r4, r3
 800585c:	f000 f8e8 	bl	8005a30 <__malloc_lock>
 8005860:	4a1d      	ldr	r2, [pc, #116]	@ (80058d8 <_free_r+0x90>)
 8005862:	6813      	ldr	r3, [r2, #0]
 8005864:	b933      	cbnz	r3, 8005874 <_free_r+0x2c>
 8005866:	6063      	str	r3, [r4, #4]
 8005868:	6014      	str	r4, [r2, #0]
 800586a:	4628      	mov	r0, r5
 800586c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005870:	f000 b8e4 	b.w	8005a3c <__malloc_unlock>
 8005874:	42a3      	cmp	r3, r4
 8005876:	d908      	bls.n	800588a <_free_r+0x42>
 8005878:	6820      	ldr	r0, [r4, #0]
 800587a:	1821      	adds	r1, r4, r0
 800587c:	428b      	cmp	r3, r1
 800587e:	bf01      	itttt	eq
 8005880:	6819      	ldreq	r1, [r3, #0]
 8005882:	685b      	ldreq	r3, [r3, #4]
 8005884:	1809      	addeq	r1, r1, r0
 8005886:	6021      	streq	r1, [r4, #0]
 8005888:	e7ed      	b.n	8005866 <_free_r+0x1e>
 800588a:	461a      	mov	r2, r3
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	b10b      	cbz	r3, 8005894 <_free_r+0x4c>
 8005890:	42a3      	cmp	r3, r4
 8005892:	d9fa      	bls.n	800588a <_free_r+0x42>
 8005894:	6811      	ldr	r1, [r2, #0]
 8005896:	1850      	adds	r0, r2, r1
 8005898:	42a0      	cmp	r0, r4
 800589a:	d10b      	bne.n	80058b4 <_free_r+0x6c>
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	4401      	add	r1, r0
 80058a0:	1850      	adds	r0, r2, r1
 80058a2:	4283      	cmp	r3, r0
 80058a4:	6011      	str	r1, [r2, #0]
 80058a6:	d1e0      	bne.n	800586a <_free_r+0x22>
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	6053      	str	r3, [r2, #4]
 80058ae:	4408      	add	r0, r1
 80058b0:	6010      	str	r0, [r2, #0]
 80058b2:	e7da      	b.n	800586a <_free_r+0x22>
 80058b4:	d902      	bls.n	80058bc <_free_r+0x74>
 80058b6:	230c      	movs	r3, #12
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	e7d6      	b.n	800586a <_free_r+0x22>
 80058bc:	6820      	ldr	r0, [r4, #0]
 80058be:	1821      	adds	r1, r4, r0
 80058c0:	428b      	cmp	r3, r1
 80058c2:	bf04      	itt	eq
 80058c4:	6819      	ldreq	r1, [r3, #0]
 80058c6:	685b      	ldreq	r3, [r3, #4]
 80058c8:	6063      	str	r3, [r4, #4]
 80058ca:	bf04      	itt	eq
 80058cc:	1809      	addeq	r1, r1, r0
 80058ce:	6021      	streq	r1, [r4, #0]
 80058d0:	6054      	str	r4, [r2, #4]
 80058d2:	e7ca      	b.n	800586a <_free_r+0x22>
 80058d4:	bd38      	pop	{r3, r4, r5, pc}
 80058d6:	bf00      	nop
 80058d8:	2000096c 	.word	0x2000096c

080058dc <malloc>:
 80058dc:	4b02      	ldr	r3, [pc, #8]	@ (80058e8 <malloc+0xc>)
 80058de:	4601      	mov	r1, r0
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	f000 b825 	b.w	8005930 <_malloc_r>
 80058e6:	bf00      	nop
 80058e8:	20000020 	.word	0x20000020

080058ec <sbrk_aligned>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	4e0f      	ldr	r6, [pc, #60]	@ (800592c <sbrk_aligned+0x40>)
 80058f0:	460c      	mov	r4, r1
 80058f2:	6831      	ldr	r1, [r6, #0]
 80058f4:	4605      	mov	r5, r0
 80058f6:	b911      	cbnz	r1, 80058fe <sbrk_aligned+0x12>
 80058f8:	f000 fe46 	bl	8006588 <_sbrk_r>
 80058fc:	6030      	str	r0, [r6, #0]
 80058fe:	4621      	mov	r1, r4
 8005900:	4628      	mov	r0, r5
 8005902:	f000 fe41 	bl	8006588 <_sbrk_r>
 8005906:	1c43      	adds	r3, r0, #1
 8005908:	d103      	bne.n	8005912 <sbrk_aligned+0x26>
 800590a:	f04f 34ff 	mov.w	r4, #4294967295
 800590e:	4620      	mov	r0, r4
 8005910:	bd70      	pop	{r4, r5, r6, pc}
 8005912:	1cc4      	adds	r4, r0, #3
 8005914:	f024 0403 	bic.w	r4, r4, #3
 8005918:	42a0      	cmp	r0, r4
 800591a:	d0f8      	beq.n	800590e <sbrk_aligned+0x22>
 800591c:	1a21      	subs	r1, r4, r0
 800591e:	4628      	mov	r0, r5
 8005920:	f000 fe32 	bl	8006588 <_sbrk_r>
 8005924:	3001      	adds	r0, #1
 8005926:	d1f2      	bne.n	800590e <sbrk_aligned+0x22>
 8005928:	e7ef      	b.n	800590a <sbrk_aligned+0x1e>
 800592a:	bf00      	nop
 800592c:	20000968 	.word	0x20000968

08005930 <_malloc_r>:
 8005930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005934:	1ccd      	adds	r5, r1, #3
 8005936:	f025 0503 	bic.w	r5, r5, #3
 800593a:	3508      	adds	r5, #8
 800593c:	2d0c      	cmp	r5, #12
 800593e:	bf38      	it	cc
 8005940:	250c      	movcc	r5, #12
 8005942:	2d00      	cmp	r5, #0
 8005944:	4606      	mov	r6, r0
 8005946:	db01      	blt.n	800594c <_malloc_r+0x1c>
 8005948:	42a9      	cmp	r1, r5
 800594a:	d904      	bls.n	8005956 <_malloc_r+0x26>
 800594c:	230c      	movs	r3, #12
 800594e:	6033      	str	r3, [r6, #0]
 8005950:	2000      	movs	r0, #0
 8005952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005956:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a2c <_malloc_r+0xfc>
 800595a:	f000 f869 	bl	8005a30 <__malloc_lock>
 800595e:	f8d8 3000 	ldr.w	r3, [r8]
 8005962:	461c      	mov	r4, r3
 8005964:	bb44      	cbnz	r4, 80059b8 <_malloc_r+0x88>
 8005966:	4629      	mov	r1, r5
 8005968:	4630      	mov	r0, r6
 800596a:	f7ff ffbf 	bl	80058ec <sbrk_aligned>
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	4604      	mov	r4, r0
 8005972:	d158      	bne.n	8005a26 <_malloc_r+0xf6>
 8005974:	f8d8 4000 	ldr.w	r4, [r8]
 8005978:	4627      	mov	r7, r4
 800597a:	2f00      	cmp	r7, #0
 800597c:	d143      	bne.n	8005a06 <_malloc_r+0xd6>
 800597e:	2c00      	cmp	r4, #0
 8005980:	d04b      	beq.n	8005a1a <_malloc_r+0xea>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	4639      	mov	r1, r7
 8005986:	4630      	mov	r0, r6
 8005988:	eb04 0903 	add.w	r9, r4, r3
 800598c:	f000 fdfc 	bl	8006588 <_sbrk_r>
 8005990:	4581      	cmp	r9, r0
 8005992:	d142      	bne.n	8005a1a <_malloc_r+0xea>
 8005994:	6821      	ldr	r1, [r4, #0]
 8005996:	1a6d      	subs	r5, r5, r1
 8005998:	4629      	mov	r1, r5
 800599a:	4630      	mov	r0, r6
 800599c:	f7ff ffa6 	bl	80058ec <sbrk_aligned>
 80059a0:	3001      	adds	r0, #1
 80059a2:	d03a      	beq.n	8005a1a <_malloc_r+0xea>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	442b      	add	r3, r5
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	f8d8 3000 	ldr.w	r3, [r8]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	bb62      	cbnz	r2, 8005a0c <_malloc_r+0xdc>
 80059b2:	f8c8 7000 	str.w	r7, [r8]
 80059b6:	e00f      	b.n	80059d8 <_malloc_r+0xa8>
 80059b8:	6822      	ldr	r2, [r4, #0]
 80059ba:	1b52      	subs	r2, r2, r5
 80059bc:	d420      	bmi.n	8005a00 <_malloc_r+0xd0>
 80059be:	2a0b      	cmp	r2, #11
 80059c0:	d917      	bls.n	80059f2 <_malloc_r+0xc2>
 80059c2:	1961      	adds	r1, r4, r5
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	6025      	str	r5, [r4, #0]
 80059c8:	bf18      	it	ne
 80059ca:	6059      	strne	r1, [r3, #4]
 80059cc:	6863      	ldr	r3, [r4, #4]
 80059ce:	bf08      	it	eq
 80059d0:	f8c8 1000 	streq.w	r1, [r8]
 80059d4:	5162      	str	r2, [r4, r5]
 80059d6:	604b      	str	r3, [r1, #4]
 80059d8:	4630      	mov	r0, r6
 80059da:	f000 f82f 	bl	8005a3c <__malloc_unlock>
 80059de:	f104 000b 	add.w	r0, r4, #11
 80059e2:	1d23      	adds	r3, r4, #4
 80059e4:	f020 0007 	bic.w	r0, r0, #7
 80059e8:	1ac2      	subs	r2, r0, r3
 80059ea:	bf1c      	itt	ne
 80059ec:	1a1b      	subne	r3, r3, r0
 80059ee:	50a3      	strne	r3, [r4, r2]
 80059f0:	e7af      	b.n	8005952 <_malloc_r+0x22>
 80059f2:	6862      	ldr	r2, [r4, #4]
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	bf0c      	ite	eq
 80059f8:	f8c8 2000 	streq.w	r2, [r8]
 80059fc:	605a      	strne	r2, [r3, #4]
 80059fe:	e7eb      	b.n	80059d8 <_malloc_r+0xa8>
 8005a00:	4623      	mov	r3, r4
 8005a02:	6864      	ldr	r4, [r4, #4]
 8005a04:	e7ae      	b.n	8005964 <_malloc_r+0x34>
 8005a06:	463c      	mov	r4, r7
 8005a08:	687f      	ldr	r7, [r7, #4]
 8005a0a:	e7b6      	b.n	800597a <_malloc_r+0x4a>
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	42a3      	cmp	r3, r4
 8005a12:	d1fb      	bne.n	8005a0c <_malloc_r+0xdc>
 8005a14:	2300      	movs	r3, #0
 8005a16:	6053      	str	r3, [r2, #4]
 8005a18:	e7de      	b.n	80059d8 <_malloc_r+0xa8>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	6033      	str	r3, [r6, #0]
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f000 f80c 	bl	8005a3c <__malloc_unlock>
 8005a24:	e794      	b.n	8005950 <_malloc_r+0x20>
 8005a26:	6005      	str	r5, [r0, #0]
 8005a28:	e7d6      	b.n	80059d8 <_malloc_r+0xa8>
 8005a2a:	bf00      	nop
 8005a2c:	2000096c 	.word	0x2000096c

08005a30 <__malloc_lock>:
 8005a30:	4801      	ldr	r0, [pc, #4]	@ (8005a38 <__malloc_lock+0x8>)
 8005a32:	f7ff b8b8 	b.w	8004ba6 <__retarget_lock_acquire_recursive>
 8005a36:	bf00      	nop
 8005a38:	20000964 	.word	0x20000964

08005a3c <__malloc_unlock>:
 8005a3c:	4801      	ldr	r0, [pc, #4]	@ (8005a44 <__malloc_unlock+0x8>)
 8005a3e:	f7ff b8b3 	b.w	8004ba8 <__retarget_lock_release_recursive>
 8005a42:	bf00      	nop
 8005a44:	20000964 	.word	0x20000964

08005a48 <_Balloc>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	69c6      	ldr	r6, [r0, #28]
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	460d      	mov	r5, r1
 8005a50:	b976      	cbnz	r6, 8005a70 <_Balloc+0x28>
 8005a52:	2010      	movs	r0, #16
 8005a54:	f7ff ff42 	bl	80058dc <malloc>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	61e0      	str	r0, [r4, #28]
 8005a5c:	b920      	cbnz	r0, 8005a68 <_Balloc+0x20>
 8005a5e:	4b18      	ldr	r3, [pc, #96]	@ (8005ac0 <_Balloc+0x78>)
 8005a60:	4818      	ldr	r0, [pc, #96]	@ (8005ac4 <_Balloc+0x7c>)
 8005a62:	216b      	movs	r1, #107	@ 0x6b
 8005a64:	f000 fdae 	bl	80065c4 <__assert_func>
 8005a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a6c:	6006      	str	r6, [r0, #0]
 8005a6e:	60c6      	str	r6, [r0, #12]
 8005a70:	69e6      	ldr	r6, [r4, #28]
 8005a72:	68f3      	ldr	r3, [r6, #12]
 8005a74:	b183      	cbz	r3, 8005a98 <_Balloc+0x50>
 8005a76:	69e3      	ldr	r3, [r4, #28]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a7e:	b9b8      	cbnz	r0, 8005ab0 <_Balloc+0x68>
 8005a80:	2101      	movs	r1, #1
 8005a82:	fa01 f605 	lsl.w	r6, r1, r5
 8005a86:	1d72      	adds	r2, r6, #5
 8005a88:	0092      	lsls	r2, r2, #2
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 fdb8 	bl	8006600 <_calloc_r>
 8005a90:	b160      	cbz	r0, 8005aac <_Balloc+0x64>
 8005a92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a96:	e00e      	b.n	8005ab6 <_Balloc+0x6e>
 8005a98:	2221      	movs	r2, #33	@ 0x21
 8005a9a:	2104      	movs	r1, #4
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 fdaf 	bl	8006600 <_calloc_r>
 8005aa2:	69e3      	ldr	r3, [r4, #28]
 8005aa4:	60f0      	str	r0, [r6, #12]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e4      	bne.n	8005a76 <_Balloc+0x2e>
 8005aac:	2000      	movs	r0, #0
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	6802      	ldr	r2, [r0, #0]
 8005ab2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005abc:	e7f7      	b.n	8005aae <_Balloc+0x66>
 8005abe:	bf00      	nop
 8005ac0:	08007cba 	.word	0x08007cba
 8005ac4:	08007d3a 	.word	0x08007d3a

08005ac8 <_Bfree>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	69c6      	ldr	r6, [r0, #28]
 8005acc:	4605      	mov	r5, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	b976      	cbnz	r6, 8005af0 <_Bfree+0x28>
 8005ad2:	2010      	movs	r0, #16
 8005ad4:	f7ff ff02 	bl	80058dc <malloc>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	61e8      	str	r0, [r5, #28]
 8005adc:	b920      	cbnz	r0, 8005ae8 <_Bfree+0x20>
 8005ade:	4b09      	ldr	r3, [pc, #36]	@ (8005b04 <_Bfree+0x3c>)
 8005ae0:	4809      	ldr	r0, [pc, #36]	@ (8005b08 <_Bfree+0x40>)
 8005ae2:	218f      	movs	r1, #143	@ 0x8f
 8005ae4:	f000 fd6e 	bl	80065c4 <__assert_func>
 8005ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005aec:	6006      	str	r6, [r0, #0]
 8005aee:	60c6      	str	r6, [r0, #12]
 8005af0:	b13c      	cbz	r4, 8005b02 <_Bfree+0x3a>
 8005af2:	69eb      	ldr	r3, [r5, #28]
 8005af4:	6862      	ldr	r2, [r4, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005afc:	6021      	str	r1, [r4, #0]
 8005afe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	08007cba 	.word	0x08007cba
 8005b08:	08007d3a 	.word	0x08007d3a

08005b0c <__multadd>:
 8005b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b10:	690d      	ldr	r5, [r1, #16]
 8005b12:	4607      	mov	r7, r0
 8005b14:	460c      	mov	r4, r1
 8005b16:	461e      	mov	r6, r3
 8005b18:	f101 0c14 	add.w	ip, r1, #20
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f8dc 3000 	ldr.w	r3, [ip]
 8005b22:	b299      	uxth	r1, r3
 8005b24:	fb02 6101 	mla	r1, r2, r1, r6
 8005b28:	0c1e      	lsrs	r6, r3, #16
 8005b2a:	0c0b      	lsrs	r3, r1, #16
 8005b2c:	fb02 3306 	mla	r3, r2, r6, r3
 8005b30:	b289      	uxth	r1, r1
 8005b32:	3001      	adds	r0, #1
 8005b34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b38:	4285      	cmp	r5, r0
 8005b3a:	f84c 1b04 	str.w	r1, [ip], #4
 8005b3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b42:	dcec      	bgt.n	8005b1e <__multadd+0x12>
 8005b44:	b30e      	cbz	r6, 8005b8a <__multadd+0x7e>
 8005b46:	68a3      	ldr	r3, [r4, #8]
 8005b48:	42ab      	cmp	r3, r5
 8005b4a:	dc19      	bgt.n	8005b80 <__multadd+0x74>
 8005b4c:	6861      	ldr	r1, [r4, #4]
 8005b4e:	4638      	mov	r0, r7
 8005b50:	3101      	adds	r1, #1
 8005b52:	f7ff ff79 	bl	8005a48 <_Balloc>
 8005b56:	4680      	mov	r8, r0
 8005b58:	b928      	cbnz	r0, 8005b66 <__multadd+0x5a>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b90 <__multadd+0x84>)
 8005b5e:	480d      	ldr	r0, [pc, #52]	@ (8005b94 <__multadd+0x88>)
 8005b60:	21ba      	movs	r1, #186	@ 0xba
 8005b62:	f000 fd2f 	bl	80065c4 <__assert_func>
 8005b66:	6922      	ldr	r2, [r4, #16]
 8005b68:	3202      	adds	r2, #2
 8005b6a:	f104 010c 	add.w	r1, r4, #12
 8005b6e:	0092      	lsls	r2, r2, #2
 8005b70:	300c      	adds	r0, #12
 8005b72:	f000 fd19 	bl	80065a8 <memcpy>
 8005b76:	4621      	mov	r1, r4
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f7ff ffa5 	bl	8005ac8 <_Bfree>
 8005b7e:	4644      	mov	r4, r8
 8005b80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b84:	3501      	adds	r5, #1
 8005b86:	615e      	str	r6, [r3, #20]
 8005b88:	6125      	str	r5, [r4, #16]
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b90:	08007d29 	.word	0x08007d29
 8005b94:	08007d3a 	.word	0x08007d3a

08005b98 <__hi0bits>:
 8005b98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	bf36      	itet	cc
 8005ba0:	0403      	lslcc	r3, r0, #16
 8005ba2:	2000      	movcs	r0, #0
 8005ba4:	2010      	movcc	r0, #16
 8005ba6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005baa:	bf3c      	itt	cc
 8005bac:	021b      	lslcc	r3, r3, #8
 8005bae:	3008      	addcc	r0, #8
 8005bb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bb4:	bf3c      	itt	cc
 8005bb6:	011b      	lslcc	r3, r3, #4
 8005bb8:	3004      	addcc	r0, #4
 8005bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bbe:	bf3c      	itt	cc
 8005bc0:	009b      	lslcc	r3, r3, #2
 8005bc2:	3002      	addcc	r0, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	db05      	blt.n	8005bd4 <__hi0bits+0x3c>
 8005bc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005bcc:	f100 0001 	add.w	r0, r0, #1
 8005bd0:	bf08      	it	eq
 8005bd2:	2020      	moveq	r0, #32
 8005bd4:	4770      	bx	lr

08005bd6 <__lo0bits>:
 8005bd6:	6803      	ldr	r3, [r0, #0]
 8005bd8:	4602      	mov	r2, r0
 8005bda:	f013 0007 	ands.w	r0, r3, #7
 8005bde:	d00b      	beq.n	8005bf8 <__lo0bits+0x22>
 8005be0:	07d9      	lsls	r1, r3, #31
 8005be2:	d421      	bmi.n	8005c28 <__lo0bits+0x52>
 8005be4:	0798      	lsls	r0, r3, #30
 8005be6:	bf49      	itett	mi
 8005be8:	085b      	lsrmi	r3, r3, #1
 8005bea:	089b      	lsrpl	r3, r3, #2
 8005bec:	2001      	movmi	r0, #1
 8005bee:	6013      	strmi	r3, [r2, #0]
 8005bf0:	bf5c      	itt	pl
 8005bf2:	6013      	strpl	r3, [r2, #0]
 8005bf4:	2002      	movpl	r0, #2
 8005bf6:	4770      	bx	lr
 8005bf8:	b299      	uxth	r1, r3
 8005bfa:	b909      	cbnz	r1, 8005c00 <__lo0bits+0x2a>
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	2010      	movs	r0, #16
 8005c00:	b2d9      	uxtb	r1, r3
 8005c02:	b909      	cbnz	r1, 8005c08 <__lo0bits+0x32>
 8005c04:	3008      	adds	r0, #8
 8005c06:	0a1b      	lsrs	r3, r3, #8
 8005c08:	0719      	lsls	r1, r3, #28
 8005c0a:	bf04      	itt	eq
 8005c0c:	091b      	lsreq	r3, r3, #4
 8005c0e:	3004      	addeq	r0, #4
 8005c10:	0799      	lsls	r1, r3, #30
 8005c12:	bf04      	itt	eq
 8005c14:	089b      	lsreq	r3, r3, #2
 8005c16:	3002      	addeq	r0, #2
 8005c18:	07d9      	lsls	r1, r3, #31
 8005c1a:	d403      	bmi.n	8005c24 <__lo0bits+0x4e>
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	f100 0001 	add.w	r0, r0, #1
 8005c22:	d003      	beq.n	8005c2c <__lo0bits+0x56>
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	4770      	bx	lr
 8005c28:	2000      	movs	r0, #0
 8005c2a:	4770      	bx	lr
 8005c2c:	2020      	movs	r0, #32
 8005c2e:	4770      	bx	lr

08005c30 <__i2b>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	460c      	mov	r4, r1
 8005c34:	2101      	movs	r1, #1
 8005c36:	f7ff ff07 	bl	8005a48 <_Balloc>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	b928      	cbnz	r0, 8005c4a <__i2b+0x1a>
 8005c3e:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <__i2b+0x24>)
 8005c40:	4805      	ldr	r0, [pc, #20]	@ (8005c58 <__i2b+0x28>)
 8005c42:	f240 1145 	movw	r1, #325	@ 0x145
 8005c46:	f000 fcbd 	bl	80065c4 <__assert_func>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	6144      	str	r4, [r0, #20]
 8005c4e:	6103      	str	r3, [r0, #16]
 8005c50:	bd10      	pop	{r4, pc}
 8005c52:	bf00      	nop
 8005c54:	08007d29 	.word	0x08007d29
 8005c58:	08007d3a 	.word	0x08007d3a

08005c5c <__multiply>:
 8005c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	4614      	mov	r4, r2
 8005c62:	690a      	ldr	r2, [r1, #16]
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	bfa8      	it	ge
 8005c6a:	4623      	movge	r3, r4
 8005c6c:	460f      	mov	r7, r1
 8005c6e:	bfa4      	itt	ge
 8005c70:	460c      	movge	r4, r1
 8005c72:	461f      	movge	r7, r3
 8005c74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005c78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005c7c:	68a3      	ldr	r3, [r4, #8]
 8005c7e:	6861      	ldr	r1, [r4, #4]
 8005c80:	eb0a 0609 	add.w	r6, sl, r9
 8005c84:	42b3      	cmp	r3, r6
 8005c86:	b085      	sub	sp, #20
 8005c88:	bfb8      	it	lt
 8005c8a:	3101      	addlt	r1, #1
 8005c8c:	f7ff fedc 	bl	8005a48 <_Balloc>
 8005c90:	b930      	cbnz	r0, 8005ca0 <__multiply+0x44>
 8005c92:	4602      	mov	r2, r0
 8005c94:	4b44      	ldr	r3, [pc, #272]	@ (8005da8 <__multiply+0x14c>)
 8005c96:	4845      	ldr	r0, [pc, #276]	@ (8005dac <__multiply+0x150>)
 8005c98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005c9c:	f000 fc92 	bl	80065c4 <__assert_func>
 8005ca0:	f100 0514 	add.w	r5, r0, #20
 8005ca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ca8:	462b      	mov	r3, r5
 8005caa:	2200      	movs	r2, #0
 8005cac:	4543      	cmp	r3, r8
 8005cae:	d321      	bcc.n	8005cf4 <__multiply+0x98>
 8005cb0:	f107 0114 	add.w	r1, r7, #20
 8005cb4:	f104 0214 	add.w	r2, r4, #20
 8005cb8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005cbc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005cc0:	9302      	str	r3, [sp, #8]
 8005cc2:	1b13      	subs	r3, r2, r4
 8005cc4:	3b15      	subs	r3, #21
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	3304      	adds	r3, #4
 8005ccc:	f104 0715 	add.w	r7, r4, #21
 8005cd0:	42ba      	cmp	r2, r7
 8005cd2:	bf38      	it	cc
 8005cd4:	2304      	movcc	r3, #4
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	9b02      	ldr	r3, [sp, #8]
 8005cda:	9103      	str	r1, [sp, #12]
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	d80c      	bhi.n	8005cfa <__multiply+0x9e>
 8005ce0:	2e00      	cmp	r6, #0
 8005ce2:	dd03      	ble.n	8005cec <__multiply+0x90>
 8005ce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d05b      	beq.n	8005da4 <__multiply+0x148>
 8005cec:	6106      	str	r6, [r0, #16]
 8005cee:	b005      	add	sp, #20
 8005cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf4:	f843 2b04 	str.w	r2, [r3], #4
 8005cf8:	e7d8      	b.n	8005cac <__multiply+0x50>
 8005cfa:	f8b1 a000 	ldrh.w	sl, [r1]
 8005cfe:	f1ba 0f00 	cmp.w	sl, #0
 8005d02:	d024      	beq.n	8005d4e <__multiply+0xf2>
 8005d04:	f104 0e14 	add.w	lr, r4, #20
 8005d08:	46a9      	mov	r9, r5
 8005d0a:	f04f 0c00 	mov.w	ip, #0
 8005d0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d12:	f8d9 3000 	ldr.w	r3, [r9]
 8005d16:	fa1f fb87 	uxth.w	fp, r7
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005d20:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005d24:	f8d9 7000 	ldr.w	r7, [r9]
 8005d28:	4463      	add	r3, ip
 8005d2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d2e:	fb0a c70b 	mla	r7, sl, fp, ip
 8005d32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d3c:	4572      	cmp	r2, lr
 8005d3e:	f849 3b04 	str.w	r3, [r9], #4
 8005d42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d46:	d8e2      	bhi.n	8005d0e <__multiply+0xb2>
 8005d48:	9b01      	ldr	r3, [sp, #4]
 8005d4a:	f845 c003 	str.w	ip, [r5, r3]
 8005d4e:	9b03      	ldr	r3, [sp, #12]
 8005d50:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005d54:	3104      	adds	r1, #4
 8005d56:	f1b9 0f00 	cmp.w	r9, #0
 8005d5a:	d021      	beq.n	8005da0 <__multiply+0x144>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	f104 0c14 	add.w	ip, r4, #20
 8005d62:	46ae      	mov	lr, r5
 8005d64:	f04f 0a00 	mov.w	sl, #0
 8005d68:	f8bc b000 	ldrh.w	fp, [ip]
 8005d6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005d70:	fb09 770b 	mla	r7, r9, fp, r7
 8005d74:	4457      	add	r7, sl
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d7c:	f84e 3b04 	str.w	r3, [lr], #4
 8005d80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d88:	f8be 3000 	ldrh.w	r3, [lr]
 8005d8c:	fb09 330a 	mla	r3, r9, sl, r3
 8005d90:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005d94:	4562      	cmp	r2, ip
 8005d96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d9a:	d8e5      	bhi.n	8005d68 <__multiply+0x10c>
 8005d9c:	9f01      	ldr	r7, [sp, #4]
 8005d9e:	51eb      	str	r3, [r5, r7]
 8005da0:	3504      	adds	r5, #4
 8005da2:	e799      	b.n	8005cd8 <__multiply+0x7c>
 8005da4:	3e01      	subs	r6, #1
 8005da6:	e79b      	b.n	8005ce0 <__multiply+0x84>
 8005da8:	08007d29 	.word	0x08007d29
 8005dac:	08007d3a 	.word	0x08007d3a

08005db0 <__pow5mult>:
 8005db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db4:	4615      	mov	r5, r2
 8005db6:	f012 0203 	ands.w	r2, r2, #3
 8005dba:	4607      	mov	r7, r0
 8005dbc:	460e      	mov	r6, r1
 8005dbe:	d007      	beq.n	8005dd0 <__pow5mult+0x20>
 8005dc0:	4c25      	ldr	r4, [pc, #148]	@ (8005e58 <__pow5mult+0xa8>)
 8005dc2:	3a01      	subs	r2, #1
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dca:	f7ff fe9f 	bl	8005b0c <__multadd>
 8005dce:	4606      	mov	r6, r0
 8005dd0:	10ad      	asrs	r5, r5, #2
 8005dd2:	d03d      	beq.n	8005e50 <__pow5mult+0xa0>
 8005dd4:	69fc      	ldr	r4, [r7, #28]
 8005dd6:	b97c      	cbnz	r4, 8005df8 <__pow5mult+0x48>
 8005dd8:	2010      	movs	r0, #16
 8005dda:	f7ff fd7f 	bl	80058dc <malloc>
 8005dde:	4602      	mov	r2, r0
 8005de0:	61f8      	str	r0, [r7, #28]
 8005de2:	b928      	cbnz	r0, 8005df0 <__pow5mult+0x40>
 8005de4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e5c <__pow5mult+0xac>)
 8005de6:	481e      	ldr	r0, [pc, #120]	@ (8005e60 <__pow5mult+0xb0>)
 8005de8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005dec:	f000 fbea 	bl	80065c4 <__assert_func>
 8005df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005df4:	6004      	str	r4, [r0, #0]
 8005df6:	60c4      	str	r4, [r0, #12]
 8005df8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e00:	b94c      	cbnz	r4, 8005e16 <__pow5mult+0x66>
 8005e02:	f240 2171 	movw	r1, #625	@ 0x271
 8005e06:	4638      	mov	r0, r7
 8005e08:	f7ff ff12 	bl	8005c30 <__i2b>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e12:	4604      	mov	r4, r0
 8005e14:	6003      	str	r3, [r0, #0]
 8005e16:	f04f 0900 	mov.w	r9, #0
 8005e1a:	07eb      	lsls	r3, r5, #31
 8005e1c:	d50a      	bpl.n	8005e34 <__pow5mult+0x84>
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4622      	mov	r2, r4
 8005e22:	4638      	mov	r0, r7
 8005e24:	f7ff ff1a 	bl	8005c5c <__multiply>
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4680      	mov	r8, r0
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7ff fe4b 	bl	8005ac8 <_Bfree>
 8005e32:	4646      	mov	r6, r8
 8005e34:	106d      	asrs	r5, r5, #1
 8005e36:	d00b      	beq.n	8005e50 <__pow5mult+0xa0>
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	b938      	cbnz	r0, 8005e4c <__pow5mult+0x9c>
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4638      	mov	r0, r7
 8005e42:	f7ff ff0b 	bl	8005c5c <__multiply>
 8005e46:	6020      	str	r0, [r4, #0]
 8005e48:	f8c0 9000 	str.w	r9, [r0]
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	e7e4      	b.n	8005e1a <__pow5mult+0x6a>
 8005e50:	4630      	mov	r0, r6
 8005e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e56:	bf00      	nop
 8005e58:	08007d94 	.word	0x08007d94
 8005e5c:	08007cba 	.word	0x08007cba
 8005e60:	08007d3a 	.word	0x08007d3a

08005e64 <__lshift>:
 8005e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	460c      	mov	r4, r1
 8005e6a:	6849      	ldr	r1, [r1, #4]
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e72:	68a3      	ldr	r3, [r4, #8]
 8005e74:	4607      	mov	r7, r0
 8005e76:	4691      	mov	r9, r2
 8005e78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e7c:	f108 0601 	add.w	r6, r8, #1
 8005e80:	42b3      	cmp	r3, r6
 8005e82:	db0b      	blt.n	8005e9c <__lshift+0x38>
 8005e84:	4638      	mov	r0, r7
 8005e86:	f7ff fddf 	bl	8005a48 <_Balloc>
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	b948      	cbnz	r0, 8005ea2 <__lshift+0x3e>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	4b28      	ldr	r3, [pc, #160]	@ (8005f34 <__lshift+0xd0>)
 8005e92:	4829      	ldr	r0, [pc, #164]	@ (8005f38 <__lshift+0xd4>)
 8005e94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005e98:	f000 fb94 	bl	80065c4 <__assert_func>
 8005e9c:	3101      	adds	r1, #1
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	e7ee      	b.n	8005e80 <__lshift+0x1c>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f100 0114 	add.w	r1, r0, #20
 8005ea8:	f100 0210 	add.w	r2, r0, #16
 8005eac:	4618      	mov	r0, r3
 8005eae:	4553      	cmp	r3, sl
 8005eb0:	db33      	blt.n	8005f1a <__lshift+0xb6>
 8005eb2:	6920      	ldr	r0, [r4, #16]
 8005eb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005eb8:	f104 0314 	add.w	r3, r4, #20
 8005ebc:	f019 091f 	ands.w	r9, r9, #31
 8005ec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ec4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ec8:	d02b      	beq.n	8005f22 <__lshift+0xbe>
 8005eca:	f1c9 0e20 	rsb	lr, r9, #32
 8005ece:	468a      	mov	sl, r1
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	fa00 f009 	lsl.w	r0, r0, r9
 8005ed8:	4310      	orrs	r0, r2
 8005eda:	f84a 0b04 	str.w	r0, [sl], #4
 8005ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ee2:	459c      	cmp	ip, r3
 8005ee4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ee8:	d8f3      	bhi.n	8005ed2 <__lshift+0x6e>
 8005eea:	ebac 0304 	sub.w	r3, ip, r4
 8005eee:	3b15      	subs	r3, #21
 8005ef0:	f023 0303 	bic.w	r3, r3, #3
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	f104 0015 	add.w	r0, r4, #21
 8005efa:	4584      	cmp	ip, r0
 8005efc:	bf38      	it	cc
 8005efe:	2304      	movcc	r3, #4
 8005f00:	50ca      	str	r2, [r1, r3]
 8005f02:	b10a      	cbz	r2, 8005f08 <__lshift+0xa4>
 8005f04:	f108 0602 	add.w	r6, r8, #2
 8005f08:	3e01      	subs	r6, #1
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	612e      	str	r6, [r5, #16]
 8005f0e:	4621      	mov	r1, r4
 8005f10:	f7ff fdda 	bl	8005ac8 <_Bfree>
 8005f14:	4628      	mov	r0, r5
 8005f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f1e:	3301      	adds	r3, #1
 8005f20:	e7c5      	b.n	8005eae <__lshift+0x4a>
 8005f22:	3904      	subs	r1, #4
 8005f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f28:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f2c:	459c      	cmp	ip, r3
 8005f2e:	d8f9      	bhi.n	8005f24 <__lshift+0xc0>
 8005f30:	e7ea      	b.n	8005f08 <__lshift+0xa4>
 8005f32:	bf00      	nop
 8005f34:	08007d29 	.word	0x08007d29
 8005f38:	08007d3a 	.word	0x08007d3a

08005f3c <__mcmp>:
 8005f3c:	690a      	ldr	r2, [r1, #16]
 8005f3e:	4603      	mov	r3, r0
 8005f40:	6900      	ldr	r0, [r0, #16]
 8005f42:	1a80      	subs	r0, r0, r2
 8005f44:	b530      	push	{r4, r5, lr}
 8005f46:	d10e      	bne.n	8005f66 <__mcmp+0x2a>
 8005f48:	3314      	adds	r3, #20
 8005f4a:	3114      	adds	r1, #20
 8005f4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f5c:	4295      	cmp	r5, r2
 8005f5e:	d003      	beq.n	8005f68 <__mcmp+0x2c>
 8005f60:	d205      	bcs.n	8005f6e <__mcmp+0x32>
 8005f62:	f04f 30ff 	mov.w	r0, #4294967295
 8005f66:	bd30      	pop	{r4, r5, pc}
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	d3f3      	bcc.n	8005f54 <__mcmp+0x18>
 8005f6c:	e7fb      	b.n	8005f66 <__mcmp+0x2a>
 8005f6e:	2001      	movs	r0, #1
 8005f70:	e7f9      	b.n	8005f66 <__mcmp+0x2a>
	...

08005f74 <__mdiff>:
 8005f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f78:	4689      	mov	r9, r1
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	4648      	mov	r0, r9
 8005f80:	4614      	mov	r4, r2
 8005f82:	f7ff ffdb 	bl	8005f3c <__mcmp>
 8005f86:	1e05      	subs	r5, r0, #0
 8005f88:	d112      	bne.n	8005fb0 <__mdiff+0x3c>
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f7ff fd5b 	bl	8005a48 <_Balloc>
 8005f92:	4602      	mov	r2, r0
 8005f94:	b928      	cbnz	r0, 8005fa2 <__mdiff+0x2e>
 8005f96:	4b3f      	ldr	r3, [pc, #252]	@ (8006094 <__mdiff+0x120>)
 8005f98:	f240 2137 	movw	r1, #567	@ 0x237
 8005f9c:	483e      	ldr	r0, [pc, #248]	@ (8006098 <__mdiff+0x124>)
 8005f9e:	f000 fb11 	bl	80065c4 <__assert_func>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fa8:	4610      	mov	r0, r2
 8005faa:	b003      	add	sp, #12
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb0:	bfbc      	itt	lt
 8005fb2:	464b      	movlt	r3, r9
 8005fb4:	46a1      	movlt	r9, r4
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005fbc:	bfba      	itte	lt
 8005fbe:	461c      	movlt	r4, r3
 8005fc0:	2501      	movlt	r5, #1
 8005fc2:	2500      	movge	r5, #0
 8005fc4:	f7ff fd40 	bl	8005a48 <_Balloc>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	b918      	cbnz	r0, 8005fd4 <__mdiff+0x60>
 8005fcc:	4b31      	ldr	r3, [pc, #196]	@ (8006094 <__mdiff+0x120>)
 8005fce:	f240 2145 	movw	r1, #581	@ 0x245
 8005fd2:	e7e3      	b.n	8005f9c <__mdiff+0x28>
 8005fd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005fd8:	6926      	ldr	r6, [r4, #16]
 8005fda:	60c5      	str	r5, [r0, #12]
 8005fdc:	f109 0310 	add.w	r3, r9, #16
 8005fe0:	f109 0514 	add.w	r5, r9, #20
 8005fe4:	f104 0e14 	add.w	lr, r4, #20
 8005fe8:	f100 0b14 	add.w	fp, r0, #20
 8005fec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005ff0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	46d9      	mov	r9, fp
 8005ff8:	f04f 0c00 	mov.w	ip, #0
 8005ffc:	9b01      	ldr	r3, [sp, #4]
 8005ffe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006002:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006006:	9301      	str	r3, [sp, #4]
 8006008:	fa1f f38a 	uxth.w	r3, sl
 800600c:	4619      	mov	r1, r3
 800600e:	b283      	uxth	r3, r0
 8006010:	1acb      	subs	r3, r1, r3
 8006012:	0c00      	lsrs	r0, r0, #16
 8006014:	4463      	add	r3, ip
 8006016:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800601a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800601e:	b29b      	uxth	r3, r3
 8006020:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006024:	4576      	cmp	r6, lr
 8006026:	f849 3b04 	str.w	r3, [r9], #4
 800602a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800602e:	d8e5      	bhi.n	8005ffc <__mdiff+0x88>
 8006030:	1b33      	subs	r3, r6, r4
 8006032:	3b15      	subs	r3, #21
 8006034:	f023 0303 	bic.w	r3, r3, #3
 8006038:	3415      	adds	r4, #21
 800603a:	3304      	adds	r3, #4
 800603c:	42a6      	cmp	r6, r4
 800603e:	bf38      	it	cc
 8006040:	2304      	movcc	r3, #4
 8006042:	441d      	add	r5, r3
 8006044:	445b      	add	r3, fp
 8006046:	461e      	mov	r6, r3
 8006048:	462c      	mov	r4, r5
 800604a:	4544      	cmp	r4, r8
 800604c:	d30e      	bcc.n	800606c <__mdiff+0xf8>
 800604e:	f108 0103 	add.w	r1, r8, #3
 8006052:	1b49      	subs	r1, r1, r5
 8006054:	f021 0103 	bic.w	r1, r1, #3
 8006058:	3d03      	subs	r5, #3
 800605a:	45a8      	cmp	r8, r5
 800605c:	bf38      	it	cc
 800605e:	2100      	movcc	r1, #0
 8006060:	440b      	add	r3, r1
 8006062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006066:	b191      	cbz	r1, 800608e <__mdiff+0x11a>
 8006068:	6117      	str	r7, [r2, #16]
 800606a:	e79d      	b.n	8005fa8 <__mdiff+0x34>
 800606c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006070:	46e6      	mov	lr, ip
 8006072:	0c08      	lsrs	r0, r1, #16
 8006074:	fa1c fc81 	uxtah	ip, ip, r1
 8006078:	4471      	add	r1, lr
 800607a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800607e:	b289      	uxth	r1, r1
 8006080:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006084:	f846 1b04 	str.w	r1, [r6], #4
 8006088:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800608c:	e7dd      	b.n	800604a <__mdiff+0xd6>
 800608e:	3f01      	subs	r7, #1
 8006090:	e7e7      	b.n	8006062 <__mdiff+0xee>
 8006092:	bf00      	nop
 8006094:	08007d29 	.word	0x08007d29
 8006098:	08007d3a 	.word	0x08007d3a

0800609c <__d2b>:
 800609c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060a0:	460f      	mov	r7, r1
 80060a2:	2101      	movs	r1, #1
 80060a4:	ec59 8b10 	vmov	r8, r9, d0
 80060a8:	4616      	mov	r6, r2
 80060aa:	f7ff fccd 	bl	8005a48 <_Balloc>
 80060ae:	4604      	mov	r4, r0
 80060b0:	b930      	cbnz	r0, 80060c0 <__d2b+0x24>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4b23      	ldr	r3, [pc, #140]	@ (8006144 <__d2b+0xa8>)
 80060b6:	4824      	ldr	r0, [pc, #144]	@ (8006148 <__d2b+0xac>)
 80060b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80060bc:	f000 fa82 	bl	80065c4 <__assert_func>
 80060c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80060c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060c8:	b10d      	cbz	r5, 80060ce <__d2b+0x32>
 80060ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	f1b8 0300 	subs.w	r3, r8, #0
 80060d4:	d023      	beq.n	800611e <__d2b+0x82>
 80060d6:	4668      	mov	r0, sp
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	f7ff fd7c 	bl	8005bd6 <__lo0bits>
 80060de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80060e2:	b1d0      	cbz	r0, 800611a <__d2b+0x7e>
 80060e4:	f1c0 0320 	rsb	r3, r0, #32
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	430b      	orrs	r3, r1
 80060ee:	40c2      	lsrs	r2, r0
 80060f0:	6163      	str	r3, [r4, #20]
 80060f2:	9201      	str	r2, [sp, #4]
 80060f4:	9b01      	ldr	r3, [sp, #4]
 80060f6:	61a3      	str	r3, [r4, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bf0c      	ite	eq
 80060fc:	2201      	moveq	r2, #1
 80060fe:	2202      	movne	r2, #2
 8006100:	6122      	str	r2, [r4, #16]
 8006102:	b1a5      	cbz	r5, 800612e <__d2b+0x92>
 8006104:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006108:	4405      	add	r5, r0
 800610a:	603d      	str	r5, [r7, #0]
 800610c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006110:	6030      	str	r0, [r6, #0]
 8006112:	4620      	mov	r0, r4
 8006114:	b003      	add	sp, #12
 8006116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800611a:	6161      	str	r1, [r4, #20]
 800611c:	e7ea      	b.n	80060f4 <__d2b+0x58>
 800611e:	a801      	add	r0, sp, #4
 8006120:	f7ff fd59 	bl	8005bd6 <__lo0bits>
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	6163      	str	r3, [r4, #20]
 8006128:	3020      	adds	r0, #32
 800612a:	2201      	movs	r2, #1
 800612c:	e7e8      	b.n	8006100 <__d2b+0x64>
 800612e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006132:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006136:	6038      	str	r0, [r7, #0]
 8006138:	6918      	ldr	r0, [r3, #16]
 800613a:	f7ff fd2d 	bl	8005b98 <__hi0bits>
 800613e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006142:	e7e5      	b.n	8006110 <__d2b+0x74>
 8006144:	08007d29 	.word	0x08007d29
 8006148:	08007d3a 	.word	0x08007d3a

0800614c <__ssputs_r>:
 800614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	688e      	ldr	r6, [r1, #8]
 8006152:	461f      	mov	r7, r3
 8006154:	42be      	cmp	r6, r7
 8006156:	680b      	ldr	r3, [r1, #0]
 8006158:	4682      	mov	sl, r0
 800615a:	460c      	mov	r4, r1
 800615c:	4690      	mov	r8, r2
 800615e:	d82d      	bhi.n	80061bc <__ssputs_r+0x70>
 8006160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006164:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006168:	d026      	beq.n	80061b8 <__ssputs_r+0x6c>
 800616a:	6965      	ldr	r5, [r4, #20]
 800616c:	6909      	ldr	r1, [r1, #16]
 800616e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006172:	eba3 0901 	sub.w	r9, r3, r1
 8006176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800617a:	1c7b      	adds	r3, r7, #1
 800617c:	444b      	add	r3, r9
 800617e:	106d      	asrs	r5, r5, #1
 8006180:	429d      	cmp	r5, r3
 8006182:	bf38      	it	cc
 8006184:	461d      	movcc	r5, r3
 8006186:	0553      	lsls	r3, r2, #21
 8006188:	d527      	bpl.n	80061da <__ssputs_r+0x8e>
 800618a:	4629      	mov	r1, r5
 800618c:	f7ff fbd0 	bl	8005930 <_malloc_r>
 8006190:	4606      	mov	r6, r0
 8006192:	b360      	cbz	r0, 80061ee <__ssputs_r+0xa2>
 8006194:	6921      	ldr	r1, [r4, #16]
 8006196:	464a      	mov	r2, r9
 8006198:	f000 fa06 	bl	80065a8 <memcpy>
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a6:	81a3      	strh	r3, [r4, #12]
 80061a8:	6126      	str	r6, [r4, #16]
 80061aa:	6165      	str	r5, [r4, #20]
 80061ac:	444e      	add	r6, r9
 80061ae:	eba5 0509 	sub.w	r5, r5, r9
 80061b2:	6026      	str	r6, [r4, #0]
 80061b4:	60a5      	str	r5, [r4, #8]
 80061b6:	463e      	mov	r6, r7
 80061b8:	42be      	cmp	r6, r7
 80061ba:	d900      	bls.n	80061be <__ssputs_r+0x72>
 80061bc:	463e      	mov	r6, r7
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	4632      	mov	r2, r6
 80061c2:	4641      	mov	r1, r8
 80061c4:	f000 f9c6 	bl	8006554 <memmove>
 80061c8:	68a3      	ldr	r3, [r4, #8]
 80061ca:	1b9b      	subs	r3, r3, r6
 80061cc:	60a3      	str	r3, [r4, #8]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	4433      	add	r3, r6
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	2000      	movs	r0, #0
 80061d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061da:	462a      	mov	r2, r5
 80061dc:	f000 fa36 	bl	800664c <_realloc_r>
 80061e0:	4606      	mov	r6, r0
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d1e0      	bne.n	80061a8 <__ssputs_r+0x5c>
 80061e6:	6921      	ldr	r1, [r4, #16]
 80061e8:	4650      	mov	r0, sl
 80061ea:	f7ff fb2d 	bl	8005848 <_free_r>
 80061ee:	230c      	movs	r3, #12
 80061f0:	f8ca 3000 	str.w	r3, [sl]
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061fa:	81a3      	strh	r3, [r4, #12]
 80061fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006200:	e7e9      	b.n	80061d6 <__ssputs_r+0x8a>
	...

08006204 <_svfiprintf_r>:
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	4698      	mov	r8, r3
 800620a:	898b      	ldrh	r3, [r1, #12]
 800620c:	061b      	lsls	r3, r3, #24
 800620e:	b09d      	sub	sp, #116	@ 0x74
 8006210:	4607      	mov	r7, r0
 8006212:	460d      	mov	r5, r1
 8006214:	4614      	mov	r4, r2
 8006216:	d510      	bpl.n	800623a <_svfiprintf_r+0x36>
 8006218:	690b      	ldr	r3, [r1, #16]
 800621a:	b973      	cbnz	r3, 800623a <_svfiprintf_r+0x36>
 800621c:	2140      	movs	r1, #64	@ 0x40
 800621e:	f7ff fb87 	bl	8005930 <_malloc_r>
 8006222:	6028      	str	r0, [r5, #0]
 8006224:	6128      	str	r0, [r5, #16]
 8006226:	b930      	cbnz	r0, 8006236 <_svfiprintf_r+0x32>
 8006228:	230c      	movs	r3, #12
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	b01d      	add	sp, #116	@ 0x74
 8006232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006236:	2340      	movs	r3, #64	@ 0x40
 8006238:	616b      	str	r3, [r5, #20]
 800623a:	2300      	movs	r3, #0
 800623c:	9309      	str	r3, [sp, #36]	@ 0x24
 800623e:	2320      	movs	r3, #32
 8006240:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006244:	f8cd 800c 	str.w	r8, [sp, #12]
 8006248:	2330      	movs	r3, #48	@ 0x30
 800624a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80063e8 <_svfiprintf_r+0x1e4>
 800624e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006252:	f04f 0901 	mov.w	r9, #1
 8006256:	4623      	mov	r3, r4
 8006258:	469a      	mov	sl, r3
 800625a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800625e:	b10a      	cbz	r2, 8006264 <_svfiprintf_r+0x60>
 8006260:	2a25      	cmp	r2, #37	@ 0x25
 8006262:	d1f9      	bne.n	8006258 <_svfiprintf_r+0x54>
 8006264:	ebba 0b04 	subs.w	fp, sl, r4
 8006268:	d00b      	beq.n	8006282 <_svfiprintf_r+0x7e>
 800626a:	465b      	mov	r3, fp
 800626c:	4622      	mov	r2, r4
 800626e:	4629      	mov	r1, r5
 8006270:	4638      	mov	r0, r7
 8006272:	f7ff ff6b 	bl	800614c <__ssputs_r>
 8006276:	3001      	adds	r0, #1
 8006278:	f000 80a7 	beq.w	80063ca <_svfiprintf_r+0x1c6>
 800627c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800627e:	445a      	add	r2, fp
 8006280:	9209      	str	r2, [sp, #36]	@ 0x24
 8006282:	f89a 3000 	ldrb.w	r3, [sl]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 809f 	beq.w	80063ca <_svfiprintf_r+0x1c6>
 800628c:	2300      	movs	r3, #0
 800628e:	f04f 32ff 	mov.w	r2, #4294967295
 8006292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006296:	f10a 0a01 	add.w	sl, sl, #1
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	9307      	str	r3, [sp, #28]
 800629e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80062a4:	4654      	mov	r4, sl
 80062a6:	2205      	movs	r2, #5
 80062a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ac:	484e      	ldr	r0, [pc, #312]	@ (80063e8 <_svfiprintf_r+0x1e4>)
 80062ae:	f7f9 ff97 	bl	80001e0 <memchr>
 80062b2:	9a04      	ldr	r2, [sp, #16]
 80062b4:	b9d8      	cbnz	r0, 80062ee <_svfiprintf_r+0xea>
 80062b6:	06d0      	lsls	r0, r2, #27
 80062b8:	bf44      	itt	mi
 80062ba:	2320      	movmi	r3, #32
 80062bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062c0:	0711      	lsls	r1, r2, #28
 80062c2:	bf44      	itt	mi
 80062c4:	232b      	movmi	r3, #43	@ 0x2b
 80062c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062ca:	f89a 3000 	ldrb.w	r3, [sl]
 80062ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80062d0:	d015      	beq.n	80062fe <_svfiprintf_r+0xfa>
 80062d2:	9a07      	ldr	r2, [sp, #28]
 80062d4:	4654      	mov	r4, sl
 80062d6:	2000      	movs	r0, #0
 80062d8:	f04f 0c0a 	mov.w	ip, #10
 80062dc:	4621      	mov	r1, r4
 80062de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062e2:	3b30      	subs	r3, #48	@ 0x30
 80062e4:	2b09      	cmp	r3, #9
 80062e6:	d94b      	bls.n	8006380 <_svfiprintf_r+0x17c>
 80062e8:	b1b0      	cbz	r0, 8006318 <_svfiprintf_r+0x114>
 80062ea:	9207      	str	r2, [sp, #28]
 80062ec:	e014      	b.n	8006318 <_svfiprintf_r+0x114>
 80062ee:	eba0 0308 	sub.w	r3, r0, r8
 80062f2:	fa09 f303 	lsl.w	r3, r9, r3
 80062f6:	4313      	orrs	r3, r2
 80062f8:	9304      	str	r3, [sp, #16]
 80062fa:	46a2      	mov	sl, r4
 80062fc:	e7d2      	b.n	80062a4 <_svfiprintf_r+0xa0>
 80062fe:	9b03      	ldr	r3, [sp, #12]
 8006300:	1d19      	adds	r1, r3, #4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	9103      	str	r1, [sp, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	bfbb      	ittet	lt
 800630a:	425b      	neglt	r3, r3
 800630c:	f042 0202 	orrlt.w	r2, r2, #2
 8006310:	9307      	strge	r3, [sp, #28]
 8006312:	9307      	strlt	r3, [sp, #28]
 8006314:	bfb8      	it	lt
 8006316:	9204      	strlt	r2, [sp, #16]
 8006318:	7823      	ldrb	r3, [r4, #0]
 800631a:	2b2e      	cmp	r3, #46	@ 0x2e
 800631c:	d10a      	bne.n	8006334 <_svfiprintf_r+0x130>
 800631e:	7863      	ldrb	r3, [r4, #1]
 8006320:	2b2a      	cmp	r3, #42	@ 0x2a
 8006322:	d132      	bne.n	800638a <_svfiprintf_r+0x186>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	1d1a      	adds	r2, r3, #4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	9203      	str	r2, [sp, #12]
 800632c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006330:	3402      	adds	r4, #2
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80063f8 <_svfiprintf_r+0x1f4>
 8006338:	7821      	ldrb	r1, [r4, #0]
 800633a:	2203      	movs	r2, #3
 800633c:	4650      	mov	r0, sl
 800633e:	f7f9 ff4f 	bl	80001e0 <memchr>
 8006342:	b138      	cbz	r0, 8006354 <_svfiprintf_r+0x150>
 8006344:	9b04      	ldr	r3, [sp, #16]
 8006346:	eba0 000a 	sub.w	r0, r0, sl
 800634a:	2240      	movs	r2, #64	@ 0x40
 800634c:	4082      	lsls	r2, r0
 800634e:	4313      	orrs	r3, r2
 8006350:	3401      	adds	r4, #1
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006358:	4824      	ldr	r0, [pc, #144]	@ (80063ec <_svfiprintf_r+0x1e8>)
 800635a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800635e:	2206      	movs	r2, #6
 8006360:	f7f9 ff3e 	bl	80001e0 <memchr>
 8006364:	2800      	cmp	r0, #0
 8006366:	d036      	beq.n	80063d6 <_svfiprintf_r+0x1d2>
 8006368:	4b21      	ldr	r3, [pc, #132]	@ (80063f0 <_svfiprintf_r+0x1ec>)
 800636a:	bb1b      	cbnz	r3, 80063b4 <_svfiprintf_r+0x1b0>
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	3307      	adds	r3, #7
 8006370:	f023 0307 	bic.w	r3, r3, #7
 8006374:	3308      	adds	r3, #8
 8006376:	9303      	str	r3, [sp, #12]
 8006378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800637a:	4433      	add	r3, r6
 800637c:	9309      	str	r3, [sp, #36]	@ 0x24
 800637e:	e76a      	b.n	8006256 <_svfiprintf_r+0x52>
 8006380:	fb0c 3202 	mla	r2, ip, r2, r3
 8006384:	460c      	mov	r4, r1
 8006386:	2001      	movs	r0, #1
 8006388:	e7a8      	b.n	80062dc <_svfiprintf_r+0xd8>
 800638a:	2300      	movs	r3, #0
 800638c:	3401      	adds	r4, #1
 800638e:	9305      	str	r3, [sp, #20]
 8006390:	4619      	mov	r1, r3
 8006392:	f04f 0c0a 	mov.w	ip, #10
 8006396:	4620      	mov	r0, r4
 8006398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800639c:	3a30      	subs	r2, #48	@ 0x30
 800639e:	2a09      	cmp	r2, #9
 80063a0:	d903      	bls.n	80063aa <_svfiprintf_r+0x1a6>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0c6      	beq.n	8006334 <_svfiprintf_r+0x130>
 80063a6:	9105      	str	r1, [sp, #20]
 80063a8:	e7c4      	b.n	8006334 <_svfiprintf_r+0x130>
 80063aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80063ae:	4604      	mov	r4, r0
 80063b0:	2301      	movs	r3, #1
 80063b2:	e7f0      	b.n	8006396 <_svfiprintf_r+0x192>
 80063b4:	ab03      	add	r3, sp, #12
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	462a      	mov	r2, r5
 80063ba:	4b0e      	ldr	r3, [pc, #56]	@ (80063f4 <_svfiprintf_r+0x1f0>)
 80063bc:	a904      	add	r1, sp, #16
 80063be:	4638      	mov	r0, r7
 80063c0:	f7fd fe96 	bl	80040f0 <_printf_float>
 80063c4:	1c42      	adds	r2, r0, #1
 80063c6:	4606      	mov	r6, r0
 80063c8:	d1d6      	bne.n	8006378 <_svfiprintf_r+0x174>
 80063ca:	89ab      	ldrh	r3, [r5, #12]
 80063cc:	065b      	lsls	r3, r3, #25
 80063ce:	f53f af2d 	bmi.w	800622c <_svfiprintf_r+0x28>
 80063d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063d4:	e72c      	b.n	8006230 <_svfiprintf_r+0x2c>
 80063d6:	ab03      	add	r3, sp, #12
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	462a      	mov	r2, r5
 80063dc:	4b05      	ldr	r3, [pc, #20]	@ (80063f4 <_svfiprintf_r+0x1f0>)
 80063de:	a904      	add	r1, sp, #16
 80063e0:	4638      	mov	r0, r7
 80063e2:	f7fe f91d 	bl	8004620 <_printf_i>
 80063e6:	e7ed      	b.n	80063c4 <_svfiprintf_r+0x1c0>
 80063e8:	08007e90 	.word	0x08007e90
 80063ec:	08007e9a 	.word	0x08007e9a
 80063f0:	080040f1 	.word	0x080040f1
 80063f4:	0800614d 	.word	0x0800614d
 80063f8:	08007e96 	.word	0x08007e96

080063fc <__sflush_r>:
 80063fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006404:	0716      	lsls	r6, r2, #28
 8006406:	4605      	mov	r5, r0
 8006408:	460c      	mov	r4, r1
 800640a:	d454      	bmi.n	80064b6 <__sflush_r+0xba>
 800640c:	684b      	ldr	r3, [r1, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	dc02      	bgt.n	8006418 <__sflush_r+0x1c>
 8006412:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	dd48      	ble.n	80064aa <__sflush_r+0xae>
 8006418:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800641a:	2e00      	cmp	r6, #0
 800641c:	d045      	beq.n	80064aa <__sflush_r+0xae>
 800641e:	2300      	movs	r3, #0
 8006420:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006424:	682f      	ldr	r7, [r5, #0]
 8006426:	6a21      	ldr	r1, [r4, #32]
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	d030      	beq.n	800648e <__sflush_r+0x92>
 800642c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	0759      	lsls	r1, r3, #29
 8006432:	d505      	bpl.n	8006440 <__sflush_r+0x44>
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800643a:	b10b      	cbz	r3, 8006440 <__sflush_r+0x44>
 800643c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	2300      	movs	r3, #0
 8006442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006444:	6a21      	ldr	r1, [r4, #32]
 8006446:	4628      	mov	r0, r5
 8006448:	47b0      	blx	r6
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	d106      	bne.n	800645e <__sflush_r+0x62>
 8006450:	6829      	ldr	r1, [r5, #0]
 8006452:	291d      	cmp	r1, #29
 8006454:	d82b      	bhi.n	80064ae <__sflush_r+0xb2>
 8006456:	4a2a      	ldr	r2, [pc, #168]	@ (8006500 <__sflush_r+0x104>)
 8006458:	410a      	asrs	r2, r1
 800645a:	07d6      	lsls	r6, r2, #31
 800645c:	d427      	bmi.n	80064ae <__sflush_r+0xb2>
 800645e:	2200      	movs	r2, #0
 8006460:	6062      	str	r2, [r4, #4]
 8006462:	04d9      	lsls	r1, r3, #19
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	6022      	str	r2, [r4, #0]
 8006468:	d504      	bpl.n	8006474 <__sflush_r+0x78>
 800646a:	1c42      	adds	r2, r0, #1
 800646c:	d101      	bne.n	8006472 <__sflush_r+0x76>
 800646e:	682b      	ldr	r3, [r5, #0]
 8006470:	b903      	cbnz	r3, 8006474 <__sflush_r+0x78>
 8006472:	6560      	str	r0, [r4, #84]	@ 0x54
 8006474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006476:	602f      	str	r7, [r5, #0]
 8006478:	b1b9      	cbz	r1, 80064aa <__sflush_r+0xae>
 800647a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800647e:	4299      	cmp	r1, r3
 8006480:	d002      	beq.n	8006488 <__sflush_r+0x8c>
 8006482:	4628      	mov	r0, r5
 8006484:	f7ff f9e0 	bl	8005848 <_free_r>
 8006488:	2300      	movs	r3, #0
 800648a:	6363      	str	r3, [r4, #52]	@ 0x34
 800648c:	e00d      	b.n	80064aa <__sflush_r+0xae>
 800648e:	2301      	movs	r3, #1
 8006490:	4628      	mov	r0, r5
 8006492:	47b0      	blx	r6
 8006494:	4602      	mov	r2, r0
 8006496:	1c50      	adds	r0, r2, #1
 8006498:	d1c9      	bne.n	800642e <__sflush_r+0x32>
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0c6      	beq.n	800642e <__sflush_r+0x32>
 80064a0:	2b1d      	cmp	r3, #29
 80064a2:	d001      	beq.n	80064a8 <__sflush_r+0xac>
 80064a4:	2b16      	cmp	r3, #22
 80064a6:	d11e      	bne.n	80064e6 <__sflush_r+0xea>
 80064a8:	602f      	str	r7, [r5, #0]
 80064aa:	2000      	movs	r0, #0
 80064ac:	e022      	b.n	80064f4 <__sflush_r+0xf8>
 80064ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064b2:	b21b      	sxth	r3, r3
 80064b4:	e01b      	b.n	80064ee <__sflush_r+0xf2>
 80064b6:	690f      	ldr	r7, [r1, #16]
 80064b8:	2f00      	cmp	r7, #0
 80064ba:	d0f6      	beq.n	80064aa <__sflush_r+0xae>
 80064bc:	0793      	lsls	r3, r2, #30
 80064be:	680e      	ldr	r6, [r1, #0]
 80064c0:	bf08      	it	eq
 80064c2:	694b      	ldreq	r3, [r1, #20]
 80064c4:	600f      	str	r7, [r1, #0]
 80064c6:	bf18      	it	ne
 80064c8:	2300      	movne	r3, #0
 80064ca:	eba6 0807 	sub.w	r8, r6, r7
 80064ce:	608b      	str	r3, [r1, #8]
 80064d0:	f1b8 0f00 	cmp.w	r8, #0
 80064d4:	dde9      	ble.n	80064aa <__sflush_r+0xae>
 80064d6:	6a21      	ldr	r1, [r4, #32]
 80064d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80064da:	4643      	mov	r3, r8
 80064dc:	463a      	mov	r2, r7
 80064de:	4628      	mov	r0, r5
 80064e0:	47b0      	blx	r6
 80064e2:	2800      	cmp	r0, #0
 80064e4:	dc08      	bgt.n	80064f8 <__sflush_r+0xfc>
 80064e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295
 80064f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f8:	4407      	add	r7, r0
 80064fa:	eba8 0800 	sub.w	r8, r8, r0
 80064fe:	e7e7      	b.n	80064d0 <__sflush_r+0xd4>
 8006500:	dfbffffe 	.word	0xdfbffffe

08006504 <_fflush_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	690b      	ldr	r3, [r1, #16]
 8006508:	4605      	mov	r5, r0
 800650a:	460c      	mov	r4, r1
 800650c:	b913      	cbnz	r3, 8006514 <_fflush_r+0x10>
 800650e:	2500      	movs	r5, #0
 8006510:	4628      	mov	r0, r5
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	b118      	cbz	r0, 800651e <_fflush_r+0x1a>
 8006516:	6a03      	ldr	r3, [r0, #32]
 8006518:	b90b      	cbnz	r3, 800651e <_fflush_r+0x1a>
 800651a:	f7fe fa2d 	bl	8004978 <__sinit>
 800651e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f3      	beq.n	800650e <_fflush_r+0xa>
 8006526:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006528:	07d0      	lsls	r0, r2, #31
 800652a:	d404      	bmi.n	8006536 <_fflush_r+0x32>
 800652c:	0599      	lsls	r1, r3, #22
 800652e:	d402      	bmi.n	8006536 <_fflush_r+0x32>
 8006530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006532:	f7fe fb38 	bl	8004ba6 <__retarget_lock_acquire_recursive>
 8006536:	4628      	mov	r0, r5
 8006538:	4621      	mov	r1, r4
 800653a:	f7ff ff5f 	bl	80063fc <__sflush_r>
 800653e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006540:	07da      	lsls	r2, r3, #31
 8006542:	4605      	mov	r5, r0
 8006544:	d4e4      	bmi.n	8006510 <_fflush_r+0xc>
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	059b      	lsls	r3, r3, #22
 800654a:	d4e1      	bmi.n	8006510 <_fflush_r+0xc>
 800654c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800654e:	f7fe fb2b 	bl	8004ba8 <__retarget_lock_release_recursive>
 8006552:	e7dd      	b.n	8006510 <_fflush_r+0xc>

08006554 <memmove>:
 8006554:	4288      	cmp	r0, r1
 8006556:	b510      	push	{r4, lr}
 8006558:	eb01 0402 	add.w	r4, r1, r2
 800655c:	d902      	bls.n	8006564 <memmove+0x10>
 800655e:	4284      	cmp	r4, r0
 8006560:	4623      	mov	r3, r4
 8006562:	d807      	bhi.n	8006574 <memmove+0x20>
 8006564:	1e43      	subs	r3, r0, #1
 8006566:	42a1      	cmp	r1, r4
 8006568:	d008      	beq.n	800657c <memmove+0x28>
 800656a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800656e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006572:	e7f8      	b.n	8006566 <memmove+0x12>
 8006574:	4402      	add	r2, r0
 8006576:	4601      	mov	r1, r0
 8006578:	428a      	cmp	r2, r1
 800657a:	d100      	bne.n	800657e <memmove+0x2a>
 800657c:	bd10      	pop	{r4, pc}
 800657e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006586:	e7f7      	b.n	8006578 <memmove+0x24>

08006588 <_sbrk_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d06      	ldr	r5, [pc, #24]	@ (80065a4 <_sbrk_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fb fe2c 	bl	80021f0 <_sbrk>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_sbrk_r+0x1a>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_sbrk_r+0x1a>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	20000960 	.word	0x20000960

080065a8 <memcpy>:
 80065a8:	440a      	add	r2, r1
 80065aa:	4291      	cmp	r1, r2
 80065ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80065b0:	d100      	bne.n	80065b4 <memcpy+0xc>
 80065b2:	4770      	bx	lr
 80065b4:	b510      	push	{r4, lr}
 80065b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065be:	4291      	cmp	r1, r2
 80065c0:	d1f9      	bne.n	80065b6 <memcpy+0xe>
 80065c2:	bd10      	pop	{r4, pc}

080065c4 <__assert_func>:
 80065c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065c6:	4614      	mov	r4, r2
 80065c8:	461a      	mov	r2, r3
 80065ca:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <__assert_func+0x2c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4605      	mov	r5, r0
 80065d0:	68d8      	ldr	r0, [r3, #12]
 80065d2:	b954      	cbnz	r4, 80065ea <__assert_func+0x26>
 80065d4:	4b07      	ldr	r3, [pc, #28]	@ (80065f4 <__assert_func+0x30>)
 80065d6:	461c      	mov	r4, r3
 80065d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065dc:	9100      	str	r1, [sp, #0]
 80065de:	462b      	mov	r3, r5
 80065e0:	4905      	ldr	r1, [pc, #20]	@ (80065f8 <__assert_func+0x34>)
 80065e2:	f000 f86f 	bl	80066c4 <fiprintf>
 80065e6:	f000 f87f 	bl	80066e8 <abort>
 80065ea:	4b04      	ldr	r3, [pc, #16]	@ (80065fc <__assert_func+0x38>)
 80065ec:	e7f4      	b.n	80065d8 <__assert_func+0x14>
 80065ee:	bf00      	nop
 80065f0:	20000020 	.word	0x20000020
 80065f4:	08007ee6 	.word	0x08007ee6
 80065f8:	08007eb8 	.word	0x08007eb8
 80065fc:	08007eab 	.word	0x08007eab

08006600 <_calloc_r>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	fba1 5402 	umull	r5, r4, r1, r2
 8006606:	b93c      	cbnz	r4, 8006618 <_calloc_r+0x18>
 8006608:	4629      	mov	r1, r5
 800660a:	f7ff f991 	bl	8005930 <_malloc_r>
 800660e:	4606      	mov	r6, r0
 8006610:	b928      	cbnz	r0, 800661e <_calloc_r+0x1e>
 8006612:	2600      	movs	r6, #0
 8006614:	4630      	mov	r0, r6
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	220c      	movs	r2, #12
 800661a:	6002      	str	r2, [r0, #0]
 800661c:	e7f9      	b.n	8006612 <_calloc_r+0x12>
 800661e:	462a      	mov	r2, r5
 8006620:	4621      	mov	r1, r4
 8006622:	f7fe fa42 	bl	8004aaa <memset>
 8006626:	e7f5      	b.n	8006614 <_calloc_r+0x14>

08006628 <__ascii_mbtowc>:
 8006628:	b082      	sub	sp, #8
 800662a:	b901      	cbnz	r1, 800662e <__ascii_mbtowc+0x6>
 800662c:	a901      	add	r1, sp, #4
 800662e:	b142      	cbz	r2, 8006642 <__ascii_mbtowc+0x1a>
 8006630:	b14b      	cbz	r3, 8006646 <__ascii_mbtowc+0x1e>
 8006632:	7813      	ldrb	r3, [r2, #0]
 8006634:	600b      	str	r3, [r1, #0]
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	1e10      	subs	r0, r2, #0
 800663a:	bf18      	it	ne
 800663c:	2001      	movne	r0, #1
 800663e:	b002      	add	sp, #8
 8006640:	4770      	bx	lr
 8006642:	4610      	mov	r0, r2
 8006644:	e7fb      	b.n	800663e <__ascii_mbtowc+0x16>
 8006646:	f06f 0001 	mvn.w	r0, #1
 800664a:	e7f8      	b.n	800663e <__ascii_mbtowc+0x16>

0800664c <_realloc_r>:
 800664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006650:	4680      	mov	r8, r0
 8006652:	4615      	mov	r5, r2
 8006654:	460c      	mov	r4, r1
 8006656:	b921      	cbnz	r1, 8006662 <_realloc_r+0x16>
 8006658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800665c:	4611      	mov	r1, r2
 800665e:	f7ff b967 	b.w	8005930 <_malloc_r>
 8006662:	b92a      	cbnz	r2, 8006670 <_realloc_r+0x24>
 8006664:	f7ff f8f0 	bl	8005848 <_free_r>
 8006668:	2400      	movs	r4, #0
 800666a:	4620      	mov	r0, r4
 800666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006670:	f000 f841 	bl	80066f6 <_malloc_usable_size_r>
 8006674:	4285      	cmp	r5, r0
 8006676:	4606      	mov	r6, r0
 8006678:	d802      	bhi.n	8006680 <_realloc_r+0x34>
 800667a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800667e:	d8f4      	bhi.n	800666a <_realloc_r+0x1e>
 8006680:	4629      	mov	r1, r5
 8006682:	4640      	mov	r0, r8
 8006684:	f7ff f954 	bl	8005930 <_malloc_r>
 8006688:	4607      	mov	r7, r0
 800668a:	2800      	cmp	r0, #0
 800668c:	d0ec      	beq.n	8006668 <_realloc_r+0x1c>
 800668e:	42b5      	cmp	r5, r6
 8006690:	462a      	mov	r2, r5
 8006692:	4621      	mov	r1, r4
 8006694:	bf28      	it	cs
 8006696:	4632      	movcs	r2, r6
 8006698:	f7ff ff86 	bl	80065a8 <memcpy>
 800669c:	4621      	mov	r1, r4
 800669e:	4640      	mov	r0, r8
 80066a0:	f7ff f8d2 	bl	8005848 <_free_r>
 80066a4:	463c      	mov	r4, r7
 80066a6:	e7e0      	b.n	800666a <_realloc_r+0x1e>

080066a8 <__ascii_wctomb>:
 80066a8:	4603      	mov	r3, r0
 80066aa:	4608      	mov	r0, r1
 80066ac:	b141      	cbz	r1, 80066c0 <__ascii_wctomb+0x18>
 80066ae:	2aff      	cmp	r2, #255	@ 0xff
 80066b0:	d904      	bls.n	80066bc <__ascii_wctomb+0x14>
 80066b2:	228a      	movs	r2, #138	@ 0x8a
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ba:	4770      	bx	lr
 80066bc:	700a      	strb	r2, [r1, #0]
 80066be:	2001      	movs	r0, #1
 80066c0:	4770      	bx	lr
	...

080066c4 <fiprintf>:
 80066c4:	b40e      	push	{r1, r2, r3}
 80066c6:	b503      	push	{r0, r1, lr}
 80066c8:	4601      	mov	r1, r0
 80066ca:	ab03      	add	r3, sp, #12
 80066cc:	4805      	ldr	r0, [pc, #20]	@ (80066e4 <fiprintf+0x20>)
 80066ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d2:	6800      	ldr	r0, [r0, #0]
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	f000 f83f 	bl	8006758 <_vfiprintf_r>
 80066da:	b002      	add	sp, #8
 80066dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80066e0:	b003      	add	sp, #12
 80066e2:	4770      	bx	lr
 80066e4:	20000020 	.word	0x20000020

080066e8 <abort>:
 80066e8:	b508      	push	{r3, lr}
 80066ea:	2006      	movs	r0, #6
 80066ec:	f000 fa08 	bl	8006b00 <raise>
 80066f0:	2001      	movs	r0, #1
 80066f2:	f7fb fd05 	bl	8002100 <_exit>

080066f6 <_malloc_usable_size_r>:
 80066f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fa:	1f18      	subs	r0, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bfbc      	itt	lt
 8006700:	580b      	ldrlt	r3, [r1, r0]
 8006702:	18c0      	addlt	r0, r0, r3
 8006704:	4770      	bx	lr

08006706 <__sfputc_r>:
 8006706:	6893      	ldr	r3, [r2, #8]
 8006708:	3b01      	subs	r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	b410      	push	{r4}
 800670e:	6093      	str	r3, [r2, #8]
 8006710:	da08      	bge.n	8006724 <__sfputc_r+0x1e>
 8006712:	6994      	ldr	r4, [r2, #24]
 8006714:	42a3      	cmp	r3, r4
 8006716:	db01      	blt.n	800671c <__sfputc_r+0x16>
 8006718:	290a      	cmp	r1, #10
 800671a:	d103      	bne.n	8006724 <__sfputc_r+0x1e>
 800671c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006720:	f000 b932 	b.w	8006988 <__swbuf_r>
 8006724:	6813      	ldr	r3, [r2, #0]
 8006726:	1c58      	adds	r0, r3, #1
 8006728:	6010      	str	r0, [r2, #0]
 800672a:	7019      	strb	r1, [r3, #0]
 800672c:	4608      	mov	r0, r1
 800672e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006732:	4770      	bx	lr

08006734 <__sfputs_r>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	4606      	mov	r6, r0
 8006738:	460f      	mov	r7, r1
 800673a:	4614      	mov	r4, r2
 800673c:	18d5      	adds	r5, r2, r3
 800673e:	42ac      	cmp	r4, r5
 8006740:	d101      	bne.n	8006746 <__sfputs_r+0x12>
 8006742:	2000      	movs	r0, #0
 8006744:	e007      	b.n	8006756 <__sfputs_r+0x22>
 8006746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800674a:	463a      	mov	r2, r7
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff ffda 	bl	8006706 <__sfputc_r>
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	d1f3      	bne.n	800673e <__sfputs_r+0xa>
 8006756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006758 <_vfiprintf_r>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	460d      	mov	r5, r1
 800675e:	b09d      	sub	sp, #116	@ 0x74
 8006760:	4614      	mov	r4, r2
 8006762:	4698      	mov	r8, r3
 8006764:	4606      	mov	r6, r0
 8006766:	b118      	cbz	r0, 8006770 <_vfiprintf_r+0x18>
 8006768:	6a03      	ldr	r3, [r0, #32]
 800676a:	b90b      	cbnz	r3, 8006770 <_vfiprintf_r+0x18>
 800676c:	f7fe f904 	bl	8004978 <__sinit>
 8006770:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006772:	07d9      	lsls	r1, r3, #31
 8006774:	d405      	bmi.n	8006782 <_vfiprintf_r+0x2a>
 8006776:	89ab      	ldrh	r3, [r5, #12]
 8006778:	059a      	lsls	r2, r3, #22
 800677a:	d402      	bmi.n	8006782 <_vfiprintf_r+0x2a>
 800677c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800677e:	f7fe fa12 	bl	8004ba6 <__retarget_lock_acquire_recursive>
 8006782:	89ab      	ldrh	r3, [r5, #12]
 8006784:	071b      	lsls	r3, r3, #28
 8006786:	d501      	bpl.n	800678c <_vfiprintf_r+0x34>
 8006788:	692b      	ldr	r3, [r5, #16]
 800678a:	b99b      	cbnz	r3, 80067b4 <_vfiprintf_r+0x5c>
 800678c:	4629      	mov	r1, r5
 800678e:	4630      	mov	r0, r6
 8006790:	f000 f938 	bl	8006a04 <__swsetup_r>
 8006794:	b170      	cbz	r0, 80067b4 <_vfiprintf_r+0x5c>
 8006796:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006798:	07dc      	lsls	r4, r3, #31
 800679a:	d504      	bpl.n	80067a6 <_vfiprintf_r+0x4e>
 800679c:	f04f 30ff 	mov.w	r0, #4294967295
 80067a0:	b01d      	add	sp, #116	@ 0x74
 80067a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a6:	89ab      	ldrh	r3, [r5, #12]
 80067a8:	0598      	lsls	r0, r3, #22
 80067aa:	d4f7      	bmi.n	800679c <_vfiprintf_r+0x44>
 80067ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ae:	f7fe f9fb 	bl	8004ba8 <__retarget_lock_release_recursive>
 80067b2:	e7f3      	b.n	800679c <_vfiprintf_r+0x44>
 80067b4:	2300      	movs	r3, #0
 80067b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b8:	2320      	movs	r3, #32
 80067ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067be:	f8cd 800c 	str.w	r8, [sp, #12]
 80067c2:	2330      	movs	r3, #48	@ 0x30
 80067c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006974 <_vfiprintf_r+0x21c>
 80067c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067cc:	f04f 0901 	mov.w	r9, #1
 80067d0:	4623      	mov	r3, r4
 80067d2:	469a      	mov	sl, r3
 80067d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067d8:	b10a      	cbz	r2, 80067de <_vfiprintf_r+0x86>
 80067da:	2a25      	cmp	r2, #37	@ 0x25
 80067dc:	d1f9      	bne.n	80067d2 <_vfiprintf_r+0x7a>
 80067de:	ebba 0b04 	subs.w	fp, sl, r4
 80067e2:	d00b      	beq.n	80067fc <_vfiprintf_r+0xa4>
 80067e4:	465b      	mov	r3, fp
 80067e6:	4622      	mov	r2, r4
 80067e8:	4629      	mov	r1, r5
 80067ea:	4630      	mov	r0, r6
 80067ec:	f7ff ffa2 	bl	8006734 <__sfputs_r>
 80067f0:	3001      	adds	r0, #1
 80067f2:	f000 80a7 	beq.w	8006944 <_vfiprintf_r+0x1ec>
 80067f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067f8:	445a      	add	r2, fp
 80067fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80067fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 809f 	beq.w	8006944 <_vfiprintf_r+0x1ec>
 8006806:	2300      	movs	r3, #0
 8006808:	f04f 32ff 	mov.w	r2, #4294967295
 800680c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006810:	f10a 0a01 	add.w	sl, sl, #1
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	9307      	str	r3, [sp, #28]
 8006818:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800681c:	931a      	str	r3, [sp, #104]	@ 0x68
 800681e:	4654      	mov	r4, sl
 8006820:	2205      	movs	r2, #5
 8006822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006826:	4853      	ldr	r0, [pc, #332]	@ (8006974 <_vfiprintf_r+0x21c>)
 8006828:	f7f9 fcda 	bl	80001e0 <memchr>
 800682c:	9a04      	ldr	r2, [sp, #16]
 800682e:	b9d8      	cbnz	r0, 8006868 <_vfiprintf_r+0x110>
 8006830:	06d1      	lsls	r1, r2, #27
 8006832:	bf44      	itt	mi
 8006834:	2320      	movmi	r3, #32
 8006836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800683a:	0713      	lsls	r3, r2, #28
 800683c:	bf44      	itt	mi
 800683e:	232b      	movmi	r3, #43	@ 0x2b
 8006840:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006844:	f89a 3000 	ldrb.w	r3, [sl]
 8006848:	2b2a      	cmp	r3, #42	@ 0x2a
 800684a:	d015      	beq.n	8006878 <_vfiprintf_r+0x120>
 800684c:	9a07      	ldr	r2, [sp, #28]
 800684e:	4654      	mov	r4, sl
 8006850:	2000      	movs	r0, #0
 8006852:	f04f 0c0a 	mov.w	ip, #10
 8006856:	4621      	mov	r1, r4
 8006858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800685c:	3b30      	subs	r3, #48	@ 0x30
 800685e:	2b09      	cmp	r3, #9
 8006860:	d94b      	bls.n	80068fa <_vfiprintf_r+0x1a2>
 8006862:	b1b0      	cbz	r0, 8006892 <_vfiprintf_r+0x13a>
 8006864:	9207      	str	r2, [sp, #28]
 8006866:	e014      	b.n	8006892 <_vfiprintf_r+0x13a>
 8006868:	eba0 0308 	sub.w	r3, r0, r8
 800686c:	fa09 f303 	lsl.w	r3, r9, r3
 8006870:	4313      	orrs	r3, r2
 8006872:	9304      	str	r3, [sp, #16]
 8006874:	46a2      	mov	sl, r4
 8006876:	e7d2      	b.n	800681e <_vfiprintf_r+0xc6>
 8006878:	9b03      	ldr	r3, [sp, #12]
 800687a:	1d19      	adds	r1, r3, #4
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	9103      	str	r1, [sp, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	bfbb      	ittet	lt
 8006884:	425b      	neglt	r3, r3
 8006886:	f042 0202 	orrlt.w	r2, r2, #2
 800688a:	9307      	strge	r3, [sp, #28]
 800688c:	9307      	strlt	r3, [sp, #28]
 800688e:	bfb8      	it	lt
 8006890:	9204      	strlt	r2, [sp, #16]
 8006892:	7823      	ldrb	r3, [r4, #0]
 8006894:	2b2e      	cmp	r3, #46	@ 0x2e
 8006896:	d10a      	bne.n	80068ae <_vfiprintf_r+0x156>
 8006898:	7863      	ldrb	r3, [r4, #1]
 800689a:	2b2a      	cmp	r3, #42	@ 0x2a
 800689c:	d132      	bne.n	8006904 <_vfiprintf_r+0x1ac>
 800689e:	9b03      	ldr	r3, [sp, #12]
 80068a0:	1d1a      	adds	r2, r3, #4
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	9203      	str	r2, [sp, #12]
 80068a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068aa:	3402      	adds	r4, #2
 80068ac:	9305      	str	r3, [sp, #20]
 80068ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006984 <_vfiprintf_r+0x22c>
 80068b2:	7821      	ldrb	r1, [r4, #0]
 80068b4:	2203      	movs	r2, #3
 80068b6:	4650      	mov	r0, sl
 80068b8:	f7f9 fc92 	bl	80001e0 <memchr>
 80068bc:	b138      	cbz	r0, 80068ce <_vfiprintf_r+0x176>
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	eba0 000a 	sub.w	r0, r0, sl
 80068c4:	2240      	movs	r2, #64	@ 0x40
 80068c6:	4082      	lsls	r2, r0
 80068c8:	4313      	orrs	r3, r2
 80068ca:	3401      	adds	r4, #1
 80068cc:	9304      	str	r3, [sp, #16]
 80068ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d2:	4829      	ldr	r0, [pc, #164]	@ (8006978 <_vfiprintf_r+0x220>)
 80068d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068d8:	2206      	movs	r2, #6
 80068da:	f7f9 fc81 	bl	80001e0 <memchr>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d03f      	beq.n	8006962 <_vfiprintf_r+0x20a>
 80068e2:	4b26      	ldr	r3, [pc, #152]	@ (800697c <_vfiprintf_r+0x224>)
 80068e4:	bb1b      	cbnz	r3, 800692e <_vfiprintf_r+0x1d6>
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	3307      	adds	r3, #7
 80068ea:	f023 0307 	bic.w	r3, r3, #7
 80068ee:	3308      	adds	r3, #8
 80068f0:	9303      	str	r3, [sp, #12]
 80068f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f4:	443b      	add	r3, r7
 80068f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068f8:	e76a      	b.n	80067d0 <_vfiprintf_r+0x78>
 80068fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80068fe:	460c      	mov	r4, r1
 8006900:	2001      	movs	r0, #1
 8006902:	e7a8      	b.n	8006856 <_vfiprintf_r+0xfe>
 8006904:	2300      	movs	r3, #0
 8006906:	3401      	adds	r4, #1
 8006908:	9305      	str	r3, [sp, #20]
 800690a:	4619      	mov	r1, r3
 800690c:	f04f 0c0a 	mov.w	ip, #10
 8006910:	4620      	mov	r0, r4
 8006912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006916:	3a30      	subs	r2, #48	@ 0x30
 8006918:	2a09      	cmp	r2, #9
 800691a:	d903      	bls.n	8006924 <_vfiprintf_r+0x1cc>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0c6      	beq.n	80068ae <_vfiprintf_r+0x156>
 8006920:	9105      	str	r1, [sp, #20]
 8006922:	e7c4      	b.n	80068ae <_vfiprintf_r+0x156>
 8006924:	fb0c 2101 	mla	r1, ip, r1, r2
 8006928:	4604      	mov	r4, r0
 800692a:	2301      	movs	r3, #1
 800692c:	e7f0      	b.n	8006910 <_vfiprintf_r+0x1b8>
 800692e:	ab03      	add	r3, sp, #12
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	462a      	mov	r2, r5
 8006934:	4b12      	ldr	r3, [pc, #72]	@ (8006980 <_vfiprintf_r+0x228>)
 8006936:	a904      	add	r1, sp, #16
 8006938:	4630      	mov	r0, r6
 800693a:	f7fd fbd9 	bl	80040f0 <_printf_float>
 800693e:	4607      	mov	r7, r0
 8006940:	1c78      	adds	r0, r7, #1
 8006942:	d1d6      	bne.n	80068f2 <_vfiprintf_r+0x19a>
 8006944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006946:	07d9      	lsls	r1, r3, #31
 8006948:	d405      	bmi.n	8006956 <_vfiprintf_r+0x1fe>
 800694a:	89ab      	ldrh	r3, [r5, #12]
 800694c:	059a      	lsls	r2, r3, #22
 800694e:	d402      	bmi.n	8006956 <_vfiprintf_r+0x1fe>
 8006950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006952:	f7fe f929 	bl	8004ba8 <__retarget_lock_release_recursive>
 8006956:	89ab      	ldrh	r3, [r5, #12]
 8006958:	065b      	lsls	r3, r3, #25
 800695a:	f53f af1f 	bmi.w	800679c <_vfiprintf_r+0x44>
 800695e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006960:	e71e      	b.n	80067a0 <_vfiprintf_r+0x48>
 8006962:	ab03      	add	r3, sp, #12
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	462a      	mov	r2, r5
 8006968:	4b05      	ldr	r3, [pc, #20]	@ (8006980 <_vfiprintf_r+0x228>)
 800696a:	a904      	add	r1, sp, #16
 800696c:	4630      	mov	r0, r6
 800696e:	f7fd fe57 	bl	8004620 <_printf_i>
 8006972:	e7e4      	b.n	800693e <_vfiprintf_r+0x1e6>
 8006974:	08007e90 	.word	0x08007e90
 8006978:	08007e9a 	.word	0x08007e9a
 800697c:	080040f1 	.word	0x080040f1
 8006980:	08006735 	.word	0x08006735
 8006984:	08007e96 	.word	0x08007e96

08006988 <__swbuf_r>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	460e      	mov	r6, r1
 800698c:	4614      	mov	r4, r2
 800698e:	4605      	mov	r5, r0
 8006990:	b118      	cbz	r0, 800699a <__swbuf_r+0x12>
 8006992:	6a03      	ldr	r3, [r0, #32]
 8006994:	b90b      	cbnz	r3, 800699a <__swbuf_r+0x12>
 8006996:	f7fd ffef 	bl	8004978 <__sinit>
 800699a:	69a3      	ldr	r3, [r4, #24]
 800699c:	60a3      	str	r3, [r4, #8]
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	071a      	lsls	r2, r3, #28
 80069a2:	d501      	bpl.n	80069a8 <__swbuf_r+0x20>
 80069a4:	6923      	ldr	r3, [r4, #16]
 80069a6:	b943      	cbnz	r3, 80069ba <__swbuf_r+0x32>
 80069a8:	4621      	mov	r1, r4
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f82a 	bl	8006a04 <__swsetup_r>
 80069b0:	b118      	cbz	r0, 80069ba <__swbuf_r+0x32>
 80069b2:	f04f 37ff 	mov.w	r7, #4294967295
 80069b6:	4638      	mov	r0, r7
 80069b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	6922      	ldr	r2, [r4, #16]
 80069be:	1a98      	subs	r0, r3, r2
 80069c0:	6963      	ldr	r3, [r4, #20]
 80069c2:	b2f6      	uxtb	r6, r6
 80069c4:	4283      	cmp	r3, r0
 80069c6:	4637      	mov	r7, r6
 80069c8:	dc05      	bgt.n	80069d6 <__swbuf_r+0x4e>
 80069ca:	4621      	mov	r1, r4
 80069cc:	4628      	mov	r0, r5
 80069ce:	f7ff fd99 	bl	8006504 <_fflush_r>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d1ed      	bne.n	80069b2 <__swbuf_r+0x2a>
 80069d6:	68a3      	ldr	r3, [r4, #8]
 80069d8:	3b01      	subs	r3, #1
 80069da:	60a3      	str	r3, [r4, #8]
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	6022      	str	r2, [r4, #0]
 80069e2:	701e      	strb	r6, [r3, #0]
 80069e4:	6962      	ldr	r2, [r4, #20]
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d004      	beq.n	80069f6 <__swbuf_r+0x6e>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	07db      	lsls	r3, r3, #31
 80069f0:	d5e1      	bpl.n	80069b6 <__swbuf_r+0x2e>
 80069f2:	2e0a      	cmp	r6, #10
 80069f4:	d1df      	bne.n	80069b6 <__swbuf_r+0x2e>
 80069f6:	4621      	mov	r1, r4
 80069f8:	4628      	mov	r0, r5
 80069fa:	f7ff fd83 	bl	8006504 <_fflush_r>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d0d9      	beq.n	80069b6 <__swbuf_r+0x2e>
 8006a02:	e7d6      	b.n	80069b2 <__swbuf_r+0x2a>

08006a04 <__swsetup_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4b29      	ldr	r3, [pc, #164]	@ (8006aac <__swsetup_r+0xa8>)
 8006a08:	4605      	mov	r5, r0
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	b118      	cbz	r0, 8006a18 <__swsetup_r+0x14>
 8006a10:	6a03      	ldr	r3, [r0, #32]
 8006a12:	b90b      	cbnz	r3, 8006a18 <__swsetup_r+0x14>
 8006a14:	f7fd ffb0 	bl	8004978 <__sinit>
 8006a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a1c:	0719      	lsls	r1, r3, #28
 8006a1e:	d422      	bmi.n	8006a66 <__swsetup_r+0x62>
 8006a20:	06da      	lsls	r2, r3, #27
 8006a22:	d407      	bmi.n	8006a34 <__swsetup_r+0x30>
 8006a24:	2209      	movs	r2, #9
 8006a26:	602a      	str	r2, [r5, #0]
 8006a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a32:	e033      	b.n	8006a9c <__swsetup_r+0x98>
 8006a34:	0758      	lsls	r0, r3, #29
 8006a36:	d512      	bpl.n	8006a5e <__swsetup_r+0x5a>
 8006a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a3a:	b141      	cbz	r1, 8006a4e <__swsetup_r+0x4a>
 8006a3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a40:	4299      	cmp	r1, r3
 8006a42:	d002      	beq.n	8006a4a <__swsetup_r+0x46>
 8006a44:	4628      	mov	r0, r5
 8006a46:	f7fe feff 	bl	8005848 <_free_r>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a54:	81a3      	strh	r3, [r4, #12]
 8006a56:	2300      	movs	r3, #0
 8006a58:	6063      	str	r3, [r4, #4]
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f043 0308 	orr.w	r3, r3, #8
 8006a64:	81a3      	strh	r3, [r4, #12]
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	b94b      	cbnz	r3, 8006a7e <__swsetup_r+0x7a>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a74:	d003      	beq.n	8006a7e <__swsetup_r+0x7a>
 8006a76:	4621      	mov	r1, r4
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f000 f883 	bl	8006b84 <__smakebuf_r>
 8006a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a82:	f013 0201 	ands.w	r2, r3, #1
 8006a86:	d00a      	beq.n	8006a9e <__swsetup_r+0x9a>
 8006a88:	2200      	movs	r2, #0
 8006a8a:	60a2      	str	r2, [r4, #8]
 8006a8c:	6962      	ldr	r2, [r4, #20]
 8006a8e:	4252      	negs	r2, r2
 8006a90:	61a2      	str	r2, [r4, #24]
 8006a92:	6922      	ldr	r2, [r4, #16]
 8006a94:	b942      	cbnz	r2, 8006aa8 <__swsetup_r+0xa4>
 8006a96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a9a:	d1c5      	bne.n	8006a28 <__swsetup_r+0x24>
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
 8006a9e:	0799      	lsls	r1, r3, #30
 8006aa0:	bf58      	it	pl
 8006aa2:	6962      	ldrpl	r2, [r4, #20]
 8006aa4:	60a2      	str	r2, [r4, #8]
 8006aa6:	e7f4      	b.n	8006a92 <__swsetup_r+0x8e>
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	e7f7      	b.n	8006a9c <__swsetup_r+0x98>
 8006aac:	20000020 	.word	0x20000020

08006ab0 <_raise_r>:
 8006ab0:	291f      	cmp	r1, #31
 8006ab2:	b538      	push	{r3, r4, r5, lr}
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	d904      	bls.n	8006ac4 <_raise_r+0x14>
 8006aba:	2316      	movs	r3, #22
 8006abc:	6003      	str	r3, [r0, #0]
 8006abe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ac6:	b112      	cbz	r2, 8006ace <_raise_r+0x1e>
 8006ac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006acc:	b94b      	cbnz	r3, 8006ae2 <_raise_r+0x32>
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f000 f830 	bl	8006b34 <_getpid_r>
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	4628      	mov	r0, r5
 8006ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ade:	f000 b817 	b.w	8006b10 <_kill_r>
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d00a      	beq.n	8006afc <_raise_r+0x4c>
 8006ae6:	1c59      	adds	r1, r3, #1
 8006ae8:	d103      	bne.n	8006af2 <_raise_r+0x42>
 8006aea:	2316      	movs	r3, #22
 8006aec:	6003      	str	r3, [r0, #0]
 8006aee:	2001      	movs	r0, #1
 8006af0:	e7e7      	b.n	8006ac2 <_raise_r+0x12>
 8006af2:	2100      	movs	r1, #0
 8006af4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006af8:	4620      	mov	r0, r4
 8006afa:	4798      	blx	r3
 8006afc:	2000      	movs	r0, #0
 8006afe:	e7e0      	b.n	8006ac2 <_raise_r+0x12>

08006b00 <raise>:
 8006b00:	4b02      	ldr	r3, [pc, #8]	@ (8006b0c <raise+0xc>)
 8006b02:	4601      	mov	r1, r0
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	f7ff bfd3 	b.w	8006ab0 <_raise_r>
 8006b0a:	bf00      	nop
 8006b0c:	20000020 	.word	0x20000020

08006b10 <_kill_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	@ (8006b30 <_kill_r+0x20>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	f7fb fadf 	bl	80020e0 <_kill>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d102      	bne.n	8006b2c <_kill_r+0x1c>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	b103      	cbz	r3, 8006b2c <_kill_r+0x1c>
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	bd38      	pop	{r3, r4, r5, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000960 	.word	0x20000960

08006b34 <_getpid_r>:
 8006b34:	f7fb bacc 	b.w	80020d0 <_getpid>

08006b38 <__swhatbuf_r>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b40:	2900      	cmp	r1, #0
 8006b42:	b096      	sub	sp, #88	@ 0x58
 8006b44:	4615      	mov	r5, r2
 8006b46:	461e      	mov	r6, r3
 8006b48:	da0d      	bge.n	8006b66 <__swhatbuf_r+0x2e>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b50:	f04f 0100 	mov.w	r1, #0
 8006b54:	bf14      	ite	ne
 8006b56:	2340      	movne	r3, #64	@ 0x40
 8006b58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	6031      	str	r1, [r6, #0]
 8006b60:	602b      	str	r3, [r5, #0]
 8006b62:	b016      	add	sp, #88	@ 0x58
 8006b64:	bd70      	pop	{r4, r5, r6, pc}
 8006b66:	466a      	mov	r2, sp
 8006b68:	f000 f848 	bl	8006bfc <_fstat_r>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	dbec      	blt.n	8006b4a <__swhatbuf_r+0x12>
 8006b70:	9901      	ldr	r1, [sp, #4]
 8006b72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b7a:	4259      	negs	r1, r3
 8006b7c:	4159      	adcs	r1, r3
 8006b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b82:	e7eb      	b.n	8006b5c <__swhatbuf_r+0x24>

08006b84 <__smakebuf_r>:
 8006b84:	898b      	ldrh	r3, [r1, #12]
 8006b86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b88:	079d      	lsls	r5, r3, #30
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	460c      	mov	r4, r1
 8006b8e:	d507      	bpl.n	8006ba0 <__smakebuf_r+0x1c>
 8006b90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	6123      	str	r3, [r4, #16]
 8006b98:	2301      	movs	r3, #1
 8006b9a:	6163      	str	r3, [r4, #20]
 8006b9c:	b003      	add	sp, #12
 8006b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba0:	ab01      	add	r3, sp, #4
 8006ba2:	466a      	mov	r2, sp
 8006ba4:	f7ff ffc8 	bl	8006b38 <__swhatbuf_r>
 8006ba8:	9f00      	ldr	r7, [sp, #0]
 8006baa:	4605      	mov	r5, r0
 8006bac:	4639      	mov	r1, r7
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f7fe febe 	bl	8005930 <_malloc_r>
 8006bb4:	b948      	cbnz	r0, 8006bca <__smakebuf_r+0x46>
 8006bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bba:	059a      	lsls	r2, r3, #22
 8006bbc:	d4ee      	bmi.n	8006b9c <__smakebuf_r+0x18>
 8006bbe:	f023 0303 	bic.w	r3, r3, #3
 8006bc2:	f043 0302 	orr.w	r3, r3, #2
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	e7e2      	b.n	8006b90 <__smakebuf_r+0xc>
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	6020      	str	r0, [r4, #0]
 8006bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	9b01      	ldr	r3, [sp, #4]
 8006bd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bda:	b15b      	cbz	r3, 8006bf4 <__smakebuf_r+0x70>
 8006bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006be0:	4630      	mov	r0, r6
 8006be2:	f000 f81d 	bl	8006c20 <_isatty_r>
 8006be6:	b128      	cbz	r0, 8006bf4 <__smakebuf_r+0x70>
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f023 0303 	bic.w	r3, r3, #3
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	431d      	orrs	r5, r3
 8006bf8:	81a5      	strh	r5, [r4, #12]
 8006bfa:	e7cf      	b.n	8006b9c <__smakebuf_r+0x18>

08006bfc <_fstat_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d07      	ldr	r5, [pc, #28]	@ (8006c1c <_fstat_r+0x20>)
 8006c00:	2300      	movs	r3, #0
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	4611      	mov	r1, r2
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	f7fb fac9 	bl	80021a0 <_fstat>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	d102      	bne.n	8006c18 <_fstat_r+0x1c>
 8006c12:	682b      	ldr	r3, [r5, #0]
 8006c14:	b103      	cbz	r3, 8006c18 <_fstat_r+0x1c>
 8006c16:	6023      	str	r3, [r4, #0]
 8006c18:	bd38      	pop	{r3, r4, r5, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000960 	.word	0x20000960

08006c20 <_isatty_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d06      	ldr	r5, [pc, #24]	@ (8006c3c <_isatty_r+0x1c>)
 8006c24:	2300      	movs	r3, #0
 8006c26:	4604      	mov	r4, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	f7fb fac8 	bl	80021c0 <_isatty>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_isatty_r+0x1a>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_isatty_r+0x1a>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	20000960 	.word	0x20000960

08006c40 <pow>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	ed2d 8b02 	vpush	{d8}
 8006c46:	eeb0 8a40 	vmov.f32	s16, s0
 8006c4a:	eef0 8a60 	vmov.f32	s17, s1
 8006c4e:	ec55 4b11 	vmov	r4, r5, d1
 8006c52:	f000 f871 	bl	8006d38 <__ieee754_pow>
 8006c56:	4622      	mov	r2, r4
 8006c58:	462b      	mov	r3, r5
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	ec57 6b10 	vmov	r6, r7, d0
 8006c62:	f7f9 ff6b 	bl	8000b3c <__aeabi_dcmpun>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d13b      	bne.n	8006ce2 <pow+0xa2>
 8006c6a:	ec51 0b18 	vmov	r0, r1, d8
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2300      	movs	r3, #0
 8006c72:	f7f9 ff31 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c76:	b1b8      	cbz	r0, 8006ca8 <pow+0x68>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4629      	mov	r1, r5
 8006c80:	f7f9 ff2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d146      	bne.n	8006d16 <pow+0xd6>
 8006c88:	ec45 4b10 	vmov	d0, r4, r5
 8006c8c:	f000 f848 	bl	8006d20 <finite>
 8006c90:	b338      	cbz	r0, 8006ce2 <pow+0xa2>
 8006c92:	2200      	movs	r2, #0
 8006c94:	2300      	movs	r3, #0
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7f9 ff27 	bl	8000aec <__aeabi_dcmplt>
 8006c9e:	b300      	cbz	r0, 8006ce2 <pow+0xa2>
 8006ca0:	f7fd ff56 	bl	8004b50 <__errno>
 8006ca4:	2322      	movs	r3, #34	@ 0x22
 8006ca6:	e01b      	b.n	8006ce0 <pow+0xa0>
 8006ca8:	ec47 6b10 	vmov	d0, r6, r7
 8006cac:	f000 f838 	bl	8006d20 <finite>
 8006cb0:	b9e0      	cbnz	r0, 8006cec <pow+0xac>
 8006cb2:	eeb0 0a48 	vmov.f32	s0, s16
 8006cb6:	eef0 0a68 	vmov.f32	s1, s17
 8006cba:	f000 f831 	bl	8006d20 <finite>
 8006cbe:	b1a8      	cbz	r0, 8006cec <pow+0xac>
 8006cc0:	ec45 4b10 	vmov	d0, r4, r5
 8006cc4:	f000 f82c 	bl	8006d20 <finite>
 8006cc8:	b180      	cbz	r0, 8006cec <pow+0xac>
 8006cca:	4632      	mov	r2, r6
 8006ccc:	463b      	mov	r3, r7
 8006cce:	4630      	mov	r0, r6
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	f7f9 ff33 	bl	8000b3c <__aeabi_dcmpun>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d0e2      	beq.n	8006ca0 <pow+0x60>
 8006cda:	f7fd ff39 	bl	8004b50 <__errno>
 8006cde:	2321      	movs	r3, #33	@ 0x21
 8006ce0:	6003      	str	r3, [r0, #0]
 8006ce2:	ecbd 8b02 	vpop	{d8}
 8006ce6:	ec47 6b10 	vmov	d0, r6, r7
 8006cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cec:	2200      	movs	r2, #0
 8006cee:	2300      	movs	r3, #0
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	f7f9 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d0f2      	beq.n	8006ce2 <pow+0xa2>
 8006cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8006d00:	eef0 0a68 	vmov.f32	s1, s17
 8006d04:	f000 f80c 	bl	8006d20 <finite>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d0ea      	beq.n	8006ce2 <pow+0xa2>
 8006d0c:	ec45 4b10 	vmov	d0, r4, r5
 8006d10:	f000 f806 	bl	8006d20 <finite>
 8006d14:	e7c3      	b.n	8006c9e <pow+0x5e>
 8006d16:	4f01      	ldr	r7, [pc, #4]	@ (8006d1c <pow+0xdc>)
 8006d18:	2600      	movs	r6, #0
 8006d1a:	e7e2      	b.n	8006ce2 <pow+0xa2>
 8006d1c:	3ff00000 	.word	0x3ff00000

08006d20 <finite>:
 8006d20:	b082      	sub	sp, #8
 8006d22:	ed8d 0b00 	vstr	d0, [sp]
 8006d26:	9801      	ldr	r0, [sp, #4]
 8006d28:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006d2c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006d30:	0fc0      	lsrs	r0, r0, #31
 8006d32:	b002      	add	sp, #8
 8006d34:	4770      	bx	lr
	...

08006d38 <__ieee754_pow>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	b091      	sub	sp, #68	@ 0x44
 8006d3e:	ed8d 1b00 	vstr	d1, [sp]
 8006d42:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006d46:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006d4a:	ea5a 0001 	orrs.w	r0, sl, r1
 8006d4e:	ec57 6b10 	vmov	r6, r7, d0
 8006d52:	d113      	bne.n	8006d7c <__ieee754_pow+0x44>
 8006d54:	19b3      	adds	r3, r6, r6
 8006d56:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006d5a:	4152      	adcs	r2, r2
 8006d5c:	4298      	cmp	r0, r3
 8006d5e:	4b98      	ldr	r3, [pc, #608]	@ (8006fc0 <__ieee754_pow+0x288>)
 8006d60:	4193      	sbcs	r3, r2
 8006d62:	f080 84ea 	bcs.w	800773a <__ieee754_pow+0xa02>
 8006d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	f7f9 fa95 	bl	800029c <__adddf3>
 8006d72:	ec41 0b10 	vmov	d0, r0, r1
 8006d76:	b011      	add	sp, #68	@ 0x44
 8006d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7c:	4a91      	ldr	r2, [pc, #580]	@ (8006fc4 <__ieee754_pow+0x28c>)
 8006d7e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006d82:	4590      	cmp	r8, r2
 8006d84:	463d      	mov	r5, r7
 8006d86:	4633      	mov	r3, r6
 8006d88:	d806      	bhi.n	8006d98 <__ieee754_pow+0x60>
 8006d8a:	d101      	bne.n	8006d90 <__ieee754_pow+0x58>
 8006d8c:	2e00      	cmp	r6, #0
 8006d8e:	d1ea      	bne.n	8006d66 <__ieee754_pow+0x2e>
 8006d90:	4592      	cmp	sl, r2
 8006d92:	d801      	bhi.n	8006d98 <__ieee754_pow+0x60>
 8006d94:	d10e      	bne.n	8006db4 <__ieee754_pow+0x7c>
 8006d96:	b169      	cbz	r1, 8006db4 <__ieee754_pow+0x7c>
 8006d98:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006d9c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006da0:	431d      	orrs	r5, r3
 8006da2:	d1e0      	bne.n	8006d66 <__ieee754_pow+0x2e>
 8006da4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006da8:	18db      	adds	r3, r3, r3
 8006daa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006dae:	4152      	adcs	r2, r2
 8006db0:	429d      	cmp	r5, r3
 8006db2:	e7d4      	b.n	8006d5e <__ieee754_pow+0x26>
 8006db4:	2d00      	cmp	r5, #0
 8006db6:	46c3      	mov	fp, r8
 8006db8:	da3a      	bge.n	8006e30 <__ieee754_pow+0xf8>
 8006dba:	4a83      	ldr	r2, [pc, #524]	@ (8006fc8 <__ieee754_pow+0x290>)
 8006dbc:	4592      	cmp	sl, r2
 8006dbe:	d84d      	bhi.n	8006e5c <__ieee754_pow+0x124>
 8006dc0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006dc4:	4592      	cmp	sl, r2
 8006dc6:	f240 84c7 	bls.w	8007758 <__ieee754_pow+0xa20>
 8006dca:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006dce:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006dd2:	2a14      	cmp	r2, #20
 8006dd4:	dd0f      	ble.n	8006df6 <__ieee754_pow+0xbe>
 8006dd6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006dda:	fa21 f402 	lsr.w	r4, r1, r2
 8006dde:	fa04 f202 	lsl.w	r2, r4, r2
 8006de2:	428a      	cmp	r2, r1
 8006de4:	f040 84b8 	bne.w	8007758 <__ieee754_pow+0xa20>
 8006de8:	f004 0401 	and.w	r4, r4, #1
 8006dec:	f1c4 0402 	rsb	r4, r4, #2
 8006df0:	2900      	cmp	r1, #0
 8006df2:	d158      	bne.n	8006ea6 <__ieee754_pow+0x16e>
 8006df4:	e00e      	b.n	8006e14 <__ieee754_pow+0xdc>
 8006df6:	2900      	cmp	r1, #0
 8006df8:	d154      	bne.n	8006ea4 <__ieee754_pow+0x16c>
 8006dfa:	f1c2 0214 	rsb	r2, r2, #20
 8006dfe:	fa4a f402 	asr.w	r4, sl, r2
 8006e02:	fa04 f202 	lsl.w	r2, r4, r2
 8006e06:	4552      	cmp	r2, sl
 8006e08:	f040 84a3 	bne.w	8007752 <__ieee754_pow+0xa1a>
 8006e0c:	f004 0401 	and.w	r4, r4, #1
 8006e10:	f1c4 0402 	rsb	r4, r4, #2
 8006e14:	4a6d      	ldr	r2, [pc, #436]	@ (8006fcc <__ieee754_pow+0x294>)
 8006e16:	4592      	cmp	sl, r2
 8006e18:	d12e      	bne.n	8006e78 <__ieee754_pow+0x140>
 8006e1a:	f1b9 0f00 	cmp.w	r9, #0
 8006e1e:	f280 8494 	bge.w	800774a <__ieee754_pow+0xa12>
 8006e22:	496a      	ldr	r1, [pc, #424]	@ (8006fcc <__ieee754_pow+0x294>)
 8006e24:	4632      	mov	r2, r6
 8006e26:	463b      	mov	r3, r7
 8006e28:	2000      	movs	r0, #0
 8006e2a:	f7f9 fd17 	bl	800085c <__aeabi_ddiv>
 8006e2e:	e7a0      	b.n	8006d72 <__ieee754_pow+0x3a>
 8006e30:	2400      	movs	r4, #0
 8006e32:	bbc1      	cbnz	r1, 8006ea6 <__ieee754_pow+0x16e>
 8006e34:	4a63      	ldr	r2, [pc, #396]	@ (8006fc4 <__ieee754_pow+0x28c>)
 8006e36:	4592      	cmp	sl, r2
 8006e38:	d1ec      	bne.n	8006e14 <__ieee754_pow+0xdc>
 8006e3a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006e3e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006e42:	431a      	orrs	r2, r3
 8006e44:	f000 8479 	beq.w	800773a <__ieee754_pow+0xa02>
 8006e48:	4b61      	ldr	r3, [pc, #388]	@ (8006fd0 <__ieee754_pow+0x298>)
 8006e4a:	4598      	cmp	r8, r3
 8006e4c:	d908      	bls.n	8006e60 <__ieee754_pow+0x128>
 8006e4e:	f1b9 0f00 	cmp.w	r9, #0
 8006e52:	f2c0 8476 	blt.w	8007742 <__ieee754_pow+0xa0a>
 8006e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e5a:	e78a      	b.n	8006d72 <__ieee754_pow+0x3a>
 8006e5c:	2402      	movs	r4, #2
 8006e5e:	e7e8      	b.n	8006e32 <__ieee754_pow+0xfa>
 8006e60:	f1b9 0f00 	cmp.w	r9, #0
 8006e64:	f04f 0000 	mov.w	r0, #0
 8006e68:	f04f 0100 	mov.w	r1, #0
 8006e6c:	da81      	bge.n	8006d72 <__ieee754_pow+0x3a>
 8006e6e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006e72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006e76:	e77c      	b.n	8006d72 <__ieee754_pow+0x3a>
 8006e78:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006e7c:	d106      	bne.n	8006e8c <__ieee754_pow+0x154>
 8006e7e:	4632      	mov	r2, r6
 8006e80:	463b      	mov	r3, r7
 8006e82:	4630      	mov	r0, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 fbbf 	bl	8000608 <__aeabi_dmul>
 8006e8a:	e772      	b.n	8006d72 <__ieee754_pow+0x3a>
 8006e8c:	4a51      	ldr	r2, [pc, #324]	@ (8006fd4 <__ieee754_pow+0x29c>)
 8006e8e:	4591      	cmp	r9, r2
 8006e90:	d109      	bne.n	8006ea6 <__ieee754_pow+0x16e>
 8006e92:	2d00      	cmp	r5, #0
 8006e94:	db07      	blt.n	8006ea6 <__ieee754_pow+0x16e>
 8006e96:	ec47 6b10 	vmov	d0, r6, r7
 8006e9a:	b011      	add	sp, #68	@ 0x44
 8006e9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	f000 bd52 	b.w	8007948 <__ieee754_sqrt>
 8006ea4:	2400      	movs	r4, #0
 8006ea6:	ec47 6b10 	vmov	d0, r6, r7
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	f000 fc88 	bl	80077c0 <fabs>
 8006eb0:	9b02      	ldr	r3, [sp, #8]
 8006eb2:	ec51 0b10 	vmov	r0, r1, d0
 8006eb6:	bb53      	cbnz	r3, 8006f0e <__ieee754_pow+0x1d6>
 8006eb8:	4b44      	ldr	r3, [pc, #272]	@ (8006fcc <__ieee754_pow+0x294>)
 8006eba:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d002      	beq.n	8006ec8 <__ieee754_pow+0x190>
 8006ec2:	f1b8 0f00 	cmp.w	r8, #0
 8006ec6:	d122      	bne.n	8006f0e <__ieee754_pow+0x1d6>
 8006ec8:	f1b9 0f00 	cmp.w	r9, #0
 8006ecc:	da05      	bge.n	8006eda <__ieee754_pow+0x1a2>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	493d      	ldr	r1, [pc, #244]	@ (8006fcc <__ieee754_pow+0x294>)
 8006ed6:	f7f9 fcc1 	bl	800085c <__aeabi_ddiv>
 8006eda:	2d00      	cmp	r5, #0
 8006edc:	f6bf af49 	bge.w	8006d72 <__ieee754_pow+0x3a>
 8006ee0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8006ee4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006ee8:	ea58 0804 	orrs.w	r8, r8, r4
 8006eec:	d108      	bne.n	8006f00 <__ieee754_pow+0x1c8>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f7f9 f9cf 	bl	8000298 <__aeabi_dsub>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	e794      	b.n	8006e2a <__ieee754_pow+0xf2>
 8006f00:	2c01      	cmp	r4, #1
 8006f02:	f47f af36 	bne.w	8006d72 <__ieee754_pow+0x3a>
 8006f06:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	e731      	b.n	8006d72 <__ieee754_pow+0x3a>
 8006f0e:	0feb      	lsrs	r3, r5, #31
 8006f10:	3b01      	subs	r3, #1
 8006f12:	ea53 0204 	orrs.w	r2, r3, r4
 8006f16:	d102      	bne.n	8006f1e <__ieee754_pow+0x1e6>
 8006f18:	4632      	mov	r2, r6
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	e7e9      	b.n	8006ef2 <__ieee754_pow+0x1ba>
 8006f1e:	3c01      	subs	r4, #1
 8006f20:	431c      	orrs	r4, r3
 8006f22:	d016      	beq.n	8006f52 <__ieee754_pow+0x21a>
 8006f24:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006fb0 <__ieee754_pow+0x278>
 8006f28:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006f2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f30:	f240 8112 	bls.w	8007158 <__ieee754_pow+0x420>
 8006f34:	4b28      	ldr	r3, [pc, #160]	@ (8006fd8 <__ieee754_pow+0x2a0>)
 8006f36:	459a      	cmp	sl, r3
 8006f38:	4b25      	ldr	r3, [pc, #148]	@ (8006fd0 <__ieee754_pow+0x298>)
 8006f3a:	d916      	bls.n	8006f6a <__ieee754_pow+0x232>
 8006f3c:	4598      	cmp	r8, r3
 8006f3e:	d80b      	bhi.n	8006f58 <__ieee754_pow+0x220>
 8006f40:	f1b9 0f00 	cmp.w	r9, #0
 8006f44:	da0b      	bge.n	8006f5e <__ieee754_pow+0x226>
 8006f46:	2000      	movs	r0, #0
 8006f48:	b011      	add	sp, #68	@ 0x44
 8006f4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4e:	f000 bcf3 	b.w	8007938 <__math_oflow>
 8006f52:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006fb8 <__ieee754_pow+0x280>
 8006f56:	e7e7      	b.n	8006f28 <__ieee754_pow+0x1f0>
 8006f58:	f1b9 0f00 	cmp.w	r9, #0
 8006f5c:	dcf3      	bgt.n	8006f46 <__ieee754_pow+0x20e>
 8006f5e:	2000      	movs	r0, #0
 8006f60:	b011      	add	sp, #68	@ 0x44
 8006f62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f66:	f000 bcdf 	b.w	8007928 <__math_uflow>
 8006f6a:	4598      	cmp	r8, r3
 8006f6c:	d20c      	bcs.n	8006f88 <__ieee754_pow+0x250>
 8006f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	2300      	movs	r3, #0
 8006f76:	f7f9 fdb9 	bl	8000aec <__aeabi_dcmplt>
 8006f7a:	3800      	subs	r0, #0
 8006f7c:	bf18      	it	ne
 8006f7e:	2001      	movne	r0, #1
 8006f80:	f1b9 0f00 	cmp.w	r9, #0
 8006f84:	daec      	bge.n	8006f60 <__ieee754_pow+0x228>
 8006f86:	e7df      	b.n	8006f48 <__ieee754_pow+0x210>
 8006f88:	4b10      	ldr	r3, [pc, #64]	@ (8006fcc <__ieee754_pow+0x294>)
 8006f8a:	4598      	cmp	r8, r3
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	d924      	bls.n	8006fdc <__ieee754_pow+0x2a4>
 8006f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f96:	2300      	movs	r3, #0
 8006f98:	f7f9 fda8 	bl	8000aec <__aeabi_dcmplt>
 8006f9c:	3800      	subs	r0, #0
 8006f9e:	bf18      	it	ne
 8006fa0:	2001      	movne	r0, #1
 8006fa2:	f1b9 0f00 	cmp.w	r9, #0
 8006fa6:	dccf      	bgt.n	8006f48 <__ieee754_pow+0x210>
 8006fa8:	e7da      	b.n	8006f60 <__ieee754_pow+0x228>
 8006faa:	bf00      	nop
 8006fac:	f3af 8000 	nop.w
 8006fb0:	00000000 	.word	0x00000000
 8006fb4:	3ff00000 	.word	0x3ff00000
 8006fb8:	00000000 	.word	0x00000000
 8006fbc:	bff00000 	.word	0xbff00000
 8006fc0:	fff00000 	.word	0xfff00000
 8006fc4:	7ff00000 	.word	0x7ff00000
 8006fc8:	433fffff 	.word	0x433fffff
 8006fcc:	3ff00000 	.word	0x3ff00000
 8006fd0:	3fefffff 	.word	0x3fefffff
 8006fd4:	3fe00000 	.word	0x3fe00000
 8006fd8:	43f00000 	.word	0x43f00000
 8006fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8007148 <__ieee754_pow+0x410>)
 8006fde:	f7f9 f95b 	bl	8000298 <__aeabi_dsub>
 8006fe2:	a351      	add	r3, pc, #324	@ (adr r3, 8007128 <__ieee754_pow+0x3f0>)
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	4604      	mov	r4, r0
 8006fea:	460d      	mov	r5, r1
 8006fec:	f7f9 fb0c 	bl	8000608 <__aeabi_dmul>
 8006ff0:	a34f      	add	r3, pc, #316	@ (adr r3, 8007130 <__ieee754_pow+0x3f8>)
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	460f      	mov	r7, r1
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f7f9 fb03 	bl	8000608 <__aeabi_dmul>
 8007002:	4b52      	ldr	r3, [pc, #328]	@ (800714c <__ieee754_pow+0x414>)
 8007004:	4682      	mov	sl, r0
 8007006:	468b      	mov	fp, r1
 8007008:	2200      	movs	r2, #0
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 fafb 	bl	8000608 <__aeabi_dmul>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	a148      	add	r1, pc, #288	@ (adr r1, 8007138 <__ieee754_pow+0x400>)
 8007018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800701c:	f7f9 f93c 	bl	8000298 <__aeabi_dsub>
 8007020:	4622      	mov	r2, r4
 8007022:	462b      	mov	r3, r5
 8007024:	f7f9 faf0 	bl	8000608 <__aeabi_dmul>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	2000      	movs	r0, #0
 800702e:	4948      	ldr	r1, [pc, #288]	@ (8007150 <__ieee754_pow+0x418>)
 8007030:	f7f9 f932 	bl	8000298 <__aeabi_dsub>
 8007034:	4622      	mov	r2, r4
 8007036:	4680      	mov	r8, r0
 8007038:	4689      	mov	r9, r1
 800703a:	462b      	mov	r3, r5
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	f7f9 fae2 	bl	8000608 <__aeabi_dmul>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4640      	mov	r0, r8
 800704a:	4649      	mov	r1, r9
 800704c:	f7f9 fadc 	bl	8000608 <__aeabi_dmul>
 8007050:	a33b      	add	r3, pc, #236	@ (adr r3, 8007140 <__ieee754_pow+0x408>)
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f7f9 fad7 	bl	8000608 <__aeabi_dmul>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4650      	mov	r0, sl
 8007060:	4659      	mov	r1, fp
 8007062:	f7f9 f919 	bl	8000298 <__aeabi_dsub>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4680      	mov	r8, r0
 800706c:	4689      	mov	r9, r1
 800706e:	4630      	mov	r0, r6
 8007070:	4639      	mov	r1, r7
 8007072:	f7f9 f913 	bl	800029c <__adddf3>
 8007076:	2400      	movs	r4, #0
 8007078:	4632      	mov	r2, r6
 800707a:	463b      	mov	r3, r7
 800707c:	4620      	mov	r0, r4
 800707e:	460d      	mov	r5, r1
 8007080:	f7f9 f90a 	bl	8000298 <__aeabi_dsub>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 f904 	bl	8000298 <__aeabi_dsub>
 8007090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007094:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007098:	2300      	movs	r3, #0
 800709a:	9304      	str	r3, [sp, #16]
 800709c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80070a0:	4606      	mov	r6, r0
 80070a2:	460f      	mov	r7, r1
 80070a4:	4652      	mov	r2, sl
 80070a6:	465b      	mov	r3, fp
 80070a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070ac:	f7f9 f8f4 	bl	8000298 <__aeabi_dsub>
 80070b0:	4622      	mov	r2, r4
 80070b2:	462b      	mov	r3, r5
 80070b4:	f7f9 faa8 	bl	8000608 <__aeabi_dmul>
 80070b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070bc:	4680      	mov	r8, r0
 80070be:	4689      	mov	r9, r1
 80070c0:	4630      	mov	r0, r6
 80070c2:	4639      	mov	r1, r7
 80070c4:	f7f9 faa0 	bl	8000608 <__aeabi_dmul>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4640      	mov	r0, r8
 80070ce:	4649      	mov	r1, r9
 80070d0:	f7f9 f8e4 	bl	800029c <__adddf3>
 80070d4:	4652      	mov	r2, sl
 80070d6:	465b      	mov	r3, fp
 80070d8:	4606      	mov	r6, r0
 80070da:	460f      	mov	r7, r1
 80070dc:	4620      	mov	r0, r4
 80070de:	4629      	mov	r1, r5
 80070e0:	f7f9 fa92 	bl	8000608 <__aeabi_dmul>
 80070e4:	460b      	mov	r3, r1
 80070e6:	4602      	mov	r2, r0
 80070e8:	4680      	mov	r8, r0
 80070ea:	4689      	mov	r9, r1
 80070ec:	4630      	mov	r0, r6
 80070ee:	4639      	mov	r1, r7
 80070f0:	f7f9 f8d4 	bl	800029c <__adddf3>
 80070f4:	4b17      	ldr	r3, [pc, #92]	@ (8007154 <__ieee754_pow+0x41c>)
 80070f6:	4299      	cmp	r1, r3
 80070f8:	4604      	mov	r4, r0
 80070fa:	460d      	mov	r5, r1
 80070fc:	468a      	mov	sl, r1
 80070fe:	468b      	mov	fp, r1
 8007100:	f340 82ef 	ble.w	80076e2 <__ieee754_pow+0x9aa>
 8007104:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007108:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800710c:	4303      	orrs	r3, r0
 800710e:	f000 81e8 	beq.w	80074e2 <__ieee754_pow+0x7aa>
 8007112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	2300      	movs	r3, #0
 800711a:	f7f9 fce7 	bl	8000aec <__aeabi_dcmplt>
 800711e:	3800      	subs	r0, #0
 8007120:	bf18      	it	ne
 8007122:	2001      	movne	r0, #1
 8007124:	e710      	b.n	8006f48 <__ieee754_pow+0x210>
 8007126:	bf00      	nop
 8007128:	60000000 	.word	0x60000000
 800712c:	3ff71547 	.word	0x3ff71547
 8007130:	f85ddf44 	.word	0xf85ddf44
 8007134:	3e54ae0b 	.word	0x3e54ae0b
 8007138:	55555555 	.word	0x55555555
 800713c:	3fd55555 	.word	0x3fd55555
 8007140:	652b82fe 	.word	0x652b82fe
 8007144:	3ff71547 	.word	0x3ff71547
 8007148:	3ff00000 	.word	0x3ff00000
 800714c:	3fd00000 	.word	0x3fd00000
 8007150:	3fe00000 	.word	0x3fe00000
 8007154:	408fffff 	.word	0x408fffff
 8007158:	4bd5      	ldr	r3, [pc, #852]	@ (80074b0 <__ieee754_pow+0x778>)
 800715a:	402b      	ands	r3, r5
 800715c:	2200      	movs	r2, #0
 800715e:	b92b      	cbnz	r3, 800716c <__ieee754_pow+0x434>
 8007160:	4bd4      	ldr	r3, [pc, #848]	@ (80074b4 <__ieee754_pow+0x77c>)
 8007162:	f7f9 fa51 	bl	8000608 <__aeabi_dmul>
 8007166:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800716a:	468b      	mov	fp, r1
 800716c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007170:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007174:	4413      	add	r3, r2
 8007176:	930a      	str	r3, [sp, #40]	@ 0x28
 8007178:	4bcf      	ldr	r3, [pc, #828]	@ (80074b8 <__ieee754_pow+0x780>)
 800717a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800717e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007182:	459b      	cmp	fp, r3
 8007184:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007188:	dd08      	ble.n	800719c <__ieee754_pow+0x464>
 800718a:	4bcc      	ldr	r3, [pc, #816]	@ (80074bc <__ieee754_pow+0x784>)
 800718c:	459b      	cmp	fp, r3
 800718e:	f340 81a5 	ble.w	80074dc <__ieee754_pow+0x7a4>
 8007192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007194:	3301      	adds	r3, #1
 8007196:	930a      	str	r3, [sp, #40]	@ 0x28
 8007198:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800719c:	f04f 0a00 	mov.w	sl, #0
 80071a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80071a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071a6:	4bc6      	ldr	r3, [pc, #792]	@ (80074c0 <__ieee754_pow+0x788>)
 80071a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071ac:	ed93 7b00 	vldr	d7, [r3]
 80071b0:	4629      	mov	r1, r5
 80071b2:	ec53 2b17 	vmov	r2, r3, d7
 80071b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071be:	f7f9 f86b 	bl	8000298 <__aeabi_dsub>
 80071c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80071c6:	4606      	mov	r6, r0
 80071c8:	460f      	mov	r7, r1
 80071ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ce:	f7f9 f865 	bl	800029c <__adddf3>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	2000      	movs	r0, #0
 80071d8:	49ba      	ldr	r1, [pc, #744]	@ (80074c4 <__ieee754_pow+0x78c>)
 80071da:	f7f9 fb3f 	bl	800085c <__aeabi_ddiv>
 80071de:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4630      	mov	r0, r6
 80071e8:	4639      	mov	r1, r7
 80071ea:	f7f9 fa0d 	bl	8000608 <__aeabi_dmul>
 80071ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071f2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80071f6:	106d      	asrs	r5, r5, #1
 80071f8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80071fc:	f04f 0b00 	mov.w	fp, #0
 8007200:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007204:	4661      	mov	r1, ip
 8007206:	2200      	movs	r2, #0
 8007208:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800720c:	4658      	mov	r0, fp
 800720e:	46e1      	mov	r9, ip
 8007210:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007214:	4614      	mov	r4, r2
 8007216:	461d      	mov	r5, r3
 8007218:	f7f9 f9f6 	bl	8000608 <__aeabi_dmul>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4630      	mov	r0, r6
 8007222:	4639      	mov	r1, r7
 8007224:	f7f9 f838 	bl	8000298 <__aeabi_dsub>
 8007228:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800722c:	4606      	mov	r6, r0
 800722e:	460f      	mov	r7, r1
 8007230:	4620      	mov	r0, r4
 8007232:	4629      	mov	r1, r5
 8007234:	f7f9 f830 	bl	8000298 <__aeabi_dsub>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007240:	f7f9 f82a 	bl	8000298 <__aeabi_dsub>
 8007244:	465a      	mov	r2, fp
 8007246:	464b      	mov	r3, r9
 8007248:	f7f9 f9de 	bl	8000608 <__aeabi_dmul>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4630      	mov	r0, r6
 8007252:	4639      	mov	r1, r7
 8007254:	f7f9 f820 	bl	8000298 <__aeabi_dsub>
 8007258:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800725c:	f7f9 f9d4 	bl	8000608 <__aeabi_dmul>
 8007260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007264:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007268:	4610      	mov	r0, r2
 800726a:	4619      	mov	r1, r3
 800726c:	f7f9 f9cc 	bl	8000608 <__aeabi_dmul>
 8007270:	a37d      	add	r3, pc, #500	@ (adr r3, 8007468 <__ieee754_pow+0x730>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	4604      	mov	r4, r0
 8007278:	460d      	mov	r5, r1
 800727a:	f7f9 f9c5 	bl	8000608 <__aeabi_dmul>
 800727e:	a37c      	add	r3, pc, #496	@ (adr r3, 8007470 <__ieee754_pow+0x738>)
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	f7f9 f80a 	bl	800029c <__adddf3>
 8007288:	4622      	mov	r2, r4
 800728a:	462b      	mov	r3, r5
 800728c:	f7f9 f9bc 	bl	8000608 <__aeabi_dmul>
 8007290:	a379      	add	r3, pc, #484	@ (adr r3, 8007478 <__ieee754_pow+0x740>)
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f7f9 f801 	bl	800029c <__adddf3>
 800729a:	4622      	mov	r2, r4
 800729c:	462b      	mov	r3, r5
 800729e:	f7f9 f9b3 	bl	8000608 <__aeabi_dmul>
 80072a2:	a377      	add	r3, pc, #476	@ (adr r3, 8007480 <__ieee754_pow+0x748>)
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f7f8 fff8 	bl	800029c <__adddf3>
 80072ac:	4622      	mov	r2, r4
 80072ae:	462b      	mov	r3, r5
 80072b0:	f7f9 f9aa 	bl	8000608 <__aeabi_dmul>
 80072b4:	a374      	add	r3, pc, #464	@ (adr r3, 8007488 <__ieee754_pow+0x750>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f8 ffef 	bl	800029c <__adddf3>
 80072be:	4622      	mov	r2, r4
 80072c0:	462b      	mov	r3, r5
 80072c2:	f7f9 f9a1 	bl	8000608 <__aeabi_dmul>
 80072c6:	a372      	add	r3, pc, #456	@ (adr r3, 8007490 <__ieee754_pow+0x758>)
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f7f8 ffe6 	bl	800029c <__adddf3>
 80072d0:	4622      	mov	r2, r4
 80072d2:	4606      	mov	r6, r0
 80072d4:	460f      	mov	r7, r1
 80072d6:	462b      	mov	r3, r5
 80072d8:	4620      	mov	r0, r4
 80072da:	4629      	mov	r1, r5
 80072dc:	f7f9 f994 	bl	8000608 <__aeabi_dmul>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f9 f98e 	bl	8000608 <__aeabi_dmul>
 80072ec:	465a      	mov	r2, fp
 80072ee:	4604      	mov	r4, r0
 80072f0:	460d      	mov	r5, r1
 80072f2:	464b      	mov	r3, r9
 80072f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072f8:	f7f8 ffd0 	bl	800029c <__adddf3>
 80072fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007300:	f7f9 f982 	bl	8000608 <__aeabi_dmul>
 8007304:	4622      	mov	r2, r4
 8007306:	462b      	mov	r3, r5
 8007308:	f7f8 ffc8 	bl	800029c <__adddf3>
 800730c:	465a      	mov	r2, fp
 800730e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007312:	464b      	mov	r3, r9
 8007314:	4658      	mov	r0, fp
 8007316:	4649      	mov	r1, r9
 8007318:	f7f9 f976 	bl	8000608 <__aeabi_dmul>
 800731c:	4b6a      	ldr	r3, [pc, #424]	@ (80074c8 <__ieee754_pow+0x790>)
 800731e:	2200      	movs	r2, #0
 8007320:	4606      	mov	r6, r0
 8007322:	460f      	mov	r7, r1
 8007324:	f7f8 ffba 	bl	800029c <__adddf3>
 8007328:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800732c:	f7f8 ffb6 	bl	800029c <__adddf3>
 8007330:	46d8      	mov	r8, fp
 8007332:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007336:	460d      	mov	r5, r1
 8007338:	465a      	mov	r2, fp
 800733a:	460b      	mov	r3, r1
 800733c:	4640      	mov	r0, r8
 800733e:	4649      	mov	r1, r9
 8007340:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007344:	f7f9 f960 	bl	8000608 <__aeabi_dmul>
 8007348:	465c      	mov	r4, fp
 800734a:	4680      	mov	r8, r0
 800734c:	4689      	mov	r9, r1
 800734e:	4b5e      	ldr	r3, [pc, #376]	@ (80074c8 <__ieee754_pow+0x790>)
 8007350:	2200      	movs	r2, #0
 8007352:	4620      	mov	r0, r4
 8007354:	4629      	mov	r1, r5
 8007356:	f7f8 ff9f 	bl	8000298 <__aeabi_dsub>
 800735a:	4632      	mov	r2, r6
 800735c:	463b      	mov	r3, r7
 800735e:	f7f8 ff9b 	bl	8000298 <__aeabi_dsub>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800736a:	f7f8 ff95 	bl	8000298 <__aeabi_dsub>
 800736e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007372:	f7f9 f949 	bl	8000608 <__aeabi_dmul>
 8007376:	4622      	mov	r2, r4
 8007378:	4606      	mov	r6, r0
 800737a:	460f      	mov	r7, r1
 800737c:	462b      	mov	r3, r5
 800737e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007382:	f7f9 f941 	bl	8000608 <__aeabi_dmul>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4630      	mov	r0, r6
 800738c:	4639      	mov	r1, r7
 800738e:	f7f8 ff85 	bl	800029c <__adddf3>
 8007392:	4606      	mov	r6, r0
 8007394:	460f      	mov	r7, r1
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4640      	mov	r0, r8
 800739c:	4649      	mov	r1, r9
 800739e:	f7f8 ff7d 	bl	800029c <__adddf3>
 80073a2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80073a6:	a33c      	add	r3, pc, #240	@ (adr r3, 8007498 <__ieee754_pow+0x760>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	4658      	mov	r0, fp
 80073ae:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80073b2:	460d      	mov	r5, r1
 80073b4:	f7f9 f928 	bl	8000608 <__aeabi_dmul>
 80073b8:	465c      	mov	r4, fp
 80073ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073be:	4642      	mov	r2, r8
 80073c0:	464b      	mov	r3, r9
 80073c2:	4620      	mov	r0, r4
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7f8 ff67 	bl	8000298 <__aeabi_dsub>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	4630      	mov	r0, r6
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f8 ff61 	bl	8000298 <__aeabi_dsub>
 80073d6:	a332      	add	r3, pc, #200	@ (adr r3, 80074a0 <__ieee754_pow+0x768>)
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f9 f914 	bl	8000608 <__aeabi_dmul>
 80073e0:	a331      	add	r3, pc, #196	@ (adr r3, 80074a8 <__ieee754_pow+0x770>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	4606      	mov	r6, r0
 80073e8:	460f      	mov	r7, r1
 80073ea:	4620      	mov	r0, r4
 80073ec:	4629      	mov	r1, r5
 80073ee:	f7f9 f90b 	bl	8000608 <__aeabi_dmul>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4630      	mov	r0, r6
 80073f8:	4639      	mov	r1, r7
 80073fa:	f7f8 ff4f 	bl	800029c <__adddf3>
 80073fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007400:	4b32      	ldr	r3, [pc, #200]	@ (80074cc <__ieee754_pow+0x794>)
 8007402:	4413      	add	r3, r2
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	f7f8 ff48 	bl	800029c <__adddf3>
 800740c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007410:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007412:	f7f9 f88f 	bl	8000534 <__aeabi_i2d>
 8007416:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007418:	4b2d      	ldr	r3, [pc, #180]	@ (80074d0 <__ieee754_pow+0x798>)
 800741a:	4413      	add	r3, r2
 800741c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007420:	4606      	mov	r6, r0
 8007422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007426:	460f      	mov	r7, r1
 8007428:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800742c:	f7f8 ff36 	bl	800029c <__adddf3>
 8007430:	4642      	mov	r2, r8
 8007432:	464b      	mov	r3, r9
 8007434:	f7f8 ff32 	bl	800029c <__adddf3>
 8007438:	4632      	mov	r2, r6
 800743a:	463b      	mov	r3, r7
 800743c:	f7f8 ff2e 	bl	800029c <__adddf3>
 8007440:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007444:	4632      	mov	r2, r6
 8007446:	463b      	mov	r3, r7
 8007448:	4658      	mov	r0, fp
 800744a:	460d      	mov	r5, r1
 800744c:	f7f8 ff24 	bl	8000298 <__aeabi_dsub>
 8007450:	4642      	mov	r2, r8
 8007452:	464b      	mov	r3, r9
 8007454:	f7f8 ff20 	bl	8000298 <__aeabi_dsub>
 8007458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800745c:	f7f8 ff1c 	bl	8000298 <__aeabi_dsub>
 8007460:	465c      	mov	r4, fp
 8007462:	4602      	mov	r2, r0
 8007464:	e036      	b.n	80074d4 <__ieee754_pow+0x79c>
 8007466:	bf00      	nop
 8007468:	4a454eef 	.word	0x4a454eef
 800746c:	3fca7e28 	.word	0x3fca7e28
 8007470:	93c9db65 	.word	0x93c9db65
 8007474:	3fcd864a 	.word	0x3fcd864a
 8007478:	a91d4101 	.word	0xa91d4101
 800747c:	3fd17460 	.word	0x3fd17460
 8007480:	518f264d 	.word	0x518f264d
 8007484:	3fd55555 	.word	0x3fd55555
 8007488:	db6fabff 	.word	0xdb6fabff
 800748c:	3fdb6db6 	.word	0x3fdb6db6
 8007490:	33333303 	.word	0x33333303
 8007494:	3fe33333 	.word	0x3fe33333
 8007498:	e0000000 	.word	0xe0000000
 800749c:	3feec709 	.word	0x3feec709
 80074a0:	dc3a03fd 	.word	0xdc3a03fd
 80074a4:	3feec709 	.word	0x3feec709
 80074a8:	145b01f5 	.word	0x145b01f5
 80074ac:	be3e2fe0 	.word	0xbe3e2fe0
 80074b0:	7ff00000 	.word	0x7ff00000
 80074b4:	43400000 	.word	0x43400000
 80074b8:	0003988e 	.word	0x0003988e
 80074bc:	000bb679 	.word	0x000bb679
 80074c0:	08007f08 	.word	0x08007f08
 80074c4:	3ff00000 	.word	0x3ff00000
 80074c8:	40080000 	.word	0x40080000
 80074cc:	08007ee8 	.word	0x08007ee8
 80074d0:	08007ef8 	.word	0x08007ef8
 80074d4:	460b      	mov	r3, r1
 80074d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074da:	e5d7      	b.n	800708c <__ieee754_pow+0x354>
 80074dc:	f04f 0a01 	mov.w	sl, #1
 80074e0:	e65e      	b.n	80071a0 <__ieee754_pow+0x468>
 80074e2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80077b4 <__ieee754_pow+0xa7c>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	f7f8 fed6 	bl	800029c <__adddf3>
 80074f0:	4642      	mov	r2, r8
 80074f2:	e9cd 0100 	strd	r0, r1, [sp]
 80074f6:	464b      	mov	r3, r9
 80074f8:	4620      	mov	r0, r4
 80074fa:	4629      	mov	r1, r5
 80074fc:	f7f8 fecc 	bl	8000298 <__aeabi_dsub>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007508:	f7f9 fb0e 	bl	8000b28 <__aeabi_dcmpgt>
 800750c:	2800      	cmp	r0, #0
 800750e:	f47f ae00 	bne.w	8007112 <__ieee754_pow+0x3da>
 8007512:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007516:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800751a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800751e:	fa43 fa0a 	asr.w	sl, r3, sl
 8007522:	44da      	add	sl, fp
 8007524:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007528:	489d      	ldr	r0, [pc, #628]	@ (80077a0 <__ieee754_pow+0xa68>)
 800752a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800752e:	4108      	asrs	r0, r1
 8007530:	ea00 030a 	and.w	r3, r0, sl
 8007534:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007538:	f1c1 0114 	rsb	r1, r1, #20
 800753c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007540:	fa4a fa01 	asr.w	sl, sl, r1
 8007544:	f1bb 0f00 	cmp.w	fp, #0
 8007548:	4640      	mov	r0, r8
 800754a:	4649      	mov	r1, r9
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	bfb8      	it	lt
 8007552:	f1ca 0a00 	rsblt	sl, sl, #0
 8007556:	f7f8 fe9f 	bl	8000298 <__aeabi_dsub>
 800755a:	4680      	mov	r8, r0
 800755c:	4689      	mov	r9, r1
 800755e:	4632      	mov	r2, r6
 8007560:	463b      	mov	r3, r7
 8007562:	4640      	mov	r0, r8
 8007564:	4649      	mov	r1, r9
 8007566:	f7f8 fe99 	bl	800029c <__adddf3>
 800756a:	2400      	movs	r4, #0
 800756c:	a37c      	add	r3, pc, #496	@ (adr r3, 8007760 <__ieee754_pow+0xa28>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	4620      	mov	r0, r4
 8007574:	460d      	mov	r5, r1
 8007576:	f7f9 f847 	bl	8000608 <__aeabi_dmul>
 800757a:	4642      	mov	r2, r8
 800757c:	e9cd 0100 	strd	r0, r1, [sp]
 8007580:	464b      	mov	r3, r9
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f8 fe87 	bl	8000298 <__aeabi_dsub>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4630      	mov	r0, r6
 8007590:	4639      	mov	r1, r7
 8007592:	f7f8 fe81 	bl	8000298 <__aeabi_dsub>
 8007596:	a374      	add	r3, pc, #464	@ (adr r3, 8007768 <__ieee754_pow+0xa30>)
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f7f9 f834 	bl	8000608 <__aeabi_dmul>
 80075a0:	a373      	add	r3, pc, #460	@ (adr r3, 8007770 <__ieee754_pow+0xa38>)
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	4680      	mov	r8, r0
 80075a8:	4689      	mov	r9, r1
 80075aa:	4620      	mov	r0, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7f9 f82b 	bl	8000608 <__aeabi_dmul>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4640      	mov	r0, r8
 80075b8:	4649      	mov	r1, r9
 80075ba:	f7f8 fe6f 	bl	800029c <__adddf3>
 80075be:	4604      	mov	r4, r0
 80075c0:	460d      	mov	r5, r1
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ca:	f7f8 fe67 	bl	800029c <__adddf3>
 80075ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075d2:	4680      	mov	r8, r0
 80075d4:	4689      	mov	r9, r1
 80075d6:	f7f8 fe5f 	bl	8000298 <__aeabi_dsub>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4620      	mov	r0, r4
 80075e0:	4629      	mov	r1, r5
 80075e2:	f7f8 fe59 	bl	8000298 <__aeabi_dsub>
 80075e6:	4642      	mov	r2, r8
 80075e8:	4606      	mov	r6, r0
 80075ea:	460f      	mov	r7, r1
 80075ec:	464b      	mov	r3, r9
 80075ee:	4640      	mov	r0, r8
 80075f0:	4649      	mov	r1, r9
 80075f2:	f7f9 f809 	bl	8000608 <__aeabi_dmul>
 80075f6:	a360      	add	r3, pc, #384	@ (adr r3, 8007778 <__ieee754_pow+0xa40>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	4604      	mov	r4, r0
 80075fe:	460d      	mov	r5, r1
 8007600:	f7f9 f802 	bl	8000608 <__aeabi_dmul>
 8007604:	a35e      	add	r3, pc, #376	@ (adr r3, 8007780 <__ieee754_pow+0xa48>)
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f7f8 fe45 	bl	8000298 <__aeabi_dsub>
 800760e:	4622      	mov	r2, r4
 8007610:	462b      	mov	r3, r5
 8007612:	f7f8 fff9 	bl	8000608 <__aeabi_dmul>
 8007616:	a35c      	add	r3, pc, #368	@ (adr r3, 8007788 <__ieee754_pow+0xa50>)
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	f7f8 fe3e 	bl	800029c <__adddf3>
 8007620:	4622      	mov	r2, r4
 8007622:	462b      	mov	r3, r5
 8007624:	f7f8 fff0 	bl	8000608 <__aeabi_dmul>
 8007628:	a359      	add	r3, pc, #356	@ (adr r3, 8007790 <__ieee754_pow+0xa58>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f8 fe33 	bl	8000298 <__aeabi_dsub>
 8007632:	4622      	mov	r2, r4
 8007634:	462b      	mov	r3, r5
 8007636:	f7f8 ffe7 	bl	8000608 <__aeabi_dmul>
 800763a:	a357      	add	r3, pc, #348	@ (adr r3, 8007798 <__ieee754_pow+0xa60>)
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f7f8 fe2c 	bl	800029c <__adddf3>
 8007644:	4622      	mov	r2, r4
 8007646:	462b      	mov	r3, r5
 8007648:	f7f8 ffde 	bl	8000608 <__aeabi_dmul>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4640      	mov	r0, r8
 8007652:	4649      	mov	r1, r9
 8007654:	f7f8 fe20 	bl	8000298 <__aeabi_dsub>
 8007658:	4604      	mov	r4, r0
 800765a:	460d      	mov	r5, r1
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4640      	mov	r0, r8
 8007662:	4649      	mov	r1, r9
 8007664:	f7f8 ffd0 	bl	8000608 <__aeabi_dmul>
 8007668:	2200      	movs	r2, #0
 800766a:	e9cd 0100 	strd	r0, r1, [sp]
 800766e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007672:	4620      	mov	r0, r4
 8007674:	4629      	mov	r1, r5
 8007676:	f7f8 fe0f 	bl	8000298 <__aeabi_dsub>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007682:	f7f9 f8eb 	bl	800085c <__aeabi_ddiv>
 8007686:	4632      	mov	r2, r6
 8007688:	4604      	mov	r4, r0
 800768a:	460d      	mov	r5, r1
 800768c:	463b      	mov	r3, r7
 800768e:	4640      	mov	r0, r8
 8007690:	4649      	mov	r1, r9
 8007692:	f7f8 ffb9 	bl	8000608 <__aeabi_dmul>
 8007696:	4632      	mov	r2, r6
 8007698:	463b      	mov	r3, r7
 800769a:	f7f8 fdff 	bl	800029c <__adddf3>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4620      	mov	r0, r4
 80076a4:	4629      	mov	r1, r5
 80076a6:	f7f8 fdf7 	bl	8000298 <__aeabi_dsub>
 80076aa:	4642      	mov	r2, r8
 80076ac:	464b      	mov	r3, r9
 80076ae:	f7f8 fdf3 	bl	8000298 <__aeabi_dsub>
 80076b2:	460b      	mov	r3, r1
 80076b4:	4602      	mov	r2, r0
 80076b6:	493b      	ldr	r1, [pc, #236]	@ (80077a4 <__ieee754_pow+0xa6c>)
 80076b8:	2000      	movs	r0, #0
 80076ba:	f7f8 fded 	bl	8000298 <__aeabi_dsub>
 80076be:	ec41 0b10 	vmov	d0, r0, r1
 80076c2:	ee10 3a90 	vmov	r3, s1
 80076c6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80076ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ce:	da30      	bge.n	8007732 <__ieee754_pow+0x9fa>
 80076d0:	4650      	mov	r0, sl
 80076d2:	f000 f87d 	bl	80077d0 <scalbn>
 80076d6:	ec51 0b10 	vmov	r0, r1, d0
 80076da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076de:	f7ff bbd2 	b.w	8006e86 <__ieee754_pow+0x14e>
 80076e2:	4c31      	ldr	r4, [pc, #196]	@ (80077a8 <__ieee754_pow+0xa70>)
 80076e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80076e8:	42a3      	cmp	r3, r4
 80076ea:	d91a      	bls.n	8007722 <__ieee754_pow+0x9ea>
 80076ec:	4b2f      	ldr	r3, [pc, #188]	@ (80077ac <__ieee754_pow+0xa74>)
 80076ee:	440b      	add	r3, r1
 80076f0:	4303      	orrs	r3, r0
 80076f2:	d009      	beq.n	8007708 <__ieee754_pow+0x9d0>
 80076f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f8:	2200      	movs	r2, #0
 80076fa:	2300      	movs	r3, #0
 80076fc:	f7f9 f9f6 	bl	8000aec <__aeabi_dcmplt>
 8007700:	3800      	subs	r0, #0
 8007702:	bf18      	it	ne
 8007704:	2001      	movne	r0, #1
 8007706:	e42b      	b.n	8006f60 <__ieee754_pow+0x228>
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	f7f8 fdc4 	bl	8000298 <__aeabi_dsub>
 8007710:	4632      	mov	r2, r6
 8007712:	463b      	mov	r3, r7
 8007714:	f7f9 f9fe 	bl	8000b14 <__aeabi_dcmpge>
 8007718:	2800      	cmp	r0, #0
 800771a:	d1eb      	bne.n	80076f4 <__ieee754_pow+0x9bc>
 800771c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80077bc <__ieee754_pow+0xa84>
 8007720:	e6f7      	b.n	8007512 <__ieee754_pow+0x7da>
 8007722:	469a      	mov	sl, r3
 8007724:	4b22      	ldr	r3, [pc, #136]	@ (80077b0 <__ieee754_pow+0xa78>)
 8007726:	459a      	cmp	sl, r3
 8007728:	f63f aef3 	bhi.w	8007512 <__ieee754_pow+0x7da>
 800772c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007730:	e715      	b.n	800755e <__ieee754_pow+0x826>
 8007732:	ec51 0b10 	vmov	r0, r1, d0
 8007736:	4619      	mov	r1, r3
 8007738:	e7cf      	b.n	80076da <__ieee754_pow+0x9a2>
 800773a:	491a      	ldr	r1, [pc, #104]	@ (80077a4 <__ieee754_pow+0xa6c>)
 800773c:	2000      	movs	r0, #0
 800773e:	f7ff bb18 	b.w	8006d72 <__ieee754_pow+0x3a>
 8007742:	2000      	movs	r0, #0
 8007744:	2100      	movs	r1, #0
 8007746:	f7ff bb14 	b.w	8006d72 <__ieee754_pow+0x3a>
 800774a:	4630      	mov	r0, r6
 800774c:	4639      	mov	r1, r7
 800774e:	f7ff bb10 	b.w	8006d72 <__ieee754_pow+0x3a>
 8007752:	460c      	mov	r4, r1
 8007754:	f7ff bb5e 	b.w	8006e14 <__ieee754_pow+0xdc>
 8007758:	2400      	movs	r4, #0
 800775a:	f7ff bb49 	b.w	8006df0 <__ieee754_pow+0xb8>
 800775e:	bf00      	nop
 8007760:	00000000 	.word	0x00000000
 8007764:	3fe62e43 	.word	0x3fe62e43
 8007768:	fefa39ef 	.word	0xfefa39ef
 800776c:	3fe62e42 	.word	0x3fe62e42
 8007770:	0ca86c39 	.word	0x0ca86c39
 8007774:	be205c61 	.word	0xbe205c61
 8007778:	72bea4d0 	.word	0x72bea4d0
 800777c:	3e663769 	.word	0x3e663769
 8007780:	c5d26bf1 	.word	0xc5d26bf1
 8007784:	3ebbbd41 	.word	0x3ebbbd41
 8007788:	af25de2c 	.word	0xaf25de2c
 800778c:	3f11566a 	.word	0x3f11566a
 8007790:	16bebd93 	.word	0x16bebd93
 8007794:	3f66c16c 	.word	0x3f66c16c
 8007798:	5555553e 	.word	0x5555553e
 800779c:	3fc55555 	.word	0x3fc55555
 80077a0:	fff00000 	.word	0xfff00000
 80077a4:	3ff00000 	.word	0x3ff00000
 80077a8:	4090cbff 	.word	0x4090cbff
 80077ac:	3f6f3400 	.word	0x3f6f3400
 80077b0:	3fe00000 	.word	0x3fe00000
 80077b4:	652b82fe 	.word	0x652b82fe
 80077b8:	3c971547 	.word	0x3c971547
 80077bc:	4090cc00 	.word	0x4090cc00

080077c0 <fabs>:
 80077c0:	ec51 0b10 	vmov	r0, r1, d0
 80077c4:	4602      	mov	r2, r0
 80077c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80077ca:	ec43 2b10 	vmov	d0, r2, r3
 80077ce:	4770      	bx	lr

080077d0 <scalbn>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	ec55 4b10 	vmov	r4, r5, d0
 80077d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80077da:	4606      	mov	r6, r0
 80077dc:	462b      	mov	r3, r5
 80077de:	b991      	cbnz	r1, 8007806 <scalbn+0x36>
 80077e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80077e4:	4323      	orrs	r3, r4
 80077e6:	d03d      	beq.n	8007864 <scalbn+0x94>
 80077e8:	4b35      	ldr	r3, [pc, #212]	@ (80078c0 <scalbn+0xf0>)
 80077ea:	4620      	mov	r0, r4
 80077ec:	4629      	mov	r1, r5
 80077ee:	2200      	movs	r2, #0
 80077f0:	f7f8 ff0a 	bl	8000608 <__aeabi_dmul>
 80077f4:	4b33      	ldr	r3, [pc, #204]	@ (80078c4 <scalbn+0xf4>)
 80077f6:	429e      	cmp	r6, r3
 80077f8:	4604      	mov	r4, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	da0f      	bge.n	800781e <scalbn+0x4e>
 80077fe:	a328      	add	r3, pc, #160	@ (adr r3, 80078a0 <scalbn+0xd0>)
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	e01e      	b.n	8007844 <scalbn+0x74>
 8007806:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800780a:	4291      	cmp	r1, r2
 800780c:	d10b      	bne.n	8007826 <scalbn+0x56>
 800780e:	4622      	mov	r2, r4
 8007810:	4620      	mov	r0, r4
 8007812:	4629      	mov	r1, r5
 8007814:	f7f8 fd42 	bl	800029c <__adddf3>
 8007818:	4604      	mov	r4, r0
 800781a:	460d      	mov	r5, r1
 800781c:	e022      	b.n	8007864 <scalbn+0x94>
 800781e:	460b      	mov	r3, r1
 8007820:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007824:	3936      	subs	r1, #54	@ 0x36
 8007826:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800782a:	4296      	cmp	r6, r2
 800782c:	dd0d      	ble.n	800784a <scalbn+0x7a>
 800782e:	2d00      	cmp	r5, #0
 8007830:	a11d      	add	r1, pc, #116	@ (adr r1, 80078a8 <scalbn+0xd8>)
 8007832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007836:	da02      	bge.n	800783e <scalbn+0x6e>
 8007838:	a11d      	add	r1, pc, #116	@ (adr r1, 80078b0 <scalbn+0xe0>)
 800783a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800783e:	a31a      	add	r3, pc, #104	@ (adr r3, 80078a8 <scalbn+0xd8>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f7f8 fee0 	bl	8000608 <__aeabi_dmul>
 8007848:	e7e6      	b.n	8007818 <scalbn+0x48>
 800784a:	1872      	adds	r2, r6, r1
 800784c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007850:	428a      	cmp	r2, r1
 8007852:	dcec      	bgt.n	800782e <scalbn+0x5e>
 8007854:	2a00      	cmp	r2, #0
 8007856:	dd08      	ble.n	800786a <scalbn+0x9a>
 8007858:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800785c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007860:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007864:	ec45 4b10 	vmov	d0, r4, r5
 8007868:	bd70      	pop	{r4, r5, r6, pc}
 800786a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800786e:	da08      	bge.n	8007882 <scalbn+0xb2>
 8007870:	2d00      	cmp	r5, #0
 8007872:	a10b      	add	r1, pc, #44	@ (adr r1, 80078a0 <scalbn+0xd0>)
 8007874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007878:	dac1      	bge.n	80077fe <scalbn+0x2e>
 800787a:	a10f      	add	r1, pc, #60	@ (adr r1, 80078b8 <scalbn+0xe8>)
 800787c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007880:	e7bd      	b.n	80077fe <scalbn+0x2e>
 8007882:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007886:	3236      	adds	r2, #54	@ 0x36
 8007888:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800788c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007890:	4620      	mov	r0, r4
 8007892:	4b0d      	ldr	r3, [pc, #52]	@ (80078c8 <scalbn+0xf8>)
 8007894:	4629      	mov	r1, r5
 8007896:	2200      	movs	r2, #0
 8007898:	e7d4      	b.n	8007844 <scalbn+0x74>
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w
 80078a0:	c2f8f359 	.word	0xc2f8f359
 80078a4:	01a56e1f 	.word	0x01a56e1f
 80078a8:	8800759c 	.word	0x8800759c
 80078ac:	7e37e43c 	.word	0x7e37e43c
 80078b0:	8800759c 	.word	0x8800759c
 80078b4:	fe37e43c 	.word	0xfe37e43c
 80078b8:	c2f8f359 	.word	0xc2f8f359
 80078bc:	81a56e1f 	.word	0x81a56e1f
 80078c0:	43500000 	.word	0x43500000
 80078c4:	ffff3cb0 	.word	0xffff3cb0
 80078c8:	3c900000 	.word	0x3c900000

080078cc <with_errno>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	ed2d 8b02 	vpush	{d8}
 80078d2:	eeb0 8a40 	vmov.f32	s16, s0
 80078d6:	eef0 8a60 	vmov.f32	s17, s1
 80078da:	4604      	mov	r4, r0
 80078dc:	f7fd f938 	bl	8004b50 <__errno>
 80078e0:	eeb0 0a48 	vmov.f32	s0, s16
 80078e4:	eef0 0a68 	vmov.f32	s1, s17
 80078e8:	ecbd 8b02 	vpop	{d8}
 80078ec:	6004      	str	r4, [r0, #0]
 80078ee:	bd10      	pop	{r4, pc}

080078f0 <xflow>:
 80078f0:	4603      	mov	r3, r0
 80078f2:	b507      	push	{r0, r1, r2, lr}
 80078f4:	ec51 0b10 	vmov	r0, r1, d0
 80078f8:	b183      	cbz	r3, 800791c <xflow+0x2c>
 80078fa:	4602      	mov	r2, r0
 80078fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007900:	e9cd 2300 	strd	r2, r3, [sp]
 8007904:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007908:	f7f8 fe7e 	bl	8000608 <__aeabi_dmul>
 800790c:	ec41 0b10 	vmov	d0, r0, r1
 8007910:	2022      	movs	r0, #34	@ 0x22
 8007912:	b003      	add	sp, #12
 8007914:	f85d eb04 	ldr.w	lr, [sp], #4
 8007918:	f7ff bfd8 	b.w	80078cc <with_errno>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	e7ee      	b.n	8007900 <xflow+0x10>
 8007922:	0000      	movs	r0, r0
 8007924:	0000      	movs	r0, r0
	...

08007928 <__math_uflow>:
 8007928:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007930 <__math_uflow+0x8>
 800792c:	f7ff bfe0 	b.w	80078f0 <xflow>
 8007930:	00000000 	.word	0x00000000
 8007934:	10000000 	.word	0x10000000

08007938 <__math_oflow>:
 8007938:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007940 <__math_oflow+0x8>
 800793c:	f7ff bfd8 	b.w	80078f0 <xflow>
 8007940:	00000000 	.word	0x00000000
 8007944:	70000000 	.word	0x70000000

08007948 <__ieee754_sqrt>:
 8007948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	4a68      	ldr	r2, [pc, #416]	@ (8007af0 <__ieee754_sqrt+0x1a8>)
 800794e:	ec55 4b10 	vmov	r4, r5, d0
 8007952:	43aa      	bics	r2, r5
 8007954:	462b      	mov	r3, r5
 8007956:	4621      	mov	r1, r4
 8007958:	d110      	bne.n	800797c <__ieee754_sqrt+0x34>
 800795a:	4622      	mov	r2, r4
 800795c:	4620      	mov	r0, r4
 800795e:	4629      	mov	r1, r5
 8007960:	f7f8 fe52 	bl	8000608 <__aeabi_dmul>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4620      	mov	r0, r4
 800796a:	4629      	mov	r1, r5
 800796c:	f7f8 fc96 	bl	800029c <__adddf3>
 8007970:	4604      	mov	r4, r0
 8007972:	460d      	mov	r5, r1
 8007974:	ec45 4b10 	vmov	d0, r4, r5
 8007978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797c:	2d00      	cmp	r5, #0
 800797e:	dc0e      	bgt.n	800799e <__ieee754_sqrt+0x56>
 8007980:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007984:	4322      	orrs	r2, r4
 8007986:	d0f5      	beq.n	8007974 <__ieee754_sqrt+0x2c>
 8007988:	b19d      	cbz	r5, 80079b2 <__ieee754_sqrt+0x6a>
 800798a:	4622      	mov	r2, r4
 800798c:	4620      	mov	r0, r4
 800798e:	4629      	mov	r1, r5
 8007990:	f7f8 fc82 	bl	8000298 <__aeabi_dsub>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	f7f8 ff60 	bl	800085c <__aeabi_ddiv>
 800799c:	e7e8      	b.n	8007970 <__ieee754_sqrt+0x28>
 800799e:	152a      	asrs	r2, r5, #20
 80079a0:	d115      	bne.n	80079ce <__ieee754_sqrt+0x86>
 80079a2:	2000      	movs	r0, #0
 80079a4:	e009      	b.n	80079ba <__ieee754_sqrt+0x72>
 80079a6:	0acb      	lsrs	r3, r1, #11
 80079a8:	3a15      	subs	r2, #21
 80079aa:	0549      	lsls	r1, r1, #21
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0fa      	beq.n	80079a6 <__ieee754_sqrt+0x5e>
 80079b0:	e7f7      	b.n	80079a2 <__ieee754_sqrt+0x5a>
 80079b2:	462a      	mov	r2, r5
 80079b4:	e7fa      	b.n	80079ac <__ieee754_sqrt+0x64>
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	3001      	adds	r0, #1
 80079ba:	02dc      	lsls	r4, r3, #11
 80079bc:	d5fb      	bpl.n	80079b6 <__ieee754_sqrt+0x6e>
 80079be:	1e44      	subs	r4, r0, #1
 80079c0:	1b12      	subs	r2, r2, r4
 80079c2:	f1c0 0420 	rsb	r4, r0, #32
 80079c6:	fa21 f404 	lsr.w	r4, r1, r4
 80079ca:	4323      	orrs	r3, r4
 80079cc:	4081      	lsls	r1, r0
 80079ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079d2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80079d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079da:	07d2      	lsls	r2, r2, #31
 80079dc:	bf5c      	itt	pl
 80079de:	005b      	lslpl	r3, r3, #1
 80079e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80079e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80079e8:	bf58      	it	pl
 80079ea:	0049      	lslpl	r1, r1, #1
 80079ec:	2600      	movs	r6, #0
 80079ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80079f2:	106d      	asrs	r5, r5, #1
 80079f4:	0049      	lsls	r1, r1, #1
 80079f6:	2016      	movs	r0, #22
 80079f8:	4632      	mov	r2, r6
 80079fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80079fe:	1917      	adds	r7, r2, r4
 8007a00:	429f      	cmp	r7, r3
 8007a02:	bfde      	ittt	le
 8007a04:	193a      	addle	r2, r7, r4
 8007a06:	1bdb      	suble	r3, r3, r7
 8007a08:	1936      	addle	r6, r6, r4
 8007a0a:	0fcf      	lsrs	r7, r1, #31
 8007a0c:	3801      	subs	r0, #1
 8007a0e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007a12:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007a16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007a1a:	d1f0      	bne.n	80079fe <__ieee754_sqrt+0xb6>
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	2720      	movs	r7, #32
 8007a20:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007a24:	429a      	cmp	r2, r3
 8007a26:	eb00 0e0c 	add.w	lr, r0, ip
 8007a2a:	db02      	blt.n	8007a32 <__ieee754_sqrt+0xea>
 8007a2c:	d113      	bne.n	8007a56 <__ieee754_sqrt+0x10e>
 8007a2e:	458e      	cmp	lr, r1
 8007a30:	d811      	bhi.n	8007a56 <__ieee754_sqrt+0x10e>
 8007a32:	f1be 0f00 	cmp.w	lr, #0
 8007a36:	eb0e 000c 	add.w	r0, lr, ip
 8007a3a:	da42      	bge.n	8007ac2 <__ieee754_sqrt+0x17a>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	db40      	blt.n	8007ac2 <__ieee754_sqrt+0x17a>
 8007a40:	f102 0801 	add.w	r8, r2, #1
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	458e      	cmp	lr, r1
 8007a48:	bf88      	it	hi
 8007a4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007a4e:	eba1 010e 	sub.w	r1, r1, lr
 8007a52:	4464      	add	r4, ip
 8007a54:	4642      	mov	r2, r8
 8007a56:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007a5a:	3f01      	subs	r7, #1
 8007a5c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007a60:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007a64:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007a68:	d1dc      	bne.n	8007a24 <__ieee754_sqrt+0xdc>
 8007a6a:	4319      	orrs	r1, r3
 8007a6c:	d01b      	beq.n	8007aa6 <__ieee754_sqrt+0x15e>
 8007a6e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007af4 <__ieee754_sqrt+0x1ac>
 8007a72:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007af8 <__ieee754_sqrt+0x1b0>
 8007a76:	e9da 0100 	ldrd	r0, r1, [sl]
 8007a7a:	e9db 2300 	ldrd	r2, r3, [fp]
 8007a7e:	f7f8 fc0b 	bl	8000298 <__aeabi_dsub>
 8007a82:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	f7f9 f837 	bl	8000b00 <__aeabi_dcmple>
 8007a92:	b140      	cbz	r0, 8007aa6 <__ieee754_sqrt+0x15e>
 8007a94:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007a98:	e9da 0100 	ldrd	r0, r1, [sl]
 8007a9c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007aa0:	d111      	bne.n	8007ac6 <__ieee754_sqrt+0x17e>
 8007aa2:	3601      	adds	r6, #1
 8007aa4:	463c      	mov	r4, r7
 8007aa6:	1072      	asrs	r2, r6, #1
 8007aa8:	0863      	lsrs	r3, r4, #1
 8007aaa:	07f1      	lsls	r1, r6, #31
 8007aac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007ab0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007ab4:	bf48      	it	mi
 8007ab6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007aba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007abe:	4618      	mov	r0, r3
 8007ac0:	e756      	b.n	8007970 <__ieee754_sqrt+0x28>
 8007ac2:	4690      	mov	r8, r2
 8007ac4:	e7be      	b.n	8007a44 <__ieee754_sqrt+0xfc>
 8007ac6:	f7f8 fbe9 	bl	800029c <__adddf3>
 8007aca:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	f7f9 f809 	bl	8000aec <__aeabi_dcmplt>
 8007ada:	b120      	cbz	r0, 8007ae6 <__ieee754_sqrt+0x19e>
 8007adc:	1ca0      	adds	r0, r4, #2
 8007ade:	bf08      	it	eq
 8007ae0:	3601      	addeq	r6, #1
 8007ae2:	3402      	adds	r4, #2
 8007ae4:	e7df      	b.n	8007aa6 <__ieee754_sqrt+0x15e>
 8007ae6:	1c63      	adds	r3, r4, #1
 8007ae8:	f023 0401 	bic.w	r4, r3, #1
 8007aec:	e7db      	b.n	8007aa6 <__ieee754_sqrt+0x15e>
 8007aee:	bf00      	nop
 8007af0:	7ff00000 	.word	0x7ff00000
 8007af4:	200001e8 	.word	0x200001e8
 8007af8:	200001e0 	.word	0x200001e0

08007afc <_init>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	bf00      	nop
 8007b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b02:	bc08      	pop	{r3}
 8007b04:	469e      	mov	lr, r3
 8007b06:	4770      	bx	lr

08007b08 <_fini>:
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	bf00      	nop
 8007b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0e:	bc08      	pop	{r3}
 8007b10:	469e      	mov	lr, r3
 8007b12:	4770      	bx	lr
