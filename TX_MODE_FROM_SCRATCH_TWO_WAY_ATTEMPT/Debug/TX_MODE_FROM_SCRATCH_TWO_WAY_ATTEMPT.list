
TX_MODE_FROM_SCRATCH_TWO_WAY_ATTEMPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a58  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08002bf8  08002bf8  00003bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc8  08002dc8  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002dc8  08002dc8  00003dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dd0  08002dd0  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd0  08002dd0  00003dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dd4  08002dd4  00003dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002dd8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000068  08002e40  00004068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08002e40  000041e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004991  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001532  00000000  00000000  00008a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  00009f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000415  00000000  00000000  0000a518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016539  00000000  00000000  0000a92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a3d  00000000  00000000  00020e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085844  00000000  00000000  000278a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad0e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c90  00000000  00000000  000ad12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000aedbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002be0 	.word	0x08002be0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002be0 	.word	0x08002be0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <millis>:
}



uint64_t millis()
	{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000576:	b672      	cpsid	i
}
 8000578:	bf00      	nop
	__disable_irq();
	uint64_t ml=mil;
 800057a:	4b08      	ldr	r3, [pc, #32]	@ (800059c <millis+0x2c>)
 800057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000580:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8000584:	b662      	cpsie	i
}
 8000586:	bf00      	nop
	__enable_irq();
	return ml;
 8000588:	e9d7 2300 	ldrd	r2, r3, [r7]
	}
 800058c:	4610      	mov	r0, r2
 800058e:	4619      	mov	r1, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000088 	.word	0x20000088

080005a0 <delay>:



void delay(uint32_t time)
	{
 80005a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]

	uint64_t start=millis();
 80005aa:	f7ff ffe1 	bl	8000570 <millis>
 80005ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while((millis() - start) < time);
 80005b2:	bf00      	nop
 80005b4:	f7ff ffdc 	bl	8000570 <millis>
 80005b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb61 0503 	sbc.w	r5, r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	4698      	mov	r8, r3
 80005c8:	4691      	mov	r9, r2
 80005ca:	4544      	cmp	r4, r8
 80005cc:	eb75 0309 	sbcs.w	r3, r5, r9
 80005d0:	d3f0      	bcc.n	80005b4 <delay+0x14>

	}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080005e0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	mil++;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <SysTick_Handler+0x20>)
 80005e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ea:	1c50      	adds	r0, r2, #1
 80005ec:	f143 0100 	adc.w	r1, r3, #0
 80005f0:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <SysTick_Handler+0x20>)
 80005f2:	e9c3 0100 	strd	r0, r1, [r3]
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	20000088 	.word	0x20000088

08000604 <print>:
	#include"utilities.h"
#include<stdio.h>


void print(uint8_t data[], uint32_t len)
	{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	int i=0;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
	while(data[i]){
 8000612:	e009      	b.n	8000628 <print+0x24>
		putchar(data[i]);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fc47 	bl	8001eb0 <putchar>
		i++;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
	while(data[i]){
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1ef      	bne.n	8000614 <print+0x10>
	}
	printf("\n \r");
 8000634:	4803      	ldr	r0, [pc, #12]	@ (8000644 <print+0x40>)
 8000636:	f001 fc29 	bl	8001e8c <iprintf>
	}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	08002bf8 	.word	0x08002bf8

08000648 <init_CSN_CE_PINS>:

void init_CSN_CE_PINS(){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 800064c:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <init_CSN_CE_PINS+0x3c>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000650:	4a0c      	ldr	r2, [pc, #48]	@ (8000684 <init_CSN_CE_PINS+0x3c>)
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	6313      	str	r3, [r2, #48]	@ 0x30
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER4, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <init_CSN_CE_PINS+0x40>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000660:	4a09      	ldr	r2, [pc, #36]	@ (8000688 <init_CSN_CE_PINS+0x40>)
 8000662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000666:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER0, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <init_CSN_CE_PINS+0x40>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f023 0303 	bic.w	r3, r3, #3
 8000670:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <init_CSN_CE_PINS+0x40>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000

0800068c <CSN_SELECT_NRF>:


	void CSN_SELECT_NRF(){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BR_4; //pull low to enable nrf
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <CSN_SELECT_NRF+0x1c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <CSN_SELECT_NRF+0x1c>)
 8000696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800069a:	6193      	str	r3, [r2, #24]
	}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40020000 	.word	0x40020000

080006ac <CSN_UNSELECT_NRF>:

	void CSN_UNSELECT_NRF(){
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BS_4; //make high to disable
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <CSN_UNSELECT_NRF+0x1c>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <CSN_UNSELECT_NRF+0x1c>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6193      	str	r3, [r2, #24]
	}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40020000 	.word	0x40020000

080006cc <NRF_ENABLE>:

	void NRF_ENABLE(){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BS_0;
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <NRF_ENABLE+0x1c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <NRF_ENABLE+0x1c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6193      	str	r3, [r2, #24]
	}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40020000 	.word	0x40020000

080006ec <NRF_DISABLE>:

	void NRF_DISABLE(){
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BR_0;
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <NRF_DISABLE+0x1c>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <NRF_DISABLE+0x1c>)
 80006f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006fa:	6193      	str	r3, [r2, #24]
	}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40020000 	.word	0x40020000

0800070c <NRF_WRITE_REGISTER>:



	void NRF_WRITE_REGISTER(uint8_t REG_ADDRESS,uint8_t data){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	71bb      	strb	r3, [r7, #6]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f043 0320 	orr.w	r3, r3, #32
 8000722:	b2db      	uxtb	r3, r3
 8000724:	733b      	strb	r3, [r7, #12]
		trans_buff[1]=data;
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	737b      	strb	r3, [r7, #13]
		CSN_SELECT_NRF();
 800072a:	f7ff ffaf 	bl	800068c <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,2);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2102      	movs	r1, #2
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fabd 	bl	8000cb4 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 800073a:	f7ff ffb7 	bl	80006ac <CSN_UNSELECT_NRF>

	}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <NRF_WRITE_REG_MULTI_BYTES>:
	void NRF_WRITE_REG_MULTI_BYTES(uint8_t REG_ADDRESS,uint8_t* data_trans,int size_trans){
 8000746:	b580      	push	{r7, lr}
 8000748:	b086      	sub	sp, #24
 800074a:	af00      	add	r7, sp, #0
 800074c:	4603      	mov	r3, r0
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	73fb      	strb	r3, [r7, #15]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	b2db      	uxtb	r3, r3
 800075c:	753b      	strb	r3, [r7, #20]
		CSN_SELECT_NRF();
 800075e:	f7ff ff95 	bl	800068c <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,1);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2101      	movs	r1, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f000 faa3 	bl	8000cb4 <SPI_TX_MULTI>
		SPI_TX_MULTI(data_trans,size_trans);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f000 fa9f 	bl	8000cb4 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 8000776:	f7ff ff99 	bl	80006ac <CSN_UNSELECT_NRF>
	}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <NRF_READ_REGISTER>:

	uint8_t NRF_READ_REGISTER(uint8_t REG_ADDRESS){
 8000782:	b580      	push	{r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	71fb      	strb	r3, [r7, #7]
		uint8_t data_returned=0;
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
		CSN_SELECT_NRF();
 8000790:	f7ff ff7c 	bl	800068c <CSN_SELECT_NRF>
		SPI_TX_MULTI(&REG_ADDRESS,1);
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	2101      	movs	r1, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fa8b 	bl	8000cb4 <SPI_TX_MULTI>
		SPI_READ_MULTI(&data_returned,1);
 800079e:	f107 030f 	add.w	r3, r7, #15
 80007a2:	2101      	movs	r1, #1
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fabd 	bl	8000d24 <SPI_READ_MULTI>
		CSN_UNSELECT_NRF();
 80007aa:	f7ff ff7f 	bl	80006ac <CSN_UNSELECT_NRF>
		return data_returned;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
	}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <NRF_PTX_CONFIG>:
		SPI_TX_MULTI(&REG_ADDRESS,1);
		SPI_READ_MULTI(RECV_BUFFER,RECV_BUFFER_SIZE);
		CSN_UNSELECT_NRF();
	}

	void NRF_PTX_CONFIG(uint8_t *Address, uint8_t channel){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
		NRF_DISABLE();
 80007c4:	f7ff ff92 	bl	80006ec <NRF_DISABLE>
		NRF_WRITE_REGISTER(RF_CH,channel); //select channel
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	4619      	mov	r1, r3
 80007cc:	2005      	movs	r0, #5
 80007ce:	f7ff ff9d 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR,Address,5); //set address
 80007d2:	2205      	movs	r2, #5
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	2010      	movs	r0, #16
 80007d8:	f7ff ffb5 	bl	8000746 <NRF_WRITE_REG_MULTI_BYTES>

		// un comment belowo code to setup for auto ack
		uint8_t current_pipe_status=NRF_READ_REGISTER(EN_RXADDR);
 80007dc:	2002      	movs	r0, #2
 80007de:	f7ff ffd0 	bl	8000782 <NRF_READ_REGISTER>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73fb      	strb	r3, [r7, #15]
		current_pipe_status=current_pipe_status|(1<<0);//enable pipe 1
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
		NRF_WRITE_REGISTER(EN_RXADDR,current_pipe_status);
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	4619      	mov	r1, r3
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff8a 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0,Address,5); //pipe address
 80007f8:	2205      	movs	r2, #5
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	200a      	movs	r0, #10
 80007fe:	f7ff ffa2 	bl	8000746 <NRF_WRITE_REG_MULTI_BYTES>

		NRF_WRITE_REGISTER(CONFIG,0x0a); //powwr on device and keep in tx mode
 8000802:	210a      	movs	r1, #10
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff ff81 	bl	800070c <NRF_WRITE_REGISTER>
		delay(5);
 800080a:	2005      	movs	r0, #5
 800080c:	f7ff fec8 	bl	80005a0 <delay>
		//NRF_ENABLE();
	}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <nrf24_reset>:
		NRF_WRITE_REGISTER(CONFIG,0x0b); //powwr on device and keep in tx mode
		NRF_ENABLE();
	}

	void nrf24_reset(uint8_t REG)
	{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
		if (REG == STATUS)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b07      	cmp	r3, #7
 8000826:	d104      	bne.n	8000832 <nrf24_reset+0x1a>
		{
			NRF_WRITE_REGISTER(STATUS, 0x00);
 8000828:	2100      	movs	r1, #0
 800082a:	2007      	movs	r0, #7
 800082c:	f7ff ff6e 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
		NRF_WRITE_REGISTER(DYNPD, 0);
		NRF_WRITE_REGISTER(FEATURE, 0);
		}
	}
 8000830:	e090      	b.n	8000954 <nrf24_reset+0x13c>
		else if (REG == FIFO_STATUS)
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b17      	cmp	r3, #23
 8000836:	d104      	bne.n	8000842 <nrf24_reset+0x2a>
			NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 8000838:	2111      	movs	r1, #17
 800083a:	2017      	movs	r0, #23
 800083c:	f7ff ff66 	bl	800070c <NRF_WRITE_REGISTER>
	}
 8000840:	e088      	b.n	8000954 <nrf24_reset+0x13c>
		NRF_WRITE_REGISTER(CONFIG, 0x08);
 8000842:	2108      	movs	r1, #8
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff ff61 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3F);
 800084a:	213f      	movs	r1, #63	@ 0x3f
 800084c:	2001      	movs	r0, #1
 800084e:	f7ff ff5d 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_RXADDR, 0x03);
 8000852:	2103      	movs	r1, #3
 8000854:	2002      	movs	r0, #2
 8000856:	f7ff ff59 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_AW, 0x03);
 800085a:	2103      	movs	r1, #3
 800085c:	2003      	movs	r0, #3
 800085e:	f7ff ff55 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0x03);
 8000862:	2103      	movs	r1, #3
 8000864:	2004      	movs	r0, #4
 8000866:	f7ff ff51 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_CH, 0x02);
 800086a:	2102      	movs	r1, #2
 800086c:	2005      	movs	r0, #5
 800086e:	f7ff ff4d 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_SETUP, 0x0E);
 8000872:	210e      	movs	r1, #14
 8000874:	2006      	movs	r0, #6
 8000876:	f7ff ff49 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(STATUS, 0x00);
 800087a:	2100      	movs	r1, #0
 800087c:	2007      	movs	r0, #7
 800087e:	f7ff ff45 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(OBSERVE_TX, 0x00);
 8000882:	2100      	movs	r1, #0
 8000884:	2008      	movs	r0, #8
 8000886:	f7ff ff41 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(CD, 0x00);
 800088a:	2100      	movs	r1, #0
 800088c:	2009      	movs	r0, #9
 800088e:	f7ff ff3d 	bl	800070c <NRF_WRITE_REGISTER>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000892:	4a32      	ldr	r2, [pc, #200]	@ (800095c <nrf24_reset+0x144>)
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089c:	6018      	str	r0, [r3, #0]
 800089e:	3304      	adds	r3, #4
 80008a0:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0, rx_addr_p0_def, 5);
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2205      	movs	r2, #5
 80008a8:	4619      	mov	r1, r3
 80008aa:	200a      	movs	r0, #10
 80008ac:	f7ff ff4b 	bl	8000746 <NRF_WRITE_REG_MULTI_BYTES>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80008b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000960 <nrf24_reset+0x148>)
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ba:	6018      	str	r0, [r3, #0]
 80008bc:	3304      	adds	r3, #4
 80008be:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P1, rx_addr_p1_def, 5);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	2205      	movs	r2, #5
 80008c6:	4619      	mov	r1, r3
 80008c8:	200b      	movs	r0, #11
 80008ca:	f7ff ff3c 	bl	8000746 <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_ADDR_P2, 0xC3);
 80008ce:	21c3      	movs	r1, #195	@ 0xc3
 80008d0:	200c      	movs	r0, #12
 80008d2:	f7ff ff1b 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P3, 0xC4);
 80008d6:	21c4      	movs	r1, #196	@ 0xc4
 80008d8:	200d      	movs	r0, #13
 80008da:	f7ff ff17 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P4, 0xC5);
 80008de:	21c5      	movs	r1, #197	@ 0xc5
 80008e0:	200e      	movs	r0, #14
 80008e2:	f7ff ff13 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P5, 0xC6);
 80008e6:	21c6      	movs	r1, #198	@ 0xc6
 80008e8:	200f      	movs	r0, #15
 80008ea:	f7ff ff0f 	bl	800070c <NRF_WRITE_REGISTER>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80008ee:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <nrf24_reset+0x144>)
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f8:	6018      	str	r0, [r3, #0]
 80008fa:	3304      	adds	r3, #4
 80008fc:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR, tx_addr_def, 5);
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	2205      	movs	r2, #5
 8000904:	4619      	mov	r1, r3
 8000906:	2010      	movs	r0, #16
 8000908:	f7ff ff1d 	bl	8000746 <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_PW_P0, 0);
 800090c:	2100      	movs	r1, #0
 800090e:	2011      	movs	r0, #17
 8000910:	f7ff fefc 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P1, 0);
 8000914:	2100      	movs	r1, #0
 8000916:	2012      	movs	r0, #18
 8000918:	f7ff fef8 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P2, 0);
 800091c:	2100      	movs	r1, #0
 800091e:	2013      	movs	r0, #19
 8000920:	f7ff fef4 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P3, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	2014      	movs	r0, #20
 8000928:	f7ff fef0 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P4, 0);
 800092c:	2100      	movs	r1, #0
 800092e:	2015      	movs	r0, #21
 8000930:	f7ff feec 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
 8000934:	2100      	movs	r1, #0
 8000936:	2016      	movs	r0, #22
 8000938:	f7ff fee8 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 800093c:	2111      	movs	r1, #17
 800093e:	2017      	movs	r0, #23
 8000940:	f7ff fee4 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(DYNPD, 0);
 8000944:	2100      	movs	r1, #0
 8000946:	201c      	movs	r0, #28
 8000948:	f7ff fee0 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FEATURE, 0);
 800094c:	2100      	movs	r1, #0
 800094e:	201d      	movs	r0, #29
 8000950:	f7ff fedc 	bl	800070c <NRF_WRITE_REGISTER>
	}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	08002bfc 	.word	0x08002bfc
 8000960:	08002c04 	.word	0x08002c04

08000964 <NRF_INIT>:


	void NRF_INIT(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
		SPI_INIT(); //initalize spi comms
 8000968:	f000 f94a 	bl	8000c00 <SPI_INIT>
		init_CSN_CE_PINS();
 800096c:	f7ff fe6c 	bl	8000648 <init_CSN_CE_PINS>
		NRF_DISABLE();
 8000970:	f7ff febc 	bl	80006ec <NRF_DISABLE>
		nrf24_reset(0);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ff4f 	bl	8000818 <nrf24_reset>
		NRF_WRITE_REGISTER(CONFIG, 0);  // will be configured later
 800097a:	2100      	movs	r1, #0
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff fec5 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x00);  // No Auto ACK
 8000982:	2100      	movs	r1, #0
 8000984:	2001      	movs	r0, #1
 8000986:	f7ff fec1 	bl	800070c <NRF_WRITE_REGISTER>

		/*uncomment below code to enable auto ack stuff*/
		//NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
		//NRF_WRITE_REGISTER(SETUP_RETR, 0x03); // 15 retries, 500µs delay

		NRF_WRITE_REGISTER (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800098a:	2100      	movs	r1, #0
 800098c:	2002      	movs	r0, #2
 800098e:	f7ff febd 	bl	800070c <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000992:	2103      	movs	r1, #3
 8000994:	2003      	movs	r0, #3
 8000996:	f7ff feb9 	bl	800070c <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_RETR, 0x00);   // No retransmission
 800099a:	2100      	movs	r1, #0
 800099c:	2004      	movs	r0, #4
 800099e:	f7ff feb5 	bl	800070c <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_CH, 0);  // will be setup during Tx or RX
 80009a2:	2100      	movs	r1, #0
 80009a4:	2005      	movs	r0, #5
 80009a6:	f7ff feb1 	bl	800070c <NRF_WRITE_REGISTER>

		//enable dynamic payloads on all pipes
		//for DYNP I require EN_AA and Requires EN_DPL and ENAA_P0
		NRF_WRITE_REGISTER (DYNPD, 0x3f);  // will be setup during Tx or RX
 80009aa:	213f      	movs	r1, #63	@ 0x3f
 80009ac:	201c      	movs	r0, #28
 80009ae:	f7ff fead 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER (FEATURE, 0x6);  // enable dynamic payload length
 80009b2:	2106      	movs	r1, #6
 80009b4:	201d      	movs	r0, #29
 80009b6:	f7ff fea9 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
 80009ba:	213f      	movs	r1, #63	@ 0x3f
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff fea5 	bl	800070c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0xff); // 15 retries, 500µs delay
 80009c2:	21ff      	movs	r1, #255	@ 0xff
 80009c4:	2004      	movs	r0, #4
 80009c6:	f7ff fea1 	bl	800070c <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_SETUP, 0x0e);   // Power= 0db, data rate = 2Mbps
 80009ca:	210e      	movs	r1, #14
 80009cc:	2006      	movs	r0, #6
 80009ce:	f7ff fe9d 	bl	800070c <NRF_WRITE_REGISTER>
		//NRF_ENABLE();
	}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <NRD_SEND_CMD>:


	void NRD_SEND_CMD (uint8_t cmd)
	{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	71fb      	strb	r3, [r7, #7]
		// Pull the CS Pin LOW to select the device
		CSN_SELECT_NRF();
 80009e0:	f7ff fe54 	bl	800068c <CSN_SELECT_NRF>

		SPI_TX_MULTI(&cmd, 1);
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	2101      	movs	r1, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f963 	bl	8000cb4 <SPI_TX_MULTI>

		// Pull the CS HIGH to release the device
		CSN_UNSELECT_NRF();
 80009ee:	f7ff fe5d 	bl	80006ac <CSN_UNSELECT_NRF>
	}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <NRF_TX_DATA>:


	uint8_t NRF_TX_DATA(uint8_t *data_ptr,uint8_t sizeofdata){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	@ 0x30
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
		uint8_t tx_fifo_stat;
		uint8_t status_reg;
		CSN_SELECT_NRF();
 8000a08:	f7ff fe40 	bl	800068c <CSN_SELECT_NRF>
	   uint8_t cmd = W_TX_PAYLOAD;
 8000a0c:	23a0      	movs	r3, #160	@ 0xa0
 8000a0e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	  SPI_TX_MULTI( &cmd, 1);
 8000a12:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000a16:	2101      	movs	r1, #1
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f94b 	bl	8000cb4 <SPI_TX_MULTI>
		SPI_TX_MULTI(data_ptr,sizeofdata);//send payload
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	4619      	mov	r1, r3
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f946 	bl	8000cb4 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 8000a28:	f7ff fe40 	bl	80006ac <CSN_UNSELECT_NRF>
		NRF_ENABLE();
 8000a2c:	f7ff fe4e 	bl	80006cc <NRF_ENABLE>
		delay(10);
 8000a30:	200a      	movs	r0, #10
 8000a32:	f7ff fdb5 	bl	80005a0 <delay>
		NRF_DISABLE();
 8000a36:	f7ff fe59 	bl	80006ec <NRF_DISABLE>
		tx_fifo_stat=NRF_READ_REGISTER(FIFO_STATUS);
 8000a3a:	2017      	movs	r0, #23
 8000a3c:	f7ff fea1 	bl	8000782 <NRF_READ_REGISTER>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		status_reg=NRF_READ_REGISTER(STATUS);
 8000a46:	2007      	movs	r0, #7
 8000a48:	f7ff fe9b 	bl	8000782 <NRF_READ_REGISTER>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		char ack_Recv[32];
		printf("tx_fifo_stat is - %d",tx_fifo_stat);
 8000a52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a56:	4619      	mov	r1, r3
 8000a58:	4841      	ldr	r0, [pc, #260]	@ (8000b60 <NRF_TX_DATA+0x164>)
 8000a5a:	f001 fa17 	bl	8001e8c <iprintf>
		printf("status register- %d",status_reg);
 8000a5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a62:	4619      	mov	r1, r3
 8000a64:	483f      	ldr	r0, [pc, #252]	@ (8000b64 <NRF_TX_DATA+0x168>)
 8000a66:	f001 fa11 	bl	8001e8c <iprintf>
		NRF_ENABLE();
 8000a6a:	f7ff fe2f 	bl	80006cc <NRF_ENABLE>
		delay(10);
 8000a6e:	200a      	movs	r0, #10
 8000a70:	f7ff fd96 	bl	80005a0 <delay>
		if(is_data_on_pipe(0)==1){
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 f87f 	bl	8000b78 <is_data_on_pipe>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d10d      	bne.n	8000a9c <NRF_TX_DATA+0xa0>
			printf("maybe ack  1? \n \r");
 8000a80:	4839      	ldr	r0, [pc, #228]	@ (8000b68 <NRF_TX_DATA+0x16c>)
 8000a82:	f001 fa03 	bl	8001e8c <iprintf>
			NRF_RECV_DATA(ack_Recv);
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f88e 	bl	8000bac <NRF_RECV_DATA>
			print(ack_Recv,32);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2120      	movs	r1, #32
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fdb4 	bl	8000604 <print>
		}


		if ((tx_fifo_stat&(1<<4)) && (!(tx_fifo_stat&(1<<3)))){
 8000a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d025      	beq.n	8000af4 <NRF_TX_DATA+0xf8>
 8000aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d11f      	bne.n	8000af4 <NRF_TX_DATA+0xf8>
			if(is_data_on_pipe(0)==1){
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 f85f 	bl	8000b78 <is_data_on_pipe>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d102      	bne.n	8000ac6 <NRF_TX_DATA+0xca>
				printf("maybe ack ? \n \r");
 8000ac0:	482a      	ldr	r0, [pc, #168]	@ (8000b6c <NRF_TX_DATA+0x170>)
 8000ac2:	f001 f9e3 	bl	8001e8c <iprintf>
			}
			if(is_data_on_pipe(1)==1){
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f000 f856 	bl	8000b78 <is_data_on_pipe>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d102      	bne.n	8000ad8 <NRF_TX_DATA+0xdc>
				printf("maybe ack ? \n \r");
 8000ad2:	4826      	ldr	r0, [pc, #152]	@ (8000b6c <NRF_TX_DATA+0x170>)
 8000ad4:	f001 f9da 	bl	8001e8c <iprintf>
			}
			cmd=FLUSH_TX;
 8000ad8:	23e1      	movs	r3, #225	@ 0xe1
 8000ada:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			NRD_SEND_CMD(cmd);
 8000ade:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff77 	bl	80009d6 <NRD_SEND_CMD>
			NRF_WRITE_REGISTER(FIFO_STATUS, 0x11); //reset fifo
 8000ae8:	2111      	movs	r1, #17
 8000aea:	2017      	movs	r0, #23
 8000aec:	f7ff fe0e 	bl	800070c <NRF_WRITE_REGISTER>
			return 1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e030      	b.n	8000b56 <NRF_TX_DATA+0x15a>
		}

		if(status_reg &(1<<4)){
 8000af4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000af8:	f003 0310 	and.w	r3, r3, #16
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d029      	beq.n	8000b54 <NRF_TX_DATA+0x158>
			printf("max number of retransmission \n \r %d \n \r",status_reg);
 8000b00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b04:	4619      	mov	r1, r3
 8000b06:	481a      	ldr	r0, [pc, #104]	@ (8000b70 <NRF_TX_DATA+0x174>)
 8000b08:	f001 f9c0 	bl	8001e8c <iprintf>
			status_reg=status_reg|(1<<4)|(1<<5);
 8000b0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b10:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000b14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			NRF_WRITE_REGISTER(STATUS,status_reg);
 8000b18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	2007      	movs	r0, #7
 8000b20:	f7ff fdf4 	bl	800070c <NRF_WRITE_REGISTER>
			status_reg=NRF_READ_REGISTER(STATUS);
 8000b24:	2007      	movs	r0, #7
 8000b26:	f7ff fe2c 	bl	8000782 <NRF_READ_REGISTER>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			printf("after clearing flag? %d \n \r",status_reg);
 8000b30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b34:	4619      	mov	r1, r3
 8000b36:	480f      	ldr	r0, [pc, #60]	@ (8000b74 <NRF_TX_DATA+0x178>)
 8000b38:	f001 f9a8 	bl	8001e8c <iprintf>
			cmd=FLUSH_TX;
 8000b3c:	23e1      	movs	r3, #225	@ 0xe1
 8000b3e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		 NRD_SEND_CMD(cmd);
 8000b42:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff45 	bl	80009d6 <NRD_SEND_CMD>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11); //reset fifo
 8000b4c:	2111      	movs	r1, #17
 8000b4e:	2017      	movs	r0, #23
 8000b50:	f7ff fddc 	bl	800070c <NRF_WRITE_REGISTER>

		}

		return 0;
 8000b54:	2300      	movs	r3, #0

	}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3730      	adds	r7, #48	@ 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08002c0c 	.word	0x08002c0c
 8000b64:	08002c24 	.word	0x08002c24
 8000b68:	08002c38 	.word	0x08002c38
 8000b6c:	08002c4c 	.word	0x08002c4c
 8000b70:	08002c5c 	.word	0x08002c5c
 8000b74:	08002c84 	.word	0x08002c84

08000b78 <is_data_on_pipe>:

uint8_t is_data_on_pipe(uint8_t pipenum){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
uint8_t status_reg=NRF_READ_REGISTER(STATUS);
 8000b82:	2007      	movs	r0, #7
 8000b84:	f7ff fdfd 	bl	8000782 <NRF_READ_REGISTER>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	73fb      	strb	r3, [r7, #15]
//if 6 th bit is set and respective data pipe is set
if((status_reg & (1<<6))){
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d005      	beq.n	8000ba2 <is_data_on_pipe+0x2a>
//clear rx_dr
	NRF_WRITE_REGISTER(STATUS,(1<<6));
 8000b96:	2140      	movs	r1, #64	@ 0x40
 8000b98:	2007      	movs	r0, #7
 8000b9a:	f7ff fdb7 	bl	800070c <NRF_WRITE_REGISTER>
	return 1; //data recieved
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e000      	b.n	8000ba4 <is_data_on_pipe+0x2c>
}
return 0;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <NRF_RECV_DATA>:
	return (uint8_t)(SPI1->DR);
}

//this code needs to  be modefied for dyanmic first we will send
//R_RX_PL_WID first and then R_RX_PAYLOAD
void NRF_RECV_DATA(uint8_t *data_ptr_RECV){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	//f
	uint8_t cmd = R_RX_PL_WID;
 8000bb4:	2360      	movs	r3, #96	@ 0x60
 8000bb6:	73bb      	strb	r3, [r7, #14]
	uint8_t payLoad_width=0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
	printf("\n ACK RECIEVED! ");
 8000bbc:	480f      	ldr	r0, [pc, #60]	@ (8000bfc <NRF_RECV_DATA+0x50>)
 8000bbe:	f001 f965 	bl	8001e8c <iprintf>
	CSN_SELECT_NRF();
 8000bc2:	f7ff fd63 	bl	800068c <CSN_SELECT_NRF>
	//payLoad_width=NRF_SEND_PAYLOAD_WIDTH_READ(cmd);
	//printf("\n \r  payloadWidth %d \n \r",payLoad_width);
	//next comand to read payload
	cmd=R_RX_PAYLOAD;
 8000bc6:	2361      	movs	r3, #97	@ 0x61
 8000bc8:	73bb      	strb	r3, [r7, #14]
	SPI_TX_MULTI( &cmd, 1);
 8000bca:	f107 030e 	add.w	r3, r7, #14
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f86f 	bl	8000cb4 <SPI_TX_MULTI>
	SPI_READ_MULTI(data_ptr_RECV,10);//recieve data
 8000bd6:	210a      	movs	r1, #10
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f8a3 	bl	8000d24 <SPI_READ_MULTI>
	CSN_UNSELECT_NRF();
 8000bde:	f7ff fd65 	bl	80006ac <CSN_UNSELECT_NRF>
	delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f7ff fcdc 	bl	80005a0 <delay>
	cmd=FLUSH_RX;
 8000be8:	23e2      	movs	r3, #226	@ 0xe2
 8000bea:	73bb      	strb	r3, [r7, #14]
	NRD_SEND_CMD(cmd); //flush rx fifo
 8000bec:	7bbb      	ldrb	r3, [r7, #14]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fef1 	bl	80009d6 <NRD_SEND_CMD>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	08002ca0 	.word	0x08002ca0

08000c00 <SPI_INIT>:
#include"SPI.h"
#include"stdio.h"
#define AF05  (0x05)


void SPI_INIT(){
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	//enable clock for GPIOA
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8000c04:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <SPI_INIT+0xa8>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <SPI_INIT+0xa8>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA5, PA6 and PA7 to alternate function mode
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1;
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <SPI_INIT+0xac>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a25      	ldr	r2, [pc, #148]	@ (8000cac <SPI_INIT+0xac>)
 8000c16:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000c1a:	6013      	str	r3, [r2, #0]
	//set which type of alternate function is
	GPIOA->AFR[0]|=(AF05<<20)|(AF05<<24)|(AF05<<28);
 8000c1c:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <SPI_INIT+0xac>)
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
 8000c20:	4a22      	ldr	r2, [pc, #136]	@ (8000cac <SPI_INIT+0xac>)
 8000c22:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000c26:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000c2a:	6213      	str	r3, [r2, #32]
	//enable clock access to SPI1
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca8 <SPI_INIT+0xa8>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca8 <SPI_INIT+0xa8>)
 8000c32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c36:	6453      	str	r3, [r2, #68]	@ 0x44
	//set software slave managment
	SPI1->CR1|=SPI_CR1_SSM|SPI_CR1_SSI;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c3e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000c42:	6013      	str	r3, [r2, #0]
	//set SPI in master mode
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_MSTR, 1);
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_BR,  3);
 8000c50:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000c58:	4a15      	ldr	r2, [pc, #84]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c5a:	f043 0318 	orr.w	r3, r3, #24
 8000c5e:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPHA, 0);
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a12      	ldr	r2, [pc, #72]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPOL, 0);
 8000c6c:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c72:	f023 0302 	bic.w	r3, r3, #2
 8000c76:	6013      	str	r3, [r2, #0]
	//MODIFY_FIELD(SPI1->CR1, SPI_CR1_LSBFIRST, 1);
	SPI1->CR2 |= 0x4;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x40; // Enabling SPI SPI periph
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c8e:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_SPE, 1);
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a06      	ldr	r2, [pc, #24]	@ (8000cb0 <SPI_INIT+0xb0>)
 8000c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40013000 	.word	0x40013000

08000cb4 <SPI_TX_MULTI>:

//send multiple bytes in case size>1
void SPI_TX_MULTI(uint8_t *data_ptr,int size){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
int i=0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
uint8_t temp;
while(i<size){
 8000cc2:	e00f      	b.n	8000ce4 <SPI_TX_MULTI+0x30>
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000cc4:	bf00      	nop
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <SPI_TX_MULTI+0x6c>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0f9      	beq.n	8000cc6 <SPI_TX_MULTI+0x12>
	SPI1->DR = data_ptr[i];
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <SPI_TX_MULTI+0x6c>)
 8000cdc:	60da      	str	r2, [r3, #12]
	i++;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
while(i<size){
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbeb      	blt.n	8000cc4 <SPI_TX_MULTI+0x10>
}
/*Wait until TXE is set*/
while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000cec:	bf00      	nop
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <SPI_TX_MULTI+0x6c>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0f9      	beq.n	8000cee <SPI_TX_MULTI+0x3a>

/*Wait for BUSY flag to reset*/
while((SPI1->SR & (SPI_SR_BSY))){}
 8000cfa:	bf00      	nop
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <SPI_TX_MULTI+0x6c>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1f9      	bne.n	8000cfc <SPI_TX_MULTI+0x48>

/*Clear OVR flag*/
temp = SPI1->DR;
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <SPI_TX_MULTI+0x6c>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	72fb      	strb	r3, [r7, #11]
temp = SPI1->SR;
 8000d0e:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <SPI_TX_MULTI+0x6c>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	72fb      	strb	r3, [r7, #11]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40013000 	.word	0x40013000

08000d24 <SPI_READ_MULTI>:


void SPI_READ_MULTI(uint8_t *data_ptr,int size){
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
	while(size)
 8000d2e:	e013      	b.n	8000d58 <SPI_READ_MULTI+0x34>
	{
		/*Send dummy data*/
		SPI1->DR =0;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <SPI_READ_MULTI+0x48>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]

		/*Wait for RXNE flag to be set*/
		while(!(SPI1->SR & (SPI_SR_RXNE))){}
 8000d36:	bf00      	nop
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <SPI_READ_MULTI+0x48>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f9      	beq.n	8000d38 <SPI_READ_MULTI+0x14>

		/*Read data from data register*/
		*data_ptr++ = (SPI1->DR);
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <SPI_READ_MULTI+0x48>)
 8000d46:	68d9      	ldr	r1, [r3, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
		size--;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	603b      	str	r3, [r7, #0]
	while(size)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1e8      	bne.n	8000d30 <SPI_READ_MULTI+0xc>
	}
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40013000 	.word	0x40013000

08000d70 <get_strLen>:
#include"utilities.h"
#include"delay.h"
#include"SPI.h"
#include"NRF_DRIVER.h"

uint8_t get_strLen(uint8_t str []){
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	uint8_t count=0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
	while(str[count])count++;
 8000d7c:	e002      	b.n	8000d84 <get_strLen+0x14>
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	3301      	adds	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f6      	bne.n	8000d7e <get_strLen+0xe>
	return count;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <main>:


void SystemClock_Config(void);
int main(void)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0

SystemClock_Config();
 8000da6:	f000 f861 	bl	8000e6c <SystemClock_Config>
delay(6000);
 8000daa:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000dae:	f7ff fbf7 	bl	80005a0 <delay>
uint8_t TxAddress[] = {0xB3,0xB4,0xB5,0xB6,0x05};
 8000db2:	4a28      	ldr	r2, [pc, #160]	@ (8000e54 <main+0xb4>)
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dbc:	6018      	str	r0, [r3, #0]
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	7019      	strb	r1, [r3, #0]
uint8_t TxData[]="New is cominging";
 8000dc2:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <main+0xb8>)
 8000dc4:	463c      	mov	r4, r7
 8000dc6:	461d      	mov	r5, r3
 8000dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dcc:	682b      	ldr	r3, [r5, #0]
 8000dce:	7023      	strb	r3, [r4, #0]
uint8_t channel=10;
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	76fb      	strb	r3, [r7, #27]
usart_init();
 8000dd4:	f000 f998 	bl	8001108 <usart_init>
NRF_INIT();
 8000dd8:	f7ff fdc4 	bl	8000964 <NRF_INIT>
NRF_PTX_CONFIG(TxAddress,channel);
 8000ddc:	7efa      	ldrb	r2, [r7, #27]
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fce7 	bl	80007b8 <NRF_PTX_CONFIG>

printf(" \n \r setting up as transmit primary dynamic payload attempt \n \r ");
 8000dea:	481c      	ldr	r0, [pc, #112]	@ (8000e5c <main+0xbc>)
 8000dec:	f001 f84e 	bl	8001e8c <iprintf>

for(int i=0;i<=0x1D;i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	e00d      	b.n	8000e12 <main+0x72>
	printf("\n \r register %x is value %x \n \r",i,NRF_READ_REGISTER(i));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fcc1 	bl	8000782 <NRF_READ_REGISTER>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	69f9      	ldr	r1, [r7, #28]
 8000e06:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <main+0xc0>)
 8000e08:	f001 f840 	bl	8001e8c <iprintf>
for(int i=0;i<=0x1D;i++){
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	2b1d      	cmp	r3, #29
 8000e16:	ddee      	ble.n	8000df6 <main+0x56>
}

while(1){
delay(600);
 8000e18:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000e1c:	f7ff fbc0 	bl	80005a0 <delay>
uint8_t data_size=get_strLen(TxData);
 8000e20:	463b      	mov	r3, r7
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ffa4 	bl	8000d70 <get_strLen>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	76bb      	strb	r3, [r7, #26]
if(NRF_TX_DATA(TxData,data_size)==1){
 8000e2c:	7eba      	ldrb	r2, [r7, #26]
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fde2 	bl	80009fc <NRF_TX_DATA>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d105      	bne.n	8000e4a <main+0xaa>
printf("\n \r transmit success payload size was %d \n \r",data_size);
 8000e3e:	7ebb      	ldrb	r3, [r7, #26]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4808      	ldr	r0, [pc, #32]	@ (8000e64 <main+0xc4>)
 8000e44:	f001 f822 	bl	8001e8c <iprintf>
 8000e48:	e7e6      	b.n	8000e18 <main+0x78>
}
else{
	printf("\n \r Something went wrong ! \n \r");
 8000e4a:	4807      	ldr	r0, [pc, #28]	@ (8000e68 <main+0xc8>)
 8000e4c:	f001 f81e 	bl	8001e8c <iprintf>
while(1){
 8000e50:	e7e2      	b.n	8000e18 <main+0x78>
 8000e52:	bf00      	nop
 8000e54:	08002d68 	.word	0x08002d68
 8000e58:	08002d70 	.word	0x08002d70
 8000e5c:	08002cb4 	.word	0x08002cb4
 8000e60:	08002cf8 	.word	0x08002cf8
 8000e64:	08002d18 	.word	0x08002d18
 8000e68:	08002d48 	.word	0x08002d48

08000e6c <SystemClock_Config>:
}
}
}
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b094      	sub	sp, #80	@ 0x50
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	2230      	movs	r2, #48	@ 0x30
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 f863 	bl	8001f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <SystemClock_Config+0xcc>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e98:	4a27      	ldr	r2, [pc, #156]	@ (8000f38 <SystemClock_Config+0xcc>)
 8000e9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea0:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <SystemClock_Config+0xcc>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <SystemClock_Config+0xd0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a21      	ldr	r2, [pc, #132]	@ (8000f3c <SystemClock_Config+0xd0>)
 8000eb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <SystemClock_Config+0xd0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000edc:	2308      	movs	r3, #8
 8000ede:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ee0:	23c0      	movs	r3, #192	@ 0xc0
 8000ee2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eec:	f107 0320 	add.w	r3, r7, #32
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 faa5 	bl	8001440 <HAL_RCC_OscConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000efc:	f000 f820 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f00:	230f      	movs	r3, #15
 8000f02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f04:	2302      	movs	r3, #2
 8000f06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fd06 	bl	8001930 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f2a:	f000 f809 	bl	8000f40 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3750      	adds	r7, #80	@ 0x50
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <Error_Handler+0x8>

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e00a      	b.n	8000fc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb0:	f000 f922 	bl	80011f8 <__io_getchar>
 8000fb4:	4601      	mov	r1, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	60ba      	str	r2, [r7, #8]
 8000fbc:	b2ca      	uxtb	r2, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dbf0      	blt.n	8000fb0 <_read+0x12>
  }

  return len;
 8000fce:	687b      	ldr	r3, [r7, #4]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e009      	b.n	8000ffe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	60ba      	str	r2, [r7, #8]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f8f2 	bl	80011dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	dbf1      	blt.n	8000fea <_write+0x12>
  }
  return len;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_close>:

int _close(int file)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001038:	605a      	str	r2, [r3, #4]
  return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_isatty>:

int _isatty(int file)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f000 ff9c 	bl	8001fe4 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20020000 	.word	0x20020000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	20000090 	.word	0x20000090
 80010e0:	200001e8 	.word	0x200001e8

080010e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <usart_init>:
 *  usart get and put and usart init
 */

#include "usart.h"

void usart_init() {
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 800110c:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <usart_init+0x70>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <usart_init+0x70>)
 8001112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <usart_init+0x70>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111c:	4a16      	ldr	r2, [pc, #88]	@ (8001178 <usart_init+0x70>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 and PA3 as alternate function
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER2_Pos);
 8001124:	4b15      	ldr	r3, [pc, #84]	@ (800117c <usart_init+0x74>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a14      	ldr	r2, [pc, #80]	@ (800117c <usart_init+0x74>)
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER3_Pos);
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <usart_init+0x74>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a11      	ldr	r2, [pc, #68]	@ (800117c <usart_init+0x74>)
 8001136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113a:	6013      	str	r3, [r2, #0]

    // Set PA2 to USART_TX and PA3 to USART_RX
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos); // TX alternate function
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <usart_init+0x74>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <usart_init+0x74>)
 8001142:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001146:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL3_Pos); // RX alternate function
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <usart_init+0x74>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <usart_init+0x74>)
 800114e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001152:	6213      	str	r3, [r2, #32]

    // Enable USART, transmitter, and receiver
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <usart_init+0x78>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <usart_init+0x78>)
 800115a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800115e:	f043 030c 	orr.w	r3, r3, #12
 8001162:	60d3      	str	r3, [r2, #12]

    // Set baud rate to 9600 (make sure BAUD_9600 is defined based on your clock setup)
    USART2->BRR = BAUD_9600;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <usart_init+0x78>)
 8001166:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800116a:	609a      	str	r2, [r3, #8]

    // Test character output to verify USART setup
   // USART2->DR = 'B';
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000
 8001180:	40004400 	.word	0x40004400

08001184 <usart_out>:

void usart_out(char ch) {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)) {
 800118e:	bf00      	nop
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <usart_out+0x2c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f9      	beq.n	8001190 <usart_out+0xc>
        // Wait until transmit buffer is empty
    }
    USART2->DR = ch;
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <usart_out+0x2c>)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	6053      	str	r3, [r2, #4]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40004400 	.word	0x40004400

080011b4 <usart_get>:
    while (*string) {
        usart_out(*string++);
    }
}

char usart_get() {
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE)) {
 80011b8:	bf00      	nop
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <usart_get+0x24>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f9      	beq.n	80011ba <usart_get+0x6>
        // Wait until receive buffer is not empty
    }
    return USART2->DR;
 80011c6:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <usart_get+0x24>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	b2db      	uxtb	r3, r3
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40004400 	.word	0x40004400

080011dc <__io_putchar>:

// Override weak symbols for printf and getchar compatibility
int __io_putchar(int ch) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    usart_out((char)ch); // Send character using USART
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ffcb 	bl	8001184 <usart_out>
    return ch;           // Return the character for compatibility
 80011ee:	687b      	ldr	r3, [r7, #4]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <__io_getchar>:

int __io_getchar(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    return usart_get();  // Receive character using USART
 80011fc:	f7ff ffda 	bl	80011b4 <usart_get>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001240 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800120c:	f7ff ff6a 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	@ (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	@ (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f000 fedb 	bl	8001ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff fdb1 	bl	8000da0 <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800124c:	08002dd8 	.word	0x08002dd8
  ldr r2, =_sbss
 8001250:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001254:	200001e4 	.word	0x200001e4

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_InitTick+0x54>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_InitTick+0x58>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001272:	fbb3 f3f1 	udiv	r3, r3, r1
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f8d4 	bl	8001428 <HAL_SYSTICK_Config>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00e      	b.n	80012a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d80a      	bhi.n	80012a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f000 f8aa 	bl	80013f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800129c:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <HAL_InitTick+0x5c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000094 	.word	0x20000094

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	@ (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	@ (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001402:	f7ff ff67 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001406:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	f7ff ff99 	bl	8001344 <NVIC_EncodePriority>
 8001412:	4602      	mov	r2, r0
 8001414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff68 	bl	80012f0 <__NVIC_SetPriority>
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ffbb 	bl	80013ac <SysTick_Config>
 8001436:	4603      	mov	r3, r0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e267      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d075      	beq.n	800154a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800145e:	4b88      	ldr	r3, [pc, #544]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d00c      	beq.n	8001484 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b85      	ldr	r3, [pc, #532]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001472:	2b08      	cmp	r3, #8
 8001474:	d112      	bne.n	800149c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001476:	4b82      	ldr	r3, [pc, #520]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800147e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001482:	d10b      	bne.n	800149c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	4b7e      	ldr	r3, [pc, #504]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d05b      	beq.n	8001548 <HAL_RCC_OscConfig+0x108>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d157      	bne.n	8001548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e242      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a4:	d106      	bne.n	80014b4 <HAL_RCC_OscConfig+0x74>
 80014a6:	4b76      	ldr	r3, [pc, #472]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a75      	ldr	r2, [pc, #468]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e01d      	b.n	80014f0 <HAL_RCC_OscConfig+0xb0>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x98>
 80014be:	4b70      	ldr	r3, [pc, #448]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0xb0>
 80014d8:	4b69      	ldr	r3, [pc, #420]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a68      	ldr	r2, [pc, #416]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b66      	ldr	r3, [pc, #408]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a65      	ldr	r2, [pc, #404]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fee0 	bl	80012bc <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fedc 	bl	80012bc <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	@ 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e207      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b5b      	ldr	r3, [pc, #364]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0xc0>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fecc 	bl	80012bc <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fec8 	bl	80012bc <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	@ 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1f3      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	4b51      	ldr	r3, [pc, #324]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0xe8>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001556:	4b4a      	ldr	r3, [pc, #296]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b47      	ldr	r3, [pc, #284]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800156a:	2b08      	cmp	r3, #8
 800156c:	d11c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156e:	4b44      	ldr	r3, [pc, #272]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d116      	bne.n	80015a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	4b41      	ldr	r3, [pc, #260]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x152>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e1c7      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4937      	ldr	r1, [pc, #220]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	e03a      	b.n	800161e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b34      	ldr	r3, [pc, #208]	@ (8001684 <HAL_RCC_OscConfig+0x244>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fe81 	bl	80012bc <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fe7d 	bl	80012bc <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1a8      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4925      	ldr	r1, [pc, #148]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <HAL_RCC_OscConfig+0x244>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fe60 	bl	80012bc <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fe5c 	bl	80012bc <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e187      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d036      	beq.n	8001698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d016      	beq.n	8001660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <HAL_RCC_OscConfig+0x248>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff fe40 	bl	80012bc <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fe3c 	bl	80012bc <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e167      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_RCC_OscConfig+0x240>)
 8001654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x200>
 800165e:	e01b      	b.n	8001698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <HAL_RCC_OscConfig+0x248>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001666:	f7ff fe29 	bl	80012bc <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	e00e      	b.n	800168c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fe25 	bl	80012bc <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d907      	bls.n	800168c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e150      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
 8001680:	40023800 	.word	0x40023800
 8001684:	42470000 	.word	0x42470000
 8001688:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	4b88      	ldr	r3, [pc, #544]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ea      	bne.n	800166e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 8097 	beq.w	80017d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b81      	ldr	r3, [pc, #516]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b7d      	ldr	r3, [pc, #500]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	4a7c      	ldr	r2, [pc, #496]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c6:	4b7a      	ldr	r3, [pc, #488]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d2:	2301      	movs	r3, #1
 80016d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b77      	ldr	r3, [pc, #476]	@ (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d118      	bne.n	8001714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e2:	4b74      	ldr	r3, [pc, #464]	@ (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a73      	ldr	r2, [pc, #460]	@ (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fde5 	bl	80012bc <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff fde1 	bl	80012bc <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e10c      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	4b6a      	ldr	r3, [pc, #424]	@ (80018b4 <HAL_RCC_OscConfig+0x474>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x2ea>
 800171c:	4b64      	ldr	r3, [pc, #400]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001720:	4a63      	ldr	r2, [pc, #396]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6713      	str	r3, [r2, #112]	@ 0x70
 8001728:	e01c      	b.n	8001764 <HAL_RCC_OscConfig+0x324>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x30c>
 8001732:	4b5f      	ldr	r3, [pc, #380]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001736:	4a5e      	ldr	r2, [pc, #376]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6713      	str	r3, [r2, #112]	@ 0x70
 800173e:	4b5c      	ldr	r3, [pc, #368]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001742:	4a5b      	ldr	r2, [pc, #364]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6713      	str	r3, [r2, #112]	@ 0x70
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0x324>
 800174c:	4b58      	ldr	r3, [pc, #352]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001750:	4a57      	ldr	r2, [pc, #348]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	@ 0x70
 8001758:	4b55      	ldr	r3, [pc, #340]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800175c:	4a54      	ldr	r2, [pc, #336]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 800175e:	f023 0304 	bic.w	r3, r3, #4
 8001762:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d015      	beq.n	8001798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff fda6 	bl	80012bc <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff fda2 	bl	80012bc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e0cb      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178a:	4b49      	ldr	r3, [pc, #292]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0ee      	beq.n	8001774 <HAL_RCC_OscConfig+0x334>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff fd90 	bl	80012bc <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7ff fd8c 	bl	80012bc <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e0b5      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b6:	4b3e      	ldr	r3, [pc, #248]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ee      	bne.n	80017a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b39      	ldr	r3, [pc, #228]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	4a38      	ldr	r2, [pc, #224]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80a1 	beq.w	8001920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017de:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d05c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d141      	bne.n	8001876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <HAL_RCC_OscConfig+0x478>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fd60 	bl	80012bc <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fd5c 	bl	80012bc <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e087      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	491b      	ldr	r1, [pc, #108]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <HAL_RCC_OscConfig+0x478>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fd35 	bl	80012bc <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff fd31 	bl	80012bc <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e05c      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x416>
 8001874:	e054      	b.n	8001920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <HAL_RCC_OscConfig+0x478>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fd1e 	bl	80012bc <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fd1a 	bl	80012bc <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e045      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x444>
 80018a2:	e03d      	b.n	8001920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e038      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000
 80018b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_RCC_OscConfig+0x4ec>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d028      	beq.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d121      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d11a      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018ec:	4013      	ands	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d111      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0cc      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b68      	ldr	r3, [pc, #416]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d90c      	bls.n	800196c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b65      	ldr	r3, [pc, #404]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b63      	ldr	r3, [pc, #396]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0b8      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d020      	beq.n	80019ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001984:	4b59      	ldr	r3, [pc, #356]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a58      	ldr	r2, [pc, #352]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800198e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800199c:	4b53      	ldr	r3, [pc, #332]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4a52      	ldr	r2, [pc, #328]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a8:	4b50      	ldr	r3, [pc, #320]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	494d      	ldr	r1, [pc, #308]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d044      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b47      	ldr	r3, [pc, #284]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d119      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e07f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ee:	4b3f      	ldr	r3, [pc, #252]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e06f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e067      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 0203 	bic.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4934      	ldr	r1, [pc, #208]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a20:	f7ff fc4c 	bl	80012bc <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff fc48 	bl	80012bc <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e04f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 020c 	and.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1eb      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a50:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d20c      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e032      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a84:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4916      	ldr	r1, [pc, #88]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa2:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	490e      	ldr	r1, [pc, #56]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ab6:	f000 f821 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	490a      	ldr	r1, [pc, #40]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	4a09      	ldr	r2, [pc, #36]	@ (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fbc0 	bl	800125c <HAL_InitTick>

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00
 8001aec:	40023800 	.word	0x40023800
 8001af0:	08002d84 	.word	0x08002d84
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b00:	b094      	sub	sp, #80	@ 0x50
 8001b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b14:	4b79      	ldr	r3, [pc, #484]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d00d      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x40>
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	f200 80e1 	bhi.w	8001ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b2e:	e0db      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b34:	e0db      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b36:	4b73      	ldr	r3, [pc, #460]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b3a:	e0d8      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b46:	4b6d      	ldr	r3, [pc, #436]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d063      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b52:	4b6a      	ldr	r3, [pc, #424]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	2200      	movs	r2, #0
 8001b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b66:	2300      	movs	r3, #0
 8001b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b6e:	4622      	mov	r2, r4
 8001b70:	462b      	mov	r3, r5
 8001b72:	f04f 0000 	mov.w	r0, #0
 8001b76:	f04f 0100 	mov.w	r1, #0
 8001b7a:	0159      	lsls	r1, r3, #5
 8001b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b80:	0150      	lsls	r0, r2, #5
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4621      	mov	r1, r4
 8001b88:	1a51      	subs	r1, r2, r1
 8001b8a:	6139      	str	r1, [r7, #16]
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ba0:	4659      	mov	r1, fp
 8001ba2:	018b      	lsls	r3, r1, #6
 8001ba4:	4651      	mov	r1, sl
 8001ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001baa:	4651      	mov	r1, sl
 8001bac:	018a      	lsls	r2, r1, #6
 8001bae:	4651      	mov	r1, sl
 8001bb0:	ebb2 0801 	subs.w	r8, r2, r1
 8001bb4:	4659      	mov	r1, fp
 8001bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bce:	4690      	mov	r8, r2
 8001bd0:	4699      	mov	r9, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	eb18 0303 	adds.w	r3, r8, r3
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	462b      	mov	r3, r5
 8001bdc:	eb49 0303 	adc.w	r3, r9, r3
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bee:	4629      	mov	r1, r5
 8001bf0:	024b      	lsls	r3, r1, #9
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	024a      	lsls	r2, r1, #9
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c02:	2200      	movs	r2, #0
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c0c:	f7fe fb38 	bl	8000280 <__aeabi_uldivmod>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4613      	mov	r3, r2
 8001c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c18:	e058      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1a:	4b38      	ldr	r3, [pc, #224]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	099b      	lsrs	r3, r3, #6
 8001c20:	2200      	movs	r2, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	4611      	mov	r1, r2
 8001c26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c34:	4642      	mov	r2, r8
 8001c36:	464b      	mov	r3, r9
 8001c38:	f04f 0000 	mov.w	r0, #0
 8001c3c:	f04f 0100 	mov.w	r1, #0
 8001c40:	0159      	lsls	r1, r3, #5
 8001c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c46:	0150      	lsls	r0, r2, #5
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4641      	mov	r1, r8
 8001c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c52:	4649      	mov	r1, r9
 8001c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c70:	eb63 050b 	sbc.w	r5, r3, fp
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	00eb      	lsls	r3, r5, #3
 8001c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c82:	00e2      	lsls	r2, r4, #3
 8001c84:	4614      	mov	r4, r2
 8001c86:	461d      	mov	r5, r3
 8001c88:	4643      	mov	r3, r8
 8001c8a:	18e3      	adds	r3, r4, r3
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	464b      	mov	r3, r9
 8001c90:	eb45 0303 	adc.w	r3, r5, r3
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	028b      	lsls	r3, r1, #10
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cac:	4621      	mov	r1, r4
 8001cae:	028a      	lsls	r2, r1, #10
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	61fa      	str	r2, [r7, #28]
 8001cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc0:	f7fe fade 	bl	8000280 <__aeabi_uldivmod>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4613      	mov	r3, r2
 8001cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce6:	e002      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3750      	adds	r7, #80	@ 0x50
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	007a1200 	.word	0x007a1200

08001d08 <std>:
 8001d08:	2300      	movs	r3, #0
 8001d0a:	b510      	push	{r4, lr}
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8001d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d16:	6083      	str	r3, [r0, #8]
 8001d18:	8181      	strh	r1, [r0, #12]
 8001d1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001d1c:	81c2      	strh	r2, [r0, #14]
 8001d1e:	6183      	str	r3, [r0, #24]
 8001d20:	4619      	mov	r1, r3
 8001d22:	2208      	movs	r2, #8
 8001d24:	305c      	adds	r0, #92	@ 0x5c
 8001d26:	f000 f90e 	bl	8001f46 <memset>
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <std+0x58>)
 8001d2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <std+0x5c>)
 8001d30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <std+0x60>)
 8001d34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <std+0x64>)
 8001d38:	6323      	str	r3, [r4, #48]	@ 0x30
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <std+0x68>)
 8001d3c:	6224      	str	r4, [r4, #32]
 8001d3e:	429c      	cmp	r4, r3
 8001d40:	d006      	beq.n	8001d50 <std+0x48>
 8001d42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001d46:	4294      	cmp	r4, r2
 8001d48:	d002      	beq.n	8001d50 <std+0x48>
 8001d4a:	33d0      	adds	r3, #208	@ 0xd0
 8001d4c:	429c      	cmp	r4, r3
 8001d4e:	d105      	bne.n	8001d5c <std+0x54>
 8001d50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d58:	f000 b96e 	b.w	8002038 <__retarget_lock_init_recursive>
 8001d5c:	bd10      	pop	{r4, pc}
 8001d5e:	bf00      	nop
 8001d60:	08001ec1 	.word	0x08001ec1
 8001d64:	08001ee3 	.word	0x08001ee3
 8001d68:	08001f1b 	.word	0x08001f1b
 8001d6c:	08001f3f 	.word	0x08001f3f
 8001d70:	20000098 	.word	0x20000098

08001d74 <stdio_exit_handler>:
 8001d74:	4a02      	ldr	r2, [pc, #8]	@ (8001d80 <stdio_exit_handler+0xc>)
 8001d76:	4903      	ldr	r1, [pc, #12]	@ (8001d84 <stdio_exit_handler+0x10>)
 8001d78:	4803      	ldr	r0, [pc, #12]	@ (8001d88 <stdio_exit_handler+0x14>)
 8001d7a:	f000 b869 	b.w	8001e50 <_fwalk_sglue>
 8001d7e:	bf00      	nop
 8001d80:	2000000c 	.word	0x2000000c
 8001d84:	080028d9 	.word	0x080028d9
 8001d88:	2000001c 	.word	0x2000001c

08001d8c <cleanup_stdio>:
 8001d8c:	6841      	ldr	r1, [r0, #4]
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <cleanup_stdio+0x34>)
 8001d90:	4299      	cmp	r1, r3
 8001d92:	b510      	push	{r4, lr}
 8001d94:	4604      	mov	r4, r0
 8001d96:	d001      	beq.n	8001d9c <cleanup_stdio+0x10>
 8001d98:	f000 fd9e 	bl	80028d8 <_fflush_r>
 8001d9c:	68a1      	ldr	r1, [r4, #8]
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <cleanup_stdio+0x38>)
 8001da0:	4299      	cmp	r1, r3
 8001da2:	d002      	beq.n	8001daa <cleanup_stdio+0x1e>
 8001da4:	4620      	mov	r0, r4
 8001da6:	f000 fd97 	bl	80028d8 <_fflush_r>
 8001daa:	68e1      	ldr	r1, [r4, #12]
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <cleanup_stdio+0x3c>)
 8001dae:	4299      	cmp	r1, r3
 8001db0:	d004      	beq.n	8001dbc <cleanup_stdio+0x30>
 8001db2:	4620      	mov	r0, r4
 8001db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001db8:	f000 bd8e 	b.w	80028d8 <_fflush_r>
 8001dbc:	bd10      	pop	{r4, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000098 	.word	0x20000098
 8001dc4:	20000100 	.word	0x20000100
 8001dc8:	20000168 	.word	0x20000168

08001dcc <global_stdio_init.part.0>:
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <global_stdio_init.part.0+0x30>)
 8001dd0:	4c0b      	ldr	r4, [pc, #44]	@ (8001e00 <global_stdio_init.part.0+0x34>)
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e04 <global_stdio_init.part.0+0x38>)
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2104      	movs	r1, #4
 8001ddc:	f7ff ff94 	bl	8001d08 <std>
 8001de0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001de4:	2201      	movs	r2, #1
 8001de6:	2109      	movs	r1, #9
 8001de8:	f7ff ff8e 	bl	8001d08 <std>
 8001dec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001df0:	2202      	movs	r2, #2
 8001df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001df6:	2112      	movs	r1, #18
 8001df8:	f7ff bf86 	b.w	8001d08 <std>
 8001dfc:	200001d0 	.word	0x200001d0
 8001e00:	20000098 	.word	0x20000098
 8001e04:	08001d75 	.word	0x08001d75

08001e08 <__sfp_lock_acquire>:
 8001e08:	4801      	ldr	r0, [pc, #4]	@ (8001e10 <__sfp_lock_acquire+0x8>)
 8001e0a:	f000 b916 	b.w	800203a <__retarget_lock_acquire_recursive>
 8001e0e:	bf00      	nop
 8001e10:	200001d9 	.word	0x200001d9

08001e14 <__sfp_lock_release>:
 8001e14:	4801      	ldr	r0, [pc, #4]	@ (8001e1c <__sfp_lock_release+0x8>)
 8001e16:	f000 b911 	b.w	800203c <__retarget_lock_release_recursive>
 8001e1a:	bf00      	nop
 8001e1c:	200001d9 	.word	0x200001d9

08001e20 <__sinit>:
 8001e20:	b510      	push	{r4, lr}
 8001e22:	4604      	mov	r4, r0
 8001e24:	f7ff fff0 	bl	8001e08 <__sfp_lock_acquire>
 8001e28:	6a23      	ldr	r3, [r4, #32]
 8001e2a:	b11b      	cbz	r3, 8001e34 <__sinit+0x14>
 8001e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e30:	f7ff bff0 	b.w	8001e14 <__sfp_lock_release>
 8001e34:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <__sinit+0x28>)
 8001e36:	6223      	str	r3, [r4, #32]
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <__sinit+0x2c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f5      	bne.n	8001e2c <__sinit+0xc>
 8001e40:	f7ff ffc4 	bl	8001dcc <global_stdio_init.part.0>
 8001e44:	e7f2      	b.n	8001e2c <__sinit+0xc>
 8001e46:	bf00      	nop
 8001e48:	08001d8d 	.word	0x08001d8d
 8001e4c:	200001d0 	.word	0x200001d0

08001e50 <_fwalk_sglue>:
 8001e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e54:	4607      	mov	r7, r0
 8001e56:	4688      	mov	r8, r1
 8001e58:	4614      	mov	r4, r2
 8001e5a:	2600      	movs	r6, #0
 8001e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e60:	f1b9 0901 	subs.w	r9, r9, #1
 8001e64:	d505      	bpl.n	8001e72 <_fwalk_sglue+0x22>
 8001e66:	6824      	ldr	r4, [r4, #0]
 8001e68:	2c00      	cmp	r4, #0
 8001e6a:	d1f7      	bne.n	8001e5c <_fwalk_sglue+0xc>
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e72:	89ab      	ldrh	r3, [r5, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d907      	bls.n	8001e88 <_fwalk_sglue+0x38>
 8001e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	d003      	beq.n	8001e88 <_fwalk_sglue+0x38>
 8001e80:	4629      	mov	r1, r5
 8001e82:	4638      	mov	r0, r7
 8001e84:	47c0      	blx	r8
 8001e86:	4306      	orrs	r6, r0
 8001e88:	3568      	adds	r5, #104	@ 0x68
 8001e8a:	e7e9      	b.n	8001e60 <_fwalk_sglue+0x10>

08001e8c <iprintf>:
 8001e8c:	b40f      	push	{r0, r1, r2, r3}
 8001e8e:	b507      	push	{r0, r1, r2, lr}
 8001e90:	4906      	ldr	r1, [pc, #24]	@ (8001eac <iprintf+0x20>)
 8001e92:	ab04      	add	r3, sp, #16
 8001e94:	6808      	ldr	r0, [r1, #0]
 8001e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e9a:	6881      	ldr	r1, [r0, #8]
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	f000 f9f1 	bl	8002284 <_vfiprintf_r>
 8001ea2:	b003      	add	sp, #12
 8001ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ea8:	b004      	add	sp, #16
 8001eaa:	4770      	bx	lr
 8001eac:	20000018 	.word	0x20000018

08001eb0 <putchar>:
 8001eb0:	4b02      	ldr	r3, [pc, #8]	@ (8001ebc <putchar+0xc>)
 8001eb2:	4601      	mov	r1, r0
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	6882      	ldr	r2, [r0, #8]
 8001eb8:	f000 bd36 	b.w	8002928 <_putc_r>
 8001ebc:	20000018 	.word	0x20000018

08001ec0 <__sread>:
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec8:	f000 f868 	bl	8001f9c <_read_r>
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	bfab      	itete	ge
 8001ed0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8001ed4:	181b      	addge	r3, r3, r0
 8001ed6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001eda:	bfac      	ite	ge
 8001edc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001ede:	81a3      	strhlt	r3, [r4, #12]
 8001ee0:	bd10      	pop	{r4, pc}

08001ee2 <__swrite>:
 8001ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee6:	461f      	mov	r7, r3
 8001ee8:	898b      	ldrh	r3, [r1, #12]
 8001eea:	05db      	lsls	r3, r3, #23
 8001eec:	4605      	mov	r5, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	4616      	mov	r6, r2
 8001ef2:	d505      	bpl.n	8001f00 <__swrite+0x1e>
 8001ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ef8:	2302      	movs	r3, #2
 8001efa:	2200      	movs	r2, #0
 8001efc:	f000 f83c 	bl	8001f78 <_lseek_r>
 8001f00:	89a3      	ldrh	r3, [r4, #12]
 8001f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f0a:	81a3      	strh	r3, [r4, #12]
 8001f0c:	4632      	mov	r2, r6
 8001f0e:	463b      	mov	r3, r7
 8001f10:	4628      	mov	r0, r5
 8001f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f16:	f000 b853 	b.w	8001fc0 <_write_r>

08001f1a <__sseek>:
 8001f1a:	b510      	push	{r4, lr}
 8001f1c:	460c      	mov	r4, r1
 8001f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f22:	f000 f829 	bl	8001f78 <_lseek_r>
 8001f26:	1c43      	adds	r3, r0, #1
 8001f28:	89a3      	ldrh	r3, [r4, #12]
 8001f2a:	bf15      	itete	ne
 8001f2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001f2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001f32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001f36:	81a3      	strheq	r3, [r4, #12]
 8001f38:	bf18      	it	ne
 8001f3a:	81a3      	strhne	r3, [r4, #12]
 8001f3c:	bd10      	pop	{r4, pc}

08001f3e <__sclose>:
 8001f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f42:	f000 b809 	b.w	8001f58 <_close_r>

08001f46 <memset>:
 8001f46:	4402      	add	r2, r0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d100      	bne.n	8001f50 <memset+0xa>
 8001f4e:	4770      	bx	lr
 8001f50:	f803 1b01 	strb.w	r1, [r3], #1
 8001f54:	e7f9      	b.n	8001f4a <memset+0x4>
	...

08001f58 <_close_r>:
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	4d06      	ldr	r5, [pc, #24]	@ (8001f74 <_close_r+0x1c>)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4608      	mov	r0, r1
 8001f62:	602b      	str	r3, [r5, #0]
 8001f64:	f7ff f854 	bl	8001010 <_close>
 8001f68:	1c43      	adds	r3, r0, #1
 8001f6a:	d102      	bne.n	8001f72 <_close_r+0x1a>
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	b103      	cbz	r3, 8001f72 <_close_r+0x1a>
 8001f70:	6023      	str	r3, [r4, #0]
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	200001d4 	.word	0x200001d4

08001f78 <_lseek_r>:
 8001f78:	b538      	push	{r3, r4, r5, lr}
 8001f7a:	4d07      	ldr	r5, [pc, #28]	@ (8001f98 <_lseek_r+0x20>)
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	4608      	mov	r0, r1
 8001f80:	4611      	mov	r1, r2
 8001f82:	2200      	movs	r2, #0
 8001f84:	602a      	str	r2, [r5, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	f7ff f869 	bl	800105e <_lseek>
 8001f8c:	1c43      	adds	r3, r0, #1
 8001f8e:	d102      	bne.n	8001f96 <_lseek_r+0x1e>
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	b103      	cbz	r3, 8001f96 <_lseek_r+0x1e>
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	bd38      	pop	{r3, r4, r5, pc}
 8001f98:	200001d4 	.word	0x200001d4

08001f9c <_read_r>:
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	4d07      	ldr	r5, [pc, #28]	@ (8001fbc <_read_r+0x20>)
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	4608      	mov	r0, r1
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	602a      	str	r2, [r5, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f7fe fff7 	bl	8000f9e <_read>
 8001fb0:	1c43      	adds	r3, r0, #1
 8001fb2:	d102      	bne.n	8001fba <_read_r+0x1e>
 8001fb4:	682b      	ldr	r3, [r5, #0]
 8001fb6:	b103      	cbz	r3, 8001fba <_read_r+0x1e>
 8001fb8:	6023      	str	r3, [r4, #0]
 8001fba:	bd38      	pop	{r3, r4, r5, pc}
 8001fbc:	200001d4 	.word	0x200001d4

08001fc0 <_write_r>:
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	4d07      	ldr	r5, [pc, #28]	@ (8001fe0 <_write_r+0x20>)
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	4608      	mov	r0, r1
 8001fc8:	4611      	mov	r1, r2
 8001fca:	2200      	movs	r2, #0
 8001fcc:	602a      	str	r2, [r5, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f7ff f802 	bl	8000fd8 <_write>
 8001fd4:	1c43      	adds	r3, r0, #1
 8001fd6:	d102      	bne.n	8001fde <_write_r+0x1e>
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	b103      	cbz	r3, 8001fde <_write_r+0x1e>
 8001fdc:	6023      	str	r3, [r4, #0]
 8001fde:	bd38      	pop	{r3, r4, r5, pc}
 8001fe0:	200001d4 	.word	0x200001d4

08001fe4 <__errno>:
 8001fe4:	4b01      	ldr	r3, [pc, #4]	@ (8001fec <__errno+0x8>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000018 	.word	0x20000018

08001ff0 <__libc_init_array>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	4d0d      	ldr	r5, [pc, #52]	@ (8002028 <__libc_init_array+0x38>)
 8001ff4:	4c0d      	ldr	r4, [pc, #52]	@ (800202c <__libc_init_array+0x3c>)
 8001ff6:	1b64      	subs	r4, r4, r5
 8001ff8:	10a4      	asrs	r4, r4, #2
 8001ffa:	2600      	movs	r6, #0
 8001ffc:	42a6      	cmp	r6, r4
 8001ffe:	d109      	bne.n	8002014 <__libc_init_array+0x24>
 8002000:	4d0b      	ldr	r5, [pc, #44]	@ (8002030 <__libc_init_array+0x40>)
 8002002:	4c0c      	ldr	r4, [pc, #48]	@ (8002034 <__libc_init_array+0x44>)
 8002004:	f000 fdec 	bl	8002be0 <_init>
 8002008:	1b64      	subs	r4, r4, r5
 800200a:	10a4      	asrs	r4, r4, #2
 800200c:	2600      	movs	r6, #0
 800200e:	42a6      	cmp	r6, r4
 8002010:	d105      	bne.n	800201e <__libc_init_array+0x2e>
 8002012:	bd70      	pop	{r4, r5, r6, pc}
 8002014:	f855 3b04 	ldr.w	r3, [r5], #4
 8002018:	4798      	blx	r3
 800201a:	3601      	adds	r6, #1
 800201c:	e7ee      	b.n	8001ffc <__libc_init_array+0xc>
 800201e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002022:	4798      	blx	r3
 8002024:	3601      	adds	r6, #1
 8002026:	e7f2      	b.n	800200e <__libc_init_array+0x1e>
 8002028:	08002dd0 	.word	0x08002dd0
 800202c:	08002dd0 	.word	0x08002dd0
 8002030:	08002dd0 	.word	0x08002dd0
 8002034:	08002dd4 	.word	0x08002dd4

08002038 <__retarget_lock_init_recursive>:
 8002038:	4770      	bx	lr

0800203a <__retarget_lock_acquire_recursive>:
 800203a:	4770      	bx	lr

0800203c <__retarget_lock_release_recursive>:
 800203c:	4770      	bx	lr
	...

08002040 <_free_r>:
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	4605      	mov	r5, r0
 8002044:	2900      	cmp	r1, #0
 8002046:	d041      	beq.n	80020cc <_free_r+0x8c>
 8002048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800204c:	1f0c      	subs	r4, r1, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	bfb8      	it	lt
 8002052:	18e4      	addlt	r4, r4, r3
 8002054:	f000 f8e0 	bl	8002218 <__malloc_lock>
 8002058:	4a1d      	ldr	r2, [pc, #116]	@ (80020d0 <_free_r+0x90>)
 800205a:	6813      	ldr	r3, [r2, #0]
 800205c:	b933      	cbnz	r3, 800206c <_free_r+0x2c>
 800205e:	6063      	str	r3, [r4, #4]
 8002060:	6014      	str	r4, [r2, #0]
 8002062:	4628      	mov	r0, r5
 8002064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002068:	f000 b8dc 	b.w	8002224 <__malloc_unlock>
 800206c:	42a3      	cmp	r3, r4
 800206e:	d908      	bls.n	8002082 <_free_r+0x42>
 8002070:	6820      	ldr	r0, [r4, #0]
 8002072:	1821      	adds	r1, r4, r0
 8002074:	428b      	cmp	r3, r1
 8002076:	bf01      	itttt	eq
 8002078:	6819      	ldreq	r1, [r3, #0]
 800207a:	685b      	ldreq	r3, [r3, #4]
 800207c:	1809      	addeq	r1, r1, r0
 800207e:	6021      	streq	r1, [r4, #0]
 8002080:	e7ed      	b.n	800205e <_free_r+0x1e>
 8002082:	461a      	mov	r2, r3
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	b10b      	cbz	r3, 800208c <_free_r+0x4c>
 8002088:	42a3      	cmp	r3, r4
 800208a:	d9fa      	bls.n	8002082 <_free_r+0x42>
 800208c:	6811      	ldr	r1, [r2, #0]
 800208e:	1850      	adds	r0, r2, r1
 8002090:	42a0      	cmp	r0, r4
 8002092:	d10b      	bne.n	80020ac <_free_r+0x6c>
 8002094:	6820      	ldr	r0, [r4, #0]
 8002096:	4401      	add	r1, r0
 8002098:	1850      	adds	r0, r2, r1
 800209a:	4283      	cmp	r3, r0
 800209c:	6011      	str	r1, [r2, #0]
 800209e:	d1e0      	bne.n	8002062 <_free_r+0x22>
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	6053      	str	r3, [r2, #4]
 80020a6:	4408      	add	r0, r1
 80020a8:	6010      	str	r0, [r2, #0]
 80020aa:	e7da      	b.n	8002062 <_free_r+0x22>
 80020ac:	d902      	bls.n	80020b4 <_free_r+0x74>
 80020ae:	230c      	movs	r3, #12
 80020b0:	602b      	str	r3, [r5, #0]
 80020b2:	e7d6      	b.n	8002062 <_free_r+0x22>
 80020b4:	6820      	ldr	r0, [r4, #0]
 80020b6:	1821      	adds	r1, r4, r0
 80020b8:	428b      	cmp	r3, r1
 80020ba:	bf04      	itt	eq
 80020bc:	6819      	ldreq	r1, [r3, #0]
 80020be:	685b      	ldreq	r3, [r3, #4]
 80020c0:	6063      	str	r3, [r4, #4]
 80020c2:	bf04      	itt	eq
 80020c4:	1809      	addeq	r1, r1, r0
 80020c6:	6021      	streq	r1, [r4, #0]
 80020c8:	6054      	str	r4, [r2, #4]
 80020ca:	e7ca      	b.n	8002062 <_free_r+0x22>
 80020cc:	bd38      	pop	{r3, r4, r5, pc}
 80020ce:	bf00      	nop
 80020d0:	200001e0 	.word	0x200001e0

080020d4 <sbrk_aligned>:
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	4e0f      	ldr	r6, [pc, #60]	@ (8002114 <sbrk_aligned+0x40>)
 80020d8:	460c      	mov	r4, r1
 80020da:	6831      	ldr	r1, [r6, #0]
 80020dc:	4605      	mov	r5, r0
 80020de:	b911      	cbnz	r1, 80020e6 <sbrk_aligned+0x12>
 80020e0:	f000 fcea 	bl	8002ab8 <_sbrk_r>
 80020e4:	6030      	str	r0, [r6, #0]
 80020e6:	4621      	mov	r1, r4
 80020e8:	4628      	mov	r0, r5
 80020ea:	f000 fce5 	bl	8002ab8 <_sbrk_r>
 80020ee:	1c43      	adds	r3, r0, #1
 80020f0:	d103      	bne.n	80020fa <sbrk_aligned+0x26>
 80020f2:	f04f 34ff 	mov.w	r4, #4294967295
 80020f6:	4620      	mov	r0, r4
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
 80020fa:	1cc4      	adds	r4, r0, #3
 80020fc:	f024 0403 	bic.w	r4, r4, #3
 8002100:	42a0      	cmp	r0, r4
 8002102:	d0f8      	beq.n	80020f6 <sbrk_aligned+0x22>
 8002104:	1a21      	subs	r1, r4, r0
 8002106:	4628      	mov	r0, r5
 8002108:	f000 fcd6 	bl	8002ab8 <_sbrk_r>
 800210c:	3001      	adds	r0, #1
 800210e:	d1f2      	bne.n	80020f6 <sbrk_aligned+0x22>
 8002110:	e7ef      	b.n	80020f2 <sbrk_aligned+0x1e>
 8002112:	bf00      	nop
 8002114:	200001dc 	.word	0x200001dc

08002118 <_malloc_r>:
 8002118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800211c:	1ccd      	adds	r5, r1, #3
 800211e:	f025 0503 	bic.w	r5, r5, #3
 8002122:	3508      	adds	r5, #8
 8002124:	2d0c      	cmp	r5, #12
 8002126:	bf38      	it	cc
 8002128:	250c      	movcc	r5, #12
 800212a:	2d00      	cmp	r5, #0
 800212c:	4606      	mov	r6, r0
 800212e:	db01      	blt.n	8002134 <_malloc_r+0x1c>
 8002130:	42a9      	cmp	r1, r5
 8002132:	d904      	bls.n	800213e <_malloc_r+0x26>
 8002134:	230c      	movs	r3, #12
 8002136:	6033      	str	r3, [r6, #0]
 8002138:	2000      	movs	r0, #0
 800213a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800213e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002214 <_malloc_r+0xfc>
 8002142:	f000 f869 	bl	8002218 <__malloc_lock>
 8002146:	f8d8 3000 	ldr.w	r3, [r8]
 800214a:	461c      	mov	r4, r3
 800214c:	bb44      	cbnz	r4, 80021a0 <_malloc_r+0x88>
 800214e:	4629      	mov	r1, r5
 8002150:	4630      	mov	r0, r6
 8002152:	f7ff ffbf 	bl	80020d4 <sbrk_aligned>
 8002156:	1c43      	adds	r3, r0, #1
 8002158:	4604      	mov	r4, r0
 800215a:	d158      	bne.n	800220e <_malloc_r+0xf6>
 800215c:	f8d8 4000 	ldr.w	r4, [r8]
 8002160:	4627      	mov	r7, r4
 8002162:	2f00      	cmp	r7, #0
 8002164:	d143      	bne.n	80021ee <_malloc_r+0xd6>
 8002166:	2c00      	cmp	r4, #0
 8002168:	d04b      	beq.n	8002202 <_malloc_r+0xea>
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	4639      	mov	r1, r7
 800216e:	4630      	mov	r0, r6
 8002170:	eb04 0903 	add.w	r9, r4, r3
 8002174:	f000 fca0 	bl	8002ab8 <_sbrk_r>
 8002178:	4581      	cmp	r9, r0
 800217a:	d142      	bne.n	8002202 <_malloc_r+0xea>
 800217c:	6821      	ldr	r1, [r4, #0]
 800217e:	1a6d      	subs	r5, r5, r1
 8002180:	4629      	mov	r1, r5
 8002182:	4630      	mov	r0, r6
 8002184:	f7ff ffa6 	bl	80020d4 <sbrk_aligned>
 8002188:	3001      	adds	r0, #1
 800218a:	d03a      	beq.n	8002202 <_malloc_r+0xea>
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	442b      	add	r3, r5
 8002190:	6023      	str	r3, [r4, #0]
 8002192:	f8d8 3000 	ldr.w	r3, [r8]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	bb62      	cbnz	r2, 80021f4 <_malloc_r+0xdc>
 800219a:	f8c8 7000 	str.w	r7, [r8]
 800219e:	e00f      	b.n	80021c0 <_malloc_r+0xa8>
 80021a0:	6822      	ldr	r2, [r4, #0]
 80021a2:	1b52      	subs	r2, r2, r5
 80021a4:	d420      	bmi.n	80021e8 <_malloc_r+0xd0>
 80021a6:	2a0b      	cmp	r2, #11
 80021a8:	d917      	bls.n	80021da <_malloc_r+0xc2>
 80021aa:	1961      	adds	r1, r4, r5
 80021ac:	42a3      	cmp	r3, r4
 80021ae:	6025      	str	r5, [r4, #0]
 80021b0:	bf18      	it	ne
 80021b2:	6059      	strne	r1, [r3, #4]
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	bf08      	it	eq
 80021b8:	f8c8 1000 	streq.w	r1, [r8]
 80021bc:	5162      	str	r2, [r4, r5]
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	4630      	mov	r0, r6
 80021c2:	f000 f82f 	bl	8002224 <__malloc_unlock>
 80021c6:	f104 000b 	add.w	r0, r4, #11
 80021ca:	1d23      	adds	r3, r4, #4
 80021cc:	f020 0007 	bic.w	r0, r0, #7
 80021d0:	1ac2      	subs	r2, r0, r3
 80021d2:	bf1c      	itt	ne
 80021d4:	1a1b      	subne	r3, r3, r0
 80021d6:	50a3      	strne	r3, [r4, r2]
 80021d8:	e7af      	b.n	800213a <_malloc_r+0x22>
 80021da:	6862      	ldr	r2, [r4, #4]
 80021dc:	42a3      	cmp	r3, r4
 80021de:	bf0c      	ite	eq
 80021e0:	f8c8 2000 	streq.w	r2, [r8]
 80021e4:	605a      	strne	r2, [r3, #4]
 80021e6:	e7eb      	b.n	80021c0 <_malloc_r+0xa8>
 80021e8:	4623      	mov	r3, r4
 80021ea:	6864      	ldr	r4, [r4, #4]
 80021ec:	e7ae      	b.n	800214c <_malloc_r+0x34>
 80021ee:	463c      	mov	r4, r7
 80021f0:	687f      	ldr	r7, [r7, #4]
 80021f2:	e7b6      	b.n	8002162 <_malloc_r+0x4a>
 80021f4:	461a      	mov	r2, r3
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	42a3      	cmp	r3, r4
 80021fa:	d1fb      	bne.n	80021f4 <_malloc_r+0xdc>
 80021fc:	2300      	movs	r3, #0
 80021fe:	6053      	str	r3, [r2, #4]
 8002200:	e7de      	b.n	80021c0 <_malloc_r+0xa8>
 8002202:	230c      	movs	r3, #12
 8002204:	6033      	str	r3, [r6, #0]
 8002206:	4630      	mov	r0, r6
 8002208:	f000 f80c 	bl	8002224 <__malloc_unlock>
 800220c:	e794      	b.n	8002138 <_malloc_r+0x20>
 800220e:	6005      	str	r5, [r0, #0]
 8002210:	e7d6      	b.n	80021c0 <_malloc_r+0xa8>
 8002212:	bf00      	nop
 8002214:	200001e0 	.word	0x200001e0

08002218 <__malloc_lock>:
 8002218:	4801      	ldr	r0, [pc, #4]	@ (8002220 <__malloc_lock+0x8>)
 800221a:	f7ff bf0e 	b.w	800203a <__retarget_lock_acquire_recursive>
 800221e:	bf00      	nop
 8002220:	200001d8 	.word	0x200001d8

08002224 <__malloc_unlock>:
 8002224:	4801      	ldr	r0, [pc, #4]	@ (800222c <__malloc_unlock+0x8>)
 8002226:	f7ff bf09 	b.w	800203c <__retarget_lock_release_recursive>
 800222a:	bf00      	nop
 800222c:	200001d8 	.word	0x200001d8

08002230 <__sfputc_r>:
 8002230:	6893      	ldr	r3, [r2, #8]
 8002232:	3b01      	subs	r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	b410      	push	{r4}
 8002238:	6093      	str	r3, [r2, #8]
 800223a:	da08      	bge.n	800224e <__sfputc_r+0x1e>
 800223c:	6994      	ldr	r4, [r2, #24]
 800223e:	42a3      	cmp	r3, r4
 8002240:	db01      	blt.n	8002246 <__sfputc_r+0x16>
 8002242:	290a      	cmp	r1, #10
 8002244:	d103      	bne.n	800224e <__sfputc_r+0x1e>
 8002246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800224a:	f000 bba1 	b.w	8002990 <__swbuf_r>
 800224e:	6813      	ldr	r3, [r2, #0]
 8002250:	1c58      	adds	r0, r3, #1
 8002252:	6010      	str	r0, [r2, #0]
 8002254:	7019      	strb	r1, [r3, #0]
 8002256:	4608      	mov	r0, r1
 8002258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800225c:	4770      	bx	lr

0800225e <__sfputs_r>:
 800225e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002260:	4606      	mov	r6, r0
 8002262:	460f      	mov	r7, r1
 8002264:	4614      	mov	r4, r2
 8002266:	18d5      	adds	r5, r2, r3
 8002268:	42ac      	cmp	r4, r5
 800226a:	d101      	bne.n	8002270 <__sfputs_r+0x12>
 800226c:	2000      	movs	r0, #0
 800226e:	e007      	b.n	8002280 <__sfputs_r+0x22>
 8002270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002274:	463a      	mov	r2, r7
 8002276:	4630      	mov	r0, r6
 8002278:	f7ff ffda 	bl	8002230 <__sfputc_r>
 800227c:	1c43      	adds	r3, r0, #1
 800227e:	d1f3      	bne.n	8002268 <__sfputs_r+0xa>
 8002280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002284 <_vfiprintf_r>:
 8002284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002288:	460d      	mov	r5, r1
 800228a:	b09d      	sub	sp, #116	@ 0x74
 800228c:	4614      	mov	r4, r2
 800228e:	4698      	mov	r8, r3
 8002290:	4606      	mov	r6, r0
 8002292:	b118      	cbz	r0, 800229c <_vfiprintf_r+0x18>
 8002294:	6a03      	ldr	r3, [r0, #32]
 8002296:	b90b      	cbnz	r3, 800229c <_vfiprintf_r+0x18>
 8002298:	f7ff fdc2 	bl	8001e20 <__sinit>
 800229c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800229e:	07d9      	lsls	r1, r3, #31
 80022a0:	d405      	bmi.n	80022ae <_vfiprintf_r+0x2a>
 80022a2:	89ab      	ldrh	r3, [r5, #12]
 80022a4:	059a      	lsls	r2, r3, #22
 80022a6:	d402      	bmi.n	80022ae <_vfiprintf_r+0x2a>
 80022a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022aa:	f7ff fec6 	bl	800203a <__retarget_lock_acquire_recursive>
 80022ae:	89ab      	ldrh	r3, [r5, #12]
 80022b0:	071b      	lsls	r3, r3, #28
 80022b2:	d501      	bpl.n	80022b8 <_vfiprintf_r+0x34>
 80022b4:	692b      	ldr	r3, [r5, #16]
 80022b6:	b99b      	cbnz	r3, 80022e0 <_vfiprintf_r+0x5c>
 80022b8:	4629      	mov	r1, r5
 80022ba:	4630      	mov	r0, r6
 80022bc:	f000 fba6 	bl	8002a0c <__swsetup_r>
 80022c0:	b170      	cbz	r0, 80022e0 <_vfiprintf_r+0x5c>
 80022c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80022c4:	07dc      	lsls	r4, r3, #31
 80022c6:	d504      	bpl.n	80022d2 <_vfiprintf_r+0x4e>
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	b01d      	add	sp, #116	@ 0x74
 80022ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d2:	89ab      	ldrh	r3, [r5, #12]
 80022d4:	0598      	lsls	r0, r3, #22
 80022d6:	d4f7      	bmi.n	80022c8 <_vfiprintf_r+0x44>
 80022d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022da:	f7ff feaf 	bl	800203c <__retarget_lock_release_recursive>
 80022de:	e7f3      	b.n	80022c8 <_vfiprintf_r+0x44>
 80022e0:	2300      	movs	r3, #0
 80022e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80022e4:	2320      	movs	r3, #32
 80022e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80022ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80022ee:	2330      	movs	r3, #48	@ 0x30
 80022f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80024a0 <_vfiprintf_r+0x21c>
 80022f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80022f8:	f04f 0901 	mov.w	r9, #1
 80022fc:	4623      	mov	r3, r4
 80022fe:	469a      	mov	sl, r3
 8002300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002304:	b10a      	cbz	r2, 800230a <_vfiprintf_r+0x86>
 8002306:	2a25      	cmp	r2, #37	@ 0x25
 8002308:	d1f9      	bne.n	80022fe <_vfiprintf_r+0x7a>
 800230a:	ebba 0b04 	subs.w	fp, sl, r4
 800230e:	d00b      	beq.n	8002328 <_vfiprintf_r+0xa4>
 8002310:	465b      	mov	r3, fp
 8002312:	4622      	mov	r2, r4
 8002314:	4629      	mov	r1, r5
 8002316:	4630      	mov	r0, r6
 8002318:	f7ff ffa1 	bl	800225e <__sfputs_r>
 800231c:	3001      	adds	r0, #1
 800231e:	f000 80a7 	beq.w	8002470 <_vfiprintf_r+0x1ec>
 8002322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002324:	445a      	add	r2, fp
 8002326:	9209      	str	r2, [sp, #36]	@ 0x24
 8002328:	f89a 3000 	ldrb.w	r3, [sl]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 809f 	beq.w	8002470 <_vfiprintf_r+0x1ec>
 8002332:	2300      	movs	r3, #0
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800233c:	f10a 0a01 	add.w	sl, sl, #1
 8002340:	9304      	str	r3, [sp, #16]
 8002342:	9307      	str	r3, [sp, #28]
 8002344:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002348:	931a      	str	r3, [sp, #104]	@ 0x68
 800234a:	4654      	mov	r4, sl
 800234c:	2205      	movs	r2, #5
 800234e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002352:	4853      	ldr	r0, [pc, #332]	@ (80024a0 <_vfiprintf_r+0x21c>)
 8002354:	f7fd ff44 	bl	80001e0 <memchr>
 8002358:	9a04      	ldr	r2, [sp, #16]
 800235a:	b9d8      	cbnz	r0, 8002394 <_vfiprintf_r+0x110>
 800235c:	06d1      	lsls	r1, r2, #27
 800235e:	bf44      	itt	mi
 8002360:	2320      	movmi	r3, #32
 8002362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002366:	0713      	lsls	r3, r2, #28
 8002368:	bf44      	itt	mi
 800236a:	232b      	movmi	r3, #43	@ 0x2b
 800236c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002370:	f89a 3000 	ldrb.w	r3, [sl]
 8002374:	2b2a      	cmp	r3, #42	@ 0x2a
 8002376:	d015      	beq.n	80023a4 <_vfiprintf_r+0x120>
 8002378:	9a07      	ldr	r2, [sp, #28]
 800237a:	4654      	mov	r4, sl
 800237c:	2000      	movs	r0, #0
 800237e:	f04f 0c0a 	mov.w	ip, #10
 8002382:	4621      	mov	r1, r4
 8002384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002388:	3b30      	subs	r3, #48	@ 0x30
 800238a:	2b09      	cmp	r3, #9
 800238c:	d94b      	bls.n	8002426 <_vfiprintf_r+0x1a2>
 800238e:	b1b0      	cbz	r0, 80023be <_vfiprintf_r+0x13a>
 8002390:	9207      	str	r2, [sp, #28]
 8002392:	e014      	b.n	80023be <_vfiprintf_r+0x13a>
 8002394:	eba0 0308 	sub.w	r3, r0, r8
 8002398:	fa09 f303 	lsl.w	r3, r9, r3
 800239c:	4313      	orrs	r3, r2
 800239e:	9304      	str	r3, [sp, #16]
 80023a0:	46a2      	mov	sl, r4
 80023a2:	e7d2      	b.n	800234a <_vfiprintf_r+0xc6>
 80023a4:	9b03      	ldr	r3, [sp, #12]
 80023a6:	1d19      	adds	r1, r3, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	9103      	str	r1, [sp, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bfbb      	ittet	lt
 80023b0:	425b      	neglt	r3, r3
 80023b2:	f042 0202 	orrlt.w	r2, r2, #2
 80023b6:	9307      	strge	r3, [sp, #28]
 80023b8:	9307      	strlt	r3, [sp, #28]
 80023ba:	bfb8      	it	lt
 80023bc:	9204      	strlt	r2, [sp, #16]
 80023be:	7823      	ldrb	r3, [r4, #0]
 80023c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80023c2:	d10a      	bne.n	80023da <_vfiprintf_r+0x156>
 80023c4:	7863      	ldrb	r3, [r4, #1]
 80023c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80023c8:	d132      	bne.n	8002430 <_vfiprintf_r+0x1ac>
 80023ca:	9b03      	ldr	r3, [sp, #12]
 80023cc:	1d1a      	adds	r2, r3, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	9203      	str	r2, [sp, #12]
 80023d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80023d6:	3402      	adds	r4, #2
 80023d8:	9305      	str	r3, [sp, #20]
 80023da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80024b0 <_vfiprintf_r+0x22c>
 80023de:	7821      	ldrb	r1, [r4, #0]
 80023e0:	2203      	movs	r2, #3
 80023e2:	4650      	mov	r0, sl
 80023e4:	f7fd fefc 	bl	80001e0 <memchr>
 80023e8:	b138      	cbz	r0, 80023fa <_vfiprintf_r+0x176>
 80023ea:	9b04      	ldr	r3, [sp, #16]
 80023ec:	eba0 000a 	sub.w	r0, r0, sl
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	4082      	lsls	r2, r0
 80023f4:	4313      	orrs	r3, r2
 80023f6:	3401      	adds	r4, #1
 80023f8:	9304      	str	r3, [sp, #16]
 80023fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023fe:	4829      	ldr	r0, [pc, #164]	@ (80024a4 <_vfiprintf_r+0x220>)
 8002400:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002404:	2206      	movs	r2, #6
 8002406:	f7fd feeb 	bl	80001e0 <memchr>
 800240a:	2800      	cmp	r0, #0
 800240c:	d03f      	beq.n	800248e <_vfiprintf_r+0x20a>
 800240e:	4b26      	ldr	r3, [pc, #152]	@ (80024a8 <_vfiprintf_r+0x224>)
 8002410:	bb1b      	cbnz	r3, 800245a <_vfiprintf_r+0x1d6>
 8002412:	9b03      	ldr	r3, [sp, #12]
 8002414:	3307      	adds	r3, #7
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	3308      	adds	r3, #8
 800241c:	9303      	str	r3, [sp, #12]
 800241e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002420:	443b      	add	r3, r7
 8002422:	9309      	str	r3, [sp, #36]	@ 0x24
 8002424:	e76a      	b.n	80022fc <_vfiprintf_r+0x78>
 8002426:	fb0c 3202 	mla	r2, ip, r2, r3
 800242a:	460c      	mov	r4, r1
 800242c:	2001      	movs	r0, #1
 800242e:	e7a8      	b.n	8002382 <_vfiprintf_r+0xfe>
 8002430:	2300      	movs	r3, #0
 8002432:	3401      	adds	r4, #1
 8002434:	9305      	str	r3, [sp, #20]
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 0c0a 	mov.w	ip, #10
 800243c:	4620      	mov	r0, r4
 800243e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002442:	3a30      	subs	r2, #48	@ 0x30
 8002444:	2a09      	cmp	r2, #9
 8002446:	d903      	bls.n	8002450 <_vfiprintf_r+0x1cc>
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0c6      	beq.n	80023da <_vfiprintf_r+0x156>
 800244c:	9105      	str	r1, [sp, #20]
 800244e:	e7c4      	b.n	80023da <_vfiprintf_r+0x156>
 8002450:	fb0c 2101 	mla	r1, ip, r1, r2
 8002454:	4604      	mov	r4, r0
 8002456:	2301      	movs	r3, #1
 8002458:	e7f0      	b.n	800243c <_vfiprintf_r+0x1b8>
 800245a:	ab03      	add	r3, sp, #12
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	462a      	mov	r2, r5
 8002460:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <_vfiprintf_r+0x228>)
 8002462:	a904      	add	r1, sp, #16
 8002464:	4630      	mov	r0, r6
 8002466:	f3af 8000 	nop.w
 800246a:	4607      	mov	r7, r0
 800246c:	1c78      	adds	r0, r7, #1
 800246e:	d1d6      	bne.n	800241e <_vfiprintf_r+0x19a>
 8002470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002472:	07d9      	lsls	r1, r3, #31
 8002474:	d405      	bmi.n	8002482 <_vfiprintf_r+0x1fe>
 8002476:	89ab      	ldrh	r3, [r5, #12]
 8002478:	059a      	lsls	r2, r3, #22
 800247a:	d402      	bmi.n	8002482 <_vfiprintf_r+0x1fe>
 800247c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800247e:	f7ff fddd 	bl	800203c <__retarget_lock_release_recursive>
 8002482:	89ab      	ldrh	r3, [r5, #12]
 8002484:	065b      	lsls	r3, r3, #25
 8002486:	f53f af1f 	bmi.w	80022c8 <_vfiprintf_r+0x44>
 800248a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800248c:	e71e      	b.n	80022cc <_vfiprintf_r+0x48>
 800248e:	ab03      	add	r3, sp, #12
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	462a      	mov	r2, r5
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <_vfiprintf_r+0x228>)
 8002496:	a904      	add	r1, sp, #16
 8002498:	4630      	mov	r0, r6
 800249a:	f000 f879 	bl	8002590 <_printf_i>
 800249e:	e7e4      	b.n	800246a <_vfiprintf_r+0x1e6>
 80024a0:	08002d94 	.word	0x08002d94
 80024a4:	08002d9e 	.word	0x08002d9e
 80024a8:	00000000 	.word	0x00000000
 80024ac:	0800225f 	.word	0x0800225f
 80024b0:	08002d9a 	.word	0x08002d9a

080024b4 <_printf_common>:
 80024b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024b8:	4616      	mov	r6, r2
 80024ba:	4698      	mov	r8, r3
 80024bc:	688a      	ldr	r2, [r1, #8]
 80024be:	690b      	ldr	r3, [r1, #16]
 80024c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bfb8      	it	lt
 80024c8:	4613      	movlt	r3, r2
 80024ca:	6033      	str	r3, [r6, #0]
 80024cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80024d0:	4607      	mov	r7, r0
 80024d2:	460c      	mov	r4, r1
 80024d4:	b10a      	cbz	r2, 80024da <_printf_common+0x26>
 80024d6:	3301      	adds	r3, #1
 80024d8:	6033      	str	r3, [r6, #0]
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	0699      	lsls	r1, r3, #26
 80024de:	bf42      	ittt	mi
 80024e0:	6833      	ldrmi	r3, [r6, #0]
 80024e2:	3302      	addmi	r3, #2
 80024e4:	6033      	strmi	r3, [r6, #0]
 80024e6:	6825      	ldr	r5, [r4, #0]
 80024e8:	f015 0506 	ands.w	r5, r5, #6
 80024ec:	d106      	bne.n	80024fc <_printf_common+0x48>
 80024ee:	f104 0a19 	add.w	sl, r4, #25
 80024f2:	68e3      	ldr	r3, [r4, #12]
 80024f4:	6832      	ldr	r2, [r6, #0]
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	42ab      	cmp	r3, r5
 80024fa:	dc26      	bgt.n	800254a <_printf_common+0x96>
 80024fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002500:	6822      	ldr	r2, [r4, #0]
 8002502:	3b00      	subs	r3, #0
 8002504:	bf18      	it	ne
 8002506:	2301      	movne	r3, #1
 8002508:	0692      	lsls	r2, r2, #26
 800250a:	d42b      	bmi.n	8002564 <_printf_common+0xb0>
 800250c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002510:	4641      	mov	r1, r8
 8002512:	4638      	mov	r0, r7
 8002514:	47c8      	blx	r9
 8002516:	3001      	adds	r0, #1
 8002518:	d01e      	beq.n	8002558 <_printf_common+0xa4>
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	6922      	ldr	r2, [r4, #16]
 800251e:	f003 0306 	and.w	r3, r3, #6
 8002522:	2b04      	cmp	r3, #4
 8002524:	bf02      	ittt	eq
 8002526:	68e5      	ldreq	r5, [r4, #12]
 8002528:	6833      	ldreq	r3, [r6, #0]
 800252a:	1aed      	subeq	r5, r5, r3
 800252c:	68a3      	ldr	r3, [r4, #8]
 800252e:	bf0c      	ite	eq
 8002530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002534:	2500      	movne	r5, #0
 8002536:	4293      	cmp	r3, r2
 8002538:	bfc4      	itt	gt
 800253a:	1a9b      	subgt	r3, r3, r2
 800253c:	18ed      	addgt	r5, r5, r3
 800253e:	2600      	movs	r6, #0
 8002540:	341a      	adds	r4, #26
 8002542:	42b5      	cmp	r5, r6
 8002544:	d11a      	bne.n	800257c <_printf_common+0xc8>
 8002546:	2000      	movs	r0, #0
 8002548:	e008      	b.n	800255c <_printf_common+0xa8>
 800254a:	2301      	movs	r3, #1
 800254c:	4652      	mov	r2, sl
 800254e:	4641      	mov	r1, r8
 8002550:	4638      	mov	r0, r7
 8002552:	47c8      	blx	r9
 8002554:	3001      	adds	r0, #1
 8002556:	d103      	bne.n	8002560 <_printf_common+0xac>
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002560:	3501      	adds	r5, #1
 8002562:	e7c6      	b.n	80024f2 <_printf_common+0x3e>
 8002564:	18e1      	adds	r1, r4, r3
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	2030      	movs	r0, #48	@ 0x30
 800256a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800256e:	4422      	add	r2, r4
 8002570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002578:	3302      	adds	r3, #2
 800257a:	e7c7      	b.n	800250c <_printf_common+0x58>
 800257c:	2301      	movs	r3, #1
 800257e:	4622      	mov	r2, r4
 8002580:	4641      	mov	r1, r8
 8002582:	4638      	mov	r0, r7
 8002584:	47c8      	blx	r9
 8002586:	3001      	adds	r0, #1
 8002588:	d0e6      	beq.n	8002558 <_printf_common+0xa4>
 800258a:	3601      	adds	r6, #1
 800258c:	e7d9      	b.n	8002542 <_printf_common+0x8e>
	...

08002590 <_printf_i>:
 8002590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002594:	7e0f      	ldrb	r7, [r1, #24]
 8002596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002598:	2f78      	cmp	r7, #120	@ 0x78
 800259a:	4691      	mov	r9, r2
 800259c:	4680      	mov	r8, r0
 800259e:	460c      	mov	r4, r1
 80025a0:	469a      	mov	sl, r3
 80025a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80025a6:	d807      	bhi.n	80025b8 <_printf_i+0x28>
 80025a8:	2f62      	cmp	r7, #98	@ 0x62
 80025aa:	d80a      	bhi.n	80025c2 <_printf_i+0x32>
 80025ac:	2f00      	cmp	r7, #0
 80025ae:	f000 80d2 	beq.w	8002756 <_printf_i+0x1c6>
 80025b2:	2f58      	cmp	r7, #88	@ 0x58
 80025b4:	f000 80b9 	beq.w	800272a <_printf_i+0x19a>
 80025b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80025bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80025c0:	e03a      	b.n	8002638 <_printf_i+0xa8>
 80025c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80025c6:	2b15      	cmp	r3, #21
 80025c8:	d8f6      	bhi.n	80025b8 <_printf_i+0x28>
 80025ca:	a101      	add	r1, pc, #4	@ (adr r1, 80025d0 <_printf_i+0x40>)
 80025cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025d0:	08002629 	.word	0x08002629
 80025d4:	0800263d 	.word	0x0800263d
 80025d8:	080025b9 	.word	0x080025b9
 80025dc:	080025b9 	.word	0x080025b9
 80025e0:	080025b9 	.word	0x080025b9
 80025e4:	080025b9 	.word	0x080025b9
 80025e8:	0800263d 	.word	0x0800263d
 80025ec:	080025b9 	.word	0x080025b9
 80025f0:	080025b9 	.word	0x080025b9
 80025f4:	080025b9 	.word	0x080025b9
 80025f8:	080025b9 	.word	0x080025b9
 80025fc:	0800273d 	.word	0x0800273d
 8002600:	08002667 	.word	0x08002667
 8002604:	080026f7 	.word	0x080026f7
 8002608:	080025b9 	.word	0x080025b9
 800260c:	080025b9 	.word	0x080025b9
 8002610:	0800275f 	.word	0x0800275f
 8002614:	080025b9 	.word	0x080025b9
 8002618:	08002667 	.word	0x08002667
 800261c:	080025b9 	.word	0x080025b9
 8002620:	080025b9 	.word	0x080025b9
 8002624:	080026ff 	.word	0x080026ff
 8002628:	6833      	ldr	r3, [r6, #0]
 800262a:	1d1a      	adds	r2, r3, #4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6032      	str	r2, [r6, #0]
 8002630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002638:	2301      	movs	r3, #1
 800263a:	e09d      	b.n	8002778 <_printf_i+0x1e8>
 800263c:	6833      	ldr	r3, [r6, #0]
 800263e:	6820      	ldr	r0, [r4, #0]
 8002640:	1d19      	adds	r1, r3, #4
 8002642:	6031      	str	r1, [r6, #0]
 8002644:	0606      	lsls	r6, r0, #24
 8002646:	d501      	bpl.n	800264c <_printf_i+0xbc>
 8002648:	681d      	ldr	r5, [r3, #0]
 800264a:	e003      	b.n	8002654 <_printf_i+0xc4>
 800264c:	0645      	lsls	r5, r0, #25
 800264e:	d5fb      	bpl.n	8002648 <_printf_i+0xb8>
 8002650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002654:	2d00      	cmp	r5, #0
 8002656:	da03      	bge.n	8002660 <_printf_i+0xd0>
 8002658:	232d      	movs	r3, #45	@ 0x2d
 800265a:	426d      	negs	r5, r5
 800265c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002660:	4859      	ldr	r0, [pc, #356]	@ (80027c8 <_printf_i+0x238>)
 8002662:	230a      	movs	r3, #10
 8002664:	e011      	b.n	800268a <_printf_i+0xfa>
 8002666:	6821      	ldr	r1, [r4, #0]
 8002668:	6833      	ldr	r3, [r6, #0]
 800266a:	0608      	lsls	r0, r1, #24
 800266c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002670:	d402      	bmi.n	8002678 <_printf_i+0xe8>
 8002672:	0649      	lsls	r1, r1, #25
 8002674:	bf48      	it	mi
 8002676:	b2ad      	uxthmi	r5, r5
 8002678:	2f6f      	cmp	r7, #111	@ 0x6f
 800267a:	4853      	ldr	r0, [pc, #332]	@ (80027c8 <_printf_i+0x238>)
 800267c:	6033      	str	r3, [r6, #0]
 800267e:	bf14      	ite	ne
 8002680:	230a      	movne	r3, #10
 8002682:	2308      	moveq	r3, #8
 8002684:	2100      	movs	r1, #0
 8002686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800268a:	6866      	ldr	r6, [r4, #4]
 800268c:	60a6      	str	r6, [r4, #8]
 800268e:	2e00      	cmp	r6, #0
 8002690:	bfa2      	ittt	ge
 8002692:	6821      	ldrge	r1, [r4, #0]
 8002694:	f021 0104 	bicge.w	r1, r1, #4
 8002698:	6021      	strge	r1, [r4, #0]
 800269a:	b90d      	cbnz	r5, 80026a0 <_printf_i+0x110>
 800269c:	2e00      	cmp	r6, #0
 800269e:	d04b      	beq.n	8002738 <_printf_i+0x1a8>
 80026a0:	4616      	mov	r6, r2
 80026a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80026a6:	fb03 5711 	mls	r7, r3, r1, r5
 80026aa:	5dc7      	ldrb	r7, [r0, r7]
 80026ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026b0:	462f      	mov	r7, r5
 80026b2:	42bb      	cmp	r3, r7
 80026b4:	460d      	mov	r5, r1
 80026b6:	d9f4      	bls.n	80026a2 <_printf_i+0x112>
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d10b      	bne.n	80026d4 <_printf_i+0x144>
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	07df      	lsls	r7, r3, #31
 80026c0:	d508      	bpl.n	80026d4 <_printf_i+0x144>
 80026c2:	6923      	ldr	r3, [r4, #16]
 80026c4:	6861      	ldr	r1, [r4, #4]
 80026c6:	4299      	cmp	r1, r3
 80026c8:	bfde      	ittt	le
 80026ca:	2330      	movle	r3, #48	@ 0x30
 80026cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026d4:	1b92      	subs	r2, r2, r6
 80026d6:	6122      	str	r2, [r4, #16]
 80026d8:	f8cd a000 	str.w	sl, [sp]
 80026dc:	464b      	mov	r3, r9
 80026de:	aa03      	add	r2, sp, #12
 80026e0:	4621      	mov	r1, r4
 80026e2:	4640      	mov	r0, r8
 80026e4:	f7ff fee6 	bl	80024b4 <_printf_common>
 80026e8:	3001      	adds	r0, #1
 80026ea:	d14a      	bne.n	8002782 <_printf_i+0x1f2>
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	b004      	add	sp, #16
 80026f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	f043 0320 	orr.w	r3, r3, #32
 80026fc:	6023      	str	r3, [r4, #0]
 80026fe:	4833      	ldr	r0, [pc, #204]	@ (80027cc <_printf_i+0x23c>)
 8002700:	2778      	movs	r7, #120	@ 0x78
 8002702:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	6831      	ldr	r1, [r6, #0]
 800270a:	061f      	lsls	r7, r3, #24
 800270c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002710:	d402      	bmi.n	8002718 <_printf_i+0x188>
 8002712:	065f      	lsls	r7, r3, #25
 8002714:	bf48      	it	mi
 8002716:	b2ad      	uxthmi	r5, r5
 8002718:	6031      	str	r1, [r6, #0]
 800271a:	07d9      	lsls	r1, r3, #31
 800271c:	bf44      	itt	mi
 800271e:	f043 0320 	orrmi.w	r3, r3, #32
 8002722:	6023      	strmi	r3, [r4, #0]
 8002724:	b11d      	cbz	r5, 800272e <_printf_i+0x19e>
 8002726:	2310      	movs	r3, #16
 8002728:	e7ac      	b.n	8002684 <_printf_i+0xf4>
 800272a:	4827      	ldr	r0, [pc, #156]	@ (80027c8 <_printf_i+0x238>)
 800272c:	e7e9      	b.n	8002702 <_printf_i+0x172>
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	f023 0320 	bic.w	r3, r3, #32
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	e7f6      	b.n	8002726 <_printf_i+0x196>
 8002738:	4616      	mov	r6, r2
 800273a:	e7bd      	b.n	80026b8 <_printf_i+0x128>
 800273c:	6833      	ldr	r3, [r6, #0]
 800273e:	6825      	ldr	r5, [r4, #0]
 8002740:	6961      	ldr	r1, [r4, #20]
 8002742:	1d18      	adds	r0, r3, #4
 8002744:	6030      	str	r0, [r6, #0]
 8002746:	062e      	lsls	r6, r5, #24
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	d501      	bpl.n	8002750 <_printf_i+0x1c0>
 800274c:	6019      	str	r1, [r3, #0]
 800274e:	e002      	b.n	8002756 <_printf_i+0x1c6>
 8002750:	0668      	lsls	r0, r5, #25
 8002752:	d5fb      	bpl.n	800274c <_printf_i+0x1bc>
 8002754:	8019      	strh	r1, [r3, #0]
 8002756:	2300      	movs	r3, #0
 8002758:	6123      	str	r3, [r4, #16]
 800275a:	4616      	mov	r6, r2
 800275c:	e7bc      	b.n	80026d8 <_printf_i+0x148>
 800275e:	6833      	ldr	r3, [r6, #0]
 8002760:	1d1a      	adds	r2, r3, #4
 8002762:	6032      	str	r2, [r6, #0]
 8002764:	681e      	ldr	r6, [r3, #0]
 8002766:	6862      	ldr	r2, [r4, #4]
 8002768:	2100      	movs	r1, #0
 800276a:	4630      	mov	r0, r6
 800276c:	f7fd fd38 	bl	80001e0 <memchr>
 8002770:	b108      	cbz	r0, 8002776 <_printf_i+0x1e6>
 8002772:	1b80      	subs	r0, r0, r6
 8002774:	6060      	str	r0, [r4, #4]
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	6123      	str	r3, [r4, #16]
 800277a:	2300      	movs	r3, #0
 800277c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002780:	e7aa      	b.n	80026d8 <_printf_i+0x148>
 8002782:	6923      	ldr	r3, [r4, #16]
 8002784:	4632      	mov	r2, r6
 8002786:	4649      	mov	r1, r9
 8002788:	4640      	mov	r0, r8
 800278a:	47d0      	blx	sl
 800278c:	3001      	adds	r0, #1
 800278e:	d0ad      	beq.n	80026ec <_printf_i+0x15c>
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	079b      	lsls	r3, r3, #30
 8002794:	d413      	bmi.n	80027be <_printf_i+0x22e>
 8002796:	68e0      	ldr	r0, [r4, #12]
 8002798:	9b03      	ldr	r3, [sp, #12]
 800279a:	4298      	cmp	r0, r3
 800279c:	bfb8      	it	lt
 800279e:	4618      	movlt	r0, r3
 80027a0:	e7a6      	b.n	80026f0 <_printf_i+0x160>
 80027a2:	2301      	movs	r3, #1
 80027a4:	4632      	mov	r2, r6
 80027a6:	4649      	mov	r1, r9
 80027a8:	4640      	mov	r0, r8
 80027aa:	47d0      	blx	sl
 80027ac:	3001      	adds	r0, #1
 80027ae:	d09d      	beq.n	80026ec <_printf_i+0x15c>
 80027b0:	3501      	adds	r5, #1
 80027b2:	68e3      	ldr	r3, [r4, #12]
 80027b4:	9903      	ldr	r1, [sp, #12]
 80027b6:	1a5b      	subs	r3, r3, r1
 80027b8:	42ab      	cmp	r3, r5
 80027ba:	dcf2      	bgt.n	80027a2 <_printf_i+0x212>
 80027bc:	e7eb      	b.n	8002796 <_printf_i+0x206>
 80027be:	2500      	movs	r5, #0
 80027c0:	f104 0619 	add.w	r6, r4, #25
 80027c4:	e7f5      	b.n	80027b2 <_printf_i+0x222>
 80027c6:	bf00      	nop
 80027c8:	08002da5 	.word	0x08002da5
 80027cc:	08002db6 	.word	0x08002db6

080027d0 <__sflush_r>:
 80027d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80027d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d8:	0716      	lsls	r6, r2, #28
 80027da:	4605      	mov	r5, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	d454      	bmi.n	800288a <__sflush_r+0xba>
 80027e0:	684b      	ldr	r3, [r1, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	dc02      	bgt.n	80027ec <__sflush_r+0x1c>
 80027e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	dd48      	ble.n	800287e <__sflush_r+0xae>
 80027ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80027ee:	2e00      	cmp	r6, #0
 80027f0:	d045      	beq.n	800287e <__sflush_r+0xae>
 80027f2:	2300      	movs	r3, #0
 80027f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80027f8:	682f      	ldr	r7, [r5, #0]
 80027fa:	6a21      	ldr	r1, [r4, #32]
 80027fc:	602b      	str	r3, [r5, #0]
 80027fe:	d030      	beq.n	8002862 <__sflush_r+0x92>
 8002800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002802:	89a3      	ldrh	r3, [r4, #12]
 8002804:	0759      	lsls	r1, r3, #29
 8002806:	d505      	bpl.n	8002814 <__sflush_r+0x44>
 8002808:	6863      	ldr	r3, [r4, #4]
 800280a:	1ad2      	subs	r2, r2, r3
 800280c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800280e:	b10b      	cbz	r3, 8002814 <__sflush_r+0x44>
 8002810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002812:	1ad2      	subs	r2, r2, r3
 8002814:	2300      	movs	r3, #0
 8002816:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002818:	6a21      	ldr	r1, [r4, #32]
 800281a:	4628      	mov	r0, r5
 800281c:	47b0      	blx	r6
 800281e:	1c43      	adds	r3, r0, #1
 8002820:	89a3      	ldrh	r3, [r4, #12]
 8002822:	d106      	bne.n	8002832 <__sflush_r+0x62>
 8002824:	6829      	ldr	r1, [r5, #0]
 8002826:	291d      	cmp	r1, #29
 8002828:	d82b      	bhi.n	8002882 <__sflush_r+0xb2>
 800282a:	4a2a      	ldr	r2, [pc, #168]	@ (80028d4 <__sflush_r+0x104>)
 800282c:	410a      	asrs	r2, r1
 800282e:	07d6      	lsls	r6, r2, #31
 8002830:	d427      	bmi.n	8002882 <__sflush_r+0xb2>
 8002832:	2200      	movs	r2, #0
 8002834:	6062      	str	r2, [r4, #4]
 8002836:	04d9      	lsls	r1, r3, #19
 8002838:	6922      	ldr	r2, [r4, #16]
 800283a:	6022      	str	r2, [r4, #0]
 800283c:	d504      	bpl.n	8002848 <__sflush_r+0x78>
 800283e:	1c42      	adds	r2, r0, #1
 8002840:	d101      	bne.n	8002846 <__sflush_r+0x76>
 8002842:	682b      	ldr	r3, [r5, #0]
 8002844:	b903      	cbnz	r3, 8002848 <__sflush_r+0x78>
 8002846:	6560      	str	r0, [r4, #84]	@ 0x54
 8002848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800284a:	602f      	str	r7, [r5, #0]
 800284c:	b1b9      	cbz	r1, 800287e <__sflush_r+0xae>
 800284e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002852:	4299      	cmp	r1, r3
 8002854:	d002      	beq.n	800285c <__sflush_r+0x8c>
 8002856:	4628      	mov	r0, r5
 8002858:	f7ff fbf2 	bl	8002040 <_free_r>
 800285c:	2300      	movs	r3, #0
 800285e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002860:	e00d      	b.n	800287e <__sflush_r+0xae>
 8002862:	2301      	movs	r3, #1
 8002864:	4628      	mov	r0, r5
 8002866:	47b0      	blx	r6
 8002868:	4602      	mov	r2, r0
 800286a:	1c50      	adds	r0, r2, #1
 800286c:	d1c9      	bne.n	8002802 <__sflush_r+0x32>
 800286e:	682b      	ldr	r3, [r5, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0c6      	beq.n	8002802 <__sflush_r+0x32>
 8002874:	2b1d      	cmp	r3, #29
 8002876:	d001      	beq.n	800287c <__sflush_r+0xac>
 8002878:	2b16      	cmp	r3, #22
 800287a:	d11e      	bne.n	80028ba <__sflush_r+0xea>
 800287c:	602f      	str	r7, [r5, #0]
 800287e:	2000      	movs	r0, #0
 8002880:	e022      	b.n	80028c8 <__sflush_r+0xf8>
 8002882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002886:	b21b      	sxth	r3, r3
 8002888:	e01b      	b.n	80028c2 <__sflush_r+0xf2>
 800288a:	690f      	ldr	r7, [r1, #16]
 800288c:	2f00      	cmp	r7, #0
 800288e:	d0f6      	beq.n	800287e <__sflush_r+0xae>
 8002890:	0793      	lsls	r3, r2, #30
 8002892:	680e      	ldr	r6, [r1, #0]
 8002894:	bf08      	it	eq
 8002896:	694b      	ldreq	r3, [r1, #20]
 8002898:	600f      	str	r7, [r1, #0]
 800289a:	bf18      	it	ne
 800289c:	2300      	movne	r3, #0
 800289e:	eba6 0807 	sub.w	r8, r6, r7
 80028a2:	608b      	str	r3, [r1, #8]
 80028a4:	f1b8 0f00 	cmp.w	r8, #0
 80028a8:	dde9      	ble.n	800287e <__sflush_r+0xae>
 80028aa:	6a21      	ldr	r1, [r4, #32]
 80028ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80028ae:	4643      	mov	r3, r8
 80028b0:	463a      	mov	r2, r7
 80028b2:	4628      	mov	r0, r5
 80028b4:	47b0      	blx	r6
 80028b6:	2800      	cmp	r0, #0
 80028b8:	dc08      	bgt.n	80028cc <__sflush_r+0xfc>
 80028ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028c2:	81a3      	strh	r3, [r4, #12]
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028cc:	4407      	add	r7, r0
 80028ce:	eba8 0800 	sub.w	r8, r8, r0
 80028d2:	e7e7      	b.n	80028a4 <__sflush_r+0xd4>
 80028d4:	dfbffffe 	.word	0xdfbffffe

080028d8 <_fflush_r>:
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	690b      	ldr	r3, [r1, #16]
 80028dc:	4605      	mov	r5, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	b913      	cbnz	r3, 80028e8 <_fflush_r+0x10>
 80028e2:	2500      	movs	r5, #0
 80028e4:	4628      	mov	r0, r5
 80028e6:	bd38      	pop	{r3, r4, r5, pc}
 80028e8:	b118      	cbz	r0, 80028f2 <_fflush_r+0x1a>
 80028ea:	6a03      	ldr	r3, [r0, #32]
 80028ec:	b90b      	cbnz	r3, 80028f2 <_fflush_r+0x1a>
 80028ee:	f7ff fa97 	bl	8001e20 <__sinit>
 80028f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f3      	beq.n	80028e2 <_fflush_r+0xa>
 80028fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80028fc:	07d0      	lsls	r0, r2, #31
 80028fe:	d404      	bmi.n	800290a <_fflush_r+0x32>
 8002900:	0599      	lsls	r1, r3, #22
 8002902:	d402      	bmi.n	800290a <_fflush_r+0x32>
 8002904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002906:	f7ff fb98 	bl	800203a <__retarget_lock_acquire_recursive>
 800290a:	4628      	mov	r0, r5
 800290c:	4621      	mov	r1, r4
 800290e:	f7ff ff5f 	bl	80027d0 <__sflush_r>
 8002912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002914:	07da      	lsls	r2, r3, #31
 8002916:	4605      	mov	r5, r0
 8002918:	d4e4      	bmi.n	80028e4 <_fflush_r+0xc>
 800291a:	89a3      	ldrh	r3, [r4, #12]
 800291c:	059b      	lsls	r3, r3, #22
 800291e:	d4e1      	bmi.n	80028e4 <_fflush_r+0xc>
 8002920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002922:	f7ff fb8b 	bl	800203c <__retarget_lock_release_recursive>
 8002926:	e7dd      	b.n	80028e4 <_fflush_r+0xc>

08002928 <_putc_r>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	460d      	mov	r5, r1
 800292c:	4614      	mov	r4, r2
 800292e:	4606      	mov	r6, r0
 8002930:	b118      	cbz	r0, 800293a <_putc_r+0x12>
 8002932:	6a03      	ldr	r3, [r0, #32]
 8002934:	b90b      	cbnz	r3, 800293a <_putc_r+0x12>
 8002936:	f7ff fa73 	bl	8001e20 <__sinit>
 800293a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800293c:	07d8      	lsls	r0, r3, #31
 800293e:	d405      	bmi.n	800294c <_putc_r+0x24>
 8002940:	89a3      	ldrh	r3, [r4, #12]
 8002942:	0599      	lsls	r1, r3, #22
 8002944:	d402      	bmi.n	800294c <_putc_r+0x24>
 8002946:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002948:	f7ff fb77 	bl	800203a <__retarget_lock_acquire_recursive>
 800294c:	68a3      	ldr	r3, [r4, #8]
 800294e:	3b01      	subs	r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	60a3      	str	r3, [r4, #8]
 8002954:	da05      	bge.n	8002962 <_putc_r+0x3a>
 8002956:	69a2      	ldr	r2, [r4, #24]
 8002958:	4293      	cmp	r3, r2
 800295a:	db12      	blt.n	8002982 <_putc_r+0x5a>
 800295c:	b2eb      	uxtb	r3, r5
 800295e:	2b0a      	cmp	r3, #10
 8002960:	d00f      	beq.n	8002982 <_putc_r+0x5a>
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	6022      	str	r2, [r4, #0]
 8002968:	701d      	strb	r5, [r3, #0]
 800296a:	b2ed      	uxtb	r5, r5
 800296c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800296e:	07da      	lsls	r2, r3, #31
 8002970:	d405      	bmi.n	800297e <_putc_r+0x56>
 8002972:	89a3      	ldrh	r3, [r4, #12]
 8002974:	059b      	lsls	r3, r3, #22
 8002976:	d402      	bmi.n	800297e <_putc_r+0x56>
 8002978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800297a:	f7ff fb5f 	bl	800203c <__retarget_lock_release_recursive>
 800297e:	4628      	mov	r0, r5
 8002980:	bd70      	pop	{r4, r5, r6, pc}
 8002982:	4629      	mov	r1, r5
 8002984:	4622      	mov	r2, r4
 8002986:	4630      	mov	r0, r6
 8002988:	f000 f802 	bl	8002990 <__swbuf_r>
 800298c:	4605      	mov	r5, r0
 800298e:	e7ed      	b.n	800296c <_putc_r+0x44>

08002990 <__swbuf_r>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	460e      	mov	r6, r1
 8002994:	4614      	mov	r4, r2
 8002996:	4605      	mov	r5, r0
 8002998:	b118      	cbz	r0, 80029a2 <__swbuf_r+0x12>
 800299a:	6a03      	ldr	r3, [r0, #32]
 800299c:	b90b      	cbnz	r3, 80029a2 <__swbuf_r+0x12>
 800299e:	f7ff fa3f 	bl	8001e20 <__sinit>
 80029a2:	69a3      	ldr	r3, [r4, #24]
 80029a4:	60a3      	str	r3, [r4, #8]
 80029a6:	89a3      	ldrh	r3, [r4, #12]
 80029a8:	071a      	lsls	r2, r3, #28
 80029aa:	d501      	bpl.n	80029b0 <__swbuf_r+0x20>
 80029ac:	6923      	ldr	r3, [r4, #16]
 80029ae:	b943      	cbnz	r3, 80029c2 <__swbuf_r+0x32>
 80029b0:	4621      	mov	r1, r4
 80029b2:	4628      	mov	r0, r5
 80029b4:	f000 f82a 	bl	8002a0c <__swsetup_r>
 80029b8:	b118      	cbz	r0, 80029c2 <__swbuf_r+0x32>
 80029ba:	f04f 37ff 	mov.w	r7, #4294967295
 80029be:	4638      	mov	r0, r7
 80029c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	6922      	ldr	r2, [r4, #16]
 80029c6:	1a98      	subs	r0, r3, r2
 80029c8:	6963      	ldr	r3, [r4, #20]
 80029ca:	b2f6      	uxtb	r6, r6
 80029cc:	4283      	cmp	r3, r0
 80029ce:	4637      	mov	r7, r6
 80029d0:	dc05      	bgt.n	80029de <__swbuf_r+0x4e>
 80029d2:	4621      	mov	r1, r4
 80029d4:	4628      	mov	r0, r5
 80029d6:	f7ff ff7f 	bl	80028d8 <_fflush_r>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d1ed      	bne.n	80029ba <__swbuf_r+0x2a>
 80029de:	68a3      	ldr	r3, [r4, #8]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	60a3      	str	r3, [r4, #8]
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	6022      	str	r2, [r4, #0]
 80029ea:	701e      	strb	r6, [r3, #0]
 80029ec:	6962      	ldr	r2, [r4, #20]
 80029ee:	1c43      	adds	r3, r0, #1
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d004      	beq.n	80029fe <__swbuf_r+0x6e>
 80029f4:	89a3      	ldrh	r3, [r4, #12]
 80029f6:	07db      	lsls	r3, r3, #31
 80029f8:	d5e1      	bpl.n	80029be <__swbuf_r+0x2e>
 80029fa:	2e0a      	cmp	r6, #10
 80029fc:	d1df      	bne.n	80029be <__swbuf_r+0x2e>
 80029fe:	4621      	mov	r1, r4
 8002a00:	4628      	mov	r0, r5
 8002a02:	f7ff ff69 	bl	80028d8 <_fflush_r>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d0d9      	beq.n	80029be <__swbuf_r+0x2e>
 8002a0a:	e7d6      	b.n	80029ba <__swbuf_r+0x2a>

08002a0c <__swsetup_r>:
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	4b29      	ldr	r3, [pc, #164]	@ (8002ab4 <__swsetup_r+0xa8>)
 8002a10:	4605      	mov	r5, r0
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	460c      	mov	r4, r1
 8002a16:	b118      	cbz	r0, 8002a20 <__swsetup_r+0x14>
 8002a18:	6a03      	ldr	r3, [r0, #32]
 8002a1a:	b90b      	cbnz	r3, 8002a20 <__swsetup_r+0x14>
 8002a1c:	f7ff fa00 	bl	8001e20 <__sinit>
 8002a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a24:	0719      	lsls	r1, r3, #28
 8002a26:	d422      	bmi.n	8002a6e <__swsetup_r+0x62>
 8002a28:	06da      	lsls	r2, r3, #27
 8002a2a:	d407      	bmi.n	8002a3c <__swsetup_r+0x30>
 8002a2c:	2209      	movs	r2, #9
 8002a2e:	602a      	str	r2, [r5, #0]
 8002a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a34:	81a3      	strh	r3, [r4, #12]
 8002a36:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3a:	e033      	b.n	8002aa4 <__swsetup_r+0x98>
 8002a3c:	0758      	lsls	r0, r3, #29
 8002a3e:	d512      	bpl.n	8002a66 <__swsetup_r+0x5a>
 8002a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a42:	b141      	cbz	r1, 8002a56 <__swsetup_r+0x4a>
 8002a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a48:	4299      	cmp	r1, r3
 8002a4a:	d002      	beq.n	8002a52 <__swsetup_r+0x46>
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	f7ff faf7 	bl	8002040 <_free_r>
 8002a52:	2300      	movs	r3, #0
 8002a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a56:	89a3      	ldrh	r3, [r4, #12]
 8002a58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002a5c:	81a3      	strh	r3, [r4, #12]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	6063      	str	r3, [r4, #4]
 8002a62:	6923      	ldr	r3, [r4, #16]
 8002a64:	6023      	str	r3, [r4, #0]
 8002a66:	89a3      	ldrh	r3, [r4, #12]
 8002a68:	f043 0308 	orr.w	r3, r3, #8
 8002a6c:	81a3      	strh	r3, [r4, #12]
 8002a6e:	6923      	ldr	r3, [r4, #16]
 8002a70:	b94b      	cbnz	r3, 8002a86 <__swsetup_r+0x7a>
 8002a72:	89a3      	ldrh	r3, [r4, #12]
 8002a74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a7c:	d003      	beq.n	8002a86 <__swsetup_r+0x7a>
 8002a7e:	4621      	mov	r1, r4
 8002a80:	4628      	mov	r0, r5
 8002a82:	f000 f84f 	bl	8002b24 <__smakebuf_r>
 8002a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a8a:	f013 0201 	ands.w	r2, r3, #1
 8002a8e:	d00a      	beq.n	8002aa6 <__swsetup_r+0x9a>
 8002a90:	2200      	movs	r2, #0
 8002a92:	60a2      	str	r2, [r4, #8]
 8002a94:	6962      	ldr	r2, [r4, #20]
 8002a96:	4252      	negs	r2, r2
 8002a98:	61a2      	str	r2, [r4, #24]
 8002a9a:	6922      	ldr	r2, [r4, #16]
 8002a9c:	b942      	cbnz	r2, 8002ab0 <__swsetup_r+0xa4>
 8002a9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002aa2:	d1c5      	bne.n	8002a30 <__swsetup_r+0x24>
 8002aa4:	bd38      	pop	{r3, r4, r5, pc}
 8002aa6:	0799      	lsls	r1, r3, #30
 8002aa8:	bf58      	it	pl
 8002aaa:	6962      	ldrpl	r2, [r4, #20]
 8002aac:	60a2      	str	r2, [r4, #8]
 8002aae:	e7f4      	b.n	8002a9a <__swsetup_r+0x8e>
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	e7f7      	b.n	8002aa4 <__swsetup_r+0x98>
 8002ab4:	20000018 	.word	0x20000018

08002ab8 <_sbrk_r>:
 8002ab8:	b538      	push	{r3, r4, r5, lr}
 8002aba:	4d06      	ldr	r5, [pc, #24]	@ (8002ad4 <_sbrk_r+0x1c>)
 8002abc:	2300      	movs	r3, #0
 8002abe:	4604      	mov	r4, r0
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	602b      	str	r3, [r5, #0]
 8002ac4:	f7fe fad8 	bl	8001078 <_sbrk>
 8002ac8:	1c43      	adds	r3, r0, #1
 8002aca:	d102      	bne.n	8002ad2 <_sbrk_r+0x1a>
 8002acc:	682b      	ldr	r3, [r5, #0]
 8002ace:	b103      	cbz	r3, 8002ad2 <_sbrk_r+0x1a>
 8002ad0:	6023      	str	r3, [r4, #0]
 8002ad2:	bd38      	pop	{r3, r4, r5, pc}
 8002ad4:	200001d4 	.word	0x200001d4

08002ad8 <__swhatbuf_r>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	460c      	mov	r4, r1
 8002adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	b096      	sub	sp, #88	@ 0x58
 8002ae4:	4615      	mov	r5, r2
 8002ae6:	461e      	mov	r6, r3
 8002ae8:	da0d      	bge.n	8002b06 <__swhatbuf_r+0x2e>
 8002aea:	89a3      	ldrh	r3, [r4, #12]
 8002aec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002af0:	f04f 0100 	mov.w	r1, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2340      	movne	r3, #64	@ 0x40
 8002af8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002afc:	2000      	movs	r0, #0
 8002afe:	6031      	str	r1, [r6, #0]
 8002b00:	602b      	str	r3, [r5, #0]
 8002b02:	b016      	add	sp, #88	@ 0x58
 8002b04:	bd70      	pop	{r4, r5, r6, pc}
 8002b06:	466a      	mov	r2, sp
 8002b08:	f000 f848 	bl	8002b9c <_fstat_r>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	dbec      	blt.n	8002aea <__swhatbuf_r+0x12>
 8002b10:	9901      	ldr	r1, [sp, #4]
 8002b12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002b16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002b1a:	4259      	negs	r1, r3
 8002b1c:	4159      	adcs	r1, r3
 8002b1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b22:	e7eb      	b.n	8002afc <__swhatbuf_r+0x24>

08002b24 <__smakebuf_r>:
 8002b24:	898b      	ldrh	r3, [r1, #12]
 8002b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b28:	079d      	lsls	r5, r3, #30
 8002b2a:	4606      	mov	r6, r0
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	d507      	bpl.n	8002b40 <__smakebuf_r+0x1c>
 8002b30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002b34:	6023      	str	r3, [r4, #0]
 8002b36:	6123      	str	r3, [r4, #16]
 8002b38:	2301      	movs	r3, #1
 8002b3a:	6163      	str	r3, [r4, #20]
 8002b3c:	b003      	add	sp, #12
 8002b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b40:	ab01      	add	r3, sp, #4
 8002b42:	466a      	mov	r2, sp
 8002b44:	f7ff ffc8 	bl	8002ad8 <__swhatbuf_r>
 8002b48:	9f00      	ldr	r7, [sp, #0]
 8002b4a:	4605      	mov	r5, r0
 8002b4c:	4639      	mov	r1, r7
 8002b4e:	4630      	mov	r0, r6
 8002b50:	f7ff fae2 	bl	8002118 <_malloc_r>
 8002b54:	b948      	cbnz	r0, 8002b6a <__smakebuf_r+0x46>
 8002b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b5a:	059a      	lsls	r2, r3, #22
 8002b5c:	d4ee      	bmi.n	8002b3c <__smakebuf_r+0x18>
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	f043 0302 	orr.w	r3, r3, #2
 8002b66:	81a3      	strh	r3, [r4, #12]
 8002b68:	e7e2      	b.n	8002b30 <__smakebuf_r+0xc>
 8002b6a:	89a3      	ldrh	r3, [r4, #12]
 8002b6c:	6020      	str	r0, [r4, #0]
 8002b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b72:	81a3      	strh	r3, [r4, #12]
 8002b74:	9b01      	ldr	r3, [sp, #4]
 8002b76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002b7a:	b15b      	cbz	r3, 8002b94 <__smakebuf_r+0x70>
 8002b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b80:	4630      	mov	r0, r6
 8002b82:	f000 f81d 	bl	8002bc0 <_isatty_r>
 8002b86:	b128      	cbz	r0, 8002b94 <__smakebuf_r+0x70>
 8002b88:	89a3      	ldrh	r3, [r4, #12]
 8002b8a:	f023 0303 	bic.w	r3, r3, #3
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	81a3      	strh	r3, [r4, #12]
 8002b94:	89a3      	ldrh	r3, [r4, #12]
 8002b96:	431d      	orrs	r5, r3
 8002b98:	81a5      	strh	r5, [r4, #12]
 8002b9a:	e7cf      	b.n	8002b3c <__smakebuf_r+0x18>

08002b9c <_fstat_r>:
 8002b9c:	b538      	push	{r3, r4, r5, lr}
 8002b9e:	4d07      	ldr	r5, [pc, #28]	@ (8002bbc <_fstat_r+0x20>)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	602b      	str	r3, [r5, #0]
 8002baa:	f7fe fa3d 	bl	8001028 <_fstat>
 8002bae:	1c43      	adds	r3, r0, #1
 8002bb0:	d102      	bne.n	8002bb8 <_fstat_r+0x1c>
 8002bb2:	682b      	ldr	r3, [r5, #0]
 8002bb4:	b103      	cbz	r3, 8002bb8 <_fstat_r+0x1c>
 8002bb6:	6023      	str	r3, [r4, #0]
 8002bb8:	bd38      	pop	{r3, r4, r5, pc}
 8002bba:	bf00      	nop
 8002bbc:	200001d4 	.word	0x200001d4

08002bc0 <_isatty_r>:
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	4d06      	ldr	r5, [pc, #24]	@ (8002bdc <_isatty_r+0x1c>)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	4608      	mov	r0, r1
 8002bca:	602b      	str	r3, [r5, #0]
 8002bcc:	f7fe fa3c 	bl	8001048 <_isatty>
 8002bd0:	1c43      	adds	r3, r0, #1
 8002bd2:	d102      	bne.n	8002bda <_isatty_r+0x1a>
 8002bd4:	682b      	ldr	r3, [r5, #0]
 8002bd6:	b103      	cbz	r3, 8002bda <_isatty_r+0x1a>
 8002bd8:	6023      	str	r3, [r4, #0]
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
 8002bdc:	200001d4 	.word	0x200001d4

08002be0 <_init>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr

08002bec <_fini>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr
