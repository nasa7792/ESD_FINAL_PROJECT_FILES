
RX_MODE_FROM_SCRATCH_TWO_WAY_ATTEMPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003618  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003594  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d4c  08006d4c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d4c  08006d4c  00007d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d54  08006d54  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d54  08006d54  00007d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d58  08006d58  00007d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006d5c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000068  08006dc4  00008068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08006dc4  000081f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005bf7  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a3  00000000  00000000  0000dc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000482  00000000  00000000  0000fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167a0  00000000  00000000  0000ff02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007410  00000000  00000000  000266a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e80  00000000  00000000  0002dab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a0  00000000  00000000  000b3978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000b5b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037a0 	.word	0x080037a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080037a0 	.word	0x080037a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <millis>:
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	b672      	cpsid	i
 8000578:	bf00      	nop
 800057a:	4b08      	ldr	r3, [pc, #32]	@ (800059c <millis+0x2c>)
 800057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000580:	e9c7 2300 	strd	r2, r3, [r7]
 8000584:	b662      	cpsie	i
 8000586:	bf00      	nop
 8000588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800058c:	4610      	mov	r0, r2
 800058e:	4619      	mov	r1, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000088 	.word	0x20000088

080005a0 <delay>:
 80005a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	f7ff ffe1 	bl	8000570 <millis>
 80005ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80005b2:	bf00      	nop
 80005b4:	f7ff ffdc 	bl	8000570 <millis>
 80005b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb61 0503 	sbc.w	r5, r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	4698      	mov	r8, r3
 80005c8:	4691      	mov	r9, r2
 80005ca:	4544      	cmp	r4, r8
 80005cc:	eb75 0309 	sbcs.w	r3, r5, r9
 80005d0:	d3f0      	bcc.n	80005b4 <delay+0x14>
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080005e0 <SysTick_Handler>:
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <SysTick_Handler+0x20>)
 80005e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ea:	1c50      	adds	r0, r2, #1
 80005ec:	f143 0100 	adc.w	r1, r3, #0
 80005f0:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <SysTick_Handler+0x20>)
 80005f2:	e9c3 0100 	strd	r0, r1, [r3]
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	20000088 	.word	0x20000088

08000604 <init_CSN_CE_PINS>:
	#include"SPI.h"
	#include"utilities.h"
#include<stdio.h>
extern volatile char ack_payload[10];

void init_CSN_CE_PINS(){
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <init_CSN_CE_PINS+0x3c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060c:	4a0c      	ldr	r2, [pc, #48]	@ (8000640 <init_CSN_CE_PINS+0x3c>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6313      	str	r3, [r2, #48]	@ 0x30
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER4, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <init_CSN_CE_PINS+0x40>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800061c:	4a09      	ldr	r2, [pc, #36]	@ (8000644 <init_CSN_CE_PINS+0x40>)
 800061e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000622:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER0, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <init_CSN_CE_PINS+0x40>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f023 0303 	bic.w	r3, r3, #3
 800062c:	4a05      	ldr	r2, [pc, #20]	@ (8000644 <init_CSN_CE_PINS+0x40>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020000 	.word	0x40020000

08000648 <CSN_SELECT_NRF>:


	void CSN_SELECT_NRF(){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BR_4; //pull low to enable nrf
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <CSN_SELECT_NRF+0x1c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <CSN_SELECT_NRF+0x1c>)
 8000652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000656:	6193      	str	r3, [r2, #24]
	}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40020000 	.word	0x40020000

08000668 <CSN_UNSELECT_NRF>:

	void CSN_UNSELECT_NRF(){
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BS_4; //make high to disable
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <CSN_UNSELECT_NRF+0x1c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <CSN_UNSELECT_NRF+0x1c>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6193      	str	r3, [r2, #24]
	}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40020000 	.word	0x40020000

08000688 <NRF_ENABLE>:

	void NRF_ENABLE(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BS_0;
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <NRF_ENABLE+0x1c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <NRF_ENABLE+0x1c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6193      	str	r3, [r2, #24]
	}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40020000 	.word	0x40020000

080006a8 <NRF_DISABLE>:

	void NRF_DISABLE(){
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BR_0;
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <NRF_DISABLE+0x1c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <NRF_DISABLE+0x1c>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006b6:	6193      	str	r3, [r2, #24]
	}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40020000 	.word	0x40020000

080006c8 <NRF_WRITE_REGISTER>:



	void NRF_WRITE_REGISTER(uint8_t REG_ADDRESS,uint8_t data){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	460a      	mov	r2, r1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	4613      	mov	r3, r2
 80006d6:	71bb      	strb	r3, [r7, #6]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	733b      	strb	r3, [r7, #12]
		trans_buff[1]=data;
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	737b      	strb	r3, [r7, #13]
		CSN_SELECT_NRF();
 80006e6:	f7ff ffaf 	bl	8000648 <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,2);
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fa4d 	bl	8000b90 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 80006f6:	f7ff ffb7 	bl	8000668 <CSN_UNSELECT_NRF>

	}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <NRF_WRITE_REG_MULTI_BYTES>:
	void NRF_WRITE_REG_MULTI_BYTES(uint8_t REG_ADDRESS,uint8_t* data_trans,int size_trans){
 8000702:	b580      	push	{r7, lr}
 8000704:	b086      	sub	sp, #24
 8000706:	af00      	add	r7, sp, #0
 8000708:	4603      	mov	r3, r0
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	73fb      	strb	r3, [r7, #15]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	f043 0320 	orr.w	r3, r3, #32
 8000716:	b2db      	uxtb	r3, r3
 8000718:	753b      	strb	r3, [r7, #20]
		CSN_SELECT_NRF();
 800071a:	f7ff ff95 	bl	8000648 <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,1);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fa33 	bl	8000b90 <SPI_TX_MULTI>
		SPI_TX_MULTI(data_trans,size_trans);
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	68b8      	ldr	r0, [r7, #8]
 800072e:	f000 fa2f 	bl	8000b90 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 8000732:	f7ff ff99 	bl	8000668 <CSN_UNSELECT_NRF>
	}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <NRF_READ_REGISTER>:

	uint8_t NRF_READ_REGISTER(uint8_t REG_ADDRESS){
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	71fb      	strb	r3, [r7, #7]
		uint8_t data_returned=0;
 8000748:	2300      	movs	r3, #0
 800074a:	73fb      	strb	r3, [r7, #15]
		CSN_SELECT_NRF();
 800074c:	f7ff ff7c 	bl	8000648 <CSN_SELECT_NRF>
		SPI_TX_MULTI(&REG_ADDRESS,1);
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	2101      	movs	r1, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fa1b 	bl	8000b90 <SPI_TX_MULTI>
		SPI_READ_MULTI(&data_returned,1);
 800075a:	f107 030f 	add.w	r3, r7, #15
 800075e:	2101      	movs	r1, #1
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fa4d 	bl	8000c00 <SPI_READ_MULTI>
		CSN_UNSELECT_NRF();
 8000766:	f7ff ff7f 	bl	8000668 <CSN_UNSELECT_NRF>
		return data_returned;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
	}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <NRF_PRX_CONFIG>:
		NRF_WRITE_REGISTER(CONFIG,0x0a); //powwr on device and keep in tx mode
		delay(5);
		//NRF_ENABLE();
	}

	void NRF_PRX_CONFIG(uint8_t *Address, uint8_t channel){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
		NRF_DISABLE();
 8000780:	f7ff ff92 	bl	80006a8 <NRF_DISABLE>
		NRF_WRITE_REGISTER(RF_CH,channel); //select channel
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	4619      	mov	r1, r3
 8000788:	2005      	movs	r0, #5
 800078a:	f7ff ff9d 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR,Address,5); //set address
 800078e:	2205      	movs	r2, #5
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	2010      	movs	r0, #16
 8000794:	f7ff ffb5 	bl	8000702 <NRF_WRITE_REG_MULTI_BYTES>
		uint8_t current_pipe_status=NRF_READ_REGISTER(EN_RXADDR);
 8000798:	2002      	movs	r0, #2
 800079a:	f7ff ffd0 	bl	800073e <NRF_READ_REGISTER>
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]
		current_pipe_status=current_pipe_status|(1<<0);//enable pipe 1
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
		NRF_WRITE_REGISTER(EN_RXADDR,current_pipe_status);
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	4619      	mov	r1, r3
 80007ae:	2002      	movs	r0, #2
 80007b0:	f7ff ff8a 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0,Address,5); //pipe address
 80007b4:	2205      	movs	r2, #5
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	200a      	movs	r0, #10
 80007ba:	f7ff ffa2 	bl	8000702 <NRF_WRITE_REG_MULTI_BYTES>

		//since we have dynamic payload we dont need thus below
		//NRF_WRITE_REGISTER(RX_PW_P1,32); //data 32 bytes width
		NRF_WRITE_REGISTER(CONFIG,0x0b); //powwr on device and keep in tx mode
 80007be:	210b      	movs	r1, #11
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ff81 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_ENABLE();
 80007c6:	f7ff ff5f 	bl	8000688 <NRF_ENABLE>
	}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <nrf24_reset>:

	void nrf24_reset(uint8_t REG)
	{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
		if (REG == STATUS)
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	d104      	bne.n	80007ee <nrf24_reset+0x1a>
		{
			NRF_WRITE_REGISTER(STATUS, 0x00);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2007      	movs	r0, #7
 80007e8:	f7ff ff6e 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
		NRF_WRITE_REGISTER(DYNPD, 0);
		NRF_WRITE_REGISTER(FEATURE, 0);
		}
	}
 80007ec:	e090      	b.n	8000910 <nrf24_reset+0x13c>
		else if (REG == FIFO_STATUS)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b17      	cmp	r3, #23
 80007f2:	d104      	bne.n	80007fe <nrf24_reset+0x2a>
			NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 80007f4:	2111      	movs	r1, #17
 80007f6:	2017      	movs	r0, #23
 80007f8:	f7ff ff66 	bl	80006c8 <NRF_WRITE_REGISTER>
	}
 80007fc:	e088      	b.n	8000910 <nrf24_reset+0x13c>
		NRF_WRITE_REGISTER(CONFIG, 0x08);
 80007fe:	2108      	movs	r1, #8
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ff61 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3F);
 8000806:	213f      	movs	r1, #63	@ 0x3f
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff ff5d 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_RXADDR, 0x03);
 800080e:	2103      	movs	r1, #3
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff59 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_AW, 0x03);
 8000816:	2103      	movs	r1, #3
 8000818:	2003      	movs	r0, #3
 800081a:	f7ff ff55 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0x03);
 800081e:	2103      	movs	r1, #3
 8000820:	2004      	movs	r0, #4
 8000822:	f7ff ff51 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_CH, 0x02);
 8000826:	2102      	movs	r1, #2
 8000828:	2005      	movs	r0, #5
 800082a:	f7ff ff4d 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_SETUP, 0x0E);
 800082e:	210e      	movs	r1, #14
 8000830:	2006      	movs	r0, #6
 8000832:	f7ff ff49 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(STATUS, 0x00);
 8000836:	2100      	movs	r1, #0
 8000838:	2007      	movs	r0, #7
 800083a:	f7ff ff45 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(OBSERVE_TX, 0x00);
 800083e:	2100      	movs	r1, #0
 8000840:	2008      	movs	r0, #8
 8000842:	f7ff ff41 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(CD, 0x00);
 8000846:	2100      	movs	r1, #0
 8000848:	2009      	movs	r0, #9
 800084a:	f7ff ff3d 	bl	80006c8 <NRF_WRITE_REGISTER>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800084e:	4a32      	ldr	r2, [pc, #200]	@ (8000918 <nrf24_reset+0x144>)
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000858:	6018      	str	r0, [r3, #0]
 800085a:	3304      	adds	r3, #4
 800085c:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0, rx_addr_p0_def, 5);
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	2205      	movs	r2, #5
 8000864:	4619      	mov	r1, r3
 8000866:	200a      	movs	r0, #10
 8000868:	f7ff ff4b 	bl	8000702 <NRF_WRITE_REG_MULTI_BYTES>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800086c:	4a2b      	ldr	r2, [pc, #172]	@ (800091c <nrf24_reset+0x148>)
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000876:	6018      	str	r0, [r3, #0]
 8000878:	3304      	adds	r3, #4
 800087a:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P1, rx_addr_p1_def, 5);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	2205      	movs	r2, #5
 8000882:	4619      	mov	r1, r3
 8000884:	200b      	movs	r0, #11
 8000886:	f7ff ff3c 	bl	8000702 <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_ADDR_P2, 0xC3);
 800088a:	21c3      	movs	r1, #195	@ 0xc3
 800088c:	200c      	movs	r0, #12
 800088e:	f7ff ff1b 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P3, 0xC4);
 8000892:	21c4      	movs	r1, #196	@ 0xc4
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff ff17 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P4, 0xC5);
 800089a:	21c5      	movs	r1, #197	@ 0xc5
 800089c:	200e      	movs	r0, #14
 800089e:	f7ff ff13 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P5, 0xC6);
 80008a2:	21c6      	movs	r1, #198	@ 0xc6
 80008a4:	200f      	movs	r0, #15
 80008a6:	f7ff ff0f 	bl	80006c8 <NRF_WRITE_REGISTER>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80008aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <nrf24_reset+0x144>)
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	6018      	str	r0, [r3, #0]
 80008b6:	3304      	adds	r3, #4
 80008b8:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR, tx_addr_def, 5);
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2205      	movs	r2, #5
 80008c0:	4619      	mov	r1, r3
 80008c2:	2010      	movs	r0, #16
 80008c4:	f7ff ff1d 	bl	8000702 <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_PW_P0, 0);
 80008c8:	2100      	movs	r1, #0
 80008ca:	2011      	movs	r0, #17
 80008cc:	f7ff fefc 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P1, 0);
 80008d0:	2100      	movs	r1, #0
 80008d2:	2012      	movs	r0, #18
 80008d4:	f7ff fef8 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P2, 0);
 80008d8:	2100      	movs	r1, #0
 80008da:	2013      	movs	r0, #19
 80008dc:	f7ff fef4 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P3, 0);
 80008e0:	2100      	movs	r1, #0
 80008e2:	2014      	movs	r0, #20
 80008e4:	f7ff fef0 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P4, 0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2015      	movs	r0, #21
 80008ec:	f7ff feec 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
 80008f0:	2100      	movs	r1, #0
 80008f2:	2016      	movs	r0, #22
 80008f4:	f7ff fee8 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 80008f8:	2111      	movs	r1, #17
 80008fa:	2017      	movs	r0, #23
 80008fc:	f7ff fee4 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(DYNPD, 0);
 8000900:	2100      	movs	r1, #0
 8000902:	201c      	movs	r0, #28
 8000904:	f7ff fee0 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FEATURE, 0);
 8000908:	2100      	movs	r1, #0
 800090a:	201d      	movs	r0, #29
 800090c:	f7ff fedc 	bl	80006c8 <NRF_WRITE_REGISTER>
	}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	080037b8 	.word	0x080037b8
 800091c:	080037c0 	.word	0x080037c0

08000920 <NRF_INIT>:


	void NRF_INIT(){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
		//SPI_INIT(); //initalize spi comms
		init_CSN_CE_PINS();
 8000924:	f7ff fe6e 	bl	8000604 <init_CSN_CE_PINS>
		NRF_DISABLE();
 8000928:	f7ff febe 	bl	80006a8 <NRF_DISABLE>
		nrf24_reset(0);
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ff51 	bl	80007d4 <nrf24_reset>
		NRF_WRITE_REGISTER(CONFIG, 0);  // will be configured later
 8000932:	2100      	movs	r1, #0
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fec7 	bl	80006c8 <NRF_WRITE_REGISTER>

		/*uncomment below code to enable auto ack stuff*/
		//NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
		//NRF_WRITE_REGISTER(SETUP_RETR, 0x03); // 15 retries, 500µs delay

		NRF_WRITE_REGISTER (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800093a:	2100      	movs	r1, #0
 800093c:	2002      	movs	r0, #2
 800093e:	f7ff fec3 	bl	80006c8 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000942:	2103      	movs	r1, #3
 8000944:	2003      	movs	r0, #3
 8000946:	f7ff febf 	bl	80006c8 <NRF_WRITE_REGISTER>

		//NRF_WRITE_REGISTER (SETUP_RETR, 0x00);   // No retransmission

		NRF_WRITE_REGISTER (RF_CH, 0);  // will be setup during Tx or RX
 800094a:	2100      	movs	r1, #0
 800094c:	2005      	movs	r0, #5
 800094e:	f7ff febb 	bl	80006c8 <NRF_WRITE_REGISTER>

		//enable dynamic payloads on all pipes
		//for DYNP I require EN_AA and Requires EN_DPL and ENAA_P0
		NRF_WRITE_REGISTER (DYNPD, 0x3f);  // will be setup during Tx or RX
 8000952:	213f      	movs	r1, #63	@ 0x3f
 8000954:	201c      	movs	r0, #28
 8000956:	f7ff feb7 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER (FEATURE, 0x6);  // enable dynamic payload length
 800095a:	2106      	movs	r1, #6
 800095c:	201d      	movs	r0, #29
 800095e:	f7ff feb3 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
 8000962:	213f      	movs	r1, #63	@ 0x3f
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff feaf 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0xff); // 15 retries, 500µs delay
 800096a:	21ff      	movs	r1, #255	@ 0xff
 800096c:	2004      	movs	r0, #4
 800096e:	f7ff feab 	bl	80006c8 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_SETUP, 0x0e);   // Power= 0db, data rate = 2Mbps
 8000972:	210e      	movs	r1, #14
 8000974:	2006      	movs	r0, #6
 8000976:	f7ff fea7 	bl	80006c8 <NRF_WRITE_REGISTER>
		//NRF_ENABLE();



	}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}

0800097e <NRD_SEND_CMD>:


	void NRD_SEND_CMD (uint8_t cmd)
	{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
		// Pull the CS Pin LOW to select the device
		CSN_SELECT_NRF();
 8000988:	f7ff fe5e 	bl	8000648 <CSN_SELECT_NRF>

		SPI_TX_MULTI(&cmd, 1);
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	2101      	movs	r1, #1
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f8fd 	bl	8000b90 <SPI_TX_MULTI>

		// Pull the CS HIGH to release the device
		CSN_UNSELECT_NRF();
 8000996:	f7ff fe67 	bl	8000668 <CSN_UNSELECT_NRF>
	}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <is_data_on_pipe>:

		return 0;

	}

uint8_t is_data_on_pipe(uint8_t pipenum){
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
uint8_t status_reg=NRF_READ_REGISTER(STATUS);
 80009ac:	2007      	movs	r0, #7
 80009ae:	f7ff fec6 	bl	800073e <NRF_READ_REGISTER>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]

//if 6 th bit is set and respective data pipe is set
//printf("reciever status %d \n \r",status_reg);
if((status_reg & (1<<6))){
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <is_data_on_pipe+0x2a>

//clear rx_dr
	NRF_WRITE_REGISTER(STATUS,(1<<6));
 80009c0:	2140      	movs	r1, #64	@ 0x40
 80009c2:	2007      	movs	r0, #7
 80009c4:	f7ff fe80 	bl	80006c8 <NRF_WRITE_REGISTER>
	return 1; //data recieved
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <is_data_on_pipe+0x2c>
}
return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <NRF_RECV_DATA>:


uint8_t NRF_RECV_DATA(uint8_t *data_ptr_RECV){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

	uint8_t status_reg=NRF_READ_REGISTER(STATUS);
 80009e0:	2007      	movs	r0, #7
 80009e2:	f7ff feac 	bl	800073e <NRF_READ_REGISTER>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_fifo_stat=NRF_READ_REGISTER(FIFO_STATUS);
 80009ea:	2017      	movs	r0, #23
 80009ec:	f7ff fea7 	bl	800073e <NRF_READ_REGISTER>
 80009f0:	4603      	mov	r3, r0
 80009f2:	73bb      	strb	r3, [r7, #14]


	//uint8_t ack[]="CUSTOM_ACK!";
	CSN_SELECT_NRF();
 80009f4:	f7ff fe28 	bl	8000648 <CSN_SELECT_NRF>
	uint8_t ack_cmd=W_ACK_PAYLOAD;
 80009f8:	23a8      	movs	r3, #168	@ 0xa8
 80009fa:	737b      	strb	r3, [r7, #13]
	SPI_TX_MULTI( &ack_cmd, 1);
 80009fc:	f107 030d 	add.w	r3, r7, #13
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f8c4 	bl	8000b90 <SPI_TX_MULTI>
	SPI_TX_MULTI(ack_payload,sizeof(ack_payload));
 8000a08:	210a      	movs	r1, #10
 8000a0a:	482f      	ldr	r0, [pc, #188]	@ (8000ac8 <NRF_RECV_DATA+0xf0>)
 8000a0c:	f000 f8c0 	bl	8000b90 <SPI_TX_MULTI>
	CSN_UNSELECT_NRF();
 8000a10:	f7ff fe2a 	bl	8000668 <CSN_UNSELECT_NRF>

	delay(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f7ff fdc3 	bl	80005a0 <delay>
	uint8_t cmd = R_RX_PL_WID;
 8000a1a:	2360      	movs	r3, #96	@ 0x60
 8000a1c:	733b      	strb	r3, [r7, #12]
	uint8_t payLoad_width=0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	72fb      	strb	r3, [r7, #11]
	CSN_SELECT_NRF();
 8000a22:	f7ff fe11 	bl	8000648 <CSN_SELECT_NRF>
	//payLoad_width=NRF_SEND_PAYLOAD_WIDTH_READ(cmd);
	//next comand to read payload
	SPI_TX_MULTI( &cmd, 1);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8af 	bl	8000b90 <SPI_TX_MULTI>
	SPI_READ_MULTI(&payLoad_width,1);//recieve width
 8000a32:	f107 030b 	add.w	r3, r7, #11
 8000a36:	2101      	movs	r1, #1
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f8e1 	bl	8000c00 <SPI_READ_MULTI>
	printf("\n \r  payloadWidth %d \n \r",payLoad_width);
 8000a3e:	7afb      	ldrb	r3, [r7, #11]
 8000a40:	4619      	mov	r1, r3
 8000a42:	4822      	ldr	r0, [pc, #136]	@ (8000acc <NRF_RECV_DATA+0xf4>)
 8000a44:	f001 febc 	bl	80027c0 <iprintf>
	CSN_UNSELECT_NRF();
 8000a48:	f7ff fe0e 	bl	8000668 <CSN_UNSELECT_NRF>
	delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f7ff fda7 	bl	80005a0 <delay>

	printf("status_reg here %d \n \r",status_reg);
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	4619      	mov	r1, r3
 8000a56:	481e      	ldr	r0, [pc, #120]	@ (8000ad0 <NRF_RECV_DATA+0xf8>)
 8000a58:	f001 feb2 	bl	80027c0 <iprintf>
	printf("tx_fifo_stat here %d \n \r",tx_fifo_stat);
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481c      	ldr	r0, [pc, #112]	@ (8000ad4 <NRF_RECV_DATA+0xfc>)
 8000a62:	f001 fead 	bl	80027c0 <iprintf>

	CSN_SELECT_NRF();
 8000a66:	f7ff fdef 	bl	8000648 <CSN_SELECT_NRF>
	cmd=R_RX_PAYLOAD;
 8000a6a:	2361      	movs	r3, #97	@ 0x61
 8000a6c:	733b      	strb	r3, [r7, #12]
	SPI_TX_MULTI( &cmd, 1);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	2101      	movs	r1, #1
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 f88b 	bl	8000b90 <SPI_TX_MULTI>
	SPI_READ_MULTI(data_ptr_RECV,payLoad_width);//recieve data
 8000a7a:	7afb      	ldrb	r3, [r7, #11]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 f8be 	bl	8000c00 <SPI_READ_MULTI>
	CSN_UNSELECT_NRF();
 8000a84:	f7ff fdf0 	bl	8000668 <CSN_UNSELECT_NRF>

	cmd=FLUSH_RX;
 8000a88:	23e2      	movs	r3, #226	@ 0xe2
 8000a8a:	733b      	strb	r3, [r7, #12]
	delay(20);
 8000a8c:	2014      	movs	r0, #20
 8000a8e:	f7ff fd87 	bl	80005a0 <delay>
	NRD_SEND_CMD(cmd); //flush rx fifo
 8000a92:	7b3b      	ldrb	r3, [r7, #12]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff72 	bl	800097e <NRD_SEND_CMD>

	delay(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f7ff fd80 	bl	80005a0 <delay>

	if(tx_fifo_stat&(1<<5)){
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	f003 0320 	and.w	r3, r3, #32
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <NRF_RECV_DATA+0xe4>
	printf("TX buffer became full ? \n \r");
 8000aaa:	480b      	ldr	r0, [pc, #44]	@ (8000ad8 <NRF_RECV_DATA+0x100>)
 8000aac:	f001 fe88 	bl	80027c0 <iprintf>
	 cmd=FLUSH_TX;
 8000ab0:	23e1      	movs	r3, #225	@ 0xe1
 8000ab2:	733b      	strb	r3, [r7, #12]
     NRD_SEND_CMD(cmd);
 8000ab4:	7b3b      	ldrb	r3, [r7, #12]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff61 	bl	800097e <NRD_SEND_CMD>
	}


return payLoad_width;
 8000abc:	7afb      	ldrb	r3, [r7, #11]

}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000090 	.word	0x20000090
 8000acc:	08003838 	.word	0x08003838
 8000ad0:	08003854 	.word	0x08003854
 8000ad4:	0800386c 	.word	0x0800386c
 8000ad8:	08003888 	.word	0x08003888

08000adc <SPI_INIT>:
#include"SPI.h"
#include"stdio.h"
#define AF05  (0x05)


void SPI_INIT(){
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
	//enable clock for GPIOA
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8000ae0:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <SPI_INIT+0xa8>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	4a27      	ldr	r2, [pc, #156]	@ (8000b84 <SPI_INIT+0xa8>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA5, PA6 and PA7 to alternate function mode
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1;
 8000aec:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <SPI_INIT+0xac>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a25      	ldr	r2, [pc, #148]	@ (8000b88 <SPI_INIT+0xac>)
 8000af2:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000af6:	6013      	str	r3, [r2, #0]
	//set which type of alternate function is
	GPIOA->AFR[0]|=(AF05<<20)|(AF05<<24)|(AF05<<28);
 8000af8:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <SPI_INIT+0xac>)
 8000afa:	6a1b      	ldr	r3, [r3, #32]
 8000afc:	4a22      	ldr	r2, [pc, #136]	@ (8000b88 <SPI_INIT+0xac>)
 8000afe:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000b02:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000b06:	6213      	str	r3, [r2, #32]
	//enable clock access to SPI1
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN;
 8000b08:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <SPI_INIT+0xa8>)
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b84 <SPI_INIT+0xa8>)
 8000b0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b12:	6453      	str	r3, [r2, #68]	@ 0x44
	//set software slave managment
	SPI1->CR1|=SPI_CR1_SSM|SPI_CR1_SSI;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1c      	ldr	r2, [pc, #112]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b1a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000b1e:	6013      	str	r3, [r2, #0]
	//set SPI in master mode
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_MSTR, 1);
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_BR,  3);
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000b34:	4a15      	ldr	r2, [pc, #84]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b36:	f043 0318 	orr.w	r3, r3, #24
 8000b3a:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPHA, 0);
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b42:	f023 0301 	bic.w	r3, r3, #1
 8000b46:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPOL, 0);
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b4e:	f023 0302 	bic.w	r3, r3, #2
 8000b52:	6013      	str	r3, [r2, #0]
	//MODIFY_FIELD(SPI1->CR1, SPI_CR1_LSBFIRST, 1);
	SPI1->CR2 |= 0x4;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x40; // Enabling SPI SPI periph
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a09      	ldr	r2, [pc, #36]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b6a:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_SPE, 1);
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <SPI_INIT+0xb0>)
 8000b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40013000 	.word	0x40013000

08000b90 <SPI_TX_MULTI>:

//send multiple bytes in case size>1
void SPI_TX_MULTI(uint8_t *data_ptr,int size){
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
int i=0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
uint8_t temp;
while(i<size){
 8000b9e:	e00f      	b.n	8000bc0 <SPI_TX_MULTI+0x30>
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000ba0:	bf00      	nop
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <SPI_TX_MULTI+0x6c>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f9      	beq.n	8000ba2 <SPI_TX_MULTI+0x12>
	SPI1->DR = data_ptr[i];
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <SPI_TX_MULTI+0x6c>)
 8000bb8:	60da      	str	r2, [r3, #12]
	i++;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
while(i<size){
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbeb      	blt.n	8000ba0 <SPI_TX_MULTI+0x10>
}
/*Wait until TXE is set*/
while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000bc8:	bf00      	nop
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <SPI_TX_MULTI+0x6c>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f9      	beq.n	8000bca <SPI_TX_MULTI+0x3a>

/*Wait for BUSY flag to reset*/
while((SPI1->SR & (SPI_SR_BSY))){}
 8000bd6:	bf00      	nop
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <SPI_TX_MULTI+0x6c>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f9      	bne.n	8000bd8 <SPI_TX_MULTI+0x48>

/*Clear OVR flag*/
temp = SPI1->DR;
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <SPI_TX_MULTI+0x6c>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	72fb      	strb	r3, [r7, #11]
temp = SPI1->SR;
 8000bea:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <SPI_TX_MULTI+0x6c>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	72fb      	strb	r3, [r7, #11]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40013000 	.word	0x40013000

08000c00 <SPI_READ_MULTI>:


void SPI_READ_MULTI(uint8_t *data_ptr,int size){
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	while(size)
 8000c0a:	e013      	b.n	8000c34 <SPI_READ_MULTI+0x34>
	{
		/*Send dummy data*/
		SPI1->DR =0;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <SPI_READ_MULTI+0x48>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]

		/*Wait for RXNE flag to be set*/
		while(!(SPI1->SR & (SPI_SR_RXNE))){}
 8000c12:	bf00      	nop
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <SPI_READ_MULTI+0x48>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f9      	beq.n	8000c14 <SPI_READ_MULTI+0x14>

		/*Read data from data register*/
		*data_ptr++ = (SPI1->DR);
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <SPI_READ_MULTI+0x48>)
 8000c22:	68d9      	ldr	r1, [r3, #12]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
		size--;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	603b      	str	r3, [r7, #0]
	while(size)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1e8      	bne.n	8000c0c <SPI_READ_MULTI+0xc>
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40013000 	.word	0x40013000

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	@ (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <test_configure_btn_interupt>:
#include"NRF_DRIVER.h"
#include<string.h>
#include"utilities.h"
#include "st7789_lcd_functions.h"

void test_configure_btn_interupt(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
    // Configure PA1 as input
    // Configure PA1 as input
    GPIOA->MODER &= ~GPIO_MODER_MODER1; // Clear mode bits for PA1 (set as input)
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <test_configure_btn_interupt+0x80>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d5c <test_configure_btn_interupt+0x80>)
 8000ce6:	f023 030c 	bic.w	r3, r3, #12
 8000cea:	6013      	str	r3, [r2, #0]
    // Configure PA1 as input with pull-up
    GPIOA->MODER &= ~GPIO_MODER_MODER1; // Input mode
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <test_configure_btn_interupt+0x80>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d5c <test_configure_btn_interupt+0x80>)
 8000cf2:	f023 030c 	bic.w	r3, r3, #12
 8000cf6:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR1; // Clear pull-up/down bits
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <test_configure_btn_interupt+0x80>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <test_configure_btn_interupt+0x80>)
 8000cfe:	f023 030c 	bic.w	r3, r3, #12
 8000d02:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= GPIO_PUPDR_PUPDR1_0; // Enable pull-up
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <test_configure_btn_interupt+0x80>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	4a14      	ldr	r2, [pc, #80]	@ (8000d5c <test_configure_btn_interupt+0x80>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	60d3      	str	r3, [r2, #12]

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <test_configure_btn_interupt+0x84>)
 8000d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d14:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <test_configure_btn_interupt+0x84>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1a:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure PA1 as the source for EXTI1
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <test_configure_btn_interupt+0x88>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <test_configure_btn_interupt+0x88>)
 8000d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000d26:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PA;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <test_configure_btn_interupt+0x88>)
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d64 <test_configure_btn_interupt+0x88>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	6093      	str	r3, [r2, #8]

    // Configure EXTI1 for falling edge trigger and unmask it
    EXTI->IMR |= EXTI_IMR_MR1;     // Unmask EXTI1
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <test_configure_btn_interupt+0x8c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <test_configure_btn_interupt+0x8c>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR1;   // Falling edge trigger
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <test_configure_btn_interupt+0x8c>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	4a09      	ldr	r2, [pc, #36]	@ (8000d68 <test_configure_btn_interupt+0x8c>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	60d3      	str	r3, [r2, #12]

    // Enable EXTI1 interrupt in NVIC
    NVIC_EnableIRQ(EXTI1_IRQn);
 8000d48:	2007      	movs	r0, #7
 8000d4a:	f7ff ff7f 	bl	8000c4c <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI1_IRQn, 2); // Set priority
 8000d4e:	2102      	movs	r1, #2
 8000d50:	2007      	movs	r0, #7
 8000d52:	f7ff ff99 	bl	8000c88 <__NVIC_SetPriority>

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40013800 	.word	0x40013800
 8000d68:	40013c00 	.word	0x40013c00

08000d6c <print>:

void SystemClock_Config(void);


void print(uint8_t data[], uint32_t len)
	{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	int i=0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
	while(len--){
 8000d7a:	e009      	b.n	8000d90 <print+0x24>
		putchar(data[i]);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fd2d 	bl	80027e4 <putchar>
		i++;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
	while(len--){
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	1e5a      	subs	r2, r3, #1
 8000d94:	603a      	str	r2, [r7, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <print+0x10>
	}
	printf("\n \r");
 8000d9a:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <print+0x3c>)
 8000d9c:	f001 fd10 	bl	80027c0 <iprintf>
	}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	080038a4 	.word	0x080038a4

08000dac <EXTI1_IRQHandler>:
// EXTI1 interrupt handler
void EXTI1_IRQHandler(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR1) { // Check if EXTI1 triggered
 8000db0:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <EXTI1_IRQHandler+0x2c>)
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00b      	beq.n	8000dd4 <EXTI1_IRQHandler+0x28>
        printf("Hi, I am pressed!\r\n");
 8000dbc:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <EXTI1_IRQHandler+0x30>)
 8000dbe:	f001 fd6f 	bl	80028a0 <puts>
        strcpy(ack_payload, "disable");
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <EXTI1_IRQHandler+0x34>)
 8000dc4:	4a07      	ldr	r2, [pc, #28]	@ (8000de4 <EXTI1_IRQHandler+0x38>)
 8000dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dca:	e883 0003 	stmia.w	r3, {r0, r1}
        // Clear the interrupt pending bit
        EXTI->PR = EXTI_PR_PR1;
 8000dce:	4b02      	ldr	r3, [pc, #8]	@ (8000dd8 <EXTI1_IRQHandler+0x2c>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	615a      	str	r2, [r3, #20]
    }
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40013c00 	.word	0x40013c00
 8000ddc:	080038a8 	.word	0x080038a8
 8000de0:	20000090 	.word	0x20000090
 8000de4:	080038bc 	.word	0x080038bc

08000de8 <lcd_initial_characters>:

void  lcd_initial_characters(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af02      	add	r7, sp, #8
uint8_t rotate=0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
rotate=0x60;
 8000df2:	2360      	movs	r3, #96	@ 0x60
 8000df4:	71fb      	strb	r3, [r7, #7]
ST7789_WriteCommand(ST7789_MADCTL);
 8000df6:	2036      	movs	r0, #54	@ 0x36
 8000df8:	f000 fa84 	bl	8001304 <ST7789_WriteCommand>
ST7789_WriteSmallData(rotate);
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fab6 	bl	8001370 <ST7789_WriteSmallData>
ST7789_DrawImage(20,20,40,40,image_data_Image);
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <lcd_initial_characters+0x54>)
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2328      	movs	r3, #40	@ 0x28
 8000e0a:	2228      	movs	r2, #40	@ 0x28
 8000e0c:	2114      	movs	r1, #20
 8000e0e:	2014      	movs	r0, #20
 8000e10:	f000 fcd3 	bl	80017ba <ST7789_DrawImage>
ST7789_DrawImage(20,70,40,40,spo2_image);
 8000e14:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <lcd_initial_characters+0x58>)
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2328      	movs	r3, #40	@ 0x28
 8000e1a:	2228      	movs	r2, #40	@ 0x28
 8000e1c:	2146      	movs	r1, #70	@ 0x46
 8000e1e:	2014      	movs	r0, #20
 8000e20:	f000 fccb 	bl	80017ba <ST7789_DrawImage>
ST7789_DrawImage(20,120,40,40,EARTH_IMAGE);
 8000e24:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <lcd_initial_characters+0x5c>)
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2328      	movs	r3, #40	@ 0x28
 8000e2a:	2228      	movs	r2, #40	@ 0x28
 8000e2c:	2178      	movs	r1, #120	@ 0x78
 8000e2e:	2014      	movs	r0, #20
 8000e30:	f000 fcc3 	bl	80017ba <ST7789_DrawImage>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	08003978 	.word	0x08003978
 8000e40:	08005278 	.word	0x08005278
 8000e44:	080045f8 	.word	0x080045f8

08000e48 <convert_to_str>:


void convert_to_str(uint8_t RxData[],int recv_width,char str[]){
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
int i=0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
while(recv_width--){
 8000e58:	e00a      	b.n	8000e70 <convert_to_str+0x28>
	str[i]=RxData[i];
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	441a      	add	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	440b      	add	r3, r1
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	701a      	strb	r2, [r3, #0]
	i++;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
while(recv_width--){
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1e5a      	subs	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1ef      	bne.n	8000e5a <convert_to_str+0x12>
}
str[i]='\0';
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	4413      	add	r3, r2
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
}
 8000e84:	bf00      	nop
 8000e86:	371c      	adds	r7, #28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <main>:


int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0ac      	sub	sp, #176	@ 0xb0
 8000e94:	af04      	add	r7, sp, #16

SystemClock_Config();
 8000e96:	f000 f9a9 	bl	80011ec <SystemClock_Config>
ST7789_Init();
 8000e9a:	f000 fbbf 	bl	800161c <ST7789_Init>
delay(3000);
 8000e9e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ea2:	f7ff fb7d 	bl	80005a0 <delay>
uint8_t RxAddress[] = {0xB3,0xB4,0xB5,0xB6,0x05};
 8000ea6:	4ac7      	ldr	r2, [pc, #796]	@ (80011c4 <main+0x334>)
 8000ea8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000eac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb0:	6018      	str	r0, [r3, #0]
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	7019      	strb	r1, [r3, #0]
uint8_t RxData[32] ;
uint8_t channel=10;
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
usart_init();
 8000ebc:	f000 fdbe 	bl	8001a3c <usart_init>
strcpy(ack_payload, "ack_def");
 8000ec0:	4bc1      	ldr	r3, [pc, #772]	@ (80011c8 <main+0x338>)
 8000ec2:	4ac2      	ldr	r2, [pc, #776]	@ (80011cc <main+0x33c>)
 8000ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec8:	e883 0003 	stmia.w	r3, {r0, r1}
NRF_INIT();
 8000ecc:	f7ff fd28 	bl	8000920 <NRF_INIT>
NRF_PRX_CONFIG(RxAddress,channel);
 8000ed0:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8000ed4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fc4a 	bl	8000774 <NRF_PRX_CONFIG>
test_configure_btn_interupt();
 8000ee0:	f7ff fefc 	bl	8000cdc <test_configure_btn_interupt>
printf("\n \rsetting up as PRX dynamic payload attemp \n \r");
 8000ee4:	48ba      	ldr	r0, [pc, #744]	@ (80011d0 <main+0x340>)
 8000ee6:	f001 fc6b 	bl	80027c0 <iprintf>
for(int i=0;i<=0x1D;i++){
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000ef0:	e011      	b.n	8000f16 <main+0x86>
	printf("\n \r register %x is value %x \n \r",i,NRF_READ_REGISTER(i));
 8000ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fc20 	bl	800073e <NRF_READ_REGISTER>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8000f06:	48b3      	ldr	r0, [pc, #716]	@ (80011d4 <main+0x344>)
 8000f08:	f001 fc5a 	bl	80027c0 <iprintf>
for(int i=0;i<=0x1D;i++){
 8000f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f10:	3301      	adds	r3, #1
 8000f12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f1a:	2b1d      	cmp	r3, #29
 8000f1c:	dde9      	ble.n	8000ef2 <main+0x62>
}

lcd_initial_characters();
 8000f1e:	f7ff ff63 	bl	8000de8 <lcd_initial_characters>

while(1){
	if(is_data_on_pipe(0)==1){
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff fd3d 	bl	80009a2 <is_data_on_pipe>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d1f9      	bne.n	8000f22 <main+0x92>
		printf("\n \r recieved data \n \r");
 8000f2e:	48aa      	ldr	r0, [pc, #680]	@ (80011d8 <main+0x348>)
 8000f30:	f001 fc46 	bl	80027c0 <iprintf>
		uint8_t recv_width=NRF_RECV_DATA(RxData);
 8000f34:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fd4d 	bl	80009d8 <NRF_RECV_DATA>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
		print(RxData,recv_width);
 8000f44:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 8000f48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff0c 	bl	8000d6c <print>
		char str[32];
		convert_to_str(RxData,recv_width,str);
 8000f54:	f897 1092 	ldrb.w	r1, [r7, #146]	@ 0x92
 8000f58:	463a      	mov	r2, r7
 8000f5a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff72 	bl	8000e48 <convert_to_str>
		char *delimeter="-";
 8000f64:	4b9d      	ldr	r3, [pc, #628]	@ (80011dc <main+0x34c>)
 8000f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		char* tok=strtok(str,delimeter);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fd7d 	bl	8002a70 <strtok>
 8000f76:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
		char clear_section[10];
		   memset(clear_section, ' ', sizeof(clear_section));
 8000f7a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f7e:	220a      	movs	r2, #10
 8000f80:	2120      	movs	r1, #32
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 fd6c 	bl	8002a60 <memset>
		char heart_rate_data[10]={0};
 8000f88:	2300      	movs	r3, #0
 8000f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f8c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	809a      	strh	r2, [r3, #4]
		char spo2_data[10]={0};
 8000f96:	2300      	movs	r3, #0
 8000f98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f9a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	809a      	strh	r2, [r3, #4]
		char gps_data_lat[10]={0};
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fa8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	809a      	strh	r2, [r3, #4]
		char gps_data_long[10]={0};
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	809a      	strh	r2, [r3, #4]
		int count_tok=0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		while(tok!=NULL){
 8000fc6:	e06f      	b.n	80010a8 <main+0x218>
			printf("tok %s \n \r",tok);
 8000fc8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000fcc:	4884      	ldr	r0, [pc, #528]	@ (80011e0 <main+0x350>)
 8000fce:	f001 fbf7 	bl	80027c0 <iprintf>
			count_tok++;
 8000fd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			if(count_tok==1 && tok[0]=='H'){
 8000fdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d115      	bne.n	8001010 <main+0x180>
 8000fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b48      	cmp	r3, #72	@ 0x48
 8000fec:	d110      	bne.n	8001010 <main+0x180>
				memset(heart_rate_data,0,10);
 8000fee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ff2:	220a      	movs	r2, #10
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fd32 	bl	8002a60 <memset>
				strcpy(heart_rate_data,tok+1);
 8000ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fe00 	bl	8002c0e <strcpy>
 800100e:	e044      	b.n	800109a <main+0x20a>
			}
			else if(count_tok==2 && tok[0]=='O'){
 8001010:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001014:	2b02      	cmp	r3, #2
 8001016:	d115      	bne.n	8001044 <main+0x1b4>
 8001018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b4f      	cmp	r3, #79	@ 0x4f
 8001020:	d110      	bne.n	8001044 <main+0x1b4>
				memset(spo2_data,0,10);
 8001022:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001026:	220a      	movs	r2, #10
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fd18 	bl	8002a60 <memset>
				strcpy(spo2_data,tok+1);
 8001030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fde6 	bl	8002c0e <strcpy>
 8001042:	e02a      	b.n	800109a <main+0x20a>
			}
			else if(count_tok==3 && tok[0]=='G'){
 8001044:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001048:	2b03      	cmp	r3, #3
 800104a:	d126      	bne.n	800109a <main+0x20a>
 800104c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b47      	cmp	r3, #71	@ 0x47
 8001054:	d121      	bne.n	800109a <main+0x20a>
				char *delim=",";
 8001056:	4b63      	ldr	r3, [pc, #396]	@ (80011e4 <main+0x354>)
 8001058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				char* tok2=strtok(tok+1,delim);
 800105c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001060:	3301      	adds	r3, #1
 8001062:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fd02 	bl	8002a70 <strtok>
 800106c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
				strcpy(gps_data_lat,tok2);
 8001070:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001074:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fdc8 	bl	8002c0e <strcpy>
				tok2=strtok(NULL,delim);
 800107e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001082:	2000      	movs	r0, #0
 8001084:	f001 fcf4 	bl	8002a70 <strtok>
 8001088:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
				strcpy(gps_data_long,tok2);
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fdba 	bl	8002c0e <strcpy>
			}
			tok=strtok(NULL,delimeter);
 800109a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800109e:	2000      	movs	r0, #0
 80010a0:	f001 fce6 	bl	8002a70 <strtok>
 80010a4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
		while(tok!=NULL){
 80010a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d18b      	bne.n	8000fc8 <main+0x138>

		}
	//first clear previous text
	ST7789_WriteString(100, 20, clear_section, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 80010b0:	4b4d      	ldr	r3, [pc, #308]	@ (80011e8 <main+0x358>)
 80010b2:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80010b6:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 80010ba:	9202      	str	r2, [sp, #8]
 80010bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c0:	9201      	str	r2, [sp, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	9200      	str	r2, [sp, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	460a      	mov	r2, r1
 80010ca:	2114      	movs	r1, #20
 80010cc:	2064      	movs	r0, #100	@ 0x64
 80010ce:	f000 fa5d 	bl	800158c <ST7789_WriteString>
	ST7789_WriteString(100, 80, clear_section, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 80010d2:	4b45      	ldr	r3, [pc, #276]	@ (80011e8 <main+0x358>)
 80010d4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80010d8:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 80010dc:	9202      	str	r2, [sp, #8]
 80010de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e2:	9201      	str	r2, [sp, #4]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	460a      	mov	r2, r1
 80010ec:	2150      	movs	r1, #80	@ 0x50
 80010ee:	2064      	movs	r0, #100	@ 0x64
 80010f0:	f000 fa4c 	bl	800158c <ST7789_WriteString>
	ST7789_WriteString(100, 120, clear_section, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 80010f4:	4b3c      	ldr	r3, [pc, #240]	@ (80011e8 <main+0x358>)
 80010f6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80010fa:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 80010fe:	9202      	str	r2, [sp, #8]
 8001100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001104:	9201      	str	r2, [sp, #4]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	9200      	str	r2, [sp, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	460a      	mov	r2, r1
 800110e:	2178      	movs	r1, #120	@ 0x78
 8001110:	2064      	movs	r0, #100	@ 0x64
 8001112:	f000 fa3b 	bl	800158c <ST7789_WriteString>
	ST7789_WriteString(100, 140, clear_section, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 8001116:	4b34      	ldr	r3, [pc, #208]	@ (80011e8 <main+0x358>)
 8001118:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800111c:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8001120:	9202      	str	r2, [sp, #8]
 8001122:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001126:	9201      	str	r2, [sp, #4]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	9200      	str	r2, [sp, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	460a      	mov	r2, r1
 8001130:	218c      	movs	r1, #140	@ 0x8c
 8001132:	2064      	movs	r0, #100	@ 0x64
 8001134:	f000 fa2a 	bl	800158c <ST7789_WriteString>

	ST7789_WriteString(100, 20, heart_rate_data, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 8001138:	4b2b      	ldr	r3, [pc, #172]	@ (80011e8 <main+0x358>)
 800113a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800113e:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8001142:	9202      	str	r2, [sp, #8]
 8001144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001148:	9201      	str	r2, [sp, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	9200      	str	r2, [sp, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	460a      	mov	r2, r1
 8001152:	2114      	movs	r1, #20
 8001154:	2064      	movs	r0, #100	@ 0x64
 8001156:	f000 fa19 	bl	800158c <ST7789_WriteString>
	ST7789_WriteString(100, 80, spo2_data, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <main+0x358>)
 800115c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001160:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8001164:	9202      	str	r2, [sp, #8]
 8001166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800116a:	9201      	str	r2, [sp, #4]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	460a      	mov	r2, r1
 8001174:	2150      	movs	r1, #80	@ 0x50
 8001176:	2064      	movs	r0, #100	@ 0x64
 8001178:	f000 fa08 	bl	800158c <ST7789_WriteString>
	ST7789_WriteString(100, 120, gps_data_lat, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 800117c:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <main+0x358>)
 800117e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001182:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8001186:	9202      	str	r2, [sp, #8]
 8001188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118c:	9201      	str	r2, [sp, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	9200      	str	r2, [sp, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	460a      	mov	r2, r1
 8001196:	2178      	movs	r1, #120	@ 0x78
 8001198:	2064      	movs	r0, #100	@ 0x64
 800119a:	f000 f9f7 	bl	800158c <ST7789_WriteString>
	ST7789_WriteString(100, 140, gps_data_long, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <main+0x358>)
 80011a0:	f107 0120 	add.w	r1, r7, #32
 80011a4:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 80011a8:	9202      	str	r2, [sp, #8]
 80011aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ae:	9201      	str	r2, [sp, #4]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	460a      	mov	r2, r1
 80011b8:	218c      	movs	r1, #140	@ 0x8c
 80011ba:	2064      	movs	r0, #100	@ 0x64
 80011bc:	f000 f9e6 	bl	800158c <ST7789_WriteString>
	if(is_data_on_pipe(0)==1){
 80011c0:	e6af      	b.n	8000f22 <main+0x92>
 80011c2:	bf00      	nop
 80011c4:	08003948 	.word	0x08003948
 80011c8:	20000090 	.word	0x20000090
 80011cc:	080038c4 	.word	0x080038c4
 80011d0:	080038cc 	.word	0x080038cc
 80011d4:	080038fc 	.word	0x080038fc
 80011d8:	0800391c 	.word	0x0800391c
 80011dc:	08003934 	.word	0x08003934
 80011e0:	08003938 	.word	0x08003938
 80011e4:	08003944 	.word	0x08003944
 80011e8:	08006c54 	.word	0x08006c54

080011ec <SystemClock_Config>:

}

}
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	@ 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	2230      	movs	r2, #48	@ 0x30
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fc30 	bl	8002a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <SystemClock_Config+0xcc>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	4a27      	ldr	r2, [pc, #156]	@ (80012b8 <SystemClock_Config+0xcc>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001220:	4b25      	ldr	r3, [pc, #148]	@ (80012b8 <SystemClock_Config+0xcc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <SystemClock_Config+0xd0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a21      	ldr	r2, [pc, #132]	@ (80012bc <SystemClock_Config+0xd0>)
 8001236:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <SystemClock_Config+0xd0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001248:	2302      	movs	r3, #2
 800124a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124c:	2301      	movs	r3, #1
 800124e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001250:	2310      	movs	r3, #16
 8001252:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001254:	2302      	movs	r3, #2
 8001256:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001258:	2300      	movs	r3, #0
 800125a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800125c:	2308      	movs	r3, #8
 800125e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001260:	23c0      	movs	r3, #192	@ 0xc0
 8001262:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001264:	2304      	movs	r3, #4
 8001266:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001268:	2308      	movs	r3, #8
 800126a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126c:	f107 0320 	add.w	r3, r7, #32
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fd7f 	bl	8001d74 <HAL_RCC_OscConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800127c:	f000 f820 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001280:	230f      	movs	r3, #15
 8001282:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001284:	2302      	movs	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800128c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001290:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001296:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2103      	movs	r1, #3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 ffe0 	bl	8002264 <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012aa:	f000 f809 	bl	80012c0 <Error_Handler>
  }
}
 80012ae:	bf00      	nop
 80012b0:	3750      	adds	r7, #80	@ 0x50
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <Error_Handler+0x8>

080012cc <st7789_spi_init>:

const tImage Spo2 = { spo2_image, 40, 40,
    16 };

void st7789_spi_init()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
    SPI_INIT();
 80012d0:	f7ff fc04 	bl	8000adc <SPI_INIT>

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable GPIOB clock for Pins PB4 (BL), PB5 (DC), PB6 (CS), and PB7 (RST)
 80012d4:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <st7789_spi_init+0x30>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	4a08      	ldr	r2, [pc, #32]	@ (80012fc <st7789_spi_init+0x30>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	6313      	str	r3, [r2, #48]	@ 0x30

    /* Configure DC, RST, CS, and BL pins */
    GPIOB->MODER &= ~(GPIO_MODER_MODE5_Msk | GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk | GPIO_MODER_MODE4_Msk);
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <st7789_spi_init+0x34>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a06      	ldr	r2, [pc, #24]	@ (8001300 <st7789_spi_init+0x34>)
 80012e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80012ea:	6013      	str	r3, [r2, #0]
    // Clear the mode bits for PB4, PB5, PB6, and PB7

    GPIOB->MODER |= (GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 | GPIO_MODER_MODE4_0);
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <st7789_spi_init+0x34>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a03      	ldr	r2, [pc, #12]	@ (8001300 <st7789_spi_init+0x34>)
 80012f2:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80012f6:	6013      	str	r3, [r2, #0]
    // Set PB4, PB5, PB6, and PB7 to output mode (01)
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020400 	.word	0x40020400

08001304 <ST7789_WriteCommand>:


void ST7789_WriteCommand(uint8_t cmd)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = GPIOB_BSRR_RESET_DC; // DC Low indicating Command
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <ST7789_WriteCommand+0x34>)
 8001310:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001314:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = GPIOB_BSRR_RESET_CS; // Chip Select Low
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <ST7789_WriteCommand+0x34>)
 8001318:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800131c:	619a      	str	r2, [r3, #24]
	SPI_TX_MULTI(&cmd,  1);
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	2101      	movs	r1, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fc34 	bl	8000b90 <SPI_TX_MULTI>
	GPIOB->BSRR = GPIOB_BSRR_SET_CS; // Chip Select High
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <ST7789_WriteCommand+0x34>)
 800132a:	2240      	movs	r2, #64	@ 0x40
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40020400 	.word	0x40020400

0800133c <ST7789_WriteData>:

 void ST7789_WriteData(uint8_t *buff, uint32_t buff_size)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	GPIOB->BSRR = GPIOB_BSRR_SET_DC;
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <ST7789_WriteData+0x30>)
 8001348:	2220      	movs	r2, #32
 800134a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = GPIOB_BSRR_RESET_CS; // Chip Select Low
 800134c:	4b07      	ldr	r3, [pc, #28]	@ (800136c <ST7789_WriteData+0x30>)
 800134e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001352:	619a      	str	r2, [r3, #24]
	SPI_TX_MULTI(buff, buff_size);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fc19 	bl	8000b90 <SPI_TX_MULTI>
	GPIOB->BSRR = GPIOB_BSRR_SET_CS; // Chip Select High
 800135e:	4b03      	ldr	r3, [pc, #12]	@ (800136c <ST7789_WriteData+0x30>)
 8001360:	2240      	movs	r2, #64	@ 0x40
 8001362:	619a      	str	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40020400 	.word	0x40020400

08001370 <ST7789_WriteSmallData>:

 void ST7789_WriteSmallData(uint8_t data)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = GPIOB_BSRR_SET_DC; // DC High indicating Data
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <ST7789_WriteSmallData+0x30>)
 800137c:	2220      	movs	r2, #32
 800137e:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = GPIOB_BSRR_RESET_CS; // Chip Select Low
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <ST7789_WriteSmallData+0x30>)
 8001382:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001386:	619a      	str	r2, [r3, #24]
	SPI_TX_MULTI(&data, 1);
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	2101      	movs	r1, #1
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fbff 	bl	8000b90 <SPI_TX_MULTI>
	GPIOB->BSRR = GPIOB_BSRR_SET_CS; // Chip Select High
 8001392:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <ST7789_WriteSmallData+0x30>)
 8001394:	2240      	movs	r2, #64	@ 0x40
 8001396:	619a      	str	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40020400 	.word	0x40020400

080013a4 <ST7789_SetAddressWindow>:

 void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4604      	mov	r4, r0
 80013ac:	4608      	mov	r0, r1
 80013ae:	4611      	mov	r1, r2
 80013b0:	461a      	mov	r2, r3
 80013b2:	4623      	mov	r3, r4
 80013b4:	80fb      	strh	r3, [r7, #6]
 80013b6:	4603      	mov	r3, r0
 80013b8:	80bb      	strh	r3, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	807b      	strh	r3, [r7, #2]
 80013be:	4613      	mov	r3, r2
 80013c0:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	82fb      	strh	r3, [r7, #22]
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80013ca:	88bb      	ldrh	r3, [r7, #4]
 80013cc:	827b      	strh	r3, [r7, #18]
 80013ce:	883b      	ldrh	r3, [r7, #0]
 80013d0:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 80013d2:	202a      	movs	r0, #42	@ 0x2a
 80013d4:	f7ff ff96 	bl	8001304 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80013d8:	8afb      	ldrh	r3, [r7, #22]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	733b      	strb	r3, [r7, #12]
 80013e2:	8afb      	ldrh	r3, [r7, #22]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	737b      	strb	r3, [r7, #13]
 80013e8:	8abb      	ldrh	r3, [r7, #20]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	73bb      	strb	r3, [r7, #14]
 80013f2:	8abb      	ldrh	r3, [r7, #20]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2104      	movs	r1, #4
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff9c 	bl	800133c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001404:	202b      	movs	r0, #43	@ 0x2b
 8001406:	f7ff ff7d 	bl	8001304 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800140a:	8a7b      	ldrh	r3, [r7, #18]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	b29b      	uxth	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	723b      	strb	r3, [r7, #8]
 8001414:	8a7b      	ldrh	r3, [r7, #18]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	727b      	strb	r3, [r7, #9]
 800141a:	8a3b      	ldrh	r3, [r7, #16]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	b29b      	uxth	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	72bb      	strb	r3, [r7, #10]
 8001424:	8a3b      	ldrh	r3, [r7, #16]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	2104      	movs	r1, #4
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff83 	bl	800133c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001436:	202c      	movs	r0, #44	@ 0x2c
 8001438:	f7ff ff64 	bl	8001304 <ST7789_WriteCommand>
}
 800143c:	bf00      	nop
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}

08001444 <ST7789_Fill_Color>:

void ST7789_Fill_Color(uint16_t color)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800144e:	f240 133f 	movw	r3, #319	@ 0x13f
 8001452:	22ef      	movs	r2, #239	@ 0xef
 8001454:	2100      	movs	r1, #0
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff ffa4 	bl	80013a4 <ST7789_SetAddressWindow>

	uint16_t j;
	for (i = 0; i < ST7789_WIDTH; i++)
 800145c:	2300      	movs	r3, #0
 800145e:	81fb      	strh	r3, [r7, #14]
 8001460:	e01a      	b.n	8001498 <ST7789_Fill_Color+0x54>
			for (j = 0; j < ST7789_HEIGHT; j++) {
 8001462:	2300      	movs	r3, #0
 8001464:	81bb      	strh	r3, [r7, #12]
 8001466:	e010      	b.n	800148a <ST7789_Fill_Color+0x46>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	b29b      	uxth	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	723b      	strb	r3, [r7, #8]
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	727b      	strb	r3, [r7, #9]
				ST7789_WriteData(data, sizeof(data));
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2102      	movs	r1, #2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff5c 	bl	800133c <ST7789_WriteData>
			for (j = 0; j < ST7789_HEIGHT; j++) {
 8001484:	89bb      	ldrh	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	81bb      	strh	r3, [r7, #12]
 800148a:	89bb      	ldrh	r3, [r7, #12]
 800148c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001490:	d3ea      	bcc.n	8001468 <ST7789_Fill_Color+0x24>
	for (i = 0; i < ST7789_WIDTH; i++)
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	3301      	adds	r3, #1
 8001496:	81fb      	strh	r3, [r7, #14]
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	2bef      	cmp	r3, #239	@ 0xef
 800149c:	d9e1      	bls.n	8001462 <ST7789_Fill_Color+0x1e>
			}

}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <ST7789_WriteChar>:

void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80014a8:	b082      	sub	sp, #8
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b088      	sub	sp, #32
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	460b      	mov	r3, r1
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80014be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014c2:	461a      	mov	r2, r3
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4413      	add	r3, r2
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80014d2:	4619      	mov	r1, r3
 80014d4:	88bb      	ldrh	r3, [r7, #4]
 80014d6:	440b      	add	r3, r1
 80014d8:	b29b      	uxth	r3, r3
 80014da:	3b01      	subs	r3, #1
 80014dc:	b29b      	uxth	r3, r3
 80014de:	88b9      	ldrh	r1, [r7, #4]
 80014e0:	88f8      	ldrh	r0, [r7, #6]
 80014e2:	f7ff ff5f 	bl	80013a4 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e041      	b.n	8001570 <ST7789_WriteChar+0xc8>
		b = font.data[(ch - 32) * font.height + i];
 80014ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	3b20      	subs	r3, #32
 80014f2:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	440b      	add	r3, r1
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	e027      	b.n	800155e <ST7789_WriteChar+0xb6>
			if ((b << j) & 0x8000) {
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00e      	beq.n	800153c <ST7789_WriteChar+0x94>
				uint8_t data[] = {color >> 8, color & 0xFF};
 800151e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	b29b      	uxth	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	743b      	strb	r3, [r7, #16]
 8001528:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800152a:	b2db      	uxtb	r3, r3
 800152c:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2102      	movs	r1, #2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff01 	bl	800133c <ST7789_WriteData>
 800153a:	e00d      	b.n	8001558 <ST7789_WriteChar+0xb0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 800153c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	b29b      	uxth	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	733b      	strb	r3, [r7, #12]
 8001546:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001548:	b2db      	uxtb	r3, r3
 800154a:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2102      	movs	r1, #2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fef2 	bl	800133c <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	3301      	adds	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001562:	461a      	mov	r2, r3
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	4293      	cmp	r3, r2
 8001568:	d3d1      	bcc.n	800150e <ST7789_WriteChar+0x66>
	for (i = 0; i < font.height; i++) {
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001574:	461a      	mov	r2, r3
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	4293      	cmp	r3, r2
 800157a:	d3b7      	bcc.n	80014ec <ST7789_WriteChar+0x44>
			}
		}
	}

}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001588:	b002      	add	sp, #8
 800158a:	4770      	bx	lr

0800158c <ST7789_WriteString>:

void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800158c:	b082      	sub	sp, #8
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af04      	add	r7, sp, #16
 8001594:	603a      	str	r2, [r7, #0]
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	4603      	mov	r3, r0
 800159a:	80fb      	strh	r3, [r7, #6]
 800159c:	460b      	mov	r3, r1
 800159e:	80bb      	strh	r3, [r7, #4]

	while (*str) {
 80015a0:	e02e      	b.n	8001600 <ST7789_WriteString+0x74>
		if (x + font.width >= ST7789_WIDTH) {
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	7d3a      	ldrb	r2, [r7, #20]
 80015a6:	4413      	add	r3, r2
 80015a8:	2bef      	cmp	r3, #239	@ 0xef
 80015aa:	dd14      	ble.n	80015d6 <ST7789_WriteString+0x4a>
			x = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80015b0:	7d7b      	ldrb	r3, [r7, #21]
 80015b2:	461a      	mov	r2, r3
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	7d7a      	ldrb	r2, [r7, #21]
 80015be:	4413      	add	r3, r2
 80015c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80015c4:	da21      	bge.n	800160a <ST7789_WriteString+0x7e>
				break;
			}

			if (*str == ' ') {
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b20      	cmp	r3, #32
 80015cc:	d103      	bne.n	80015d6 <ST7789_WriteString+0x4a>
				// skip spaces in the beginning of the new line
				str++;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	603b      	str	r3, [r7, #0]
				continue;
 80015d4:	e014      	b.n	8001600 <ST7789_WriteString+0x74>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	88b9      	ldrh	r1, [r7, #4]
 80015dc:	88f8      	ldrh	r0, [r7, #6]
 80015de:	8c3b      	ldrh	r3, [r7, #32]
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	8bbb      	ldrh	r3, [r7, #28]
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f7ff ff5c 	bl	80014a8 <ST7789_WriteChar>
		x += font.width;
 80015f0:	7d3b      	ldrb	r3, [r7, #20]
 80015f2:	461a      	mov	r2, r3
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4413      	add	r3, r2
 80015f8:	80fb      	strh	r3, [r7, #6]
		str++;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1cc      	bne.n	80015a2 <ST7789_WriteString+0x16>
	}

}
 8001608:	e000      	b.n	800160c <ST7789_WriteString+0x80>
				break;
 800160a:	bf00      	nop
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001616:	b002      	add	sp, #8
 8001618:	4770      	bx	lr
	...

0800161c <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b08b      	sub	sp, #44	@ 0x2c
 8001620:	af00      	add	r7, sp, #0
	st7789_spi_init();
 8001622:	f7ff fe53 	bl	80012cc <st7789_spi_init>
	delay(25);
 8001626:	2019      	movs	r0, #25
 8001628:	f7fe ffba 	bl	80005a0 <delay>
	GPIOB->BSRR = GPIOB_BSRR_RESET_RST;
 800162c:	4b4a      	ldr	r3, [pc, #296]	@ (8001758 <ST7789_Init+0x13c>)
 800162e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001632:	619a      	str	r2, [r3, #24]
	delay(50);
 8001634:	2032      	movs	r0, #50	@ 0x32
 8001636:	f7fe ffb3 	bl	80005a0 <delay>
	GPIOB->BSRR = GPIOB_BSRR_SET_RST;
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <ST7789_Init+0x13c>)
 800163c:	2280      	movs	r2, #128	@ 0x80
 800163e:	619a      	str	r2, [r3, #24]
    delay(50);
 8001640:	2032      	movs	r0, #50	@ 0x32
 8001642:	f7fe ffad 	bl	80005a0 <delay>
    ST7789_WriteCommand(ST7789_SWRESET);
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff fe5c 	bl	8001304 <ST7789_WriteCommand>
    delay(100);
 800164c:	2064      	movs	r0, #100	@ 0x64
 800164e:	f7fe ffa7 	bl	80005a0 <delay>
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001652:	203a      	movs	r0, #58	@ 0x3a
 8001654:	f7ff fe56 	bl	8001304 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001658:	2055      	movs	r0, #85	@ 0x55
 800165a:	f7ff fe89 	bl	8001370 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800165e:	20b2      	movs	r0, #178	@ 0xb2
 8001660:	f7ff fe50 	bl	8001304 <ST7789_WriteCommand>
	uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001664:	4a3d      	ldr	r2, [pc, #244]	@ (800175c <ST7789_Init+0x140>)
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800166e:	6018      	str	r0, [r3, #0]
 8001670:	3304      	adds	r3, #4
 8001672:	7019      	strb	r1, [r3, #0]
	ST7789_WriteData(data, sizeof(data));
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	2105      	movs	r1, #5
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fe5e 	bl	800133c <ST7789_WriteData>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001680:	20b7      	movs	r0, #183	@ 0xb7
 8001682:	f7ff fe3f 	bl	8001304 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001686:	2035      	movs	r0, #53	@ 0x35
 8001688:	f7ff fe72 	bl	8001370 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800168c:	20bb      	movs	r0, #187	@ 0xbb
 800168e:	f7ff fe39 	bl	8001304 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	0.725v (default 0.75v for 0x20)
 8001692:	2020      	movs	r0, #32
 8001694:	f7ff fe6c 	bl	8001370 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 8001698:	20c0      	movs	r0, #192	@ 0xc0
 800169a:	f7ff fe33 	bl	8001304 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800169e:	202c      	movs	r0, #44	@ 0x2c
 80016a0:	f7ff fe66 	bl	8001370 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80016a4:	20c2      	movs	r0, #194	@ 0xc2
 80016a6:	f7ff fe2d 	bl	8001304 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff fe60 	bl	8001370 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80016b0:	20c3      	movs	r0, #195	@ 0xc3
 80016b2:	f7ff fe27 	bl	8001304 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0b);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80016b6:	200b      	movs	r0, #11
 80016b8:	f7ff fe5a 	bl	8001370 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80016bc:	20c4      	movs	r0, #196	@ 0xc4
 80016be:	f7ff fe21 	bl	8001304 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80016c2:	2020      	movs	r0, #32
 80016c4:	f7ff fe54 	bl	8001370 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80016c8:	20c6      	movs	r0, #198	@ 0xc6
 80016ca:	f7ff fe1b 	bl	8001304 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80016ce:	200f      	movs	r0, #15
 80016d0:	f7ff fe4e 	bl	8001370 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80016d4:	20d0      	movs	r0, #208	@ 0xd0
 80016d6:	f7ff fe15 	bl	8001304 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80016da:	20a4      	movs	r0, #164	@ 0xa4
 80016dc:	f7ff fe48 	bl	8001370 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80016e0:	20a1      	movs	r0, #161	@ 0xa1
 80016e2:	f7ff fe45 	bl	8001370 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80016e6:	20e0      	movs	r0, #224	@ 0xe0
 80016e8:	f7ff fe0c 	bl	8001304 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <ST7789_Init+0x144>)
 80016ee:	f107 0410 	add.w	r4, r7, #16
 80016f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f4:	c407      	stmia	r4!, {r0, r1, r2}
 80016f6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	210e      	movs	r1, #14
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fe1c 	bl	800133c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001704:	20e1      	movs	r0, #225	@ 0xe1
 8001706:	f7ff fdfd 	bl	8001304 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <ST7789_Init+0x148>)
 800170c:	463c      	mov	r4, r7
 800170e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001710:	c407      	stmia	r4!, {r0, r1, r2}
 8001712:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001714:	463b      	mov	r3, r7
 8001716:	210e      	movs	r1, #14
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fe0f 	bl	800133c <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800171e:	2021      	movs	r0, #33	@ 0x21
 8001720:	f7ff fdf0 	bl	8001304 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001724:	2011      	movs	r0, #17
 8001726:	f7ff fded 	bl	8001304 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800172a:	2013      	movs	r0, #19
 800172c:	f7ff fdea 	bl	8001304 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8001730:	2029      	movs	r0, #41	@ 0x29
 8001732:	f7ff fde7 	bl	8001304 <ST7789_WriteCommand>

  	delay(120);
 8001736:	2078      	movs	r0, #120	@ 0x78
 8001738:	f7fe ff32 	bl	80005a0 <delay>

  	GPIOB->BSRR = GPIOB_BSRR_SET_PB4;  // Set PB4 high
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <ST7789_Init+0x13c>)
 800173e:	2210      	movs	r2, #16
 8001740:	619a      	str	r2, [r3, #24]

  	delay(50);
 8001742:	2032      	movs	r0, #50	@ 0x32
 8001744:	f7fe ff2c 	bl	80005a0 <delay>
	ST7789_Fill_Color(LIGHT_BLUE);				//	Fill with Black.
 8001748:	f244 30bb 	movw	r0, #17339	@ 0x43bb
 800174c:	f7ff fe7a 	bl	8001444 <ST7789_Fill_Color>
}
 8001750:	bf00      	nop
 8001752:	372c      	adds	r7, #44	@ 0x2c
 8001754:	46bd      	mov	sp, r7
 8001756:	bd90      	pop	{r4, r7, pc}
 8001758:	40020400 	.word	0x40020400
 800175c:	08003950 	.word	0x08003950
 8001760:	08003958 	.word	0x08003958
 8001764:	08003968 	.word	0x08003968

08001768 <ST7789_DrawPixel>:

void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
 8001772:	460b      	mov	r3, r1
 8001774:	80bb      	strh	r3, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	2bef      	cmp	r3, #239	@ 0xef
 800177e:	d818      	bhi.n	80017b2 <ST7789_DrawPixel+0x4a>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001786:	d214      	bcs.n	80017b2 <ST7789_DrawPixel+0x4a>

	ST7789_SetAddressWindow(x, y, x, y);
 8001788:	88bb      	ldrh	r3, [r7, #4]
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	88b9      	ldrh	r1, [r7, #4]
 800178e:	88f8      	ldrh	r0, [r7, #6]
 8001790:	f7ff fe08 	bl	80013a4 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	733b      	strb	r3, [r7, #12]
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	737b      	strb	r3, [r7, #13]
	ST7789_WriteData(data, sizeof(data));
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2102      	movs	r1, #2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fdc6 	bl	800133c <ST7789_WriteData>
 80017b0:	e000      	b.n	80017b4 <ST7789_DrawPixel+0x4c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80017b2:	bf00      	nop
}
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <ST7789_DrawImage>:


void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t width, uint16_t height, const uint16_t *imageData)
{
 80017ba:	b590      	push	{r4, r7, lr}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4604      	mov	r4, r0
 80017c2:	4608      	mov	r0, r1
 80017c4:	4611      	mov	r1, r2
 80017c6:	461a      	mov	r2, r3
 80017c8:	4623      	mov	r3, r4
 80017ca:	80fb      	strh	r3, [r7, #6]
 80017cc:	4603      	mov	r3, r0
 80017ce:	80bb      	strh	r3, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < height; row++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	81fb      	strh	r3, [r7, #14]
 80017dc:	e023      	b.n	8001826 <ST7789_DrawImage+0x6c>
        for (uint16_t col = 0; col < width; col++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	81bb      	strh	r3, [r7, #12]
 80017e2:	e019      	b.n	8001818 <ST7789_DrawImage+0x5e>
            uint16_t color = imageData[row * width + col];
 80017e4:	89fb      	ldrh	r3, [r7, #14]
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	fb03 f202 	mul.w	r2, r3, r2
 80017ec:	89bb      	ldrh	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	6a3a      	ldr	r2, [r7, #32]
 80017f4:	4413      	add	r3, r2
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	817b      	strh	r3, [r7, #10]
            ST7789_DrawPixel(x + col, y + row, color);
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	89bb      	ldrh	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	b298      	uxth	r0, r3
 8001802:	88ba      	ldrh	r2, [r7, #4]
 8001804:	89fb      	ldrh	r3, [r7, #14]
 8001806:	4413      	add	r3, r2
 8001808:	b29b      	uxth	r3, r3
 800180a:	897a      	ldrh	r2, [r7, #10]
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff ffab 	bl	8001768 <ST7789_DrawPixel>
        for (uint16_t col = 0; col < width; col++) {
 8001812:	89bb      	ldrh	r3, [r7, #12]
 8001814:	3301      	adds	r3, #1
 8001816:	81bb      	strh	r3, [r7, #12]
 8001818:	89ba      	ldrh	r2, [r7, #12]
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3e1      	bcc.n	80017e4 <ST7789_DrawImage+0x2a>
    for (uint16_t row = 0; row < height; row++) {
 8001820:	89fb      	ldrh	r3, [r7, #14]
 8001822:	3301      	adds	r3, #1
 8001824:	81fb      	strh	r3, [r7, #14]
 8001826:	89fa      	ldrh	r2, [r7, #14]
 8001828:	883b      	ldrh	r3, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d3d7      	bcc.n	80017de <ST7789_DrawImage+0x24>
        }
    }
}
 800182e:	bf00      	nop
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <NMI_Handler+0x4>

08001840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <MemManage_Handler+0x4>

08001850 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <UsageFault_Handler+0x4>

08001860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_kill>:

int _kill(int pid, int sig)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a4:	f001 f986 	bl	8002bb4 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2216      	movs	r2, #22
 80018ac:	601a      	str	r2, [r3, #0]
  return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_exit>:

void _exit (int status)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c2:	f04f 31ff 	mov.w	r1, #4294967295
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffe7 	bl	800189a <_kill>
  while (1) {}    /* Make sure we hang here */
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <_exit+0x12>

080018d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e2:	f000 f923 	bl	8001b2c <__io_getchar>
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
  }

  return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e009      	b.n	8001930 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f8f3 	bl	8001b10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf1      	blt.n	800191c <_write+0x12>
  }
  return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_close>:

int _close(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800196a:	605a      	str	r2, [r3, #4]
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_isatty>:

int _isatty(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	@ (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f001 f8ea 	bl	8002bb4 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20020000 	.word	0x20020000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	2000009c 	.word	0x2000009c
 8001a14:	200001f0 	.word	0x200001f0

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <usart_init>:
 *  usart get and put and usart init
 */

#include "usart.h"

void usart_init() {
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 8001a40:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <usart_init+0x70>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	4a19      	ldr	r2, [pc, #100]	@ (8001aac <usart_init+0x70>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 8001a4c:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <usart_init+0x70>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	4a16      	ldr	r2, [pc, #88]	@ (8001aac <usart_init+0x70>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 and PA3 as alternate function
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER2_Pos);
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <usart_init+0x74>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <usart_init+0x74>)
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER3_Pos);
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <usart_init+0x74>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <usart_init+0x74>)
 8001a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a6e:	6013      	str	r3, [r2, #0]

    // Set PA2 to USART_TX and PA3 to USART_RX
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos); // TX alternate function
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <usart_init+0x74>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab0 <usart_init+0x74>)
 8001a76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a7a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL3_Pos); // RX alternate function
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <usart_init+0x74>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <usart_init+0x74>)
 8001a82:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001a86:	6213      	str	r3, [r2, #32]

    // Enable USART, transmitter, and receiver
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <usart_init+0x78>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <usart_init+0x78>)
 8001a8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a92:	f043 030c 	orr.w	r3, r3, #12
 8001a96:	60d3      	str	r3, [r2, #12]

    // Set baud rate to 9600 (make sure BAUD_9600 is defined based on your clock setup)
    USART2->BRR = BAUD_9600;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <usart_init+0x78>)
 8001a9a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001a9e:	609a      	str	r2, [r3, #8]

    // Test character output to verify USART setup
   // USART2->DR = 'B';
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40004400 	.word	0x40004400

08001ab8 <usart_out>:

void usart_out(char ch) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)) {
 8001ac2:	bf00      	nop
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <usart_out+0x2c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f9      	beq.n	8001ac4 <usart_out+0xc>
        // Wait until transmit buffer is empty
    }
    USART2->DR = ch;
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <usart_out+0x2c>)
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	6053      	str	r3, [r2, #4]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40004400 	.word	0x40004400

08001ae8 <usart_get>:
    while (*string) {
        usart_out(*string++);
    }
}

char usart_get() {
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE)) {
 8001aec:	bf00      	nop
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <usart_get+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f9      	beq.n	8001aee <usart_get+0x6>
        // Wait until receive buffer is not empty
    }
    return USART2->DR;
 8001afa:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <usart_get+0x24>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	b2db      	uxtb	r3, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40004400 	.word	0x40004400

08001b10 <__io_putchar>:

// Override weak symbols for printf and getchar compatibility
int __io_putchar(int ch) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    usart_out((char)ch); // Send character using USART
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ffcb 	bl	8001ab8 <usart_out>
    return ch;           // Return the character for compatibility
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <__io_getchar>:

int __io_getchar(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
    return usart_get();  // Receive character using USART
 8001b30:	f7ff ffda 	bl	8001ae8 <usart_get>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <Reset_Handler>:
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b74 <LoopFillZerobss+0xe>
 8001b40:	f7ff ff6a 	bl	8001a18 <SystemInit>
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <LoopFillZerobss+0x12>)
 8001b46:	490d      	ldr	r1, [pc, #52]	@ (8001b7c <LoopFillZerobss+0x16>)
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <LoopFillZerobss+0x1a>)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:
 8001b4e:	58d4      	ldr	r4, [r2, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:
 8001b54:	18c4      	adds	r4, r0, r3
 8001b56:	428c      	cmp	r4, r1
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <LoopFillZerobss+0x1e>)
 8001b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b88 <LoopFillZerobss+0x22>)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:
 8001b66:	42a2      	cmp	r2, r4
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>
 8001b6a:	f001 f829 	bl	8002bc0 <__libc_init_array>
 8001b6e:	f7ff f98f 	bl	8000e90 <main>
 8001b72:	4770      	bx	lr
 8001b74:	20020000 	.word	0x20020000
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000068 	.word	0x20000068
 8001b80:	08006d5c 	.word	0x08006d5c
 8001b84:	20000068 	.word	0x20000068
 8001b88:	200001f0 	.word	0x200001f0

08001b8c <ADC_IRQHandler>:
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>
	...

08001b90 <HAL_InitTick>:
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_InitTick+0x54>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_InitTick+0x58>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f8d4 	bl	8001d5c <HAL_SYSTICK_Config>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_InitTick+0x2e>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00e      	b.n	8001bdc <HAL_InitTick+0x4c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b0f      	cmp	r3, #15
 8001bc2:	d80a      	bhi.n	8001bda <HAL_InitTick+0x4a>
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f000 f8aa 	bl	8001d24 <HAL_NVIC_SetPriority>
 8001bd0:	4a06      	ldr	r2, [pc, #24]	@ (8001bec <HAL_InitTick+0x5c>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e000      	b.n	8001bdc <HAL_InitTick+0x4c>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000000 	.word	0x20000000
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_GetTick>:
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	200000a0 	.word	0x200000a0

08001c08 <__NVIC_GetPriorityGrouping>:
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_SetPriority>:
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	@ (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	@ (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	@ 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	2300      	movs	r3, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriority>:
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	f7ff ff67 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d3a:	6178      	str	r0, [r7, #20]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	6978      	ldr	r0, [r7, #20]
 8001d42:	f7ff ff99 	bl	8001c78 <NVIC_EncodePriority>
 8001d46:	4602      	mov	r2, r0
 8001d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff68 	bl	8001c24 <__NVIC_SetPriority>
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_SYSTICK_Config>:
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ffbb 	bl	8001ce0 <SysTick_Config>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_RCC_OscConfig>:
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x12>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e267      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d075      	beq.n	8001e7e <HAL_RCC_OscConfig+0x10a>
 8001d92:	4b88      	ldr	r3, [pc, #544]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d00c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x44>
 8001d9e:	4b85      	ldr	r3, [pc, #532]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d112      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x5c>
 8001daa:	4b82      	ldr	r3, [pc, #520]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001db6:	d10b      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x5c>
 8001db8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d05b      	beq.n	8001e7c <HAL_RCC_OscConfig+0x108>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d157      	bne.n	8001e7c <HAL_RCC_OscConfig+0x108>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e242      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd8:	d106      	bne.n	8001de8 <HAL_RCC_OscConfig+0x74>
 8001dda:	4b76      	ldr	r3, [pc, #472]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a75      	ldr	r2, [pc, #468]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e01d      	b.n	8001e24 <HAL_RCC_OscConfig+0xb0>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x98>
 8001df2:	4b70      	ldr	r3, [pc, #448]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6f      	ldr	r2, [pc, #444]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6c      	ldr	r2, [pc, #432]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0xb0>
 8001e0c:	4b69      	ldr	r3, [pc, #420]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a68      	ldr	r2, [pc, #416]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b66      	ldr	r3, [pc, #408]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a65      	ldr	r2, [pc, #404]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_RCC_OscConfig+0xe0>
 8001e2c:	f7ff fee0 	bl	8001bf0 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xd2>
 8001e34:	f7ff fedc 	bl	8001bf0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	@ 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xd2>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e207      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8001e46:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0xc0>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x10a>
 8001e54:	f7ff fecc 	bl	8001bf0 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xfa>
 8001e5c:	f7ff fec8 	bl	8001bf0 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	@ 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xfa>
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e1f3      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8001e6e:	4b51      	ldr	r3, [pc, #324]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0xe8>
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x10a>
 8001e7c:	bf00      	nop
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d063      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1de>
 8001e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_RCC_OscConfig+0x13a>
 8001e96:	4b47      	ldr	r3, [pc, #284]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d11c      	bne.n	8001edc <HAL_RCC_OscConfig+0x168>
 8001ea2:	4b44      	ldr	r3, [pc, #272]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d116      	bne.n	8001edc <HAL_RCC_OscConfig+0x168>
 8001eae:	4b41      	ldr	r3, [pc, #260]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x152>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x152>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e1c7      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4937      	ldr	r1, [pc, #220]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
 8001eda:	e03a      	b.n	8001f52 <HAL_RCC_OscConfig+0x1de>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1b2>
 8001ee4:	4b34      	ldr	r3, [pc, #208]	@ (8001fb8 <HAL_RCC_OscConfig+0x244>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	f7ff fe81 	bl	8001bf0 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x190>
 8001ef2:	f7ff fe7d 	bl	8001bf0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x190>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e1a8      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8001f04:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x17e>
 8001f10:	4b28      	ldr	r3, [pc, #160]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4925      	ldr	r1, [pc, #148]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x1de>
 8001f26:	4b24      	ldr	r3, [pc, #144]	@ (8001fb8 <HAL_RCC_OscConfig+0x244>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f7ff fe60 	bl	8001bf0 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x1d2>
 8001f34:	f7ff fe5c 	bl	8001bf0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x1d2>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e187      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8001f46:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x1c0>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d036      	beq.n	8001fcc <HAL_RCC_OscConfig+0x258>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d016      	beq.n	8001f94 <HAL_RCC_OscConfig+0x220>
 8001f66:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <HAL_RCC_OscConfig+0x248>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f7ff fe40 	bl	8001bf0 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x212>
 8001f74:	f7ff fe3c 	bl	8001bf0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x212>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e167      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x200>
 8001f92:	e01b      	b.n	8001fcc <HAL_RCC_OscConfig+0x258>
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_RCC_OscConfig+0x248>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f7ff fe29 	bl	8001bf0 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]
 8001fa0:	e00e      	b.n	8001fc0 <HAL_RCC_OscConfig+0x24c>
 8001fa2:	f7ff fe25 	bl	8001bf0 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d907      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x24c>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e150      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	42470000 	.word	0x42470000
 8001fbc:	42470e80 	.word	0x42470e80
 8001fc0:	4b88      	ldr	r3, [pc, #544]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ea      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x22e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8097 	beq.w	8002108 <HAL_RCC_OscConfig+0x394>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]
 8001fde:	4b81      	ldr	r3, [pc, #516]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <HAL_RCC_OscConfig+0x296>
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4b7d      	ldr	r3, [pc, #500]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2301      	movs	r3, #1
 8002008:	75fb      	strb	r3, [r7, #23]
 800200a:	4b77      	ldr	r3, [pc, #476]	@ (80021e8 <HAL_RCC_OscConfig+0x474>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d118      	bne.n	8002048 <HAL_RCC_OscConfig+0x2d4>
 8002016:	4b74      	ldr	r3, [pc, #464]	@ (80021e8 <HAL_RCC_OscConfig+0x474>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a73      	ldr	r2, [pc, #460]	@ (80021e8 <HAL_RCC_OscConfig+0x474>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	f7ff fde5 	bl	8001bf0 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x2c8>
 800202a:	f7ff fde1 	bl	8001bf0 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x2c8>
 8002038:	2303      	movs	r3, #3
 800203a:	e10c      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 800203c:	4b6a      	ldr	r3, [pc, #424]	@ (80021e8 <HAL_RCC_OscConfig+0x474>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x2b6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x2ea>
 8002050:	4b64      	ldr	r3, [pc, #400]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002054:	4a63      	ldr	r2, [pc, #396]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6713      	str	r3, [r2, #112]	@ 0x70
 800205c:	e01c      	b.n	8002098 <HAL_RCC_OscConfig+0x324>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b05      	cmp	r3, #5
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x30c>
 8002066:	4b5f      	ldr	r3, [pc, #380]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206a:	4a5e      	ldr	r2, [pc, #376]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6713      	str	r3, [r2, #112]	@ 0x70
 8002072:	4b5c      	ldr	r3, [pc, #368]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002076:	4a5b      	ldr	r2, [pc, #364]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6713      	str	r3, [r2, #112]	@ 0x70
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0x324>
 8002080:	4b58      	ldr	r3, [pc, #352]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002084:	4a57      	ldr	r2, [pc, #348]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	6713      	str	r3, [r2, #112]	@ 0x70
 800208c:	4b55      	ldr	r3, [pc, #340]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002090:	4a54      	ldr	r2, [pc, #336]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	6713      	str	r3, [r2, #112]	@ 0x70
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d015      	beq.n	80020cc <HAL_RCC_OscConfig+0x358>
 80020a0:	f7ff fda6 	bl	8001bf0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x34a>
 80020a8:	f7ff fda2 	bl	8001bf0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x34a>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0cb      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 80020be:	4b49      	ldr	r3, [pc, #292]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0ee      	beq.n	80020a8 <HAL_RCC_OscConfig+0x334>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x382>
 80020cc:	f7ff fd90 	bl	8001bf0 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x376>
 80020d4:	f7ff fd8c 	bl	8001bf0 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x376>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0b5      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 80020ea:	4b3e      	ldr	r3, [pc, #248]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1ee      	bne.n	80020d4 <HAL_RCC_OscConfig+0x360>
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x394>
 80020fc:	4b39      	ldr	r3, [pc, #228]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	4a38      	ldr	r2, [pc, #224]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002106:	6413      	str	r3, [r2, #64]	@ 0x40
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a1 	beq.w	8002254 <HAL_RCC_OscConfig+0x4e0>
 8002112:	4b34      	ldr	r3, [pc, #208]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	d05c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x464>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d141      	bne.n	80021aa <HAL_RCC_OscConfig+0x436>
 8002126:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <HAL_RCC_OscConfig+0x478>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f7ff fd60 	bl	8001bf0 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x3d2>
 8002134:	f7ff fd5c 	bl	8001bf0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x3d2>
 8002142:	2303      	movs	r3, #3
 8002144:	e087      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8002146:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x3c0>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	3b01      	subs	r3, #1
 800216c:	041b      	lsls	r3, r3, #16
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	491b      	ldr	r1, [pc, #108]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HAL_RCC_OscConfig+0x478>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f7ff fd35 	bl	8001bf0 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x428>
 800218a:	f7ff fd31 	bl	8001bf0 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x428>
 8002198:	2303      	movs	r3, #3
 800219a:	e05c      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x416>
 80021a8:	e054      	b.n	8002254 <HAL_RCC_OscConfig+0x4e0>
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <HAL_RCC_OscConfig+0x478>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f7ff fd1e 	bl	8001bf0 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x456>
 80021b8:	f7ff fd1a 	bl	8001bf0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x456>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e045      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x444>
 80021d6:	e03d      	b.n	8002254 <HAL_RCC_OscConfig+0x4e0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_OscConfig+0x47c>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e038      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40007000 	.word	0x40007000
 80021ec:	42470060 	.word	0x42470060
 80021f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_RCC_OscConfig+0x4ec>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d028      	beq.n	8002250 <HAL_RCC_OscConfig+0x4dc>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	429a      	cmp	r2, r3
 800220a:	d121      	bne.n	8002250 <HAL_RCC_OscConfig+0x4dc>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	429a      	cmp	r2, r3
 8002218:	d11a      	bne.n	8002250 <HAL_RCC_OscConfig+0x4dc>
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002220:	4013      	ands	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002226:	0192      	lsls	r2, r2, #6
 8002228:	4293      	cmp	r3, r2
 800222a:	d111      	bne.n	8002250 <HAL_RCC_OscConfig+0x4dc>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	3b01      	subs	r3, #1
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	429a      	cmp	r2, r3
 800223e:	d107      	bne.n	8002250 <HAL_RCC_OscConfig+0x4dc>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	061b      	lsls	r3, r3, #24
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_OscConfig+0x4e0>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8002254:	2300      	movs	r3, #0
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800

08002264 <HAL_RCC_ClockConfig>:
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0x14>
 8002274:	2301      	movs	r3, #1
 8002276:	e0cc      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
 8002278:	4b68      	ldr	r3, [pc, #416]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d90c      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x3c>
 8002286:	4b65      	ldr	r3, [pc, #404]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	4b63      	ldr	r3, [pc, #396]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x3c>
 800229c:	2301      	movs	r3, #1
 800229e:	e0b8      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_ClockConfig+0x8a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x60>
 80022b8:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a58      	ldr	r2, [pc, #352]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022c2:	6093      	str	r3, [r2, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x78>
 80022d0:	4b53      	ldr	r3, [pc, #332]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a52      	ldr	r2, [pc, #328]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022da:	6093      	str	r3, [r2, #8]
 80022dc:	4b50      	ldr	r3, [pc, #320]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	494d      	ldr	r1, [pc, #308]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d044      	beq.n	8002384 <HAL_RCC_ClockConfig+0x120>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d107      	bne.n	8002312 <HAL_RCC_ClockConfig+0xae>
 8002302:	4b47      	ldr	r3, [pc, #284]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d119      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
 800230e:	2301      	movs	r3, #1
 8002310:	e07f      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d003      	beq.n	8002322 <HAL_RCC_ClockConfig+0xbe>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xce>
 8002322:	4b3f      	ldr	r3, [pc, #252]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
 800232e:	2301      	movs	r3, #1
 8002330:	e06f      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
 8002332:	4b3b      	ldr	r3, [pc, #236]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
 800233e:	2301      	movs	r3, #1
 8002340:	e067      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
 8002342:	4b37      	ldr	r3, [pc, #220]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4934      	ldr	r1, [pc, #208]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
 8002354:	f7ff fc4c 	bl	8001bf0 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	e00a      	b.n	8002372 <HAL_RCC_ClockConfig+0x10e>
 800235c:	f7ff fc48 	bl	8001bf0 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x10e>
 800236e:	2303      	movs	r3, #3
 8002370:	e04f      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
 8002372:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 020c 	and.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	429a      	cmp	r2, r3
 8002382:	d1eb      	bne.n	800235c <HAL_RCC_ClockConfig+0xf8>
 8002384:	4b25      	ldr	r3, [pc, #148]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d20c      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x148>
 8002392:	4b22      	ldr	r3, [pc, #136]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x148>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e032      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCC_ClockConfig+0x166>
 80023b8:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4916      	ldr	r1, [pc, #88]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <HAL_RCC_ClockConfig+0x186>
 80023d6:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	490e      	ldr	r1, [pc, #56]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
 80023ea:	f000 f821 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	490a      	ldr	r1, [pc, #40]	@ (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	5ccb      	ldrb	r3, [r1, r3]
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	4a09      	ldr	r2, [pc, #36]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fbc0 	bl	8001b90 <HAL_InitTick>
 8002410:	2300      	movs	r3, #0
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023c00 	.word	0x40023c00
 8002420:	40023800 	.word	0x40023800
 8002424:	08006c5c 	.word	0x08006c5c
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
 8002430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002434:	b094      	sub	sp, #80	@ 0x50
 8002436:	af00      	add	r7, sp, #0
 8002438:	2300      	movs	r3, #0
 800243a:	647b      	str	r3, [r7, #68]	@ 0x44
 800243c:	2300      	movs	r3, #0
 800243e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002440:	2300      	movs	r3, #0
 8002442:	643b      	str	r3, [r7, #64]	@ 0x40
 8002444:	2300      	movs	r3, #0
 8002446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002448:	4b79      	ldr	r3, [pc, #484]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x200>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d00d      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x40>
 8002454:	2b08      	cmp	r3, #8
 8002456:	f200 80e1 	bhi.w	800261c <HAL_RCC_GetSysClockFreq+0x1ec>
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x34>
 800245e:	2b04      	cmp	r3, #4
 8002460:	d003      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x3a>
 8002462:	e0db      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002464:	4b73      	ldr	r3, [pc, #460]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x204>)
 8002466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002468:	e0db      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x1f2>
 800246a:	4b73      	ldr	r3, [pc, #460]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x208>)
 800246c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800246e:	e0d8      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x1f2>
 8002470:	4b6f      	ldr	r3, [pc, #444]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x200>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002478:	647b      	str	r3, [r7, #68]	@ 0x44
 800247a:	4b6d      	ldr	r3, [pc, #436]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x200>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d063      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x11e>
 8002486:	4b6a      	ldr	r3, [pc, #424]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x200>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	099b      	lsrs	r3, r3, #6
 800248c:	2200      	movs	r2, #0
 800248e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002490:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002498:	633b      	str	r3, [r7, #48]	@ 0x30
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	@ 0x34
 800249e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024a2:	4622      	mov	r2, r4
 80024a4:	462b      	mov	r3, r5
 80024a6:	f04f 0000 	mov.w	r0, #0
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	0159      	lsls	r1, r3, #5
 80024b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b4:	0150      	lsls	r0, r2, #5
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4621      	mov	r1, r4
 80024bc:	1a51      	subs	r1, r2, r1
 80024be:	6139      	str	r1, [r7, #16]
 80024c0:	4629      	mov	r1, r5
 80024c2:	eb63 0301 	sbc.w	r3, r3, r1
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024d4:	4659      	mov	r1, fp
 80024d6:	018b      	lsls	r3, r1, #6
 80024d8:	4651      	mov	r1, sl
 80024da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024de:	4651      	mov	r1, sl
 80024e0:	018a      	lsls	r2, r1, #6
 80024e2:	4651      	mov	r1, sl
 80024e4:	ebb2 0801 	subs.w	r8, r2, r1
 80024e8:	4659      	mov	r1, fp
 80024ea:	eb63 0901 	sbc.w	r9, r3, r1
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002502:	4690      	mov	r8, r2
 8002504:	4699      	mov	r9, r3
 8002506:	4623      	mov	r3, r4
 8002508:	eb18 0303 	adds.w	r3, r8, r3
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	462b      	mov	r3, r5
 8002510:	eb49 0303 	adc.w	r3, r9, r3
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002522:	4629      	mov	r1, r5
 8002524:	024b      	lsls	r3, r1, #9
 8002526:	4621      	mov	r1, r4
 8002528:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800252c:	4621      	mov	r1, r4
 800252e:	024a      	lsls	r2, r1, #9
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002536:	2200      	movs	r2, #0
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800253a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800253c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002540:	f7fd fe9e 	bl	8000280 <__aeabi_uldivmod>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4613      	mov	r3, r2
 800254a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800254c:	e058      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x1d0>
 800254e:	4b38      	ldr	r3, [pc, #224]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x200>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	2200      	movs	r2, #0
 8002556:	4618      	mov	r0, r3
 8002558:	4611      	mov	r1, r2
 800255a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	2300      	movs	r3, #0
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
 8002564:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002568:	4642      	mov	r2, r8
 800256a:	464b      	mov	r3, r9
 800256c:	f04f 0000 	mov.w	r0, #0
 8002570:	f04f 0100 	mov.w	r1, #0
 8002574:	0159      	lsls	r1, r3, #5
 8002576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800257a:	0150      	lsls	r0, r2, #5
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4641      	mov	r1, r8
 8002582:	ebb2 0a01 	subs.w	sl, r2, r1
 8002586:	4649      	mov	r1, r9
 8002588:	eb63 0b01 	sbc.w	fp, r3, r1
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002598:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800259c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025a0:	ebb2 040a 	subs.w	r4, r2, sl
 80025a4:	eb63 050b 	sbc.w	r5, r3, fp
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	00eb      	lsls	r3, r5, #3
 80025b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025b6:	00e2      	lsls	r2, r4, #3
 80025b8:	4614      	mov	r4, r2
 80025ba:	461d      	mov	r5, r3
 80025bc:	4643      	mov	r3, r8
 80025be:	18e3      	adds	r3, r4, r3
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	464b      	mov	r3, r9
 80025c4:	eb45 0303 	adc.w	r3, r5, r3
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025d6:	4629      	mov	r1, r5
 80025d8:	028b      	lsls	r3, r1, #10
 80025da:	4621      	mov	r1, r4
 80025dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025e0:	4621      	mov	r1, r4
 80025e2:	028a      	lsls	r2, r1, #10
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ea:	2200      	movs	r2, #0
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	61fa      	str	r2, [r7, #28]
 80025f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025f4:	f7fd fe44 	bl	8000280 <__aeabi_uldivmod>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4613      	mov	r3, r2
 80025fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x200>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	3301      	adds	r3, #1
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800261a:	e002      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x1f2>
 800261c:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x204>)
 800261e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002620:	bf00      	nop
 8002622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002624:	4618      	mov	r0, r3
 8002626:	3750      	adds	r7, #80	@ 0x50
 8002628:	46bd      	mov	sp, r7
 800262a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	00f42400 	.word	0x00f42400
 8002638:	007a1200 	.word	0x007a1200

0800263c <std>:
 800263c:	2300      	movs	r3, #0
 800263e:	b510      	push	{r4, lr}
 8002640:	4604      	mov	r4, r0
 8002642:	e9c0 3300 	strd	r3, r3, [r0]
 8002646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800264a:	6083      	str	r3, [r0, #8]
 800264c:	8181      	strh	r1, [r0, #12]
 800264e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002650:	81c2      	strh	r2, [r0, #14]
 8002652:	6183      	str	r3, [r0, #24]
 8002654:	4619      	mov	r1, r3
 8002656:	2208      	movs	r2, #8
 8002658:	305c      	adds	r0, #92	@ 0x5c
 800265a:	f000 fa01 	bl	8002a60 <memset>
 800265e:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <std+0x58>)
 8002660:	6263      	str	r3, [r4, #36]	@ 0x24
 8002662:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <std+0x5c>)
 8002664:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <std+0x60>)
 8002668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800266a:	4b0d      	ldr	r3, [pc, #52]	@ (80026a0 <std+0x64>)
 800266c:	6323      	str	r3, [r4, #48]	@ 0x30
 800266e:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <std+0x68>)
 8002670:	6224      	str	r4, [r4, #32]
 8002672:	429c      	cmp	r4, r3
 8002674:	d006      	beq.n	8002684 <std+0x48>
 8002676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800267a:	4294      	cmp	r4, r2
 800267c:	d002      	beq.n	8002684 <std+0x48>
 800267e:	33d0      	adds	r3, #208	@ 0xd0
 8002680:	429c      	cmp	r4, r3
 8002682:	d105      	bne.n	8002690 <std+0x54>
 8002684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800268c:	f000 babc 	b.w	8002c08 <__retarget_lock_init_recursive>
 8002690:	bd10      	pop	{r4, pc}
 8002692:	bf00      	nop
 8002694:	080028b1 	.word	0x080028b1
 8002698:	080028d3 	.word	0x080028d3
 800269c:	0800290b 	.word	0x0800290b
 80026a0:	0800292f 	.word	0x0800292f
 80026a4:	200000a4 	.word	0x200000a4

080026a8 <stdio_exit_handler>:
 80026a8:	4a02      	ldr	r2, [pc, #8]	@ (80026b4 <stdio_exit_handler+0xc>)
 80026aa:	4903      	ldr	r1, [pc, #12]	@ (80026b8 <stdio_exit_handler+0x10>)
 80026ac:	4803      	ldr	r0, [pc, #12]	@ (80026bc <stdio_exit_handler+0x14>)
 80026ae:	f000 b869 	b.w	8002784 <_fwalk_sglue>
 80026b2:	bf00      	nop
 80026b4:	2000000c 	.word	0x2000000c
 80026b8:	08003505 	.word	0x08003505
 80026bc:	2000001c 	.word	0x2000001c

080026c0 <cleanup_stdio>:
 80026c0:	6841      	ldr	r1, [r0, #4]
 80026c2:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <cleanup_stdio+0x34>)
 80026c4:	4299      	cmp	r1, r3
 80026c6:	b510      	push	{r4, lr}
 80026c8:	4604      	mov	r4, r0
 80026ca:	d001      	beq.n	80026d0 <cleanup_stdio+0x10>
 80026cc:	f000 ff1a 	bl	8003504 <_fflush_r>
 80026d0:	68a1      	ldr	r1, [r4, #8]
 80026d2:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <cleanup_stdio+0x38>)
 80026d4:	4299      	cmp	r1, r3
 80026d6:	d002      	beq.n	80026de <cleanup_stdio+0x1e>
 80026d8:	4620      	mov	r0, r4
 80026da:	f000 ff13 	bl	8003504 <_fflush_r>
 80026de:	68e1      	ldr	r1, [r4, #12]
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <cleanup_stdio+0x3c>)
 80026e2:	4299      	cmp	r1, r3
 80026e4:	d004      	beq.n	80026f0 <cleanup_stdio+0x30>
 80026e6:	4620      	mov	r0, r4
 80026e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026ec:	f000 bf0a 	b.w	8003504 <_fflush_r>
 80026f0:	bd10      	pop	{r4, pc}
 80026f2:	bf00      	nop
 80026f4:	200000a4 	.word	0x200000a4
 80026f8:	2000010c 	.word	0x2000010c
 80026fc:	20000174 	.word	0x20000174

08002700 <global_stdio_init.part.0>:
 8002700:	b510      	push	{r4, lr}
 8002702:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <global_stdio_init.part.0+0x30>)
 8002704:	4c0b      	ldr	r4, [pc, #44]	@ (8002734 <global_stdio_init.part.0+0x34>)
 8002706:	4a0c      	ldr	r2, [pc, #48]	@ (8002738 <global_stdio_init.part.0+0x38>)
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	4620      	mov	r0, r4
 800270c:	2200      	movs	r2, #0
 800270e:	2104      	movs	r1, #4
 8002710:	f7ff ff94 	bl	800263c <std>
 8002714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002718:	2201      	movs	r2, #1
 800271a:	2109      	movs	r1, #9
 800271c:	f7ff ff8e 	bl	800263c <std>
 8002720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002724:	2202      	movs	r2, #2
 8002726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800272a:	2112      	movs	r1, #18
 800272c:	f7ff bf86 	b.w	800263c <std>
 8002730:	200001dc 	.word	0x200001dc
 8002734:	200000a4 	.word	0x200000a4
 8002738:	080026a9 	.word	0x080026a9

0800273c <__sfp_lock_acquire>:
 800273c:	4801      	ldr	r0, [pc, #4]	@ (8002744 <__sfp_lock_acquire+0x8>)
 800273e:	f000 ba64 	b.w	8002c0a <__retarget_lock_acquire_recursive>
 8002742:	bf00      	nop
 8002744:	200001e5 	.word	0x200001e5

08002748 <__sfp_lock_release>:
 8002748:	4801      	ldr	r0, [pc, #4]	@ (8002750 <__sfp_lock_release+0x8>)
 800274a:	f000 ba5f 	b.w	8002c0c <__retarget_lock_release_recursive>
 800274e:	bf00      	nop
 8002750:	200001e5 	.word	0x200001e5

08002754 <__sinit>:
 8002754:	b510      	push	{r4, lr}
 8002756:	4604      	mov	r4, r0
 8002758:	f7ff fff0 	bl	800273c <__sfp_lock_acquire>
 800275c:	6a23      	ldr	r3, [r4, #32]
 800275e:	b11b      	cbz	r3, 8002768 <__sinit+0x14>
 8002760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002764:	f7ff bff0 	b.w	8002748 <__sfp_lock_release>
 8002768:	4b04      	ldr	r3, [pc, #16]	@ (800277c <__sinit+0x28>)
 800276a:	6223      	str	r3, [r4, #32]
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <__sinit+0x2c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f5      	bne.n	8002760 <__sinit+0xc>
 8002774:	f7ff ffc4 	bl	8002700 <global_stdio_init.part.0>
 8002778:	e7f2      	b.n	8002760 <__sinit+0xc>
 800277a:	bf00      	nop
 800277c:	080026c1 	.word	0x080026c1
 8002780:	200001dc 	.word	0x200001dc

08002784 <_fwalk_sglue>:
 8002784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002788:	4607      	mov	r7, r0
 800278a:	4688      	mov	r8, r1
 800278c:	4614      	mov	r4, r2
 800278e:	2600      	movs	r6, #0
 8002790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002794:	f1b9 0901 	subs.w	r9, r9, #1
 8002798:	d505      	bpl.n	80027a6 <_fwalk_sglue+0x22>
 800279a:	6824      	ldr	r4, [r4, #0]
 800279c:	2c00      	cmp	r4, #0
 800279e:	d1f7      	bne.n	8002790 <_fwalk_sglue+0xc>
 80027a0:	4630      	mov	r0, r6
 80027a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027a6:	89ab      	ldrh	r3, [r5, #12]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d907      	bls.n	80027bc <_fwalk_sglue+0x38>
 80027ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027b0:	3301      	adds	r3, #1
 80027b2:	d003      	beq.n	80027bc <_fwalk_sglue+0x38>
 80027b4:	4629      	mov	r1, r5
 80027b6:	4638      	mov	r0, r7
 80027b8:	47c0      	blx	r8
 80027ba:	4306      	orrs	r6, r0
 80027bc:	3568      	adds	r5, #104	@ 0x68
 80027be:	e7e9      	b.n	8002794 <_fwalk_sglue+0x10>

080027c0 <iprintf>:
 80027c0:	b40f      	push	{r0, r1, r2, r3}
 80027c2:	b507      	push	{r0, r1, r2, lr}
 80027c4:	4906      	ldr	r1, [pc, #24]	@ (80027e0 <iprintf+0x20>)
 80027c6:	ab04      	add	r3, sp, #16
 80027c8:	6808      	ldr	r0, [r1, #0]
 80027ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80027ce:	6881      	ldr	r1, [r0, #8]
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	f000 fb6d 	bl	8002eb0 <_vfiprintf_r>
 80027d6:	b003      	add	sp, #12
 80027d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80027dc:	b004      	add	sp, #16
 80027de:	4770      	bx	lr
 80027e0:	20000018 	.word	0x20000018

080027e4 <putchar>:
 80027e4:	4b02      	ldr	r3, [pc, #8]	@ (80027f0 <putchar+0xc>)
 80027e6:	4601      	mov	r1, r0
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	6882      	ldr	r2, [r0, #8]
 80027ec:	f000 bf26 	b.w	800363c <_putc_r>
 80027f0:	20000018 	.word	0x20000018

080027f4 <_puts_r>:
 80027f4:	6a03      	ldr	r3, [r0, #32]
 80027f6:	b570      	push	{r4, r5, r6, lr}
 80027f8:	6884      	ldr	r4, [r0, #8]
 80027fa:	4605      	mov	r5, r0
 80027fc:	460e      	mov	r6, r1
 80027fe:	b90b      	cbnz	r3, 8002804 <_puts_r+0x10>
 8002800:	f7ff ffa8 	bl	8002754 <__sinit>
 8002804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002806:	07db      	lsls	r3, r3, #31
 8002808:	d405      	bmi.n	8002816 <_puts_r+0x22>
 800280a:	89a3      	ldrh	r3, [r4, #12]
 800280c:	0598      	lsls	r0, r3, #22
 800280e:	d402      	bmi.n	8002816 <_puts_r+0x22>
 8002810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002812:	f000 f9fa 	bl	8002c0a <__retarget_lock_acquire_recursive>
 8002816:	89a3      	ldrh	r3, [r4, #12]
 8002818:	0719      	lsls	r1, r3, #28
 800281a:	d502      	bpl.n	8002822 <_puts_r+0x2e>
 800281c:	6923      	ldr	r3, [r4, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d135      	bne.n	800288e <_puts_r+0x9a>
 8002822:	4621      	mov	r1, r4
 8002824:	4628      	mov	r0, r5
 8002826:	f000 f8c5 	bl	80029b4 <__swsetup_r>
 800282a:	b380      	cbz	r0, 800288e <_puts_r+0x9a>
 800282c:	f04f 35ff 	mov.w	r5, #4294967295
 8002830:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002832:	07da      	lsls	r2, r3, #31
 8002834:	d405      	bmi.n	8002842 <_puts_r+0x4e>
 8002836:	89a3      	ldrh	r3, [r4, #12]
 8002838:	059b      	lsls	r3, r3, #22
 800283a:	d402      	bmi.n	8002842 <_puts_r+0x4e>
 800283c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800283e:	f000 f9e5 	bl	8002c0c <__retarget_lock_release_recursive>
 8002842:	4628      	mov	r0, r5
 8002844:	bd70      	pop	{r4, r5, r6, pc}
 8002846:	2b00      	cmp	r3, #0
 8002848:	da04      	bge.n	8002854 <_puts_r+0x60>
 800284a:	69a2      	ldr	r2, [r4, #24]
 800284c:	429a      	cmp	r2, r3
 800284e:	dc17      	bgt.n	8002880 <_puts_r+0x8c>
 8002850:	290a      	cmp	r1, #10
 8002852:	d015      	beq.n	8002880 <_puts_r+0x8c>
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	6022      	str	r2, [r4, #0]
 800285a:	7019      	strb	r1, [r3, #0]
 800285c:	68a3      	ldr	r3, [r4, #8]
 800285e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002862:	3b01      	subs	r3, #1
 8002864:	60a3      	str	r3, [r4, #8]
 8002866:	2900      	cmp	r1, #0
 8002868:	d1ed      	bne.n	8002846 <_puts_r+0x52>
 800286a:	2b00      	cmp	r3, #0
 800286c:	da11      	bge.n	8002892 <_puts_r+0x9e>
 800286e:	4622      	mov	r2, r4
 8002870:	210a      	movs	r1, #10
 8002872:	4628      	mov	r0, r5
 8002874:	f000 f85f 	bl	8002936 <__swbuf_r>
 8002878:	3001      	adds	r0, #1
 800287a:	d0d7      	beq.n	800282c <_puts_r+0x38>
 800287c:	250a      	movs	r5, #10
 800287e:	e7d7      	b.n	8002830 <_puts_r+0x3c>
 8002880:	4622      	mov	r2, r4
 8002882:	4628      	mov	r0, r5
 8002884:	f000 f857 	bl	8002936 <__swbuf_r>
 8002888:	3001      	adds	r0, #1
 800288a:	d1e7      	bne.n	800285c <_puts_r+0x68>
 800288c:	e7ce      	b.n	800282c <_puts_r+0x38>
 800288e:	3e01      	subs	r6, #1
 8002890:	e7e4      	b.n	800285c <_puts_r+0x68>
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	6022      	str	r2, [r4, #0]
 8002898:	220a      	movs	r2, #10
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e7ee      	b.n	800287c <_puts_r+0x88>
	...

080028a0 <puts>:
 80028a0:	4b02      	ldr	r3, [pc, #8]	@ (80028ac <puts+0xc>)
 80028a2:	4601      	mov	r1, r0
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	f7ff bfa5 	b.w	80027f4 <_puts_r>
 80028aa:	bf00      	nop
 80028ac:	20000018 	.word	0x20000018

080028b0 <__sread>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	460c      	mov	r4, r1
 80028b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028b8:	f000 f958 	bl	8002b6c <_read_r>
 80028bc:	2800      	cmp	r0, #0
 80028be:	bfab      	itete	ge
 80028c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80028c2:	89a3      	ldrhlt	r3, [r4, #12]
 80028c4:	181b      	addge	r3, r3, r0
 80028c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80028ca:	bfac      	ite	ge
 80028cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80028ce:	81a3      	strhlt	r3, [r4, #12]
 80028d0:	bd10      	pop	{r4, pc}

080028d2 <__swrite>:
 80028d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028d6:	461f      	mov	r7, r3
 80028d8:	898b      	ldrh	r3, [r1, #12]
 80028da:	05db      	lsls	r3, r3, #23
 80028dc:	4605      	mov	r5, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	4616      	mov	r6, r2
 80028e2:	d505      	bpl.n	80028f0 <__swrite+0x1e>
 80028e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e8:	2302      	movs	r3, #2
 80028ea:	2200      	movs	r2, #0
 80028ec:	f000 f92c 	bl	8002b48 <_lseek_r>
 80028f0:	89a3      	ldrh	r3, [r4, #12]
 80028f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028fa:	81a3      	strh	r3, [r4, #12]
 80028fc:	4632      	mov	r2, r6
 80028fe:	463b      	mov	r3, r7
 8002900:	4628      	mov	r0, r5
 8002902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002906:	f000 b943 	b.w	8002b90 <_write_r>

0800290a <__sseek>:
 800290a:	b510      	push	{r4, lr}
 800290c:	460c      	mov	r4, r1
 800290e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002912:	f000 f919 	bl	8002b48 <_lseek_r>
 8002916:	1c43      	adds	r3, r0, #1
 8002918:	89a3      	ldrh	r3, [r4, #12]
 800291a:	bf15      	itete	ne
 800291c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800291e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002922:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002926:	81a3      	strheq	r3, [r4, #12]
 8002928:	bf18      	it	ne
 800292a:	81a3      	strhne	r3, [r4, #12]
 800292c:	bd10      	pop	{r4, pc}

0800292e <__sclose>:
 800292e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002932:	f000 b8f9 	b.w	8002b28 <_close_r>

08002936 <__swbuf_r>:
 8002936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002938:	460e      	mov	r6, r1
 800293a:	4614      	mov	r4, r2
 800293c:	4605      	mov	r5, r0
 800293e:	b118      	cbz	r0, 8002948 <__swbuf_r+0x12>
 8002940:	6a03      	ldr	r3, [r0, #32]
 8002942:	b90b      	cbnz	r3, 8002948 <__swbuf_r+0x12>
 8002944:	f7ff ff06 	bl	8002754 <__sinit>
 8002948:	69a3      	ldr	r3, [r4, #24]
 800294a:	60a3      	str	r3, [r4, #8]
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	071a      	lsls	r2, r3, #28
 8002950:	d501      	bpl.n	8002956 <__swbuf_r+0x20>
 8002952:	6923      	ldr	r3, [r4, #16]
 8002954:	b943      	cbnz	r3, 8002968 <__swbuf_r+0x32>
 8002956:	4621      	mov	r1, r4
 8002958:	4628      	mov	r0, r5
 800295a:	f000 f82b 	bl	80029b4 <__swsetup_r>
 800295e:	b118      	cbz	r0, 8002968 <__swbuf_r+0x32>
 8002960:	f04f 37ff 	mov.w	r7, #4294967295
 8002964:	4638      	mov	r0, r7
 8002966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	6922      	ldr	r2, [r4, #16]
 800296c:	1a98      	subs	r0, r3, r2
 800296e:	6963      	ldr	r3, [r4, #20]
 8002970:	b2f6      	uxtb	r6, r6
 8002972:	4283      	cmp	r3, r0
 8002974:	4637      	mov	r7, r6
 8002976:	dc05      	bgt.n	8002984 <__swbuf_r+0x4e>
 8002978:	4621      	mov	r1, r4
 800297a:	4628      	mov	r0, r5
 800297c:	f000 fdc2 	bl	8003504 <_fflush_r>
 8002980:	2800      	cmp	r0, #0
 8002982:	d1ed      	bne.n	8002960 <__swbuf_r+0x2a>
 8002984:	68a3      	ldr	r3, [r4, #8]
 8002986:	3b01      	subs	r3, #1
 8002988:	60a3      	str	r3, [r4, #8]
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	6022      	str	r2, [r4, #0]
 8002990:	701e      	strb	r6, [r3, #0]
 8002992:	6962      	ldr	r2, [r4, #20]
 8002994:	1c43      	adds	r3, r0, #1
 8002996:	429a      	cmp	r2, r3
 8002998:	d004      	beq.n	80029a4 <__swbuf_r+0x6e>
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	07db      	lsls	r3, r3, #31
 800299e:	d5e1      	bpl.n	8002964 <__swbuf_r+0x2e>
 80029a0:	2e0a      	cmp	r6, #10
 80029a2:	d1df      	bne.n	8002964 <__swbuf_r+0x2e>
 80029a4:	4621      	mov	r1, r4
 80029a6:	4628      	mov	r0, r5
 80029a8:	f000 fdac 	bl	8003504 <_fflush_r>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d0d9      	beq.n	8002964 <__swbuf_r+0x2e>
 80029b0:	e7d6      	b.n	8002960 <__swbuf_r+0x2a>
	...

080029b4 <__swsetup_r>:
 80029b4:	b538      	push	{r3, r4, r5, lr}
 80029b6:	4b29      	ldr	r3, [pc, #164]	@ (8002a5c <__swsetup_r+0xa8>)
 80029b8:	4605      	mov	r5, r0
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	460c      	mov	r4, r1
 80029be:	b118      	cbz	r0, 80029c8 <__swsetup_r+0x14>
 80029c0:	6a03      	ldr	r3, [r0, #32]
 80029c2:	b90b      	cbnz	r3, 80029c8 <__swsetup_r+0x14>
 80029c4:	f7ff fec6 	bl	8002754 <__sinit>
 80029c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029cc:	0719      	lsls	r1, r3, #28
 80029ce:	d422      	bmi.n	8002a16 <__swsetup_r+0x62>
 80029d0:	06da      	lsls	r2, r3, #27
 80029d2:	d407      	bmi.n	80029e4 <__swsetup_r+0x30>
 80029d4:	2209      	movs	r2, #9
 80029d6:	602a      	str	r2, [r5, #0]
 80029d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029dc:	81a3      	strh	r3, [r4, #12]
 80029de:	f04f 30ff 	mov.w	r0, #4294967295
 80029e2:	e033      	b.n	8002a4c <__swsetup_r+0x98>
 80029e4:	0758      	lsls	r0, r3, #29
 80029e6:	d512      	bpl.n	8002a0e <__swsetup_r+0x5a>
 80029e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80029ea:	b141      	cbz	r1, 80029fe <__swsetup_r+0x4a>
 80029ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80029f0:	4299      	cmp	r1, r3
 80029f2:	d002      	beq.n	80029fa <__swsetup_r+0x46>
 80029f4:	4628      	mov	r0, r5
 80029f6:	f000 f931 	bl	8002c5c <_free_r>
 80029fa:	2300      	movs	r3, #0
 80029fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80029fe:	89a3      	ldrh	r3, [r4, #12]
 8002a00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002a04:	81a3      	strh	r3, [r4, #12]
 8002a06:	2300      	movs	r3, #0
 8002a08:	6063      	str	r3, [r4, #4]
 8002a0a:	6923      	ldr	r3, [r4, #16]
 8002a0c:	6023      	str	r3, [r4, #0]
 8002a0e:	89a3      	ldrh	r3, [r4, #12]
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	81a3      	strh	r3, [r4, #12]
 8002a16:	6923      	ldr	r3, [r4, #16]
 8002a18:	b94b      	cbnz	r3, 8002a2e <__swsetup_r+0x7a>
 8002a1a:	89a3      	ldrh	r3, [r4, #12]
 8002a1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a24:	d003      	beq.n	8002a2e <__swsetup_r+0x7a>
 8002a26:	4621      	mov	r1, r4
 8002a28:	4628      	mov	r0, r5
 8002a2a:	f000 fdcb 	bl	80035c4 <__smakebuf_r>
 8002a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a32:	f013 0201 	ands.w	r2, r3, #1
 8002a36:	d00a      	beq.n	8002a4e <__swsetup_r+0x9a>
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60a2      	str	r2, [r4, #8]
 8002a3c:	6962      	ldr	r2, [r4, #20]
 8002a3e:	4252      	negs	r2, r2
 8002a40:	61a2      	str	r2, [r4, #24]
 8002a42:	6922      	ldr	r2, [r4, #16]
 8002a44:	b942      	cbnz	r2, 8002a58 <__swsetup_r+0xa4>
 8002a46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002a4a:	d1c5      	bne.n	80029d8 <__swsetup_r+0x24>
 8002a4c:	bd38      	pop	{r3, r4, r5, pc}
 8002a4e:	0799      	lsls	r1, r3, #30
 8002a50:	bf58      	it	pl
 8002a52:	6962      	ldrpl	r2, [r4, #20]
 8002a54:	60a2      	str	r2, [r4, #8]
 8002a56:	e7f4      	b.n	8002a42 <__swsetup_r+0x8e>
 8002a58:	2000      	movs	r0, #0
 8002a5a:	e7f7      	b.n	8002a4c <__swsetup_r+0x98>
 8002a5c:	20000018 	.word	0x20000018

08002a60 <memset>:
 8002a60:	4402      	add	r2, r0
 8002a62:	4603      	mov	r3, r0
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d100      	bne.n	8002a6a <memset+0xa>
 8002a68:	4770      	bx	lr
 8002a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a6e:	e7f9      	b.n	8002a64 <memset+0x4>

08002a70 <strtok>:
 8002a70:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <strtok+0x5c>)
 8002a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a76:	681f      	ldr	r7, [r3, #0]
 8002a78:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8002a7a:	4605      	mov	r5, r0
 8002a7c:	460e      	mov	r6, r1
 8002a7e:	b9ec      	cbnz	r4, 8002abc <strtok+0x4c>
 8002a80:	2050      	movs	r0, #80	@ 0x50
 8002a82:	f000 f935 	bl	8002cf0 <malloc>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6478      	str	r0, [r7, #68]	@ 0x44
 8002a8a:	b920      	cbnz	r0, 8002a96 <strtok+0x26>
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <strtok+0x60>)
 8002a8e:	4811      	ldr	r0, [pc, #68]	@ (8002ad4 <strtok+0x64>)
 8002a90:	215b      	movs	r1, #91	@ 0x5b
 8002a92:	f000 f8c5 	bl	8002c20 <__assert_func>
 8002a96:	e9c0 4400 	strd	r4, r4, [r0]
 8002a9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002a9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002aa2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8002aa6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8002aaa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8002aae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8002ab2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8002ab6:	6184      	str	r4, [r0, #24]
 8002ab8:	7704      	strb	r4, [r0, #28]
 8002aba:	6244      	str	r4, [r0, #36]	@ 0x24
 8002abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002abe:	4631      	mov	r1, r6
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac8:	f000 b806 	b.w	8002ad8 <__strtok_r>
 8002acc:	20000018 	.word	0x20000018
 8002ad0:	08006c6c 	.word	0x08006c6c
 8002ad4:	08006c83 	.word	0x08006c83

08002ad8 <__strtok_r>:
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	4604      	mov	r4, r0
 8002adc:	b908      	cbnz	r0, 8002ae2 <__strtok_r+0xa>
 8002ade:	6814      	ldr	r4, [r2, #0]
 8002ae0:	b144      	cbz	r4, 8002af4 <__strtok_r+0x1c>
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002ae8:	460f      	mov	r7, r1
 8002aea:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002aee:	b91e      	cbnz	r6, 8002af8 <__strtok_r+0x20>
 8002af0:	b965      	cbnz	r5, 8002b0c <__strtok_r+0x34>
 8002af2:	6015      	str	r5, [r2, #0]
 8002af4:	2000      	movs	r0, #0
 8002af6:	e005      	b.n	8002b04 <__strtok_r+0x2c>
 8002af8:	42b5      	cmp	r5, r6
 8002afa:	d1f6      	bne.n	8002aea <__strtok_r+0x12>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f0      	bne.n	8002ae2 <__strtok_r+0xa>
 8002b00:	6014      	str	r4, [r2, #0]
 8002b02:	7003      	strb	r3, [r0, #0]
 8002b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b06:	461c      	mov	r4, r3
 8002b08:	e00c      	b.n	8002b24 <__strtok_r+0x4c>
 8002b0a:	b915      	cbnz	r5, 8002b12 <__strtok_r+0x3a>
 8002b0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002b10:	460e      	mov	r6, r1
 8002b12:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002b16:	42ab      	cmp	r3, r5
 8002b18:	d1f7      	bne.n	8002b0a <__strtok_r+0x32>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f3      	beq.n	8002b06 <__strtok_r+0x2e>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002b24:	6014      	str	r4, [r2, #0]
 8002b26:	e7ed      	b.n	8002b04 <__strtok_r+0x2c>

08002b28 <_close_r>:
 8002b28:	b538      	push	{r3, r4, r5, lr}
 8002b2a:	4d06      	ldr	r5, [pc, #24]	@ (8002b44 <_close_r+0x1c>)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	4604      	mov	r4, r0
 8002b30:	4608      	mov	r0, r1
 8002b32:	602b      	str	r3, [r5, #0]
 8002b34:	f7fe ff05 	bl	8001942 <_close>
 8002b38:	1c43      	adds	r3, r0, #1
 8002b3a:	d102      	bne.n	8002b42 <_close_r+0x1a>
 8002b3c:	682b      	ldr	r3, [r5, #0]
 8002b3e:	b103      	cbz	r3, 8002b42 <_close_r+0x1a>
 8002b40:	6023      	str	r3, [r4, #0]
 8002b42:	bd38      	pop	{r3, r4, r5, pc}
 8002b44:	200001e0 	.word	0x200001e0

08002b48 <_lseek_r>:
 8002b48:	b538      	push	{r3, r4, r5, lr}
 8002b4a:	4d07      	ldr	r5, [pc, #28]	@ (8002b68 <_lseek_r+0x20>)
 8002b4c:	4604      	mov	r4, r0
 8002b4e:	4608      	mov	r0, r1
 8002b50:	4611      	mov	r1, r2
 8002b52:	2200      	movs	r2, #0
 8002b54:	602a      	str	r2, [r5, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f7fe ff1a 	bl	8001990 <_lseek>
 8002b5c:	1c43      	adds	r3, r0, #1
 8002b5e:	d102      	bne.n	8002b66 <_lseek_r+0x1e>
 8002b60:	682b      	ldr	r3, [r5, #0]
 8002b62:	b103      	cbz	r3, 8002b66 <_lseek_r+0x1e>
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	bd38      	pop	{r3, r4, r5, pc}
 8002b68:	200001e0 	.word	0x200001e0

08002b6c <_read_r>:
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	4d07      	ldr	r5, [pc, #28]	@ (8002b8c <_read_r+0x20>)
 8002b70:	4604      	mov	r4, r0
 8002b72:	4608      	mov	r0, r1
 8002b74:	4611      	mov	r1, r2
 8002b76:	2200      	movs	r2, #0
 8002b78:	602a      	str	r2, [r5, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f7fe fea8 	bl	80018d0 <_read>
 8002b80:	1c43      	adds	r3, r0, #1
 8002b82:	d102      	bne.n	8002b8a <_read_r+0x1e>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	b103      	cbz	r3, 8002b8a <_read_r+0x1e>
 8002b88:	6023      	str	r3, [r4, #0]
 8002b8a:	bd38      	pop	{r3, r4, r5, pc}
 8002b8c:	200001e0 	.word	0x200001e0

08002b90 <_write_r>:
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	4d07      	ldr	r5, [pc, #28]	@ (8002bb0 <_write_r+0x20>)
 8002b94:	4604      	mov	r4, r0
 8002b96:	4608      	mov	r0, r1
 8002b98:	4611      	mov	r1, r2
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	602a      	str	r2, [r5, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f7fe feb3 	bl	800190a <_write>
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	d102      	bne.n	8002bae <_write_r+0x1e>
 8002ba8:	682b      	ldr	r3, [r5, #0]
 8002baa:	b103      	cbz	r3, 8002bae <_write_r+0x1e>
 8002bac:	6023      	str	r3, [r4, #0]
 8002bae:	bd38      	pop	{r3, r4, r5, pc}
 8002bb0:	200001e0 	.word	0x200001e0

08002bb4 <__errno>:
 8002bb4:	4b01      	ldr	r3, [pc, #4]	@ (8002bbc <__errno+0x8>)
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000018 	.word	0x20000018

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	4d0d      	ldr	r5, [pc, #52]	@ (8002bf8 <__libc_init_array+0x38>)
 8002bc4:	4c0d      	ldr	r4, [pc, #52]	@ (8002bfc <__libc_init_array+0x3c>)
 8002bc6:	1b64      	subs	r4, r4, r5
 8002bc8:	10a4      	asrs	r4, r4, #2
 8002bca:	2600      	movs	r6, #0
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	4d0b      	ldr	r5, [pc, #44]	@ (8002c00 <__libc_init_array+0x40>)
 8002bd2:	4c0c      	ldr	r4, [pc, #48]	@ (8002c04 <__libc_init_array+0x44>)
 8002bd4:	f000 fde4 	bl	80037a0 <_init>
 8002bd8:	1b64      	subs	r4, r4, r5
 8002bda:	10a4      	asrs	r4, r4, #2
 8002bdc:	2600      	movs	r6, #0
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08006d54 	.word	0x08006d54
 8002bfc:	08006d54 	.word	0x08006d54
 8002c00:	08006d54 	.word	0x08006d54
 8002c04:	08006d58 	.word	0x08006d58

08002c08 <__retarget_lock_init_recursive>:
 8002c08:	4770      	bx	lr

08002c0a <__retarget_lock_acquire_recursive>:
 8002c0a:	4770      	bx	lr

08002c0c <__retarget_lock_release_recursive>:
 8002c0c:	4770      	bx	lr

08002c0e <strcpy>:
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c14:	f803 2b01 	strb.w	r2, [r3], #1
 8002c18:	2a00      	cmp	r2, #0
 8002c1a:	d1f9      	bne.n	8002c10 <strcpy+0x2>
 8002c1c:	4770      	bx	lr
	...

08002c20 <__assert_func>:
 8002c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002c22:	4614      	mov	r4, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <__assert_func+0x2c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4605      	mov	r5, r0
 8002c2c:	68d8      	ldr	r0, [r3, #12]
 8002c2e:	b954      	cbnz	r4, 8002c46 <__assert_func+0x26>
 8002c30:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <__assert_func+0x30>)
 8002c32:	461c      	mov	r4, r3
 8002c34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002c38:	9100      	str	r1, [sp, #0]
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	4905      	ldr	r1, [pc, #20]	@ (8002c54 <__assert_func+0x34>)
 8002c3e:	f000 fc89 	bl	8003554 <fiprintf>
 8002c42:	f000 fd61 	bl	8003708 <abort>
 8002c46:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <__assert_func+0x38>)
 8002c48:	e7f4      	b.n	8002c34 <__assert_func+0x14>
 8002c4a:	bf00      	nop
 8002c4c:	20000018 	.word	0x20000018
 8002c50:	08006d18 	.word	0x08006d18
 8002c54:	08006cea 	.word	0x08006cea
 8002c58:	08006cdd 	.word	0x08006cdd

08002c5c <_free_r>:
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	4605      	mov	r5, r0
 8002c60:	2900      	cmp	r1, #0
 8002c62:	d041      	beq.n	8002ce8 <_free_r+0x8c>
 8002c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c68:	1f0c      	subs	r4, r1, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bfb8      	it	lt
 8002c6e:	18e4      	addlt	r4, r4, r3
 8002c70:	f000 f8e8 	bl	8002e44 <__malloc_lock>
 8002c74:	4a1d      	ldr	r2, [pc, #116]	@ (8002cec <_free_r+0x90>)
 8002c76:	6813      	ldr	r3, [r2, #0]
 8002c78:	b933      	cbnz	r3, 8002c88 <_free_r+0x2c>
 8002c7a:	6063      	str	r3, [r4, #4]
 8002c7c:	6014      	str	r4, [r2, #0]
 8002c7e:	4628      	mov	r0, r5
 8002c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c84:	f000 b8e4 	b.w	8002e50 <__malloc_unlock>
 8002c88:	42a3      	cmp	r3, r4
 8002c8a:	d908      	bls.n	8002c9e <_free_r+0x42>
 8002c8c:	6820      	ldr	r0, [r4, #0]
 8002c8e:	1821      	adds	r1, r4, r0
 8002c90:	428b      	cmp	r3, r1
 8002c92:	bf01      	itttt	eq
 8002c94:	6819      	ldreq	r1, [r3, #0]
 8002c96:	685b      	ldreq	r3, [r3, #4]
 8002c98:	1809      	addeq	r1, r1, r0
 8002c9a:	6021      	streq	r1, [r4, #0]
 8002c9c:	e7ed      	b.n	8002c7a <_free_r+0x1e>
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	b10b      	cbz	r3, 8002ca8 <_free_r+0x4c>
 8002ca4:	42a3      	cmp	r3, r4
 8002ca6:	d9fa      	bls.n	8002c9e <_free_r+0x42>
 8002ca8:	6811      	ldr	r1, [r2, #0]
 8002caa:	1850      	adds	r0, r2, r1
 8002cac:	42a0      	cmp	r0, r4
 8002cae:	d10b      	bne.n	8002cc8 <_free_r+0x6c>
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	4401      	add	r1, r0
 8002cb4:	1850      	adds	r0, r2, r1
 8002cb6:	4283      	cmp	r3, r0
 8002cb8:	6011      	str	r1, [r2, #0]
 8002cba:	d1e0      	bne.n	8002c7e <_free_r+0x22>
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	6053      	str	r3, [r2, #4]
 8002cc2:	4408      	add	r0, r1
 8002cc4:	6010      	str	r0, [r2, #0]
 8002cc6:	e7da      	b.n	8002c7e <_free_r+0x22>
 8002cc8:	d902      	bls.n	8002cd0 <_free_r+0x74>
 8002cca:	230c      	movs	r3, #12
 8002ccc:	602b      	str	r3, [r5, #0]
 8002cce:	e7d6      	b.n	8002c7e <_free_r+0x22>
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	1821      	adds	r1, r4, r0
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	bf04      	itt	eq
 8002cd8:	6819      	ldreq	r1, [r3, #0]
 8002cda:	685b      	ldreq	r3, [r3, #4]
 8002cdc:	6063      	str	r3, [r4, #4]
 8002cde:	bf04      	itt	eq
 8002ce0:	1809      	addeq	r1, r1, r0
 8002ce2:	6021      	streq	r1, [r4, #0]
 8002ce4:	6054      	str	r4, [r2, #4]
 8002ce6:	e7ca      	b.n	8002c7e <_free_r+0x22>
 8002ce8:	bd38      	pop	{r3, r4, r5, pc}
 8002cea:	bf00      	nop
 8002cec:	200001ec 	.word	0x200001ec

08002cf0 <malloc>:
 8002cf0:	4b02      	ldr	r3, [pc, #8]	@ (8002cfc <malloc+0xc>)
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	f000 b825 	b.w	8002d44 <_malloc_r>
 8002cfa:	bf00      	nop
 8002cfc:	20000018 	.word	0x20000018

08002d00 <sbrk_aligned>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	4e0f      	ldr	r6, [pc, #60]	@ (8002d40 <sbrk_aligned+0x40>)
 8002d04:	460c      	mov	r4, r1
 8002d06:	6831      	ldr	r1, [r6, #0]
 8002d08:	4605      	mov	r5, r0
 8002d0a:	b911      	cbnz	r1, 8002d12 <sbrk_aligned+0x12>
 8002d0c:	f000 fcec 	bl	80036e8 <_sbrk_r>
 8002d10:	6030      	str	r0, [r6, #0]
 8002d12:	4621      	mov	r1, r4
 8002d14:	4628      	mov	r0, r5
 8002d16:	f000 fce7 	bl	80036e8 <_sbrk_r>
 8002d1a:	1c43      	adds	r3, r0, #1
 8002d1c:	d103      	bne.n	8002d26 <sbrk_aligned+0x26>
 8002d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8002d22:	4620      	mov	r0, r4
 8002d24:	bd70      	pop	{r4, r5, r6, pc}
 8002d26:	1cc4      	adds	r4, r0, #3
 8002d28:	f024 0403 	bic.w	r4, r4, #3
 8002d2c:	42a0      	cmp	r0, r4
 8002d2e:	d0f8      	beq.n	8002d22 <sbrk_aligned+0x22>
 8002d30:	1a21      	subs	r1, r4, r0
 8002d32:	4628      	mov	r0, r5
 8002d34:	f000 fcd8 	bl	80036e8 <_sbrk_r>
 8002d38:	3001      	adds	r0, #1
 8002d3a:	d1f2      	bne.n	8002d22 <sbrk_aligned+0x22>
 8002d3c:	e7ef      	b.n	8002d1e <sbrk_aligned+0x1e>
 8002d3e:	bf00      	nop
 8002d40:	200001e8 	.word	0x200001e8

08002d44 <_malloc_r>:
 8002d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d48:	1ccd      	adds	r5, r1, #3
 8002d4a:	f025 0503 	bic.w	r5, r5, #3
 8002d4e:	3508      	adds	r5, #8
 8002d50:	2d0c      	cmp	r5, #12
 8002d52:	bf38      	it	cc
 8002d54:	250c      	movcc	r5, #12
 8002d56:	2d00      	cmp	r5, #0
 8002d58:	4606      	mov	r6, r0
 8002d5a:	db01      	blt.n	8002d60 <_malloc_r+0x1c>
 8002d5c:	42a9      	cmp	r1, r5
 8002d5e:	d904      	bls.n	8002d6a <_malloc_r+0x26>
 8002d60:	230c      	movs	r3, #12
 8002d62:	6033      	str	r3, [r6, #0]
 8002d64:	2000      	movs	r0, #0
 8002d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e40 <_malloc_r+0xfc>
 8002d6e:	f000 f869 	bl	8002e44 <__malloc_lock>
 8002d72:	f8d8 3000 	ldr.w	r3, [r8]
 8002d76:	461c      	mov	r4, r3
 8002d78:	bb44      	cbnz	r4, 8002dcc <_malloc_r+0x88>
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f7ff ffbf 	bl	8002d00 <sbrk_aligned>
 8002d82:	1c43      	adds	r3, r0, #1
 8002d84:	4604      	mov	r4, r0
 8002d86:	d158      	bne.n	8002e3a <_malloc_r+0xf6>
 8002d88:	f8d8 4000 	ldr.w	r4, [r8]
 8002d8c:	4627      	mov	r7, r4
 8002d8e:	2f00      	cmp	r7, #0
 8002d90:	d143      	bne.n	8002e1a <_malloc_r+0xd6>
 8002d92:	2c00      	cmp	r4, #0
 8002d94:	d04b      	beq.n	8002e2e <_malloc_r+0xea>
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	4639      	mov	r1, r7
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	eb04 0903 	add.w	r9, r4, r3
 8002da0:	f000 fca2 	bl	80036e8 <_sbrk_r>
 8002da4:	4581      	cmp	r9, r0
 8002da6:	d142      	bne.n	8002e2e <_malloc_r+0xea>
 8002da8:	6821      	ldr	r1, [r4, #0]
 8002daa:	1a6d      	subs	r5, r5, r1
 8002dac:	4629      	mov	r1, r5
 8002dae:	4630      	mov	r0, r6
 8002db0:	f7ff ffa6 	bl	8002d00 <sbrk_aligned>
 8002db4:	3001      	adds	r0, #1
 8002db6:	d03a      	beq.n	8002e2e <_malloc_r+0xea>
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	442b      	add	r3, r5
 8002dbc:	6023      	str	r3, [r4, #0]
 8002dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	bb62      	cbnz	r2, 8002e20 <_malloc_r+0xdc>
 8002dc6:	f8c8 7000 	str.w	r7, [r8]
 8002dca:	e00f      	b.n	8002dec <_malloc_r+0xa8>
 8002dcc:	6822      	ldr	r2, [r4, #0]
 8002dce:	1b52      	subs	r2, r2, r5
 8002dd0:	d420      	bmi.n	8002e14 <_malloc_r+0xd0>
 8002dd2:	2a0b      	cmp	r2, #11
 8002dd4:	d917      	bls.n	8002e06 <_malloc_r+0xc2>
 8002dd6:	1961      	adds	r1, r4, r5
 8002dd8:	42a3      	cmp	r3, r4
 8002dda:	6025      	str	r5, [r4, #0]
 8002ddc:	bf18      	it	ne
 8002dde:	6059      	strne	r1, [r3, #4]
 8002de0:	6863      	ldr	r3, [r4, #4]
 8002de2:	bf08      	it	eq
 8002de4:	f8c8 1000 	streq.w	r1, [r8]
 8002de8:	5162      	str	r2, [r4, r5]
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	4630      	mov	r0, r6
 8002dee:	f000 f82f 	bl	8002e50 <__malloc_unlock>
 8002df2:	f104 000b 	add.w	r0, r4, #11
 8002df6:	1d23      	adds	r3, r4, #4
 8002df8:	f020 0007 	bic.w	r0, r0, #7
 8002dfc:	1ac2      	subs	r2, r0, r3
 8002dfe:	bf1c      	itt	ne
 8002e00:	1a1b      	subne	r3, r3, r0
 8002e02:	50a3      	strne	r3, [r4, r2]
 8002e04:	e7af      	b.n	8002d66 <_malloc_r+0x22>
 8002e06:	6862      	ldr	r2, [r4, #4]
 8002e08:	42a3      	cmp	r3, r4
 8002e0a:	bf0c      	ite	eq
 8002e0c:	f8c8 2000 	streq.w	r2, [r8]
 8002e10:	605a      	strne	r2, [r3, #4]
 8002e12:	e7eb      	b.n	8002dec <_malloc_r+0xa8>
 8002e14:	4623      	mov	r3, r4
 8002e16:	6864      	ldr	r4, [r4, #4]
 8002e18:	e7ae      	b.n	8002d78 <_malloc_r+0x34>
 8002e1a:	463c      	mov	r4, r7
 8002e1c:	687f      	ldr	r7, [r7, #4]
 8002e1e:	e7b6      	b.n	8002d8e <_malloc_r+0x4a>
 8002e20:	461a      	mov	r2, r3
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	42a3      	cmp	r3, r4
 8002e26:	d1fb      	bne.n	8002e20 <_malloc_r+0xdc>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6053      	str	r3, [r2, #4]
 8002e2c:	e7de      	b.n	8002dec <_malloc_r+0xa8>
 8002e2e:	230c      	movs	r3, #12
 8002e30:	6033      	str	r3, [r6, #0]
 8002e32:	4630      	mov	r0, r6
 8002e34:	f000 f80c 	bl	8002e50 <__malloc_unlock>
 8002e38:	e794      	b.n	8002d64 <_malloc_r+0x20>
 8002e3a:	6005      	str	r5, [r0, #0]
 8002e3c:	e7d6      	b.n	8002dec <_malloc_r+0xa8>
 8002e3e:	bf00      	nop
 8002e40:	200001ec 	.word	0x200001ec

08002e44 <__malloc_lock>:
 8002e44:	4801      	ldr	r0, [pc, #4]	@ (8002e4c <__malloc_lock+0x8>)
 8002e46:	f7ff bee0 	b.w	8002c0a <__retarget_lock_acquire_recursive>
 8002e4a:	bf00      	nop
 8002e4c:	200001e4 	.word	0x200001e4

08002e50 <__malloc_unlock>:
 8002e50:	4801      	ldr	r0, [pc, #4]	@ (8002e58 <__malloc_unlock+0x8>)
 8002e52:	f7ff bedb 	b.w	8002c0c <__retarget_lock_release_recursive>
 8002e56:	bf00      	nop
 8002e58:	200001e4 	.word	0x200001e4

08002e5c <__sfputc_r>:
 8002e5c:	6893      	ldr	r3, [r2, #8]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	b410      	push	{r4}
 8002e64:	6093      	str	r3, [r2, #8]
 8002e66:	da08      	bge.n	8002e7a <__sfputc_r+0x1e>
 8002e68:	6994      	ldr	r4, [r2, #24]
 8002e6a:	42a3      	cmp	r3, r4
 8002e6c:	db01      	blt.n	8002e72 <__sfputc_r+0x16>
 8002e6e:	290a      	cmp	r1, #10
 8002e70:	d103      	bne.n	8002e7a <__sfputc_r+0x1e>
 8002e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e76:	f7ff bd5e 	b.w	8002936 <__swbuf_r>
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	1c58      	adds	r0, r3, #1
 8002e7e:	6010      	str	r0, [r2, #0]
 8002e80:	7019      	strb	r1, [r3, #0]
 8002e82:	4608      	mov	r0, r1
 8002e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <__sfputs_r>:
 8002e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	460f      	mov	r7, r1
 8002e90:	4614      	mov	r4, r2
 8002e92:	18d5      	adds	r5, r2, r3
 8002e94:	42ac      	cmp	r4, r5
 8002e96:	d101      	bne.n	8002e9c <__sfputs_r+0x12>
 8002e98:	2000      	movs	r0, #0
 8002e9a:	e007      	b.n	8002eac <__sfputs_r+0x22>
 8002e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ea0:	463a      	mov	r2, r7
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f7ff ffda 	bl	8002e5c <__sfputc_r>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d1f3      	bne.n	8002e94 <__sfputs_r+0xa>
 8002eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002eb0 <_vfiprintf_r>:
 8002eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb4:	460d      	mov	r5, r1
 8002eb6:	b09d      	sub	sp, #116	@ 0x74
 8002eb8:	4614      	mov	r4, r2
 8002eba:	4698      	mov	r8, r3
 8002ebc:	4606      	mov	r6, r0
 8002ebe:	b118      	cbz	r0, 8002ec8 <_vfiprintf_r+0x18>
 8002ec0:	6a03      	ldr	r3, [r0, #32]
 8002ec2:	b90b      	cbnz	r3, 8002ec8 <_vfiprintf_r+0x18>
 8002ec4:	f7ff fc46 	bl	8002754 <__sinit>
 8002ec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002eca:	07d9      	lsls	r1, r3, #31
 8002ecc:	d405      	bmi.n	8002eda <_vfiprintf_r+0x2a>
 8002ece:	89ab      	ldrh	r3, [r5, #12]
 8002ed0:	059a      	lsls	r2, r3, #22
 8002ed2:	d402      	bmi.n	8002eda <_vfiprintf_r+0x2a>
 8002ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ed6:	f7ff fe98 	bl	8002c0a <__retarget_lock_acquire_recursive>
 8002eda:	89ab      	ldrh	r3, [r5, #12]
 8002edc:	071b      	lsls	r3, r3, #28
 8002ede:	d501      	bpl.n	8002ee4 <_vfiprintf_r+0x34>
 8002ee0:	692b      	ldr	r3, [r5, #16]
 8002ee2:	b99b      	cbnz	r3, 8002f0c <_vfiprintf_r+0x5c>
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	f7ff fd64 	bl	80029b4 <__swsetup_r>
 8002eec:	b170      	cbz	r0, 8002f0c <_vfiprintf_r+0x5c>
 8002eee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ef0:	07dc      	lsls	r4, r3, #31
 8002ef2:	d504      	bpl.n	8002efe <_vfiprintf_r+0x4e>
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	b01d      	add	sp, #116	@ 0x74
 8002efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002efe:	89ab      	ldrh	r3, [r5, #12]
 8002f00:	0598      	lsls	r0, r3, #22
 8002f02:	d4f7      	bmi.n	8002ef4 <_vfiprintf_r+0x44>
 8002f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f06:	f7ff fe81 	bl	8002c0c <__retarget_lock_release_recursive>
 8002f0a:	e7f3      	b.n	8002ef4 <_vfiprintf_r+0x44>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f10:	2320      	movs	r3, #32
 8002f12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f1a:	2330      	movs	r3, #48	@ 0x30
 8002f1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80030cc <_vfiprintf_r+0x21c>
 8002f20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f24:	f04f 0901 	mov.w	r9, #1
 8002f28:	4623      	mov	r3, r4
 8002f2a:	469a      	mov	sl, r3
 8002f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f30:	b10a      	cbz	r2, 8002f36 <_vfiprintf_r+0x86>
 8002f32:	2a25      	cmp	r2, #37	@ 0x25
 8002f34:	d1f9      	bne.n	8002f2a <_vfiprintf_r+0x7a>
 8002f36:	ebba 0b04 	subs.w	fp, sl, r4
 8002f3a:	d00b      	beq.n	8002f54 <_vfiprintf_r+0xa4>
 8002f3c:	465b      	mov	r3, fp
 8002f3e:	4622      	mov	r2, r4
 8002f40:	4629      	mov	r1, r5
 8002f42:	4630      	mov	r0, r6
 8002f44:	f7ff ffa1 	bl	8002e8a <__sfputs_r>
 8002f48:	3001      	adds	r0, #1
 8002f4a:	f000 80a7 	beq.w	800309c <_vfiprintf_r+0x1ec>
 8002f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f50:	445a      	add	r2, fp
 8002f52:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f54:	f89a 3000 	ldrb.w	r3, [sl]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 809f 	beq.w	800309c <_vfiprintf_r+0x1ec>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f68:	f10a 0a01 	add.w	sl, sl, #1
 8002f6c:	9304      	str	r3, [sp, #16]
 8002f6e:	9307      	str	r3, [sp, #28]
 8002f70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f74:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f76:	4654      	mov	r4, sl
 8002f78:	2205      	movs	r2, #5
 8002f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f7e:	4853      	ldr	r0, [pc, #332]	@ (80030cc <_vfiprintf_r+0x21c>)
 8002f80:	f7fd f92e 	bl	80001e0 <memchr>
 8002f84:	9a04      	ldr	r2, [sp, #16]
 8002f86:	b9d8      	cbnz	r0, 8002fc0 <_vfiprintf_r+0x110>
 8002f88:	06d1      	lsls	r1, r2, #27
 8002f8a:	bf44      	itt	mi
 8002f8c:	2320      	movmi	r3, #32
 8002f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f92:	0713      	lsls	r3, r2, #28
 8002f94:	bf44      	itt	mi
 8002f96:	232b      	movmi	r3, #43	@ 0x2b
 8002f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8002fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fa2:	d015      	beq.n	8002fd0 <_vfiprintf_r+0x120>
 8002fa4:	9a07      	ldr	r2, [sp, #28]
 8002fa6:	4654      	mov	r4, sl
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f04f 0c0a 	mov.w	ip, #10
 8002fae:	4621      	mov	r1, r4
 8002fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fb4:	3b30      	subs	r3, #48	@ 0x30
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	d94b      	bls.n	8003052 <_vfiprintf_r+0x1a2>
 8002fba:	b1b0      	cbz	r0, 8002fea <_vfiprintf_r+0x13a>
 8002fbc:	9207      	str	r2, [sp, #28]
 8002fbe:	e014      	b.n	8002fea <_vfiprintf_r+0x13a>
 8002fc0:	eba0 0308 	sub.w	r3, r0, r8
 8002fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	9304      	str	r3, [sp, #16]
 8002fcc:	46a2      	mov	sl, r4
 8002fce:	e7d2      	b.n	8002f76 <_vfiprintf_r+0xc6>
 8002fd0:	9b03      	ldr	r3, [sp, #12]
 8002fd2:	1d19      	adds	r1, r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	9103      	str	r1, [sp, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bfbb      	ittet	lt
 8002fdc:	425b      	neglt	r3, r3
 8002fde:	f042 0202 	orrlt.w	r2, r2, #2
 8002fe2:	9307      	strge	r3, [sp, #28]
 8002fe4:	9307      	strlt	r3, [sp, #28]
 8002fe6:	bfb8      	it	lt
 8002fe8:	9204      	strlt	r2, [sp, #16]
 8002fea:	7823      	ldrb	r3, [r4, #0]
 8002fec:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fee:	d10a      	bne.n	8003006 <_vfiprintf_r+0x156>
 8002ff0:	7863      	ldrb	r3, [r4, #1]
 8002ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ff4:	d132      	bne.n	800305c <_vfiprintf_r+0x1ac>
 8002ff6:	9b03      	ldr	r3, [sp, #12]
 8002ff8:	1d1a      	adds	r2, r3, #4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	9203      	str	r2, [sp, #12]
 8002ffe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003002:	3402      	adds	r4, #2
 8003004:	9305      	str	r3, [sp, #20]
 8003006:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80030dc <_vfiprintf_r+0x22c>
 800300a:	7821      	ldrb	r1, [r4, #0]
 800300c:	2203      	movs	r2, #3
 800300e:	4650      	mov	r0, sl
 8003010:	f7fd f8e6 	bl	80001e0 <memchr>
 8003014:	b138      	cbz	r0, 8003026 <_vfiprintf_r+0x176>
 8003016:	9b04      	ldr	r3, [sp, #16]
 8003018:	eba0 000a 	sub.w	r0, r0, sl
 800301c:	2240      	movs	r2, #64	@ 0x40
 800301e:	4082      	lsls	r2, r0
 8003020:	4313      	orrs	r3, r2
 8003022:	3401      	adds	r4, #1
 8003024:	9304      	str	r3, [sp, #16]
 8003026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800302a:	4829      	ldr	r0, [pc, #164]	@ (80030d0 <_vfiprintf_r+0x220>)
 800302c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003030:	2206      	movs	r2, #6
 8003032:	f7fd f8d5 	bl	80001e0 <memchr>
 8003036:	2800      	cmp	r0, #0
 8003038:	d03f      	beq.n	80030ba <_vfiprintf_r+0x20a>
 800303a:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <_vfiprintf_r+0x224>)
 800303c:	bb1b      	cbnz	r3, 8003086 <_vfiprintf_r+0x1d6>
 800303e:	9b03      	ldr	r3, [sp, #12]
 8003040:	3307      	adds	r3, #7
 8003042:	f023 0307 	bic.w	r3, r3, #7
 8003046:	3308      	adds	r3, #8
 8003048:	9303      	str	r3, [sp, #12]
 800304a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800304c:	443b      	add	r3, r7
 800304e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003050:	e76a      	b.n	8002f28 <_vfiprintf_r+0x78>
 8003052:	fb0c 3202 	mla	r2, ip, r2, r3
 8003056:	460c      	mov	r4, r1
 8003058:	2001      	movs	r0, #1
 800305a:	e7a8      	b.n	8002fae <_vfiprintf_r+0xfe>
 800305c:	2300      	movs	r3, #0
 800305e:	3401      	adds	r4, #1
 8003060:	9305      	str	r3, [sp, #20]
 8003062:	4619      	mov	r1, r3
 8003064:	f04f 0c0a 	mov.w	ip, #10
 8003068:	4620      	mov	r0, r4
 800306a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800306e:	3a30      	subs	r2, #48	@ 0x30
 8003070:	2a09      	cmp	r2, #9
 8003072:	d903      	bls.n	800307c <_vfiprintf_r+0x1cc>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0c6      	beq.n	8003006 <_vfiprintf_r+0x156>
 8003078:	9105      	str	r1, [sp, #20]
 800307a:	e7c4      	b.n	8003006 <_vfiprintf_r+0x156>
 800307c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003080:	4604      	mov	r4, r0
 8003082:	2301      	movs	r3, #1
 8003084:	e7f0      	b.n	8003068 <_vfiprintf_r+0x1b8>
 8003086:	ab03      	add	r3, sp, #12
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	462a      	mov	r2, r5
 800308c:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <_vfiprintf_r+0x228>)
 800308e:	a904      	add	r1, sp, #16
 8003090:	4630      	mov	r0, r6
 8003092:	f3af 8000 	nop.w
 8003096:	4607      	mov	r7, r0
 8003098:	1c78      	adds	r0, r7, #1
 800309a:	d1d6      	bne.n	800304a <_vfiprintf_r+0x19a>
 800309c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800309e:	07d9      	lsls	r1, r3, #31
 80030a0:	d405      	bmi.n	80030ae <_vfiprintf_r+0x1fe>
 80030a2:	89ab      	ldrh	r3, [r5, #12]
 80030a4:	059a      	lsls	r2, r3, #22
 80030a6:	d402      	bmi.n	80030ae <_vfiprintf_r+0x1fe>
 80030a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80030aa:	f7ff fdaf 	bl	8002c0c <__retarget_lock_release_recursive>
 80030ae:	89ab      	ldrh	r3, [r5, #12]
 80030b0:	065b      	lsls	r3, r3, #25
 80030b2:	f53f af1f 	bmi.w	8002ef4 <_vfiprintf_r+0x44>
 80030b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030b8:	e71e      	b.n	8002ef8 <_vfiprintf_r+0x48>
 80030ba:	ab03      	add	r3, sp, #12
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	462a      	mov	r2, r5
 80030c0:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <_vfiprintf_r+0x228>)
 80030c2:	a904      	add	r1, sp, #16
 80030c4:	4630      	mov	r0, r6
 80030c6:	f000 f879 	bl	80031bc <_printf_i>
 80030ca:	e7e4      	b.n	8003096 <_vfiprintf_r+0x1e6>
 80030cc:	08006d19 	.word	0x08006d19
 80030d0:	08006d23 	.word	0x08006d23
 80030d4:	00000000 	.word	0x00000000
 80030d8:	08002e8b 	.word	0x08002e8b
 80030dc:	08006d1f 	.word	0x08006d1f

080030e0 <_printf_common>:
 80030e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e4:	4616      	mov	r6, r2
 80030e6:	4698      	mov	r8, r3
 80030e8:	688a      	ldr	r2, [r1, #8]
 80030ea:	690b      	ldr	r3, [r1, #16]
 80030ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bfb8      	it	lt
 80030f4:	4613      	movlt	r3, r2
 80030f6:	6033      	str	r3, [r6, #0]
 80030f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030fc:	4607      	mov	r7, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	b10a      	cbz	r2, 8003106 <_printf_common+0x26>
 8003102:	3301      	adds	r3, #1
 8003104:	6033      	str	r3, [r6, #0]
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	0699      	lsls	r1, r3, #26
 800310a:	bf42      	ittt	mi
 800310c:	6833      	ldrmi	r3, [r6, #0]
 800310e:	3302      	addmi	r3, #2
 8003110:	6033      	strmi	r3, [r6, #0]
 8003112:	6825      	ldr	r5, [r4, #0]
 8003114:	f015 0506 	ands.w	r5, r5, #6
 8003118:	d106      	bne.n	8003128 <_printf_common+0x48>
 800311a:	f104 0a19 	add.w	sl, r4, #25
 800311e:	68e3      	ldr	r3, [r4, #12]
 8003120:	6832      	ldr	r2, [r6, #0]
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	42ab      	cmp	r3, r5
 8003126:	dc26      	bgt.n	8003176 <_printf_common+0x96>
 8003128:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	3b00      	subs	r3, #0
 8003130:	bf18      	it	ne
 8003132:	2301      	movne	r3, #1
 8003134:	0692      	lsls	r2, r2, #26
 8003136:	d42b      	bmi.n	8003190 <_printf_common+0xb0>
 8003138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800313c:	4641      	mov	r1, r8
 800313e:	4638      	mov	r0, r7
 8003140:	47c8      	blx	r9
 8003142:	3001      	adds	r0, #1
 8003144:	d01e      	beq.n	8003184 <_printf_common+0xa4>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	6922      	ldr	r2, [r4, #16]
 800314a:	f003 0306 	and.w	r3, r3, #6
 800314e:	2b04      	cmp	r3, #4
 8003150:	bf02      	ittt	eq
 8003152:	68e5      	ldreq	r5, [r4, #12]
 8003154:	6833      	ldreq	r3, [r6, #0]
 8003156:	1aed      	subeq	r5, r5, r3
 8003158:	68a3      	ldr	r3, [r4, #8]
 800315a:	bf0c      	ite	eq
 800315c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003160:	2500      	movne	r5, #0
 8003162:	4293      	cmp	r3, r2
 8003164:	bfc4      	itt	gt
 8003166:	1a9b      	subgt	r3, r3, r2
 8003168:	18ed      	addgt	r5, r5, r3
 800316a:	2600      	movs	r6, #0
 800316c:	341a      	adds	r4, #26
 800316e:	42b5      	cmp	r5, r6
 8003170:	d11a      	bne.n	80031a8 <_printf_common+0xc8>
 8003172:	2000      	movs	r0, #0
 8003174:	e008      	b.n	8003188 <_printf_common+0xa8>
 8003176:	2301      	movs	r3, #1
 8003178:	4652      	mov	r2, sl
 800317a:	4641      	mov	r1, r8
 800317c:	4638      	mov	r0, r7
 800317e:	47c8      	blx	r9
 8003180:	3001      	adds	r0, #1
 8003182:	d103      	bne.n	800318c <_printf_common+0xac>
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800318c:	3501      	adds	r5, #1
 800318e:	e7c6      	b.n	800311e <_printf_common+0x3e>
 8003190:	18e1      	adds	r1, r4, r3
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	2030      	movs	r0, #48	@ 0x30
 8003196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800319a:	4422      	add	r2, r4
 800319c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80031a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80031a4:	3302      	adds	r3, #2
 80031a6:	e7c7      	b.n	8003138 <_printf_common+0x58>
 80031a8:	2301      	movs	r3, #1
 80031aa:	4622      	mov	r2, r4
 80031ac:	4641      	mov	r1, r8
 80031ae:	4638      	mov	r0, r7
 80031b0:	47c8      	blx	r9
 80031b2:	3001      	adds	r0, #1
 80031b4:	d0e6      	beq.n	8003184 <_printf_common+0xa4>
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7d9      	b.n	800316e <_printf_common+0x8e>
	...

080031bc <_printf_i>:
 80031bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031c0:	7e0f      	ldrb	r7, [r1, #24]
 80031c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80031c4:	2f78      	cmp	r7, #120	@ 0x78
 80031c6:	4691      	mov	r9, r2
 80031c8:	4680      	mov	r8, r0
 80031ca:	460c      	mov	r4, r1
 80031cc:	469a      	mov	sl, r3
 80031ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031d2:	d807      	bhi.n	80031e4 <_printf_i+0x28>
 80031d4:	2f62      	cmp	r7, #98	@ 0x62
 80031d6:	d80a      	bhi.n	80031ee <_printf_i+0x32>
 80031d8:	2f00      	cmp	r7, #0
 80031da:	f000 80d2 	beq.w	8003382 <_printf_i+0x1c6>
 80031de:	2f58      	cmp	r7, #88	@ 0x58
 80031e0:	f000 80b9 	beq.w	8003356 <_printf_i+0x19a>
 80031e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031ec:	e03a      	b.n	8003264 <_printf_i+0xa8>
 80031ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031f2:	2b15      	cmp	r3, #21
 80031f4:	d8f6      	bhi.n	80031e4 <_printf_i+0x28>
 80031f6:	a101      	add	r1, pc, #4	@ (adr r1, 80031fc <_printf_i+0x40>)
 80031f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031fc:	08003255 	.word	0x08003255
 8003200:	08003269 	.word	0x08003269
 8003204:	080031e5 	.word	0x080031e5
 8003208:	080031e5 	.word	0x080031e5
 800320c:	080031e5 	.word	0x080031e5
 8003210:	080031e5 	.word	0x080031e5
 8003214:	08003269 	.word	0x08003269
 8003218:	080031e5 	.word	0x080031e5
 800321c:	080031e5 	.word	0x080031e5
 8003220:	080031e5 	.word	0x080031e5
 8003224:	080031e5 	.word	0x080031e5
 8003228:	08003369 	.word	0x08003369
 800322c:	08003293 	.word	0x08003293
 8003230:	08003323 	.word	0x08003323
 8003234:	080031e5 	.word	0x080031e5
 8003238:	080031e5 	.word	0x080031e5
 800323c:	0800338b 	.word	0x0800338b
 8003240:	080031e5 	.word	0x080031e5
 8003244:	08003293 	.word	0x08003293
 8003248:	080031e5 	.word	0x080031e5
 800324c:	080031e5 	.word	0x080031e5
 8003250:	0800332b 	.word	0x0800332b
 8003254:	6833      	ldr	r3, [r6, #0]
 8003256:	1d1a      	adds	r2, r3, #4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6032      	str	r2, [r6, #0]
 800325c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003264:	2301      	movs	r3, #1
 8003266:	e09d      	b.n	80033a4 <_printf_i+0x1e8>
 8003268:	6833      	ldr	r3, [r6, #0]
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	1d19      	adds	r1, r3, #4
 800326e:	6031      	str	r1, [r6, #0]
 8003270:	0606      	lsls	r6, r0, #24
 8003272:	d501      	bpl.n	8003278 <_printf_i+0xbc>
 8003274:	681d      	ldr	r5, [r3, #0]
 8003276:	e003      	b.n	8003280 <_printf_i+0xc4>
 8003278:	0645      	lsls	r5, r0, #25
 800327a:	d5fb      	bpl.n	8003274 <_printf_i+0xb8>
 800327c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003280:	2d00      	cmp	r5, #0
 8003282:	da03      	bge.n	800328c <_printf_i+0xd0>
 8003284:	232d      	movs	r3, #45	@ 0x2d
 8003286:	426d      	negs	r5, r5
 8003288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800328c:	4859      	ldr	r0, [pc, #356]	@ (80033f4 <_printf_i+0x238>)
 800328e:	230a      	movs	r3, #10
 8003290:	e011      	b.n	80032b6 <_printf_i+0xfa>
 8003292:	6821      	ldr	r1, [r4, #0]
 8003294:	6833      	ldr	r3, [r6, #0]
 8003296:	0608      	lsls	r0, r1, #24
 8003298:	f853 5b04 	ldr.w	r5, [r3], #4
 800329c:	d402      	bmi.n	80032a4 <_printf_i+0xe8>
 800329e:	0649      	lsls	r1, r1, #25
 80032a0:	bf48      	it	mi
 80032a2:	b2ad      	uxthmi	r5, r5
 80032a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80032a6:	4853      	ldr	r0, [pc, #332]	@ (80033f4 <_printf_i+0x238>)
 80032a8:	6033      	str	r3, [r6, #0]
 80032aa:	bf14      	ite	ne
 80032ac:	230a      	movne	r3, #10
 80032ae:	2308      	moveq	r3, #8
 80032b0:	2100      	movs	r1, #0
 80032b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80032b6:	6866      	ldr	r6, [r4, #4]
 80032b8:	60a6      	str	r6, [r4, #8]
 80032ba:	2e00      	cmp	r6, #0
 80032bc:	bfa2      	ittt	ge
 80032be:	6821      	ldrge	r1, [r4, #0]
 80032c0:	f021 0104 	bicge.w	r1, r1, #4
 80032c4:	6021      	strge	r1, [r4, #0]
 80032c6:	b90d      	cbnz	r5, 80032cc <_printf_i+0x110>
 80032c8:	2e00      	cmp	r6, #0
 80032ca:	d04b      	beq.n	8003364 <_printf_i+0x1a8>
 80032cc:	4616      	mov	r6, r2
 80032ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80032d2:	fb03 5711 	mls	r7, r3, r1, r5
 80032d6:	5dc7      	ldrb	r7, [r0, r7]
 80032d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032dc:	462f      	mov	r7, r5
 80032de:	42bb      	cmp	r3, r7
 80032e0:	460d      	mov	r5, r1
 80032e2:	d9f4      	bls.n	80032ce <_printf_i+0x112>
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d10b      	bne.n	8003300 <_printf_i+0x144>
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	07df      	lsls	r7, r3, #31
 80032ec:	d508      	bpl.n	8003300 <_printf_i+0x144>
 80032ee:	6923      	ldr	r3, [r4, #16]
 80032f0:	6861      	ldr	r1, [r4, #4]
 80032f2:	4299      	cmp	r1, r3
 80032f4:	bfde      	ittt	le
 80032f6:	2330      	movle	r3, #48	@ 0x30
 80032f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003300:	1b92      	subs	r2, r2, r6
 8003302:	6122      	str	r2, [r4, #16]
 8003304:	f8cd a000 	str.w	sl, [sp]
 8003308:	464b      	mov	r3, r9
 800330a:	aa03      	add	r2, sp, #12
 800330c:	4621      	mov	r1, r4
 800330e:	4640      	mov	r0, r8
 8003310:	f7ff fee6 	bl	80030e0 <_printf_common>
 8003314:	3001      	adds	r0, #1
 8003316:	d14a      	bne.n	80033ae <_printf_i+0x1f2>
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	b004      	add	sp, #16
 800331e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	f043 0320 	orr.w	r3, r3, #32
 8003328:	6023      	str	r3, [r4, #0]
 800332a:	4833      	ldr	r0, [pc, #204]	@ (80033f8 <_printf_i+0x23c>)
 800332c:	2778      	movs	r7, #120	@ 0x78
 800332e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	6831      	ldr	r1, [r6, #0]
 8003336:	061f      	lsls	r7, r3, #24
 8003338:	f851 5b04 	ldr.w	r5, [r1], #4
 800333c:	d402      	bmi.n	8003344 <_printf_i+0x188>
 800333e:	065f      	lsls	r7, r3, #25
 8003340:	bf48      	it	mi
 8003342:	b2ad      	uxthmi	r5, r5
 8003344:	6031      	str	r1, [r6, #0]
 8003346:	07d9      	lsls	r1, r3, #31
 8003348:	bf44      	itt	mi
 800334a:	f043 0320 	orrmi.w	r3, r3, #32
 800334e:	6023      	strmi	r3, [r4, #0]
 8003350:	b11d      	cbz	r5, 800335a <_printf_i+0x19e>
 8003352:	2310      	movs	r3, #16
 8003354:	e7ac      	b.n	80032b0 <_printf_i+0xf4>
 8003356:	4827      	ldr	r0, [pc, #156]	@ (80033f4 <_printf_i+0x238>)
 8003358:	e7e9      	b.n	800332e <_printf_i+0x172>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	f023 0320 	bic.w	r3, r3, #32
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	e7f6      	b.n	8003352 <_printf_i+0x196>
 8003364:	4616      	mov	r6, r2
 8003366:	e7bd      	b.n	80032e4 <_printf_i+0x128>
 8003368:	6833      	ldr	r3, [r6, #0]
 800336a:	6825      	ldr	r5, [r4, #0]
 800336c:	6961      	ldr	r1, [r4, #20]
 800336e:	1d18      	adds	r0, r3, #4
 8003370:	6030      	str	r0, [r6, #0]
 8003372:	062e      	lsls	r6, r5, #24
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	d501      	bpl.n	800337c <_printf_i+0x1c0>
 8003378:	6019      	str	r1, [r3, #0]
 800337a:	e002      	b.n	8003382 <_printf_i+0x1c6>
 800337c:	0668      	lsls	r0, r5, #25
 800337e:	d5fb      	bpl.n	8003378 <_printf_i+0x1bc>
 8003380:	8019      	strh	r1, [r3, #0]
 8003382:	2300      	movs	r3, #0
 8003384:	6123      	str	r3, [r4, #16]
 8003386:	4616      	mov	r6, r2
 8003388:	e7bc      	b.n	8003304 <_printf_i+0x148>
 800338a:	6833      	ldr	r3, [r6, #0]
 800338c:	1d1a      	adds	r2, r3, #4
 800338e:	6032      	str	r2, [r6, #0]
 8003390:	681e      	ldr	r6, [r3, #0]
 8003392:	6862      	ldr	r2, [r4, #4]
 8003394:	2100      	movs	r1, #0
 8003396:	4630      	mov	r0, r6
 8003398:	f7fc ff22 	bl	80001e0 <memchr>
 800339c:	b108      	cbz	r0, 80033a2 <_printf_i+0x1e6>
 800339e:	1b80      	subs	r0, r0, r6
 80033a0:	6060      	str	r0, [r4, #4]
 80033a2:	6863      	ldr	r3, [r4, #4]
 80033a4:	6123      	str	r3, [r4, #16]
 80033a6:	2300      	movs	r3, #0
 80033a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033ac:	e7aa      	b.n	8003304 <_printf_i+0x148>
 80033ae:	6923      	ldr	r3, [r4, #16]
 80033b0:	4632      	mov	r2, r6
 80033b2:	4649      	mov	r1, r9
 80033b4:	4640      	mov	r0, r8
 80033b6:	47d0      	blx	sl
 80033b8:	3001      	adds	r0, #1
 80033ba:	d0ad      	beq.n	8003318 <_printf_i+0x15c>
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	079b      	lsls	r3, r3, #30
 80033c0:	d413      	bmi.n	80033ea <_printf_i+0x22e>
 80033c2:	68e0      	ldr	r0, [r4, #12]
 80033c4:	9b03      	ldr	r3, [sp, #12]
 80033c6:	4298      	cmp	r0, r3
 80033c8:	bfb8      	it	lt
 80033ca:	4618      	movlt	r0, r3
 80033cc:	e7a6      	b.n	800331c <_printf_i+0x160>
 80033ce:	2301      	movs	r3, #1
 80033d0:	4632      	mov	r2, r6
 80033d2:	4649      	mov	r1, r9
 80033d4:	4640      	mov	r0, r8
 80033d6:	47d0      	blx	sl
 80033d8:	3001      	adds	r0, #1
 80033da:	d09d      	beq.n	8003318 <_printf_i+0x15c>
 80033dc:	3501      	adds	r5, #1
 80033de:	68e3      	ldr	r3, [r4, #12]
 80033e0:	9903      	ldr	r1, [sp, #12]
 80033e2:	1a5b      	subs	r3, r3, r1
 80033e4:	42ab      	cmp	r3, r5
 80033e6:	dcf2      	bgt.n	80033ce <_printf_i+0x212>
 80033e8:	e7eb      	b.n	80033c2 <_printf_i+0x206>
 80033ea:	2500      	movs	r5, #0
 80033ec:	f104 0619 	add.w	r6, r4, #25
 80033f0:	e7f5      	b.n	80033de <_printf_i+0x222>
 80033f2:	bf00      	nop
 80033f4:	08006d2a 	.word	0x08006d2a
 80033f8:	08006d3b 	.word	0x08006d3b

080033fc <__sflush_r>:
 80033fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003404:	0716      	lsls	r6, r2, #28
 8003406:	4605      	mov	r5, r0
 8003408:	460c      	mov	r4, r1
 800340a:	d454      	bmi.n	80034b6 <__sflush_r+0xba>
 800340c:	684b      	ldr	r3, [r1, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	dc02      	bgt.n	8003418 <__sflush_r+0x1c>
 8003412:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	dd48      	ble.n	80034aa <__sflush_r+0xae>
 8003418:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800341a:	2e00      	cmp	r6, #0
 800341c:	d045      	beq.n	80034aa <__sflush_r+0xae>
 800341e:	2300      	movs	r3, #0
 8003420:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003424:	682f      	ldr	r7, [r5, #0]
 8003426:	6a21      	ldr	r1, [r4, #32]
 8003428:	602b      	str	r3, [r5, #0]
 800342a:	d030      	beq.n	800348e <__sflush_r+0x92>
 800342c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	0759      	lsls	r1, r3, #29
 8003432:	d505      	bpl.n	8003440 <__sflush_r+0x44>
 8003434:	6863      	ldr	r3, [r4, #4]
 8003436:	1ad2      	subs	r2, r2, r3
 8003438:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800343a:	b10b      	cbz	r3, 8003440 <__sflush_r+0x44>
 800343c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800343e:	1ad2      	subs	r2, r2, r3
 8003440:	2300      	movs	r3, #0
 8003442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003444:	6a21      	ldr	r1, [r4, #32]
 8003446:	4628      	mov	r0, r5
 8003448:	47b0      	blx	r6
 800344a:	1c43      	adds	r3, r0, #1
 800344c:	89a3      	ldrh	r3, [r4, #12]
 800344e:	d106      	bne.n	800345e <__sflush_r+0x62>
 8003450:	6829      	ldr	r1, [r5, #0]
 8003452:	291d      	cmp	r1, #29
 8003454:	d82b      	bhi.n	80034ae <__sflush_r+0xb2>
 8003456:	4a2a      	ldr	r2, [pc, #168]	@ (8003500 <__sflush_r+0x104>)
 8003458:	410a      	asrs	r2, r1
 800345a:	07d6      	lsls	r6, r2, #31
 800345c:	d427      	bmi.n	80034ae <__sflush_r+0xb2>
 800345e:	2200      	movs	r2, #0
 8003460:	6062      	str	r2, [r4, #4]
 8003462:	04d9      	lsls	r1, r3, #19
 8003464:	6922      	ldr	r2, [r4, #16]
 8003466:	6022      	str	r2, [r4, #0]
 8003468:	d504      	bpl.n	8003474 <__sflush_r+0x78>
 800346a:	1c42      	adds	r2, r0, #1
 800346c:	d101      	bne.n	8003472 <__sflush_r+0x76>
 800346e:	682b      	ldr	r3, [r5, #0]
 8003470:	b903      	cbnz	r3, 8003474 <__sflush_r+0x78>
 8003472:	6560      	str	r0, [r4, #84]	@ 0x54
 8003474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003476:	602f      	str	r7, [r5, #0]
 8003478:	b1b9      	cbz	r1, 80034aa <__sflush_r+0xae>
 800347a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800347e:	4299      	cmp	r1, r3
 8003480:	d002      	beq.n	8003488 <__sflush_r+0x8c>
 8003482:	4628      	mov	r0, r5
 8003484:	f7ff fbea 	bl	8002c5c <_free_r>
 8003488:	2300      	movs	r3, #0
 800348a:	6363      	str	r3, [r4, #52]	@ 0x34
 800348c:	e00d      	b.n	80034aa <__sflush_r+0xae>
 800348e:	2301      	movs	r3, #1
 8003490:	4628      	mov	r0, r5
 8003492:	47b0      	blx	r6
 8003494:	4602      	mov	r2, r0
 8003496:	1c50      	adds	r0, r2, #1
 8003498:	d1c9      	bne.n	800342e <__sflush_r+0x32>
 800349a:	682b      	ldr	r3, [r5, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0c6      	beq.n	800342e <__sflush_r+0x32>
 80034a0:	2b1d      	cmp	r3, #29
 80034a2:	d001      	beq.n	80034a8 <__sflush_r+0xac>
 80034a4:	2b16      	cmp	r3, #22
 80034a6:	d11e      	bne.n	80034e6 <__sflush_r+0xea>
 80034a8:	602f      	str	r7, [r5, #0]
 80034aa:	2000      	movs	r0, #0
 80034ac:	e022      	b.n	80034f4 <__sflush_r+0xf8>
 80034ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034b2:	b21b      	sxth	r3, r3
 80034b4:	e01b      	b.n	80034ee <__sflush_r+0xf2>
 80034b6:	690f      	ldr	r7, [r1, #16]
 80034b8:	2f00      	cmp	r7, #0
 80034ba:	d0f6      	beq.n	80034aa <__sflush_r+0xae>
 80034bc:	0793      	lsls	r3, r2, #30
 80034be:	680e      	ldr	r6, [r1, #0]
 80034c0:	bf08      	it	eq
 80034c2:	694b      	ldreq	r3, [r1, #20]
 80034c4:	600f      	str	r7, [r1, #0]
 80034c6:	bf18      	it	ne
 80034c8:	2300      	movne	r3, #0
 80034ca:	eba6 0807 	sub.w	r8, r6, r7
 80034ce:	608b      	str	r3, [r1, #8]
 80034d0:	f1b8 0f00 	cmp.w	r8, #0
 80034d4:	dde9      	ble.n	80034aa <__sflush_r+0xae>
 80034d6:	6a21      	ldr	r1, [r4, #32]
 80034d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80034da:	4643      	mov	r3, r8
 80034dc:	463a      	mov	r2, r7
 80034de:	4628      	mov	r0, r5
 80034e0:	47b0      	blx	r6
 80034e2:	2800      	cmp	r0, #0
 80034e4:	dc08      	bgt.n	80034f8 <__sflush_r+0xfc>
 80034e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034ee:	81a3      	strh	r3, [r4, #12]
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034f8:	4407      	add	r7, r0
 80034fa:	eba8 0800 	sub.w	r8, r8, r0
 80034fe:	e7e7      	b.n	80034d0 <__sflush_r+0xd4>
 8003500:	dfbffffe 	.word	0xdfbffffe

08003504 <_fflush_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	690b      	ldr	r3, [r1, #16]
 8003508:	4605      	mov	r5, r0
 800350a:	460c      	mov	r4, r1
 800350c:	b913      	cbnz	r3, 8003514 <_fflush_r+0x10>
 800350e:	2500      	movs	r5, #0
 8003510:	4628      	mov	r0, r5
 8003512:	bd38      	pop	{r3, r4, r5, pc}
 8003514:	b118      	cbz	r0, 800351e <_fflush_r+0x1a>
 8003516:	6a03      	ldr	r3, [r0, #32]
 8003518:	b90b      	cbnz	r3, 800351e <_fflush_r+0x1a>
 800351a:	f7ff f91b 	bl	8002754 <__sinit>
 800351e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f3      	beq.n	800350e <_fflush_r+0xa>
 8003526:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003528:	07d0      	lsls	r0, r2, #31
 800352a:	d404      	bmi.n	8003536 <_fflush_r+0x32>
 800352c:	0599      	lsls	r1, r3, #22
 800352e:	d402      	bmi.n	8003536 <_fflush_r+0x32>
 8003530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003532:	f7ff fb6a 	bl	8002c0a <__retarget_lock_acquire_recursive>
 8003536:	4628      	mov	r0, r5
 8003538:	4621      	mov	r1, r4
 800353a:	f7ff ff5f 	bl	80033fc <__sflush_r>
 800353e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003540:	07da      	lsls	r2, r3, #31
 8003542:	4605      	mov	r5, r0
 8003544:	d4e4      	bmi.n	8003510 <_fflush_r+0xc>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	059b      	lsls	r3, r3, #22
 800354a:	d4e1      	bmi.n	8003510 <_fflush_r+0xc>
 800354c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800354e:	f7ff fb5d 	bl	8002c0c <__retarget_lock_release_recursive>
 8003552:	e7dd      	b.n	8003510 <_fflush_r+0xc>

08003554 <fiprintf>:
 8003554:	b40e      	push	{r1, r2, r3}
 8003556:	b503      	push	{r0, r1, lr}
 8003558:	4601      	mov	r1, r0
 800355a:	ab03      	add	r3, sp, #12
 800355c:	4805      	ldr	r0, [pc, #20]	@ (8003574 <fiprintf+0x20>)
 800355e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003562:	6800      	ldr	r0, [r0, #0]
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	f7ff fca3 	bl	8002eb0 <_vfiprintf_r>
 800356a:	b002      	add	sp, #8
 800356c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003570:	b003      	add	sp, #12
 8003572:	4770      	bx	lr
 8003574:	20000018 	.word	0x20000018

08003578 <__swhatbuf_r>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	460c      	mov	r4, r1
 800357c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003580:	2900      	cmp	r1, #0
 8003582:	b096      	sub	sp, #88	@ 0x58
 8003584:	4615      	mov	r5, r2
 8003586:	461e      	mov	r6, r3
 8003588:	da0d      	bge.n	80035a6 <__swhatbuf_r+0x2e>
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003590:	f04f 0100 	mov.w	r1, #0
 8003594:	bf14      	ite	ne
 8003596:	2340      	movne	r3, #64	@ 0x40
 8003598:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800359c:	2000      	movs	r0, #0
 800359e:	6031      	str	r1, [r6, #0]
 80035a0:	602b      	str	r3, [r5, #0]
 80035a2:	b016      	add	sp, #88	@ 0x58
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
 80035a6:	466a      	mov	r2, sp
 80035a8:	f000 f87c 	bl	80036a4 <_fstat_r>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	dbec      	blt.n	800358a <__swhatbuf_r+0x12>
 80035b0:	9901      	ldr	r1, [sp, #4]
 80035b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80035b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80035ba:	4259      	negs	r1, r3
 80035bc:	4159      	adcs	r1, r3
 80035be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035c2:	e7eb      	b.n	800359c <__swhatbuf_r+0x24>

080035c4 <__smakebuf_r>:
 80035c4:	898b      	ldrh	r3, [r1, #12]
 80035c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035c8:	079d      	lsls	r5, r3, #30
 80035ca:	4606      	mov	r6, r0
 80035cc:	460c      	mov	r4, r1
 80035ce:	d507      	bpl.n	80035e0 <__smakebuf_r+0x1c>
 80035d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	6123      	str	r3, [r4, #16]
 80035d8:	2301      	movs	r3, #1
 80035da:	6163      	str	r3, [r4, #20]
 80035dc:	b003      	add	sp, #12
 80035de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035e0:	ab01      	add	r3, sp, #4
 80035e2:	466a      	mov	r2, sp
 80035e4:	f7ff ffc8 	bl	8003578 <__swhatbuf_r>
 80035e8:	9f00      	ldr	r7, [sp, #0]
 80035ea:	4605      	mov	r5, r0
 80035ec:	4639      	mov	r1, r7
 80035ee:	4630      	mov	r0, r6
 80035f0:	f7ff fba8 	bl	8002d44 <_malloc_r>
 80035f4:	b948      	cbnz	r0, 800360a <__smakebuf_r+0x46>
 80035f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035fa:	059a      	lsls	r2, r3, #22
 80035fc:	d4ee      	bmi.n	80035dc <__smakebuf_r+0x18>
 80035fe:	f023 0303 	bic.w	r3, r3, #3
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	81a3      	strh	r3, [r4, #12]
 8003608:	e7e2      	b.n	80035d0 <__smakebuf_r+0xc>
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	6020      	str	r0, [r4, #0]
 800360e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003612:	81a3      	strh	r3, [r4, #12]
 8003614:	9b01      	ldr	r3, [sp, #4]
 8003616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800361a:	b15b      	cbz	r3, 8003634 <__smakebuf_r+0x70>
 800361c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003620:	4630      	mov	r0, r6
 8003622:	f000 f851 	bl	80036c8 <_isatty_r>
 8003626:	b128      	cbz	r0, 8003634 <__smakebuf_r+0x70>
 8003628:	89a3      	ldrh	r3, [r4, #12]
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	81a3      	strh	r3, [r4, #12]
 8003634:	89a3      	ldrh	r3, [r4, #12]
 8003636:	431d      	orrs	r5, r3
 8003638:	81a5      	strh	r5, [r4, #12]
 800363a:	e7cf      	b.n	80035dc <__smakebuf_r+0x18>

0800363c <_putc_r>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	460d      	mov	r5, r1
 8003640:	4614      	mov	r4, r2
 8003642:	4606      	mov	r6, r0
 8003644:	b118      	cbz	r0, 800364e <_putc_r+0x12>
 8003646:	6a03      	ldr	r3, [r0, #32]
 8003648:	b90b      	cbnz	r3, 800364e <_putc_r+0x12>
 800364a:	f7ff f883 	bl	8002754 <__sinit>
 800364e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003650:	07d8      	lsls	r0, r3, #31
 8003652:	d405      	bmi.n	8003660 <_putc_r+0x24>
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	0599      	lsls	r1, r3, #22
 8003658:	d402      	bmi.n	8003660 <_putc_r+0x24>
 800365a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800365c:	f7ff fad5 	bl	8002c0a <__retarget_lock_acquire_recursive>
 8003660:	68a3      	ldr	r3, [r4, #8]
 8003662:	3b01      	subs	r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	60a3      	str	r3, [r4, #8]
 8003668:	da05      	bge.n	8003676 <_putc_r+0x3a>
 800366a:	69a2      	ldr	r2, [r4, #24]
 800366c:	4293      	cmp	r3, r2
 800366e:	db12      	blt.n	8003696 <_putc_r+0x5a>
 8003670:	b2eb      	uxtb	r3, r5
 8003672:	2b0a      	cmp	r3, #10
 8003674:	d00f      	beq.n	8003696 <_putc_r+0x5a>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	6022      	str	r2, [r4, #0]
 800367c:	701d      	strb	r5, [r3, #0]
 800367e:	b2ed      	uxtb	r5, r5
 8003680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003682:	07da      	lsls	r2, r3, #31
 8003684:	d405      	bmi.n	8003692 <_putc_r+0x56>
 8003686:	89a3      	ldrh	r3, [r4, #12]
 8003688:	059b      	lsls	r3, r3, #22
 800368a:	d402      	bmi.n	8003692 <_putc_r+0x56>
 800368c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800368e:	f7ff fabd 	bl	8002c0c <__retarget_lock_release_recursive>
 8003692:	4628      	mov	r0, r5
 8003694:	bd70      	pop	{r4, r5, r6, pc}
 8003696:	4629      	mov	r1, r5
 8003698:	4622      	mov	r2, r4
 800369a:	4630      	mov	r0, r6
 800369c:	f7ff f94b 	bl	8002936 <__swbuf_r>
 80036a0:	4605      	mov	r5, r0
 80036a2:	e7ed      	b.n	8003680 <_putc_r+0x44>

080036a4 <_fstat_r>:
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4d07      	ldr	r5, [pc, #28]	@ (80036c4 <_fstat_r+0x20>)
 80036a8:	2300      	movs	r3, #0
 80036aa:	4604      	mov	r4, r0
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	602b      	str	r3, [r5, #0]
 80036b2:	f7fe f952 	bl	800195a <_fstat>
 80036b6:	1c43      	adds	r3, r0, #1
 80036b8:	d102      	bne.n	80036c0 <_fstat_r+0x1c>
 80036ba:	682b      	ldr	r3, [r5, #0]
 80036bc:	b103      	cbz	r3, 80036c0 <_fstat_r+0x1c>
 80036be:	6023      	str	r3, [r4, #0]
 80036c0:	bd38      	pop	{r3, r4, r5, pc}
 80036c2:	bf00      	nop
 80036c4:	200001e0 	.word	0x200001e0

080036c8 <_isatty_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4d06      	ldr	r5, [pc, #24]	@ (80036e4 <_isatty_r+0x1c>)
 80036cc:	2300      	movs	r3, #0
 80036ce:	4604      	mov	r4, r0
 80036d0:	4608      	mov	r0, r1
 80036d2:	602b      	str	r3, [r5, #0]
 80036d4:	f7fe f951 	bl	800197a <_isatty>
 80036d8:	1c43      	adds	r3, r0, #1
 80036da:	d102      	bne.n	80036e2 <_isatty_r+0x1a>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	b103      	cbz	r3, 80036e2 <_isatty_r+0x1a>
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	200001e0 	.word	0x200001e0

080036e8 <_sbrk_r>:
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4d06      	ldr	r5, [pc, #24]	@ (8003704 <_sbrk_r+0x1c>)
 80036ec:	2300      	movs	r3, #0
 80036ee:	4604      	mov	r4, r0
 80036f0:	4608      	mov	r0, r1
 80036f2:	602b      	str	r3, [r5, #0]
 80036f4:	f7fe f95a 	bl	80019ac <_sbrk>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d102      	bne.n	8003702 <_sbrk_r+0x1a>
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	b103      	cbz	r3, 8003702 <_sbrk_r+0x1a>
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	bd38      	pop	{r3, r4, r5, pc}
 8003704:	200001e0 	.word	0x200001e0

08003708 <abort>:
 8003708:	b508      	push	{r3, lr}
 800370a:	2006      	movs	r0, #6
 800370c:	f000 f82c 	bl	8003768 <raise>
 8003710:	2001      	movs	r0, #1
 8003712:	f7fe f8d2 	bl	80018ba <_exit>

08003716 <_raise_r>:
 8003716:	291f      	cmp	r1, #31
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4605      	mov	r5, r0
 800371c:	460c      	mov	r4, r1
 800371e:	d904      	bls.n	800372a <_raise_r+0x14>
 8003720:	2316      	movs	r3, #22
 8003722:	6003      	str	r3, [r0, #0]
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	bd38      	pop	{r3, r4, r5, pc}
 800372a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800372c:	b112      	cbz	r2, 8003734 <_raise_r+0x1e>
 800372e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003732:	b94b      	cbnz	r3, 8003748 <_raise_r+0x32>
 8003734:	4628      	mov	r0, r5
 8003736:	f000 f831 	bl	800379c <_getpid_r>
 800373a:	4622      	mov	r2, r4
 800373c:	4601      	mov	r1, r0
 800373e:	4628      	mov	r0, r5
 8003740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003744:	f000 b818 	b.w	8003778 <_kill_r>
 8003748:	2b01      	cmp	r3, #1
 800374a:	d00a      	beq.n	8003762 <_raise_r+0x4c>
 800374c:	1c59      	adds	r1, r3, #1
 800374e:	d103      	bne.n	8003758 <_raise_r+0x42>
 8003750:	2316      	movs	r3, #22
 8003752:	6003      	str	r3, [r0, #0]
 8003754:	2001      	movs	r0, #1
 8003756:	e7e7      	b.n	8003728 <_raise_r+0x12>
 8003758:	2100      	movs	r1, #0
 800375a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800375e:	4620      	mov	r0, r4
 8003760:	4798      	blx	r3
 8003762:	2000      	movs	r0, #0
 8003764:	e7e0      	b.n	8003728 <_raise_r+0x12>
	...

08003768 <raise>:
 8003768:	4b02      	ldr	r3, [pc, #8]	@ (8003774 <raise+0xc>)
 800376a:	4601      	mov	r1, r0
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f7ff bfd2 	b.w	8003716 <_raise_r>
 8003772:	bf00      	nop
 8003774:	20000018 	.word	0x20000018

08003778 <_kill_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4d07      	ldr	r5, [pc, #28]	@ (8003798 <_kill_r+0x20>)
 800377c:	2300      	movs	r3, #0
 800377e:	4604      	mov	r4, r0
 8003780:	4608      	mov	r0, r1
 8003782:	4611      	mov	r1, r2
 8003784:	602b      	str	r3, [r5, #0]
 8003786:	f7fe f888 	bl	800189a <_kill>
 800378a:	1c43      	adds	r3, r0, #1
 800378c:	d102      	bne.n	8003794 <_kill_r+0x1c>
 800378e:	682b      	ldr	r3, [r5, #0]
 8003790:	b103      	cbz	r3, 8003794 <_kill_r+0x1c>
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	bd38      	pop	{r3, r4, r5, pc}
 8003796:	bf00      	nop
 8003798:	200001e0 	.word	0x200001e0

0800379c <_getpid_r>:
 800379c:	f7fe b875 	b.w	800188a <_getpid>

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
