
heart_rate_I2C_combined_NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e8c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  08009030  08009030  0000a030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009818  08009818  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009818  08009818  0000a818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009820  08009820  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009820  08009820  0000a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009824  08009824  0000a824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009828  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000924  200001d8  08009a00  0000b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000afc  08009a00  0000bafc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b727  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a4  00000000  00000000  0001692f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  000190d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ad  00000000  00000000  00019b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dc5  00000000  00000000  0001a2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9ae  00000000  00000000  0003108a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088926  00000000  00000000  0003ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c735e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb8  00000000  00000000  000c73a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000cb05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009014 	.word	0x08009014

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009014 	.word	0x08009014

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <millis>:
}



uint64_t millis()
	{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffa:	b672      	cpsid	i
}
 8000ffc:	bf00      	nop
	__disable_irq();
	uint64_t ml=mil;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <millis+0x2c>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001008:	b662      	cpsie	i
}
 800100a:	bf00      	nop
	__enable_irq();
	return ml;
 800100c:	e9d7 2300 	ldrd	r2, r3, [r7]
	}
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200001f8 	.word	0x200001f8

08001024 <delay>:



void delay(uint32_t time)
	{
 8001024:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]

	uint64_t start=millis();
 800102e:	f7ff ffe1 	bl	8000ff4 <millis>
 8001032:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while((millis() - start) < time);
 8001036:	bf00      	nop
 8001038:	f7ff ffdc 	bl	8000ff4 <millis>
 800103c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001040:	1a84      	subs	r4, r0, r2
 8001042:	eb61 0503 	sbc.w	r5, r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	4698      	mov	r8, r3
 800104c:	4691      	mov	r9, r2
 800104e:	4544      	cmp	r4, r8
 8001050:	eb75 0309 	sbcs.w	r3, r5, r9
 8001054:	d3f0      	bcc.n	8001038 <delay+0x14>

	}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001064 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	mil++;
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <SysTick_Handler+0x48>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	1c50      	adds	r0, r2, #1
 8001070:	f143 0100 	adc.w	r1, r3, #0
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <SysTick_Handler+0x48>)
 8001076:	e9c3 0100 	strd	r0, r1, [r3]
    if (timeout > 0)  timeout--;
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <SysTick_Handler+0x4c>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <SysTick_Handler+0x2a>
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <SysTick_Handler+0x4c>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	3b01      	subs	r3, #1
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <SysTick_Handler+0x4c>)
 800108c:	801a      	strh	r2, [r3, #0]
	if (VCCTimeout>0) VCCTimeout--;
 800108e:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <SysTick_Handler+0x50>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	dd04      	ble.n	80010a0 <SysTick_Handler+0x3c>
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <SysTick_Handler+0x50>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3b01      	subs	r3, #1
 800109c:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <SysTick_Handler+0x50>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200001f8 	.word	0x200001f8
 80010b0:	20000590 	.word	0x20000590
 80010b4:	20000000 	.word	0x20000000

080010b8 <I2C_init_config>:
 */

#include <I2C_driver.h>
#include"delay.h"

void I2C_init_config(){
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80010bc:	4b35      	ldr	r3, [pc, #212]	@ (8001194 <I2C_init_config+0xdc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	4a34      	ldr	r2, [pc, #208]	@ (8001194 <I2C_init_config+0xdc>)
 80010c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c6:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; //send clock for I2C1 and port B
 80010c8:	4b32      	ldr	r3, [pc, #200]	@ (8001194 <I2C_init_config+0xdc>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010cc:	4a31      	ldr	r2, [pc, #196]	@ (8001194 <I2C_init_config+0xdc>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	6313      	str	r3, [r2, #48]	@ 0x30

	//declare as alternate func
	MODIFY_FIELD(GPIOB->MODER,GPIO_MODER_MODER8,ESF_GPIO_MODER_ALT_FUNC);
 80010d4:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <I2C_init_config+0xe0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80010dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001198 <I2C_init_config+0xe0>)
 80010de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e2:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER,GPIO_MODER_MODER9,ESF_GPIO_MODER_ALT_FUNC);
 80010e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <I2C_init_config+0xe0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80010ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001198 <I2C_init_config+0xe0>)
 80010ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010f2:	6013      	str	r3, [r2, #0]

	//PB8 scl PB9 sda
	MODIFY_FIELD(GPIOB->AFR[1], GPIO_AFRH_AFSEL8, 4);
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <I2C_init_config+0xe0>)
 80010f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f8:	f023 030f 	bic.w	r3, r3, #15
 80010fc:	4a26      	ldr	r2, [pc, #152]	@ (8001198 <I2C_init_config+0xe0>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6253      	str	r3, [r2, #36]	@ 0x24
	MODIFY_FIELD(GPIOB->AFR[1], GPIO_AFRH_AFSEL9, 4);
 8001104:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <I2C_init_config+0xe0>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800110c:	4a22      	ldr	r2, [pc, #136]	@ (8001198 <I2C_init_config+0xe0>)
 800110e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001112:	6253      	str	r3, [r2, #36]	@ 0x24

	//configure as outout open drain
	MODIFY_FIELD(GPIOB->OTYPER,GPIO_OTYPER_OT8,1);
 8001114:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <I2C_init_config+0xe0>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a1f      	ldr	r2, [pc, #124]	@ (8001198 <I2C_init_config+0xe0>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111e:	6053      	str	r3, [r2, #4]
	MODIFY_FIELD(GPIOB->OTYPER,GPIO_OTYPER_OT9,1);
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <I2C_init_config+0xe0>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a1c      	ldr	r2, [pc, #112]	@ (8001198 <I2C_init_config+0xe0>)
 8001126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800112a:	6053      	str	r3, [r2, #4]

	//set speed
	GPIOB->OSPEEDR|=(3<<16)|(3<<18);
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <I2C_init_config+0xe0>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <I2C_init_config+0xe0>)
 8001132:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8001136:	6093      	str	r3, [r2, #8]

	//select pull up
	GPIOB->PUPDR|=(1<<16)|(1<<18);
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <I2C_init_config+0xe0>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <I2C_init_config+0xe0>)
 800113e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8001142:	60d3      	str	r3, [r2, #12]

	//i2c setup begins
	//first reset i2c
	I2C1->CR1 = I2C_CR1_SWRST;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <I2C_init_config+0xe4>)
 8001146:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800114a:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <I2C_init_config+0xe4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <I2C_init_config+0xe4>)
 8001152:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001156:	6013      	str	r3, [r2, #0]

	//setup peripherla clock freq
	I2C1->CR2 |= 0x18<<0;// its 24 mhz hex of 24 ! see ioc file
 8001158:	4b10      	ldr	r3, [pc, #64]	@ (800119c <I2C_init_config+0xe4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a0f      	ldr	r2, [pc, #60]	@ (800119c <I2C_init_config+0xe4>)
 800115e:	f043 0318 	orr.w	r3, r3, #24
 8001162:	6053      	str	r3, [r2, #4]

	//i2c ccrr value see thigh calc its 120 in decimal 1000+4000/(1/pckl which is 24))
	I2C1->CCR|=0x78<<0;
 8001164:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <I2C_init_config+0xe4>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <I2C_init_config+0xe4>)
 800116a:	f043 0378 	orr.w	r3, r3, #120	@ 0x78
 800116e:	61d3      	str	r3, [r2, #28]

	//set trise
	I2C1->TRISE|=0x19<<0; //1000/(1pcll)+1
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <I2C_init_config+0xe4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4a09      	ldr	r2, [pc, #36]	@ (800119c <I2C_init_config+0xe4>)
 8001176:	f043 0319 	orr.w	r3, r3, #25
 800117a:	6213      	str	r3, [r2, #32]

	//enable i2c peripheral
	I2C1->CR1 |= I2C_CR1_PE;
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <I2C_init_config+0xe4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a06      	ldr	r2, [pc, #24]	@ (800119c <I2C_init_config+0xe4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400
 800119c:	40005400 	.word	0x40005400

080011a0 <I2C_START_COMS>:

void I2C_START_COMS(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	//start bit
	I2C1->CR1|=I2C_CR1_ACK; //enable ACK
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <I2C_START_COMS+0x34>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <I2C_START_COMS+0x34>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ae:	6013      	str	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_START;
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <I2C_START_COMS+0x34>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <I2C_START_COMS+0x34>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ba:	6013      	str	r3, [r2, #0]
	while (I2C1->CR2 & I2C_SR1_SB){}// wait for start condition to generate
 80011bc:	bf00      	nop
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <I2C_START_COMS+0x34>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f9      	bne.n	80011be <I2C_START_COMS+0x1e>
	delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f7ff ff2a 	bl	8001024 <delay>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40005400 	.word	0x40005400

080011d8 <I2C_WRITE_DATA>:

void I2C_WRITE_DATA(uint8_t data){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 &I2C_SR1_TXE));  // wait for TXE bit to set
 80011e2:	bf00      	nop
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <I2C_WRITE_DATA+0x3c>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f9      	beq.n	80011e4 <I2C_WRITE_DATA+0xc>
	I2C1->DR = data;
 80011f0:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <I2C_WRITE_DATA+0x3c>)
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 &I2C_SR1_BTF)); //wait for byte trans
 80011f6:	bf00      	nop
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <I2C_WRITE_DATA+0x3c>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f9      	beq.n	80011f8 <I2C_WRITE_DATA+0x20>
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40005400 	.word	0x40005400

08001218 <I2C_SEND_ADDRESS>:

void I2C_SEND_ADDRESS(uint8_t address){
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]

	I2C1->DR = address;
 8001222:	4a0c      	ldr	r2, [pc, #48]	@ (8001254 <I2C_SEND_ADDRESS+0x3c>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	6113      	str	r3, [r2, #16]
	//delay(4);
//	printf("\n \r  1 of addr is %d \n \r",I2C1->SR1 & (1<<1));
	while (!(I2C1->SR1 & (1<<1))); //wait for address bit to be set
 8001228:	bf00      	nop
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <I2C_SEND_ADDRESS+0x3c>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f9      	beq.n	800122a <I2C_SEND_ADDRESS+0x12>
	//This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
//	printf("\n \r after 2 of addr is %d \n \r",I2C1->SR1 & (1<<1));
	uint8_t temp_clear=I2C1->SR1 | I2C1->SR2;
 8001236:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <I2C_SEND_ADDRESS+0x3c>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <I2C_SEND_ADDRESS+0x3c>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	73fb      	strb	r3, [r7, #15]
//	printf("\n \r after 3 of addr is %d \n \r",I2C1->SR1 & (1<<1));


}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40005400 	.word	0x40005400

08001258 <I2C_STOP_COMS>:

void I2C_STOP_COMS(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	I2C1->CR1|=I2C_CR1_STOP; //stop condition
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <I2C_STOP_COMS+0x1c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <I2C_STOP_COMS+0x1c>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001266:	6013      	str	r3, [r2, #0]
   // while (I2C1->CR1 & I2C_CR1_STOP);
	delay(1);
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff fedb 	bl	8001024 <delay>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40005400 	.word	0x40005400

08001278 <I2C_READ>:


void I2C_READ(uint8_t address_slave, uint8_t *buffer_recv,uint8_t recv_buff_size){
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4613      	mov	r3, r2
 8001286:	71bb      	strb	r3, [r7, #6]
	uint8_t remaining_bytes=recv_buff_size;
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	73fb      	strb	r3, [r7, #15]
//if only 1
/*. In case a single byte has to be received, the Acknowledge disable is made during EV6
(before ADDR flag is cleared) and the STOP condition generation is made after EV6.*/
	if(recv_buff_size==1){
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d126      	bne.n	80012e0 <I2C_READ+0x68>
		I2C1->DR = address_slave;
 8001292:	4a3c      	ldr	r2, [pc, #240]	@ (8001384 <I2C_READ+0x10c>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 &I2C_SR1_ADDR)); //wait for address bit to be set
 8001298:	bf00      	nop
 800129a:	4b3a      	ldr	r3, [pc, #232]	@ (8001384 <I2C_READ+0x10c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f9      	beq.n	800129a <I2C_READ+0x22>
		I2C1->CR1 &= ~(1<<10); //clear ack
 80012a6:	4b37      	ldr	r3, [pc, #220]	@ (8001384 <I2C_READ+0x10c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a36      	ldr	r2, [pc, #216]	@ (8001384 <I2C_READ+0x10c>)
 80012ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80012b0:	6013      	str	r3, [r2, #0]
		uint8_t temp_clear=I2C1->SR1 | I2C1->SR2; //ev6
 80012b2:	4b34      	ldr	r3, [pc, #208]	@ (8001384 <I2C_READ+0x10c>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b32      	ldr	r3, [pc, #200]	@ (8001384 <I2C_READ+0x10c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	73bb      	strb	r3, [r7, #14]
		I2C_STOP_COMS();
 80012c2:	f7ff ffc9 	bl	8001258 <I2C_STOP_COMS>
		while (!(I2C1->SR1 &I2C_SR1_RXNE));
 80012c6:	bf00      	nop
 80012c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001384 <I2C_READ+0x10c>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f9      	beq.n	80012c8 <I2C_READ+0x50>
		buffer_recv[0]= I2C1->DR;// recieve data
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <I2C_READ+0x10c>)
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	701a      	strb	r2, [r3, #0]
		return ;
 80012de:	e04e      	b.n	800137e <I2C_READ+0x106>
must be cleared just after reading the second last data byte (after second last RxNE
event).
2. In order to generate the Stop/Restart condition, software must set the STOP/START bit
after reading the second last data byte (after the second last RxNE event). */
	else{
		I2C_SEND_ADDRESS(address_slave);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff98 	bl	8001218 <I2C_SEND_ADDRESS>
		//keep reading and storing in loop also send acks
		while(remaining_bytes>2){
 80012e8:	e019      	b.n	800131e <I2C_READ+0xa6>
			while (!(I2C1->SR1 &I2C_SR1_RXNE));
 80012ea:	bf00      	nop
 80012ec:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <I2C_READ+0x10c>)
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f9      	beq.n	80012ec <I2C_READ+0x74>
			buffer_recv[recv_buff_size-remaining_bytes]=I2C1->DR;
 80012f8:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <I2C_READ+0x10c>)
 80012fa:	6919      	ldr	r1, [r3, #16]
 80012fc:	79ba      	ldrb	r2, [r7, #6]
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	461a      	mov	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	b2ca      	uxtb	r2, r1
 800130a:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= I2C_CR1_ACK; //send ack master sends this !!
 800130c:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <I2C_READ+0x10c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <I2C_READ+0x10c>)
 8001312:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001316:	6013      	str	r3, [r2, #0]
			remaining_bytes--;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	3b01      	subs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
		while(remaining_bytes>2){
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d8e2      	bhi.n	80012ea <I2C_READ+0x72>
		}

		//second last byte nack condition
		while (!(I2C1->SR1 &I2C_SR1_RXNE));
 8001324:	bf00      	nop
 8001326:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <I2C_READ+0x10c>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f9      	beq.n	8001326 <I2C_READ+0xae>
		buffer_recv[recv_buff_size-remaining_bytes]=I2C1->DR;
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <I2C_READ+0x10c>)
 8001334:	6919      	ldr	r1, [r3, #16]
 8001336:	79ba      	ldrb	r2, [r7, #6]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	461a      	mov	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	4413      	add	r3, r2
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1<<10); //clear ack
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <I2C_READ+0x10c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a0e      	ldr	r2, [pc, #56]	@ (8001384 <I2C_READ+0x10c>)
 800134c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001350:	6013      	str	r3, [r2, #0]
		I2C_STOP_COMS();
 8001352:	f7ff ff81 	bl	8001258 <I2C_STOP_COMS>
		remaining_bytes--;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	3b01      	subs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
		//last byte
		while (!(I2C1->SR1 &I2C_SR1_RXNE));
 800135c:	bf00      	nop
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <I2C_READ+0x10c>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f9      	beq.n	800135e <I2C_READ+0xe6>
		buffer_recv[recv_buff_size-remaining_bytes]=I2C1->DR;
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <I2C_READ+0x10c>)
 800136c:	6919      	ldr	r1, [r3, #16]
 800136e:	79ba      	ldrb	r2, [r7, #6]
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	461a      	mov	r2, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	b2ca      	uxtb	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
	}

}
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400

08001388 <print>:
	#include"utilities.h"
#include<stdio.h>


void print(uint8_t data[], uint32_t len)
	{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	int i=0;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
	while(data[i]){
 8001396:	e009      	b.n	80013ac <print+0x24>
		putchar(data[i]);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 fa3b 	bl	800581c <putchar>
		i++;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
	while(data[i]){
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1ef      	bne.n	8001398 <print+0x10>
	}
	printf("\n \r");
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <print+0x40>)
 80013ba:	f004 fa1d 	bl	80057f8 <iprintf>
	}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	08009030 	.word	0x08009030

080013cc <init_CSN_CE_PINS>:

void init_CSN_CE_PINS(){
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <init_CSN_CE_PINS+0x3c>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001408 <init_CSN_CE_PINS+0x3c>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6313      	str	r3, [r2, #48]	@ 0x30
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER4, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <init_CSN_CE_PINS+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013e4:	4a09      	ldr	r2, [pc, #36]	@ (800140c <init_CSN_CE_PINS+0x40>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ea:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER0, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <init_CSN_CE_PINS+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 0303 	bic.w	r3, r3, #3
 80013f4:	4a05      	ldr	r2, [pc, #20]	@ (800140c <init_CSN_CE_PINS+0x40>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <CSN_SELECT_NRF>:


	void CSN_SELECT_NRF(){
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BR_4; //pull low to enable nrf
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <CSN_SELECT_NRF+0x1c>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a04      	ldr	r2, [pc, #16]	@ (800142c <CSN_SELECT_NRF+0x1c>)
 800141a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800141e:	6193      	str	r3, [r2, #24]
	}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40020000 	.word	0x40020000

08001430 <CSN_UNSELECT_NRF>:

	void CSN_UNSELECT_NRF(){
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BS_4; //make high to disable
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <CSN_UNSELECT_NRF+0x1c>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <CSN_UNSELECT_NRF+0x1c>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6193      	str	r3, [r2, #24]
	}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40020000 	.word	0x40020000

08001450 <NRF_ENABLE>:

	void NRF_ENABLE(){
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BS_0;
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <NRF_ENABLE+0x1c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a04      	ldr	r2, [pc, #16]	@ (800146c <NRF_ENABLE+0x1c>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6193      	str	r3, [r2, #24]
	}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40020000 	.word	0x40020000

08001470 <NRF_DISABLE>:

	void NRF_DISABLE(){
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BR_0;
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <NRF_DISABLE+0x1c>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a04      	ldr	r2, [pc, #16]	@ (800148c <NRF_DISABLE+0x1c>)
 800147a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800147e:	6193      	str	r3, [r2, #24]
	}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40020000 	.word	0x40020000

08001490 <NRF_WRITE_REGISTER>:



	void NRF_WRITE_REGISTER(uint8_t REG_ADDRESS,uint8_t data){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	4613      	mov	r3, r2
 800149e:	71bb      	strb	r3, [r7, #6]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f043 0320 	orr.w	r3, r3, #32
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	733b      	strb	r3, [r7, #12]
		trans_buff[1]=data;
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	737b      	strb	r3, [r7, #13]
		CSN_SELECT_NRF();
 80014ae:	f7ff ffaf 	bl	8001410 <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,2);
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2102      	movs	r1, #2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fabd 	bl	8001a38 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 80014be:	f7ff ffb7 	bl	8001430 <CSN_UNSELECT_NRF>

	}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <NRF_WRITE_REG_MULTI_BYTES>:
	void NRF_WRITE_REG_MULTI_BYTES(uint8_t REG_ADDRESS,uint8_t* data_trans,int size_trans){
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	f043 0320 	orr.w	r3, r3, #32
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	753b      	strb	r3, [r7, #20]
		CSN_SELECT_NRF();
 80014e2:	f7ff ff95 	bl	8001410 <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,1);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2101      	movs	r1, #1
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 faa3 	bl	8001a38 <SPI_TX_MULTI>
		SPI_TX_MULTI(data_trans,size_trans);
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f000 fa9f 	bl	8001a38 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 80014fa:	f7ff ff99 	bl	8001430 <CSN_UNSELECT_NRF>
	}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <NRF_READ_REGISTER>:

	uint8_t NRF_READ_REGISTER(uint8_t REG_ADDRESS){
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
		uint8_t data_returned=0;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
		CSN_SELECT_NRF();
 8001514:	f7ff ff7c 	bl	8001410 <CSN_SELECT_NRF>
		SPI_TX_MULTI(&REG_ADDRESS,1);
 8001518:	1dfb      	adds	r3, r7, #7
 800151a:	2101      	movs	r1, #1
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fa8b 	bl	8001a38 <SPI_TX_MULTI>
		SPI_READ_MULTI(&data_returned,1);
 8001522:	f107 030f 	add.w	r3, r7, #15
 8001526:	2101      	movs	r1, #1
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fabd 	bl	8001aa8 <SPI_READ_MULTI>
		CSN_UNSELECT_NRF();
 800152e:	f7ff ff7f 	bl	8001430 <CSN_UNSELECT_NRF>
		return data_returned;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <NRF_PTX_CONFIG>:
		SPI_TX_MULTI(&REG_ADDRESS,1);
		SPI_READ_MULTI(RECV_BUFFER,RECV_BUFFER_SIZE);
		CSN_UNSELECT_NRF();
	}

	void NRF_PTX_CONFIG(uint8_t *Address, uint8_t channel){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
		NRF_DISABLE();
 8001548:	f7ff ff92 	bl	8001470 <NRF_DISABLE>
		NRF_WRITE_REGISTER(RF_CH,channel); //select channel
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	4619      	mov	r1, r3
 8001550:	2005      	movs	r0, #5
 8001552:	f7ff ff9d 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR,Address,5); //set address
 8001556:	2205      	movs	r2, #5
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	2010      	movs	r0, #16
 800155c:	f7ff ffb5 	bl	80014ca <NRF_WRITE_REG_MULTI_BYTES>

		// un comment belowo code to setup for auto ack
		uint8_t current_pipe_status=NRF_READ_REGISTER(EN_RXADDR);
 8001560:	2002      	movs	r0, #2
 8001562:	f7ff ffd0 	bl	8001506 <NRF_READ_REGISTER>
 8001566:	4603      	mov	r3, r0
 8001568:	73fb      	strb	r3, [r7, #15]
		current_pipe_status=current_pipe_status|(1<<0);//enable pipe 1
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
		NRF_WRITE_REGISTER(EN_RXADDR,current_pipe_status);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	4619      	mov	r1, r3
 8001576:	2002      	movs	r0, #2
 8001578:	f7ff ff8a 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0,Address,5); //pipe address
 800157c:	2205      	movs	r2, #5
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	200a      	movs	r0, #10
 8001582:	f7ff ffa2 	bl	80014ca <NRF_WRITE_REG_MULTI_BYTES>

		NRF_WRITE_REGISTER(CONFIG,0x0a); //powwr on device and keep in tx mode
 8001586:	210a      	movs	r1, #10
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff ff81 	bl	8001490 <NRF_WRITE_REGISTER>
		delay(5);
 800158e:	2005      	movs	r0, #5
 8001590:	f7ff fd48 	bl	8001024 <delay>
		//NRF_ENABLE();
	}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <nrf24_reset>:
		NRF_WRITE_REGISTER(CONFIG,0x0b); //powwr on device and keep in tx mode
		NRF_ENABLE();
	}

	void nrf24_reset(uint8_t REG)
	{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
		if (REG == STATUS)
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b07      	cmp	r3, #7
 80015aa:	d104      	bne.n	80015b6 <nrf24_reset+0x1a>
		{
			NRF_WRITE_REGISTER(STATUS, 0x00);
 80015ac:	2100      	movs	r1, #0
 80015ae:	2007      	movs	r0, #7
 80015b0:	f7ff ff6e 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
		NRF_WRITE_REGISTER(DYNPD, 0);
		NRF_WRITE_REGISTER(FEATURE, 0);
		}
	}
 80015b4:	e090      	b.n	80016d8 <nrf24_reset+0x13c>
		else if (REG == FIFO_STATUS)
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b17      	cmp	r3, #23
 80015ba:	d104      	bne.n	80015c6 <nrf24_reset+0x2a>
			NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 80015bc:	2111      	movs	r1, #17
 80015be:	2017      	movs	r0, #23
 80015c0:	f7ff ff66 	bl	8001490 <NRF_WRITE_REGISTER>
	}
 80015c4:	e088      	b.n	80016d8 <nrf24_reset+0x13c>
		NRF_WRITE_REGISTER(CONFIG, 0x08);
 80015c6:	2108      	movs	r1, #8
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff ff61 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3F);
 80015ce:	213f      	movs	r1, #63	@ 0x3f
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff ff5d 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_RXADDR, 0x03);
 80015d6:	2103      	movs	r1, #3
 80015d8:	2002      	movs	r0, #2
 80015da:	f7ff ff59 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_AW, 0x03);
 80015de:	2103      	movs	r1, #3
 80015e0:	2003      	movs	r0, #3
 80015e2:	f7ff ff55 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0x03);
 80015e6:	2103      	movs	r1, #3
 80015e8:	2004      	movs	r0, #4
 80015ea:	f7ff ff51 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_CH, 0x02);
 80015ee:	2102      	movs	r1, #2
 80015f0:	2005      	movs	r0, #5
 80015f2:	f7ff ff4d 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_SETUP, 0x0E);
 80015f6:	210e      	movs	r1, #14
 80015f8:	2006      	movs	r0, #6
 80015fa:	f7ff ff49 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(STATUS, 0x00);
 80015fe:	2100      	movs	r1, #0
 8001600:	2007      	movs	r0, #7
 8001602:	f7ff ff45 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(OBSERVE_TX, 0x00);
 8001606:	2100      	movs	r1, #0
 8001608:	2008      	movs	r0, #8
 800160a:	f7ff ff41 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(CD, 0x00);
 800160e:	2100      	movs	r1, #0
 8001610:	2009      	movs	r0, #9
 8001612:	f7ff ff3d 	bl	8001490 <NRF_WRITE_REGISTER>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001616:	4a32      	ldr	r2, [pc, #200]	@ (80016e0 <nrf24_reset+0x144>)
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001620:	6018      	str	r0, [r3, #0]
 8001622:	3304      	adds	r3, #4
 8001624:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	2205      	movs	r2, #5
 800162c:	4619      	mov	r1, r3
 800162e:	200a      	movs	r0, #10
 8001630:	f7ff ff4b 	bl	80014ca <NRF_WRITE_REG_MULTI_BYTES>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001634:	4a2b      	ldr	r2, [pc, #172]	@ (80016e4 <nrf24_reset+0x148>)
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800163e:	6018      	str	r0, [r3, #0]
 8001640:	3304      	adds	r3, #4
 8001642:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	2205      	movs	r2, #5
 800164a:	4619      	mov	r1, r3
 800164c:	200b      	movs	r0, #11
 800164e:	f7ff ff3c 	bl	80014ca <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_ADDR_P2, 0xC3);
 8001652:	21c3      	movs	r1, #195	@ 0xc3
 8001654:	200c      	movs	r0, #12
 8001656:	f7ff ff1b 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P3, 0xC4);
 800165a:	21c4      	movs	r1, #196	@ 0xc4
 800165c:	200d      	movs	r0, #13
 800165e:	f7ff ff17 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P4, 0xC5);
 8001662:	21c5      	movs	r1, #197	@ 0xc5
 8001664:	200e      	movs	r0, #14
 8001666:	f7ff ff13 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P5, 0xC6);
 800166a:	21c6      	movs	r1, #198	@ 0xc6
 800166c:	200f      	movs	r0, #15
 800166e:	f7ff ff0f 	bl	8001490 <NRF_WRITE_REGISTER>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001672:	4a1b      	ldr	r2, [pc, #108]	@ (80016e0 <nrf24_reset+0x144>)
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800167c:	6018      	str	r0, [r3, #0]
 800167e:	3304      	adds	r3, #4
 8001680:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR, tx_addr_def, 5);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	2205      	movs	r2, #5
 8001688:	4619      	mov	r1, r3
 800168a:	2010      	movs	r0, #16
 800168c:	f7ff ff1d 	bl	80014ca <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_PW_P0, 0);
 8001690:	2100      	movs	r1, #0
 8001692:	2011      	movs	r0, #17
 8001694:	f7ff fefc 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P1, 0);
 8001698:	2100      	movs	r1, #0
 800169a:	2012      	movs	r0, #18
 800169c:	f7ff fef8 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P2, 0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	2013      	movs	r0, #19
 80016a4:	f7ff fef4 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P3, 0);
 80016a8:	2100      	movs	r1, #0
 80016aa:	2014      	movs	r0, #20
 80016ac:	f7ff fef0 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P4, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	2015      	movs	r0, #21
 80016b4:	f7ff feec 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
 80016b8:	2100      	movs	r1, #0
 80016ba:	2016      	movs	r0, #22
 80016bc:	f7ff fee8 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 80016c0:	2111      	movs	r1, #17
 80016c2:	2017      	movs	r0, #23
 80016c4:	f7ff fee4 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(DYNPD, 0);
 80016c8:	2100      	movs	r1, #0
 80016ca:	201c      	movs	r0, #28
 80016cc:	f7ff fee0 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FEATURE, 0);
 80016d0:	2100      	movs	r1, #0
 80016d2:	201d      	movs	r0, #29
 80016d4:	f7ff fedc 	bl	8001490 <NRF_WRITE_REGISTER>
	}
 80016d8:	bf00      	nop
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	08009034 	.word	0x08009034
 80016e4:	0800903c 	.word	0x0800903c

080016e8 <NRF_INIT>:


	void NRF_INIT(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
		SPI_INIT(); //initalize spi comms
 80016ec:	f000 f94a 	bl	8001984 <SPI_INIT>
		init_CSN_CE_PINS();
 80016f0:	f7ff fe6c 	bl	80013cc <init_CSN_CE_PINS>
		NRF_DISABLE();
 80016f4:	f7ff febc 	bl	8001470 <NRF_DISABLE>
		nrf24_reset(0);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff ff4f 	bl	800159c <nrf24_reset>
		NRF_WRITE_REGISTER(CONFIG, 0);  // will be configured later
 80016fe:	2100      	movs	r1, #0
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fec5 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x00);  // No Auto ACK
 8001706:	2100      	movs	r1, #0
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff fec1 	bl	8001490 <NRF_WRITE_REGISTER>

		/*uncomment below code to enable auto ack stuff*/
		//NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
		//NRF_WRITE_REGISTER(SETUP_RETR, 0x03); // 15 retries, 500µs delay

		NRF_WRITE_REGISTER (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800170e:	2100      	movs	r1, #0
 8001710:	2002      	movs	r0, #2
 8001712:	f7ff febd 	bl	8001490 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001716:	2103      	movs	r1, #3
 8001718:	2003      	movs	r0, #3
 800171a:	f7ff feb9 	bl	8001490 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_RETR, 0x00);   // No retransmission
 800171e:	2100      	movs	r1, #0
 8001720:	2004      	movs	r0, #4
 8001722:	f7ff feb5 	bl	8001490 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_CH, 0);  // will be setup during Tx or RX
 8001726:	2100      	movs	r1, #0
 8001728:	2005      	movs	r0, #5
 800172a:	f7ff feb1 	bl	8001490 <NRF_WRITE_REGISTER>

		//enable dynamic payloads on all pipes
		//for DYNP I require EN_AA and Requires EN_DPL and ENAA_P0
		NRF_WRITE_REGISTER (DYNPD, 0x3f);  // will be setup during Tx or RX
 800172e:	213f      	movs	r1, #63	@ 0x3f
 8001730:	201c      	movs	r0, #28
 8001732:	f7ff fead 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER (FEATURE, 0x6);  // enable dynamic payload length
 8001736:	2106      	movs	r1, #6
 8001738:	201d      	movs	r0, #29
 800173a:	f7ff fea9 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
 800173e:	213f      	movs	r1, #63	@ 0x3f
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff fea5 	bl	8001490 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0xff); // 15 retries, 500µs delay
 8001746:	21ff      	movs	r1, #255	@ 0xff
 8001748:	2004      	movs	r0, #4
 800174a:	f7ff fea1 	bl	8001490 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_SETUP, 0x0e);   // Power= 0db, data rate = 2Mbps
 800174e:	210e      	movs	r1, #14
 8001750:	2006      	movs	r0, #6
 8001752:	f7ff fe9d 	bl	8001490 <NRF_WRITE_REGISTER>
		//NRF_ENABLE();
	}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}

0800175a <NRD_SEND_CMD>:


	void NRD_SEND_CMD (uint8_t cmd)
	{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
		// Pull the CS Pin LOW to select the device
		CSN_SELECT_NRF();
 8001764:	f7ff fe54 	bl	8001410 <CSN_SELECT_NRF>

		SPI_TX_MULTI(&cmd, 1);
 8001768:	1dfb      	adds	r3, r7, #7
 800176a:	2101      	movs	r1, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f963 	bl	8001a38 <SPI_TX_MULTI>

		// Pull the CS HIGH to release the device
		CSN_UNSELECT_NRF();
 8001772:	f7ff fe5d 	bl	8001430 <CSN_UNSELECT_NRF>
	}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <NRF_TX_DATA>:


	uint8_t NRF_TX_DATA(uint8_t *data_ptr,uint8_t sizeofdata){
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	@ 0x30
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
		uint8_t tx_fifo_stat;
		uint8_t status_reg;
		CSN_SELECT_NRF();
 800178c:	f7ff fe40 	bl	8001410 <CSN_SELECT_NRF>
	   uint8_t cmd = W_TX_PAYLOAD;
 8001790:	23a0      	movs	r3, #160	@ 0xa0
 8001792:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	  SPI_TX_MULTI( &cmd, 1);
 8001796:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800179a:	2101      	movs	r1, #1
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f94b 	bl	8001a38 <SPI_TX_MULTI>
		SPI_TX_MULTI(data_ptr,sizeofdata);//send payload
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	4619      	mov	r1, r3
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f946 	bl	8001a38 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 80017ac:	f7ff fe40 	bl	8001430 <CSN_UNSELECT_NRF>
		NRF_ENABLE();
 80017b0:	f7ff fe4e 	bl	8001450 <NRF_ENABLE>
		delay(10);
 80017b4:	200a      	movs	r0, #10
 80017b6:	f7ff fc35 	bl	8001024 <delay>
		NRF_DISABLE();
 80017ba:	f7ff fe59 	bl	8001470 <NRF_DISABLE>
		tx_fifo_stat=NRF_READ_REGISTER(FIFO_STATUS);
 80017be:	2017      	movs	r0, #23
 80017c0:	f7ff fea1 	bl	8001506 <NRF_READ_REGISTER>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		status_reg=NRF_READ_REGISTER(STATUS);
 80017ca:	2007      	movs	r0, #7
 80017cc:	f7ff fe9b 	bl	8001506 <NRF_READ_REGISTER>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		char ack_Recv[32];
		printf("tx_fifo_stat is - %d",tx_fifo_stat);
 80017d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017da:	4619      	mov	r1, r3
 80017dc:	4841      	ldr	r0, [pc, #260]	@ (80018e4 <NRF_TX_DATA+0x164>)
 80017de:	f004 f80b 	bl	80057f8 <iprintf>
		printf("status register- %d",status_reg);
 80017e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017e6:	4619      	mov	r1, r3
 80017e8:	483f      	ldr	r0, [pc, #252]	@ (80018e8 <NRF_TX_DATA+0x168>)
 80017ea:	f004 f805 	bl	80057f8 <iprintf>
		NRF_ENABLE();
 80017ee:	f7ff fe2f 	bl	8001450 <NRF_ENABLE>
		delay(10);
 80017f2:	200a      	movs	r0, #10
 80017f4:	f7ff fc16 	bl	8001024 <delay>
		if(is_data_on_pipe(0)==1){
 80017f8:	2000      	movs	r0, #0
 80017fa:	f000 f87f 	bl	80018fc <is_data_on_pipe>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b01      	cmp	r3, #1
 8001802:	d10d      	bne.n	8001820 <NRF_TX_DATA+0xa0>
			printf("maybe ack  1? \n \r");
 8001804:	4839      	ldr	r0, [pc, #228]	@ (80018ec <NRF_TX_DATA+0x16c>)
 8001806:	f003 fff7 	bl	80057f8 <iprintf>
			NRF_RECV_DATA(ack_Recv);
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f88e 	bl	8001930 <NRF_RECV_DATA>
			print(ack_Recv,32);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2120      	movs	r1, #32
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fdb4 	bl	8001388 <print>
		}


		if ((tx_fifo_stat&(1<<4)) && (!(tx_fifo_stat&(1<<3)))){
 8001820:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	d025      	beq.n	8001878 <NRF_TX_DATA+0xf8>
 800182c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d11f      	bne.n	8001878 <NRF_TX_DATA+0xf8>
			if(is_data_on_pipe(0)==1){
 8001838:	2000      	movs	r0, #0
 800183a:	f000 f85f 	bl	80018fc <is_data_on_pipe>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	d102      	bne.n	800184a <NRF_TX_DATA+0xca>
				printf("maybe ack ? \n \r");
 8001844:	482a      	ldr	r0, [pc, #168]	@ (80018f0 <NRF_TX_DATA+0x170>)
 8001846:	f003 ffd7 	bl	80057f8 <iprintf>
			}
			if(is_data_on_pipe(1)==1){
 800184a:	2001      	movs	r0, #1
 800184c:	f000 f856 	bl	80018fc <is_data_on_pipe>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	d102      	bne.n	800185c <NRF_TX_DATA+0xdc>
				printf("maybe ack ? \n \r");
 8001856:	4826      	ldr	r0, [pc, #152]	@ (80018f0 <NRF_TX_DATA+0x170>)
 8001858:	f003 ffce 	bl	80057f8 <iprintf>
			}
			cmd=FLUSH_TX;
 800185c:	23e1      	movs	r3, #225	@ 0xe1
 800185e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			NRD_SEND_CMD(cmd);
 8001862:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff77 	bl	800175a <NRD_SEND_CMD>
			NRF_WRITE_REGISTER(FIFO_STATUS, 0x11); //reset fifo
 800186c:	2111      	movs	r1, #17
 800186e:	2017      	movs	r0, #23
 8001870:	f7ff fe0e 	bl	8001490 <NRF_WRITE_REGISTER>
			return 1;
 8001874:	2301      	movs	r3, #1
 8001876:	e030      	b.n	80018da <NRF_TX_DATA+0x15a>
		}

		if(status_reg &(1<<4)){
 8001878:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	d029      	beq.n	80018d8 <NRF_TX_DATA+0x158>
			printf("max number of retransmission \n \r %d \n \r",status_reg);
 8001884:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001888:	4619      	mov	r1, r3
 800188a:	481a      	ldr	r0, [pc, #104]	@ (80018f4 <NRF_TX_DATA+0x174>)
 800188c:	f003 ffb4 	bl	80057f8 <iprintf>
			status_reg=status_reg|(1<<4)|(1<<5);
 8001890:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001894:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001898:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			NRF_WRITE_REGISTER(STATUS,status_reg);
 800189c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018a0:	4619      	mov	r1, r3
 80018a2:	2007      	movs	r0, #7
 80018a4:	f7ff fdf4 	bl	8001490 <NRF_WRITE_REGISTER>
			status_reg=NRF_READ_REGISTER(STATUS);
 80018a8:	2007      	movs	r0, #7
 80018aa:	f7ff fe2c 	bl	8001506 <NRF_READ_REGISTER>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			printf("after clearing flag? %d \n \r",status_reg);
 80018b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018b8:	4619      	mov	r1, r3
 80018ba:	480f      	ldr	r0, [pc, #60]	@ (80018f8 <NRF_TX_DATA+0x178>)
 80018bc:	f003 ff9c 	bl	80057f8 <iprintf>
			cmd=FLUSH_TX;
 80018c0:	23e1      	movs	r3, #225	@ 0xe1
 80018c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		 NRD_SEND_CMD(cmd);
 80018c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff45 	bl	800175a <NRD_SEND_CMD>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11); //reset fifo
 80018d0:	2111      	movs	r1, #17
 80018d2:	2017      	movs	r0, #23
 80018d4:	f7ff fddc 	bl	8001490 <NRF_WRITE_REGISTER>

		}

		return 0;
 80018d8:	2300      	movs	r3, #0

	}
 80018da:	4618      	mov	r0, r3
 80018dc:	3730      	adds	r7, #48	@ 0x30
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	08009044 	.word	0x08009044
 80018e8:	0800905c 	.word	0x0800905c
 80018ec:	08009070 	.word	0x08009070
 80018f0:	08009084 	.word	0x08009084
 80018f4:	08009094 	.word	0x08009094
 80018f8:	080090bc 	.word	0x080090bc

080018fc <is_data_on_pipe>:

uint8_t is_data_on_pipe(uint8_t pipenum){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
uint8_t status_reg=NRF_READ_REGISTER(STATUS);
 8001906:	2007      	movs	r0, #7
 8001908:	f7ff fdfd 	bl	8001506 <NRF_READ_REGISTER>
 800190c:	4603      	mov	r3, r0
 800190e:	73fb      	strb	r3, [r7, #15]
//if 6 th bit is set and respective data pipe is set
if((status_reg & (1<<6))){
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <is_data_on_pipe+0x2a>
//clear rx_dr
	NRF_WRITE_REGISTER(STATUS,(1<<6));
 800191a:	2140      	movs	r1, #64	@ 0x40
 800191c:	2007      	movs	r0, #7
 800191e:	f7ff fdb7 	bl	8001490 <NRF_WRITE_REGISTER>
	return 1; //data recieved
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <is_data_on_pipe+0x2c>
}
return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <NRF_RECV_DATA>:
	return (uint8_t)(SPI1->DR);
}

//this code needs to  be modefied for dyanmic first we will send
//R_RX_PL_WID first and then R_RX_PAYLOAD
void NRF_RECV_DATA(uint8_t *data_ptr_RECV){
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	//f
	uint8_t cmd = R_RX_PL_WID;
 8001938:	2360      	movs	r3, #96	@ 0x60
 800193a:	73bb      	strb	r3, [r7, #14]
	uint8_t payLoad_width=0;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
	printf("\n ACK RECIEVED! ");
 8001940:	480f      	ldr	r0, [pc, #60]	@ (8001980 <NRF_RECV_DATA+0x50>)
 8001942:	f003 ff59 	bl	80057f8 <iprintf>
	CSN_SELECT_NRF();
 8001946:	f7ff fd63 	bl	8001410 <CSN_SELECT_NRF>
	//payLoad_width=NRF_SEND_PAYLOAD_WIDTH_READ(cmd);
	//printf("\n \r  payloadWidth %d \n \r",payLoad_width);
	//next comand to read payload
	cmd=R_RX_PAYLOAD;
 800194a:	2361      	movs	r3, #97	@ 0x61
 800194c:	73bb      	strb	r3, [r7, #14]
	SPI_TX_MULTI( &cmd, 1);
 800194e:	f107 030e 	add.w	r3, r7, #14
 8001952:	2101      	movs	r1, #1
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f86f 	bl	8001a38 <SPI_TX_MULTI>
	SPI_READ_MULTI(data_ptr_RECV,10);//recieve data
 800195a:	210a      	movs	r1, #10
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f8a3 	bl	8001aa8 <SPI_READ_MULTI>
	CSN_UNSELECT_NRF();
 8001962:	f7ff fd65 	bl	8001430 <CSN_UNSELECT_NRF>
	delay(10);
 8001966:	200a      	movs	r0, #10
 8001968:	f7ff fb5c 	bl	8001024 <delay>
	cmd=FLUSH_RX;
 800196c:	23e2      	movs	r3, #226	@ 0xe2
 800196e:	73bb      	strb	r3, [r7, #14]
	NRD_SEND_CMD(cmd); //flush rx fifo
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fef1 	bl	800175a <NRD_SEND_CMD>

}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	080090d8 	.word	0x080090d8

08001984 <SPI_INIT>:
#include"SPI.h"
#include"stdio.h"
#define AF05  (0x05)


void SPI_INIT(){
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
	//enable clock for GPIOA
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8001988:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <SPI_INIT+0xa8>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	4a27      	ldr	r2, [pc, #156]	@ (8001a2c <SPI_INIT+0xa8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA5, PA6 and PA7 to alternate function mode
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1;
 8001994:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <SPI_INIT+0xac>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a25      	ldr	r2, [pc, #148]	@ (8001a30 <SPI_INIT+0xac>)
 800199a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800199e:	6013      	str	r3, [r2, #0]
	//set which type of alternate function is
	GPIOA->AFR[0]|=(AF05<<20)|(AF05<<24)|(AF05<<28);
 80019a0:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <SPI_INIT+0xac>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4a22      	ldr	r2, [pc, #136]	@ (8001a30 <SPI_INIT+0xac>)
 80019a6:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80019aa:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80019ae:	6213      	str	r3, [r2, #32]
	//enable clock access to SPI1
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN;
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <SPI_INIT+0xa8>)
 80019b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <SPI_INIT+0xa8>)
 80019b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019ba:	6453      	str	r3, [r2, #68]	@ 0x44
	//set software slave managment
	SPI1->CR1|=SPI_CR1_SSM|SPI_CR1_SSI;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <SPI_INIT+0xb0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a34 <SPI_INIT+0xb0>)
 80019c2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80019c6:	6013      	str	r3, [r2, #0]
	//set SPI in master mode
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_MSTR, 1);
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <SPI_INIT+0xb0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <SPI_INIT+0xb0>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_BR,  3);
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <SPI_INIT+0xb0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80019dc:	4a15      	ldr	r2, [pc, #84]	@ (8001a34 <SPI_INIT+0xb0>)
 80019de:	f043 0318 	orr.w	r3, r3, #24
 80019e2:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPHA, 0);
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <SPI_INIT+0xb0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <SPI_INIT+0xb0>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPOL, 0);
 80019f0:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <SPI_INIT+0xb0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a34 <SPI_INIT+0xb0>)
 80019f6:	f023 0302 	bic.w	r3, r3, #2
 80019fa:	6013      	str	r3, [r2, #0]
	//MODIFY_FIELD(SPI1->CR1, SPI_CR1_LSBFIRST, 1);
	SPI1->CR2 |= 0x4;
 80019fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <SPI_INIT+0xb0>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a0c      	ldr	r2, [pc, #48]	@ (8001a34 <SPI_INIT+0xb0>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x40; // Enabling SPI SPI periph
 8001a08:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <SPI_INIT+0xb0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a09      	ldr	r2, [pc, #36]	@ (8001a34 <SPI_INIT+0xb0>)
 8001a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a12:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_SPE, 1);
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <SPI_INIT+0xb0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a06      	ldr	r2, [pc, #24]	@ (8001a34 <SPI_INIT+0xb0>)
 8001a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40013000 	.word	0x40013000

08001a38 <SPI_TX_MULTI>:

//send multiple bytes in case size>1
void SPI_TX_MULTI(uint8_t *data_ptr,int size){
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
int i=0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
uint8_t temp;
while(i<size){
 8001a46:	e00f      	b.n	8001a68 <SPI_TX_MULTI+0x30>
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 8001a48:	bf00      	nop
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <SPI_TX_MULTI+0x6c>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f9      	beq.n	8001a4a <SPI_TX_MULTI+0x12>
	SPI1->DR = data_ptr[i];
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <SPI_TX_MULTI+0x6c>)
 8001a60:	60da      	str	r2, [r3, #12]
	i++;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
while(i<size){
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dbeb      	blt.n	8001a48 <SPI_TX_MULTI+0x10>
}
/*Wait until TXE is set*/
while(!(SPI1->SR & (SPI_SR_TXE))){}
 8001a70:	bf00      	nop
 8001a72:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <SPI_TX_MULTI+0x6c>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f9      	beq.n	8001a72 <SPI_TX_MULTI+0x3a>

/*Wait for BUSY flag to reset*/
while((SPI1->SR & (SPI_SR_BSY))){}
 8001a7e:	bf00      	nop
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <SPI_TX_MULTI+0x6c>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f9      	bne.n	8001a80 <SPI_TX_MULTI+0x48>

/*Clear OVR flag*/
temp = SPI1->DR;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <SPI_TX_MULTI+0x6c>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	72fb      	strb	r3, [r7, #11]
temp = SPI1->SR;
 8001a92:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <SPI_TX_MULTI+0x6c>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	72fb      	strb	r3, [r7, #11]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40013000 	.word	0x40013000

08001aa8 <SPI_READ_MULTI>:


void SPI_READ_MULTI(uint8_t *data_ptr,int size){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	while(size)
 8001ab2:	e013      	b.n	8001adc <SPI_READ_MULTI+0x34>
	{
		/*Send dummy data*/
		SPI1->DR =0;
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <SPI_READ_MULTI+0x48>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]

		/*Wait for RXNE flag to be set*/
		while(!(SPI1->SR & (SPI_SR_RXNE))){}
 8001aba:	bf00      	nop
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <SPI_READ_MULTI+0x48>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f9      	beq.n	8001abc <SPI_READ_MULTI+0x14>

		/*Read data from data register*/
		*data_ptr++ = (SPI1->DR);
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <SPI_READ_MULTI+0x48>)
 8001aca:	68d9      	ldr	r1, [r3, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	b2ca      	uxtb	r2, r1
 8001ad4:	701a      	strb	r2, [r3, #0]
		size--;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	603b      	str	r3, [r7, #0]
	while(size)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1e8      	bne.n	8001ab4 <SPI_READ_MULTI+0xc>
	}
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40013000 	.word	0x40013000

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b090      	sub	sp, #64	@ 0x40
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
SystemClock_Config();
 8001afa:	f000 f853 	bl	8001ba4 <SystemClock_Config>
usart_init();
 8001afe:	f001 fbd7 	bl	80032b0 <usart_init>

printf("trying to init max30102 \n \r");
 8001b02:	4823      	ldr	r0, [pc, #140]	@ (8001b90 <main+0x9c>)
 8001b04:	f003 fe78 	bl	80057f8 <iprintf>
MAX30102_init();
 8001b08:	f000 f90e 	bl	8001d28 <MAX30102_init>
printf("after  to init max30102 \n \r");
 8001b0c:	4821      	ldr	r0, [pc, #132]	@ (8001b94 <main+0xa0>)
 8001b0e:	f003 fe73 	bl	80057f8 <iprintf>

//nrf init code
uint8_t TxAddress[] = {0xB3,0xB4,0xB5,0xB6,0x05};
 8001b12:	4a21      	ldr	r2, [pc, #132]	@ (8001b98 <main+0xa4>)
 8001b14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1c:	6018      	str	r0, [r3, #0]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	7019      	strb	r1, [r3, #0]
uint8_t channel=10;
 8001b22:	230a      	movs	r3, #10
 8001b24:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

NRF_INIT();
 8001b28:	f7ff fdde 	bl	80016e8 <NRF_INIT>
NRF_PTX_CONFIG(TxAddress,channel);
 8001b2c:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001b30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fd00 	bl	800153c <NRF_PTX_CONFIG>

printf(" \n \r setting up as transmit primary dynamic payload attempt \n \r ");
 8001b3c:	4817      	ldr	r0, [pc, #92]	@ (8001b9c <main+0xa8>)
 8001b3e:	f003 fe5b 	bl	80057f8 <iprintf>


for(int i=0;i<=0x1D;i++){
 8001b42:	2300      	movs	r3, #0
 8001b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b46:	e00d      	b.n	8001b64 <main+0x70>
	printf("\n \r register %x is value %x \n \r",i,NRF_READ_REGISTER(i));
 8001b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fcda 	bl	8001506 <NRF_READ_REGISTER>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001b58:	4811      	ldr	r0, [pc, #68]	@ (8001ba0 <main+0xac>)
 8001b5a:	f003 fe4d 	bl	80057f8 <iprintf>
for(int i=0;i<=0x1D;i++){
 8001b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b60:	3301      	adds	r3, #1
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b66:	2b1d      	cmp	r3, #29
 8001b68:	ddee      	ble.n	8001b48 <main+0x54>
}



StateMachine SM;
FSM_INIT(&SM);
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 f84f 	bl	8002c10 <FSM_INIT>

Ringbuf_init();
 8001b72:	f001 faf3 	bl	800315c <Ringbuf_init>


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b76:	f001 fc45 	bl	8003404 <HAL_Init>

  /* USER CODE END Init */


  /* Configure the system clock */
  SystemClock_Config();
 8001b7a:	f000 f813 	bl	8001ba4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b7e:	f000 f8a5 	bl	8001ccc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b82:	f000 f879 	bl	8001c78 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	execute_sm(&SM);
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 f865 	bl	8002c58 <execute_sm>
 8001b8e:	e7fa      	b.n	8001b86 <main+0x92>
 8001b90:	0800911c 	.word	0x0800911c
 8001b94:	08009138 	.word	0x08009138
 8001b98:	080091b8 	.word	0x080091b8
 8001b9c:	08009154 	.word	0x08009154
 8001ba0:	08009198 	.word	0x08009198

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	@ 0x50
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	2230      	movs	r2, #48	@ 0x30
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fe9d 	bl	80058f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <SystemClock_Config+0xcc>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	4a27      	ldr	r2, [pc, #156]	@ (8001c70 <SystemClock_Config+0xcc>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <SystemClock_Config+0xcc>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <SystemClock_Config+0xd0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <SystemClock_Config+0xd0>)
 8001bee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <SystemClock_Config+0xd0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c00:	2302      	movs	r3, #2
 8001c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c04:	2301      	movs	r3, #1
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c08:	2310      	movs	r3, #16
 8001c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c14:	2308      	movs	r3, #8
 8001c16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c18:	23c0      	movs	r3, #192	@ 0xc0
 8001c1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c20:	2308      	movs	r3, #8
 8001c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 fedf 	bl	80039ec <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c34:	f000 f872 	bl	8001d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c38:	230f      	movs	r3, #15
 8001c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c44:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	2103      	movs	r1, #3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 f940 	bl	8003edc <HAL_RCC_ClockConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c62:	f000 f85b 	bl	8001d1c <Error_Handler>
  }
}
 8001c66:	bf00      	nop
 8001c68:	3750      	adds	r7, #80	@ 0x50
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000

08001c78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <MX_USART1_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001cb0:	f002 fb34 	bl	800431c <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f000 f82f 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000200 	.word	0x20000200
 8001cc8:	40011000 	.word	0x40011000

08001ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <MX_GPIO_Init+0x4c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <MX_GPIO_Init+0x4c>)
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <MX_GPIO_Init+0x4c>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_GPIO_Init+0x4c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a08      	ldr	r2, [pc, #32]	@ (8001d18 <MX_GPIO_Init+0x4c>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_GPIO_Init+0x4c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d20:	b672      	cpsid	i
}
 8001d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <Error_Handler+0x8>

08001d28 <MAX30102_init>:
 uint8_t tail;
} sense_struct; //This is our circular buffer of readings from the sensor

sense_struct sense;

void MAX30102_init(){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	I2C_init_config(); //initalize i2c
 8001d2c:	f7ff f9c4 	bl	80010b8 <I2C_init_config>

	    // Reset the sensor
	    MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x40); // Reset the device
 8001d30:	2140      	movs	r1, #64	@ 0x40
 8001d32:	2009      	movs	r0, #9
 8001d34:	f000 f81e 	bl	8001d74 <MAX30102_WRITE_REGISTER>

	    //led brightness as 60
	    MAX30102_WRITE_REGISTER(LED1_PA_REG, 0x3c); //power set as 60
 8001d38:	213c      	movs	r1, #60	@ 0x3c
 8001d3a:	200c      	movs	r0, #12
 8001d3c:	f000 f81a 	bl	8001d74 <MAX30102_WRITE_REGISTER>
	    MAX30102_WRITE_REGISTER(LED2_PA_REG, 0x3c); // power set as 60
 8001d40:	213c      	movs	r1, #60	@ 0x3c
 8001d42:	200d      	movs	r0, #13
 8001d44:	f000 f816 	bl	8001d74 <MAX30102_WRITE_REGISTER>

	    //led mode 3 both ir and red led are needed
	    MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x3); // power set as 60
 8001d48:	2103      	movs	r1, #3
 8001d4a:	2009      	movs	r0, #9
 8001d4c:	f000 f812 	bl	8001d74 <MAX30102_WRITE_REGISTER>

	    //sample average as 4 and enable fifo rollover 0x50 0101 0000
	    MAX30102_WRITE_REGISTER(FIFO_CONFIG_REG, 0x50); //
 8001d50:	2150      	movs	r1, #80	@ 0x50
 8001d52:	2008      	movs	r0, #8
 8001d54:	f000 f80e 	bl	8001d74 <MAX30102_WRITE_REGISTER>

	    //spo2 config adc range as 4096  samples as 100 led pulse as 411 0010 0111
	    MAX30102_WRITE_REGISTER(SPO2_CONFIG_REG, 0x27); //
 8001d58:	2127      	movs	r1, #39	@ 0x27
 8001d5a:	200a      	movs	r0, #10
 8001d5c:	f000 f80a 	bl	8001d74 <MAX30102_WRITE_REGISTER>

	    // FIFO pointers
	    MAX30102_WRITE_REGISTER(FIFO_READ_PTR, 0x00); // Reset FIFO write pointer
 8001d60:	2100      	movs	r1, #0
 8001d62:	2006      	movs	r0, #6
 8001d64:	f000 f806 	bl	8001d74 <MAX30102_WRITE_REGISTER>
	    MAX30102_WRITE_REGISTER(FIFO_WR_PTR, 0x00); // Reset FIFO read pointer
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2004      	movs	r0, #4
 8001d6c:	f000 f802 	bl	8001d74 <MAX30102_WRITE_REGISTER>
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <MAX30102_WRITE_REGISTER>:
    // FIFO Configuration
    MAX30102_WRITE_REGISTER(FIFO_CONFIG_REG, 0x02);
    // FIFO_Average: No averaging, direct samples
}

void MAX30102_WRITE_REGISTER(uint8_t register_Address, uint8_t data){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71bb      	strb	r3, [r7, #6]
	I2C_START_COMS();
 8001d84:	f7ff fa0c 	bl	80011a0 <I2C_START_COMS>
	uint8_t write_masked_address=0xAE;
 8001d88:	23ae      	movs	r3, #174	@ 0xae
 8001d8a:	73fb      	strb	r3, [r7, #15]
	I2C_SEND_ADDRESS(write_masked_address); //same as AE
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fa42 	bl	8001218 <I2C_SEND_ADDRESS>
	I2C_WRITE_DATA(register_Address);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fa1e 	bl	80011d8 <I2C_WRITE_DATA>
	I2C_WRITE_DATA(data);
 8001d9c:	79bb      	ldrb	r3, [r7, #6]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fa1a 	bl	80011d8 <I2C_WRITE_DATA>
	I2C_STOP_COMS();
 8001da4:	f7ff fa58 	bl	8001258 <I2C_STOP_COMS>
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <MAX30102_READ_REGISTER>:


void MAX30102_READ_REGISTER(uint8_t register_Address, uint8_t *recv_buff, uint8_t recv_size){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	71bb      	strb	r3, [r7, #6]

	uint8_t write_masked_address=0xAE;
 8001dc0:	23ae      	movs	r3, #174	@ 0xae
 8001dc2:	73fb      	strb	r3, [r7, #15]
	uint8_t read_masked_address=0xAF; //should be AF
 8001dc4:	23af      	movs	r3, #175	@ 0xaf
 8001dc6:	73bb      	strb	r3, [r7, #14]
	I2C_START_COMS(); //start i2c
 8001dc8:	f7ff f9ea 	bl	80011a0 <I2C_START_COMS>
	I2C_SEND_ADDRESS(write_masked_address); //first send slave address
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fa22 	bl	8001218 <I2C_SEND_ADDRESS>
	I2C_WRITE_DATA(register_Address); //send register address
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f9fe 	bl	80011d8 <I2C_WRITE_DATA>
	I2C_START_COMS(); //repeated start
 8001ddc:	f7ff f9e0 	bl	80011a0 <I2C_START_COMS>
	I2C_READ(read_masked_address,recv_buff,recv_size); //this should be slave with read
 8001de0:	79ba      	ldrb	r2, [r7, #6]
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	6839      	ldr	r1, [r7, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fa46 	bl	8001278 <I2C_READ>
//	I2C_STOP_COMS(); this caused 2 hours of debugging
}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <MAX30102_get_Read_ptr>:
    float temperature = temp_int + (temp_frac * 0.0625);
    //printf("hi one read was done but then something happened %d \n \r",temp_frac);
    return temperature;
}

uint8_t MAX30102_get_Read_ptr(){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
	uint8_t read_ptr;
 MAX30102_READ_REGISTER(FIFO_READ_PTR,&read_ptr,1);
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4619      	mov	r1, r3
 8001e00:	2006      	movs	r0, #6
 8001e02:	f7ff ffd5 	bl	8001db0 <MAX30102_READ_REGISTER>
	return read_ptr;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <MAX30102_get_WR_ptr>:

uint8_t MAX30102_get_WR_ptr(){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	uint8_t wr_ptr;
    MAX30102_READ_REGISTER(FIFO_WR_PTR,&wr_ptr,1);
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	2004      	movs	r0, #4
 8001e1e:	f7ff ffc7 	bl	8001db0 <MAX30102_READ_REGISTER>
	return wr_ptr;
 8001e22:	79fb      	ldrb	r3, [r7, #7]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <available>:

uint8_t available(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
  int8_t numberOfSamples = sense.head - sense.tail;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <available+0x38>)
 8001e34:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <available+0x38>)
 8001e3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	71fb      	strb	r3, [r7, #7]
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	da03      	bge.n	8001e54 <available+0x28>
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	71fb      	strb	r3, [r7, #7]

  return (numberOfSamples);
 8001e54:	79fb      	ldrb	r3, [r7, #7]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000248 	.word	0x20000248

08001e68 <check_new_data>:




uint16_t check_new_data(){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
	uint8_t writePointer=MAX30102_get_WR_ptr();
 8001e6e:	f7ff ffcf 	bl	8001e10 <MAX30102_get_WR_ptr>
 8001e72:	4603      	mov	r3, r0
 8001e74:	74fb      	strb	r3, [r7, #19]
	uint8_t readPointer=MAX30102_get_Read_ptr();
 8001e76:	f7ff ffbd 	bl	8001df4 <MAX30102_get_Read_ptr>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	74bb      	strb	r3, [r7, #18]
	int numberOfSamples = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
	if(readPointer!=writePointer){
 8001e82:	7cba      	ldrb	r2, [r7, #18]
 8001e84:	7cfb      	ldrb	r3, [r7, #19]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d064      	beq.n	8001f54 <check_new_data+0xec>
		 numberOfSamples = writePointer - readPointer;
 8001e8a:	7cfa      	ldrb	r2, [r7, #19]
 8001e8c:	7cbb      	ldrb	r3, [r7, #18]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	61fb      	str	r3, [r7, #28]
		 if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da02      	bge.n	8001e9e <check_new_data+0x36>
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	3320      	adds	r3, #32
 8001e9c:	61fb      	str	r3, [r7, #28]
		    //We now have the number of readings, now calc bytes to read
		    //For this example we are just doing Red and IR (3 bytes each)
		    int bytesLeftToRead = numberOfSamples * 2 * 3;
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	61bb      	str	r3, [r7, #24]
		    while (bytesLeftToRead > 0)
 8001eaa:	e050      	b.n	8001f4e <check_new_data+0xe6>
		     {
		       int toGet = bytesLeftToRead;
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	617b      	str	r3, [r7, #20]
		       if (toGet > I2C_BUFFER_LENGTH)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	dd01      	ble.n	8001eba <check_new_data+0x52>
		       {
		         //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
		         //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
		         //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

		         toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (2 * 3)); //Trim toGet to be a multiple of the samples we need to read
 8001eb6:	231e      	movs	r3, #30
 8001eb8:	617b      	str	r3, [r7, #20]
		       }

		       bytesLeftToRead -= toGet;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	61bb      	str	r3, [r7, #24]

		       //Request toGet number of bytes from sensor

		       while (toGet > 0)
 8001ec2:	e041      	b.n	8001f48 <check_new_data+0xe0>
		       {
		         sense.head++; //Advance the head of the storage struct
 8001ec4:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <check_new_data+0xf8>)
 8001ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <check_new_data+0xf8>)
 8001ed0:	f883 2020 	strb.w	r2, [r3, #32]
		         sense.head %= STORAGE_SIZE; //Wrap condition
 8001ed4:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <check_new_data+0xf8>)
 8001ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <check_new_data+0xf8>)
 8001ee2:	f883 2020 	strb.w	r2, [r3, #32]
		         uint32_t red_led,ir_led;

		         uint8_t fifo_data[6]; // To store 6 bytes of FIFO data (3 bytes for red, 3 bytes for IR)

		         // Read 6 bytes from FIFO_DATA register
		         MAX30102_READ_REGISTER(FIFO_DATA_REG, fifo_data, 6);
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	2206      	movs	r2, #6
 8001eea:	4619      	mov	r1, r3
 8001eec:	2007      	movs	r0, #7
 8001eee:	f7ff ff5f 	bl	8001db0 <MAX30102_READ_REGISTER>

		         // Combine the bytes for red LED
		         red_led = ((uint32_t)fifo_data[0] << 16) | ((uint32_t)fifo_data[1] << 8) | fifo_data[2];
 8001ef2:	783b      	ldrb	r3, [r7, #0]
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	787b      	ldrb	r3, [r7, #1]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	4313      	orrs	r3, r2
 8001efc:	78ba      	ldrb	r2, [r7, #2]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
		         red_led &= 0x03FFFF; // Mask to 18 bits
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001f08:	60fb      	str	r3, [r7, #12]
		         sense.red[sense.head] = red_led;
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <check_new_data+0xf8>)
 8001f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4a13      	ldr	r2, [pc, #76]	@ (8001f60 <check_new_data+0xf8>)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		         // Combine the bytes for IR LED
		         ir_led = ((uint32_t)fifo_data[3] << 16) | ((uint32_t)fifo_data[4] << 8) | fifo_data[5];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	793b      	ldrb	r3, [r7, #4]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	4313      	orrs	r3, r2
 8001f24:	797a      	ldrb	r2, [r7, #5]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60bb      	str	r3, [r7, #8]
		         ir_led &= 0x03FFFF; // Mask to 18 bits
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001f30:	60bb      	str	r3, [r7, #8]
		         sense.IR[sense.head] = ir_led;
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <check_new_data+0xf8>)
 8001f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f38:	4909      	ldr	r1, [pc, #36]	@ (8001f60 <check_new_data+0xf8>)
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		 		  sense.IR[sense.head] = tempLong;

*/

		         toGet -= 2 * 3;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3b06      	subs	r3, #6
 8001f46:	617b      	str	r3, [r7, #20]
		       while (toGet > 0)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	dcba      	bgt.n	8001ec4 <check_new_data+0x5c>
		    while (bytesLeftToRead > 0)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dcab      	bgt.n	8001eac <check_new_data+0x44>

		     } //End while (bytesLeftToRead > 0)

		   } //End readPtr != writePtr

		   return (numberOfSamples); //Let the world know how much new data we found
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	b29b      	uxth	r3, r3
	}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000248 	.word	0x20000248

08001f64 <safeCheck>:


bool safeCheck(uint16_t maxTimeToCheck)
{
 8001f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	80fb      	strh	r3, [r7, #6]
  uint32_t markTime = millis();
 8001f70:	f7ff f840 	bl	8000ff4 <millis>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4613      	mov	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 8001f7c:	f7ff f83a 	bl	8000ff4 <millis>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	68f9      	ldr	r1, [r7, #12]
 8001f86:	2000      	movs	r0, #0
 8001f88:	4688      	mov	r8, r1
 8001f8a:	4681      	mov	r9, r0
 8001f8c:	ebb2 0408 	subs.w	r4, r2, r8
 8001f90:	eb63 0509 	sbc.w	r5, r3, r9
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	2200      	movs	r2, #0
 8001f98:	469a      	mov	sl, r3
 8001f9a:	4693      	mov	fp, r2
 8001f9c:	45a2      	cmp	sl, r4
 8001f9e:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001fa2:	d201      	bcs.n	8001fa8 <safeCheck+0x44>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e00a      	b.n	8001fbe <safeCheck+0x5a>

	if(check_new_data() == true) //We found new data!
 8001fa8:	f7ff ff5e 	bl	8001e68 <check_new_data>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <safeCheck+0x52>
	  return(true);
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e003      	b.n	8001fbe <safeCheck+0x5a>

	delay(1);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7ff f834 	bl	8001024 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
 8001fbc:	e7de      	b.n	8001f7c <safeCheck+0x18>
  }
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001fc8 <getRed>:
    *ir_led &= 0x03FFFF; // Mask to 18 bits
}

//Report the most recent red value
uint32_t getRed(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  //Check the sensor for new data for 250ms
	if(safeCheck(250))
 8001fcc:	20fa      	movs	r0, #250	@ 0xfa
 8001fce:	f7ff ffc9 	bl	8001f64 <safeCheck>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <getRed+0x20>
    return (sense.red[sense.head]);
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <getRed+0x28>)
 8001fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <getRed+0x28>)
 8001fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe6:	e000      	b.n	8001fea <getRed+0x22>
  else
    return(0); //Sensor failed to find new data
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000248 	.word	0x20000248

08001ff4 <getIR>:

uint32_t getIR(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  //Check the sensor for new data for 250ms
	if(safeCheck(250))
 8001ff8:	20fa      	movs	r0, #250	@ 0xfa
 8001ffa:	f7ff ffb3 	bl	8001f64 <safeCheck>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <getIR+0x20>
    return (sense.IR[sense.head]);
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <getIR+0x28>)
 8002006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800200a:	4a04      	ldr	r2, [pc, #16]	@ (800201c <getIR+0x28>)
 800200c:	3304      	adds	r3, #4
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	e000      	b.n	8002016 <getIR+0x22>
  else
    return(0); //Sensor failed to find new data
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000248 	.word	0x20000248

08002020 <nextSample>:

//Advance the tail
void nextSample(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  if(available()) //Only advance the tail if new data is available
 8002024:	f7ff ff02 	bl	8001e2c <available>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d010      	beq.n	8002050 <nextSample+0x30>
  {
    sense.tail++;
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <nextSample+0x34>)
 8002030:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002034:	3301      	adds	r3, #1
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <nextSample+0x34>)
 800203a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    sense.tail %= STORAGE_SIZE; //Wrap condition
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <nextSample+0x34>)
 8002040:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b02      	ldr	r3, [pc, #8]	@ (8002054 <nextSample+0x34>)
 800204c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000248 	.word	0x20000248

08002058 <acquire_max_30102_data>:
void acquire_max_30102_data(uint32_t num_ters,int8_t* heart_rate_status,int32_t* spo2_var,int32_t* heart_rate_var,int8_t* valid_spo2,bool *status)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	f5ad 7d53 	sub.w	sp, sp, #844	@ 0x34c
 800205e:	af04      	add	r7, sp, #16
 8002060:	f507 744e 	add.w	r4, r7, #824	@ 0x338
 8002064:	f5a4 744b 	sub.w	r4, r4, #812	@ 0x32c
 8002068:	6020      	str	r0, [r4, #0]
 800206a:	f507 704e 	add.w	r0, r7, #824	@ 0x338
 800206e:	f5a0 704c 	sub.w	r0, r0, #816	@ 0x330
 8002072:	6001      	str	r1, [r0, #0]
 8002074:	f507 714e 	add.w	r1, r7, #824	@ 0x338
 8002078:	f5a1 714d 	sub.w	r1, r1, #820	@ 0x334
 800207c:	600a      	str	r2, [r1, #0]
 800207e:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8002082:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 8002086:	6013      	str	r3, [r2, #0]
	uint32_t irBuffer[100]; //infrared LED sensor data
	uint32_t redBuffer[100];  //red LED sensor data
	int32_t bufferLength;


	bufferLength=100;
 8002088:	2364      	movs	r3, #100	@ 0x64
 800208a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

	  for (uint8_t i = 0 ; i < bufferLength ; i++)
 800208e:	2300      	movs	r3, #0
 8002090:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 8002094:	e023      	b.n	80020de <acquire_max_30102_data+0x86>
	  {
	    while (available() == false) //do we have new data?
	    	check_new_data(); //Check the sensor for new data
 8002096:	f7ff fee7 	bl	8001e68 <check_new_data>
	    while (available() == false) //do we have new data?
 800209a:	f7ff fec7 	bl	8001e2c <available>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f8      	beq.n	8002096 <acquire_max_30102_data+0x3e>

	    redBuffer[i] = getRed();
 80020a4:	f897 4337 	ldrb.w	r4, [r7, #823]	@ 0x337
 80020a8:	f7ff ff8e 	bl	8001fc8 <getRed>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020b2:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80020b6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	    irBuffer[i] =  getIR();
 80020ba:	f897 4337 	ldrb.w	r4, [r7, #823]	@ 0x337
 80020be:	f7ff ff99 	bl	8001ff4 <getIR>
 80020c2:	4602      	mov	r2, r0
 80020c4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80020cc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	    nextSample(); //We're finished with this sample so move to next sample
 80020d0:	f7ff ffa6 	bl	8002020 <nextSample>
	  for (uint8_t i = 0 ; i < bufferLength ; i++)
 80020d4:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 80020d8:	3301      	adds	r3, #1
 80020da:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 80020de:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 80020e2:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 80020e6:	429a      	cmp	r2, r3
 80020e8:	dcd7      	bgt.n	800209a <acquire_max_30102_data+0x42>
	  }
	  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, spo2_var, valid_spo2, heart_rate_var, heart_rate_status);
 80020ea:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020ee:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80020f2:	f107 0110 	add.w	r1, r7, #16
 80020f6:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80020fa:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80020fe:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	9202      	str	r2, [sp, #8]
 8002106:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 800210a:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	9201      	str	r2, [sp, #4]
 8002112:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8002116:	9200      	str	r2, [sp, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	460a      	mov	r2, r1
 800211c:	f8d7 1330 	ldr.w	r1, [r7, #816]	@ 0x330
 8002120:	f000 f8e8 	bl	80022f4 <maxim_heart_rate_and_oxygen_saturation>
	//  uint32_t start_time = millis();
	  while (--num_ters)
 8002124:	e0c3      	b.n	80022ae <acquire_max_30102_data+0x256>
	  {
	    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
	    for (uint8_t i = 25; i < 100; i++)
 8002126:	2319      	movs	r3, #25
 8002128:	f887 3336 	strb.w	r3, [r7, #822]	@ 0x336
 800212c:	e028      	b.n	8002180 <acquire_max_30102_data+0x128>
	    {
	      redBuffer[i - 25] = redBuffer[i];
 800212e:	f897 1336 	ldrb.w	r1, [r7, #822]	@ 0x336
 8002132:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 8002136:	f1a3 0219 	sub.w	r2, r3, #25
 800213a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800213e:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8002142:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002146:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800214a:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800214e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	      irBuffer[i - 25] = irBuffer[i];
 8002152:	f897 1336 	ldrb.w	r1, [r7, #822]	@ 0x336
 8002156:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 800215a:	f1a3 0219 	sub.w	r2, r3, #25
 800215e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002162:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002166:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800216a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800216e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for (uint8_t i = 25; i < 100; i++)
 8002176:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 800217a:	3301      	adds	r3, #1
 800217c:	f887 3336 	strb.w	r3, [r7, #822]	@ 0x336
 8002180:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 8002184:	2b63      	cmp	r3, #99	@ 0x63
 8002186:	d9d2      	bls.n	800212e <acquire_max_30102_data+0xd6>
	    }

	    //take 25 sets of samples before calculating the heart rate.
	    for (uint8_t i = 75; i < 100; i++)
 8002188:	234b      	movs	r3, #75	@ 0x4b
 800218a:	f887 3335 	strb.w	r3, [r7, #821]	@ 0x335
 800218e:	e06d      	b.n	800226c <acquire_max_30102_data+0x214>
	    {
	      while (available() == false) //do we have new data?
	    	  check_new_data(); //Check the sensor for new data
 8002190:	f7ff fe6a 	bl	8001e68 <check_new_data>
	      while (available() == false) //do we have new data?
 8002194:	f7ff fe4a 	bl	8001e2c <available>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f8      	beq.n	8002190 <acquire_max_30102_data+0x138>



	      redBuffer[i] = getRed();
 800219e:	f897 4335 	ldrb.w	r4, [r7, #821]	@ 0x335
 80021a2:	f7ff ff11 	bl	8001fc8 <getRed>
 80021a6:	4602      	mov	r2, r0
 80021a8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80021ac:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80021b0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	      irBuffer[i] = getIR();
 80021b4:	f897 4335 	ldrb.w	r4, [r7, #821]	@ 0x335
 80021b8:	f7ff ff1c 	bl	8001ff4 <getIR>
 80021bc:	4602      	mov	r2, r0
 80021be:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80021c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021c6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	     nextSample(); //We're finished with this sample so move to next sample
 80021ca:	f7ff ff29 	bl	8002020 <nextSample>

	     printf("\n \r HEARATE =%ld",*heart_rate_var);
 80021ce:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80021d2:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	483f      	ldr	r0, [pc, #252]	@ (80022dc <acquire_max_30102_data+0x284>)
 80021de:	f003 fb0b 	bl	80057f8 <iprintf>
	     printf(" is valid HEARATE =%d",*heart_rate_status);
 80021e2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80021e6:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f993 3000 	ldrsb.w	r3, [r3]
 80021f0:	4619      	mov	r1, r3
 80021f2:	483b      	ldr	r0, [pc, #236]	@ (80022e0 <acquire_max_30102_data+0x288>)
 80021f4:	f003 fb00 	bl	80057f8 <iprintf>
	 	 printf(" spo2 =%ld",*spo2_var);
 80021f8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80021fc:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	4837      	ldr	r0, [pc, #220]	@ (80022e4 <acquire_max_30102_data+0x28c>)
 8002208:	f003 faf6 	bl	80057f8 <iprintf>
	     printf(" is valid spo2 =%d",*valid_spo2);
 800220c:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8002210:	f993 3000 	ldrsb.w	r3, [r3]
 8002214:	4619      	mov	r1, r3
 8002216:	4834      	ldr	r0, [pc, #208]	@ (80022e8 <acquire_max_30102_data+0x290>)
 8002218:	f003 faee 	bl	80057f8 <iprintf>
		 printf(" red =%ld",redBuffer[i]);
 800221c:	f897 2335 	ldrb.w	r2, [r7, #821]	@ 0x335
 8002220:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002224:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8002228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222c:	4619      	mov	r1, r3
 800222e:	482f      	ldr	r0, [pc, #188]	@ (80022ec <acquire_max_30102_data+0x294>)
 8002230:	f003 fae2 	bl	80057f8 <iprintf>
		 printf(" IR valid spo2 =%ld",irBuffer[i]);
 8002234:	f897 2335 	ldrb.w	r2, [r7, #821]	@ 0x335
 8002238:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800223c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	4619      	mov	r1, r3
 8002246:	482a      	ldr	r0, [pc, #168]	@ (80022f0 <acquire_max_30102_data+0x298>)
 8002248:	f003 fad6 	bl	80057f8 <iprintf>
		    if(*valid_spo2==1){
 800224c:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8002250:	f993 3000 	ldrsb.w	r3, [r3]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d104      	bne.n	8002262 <acquire_max_30102_data+0x20a>
			    	*status=true;
 8002258:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e038      	b.n	80022d4 <acquire_max_30102_data+0x27c>
	    for (uint8_t i = 75; i < 100; i++)
 8002262:	f897 3335 	ldrb.w	r3, [r7, #821]	@ 0x335
 8002266:	3301      	adds	r3, #1
 8002268:	f887 3335 	strb.w	r3, [r7, #821]	@ 0x335
 800226c:	f897 3335 	ldrb.w	r3, [r7, #821]	@ 0x335
 8002270:	2b63      	cmp	r3, #99	@ 0x63
 8002272:	d98f      	bls.n	8002194 <acquire_max_30102_data+0x13c>
			    return ;
			    }
	   }
	    //After gathering 25 new samples recalculate HR and SP02

	    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, spo2_var, valid_spo2, heart_rate_var, heart_rate_status);
 8002274:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002278:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 800227c:	f107 0110 	add.w	r1, r7, #16
 8002280:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8002284:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8002288:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	9202      	str	r2, [sp, #8]
 8002290:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8002294:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	9201      	str	r2, [sp, #4]
 800229c:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 80022a0:	9200      	str	r2, [sp, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	460a      	mov	r2, r1
 80022a6:	f8d7 1330 	ldr.w	r1, [r7, #816]	@ 0x330
 80022aa:	f000 f823 	bl	80022f4 <maxim_heart_rate_and_oxygen_saturation>
	  while (--num_ters)
 80022ae:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80022b2:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80022b6:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80022ba:	f5a2 724b 	sub.w	r2, r2, #812	@ 0x32c
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	3a01      	subs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80022c8:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f47f af29 	bne.w	8002126 <acquire_max_30102_data+0xce>
	  }

}
 80022d4:	f507 774f 	add.w	r7, r7, #828	@ 0x33c
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	080091c0 	.word	0x080091c0
 80022e0:	080091d4 	.word	0x080091d4
 80022e4:	080091ec 	.word	0x080091ec
 80022e8:	080091f8 	.word	0x080091f8
 80022ec:	0800920c 	.word	0x0800920c
 80022f0:	08009218 	.word	0x08009218

080022f4 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b0b0      	sub	sp, #192	@ 0xc0
 80022f8:	af04      	add	r7, sp, #16
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
  int32_t n_peak_interval_sum;

  int32_t n_y_ac, n_x_ac;
  int32_t n_spo2_calc;
  int32_t n_y_dc_max, n_x_dc_max;
  int32_t n_y_dc_max_idx = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int32_t n_x_dc_max_idx = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int32_t an_ratio[5], n_ratio_average;
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800231a:	e00f      	b.n	800233c <maxim_heart_rate_and_oxygen_saturation+0x48>
 800231c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4413      	add	r3, r2
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800232c:	4413      	add	r3, r2
 800232e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002336:	3301      	adds	r3, #1
 8002338:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800233c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	dbea      	blt.n	800231c <maxim_heart_rate_and_oxygen_saturation+0x28>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800235a:	e013      	b.n	8002384 <maxim_heart_rate_and_oxygen_saturation+0x90>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ;
 800235c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4413      	add	r3, r2
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	4619      	mov	r1, r3
 8002370:	4ab4      	ldr	r2, [pc, #720]	@ (8002644 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8002372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 800237a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800237e:	3301      	adds	r3, #1
 8002380:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002384:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	429a      	cmp	r2, r3
 800238c:	dbe6      	blt.n	800235c <maxim_heart_rate_and_oxygen_saturation+0x68>

  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002394:	e028      	b.n	80023e8 <maxim_heart_rate_and_oxygen_saturation+0xf4>
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;
 8002396:	4aab      	ldr	r2, [pc, #684]	@ (8002644 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8002398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800239c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023a4:	3301      	adds	r3, #1
 80023a6:	49a7      	ldr	r1, [pc, #668]	@ (8002644 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80023a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023ac:	441a      	add	r2, r3
 80023ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023b2:	3302      	adds	r3, #2
 80023b4:	49a3      	ldr	r1, [pc, #652]	@ (8002644 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80023b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023ba:	441a      	add	r2, r3
 80023bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023c0:	3303      	adds	r3, #3
 80023c2:	49a0      	ldr	r1, [pc, #640]	@ (8002644 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80023c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023c8:	4413      	add	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da00      	bge.n	80023d0 <maxim_heart_rate_and_oxygen_saturation+0xdc>
 80023ce:	3303      	adds	r3, #3
 80023d0:	109b      	asrs	r3, r3, #2
 80023d2:	4619      	mov	r1, r3
 80023d4:	4a9b      	ldr	r2, [pc, #620]	@ (8002644 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80023d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80023de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023e2:	3301      	adds	r3, #1
 80023e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80023e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023ec:	2b5f      	cmp	r3, #95	@ 0x5f
 80023ee:	ddd2      	ble.n	8002396 <maxim_heart_rate_and_oxygen_saturation+0xa2>
  }
  // calculate threshold
  n_th1=0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80023f6:	2300      	movs	r3, #0
 80023f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80023fc:	e00e      	b.n	800241c <maxim_heart_rate_and_oxygen_saturation+0x128>
    n_th1 +=  an_x[k];
 80023fe:	4a91      	ldr	r2, [pc, #580]	@ (8002644 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8002400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800240c:	4413      	add	r3, r2
 800240e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 8002412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002416:	3301      	adds	r3, #1
 8002418:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800241c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002420:	2b63      	cmp	r3, #99	@ 0x63
 8002422:	ddec      	ble.n	80023fe <maxim_heart_rate_and_oxygen_saturation+0x10a>
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
 8002424:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002428:	4a87      	ldr	r2, [pc, #540]	@ (8002648 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 800242a:	fb82 1203 	smull	r1, r2, r2, r3
 800242e:	1152      	asrs	r2, r2, #5
 8002430:	17db      	asrs	r3, r3, #31
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1<30) n_th1=30; // min allowed
 8002438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800243c:	2b1d      	cmp	r3, #29
 800243e:	dc02      	bgt.n	8002446 <maxim_heart_rate_and_oxygen_saturation+0x152>
 8002440:	231e      	movs	r3, #30
 8002442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1>60) n_th1=60; // max allowed
 8002446:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800244a:	2b3c      	cmp	r3, #60	@ 0x3c
 800244c:	dd02      	ble.n	8002454 <maxim_heart_rate_and_oxygen_saturation+0x160>
 800244e:	233c      	movs	r3, #60	@ 0x3c
 8002450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800245a:	e00c      	b.n	8002476 <maxim_heart_rate_and_oxygen_saturation+0x182>
 800245c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	33b0      	adds	r3, #176	@ 0xb0
 8002464:	443b      	add	r3, r7
 8002466:	2200      	movs	r2, #0
 8002468:	f843 2c88 	str.w	r2, [r3, #-136]
 800246c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002470:	3301      	adds	r3, #1
 8002472:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800247a:	2b0e      	cmp	r3, #14
 800247c:	ddee      	ble.n	800245c <maxim_heart_rate_and_oxygen_saturation+0x168>
  // since we flipped signal, we use peak detector azs valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks
 800247e:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8002482:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002486:	230f      	movs	r3, #15
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	2304      	movs	r3, #4
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2364      	movs	r3, #100	@ 0x64
 8002496:	4a6b      	ldr	r2, [pc, #428]	@ (8002644 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8002498:	f000 fa36 	bl	8002908 <maxim_find_peaks>
  n_peak_interval_sum =0;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (n_npks>=2){
 80024a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	dd38      	ble.n	800251a <maxim_heart_rate_and_oxygen_saturation+0x226>
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024ae:	e019      	b.n	80024e4 <maxim_heart_rate_and_oxygen_saturation+0x1f0>
 80024b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	33b0      	adds	r3, #176	@ 0xb0
 80024b8:	443b      	add	r3, r7
 80024ba:	f853 2c88 	ldr.w	r2, [r3, #-136]
 80024be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024c2:	3b01      	subs	r3, #1
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	33b0      	adds	r3, #176	@ 0xb0
 80024c8:	443b      	add	r3, r7
 80024ca:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80024d4:	4413      	add	r3, r2
 80024d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024de:	3301      	adds	r3, #1
 80024e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbe0      	blt.n	80024b0 <maxim_heart_rate_and_oxygen_saturation+0x1bc>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 80024ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f0:	3b01      	subs	r3, #1
 80024f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80024f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80024fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 80024fe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002502:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002506:	fb92 f2f3 	sdiv	r2, r2, r3
 800250a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800250e:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8002510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e007      	b.n	800252a <maxim_heart_rate_and_oxygen_saturation+0x236>
  }
  else  {
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 800251a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800251e:	4a4b      	ldr	r2, [pc, #300]	@ (800264c <maxim_heart_rate_and_oxygen_saturation+0x358>)
 8002520:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 8002522:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002530:	e01c      	b.n	800256c <maxim_heart_rate_and_oxygen_saturation+0x278>
      an_x[k] =  pun_ir_buffer[k] ;
 8002532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4a40      	ldr	r2, [pc, #256]	@ (8002644 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8002542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      an_y[k] =  pun_red_buffer[k] ;
 800254a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	4a3d      	ldr	r2, [pc, #244]	@ (8002650 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 800255a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800255e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8002562:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002566:	3301      	adds	r3, #1
 8002568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800256c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	dbdd      	blt.n	8002532 <maxim_heart_rate_and_oxygen_saturation+0x23e>
  }

  // find precise min near an_ir_valley_locs
  n_exact_ir_valley_locs_count =n_npks;
 8002576:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  n_i_ratio_count = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for(k=0; k< 5; k++) an_ratio[k]=0;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800258e:	e00c      	b.n	80025aa <maxim_heart_rate_and_oxygen_saturation+0x2b6>
 8002590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	33b0      	adds	r3, #176	@ 0xb0
 8002598:	443b      	add	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	f843 2c9c 	str.w	r2, [r3, #-156]
 80025a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025a4:	3301      	adds	r3, #1
 80025a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	ddee      	ble.n	8002590 <maxim_heart_rate_and_oxygen_saturation+0x29c>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025b8:	e015      	b.n	80025e6 <maxim_heart_rate_and_oxygen_saturation+0x2f2>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 80025ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	33b0      	adds	r3, #176	@ 0xb0
 80025c2:	443b      	add	r3, r7
 80025c4:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80025c8:	2b64      	cmp	r3, #100	@ 0x64
 80025ca:	dd07      	ble.n	80025dc <maxim_heart_rate_and_oxygen_saturation+0x2e8>
      *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4a1f      	ldr	r2, [pc, #124]	@ (800264c <maxim_heart_rate_and_oxygen_saturation+0x358>)
 80025d0:	601a      	str	r2, [r3, #0]
      *pch_spo2_valid  = 0;
 80025d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e189      	b.n	80028f0 <maxim_heart_rate_and_oxygen_saturation+0x5fc>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80025dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025e0:	3301      	adds	r3, #1
 80025e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025ee:	429a      	cmp	r2, r3
 80025f0:	dbe3      	blt.n	80025ba <maxim_heart_rate_and_oxygen_saturation+0x2c6>
      return;
    }
  }
  // find max between two valley locations
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025f8:	e129      	b.n	800284e <maxim_heart_rate_and_oxygen_saturation+0x55a>
    n_y_dc_max= -16777216 ;
 80025fa:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80025fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    n_x_dc_max= -16777216;
 8002602:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8002606:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 800260a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800260e:	3301      	adds	r3, #1
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	33b0      	adds	r3, #176	@ 0xb0
 8002614:	443b      	add	r3, r7
 8002616:	f853 2c88 	ldr.w	r2, [r3, #-136]
 800261a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	33b0      	adds	r3, #176	@ 0xb0
 8002622:	443b      	add	r3, r7
 8002624:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b03      	cmp	r3, #3
 800262c:	f340 810a 	ble.w	8002844 <maxim_heart_rate_and_oxygen_saturation+0x550>
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8002630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	33b0      	adds	r3, #176	@ 0xb0
 8002638:	443b      	add	r3, r7
 800263a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800263e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002642:	e034      	b.n	80026ae <maxim_heart_rate_and_oxygen_saturation+0x3ba>
 8002644:	2000026c 	.word	0x2000026c
 8002648:	51eb851f 	.word	0x51eb851f
 800264c:	fffffc19 	.word	0xfffffc19
 8002650:	200003fc 	.word	0x200003fc
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 8002654:	4aa8      	ldr	r2, [pc, #672]	@ (80028f8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8002656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002662:	429a      	cmp	r2, r3
 8002664:	da0a      	bge.n	800267c <maxim_heart_rate_and_oxygen_saturation+0x388>
 8002666:	4aa4      	ldr	r2, [pc, #656]	@ (80028f8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8002668:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002670:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002674:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 800267c:	4a9f      	ldr	r2, [pc, #636]	@ (80028fc <maxim_heart_rate_and_oxygen_saturation+0x608>)
 800267e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002686:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800268a:	429a      	cmp	r2, r3
 800268c:	da0a      	bge.n	80026a4 <maxim_heart_rate_and_oxygen_saturation+0x3b0>
 800268e:	4a9b      	ldr	r2, [pc, #620]	@ (80028fc <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8002690:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002698:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800269c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80026a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026a8:	3301      	adds	r3, #1
 80026aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026b2:	3301      	adds	r3, #1
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	33b0      	adds	r3, #176	@ 0xb0
 80026b8:	443b      	add	r3, r7
 80026ba:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80026be:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80026c2:	429a      	cmp	r2, r3
 80026c4:	dbc6      	blt.n	8002654 <maxim_heart_rate_and_oxygen_saturation+0x360>
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 80026c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026ca:	3301      	adds	r3, #1
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	33b0      	adds	r3, #176	@ 0xb0
 80026d0:	443b      	add	r3, r7
 80026d2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80026d6:	4a89      	ldr	r2, [pc, #548]	@ (80028fc <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80026d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	33b0      	adds	r3, #176	@ 0xb0
 80026e4:	443b      	add	r3, r7
 80026e6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80026ea:	4984      	ldr	r1, [pc, #528]	@ (80028fc <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80026ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026f0:	1ad2      	subs	r2, r2, r3
 80026f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	33b0      	adds	r3, #176	@ 0xb0
 80026fa:	443b      	add	r3, r7
 80026fc:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002700:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002704:	1acb      	subs	r3, r1, r3
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ;
 800270c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	33b0      	adds	r3, #176	@ 0xb0
 8002714:	443b      	add	r3, r7
 8002716:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800271a:	4a78      	ldr	r2, [pc, #480]	@ (80028fc <maxim_heart_rate_and_oxygen_saturation+0x608>)
 800271c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002724:	3301      	adds	r3, #1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	33b0      	adds	r3, #176	@ 0xb0
 800272a:	443b      	add	r3, r7
 800272c:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8002730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	33b0      	adds	r3, #176	@ 0xb0
 8002738:	443b      	add	r3, r7
 800273a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800273e:	1acb      	subs	r3, r1, r3
 8002740:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002742:	fb91 f3f3 	sdiv	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 800274a:	4a6c      	ldr	r2, [pc, #432]	@ (80028fc <maxim_heart_rate_and_oxygen_saturation+0x608>)
 800274c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002750:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	677b      	str	r3, [r7, #116]	@ 0x74
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 800275a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800275e:	3301      	adds	r3, #1
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	33b0      	adds	r3, #176	@ 0xb0
 8002764:	443b      	add	r3, r7
 8002766:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800276a:	4a63      	ldr	r2, [pc, #396]	@ (80028f8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 800276c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	33b0      	adds	r3, #176	@ 0xb0
 8002778:	443b      	add	r3, r7
 800277a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800277e:	495e      	ldr	r1, [pc, #376]	@ (80028f8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8002780:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002784:	1ad2      	subs	r2, r2, r3
 8002786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	33b0      	adds	r3, #176	@ 0xb0
 800278e:	443b      	add	r3, r7
 8002790:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002794:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002798:	1acb      	subs	r3, r1, r3
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]);
 80027a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	33b0      	adds	r3, #176	@ 0xb0
 80027a8:	443b      	add	r3, r7
 80027aa:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80027ae:	4a52      	ldr	r2, [pc, #328]	@ (80028f8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80027b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027b8:	3301      	adds	r3, #1
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	33b0      	adds	r3, #176	@ 0xb0
 80027be:	443b      	add	r3, r7
 80027c0:	f853 1c88 	ldr.w	r1, [r3, #-136]
 80027c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	33b0      	adds	r3, #176	@ 0xb0
 80027cc:	443b      	add	r3, r7
 80027ce:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80027d2:	1acb      	subs	r3, r1, r3
 80027d4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80027d6:	fb91 f3f3 	sdiv	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 80027de:	4a46      	ldr	r2, [pc, #280]	@ (80028f8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80027e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	673b      	str	r3, [r7, #112]	@ 0x70
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80027ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	11db      	asrs	r3, r3, #7
 80027fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80027fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	11db      	asrs	r3, r3, #7
 8002808:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 800280a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800280c:	2b00      	cmp	r3, #0
 800280e:	dd19      	ble.n	8002844 <maxim_heart_rate_and_oxygen_saturation+0x550>
 8002810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002814:	2b04      	cmp	r3, #4
 8002816:	dc15      	bgt.n	8002844 <maxim_heart_rate_and_oxygen_saturation+0x550>
 8002818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d012      	beq.n	8002844 <maxim_heart_rate_and_oxygen_saturation+0x550>
      {
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 800281e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002820:	2264      	movs	r2, #100	@ 0x64
 8002822:	fb03 f202 	mul.w	r2, r3, r2
 8002826:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002828:	fb92 f2f3 	sdiv	r2, r2, r3
 800282c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	33b0      	adds	r3, #176	@ 0xb0
 8002834:	443b      	add	r3, r7
 8002836:	f843 2c9c 	str.w	r2, [r3, #-156]
        n_i_ratio_count++;
 800283a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800283e:	3301      	adds	r3, #1
 8002840:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8002844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002848:	3301      	adds	r3, #1
 800284a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800284e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002852:	3b01      	subs	r3, #1
 8002854:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002858:	429a      	cmp	r2, r3
 800285a:	f6ff aece 	blt.w	80025fa <maxim_heart_rate_and_oxygen_saturation+0x306>
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f943 	bl	8002af2 <maxim_sort_ascend>
  n_middle_idx= n_i_ratio_count/2;
 800286c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002870:	0fda      	lsrs	r2, r3, #31
 8002872:	4413      	add	r3, r2
 8002874:	105b      	asrs	r3, r3, #1
 8002876:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (n_middle_idx >1)
 8002878:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800287a:	2b01      	cmp	r3, #1
 800287c:	dd13      	ble.n	80028a6 <maxim_heart_rate_and_oxygen_saturation+0x5b2>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 800287e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002880:	3b01      	subs	r3, #1
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	33b0      	adds	r3, #176	@ 0xb0
 8002886:	443b      	add	r3, r7
 8002888:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 800288c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	33b0      	adds	r3, #176	@ 0xb0
 8002892:	443b      	add	r3, r7
 8002894:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8002898:	4413      	add	r3, r2
 800289a:	0fda      	lsrs	r2, r3, #31
 800289c:	4413      	add	r3, r2
 800289e:	105b      	asrs	r3, r3, #1
 80028a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028a4:	e007      	b.n	80028b6 <maxim_heart_rate_and_oxygen_saturation+0x5c2>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
 80028a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	33b0      	adds	r3, #176	@ 0xb0
 80028ac:	443b      	add	r3, r7
 80028ae:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80028b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  if( n_ratio_average>2 && n_ratio_average <184){
 80028b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	dd11      	ble.n	80028e2 <maxim_heart_rate_and_oxygen_saturation+0x5ee>
 80028be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028c2:	2bb7      	cmp	r3, #183	@ 0xb7
 80028c4:	dc0d      	bgt.n	80028e2 <maxim_heart_rate_and_oxygen_saturation+0x5ee>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80028c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002900 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 80028c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028cc:	4413      	add	r3, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	67bb      	str	r3, [r7, #120]	@ 0x78
    *pn_spo2 = n_spo2_calc ;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80028d6:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80028d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e006      	b.n	80028f0 <maxim_heart_rate_and_oxygen_saturation+0x5fc>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	4a07      	ldr	r2, [pc, #28]	@ (8002904 <maxim_heart_rate_and_oxygen_saturation+0x610>)
 80028e6:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 80028e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
  }
}
 80028f0:	37b0      	adds	r7, #176	@ 0xb0
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000026c 	.word	0x2000026c
 80028fc:	200003fc 	.word	0x200003fc
 8002900:	08009318 	.word	0x08009318
 8002904:	fffffc19 	.word	0xfffffc19

08002908 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f812 	bl	800294a <maxim_peaks_above_min_height>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f880 	bl	8002a32 <maxim_remove_close_peaks>
  *n_npks = min( *n_npks, n_max_num );
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	429a      	cmp	r2, r3
 800293a:	bfa8      	it	ge
 800293c:	461a      	movge	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	601a      	str	r2, [r3, #0]
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 800294a:	b480      	push	{r7}
 800294c:	b087      	sub	sp, #28
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
  int32_t i = 1, n_width;
 8002958:	2301      	movs	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
  *n_npks = 0;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]

  while (i < n_size-1){
 8002962:	e05a      	b.n	8002a1a <maxim_peaks_above_min_height+0xd0>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a3a      	ldr	r2, [r7, #32]
 8002970:	429a      	cmp	r2, r3
 8002972:	da4f      	bge.n	8002a14 <maxim_peaks_above_min_height+0xca>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002984:	3b01      	subs	r3, #1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	440b      	add	r3, r1
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	dd40      	ble.n	8002a14 <maxim_peaks_above_min_height+0xca>
      n_width = 1;
 8002992:	2301      	movs	r3, #1
 8002994:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8002996:	e002      	b.n	800299e <maxim_peaks_above_min_height+0x54>
        n_width++;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	3301      	adds	r3, #1
 800299c:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	dd0d      	ble.n	80029c6 <maxim_peaks_above_min_height+0x7c>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	6979      	ldr	r1, [r7, #20]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	440b      	add	r3, r1
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	440b      	add	r3, r1
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d0e8      	beq.n	8002998 <maxim_peaks_above_min_height+0x4e>
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	6979      	ldr	r1, [r7, #20]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	440b      	add	r3, r1
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	440b      	add	r3, r1
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	dd13      	ble.n	8002a0a <maxim_peaks_above_min_height+0xc0>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b0e      	cmp	r3, #14
 80029e8:	dc0f      	bgt.n	8002a0a <maxim_peaks_above_min_height+0xc0>
        pn_locs[(*n_npks)++] = i;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1c59      	adds	r1, r3, #1
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	6011      	str	r1, [r2, #0]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	3301      	adds	r3, #1
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4413      	add	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8002a08:	e007      	b.n	8002a1a <maxim_peaks_above_min_height+0xd0>
      }
      else
        i += n_width;
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8002a12:	e002      	b.n	8002a1a <maxim_peaks_above_min_height+0xd0>
    }
    else
      i++;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3301      	adds	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
  while (i < n_size-1){
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	db9f      	blt.n	8002964 <maxim_peaks_above_min_height+0x1a>
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b088      	sub	sp, #32
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]

  int32_t i, j, n_old_npks, n_dist;

  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68f9      	ldr	r1, [r7, #12]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f895 	bl	8002b78 <maxim_sort_indices_descend>

  for ( i = -1; i < *pn_npks; i++ ){
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	e03e      	b.n	8002ad4 <maxim_remove_close_peaks+0xa2>
    n_old_npks = *pn_npks;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	617b      	str	r3, [r7, #20]
    *pn_npks = i+1;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	3301      	adds	r3, #1
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e02c      	b.n	8002ac6 <maxim_remove_close_peaks+0x94>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d005      	beq.n	8002a8a <maxim_remove_close_peaks+0x58>
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	440b      	add	r3, r1
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e001      	b.n	8002a8e <maxim_remove_close_peaks+0x5c>
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	613b      	str	r3, [r7, #16]
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	dc04      	bgt.n	8002aa4 <maxim_remove_close_peaks+0x72>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	425b      	negs	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	da0d      	bge.n	8002ac0 <maxim_remove_close_peaks+0x8e>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	441a      	add	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1c58      	adds	r0, r3, #1
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	6008      	str	r0, [r1, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	440b      	add	r3, r1
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	dbce      	blt.n	8002a6c <maxim_remove_close_peaks+0x3a>
  for ( i = -1; i < *pn_npks; i++ ){
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	dbbb      	blt.n	8002a56 <maxim_remove_close_peaks+0x24>
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f804 	bl	8002af2 <maxim_sort_ascend>
}
 8002aea:	bf00      	nop
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8002af2:	b480      	push	{r7}
 8002af4:	b087      	sub	sp, #28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8002afc:	2301      	movs	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	e02f      	b.n	8002b62 <maxim_sort_ascend+0x70>
    n_temp = pn_x[i];
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	e00f      	b.n	8002b34 <maxim_sort_ascend+0x42>
        pn_x[j] = pn_x[j-1];
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	441a      	add	r2, r3
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	440b      	add	r3, r1
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	dd0a      	ble.n	8002b50 <maxim_sort_ascend+0x5e>
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b40:	3b01      	subs	r3, #1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	dbe1      	blt.n	8002b14 <maxim_sort_ascend+0x22>
    pn_x[j] = n_temp;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	dbcb      	blt.n	8002b02 <maxim_sort_ascend+0x10>
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8002b84:	2301      	movs	r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	e037      	b.n	8002bfa <maxim_sort_indices_descend+0x82>
    n_temp = pn_indx[i];
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	4413      	add	r3, r2
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	617b      	str	r3, [r7, #20]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	e00f      	b.n	8002bbc <maxim_sort_indices_descend+0x44>
      pn_indx[j] = pn_indx[j-1];
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	441a      	add	r2, r3
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	440b      	add	r3, r1
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	dd12      	ble.n	8002be8 <maxim_sort_indices_descend+0x70>
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	440b      	add	r3, r1
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	68f9      	ldr	r1, [r7, #12]
 8002be0:	440b      	add	r3, r1
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	dcd9      	bgt.n	8002b9c <maxim_sort_indices_descend+0x24>
    pn_indx[j] = n_temp;
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	4413      	add	r3, r2
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	dbc3      	blt.n	8002b8a <maxim_sort_indices_descend+0x12>
  }
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	3724      	adds	r7, #36	@ 0x24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <FSM_INIT>:
#include<state_machine.h>
#include"NRF_DRIVER.h"



void FSM_INIT(StateMachine *sm){
 8002c10:	b4b0      	push	{r4, r5, r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	sm->current_state=STATE_HEART_DATA_ACQUIRE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
	sm->valid_heart_rate=0;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	705a      	strb	r2, [r3, #1]
	sm->spo2=0;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	605a      	str	r2, [r3, #4]
	sm->heart_rate=0;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
	sm->valid_spo2=0;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	731a      	strb	r2, [r3, #12]
	strcpy(sm->nrf_payload,"default_payload");
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	330d      	adds	r3, #13
 8002c3a:	4a06      	ldr	r2, [pc, #24]	@ (8002c54 <FSM_INIT+0x44>)
 8002c3c:	461c      	mov	r4, r3
 8002c3e:	4615      	mov	r5, r2
 8002c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c42:	6020      	str	r0, [r4, #0]
 8002c44:	6061      	str	r1, [r4, #4]
 8002c46:	60a2      	str	r2, [r4, #8]
 8002c48:	60e3      	str	r3, [r4, #12]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bcb0      	pop	{r4, r5, r7}
 8002c52:	4770      	bx	lr
 8002c54:	0800922c 	.word	0x0800922c

08002c58 <execute_sm>:

void execute_sm(StateMachine *sm){
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b08d      	sub	sp, #52	@ 0x34
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	6078      	str	r0, [r7, #4]
	switch(sm->current_state){
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	f000 80b7 	beq.w	8002dd8 <execute_sm+0x180>
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	f300 80d8 	bgt.w	8002e20 <execute_sm+0x1c8>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <execute_sm+0x22>
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d024      	beq.n	8002cc2 <execute_sm+0x6a>
			}
			sm->current_state=STATE_HEART_DATA_ACQUIRE;
			break;
	}

}
 8002c78:	e0d2      	b.n	8002e20 <execute_sm+0x1c8>
			bool valid_data=false;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	74fb      	strb	r3, [r7, #19]
			uint32_t timeout_val=2; //try for 10 seconds to get heart rate data
 8002c7e:	2302      	movs	r3, #2
 8002c80:	617b      	str	r3, [r7, #20]
			acquire_max_30102_data(timeout_val,&(sm->valid_heart_rate),&(sm->spo2),&(sm->heart_rate),&(sm->valid_spo2),&valid_data);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	1c59      	adds	r1, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	1d18      	adds	r0, r3, #4
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f103 0408 	add.w	r4, r3, #8
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	330c      	adds	r3, #12
 8002c94:	f107 0213 	add.w	r2, r7, #19
 8002c98:	9201      	str	r2, [sp, #4]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4623      	mov	r3, r4
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	6978      	ldr	r0, [r7, #20]
 8002ca2:	f7ff f9d9 	bl	8002058 <acquire_max_30102_data>
			sm->current_state=STATE_PACKET_FORMATION;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
			if(!valid_data){
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	f083 0301 	eor.w	r3, r3, #1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80b2 	beq.w	8002e1e <execute_sm+0x1c6>
				printf("timeout! \n \r");
 8002cba:	485b      	ldr	r0, [pc, #364]	@ (8002e28 <execute_sm+0x1d0>)
 8002cbc:	f002 fd9c 	bl	80057f8 <iprintf>
			break;
 8002cc0:	e0ad      	b.n	8002e1e <execute_sm+0x1c6>
			int hr=0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
			int spo2=0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
			printf("state changed to new state sending dummy packet \n \r");
 8002cca:	4858      	ldr	r0, [pc, #352]	@ (8002e2c <execute_sm+0x1d4>)
 8002ccc:	f002 fd94 	bl	80057f8 <iprintf>
			hr=sm->heart_rate;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
			spo2=sm->spo2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	623b      	str	r3, [r7, #32]
			int payload_idx=0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
			sm->nrf_payload[payload_idx++]='H';
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	61fa      	str	r2, [r7, #28]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	2248      	movs	r2, #72	@ 0x48
 8002cec:	735a      	strb	r2, [r3, #13]
			if(hr==-999 ||spo2==-999){
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8002e30 <execute_sm+0x1d8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <execute_sm+0xa6>
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	4a4d      	ldr	r2, [pc, #308]	@ (8002e30 <execute_sm+0x1d8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d106      	bne.n	8002d0c <execute_sm+0xb4>
				printf("Invalid \n \r");
 8002cfe:	484d      	ldr	r0, [pc, #308]	@ (8002e34 <execute_sm+0x1dc>)
 8002d00:	f002 fd7a 	bl	80057f8 <iprintf>
				hr=0;spo2=0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d08:	2300      	movs	r3, #0
 8002d0a:	623b      	str	r3, [r7, #32]
			printf("hr %d \n \r",hr);
 8002d0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d0e:	484a      	ldr	r0, [pc, #296]	@ (8002e38 <execute_sm+0x1e0>)
 8002d10:	f002 fd72 	bl	80057f8 <iprintf>
			printf("spo2 %d \n \r",spo2);
 8002d14:	6a39      	ldr	r1, [r7, #32]
 8002d16:	4849      	ldr	r0, [pc, #292]	@ (8002e3c <execute_sm+0x1e4>)
 8002d18:	f002 fd6e 	bl	80057f8 <iprintf>
			sprintf(temp_holder, "%d", hr);
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d22:	4947      	ldr	r1, [pc, #284]	@ (8002e40 <execute_sm+0x1e8>)
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 fd81 	bl	800582c <siprintf>
			printf("%s \n \r",temp_holder);
 8002d2a:	f107 0308 	add.w	r3, r7, #8
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4844      	ldr	r0, [pc, #272]	@ (8002e44 <execute_sm+0x1ec>)
 8002d32:	f002 fd61 	bl	80057f8 <iprintf>
			int i=0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
			while(temp_holder[i]){
 8002d3a:	e00d      	b.n	8002d58 <execute_sm+0x100>
			sm->nrf_payload[payload_idx++]=temp_holder[i++];
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	1c53      	adds	r3, r2, #1
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	1c59      	adds	r1, r3, #1
 8002d46:	61f9      	str	r1, [r7, #28]
 8002d48:	3228      	adds	r2, #40	@ 0x28
 8002d4a:	443a      	add	r2, r7
 8002d4c:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	460a      	mov	r2, r1
 8002d56:	735a      	strb	r2, [r3, #13]
			while(temp_holder[i]){
 8002d58:	f107 0208 	add.w	r2, r7, #8
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1ea      	bne.n	8002d3c <execute_sm+0xe4>
			sm->nrf_payload[payload_idx++]='O';
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	61fa      	str	r2, [r7, #28]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	224f      	movs	r2, #79	@ 0x4f
 8002d72:	735a      	strb	r2, [r3, #13]
			i++;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	3301      	adds	r3, #1
 8002d78:	61bb      	str	r3, [r7, #24]
			sprintf(temp_holder, "%d", spo2);
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	6a3a      	ldr	r2, [r7, #32]
 8002d80:	492f      	ldr	r1, [pc, #188]	@ (8002e40 <execute_sm+0x1e8>)
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fd52 	bl	800582c <siprintf>
			i=0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
			while(temp_holder[i]){
 8002d8c:	e00d      	b.n	8002daa <execute_sm+0x152>
			sm->nrf_payload[payload_idx++]=temp_holder[i++];
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	1c53      	adds	r3, r2, #1
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	1c59      	adds	r1, r3, #1
 8002d98:	61f9      	str	r1, [r7, #28]
 8002d9a:	3228      	adds	r2, #40	@ 0x28
 8002d9c:	443a      	add	r2, r7
 8002d9e:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	460a      	mov	r2, r1
 8002da8:	735a      	strb	r2, [r3, #13]
			while(temp_holder[i]){
 8002daa:	f107 0208 	add.w	r2, r7, #8
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4413      	add	r3, r2
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1ea      	bne.n	8002d8e <execute_sm+0x136>
			sm->nrf_payload[payload_idx]='\0';
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	330d      	adds	r3, #13
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
			printf("transmittes string %s",sm->nrf_payload);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	330d      	adds	r3, #13
 8002dc8:	4619      	mov	r1, r3
 8002dca:	481f      	ldr	r0, [pc, #124]	@ (8002e48 <execute_sm+0x1f0>)
 8002dcc:	f002 fd14 	bl	80057f8 <iprintf>
			sm->current_state=STATE_TRANSMIT_NRF;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	701a      	strb	r2, [r3, #0]
			break;
 8002dd6:	e023      	b.n	8002e20 <execute_sm+0x1c8>
			if(NRF_TX_DATA(sm->nrf_payload,strlen(sm->nrf_payload))==1){
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f103 040d 	add.w	r4, r3, #13
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	330d      	adds	r3, #13
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fa4c 	bl	8000280 <strlen>
 8002de8:	4603      	mov	r3, r0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	4619      	mov	r1, r3
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7fe fcc6 	bl	8001780 <NRF_TX_DATA>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d10a      	bne.n	8002e10 <execute_sm+0x1b8>
			printf("\n \r transmit success payload size was %d \n \r",strlen(sm->nrf_payload));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	330d      	adds	r3, #13
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fa3e 	bl	8000280 <strlen>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4619      	mov	r1, r3
 8002e08:	4810      	ldr	r0, [pc, #64]	@ (8002e4c <execute_sm+0x1f4>)
 8002e0a:	f002 fcf5 	bl	80057f8 <iprintf>
 8002e0e:	e002      	b.n	8002e16 <execute_sm+0x1be>
				printf("\n \r Something went wrong ! \n \r");
 8002e10:	480f      	ldr	r0, [pc, #60]	@ (8002e50 <execute_sm+0x1f8>)
 8002e12:	f002 fcf1 	bl	80057f8 <iprintf>
			sm->current_state=STATE_HEART_DATA_ACQUIRE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
			break;
 8002e1c:	e000      	b.n	8002e20 <execute_sm+0x1c8>
			break;
 8002e1e:	bf00      	nop
}
 8002e20:	bf00      	nop
 8002e22:	372c      	adds	r7, #44	@ 0x2c
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd90      	pop	{r4, r7, pc}
 8002e28:	0800923c 	.word	0x0800923c
 8002e2c:	0800924c 	.word	0x0800924c
 8002e30:	fffffc19 	.word	0xfffffc19
 8002e34:	08009280 	.word	0x08009280
 8002e38:	0800928c 	.word	0x0800928c
 8002e3c:	08009298 	.word	0x08009298
 8002e40:	080092a4 	.word	0x080092a4
 8002e44:	080092a8 	.word	0x080092a8
 8002e48:	080092b0 	.word	0x080092b0
 8002e4c:	080092c8 	.word	0x080092c8
 8002e50:	080092f8 	.word	0x080092f8

08002e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <HAL_MspInit+0x4c>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea0 <HAL_MspInit+0x4c>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <HAL_MspInit+0x4c>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <HAL_MspInit+0x4c>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ea0 <HAL_MspInit+0x4c>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_MspInit+0x4c>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e92:	2007      	movs	r0, #7
 8002e94:	f000 fbe4 	bl	8003660 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800

08002ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	@ 0x28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f38 <HAL_UART_MspInit+0x94>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d134      	bne.n	8002f30 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	4b1c      	ldr	r3, [pc, #112]	@ (8002f3c <HAL_UART_MspInit+0x98>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ece:	4a1b      	ldr	r2, [pc, #108]	@ (8002f3c <HAL_UART_MspInit+0x98>)
 8002ed0:	f043 0310 	orr.w	r3, r3, #16
 8002ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ed6:	4b19      	ldr	r3, [pc, #100]	@ (8002f3c <HAL_UART_MspInit+0x98>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <HAL_UART_MspInit+0x98>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	4a14      	ldr	r2, [pc, #80]	@ (8002f3c <HAL_UART_MspInit+0x98>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef2:	4b12      	ldr	r3, [pc, #72]	@ (8002f3c <HAL_UART_MspInit+0x98>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002efe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f04:	2302      	movs	r3, #2
 8002f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f10:	2307      	movs	r3, #7
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4809      	ldr	r0, [pc, #36]	@ (8002f40 <HAL_UART_MspInit+0x9c>)
 8002f1c:	f000 fbe2 	bl	80036e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2100      	movs	r1, #0
 8002f24:	2025      	movs	r0, #37	@ 0x25
 8002f26:	f000 fba6 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f2a:	2025      	movs	r0, #37	@ 0x25
 8002f2c:	f000 fbbf 	bl	80036ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f30:	bf00      	nop
 8002f32:	3728      	adds	r7, #40	@ 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40011000 	.word	0x40011000
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020000 	.word	0x40020000

08002f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f48:	bf00      	nop
 8002f4a:	e7fd      	b.n	8002f48 <NMI_Handler+0x4>

08002f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <HardFault_Handler+0x4>

08002f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <MemManage_Handler+0x4>

08002f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f60:	bf00      	nop
 8002f62:	e7fd      	b.n	8002f60 <BusFault_Handler+0x4>

08002f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <UsageFault_Handler+0x4>

08002f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  Uart_isr(&huart1);
 8002f9c:	4802      	ldr	r0, [pc, #8]	@ (8002fa8 <USART1_IRQHandler+0x10>)
 8002f9e:	f000 f929 	bl	80031f4 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000200 	.word	0x20000200

08002fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return 1;
 8002fb0:	2301      	movs	r3, #1
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_kill>:

int _kill(int pid, int sig)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fc6:	f002 fce7 	bl	8005998 <__errno>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2216      	movs	r2, #22
 8002fce:	601a      	str	r2, [r3, #0]
  return -1;
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <_exit>:

void _exit (int status)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ffe7 	bl	8002fbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fee:	bf00      	nop
 8002ff0:	e7fd      	b.n	8002fee <_exit+0x12>

08002ff2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e00a      	b.n	800301a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003004:	f000 f9cc 	bl	80033a0 <__io_getchar>
 8003008:	4601      	mov	r1, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	60ba      	str	r2, [r7, #8]
 8003010:	b2ca      	uxtb	r2, r1
 8003012:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	dbf0      	blt.n	8003004 <_read+0x12>
  }

  return len;
 8003022:	687b      	ldr	r3, [r7, #4]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e009      	b.n	8003052 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	60ba      	str	r2, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f99c 	bl	8003384 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3301      	adds	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	dbf1      	blt.n	800303e <_write+0x12>
  }
  return len;
 800305a:	687b      	ldr	r3, [r7, #4]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <_close>:

int _close(int file)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800306c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800308c:	605a      	str	r2, [r3, #4]
  return 0;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <_isatty>:

int _isatty(int file)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030a4:	2301      	movs	r3, #1
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d4:	4a14      	ldr	r2, [pc, #80]	@ (8003128 <_sbrk+0x5c>)
 80030d6:	4b15      	ldr	r3, [pc, #84]	@ (800312c <_sbrk+0x60>)
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e0:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <_sbrk+0x64>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e8:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <_sbrk+0x64>)
 80030ea:	4a12      	ldr	r2, [pc, #72]	@ (8003134 <_sbrk+0x68>)
 80030ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ee:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <_sbrk+0x64>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d207      	bcs.n	800310c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030fc:	f002 fc4c 	bl	8005998 <__errno>
 8003100:	4603      	mov	r3, r0
 8003102:	220c      	movs	r2, #12
 8003104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003106:	f04f 33ff 	mov.w	r3, #4294967295
 800310a:	e009      	b.n	8003120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800310c:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <_sbrk+0x64>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003112:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <_sbrk+0x64>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	4a05      	ldr	r2, [pc, #20]	@ (8003130 <_sbrk+0x64>)
 800311c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20020000 	.word	0x20020000
 800312c:	00000400 	.word	0x00000400
 8003130:	2000058c 	.word	0x2000058c
 8003134:	20000b00 	.word	0x20000b00

08003138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <SystemInit+0x20>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003142:	4a05      	ldr	r2, [pc, #20]	@ (8003158 <SystemInit+0x20>)
 8003144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8003160:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <Ringbuf_init+0x3c>)
 8003162:	4a0e      	ldr	r2, [pc, #56]	@ (800319c <Ringbuf_init+0x40>)
 8003164:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8003166:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <Ringbuf_init+0x44>)
 8003168:	4a0e      	ldr	r2, [pc, #56]	@ (80031a4 <Ringbuf_init+0x48>)
 800316a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 800316c:	4b0e      	ldr	r3, [pc, #56]	@ (80031a8 <Ringbuf_init+0x4c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <Ringbuf_init+0x4c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 800317c:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <Ringbuf_init+0x4c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <Ringbuf_init+0x4c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0220 	orr.w	r2, r2, #32
 800318a:	60da      	str	r2, [r3, #12]
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200009a4 	.word	0x200009a4
 800319c:	20000594 	.word	0x20000594
 80031a0:	200009a8 	.word	0x200009a8
 80031a4:	2000079c 	.word	0x2000079c
 80031a8:	20000200 	.word	0x20000200

080031ac <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c4:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d009      	beq.n	80031e6 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	79f9      	ldrb	r1, [r7, #7]
 80031dc:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d013      	beq.n	800323e <Uart_isr+0x4a>
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00e      	beq.n	800323e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800322e:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <Uart_isr+0xb4>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ffb8 	bl	80031ac <store_char>
        return;
 800323c:	e031      	b.n	80032a2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d02c      	beq.n	80032a2 <Uart_isr+0xae>
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324e:	2b00      	cmp	r3, #0
 8003250:	d027      	beq.n	80032a2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8003252:	4b16      	ldr	r3, [pc, #88]	@ (80032ac <Uart_isr+0xb8>)
 8003254:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003258:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <Uart_isr+0xb8>)
 800325a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800325e:	429a      	cmp	r2, r3
 8003260:	d108      	bne.n	8003274 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003270:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8003272:	e015      	b.n	80032a0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8003274:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <Uart_isr+0xb8>)
 8003276:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800327a:	4a0c      	ldr	r2, [pc, #48]	@ (80032ac <Uart_isr+0xb8>)
 800327c:	5cd3      	ldrb	r3, [r2, r3]
 800327e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8003280:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <Uart_isr+0xb8>)
 8003282:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003286:	3301      	adds	r3, #1
 8003288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328c:	4a07      	ldr	r2, [pc, #28]	@ (80032ac <Uart_isr+0xb8>)
 800328e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	7bba      	ldrb	r2, [r7, #14]
 800329e:	605a      	str	r2, [r3, #4]
    	return;
 80032a0:	bf00      	nop
    }
}
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	200009a4 	.word	0x200009a4
 80032ac:	2000079c 	.word	0x2000079c

080032b0 <usart_init>:
 *  usart get and put and usart init
 */

#include "usart.h"

void usart_init() {
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 80032b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <usart_init+0x70>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	4a19      	ldr	r2, [pc, #100]	@ (8003320 <usart_init+0x70>)
 80032ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032be:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 80032c0:	4b17      	ldr	r3, [pc, #92]	@ (8003320 <usart_init+0x70>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	4a16      	ldr	r2, [pc, #88]	@ (8003320 <usart_init+0x70>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 and PA3 as alternate function
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER2_Pos);
 80032cc:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <usart_init+0x74>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a14      	ldr	r2, [pc, #80]	@ (8003324 <usart_init+0x74>)
 80032d2:	f043 0320 	orr.w	r3, r3, #32
 80032d6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER3_Pos);
 80032d8:	4b12      	ldr	r3, [pc, #72]	@ (8003324 <usart_init+0x74>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a11      	ldr	r2, [pc, #68]	@ (8003324 <usart_init+0x74>)
 80032de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032e2:	6013      	str	r3, [r2, #0]

    // Set PA2 to USART_TX and PA3 to USART_RX
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos); // TX alternate function
 80032e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003324 <usart_init+0x74>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003324 <usart_init+0x74>)
 80032ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032ee:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL3_Pos); // RX alternate function
 80032f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003324 <usart_init+0x74>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003324 <usart_init+0x74>)
 80032f6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80032fa:	6213      	str	r3, [r2, #32]

    // Enable USART, transmitter, and receiver
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80032fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003328 <usart_init+0x78>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a09      	ldr	r2, [pc, #36]	@ (8003328 <usart_init+0x78>)
 8003302:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003306:	f043 030c 	orr.w	r3, r3, #12
 800330a:	60d3      	str	r3, [r2, #12]

    // Set baud rate to 9600 (make sure BAUD_9600 is defined based on your clock setup)
    USART2->BRR = BAUD_9600;
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <usart_init+0x78>)
 800330e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003312:	609a      	str	r2, [r3, #8]

    // Test character output to verify USART setup
   // USART2->DR = 'B';
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	40020000 	.word	0x40020000
 8003328:	40004400 	.word	0x40004400

0800332c <usart_out>:

void usart_out(char ch) {
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)) {
 8003336:	bf00      	nop
 8003338:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <usart_out+0x2c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f9      	beq.n	8003338 <usart_out+0xc>
        // Wait until transmit buffer is empty
    }
    USART2->DR = ch;
 8003344:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <usart_out+0x2c>)
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	6053      	str	r3, [r2, #4]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40004400 	.word	0x40004400

0800335c <usart_get>:
    while (*string) {
        usart_out(*string++);
    }
}

char usart_get() {
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE)) {
 8003360:	bf00      	nop
 8003362:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <usart_get+0x24>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f9      	beq.n	8003362 <usart_get+0x6>
        // Wait until receive buffer is not empty
    }
    return USART2->DR;
 800336e:	4b04      	ldr	r3, [pc, #16]	@ (8003380 <usart_get+0x24>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	b2db      	uxtb	r3, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40004400 	.word	0x40004400

08003384 <__io_putchar>:

// Override weak symbols for printf and getchar compatibility
int __io_putchar(int ch) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
    usart_out((char)ch); // Send character using USART
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ffcb 	bl	800332c <usart_out>
    return ch;           // Return the character for compatibility
 8003396:	687b      	ldr	r3, [r7, #4]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <__io_getchar>:

int __io_getchar(void) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
    return usart_get();  // Receive character using USART
 80033a4:	f7ff ffda 	bl	800335c <usart_get>
 80033a8:	4603      	mov	r3, r0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033b4:	f7ff fec0 	bl	8003138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033b8:	480c      	ldr	r0, [pc, #48]	@ (80033ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033ba:	490d      	ldr	r1, [pc, #52]	@ (80033f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033bc:	4a0d      	ldr	r2, [pc, #52]	@ (80033f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033c0:	e002      	b.n	80033c8 <LoopCopyDataInit>

080033c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033c6:	3304      	adds	r3, #4

080033c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033cc:	d3f9      	bcc.n	80033c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ce:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033d0:	4c0a      	ldr	r4, [pc, #40]	@ (80033fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80033d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033d4:	e001      	b.n	80033da <LoopFillZerobss>

080033d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033d8:	3204      	adds	r2, #4

080033da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033dc:	d3fb      	bcc.n	80033d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033de:	f002 fae1 	bl	80059a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033e2:	f7fe fb87 	bl	8001af4 <main>
  bx  lr    
 80033e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033f0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80033f4:	08009828 	.word	0x08009828
  ldr r2, =_sbss
 80033f8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80033fc:	20000afc 	.word	0x20000afc

08003400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003400:	e7fe      	b.n	8003400 <ADC_IRQHandler>
	...

08003404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003408:	4b0e      	ldr	r3, [pc, #56]	@ (8003444 <HAL_Init+0x40>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0d      	ldr	r2, [pc, #52]	@ (8003444 <HAL_Init+0x40>)
 800340e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003414:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <HAL_Init+0x40>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <HAL_Init+0x40>)
 800341a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800341e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <HAL_Init+0x40>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a07      	ldr	r2, [pc, #28]	@ (8003444 <HAL_Init+0x40>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800342c:	2003      	movs	r0, #3
 800342e:	f000 f917 	bl	8003660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003432:	2000      	movs	r0, #0
 8003434:	f000 f808 	bl	8003448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003438:	f7ff fd0c 	bl	8002e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023c00 	.word	0x40023c00

08003448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003450:	4b12      	ldr	r3, [pc, #72]	@ (800349c <HAL_InitTick+0x54>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b12      	ldr	r3, [pc, #72]	@ (80034a0 <HAL_InitTick+0x58>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	4619      	mov	r1, r3
 800345a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800345e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f92f 	bl	80036ca <HAL_SYSTICK_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e00e      	b.n	8003494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b0f      	cmp	r3, #15
 800347a:	d80a      	bhi.n	8003492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347c:	2200      	movs	r2, #0
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	f000 f8f7 	bl	8003676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003488:	4a06      	ldr	r2, [pc, #24]	@ (80034a4 <HAL_InitTick+0x5c>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000004 	.word	0x20000004
 80034a0:	2000000c 	.word	0x2000000c
 80034a4:	20000008 	.word	0x20000008

080034a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return uwTick;
 80034ac:	4b03      	ldr	r3, [pc, #12]	@ (80034bc <HAL_GetTick+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	200009ac 	.word	0x200009ac

080034c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003504 <__NVIC_SetPriorityGrouping+0x44>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034dc:	4013      	ands	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034f2:	4a04      	ldr	r2, [pc, #16]	@ (8003504 <__NVIC_SetPriorityGrouping+0x44>)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	60d3      	str	r3, [r2, #12]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800350c:	4b04      	ldr	r3, [pc, #16]	@ (8003520 <__NVIC_GetPriorityGrouping+0x18>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f003 0307 	and.w	r3, r3, #7
}
 8003516:	4618      	mov	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	2b00      	cmp	r3, #0
 8003534:	db0b      	blt.n	800354e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	f003 021f 	and.w	r2, r3, #31
 800353c:	4907      	ldr	r1, [pc, #28]	@ (800355c <__NVIC_EnableIRQ+0x38>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2001      	movs	r0, #1
 8003546:	fa00 f202 	lsl.w	r2, r0, r2
 800354a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000e100 	.word	0xe000e100

08003560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	2b00      	cmp	r3, #0
 8003572:	db0a      	blt.n	800358a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	490c      	ldr	r1, [pc, #48]	@ (80035ac <__NVIC_SetPriority+0x4c>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	440b      	add	r3, r1
 8003584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003588:	e00a      	b.n	80035a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4908      	ldr	r1, [pc, #32]	@ (80035b0 <__NVIC_SetPriority+0x50>)
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	3b04      	subs	r3, #4
 8003598:	0112      	lsls	r2, r2, #4
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	440b      	add	r3, r1
 800359e:	761a      	strb	r2, [r3, #24]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000e100 	.word	0xe000e100
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	@ 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f1c3 0307 	rsb	r3, r3, #7
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	bf28      	it	cs
 80035d2:	2304      	movcs	r3, #4
 80035d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3304      	adds	r3, #4
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d902      	bls.n	80035e4 <NVIC_EncodePriority+0x30>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3b03      	subs	r3, #3
 80035e2:	e000      	b.n	80035e6 <NVIC_EncodePriority+0x32>
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43da      	mvns	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	401a      	ands	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fa01 f303 	lsl.w	r3, r1, r3
 8003606:	43d9      	mvns	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	4313      	orrs	r3, r2
         );
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	@ 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800362c:	d301      	bcc.n	8003632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362e:	2301      	movs	r3, #1
 8003630:	e00f      	b.n	8003652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003632:	4a0a      	ldr	r2, [pc, #40]	@ (800365c <SysTick_Config+0x40>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800363a:	210f      	movs	r1, #15
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	f7ff ff8e 	bl	8003560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003644:	4b05      	ldr	r3, [pc, #20]	@ (800365c <SysTick_Config+0x40>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800364a:	4b04      	ldr	r3, [pc, #16]	@ (800365c <SysTick_Config+0x40>)
 800364c:	2207      	movs	r2, #7
 800364e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	e000e010 	.word	0xe000e010

08003660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff29 	bl	80034c0 <__NVIC_SetPriorityGrouping>
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003688:	f7ff ff3e 	bl	8003508 <__NVIC_GetPriorityGrouping>
 800368c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f7ff ff8e 	bl	80035b4 <NVIC_EncodePriority>
 8003698:	4602      	mov	r2, r0
 800369a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff5d 	bl	8003560 <__NVIC_SetPriority>
}
 80036a6:	bf00      	nop
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4603      	mov	r3, r0
 80036b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff31 	bl	8003524 <__NVIC_EnableIRQ>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffa2 	bl	800361c <SysTick_Config>
 80036d8:	4603      	mov	r3, r0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	@ 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e159      	b.n	80039b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	f040 8148 	bne.w	80039ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d005      	beq.n	8003736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003732:	2b02      	cmp	r3, #2
 8003734:	d130      	bne.n	8003798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d017      	beq.n	80037d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a2 	beq.w	80039ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b57      	ldr	r3, [pc, #348]	@ (80039cc <HAL_GPIO_Init+0x2e8>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003872:	4a56      	ldr	r2, [pc, #344]	@ (80039cc <HAL_GPIO_Init+0x2e8>)
 8003874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003878:	6453      	str	r3, [r2, #68]	@ 0x44
 800387a:	4b54      	ldr	r3, [pc, #336]	@ (80039cc <HAL_GPIO_Init+0x2e8>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003886:	4a52      	ldr	r2, [pc, #328]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a49      	ldr	r2, [pc, #292]	@ (80039d4 <HAL_GPIO_Init+0x2f0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d019      	beq.n	80038e6 <HAL_GPIO_Init+0x202>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a48      	ldr	r2, [pc, #288]	@ (80039d8 <HAL_GPIO_Init+0x2f4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0x1fe>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a47      	ldr	r2, [pc, #284]	@ (80039dc <HAL_GPIO_Init+0x2f8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00d      	beq.n	80038de <HAL_GPIO_Init+0x1fa>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a46      	ldr	r2, [pc, #280]	@ (80039e0 <HAL_GPIO_Init+0x2fc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <HAL_GPIO_Init+0x1f6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a45      	ldr	r2, [pc, #276]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_GPIO_Init+0x1f2>
 80038d2:	2304      	movs	r3, #4
 80038d4:	e008      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038d6:	2307      	movs	r3, #7
 80038d8:	e006      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038da:	2303      	movs	r3, #3
 80038dc:	e004      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038de:	2302      	movs	r3, #2
 80038e0:	e002      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038e6:	2300      	movs	r3, #0
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	f002 0203 	and.w	r2, r2, #3
 80038ee:	0092      	lsls	r2, r2, #2
 80038f0:	4093      	lsls	r3, r2
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f8:	4935      	ldr	r1, [pc, #212]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	3302      	adds	r3, #2
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003906:	4b38      	ldr	r3, [pc, #224]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800392a:	4a2f      	ldr	r2, [pc, #188]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003930:	4b2d      	ldr	r3, [pc, #180]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003954:	4a24      	ldr	r2, [pc, #144]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800395a:	4b23      	ldr	r3, [pc, #140]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800397e:	4a1a      	ldr	r2, [pc, #104]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003984:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039a8:	4a0f      	ldr	r2, [pc, #60]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	f67f aea2 	bls.w	8003700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3724      	adds	r7, #36	@ 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40013800 	.word	0x40013800
 80039d4:	40020000 	.word	0x40020000
 80039d8:	40020400 	.word	0x40020400
 80039dc:	40020800 	.word	0x40020800
 80039e0:	40020c00 	.word	0x40020c00
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40013c00 	.word	0x40013c00

080039ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e267      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d075      	beq.n	8003af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a0a:	4b88      	ldr	r3, [pc, #544]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d00c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a16:	4b85      	ldr	r3, [pc, #532]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d112      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4b82      	ldr	r3, [pc, #520]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4b7e      	ldr	r3, [pc, #504]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05b      	beq.n	8003af4 <HAL_RCC_OscConfig+0x108>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d157      	bne.n	8003af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e242      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x74>
 8003a52:	4b76      	ldr	r3, [pc, #472]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a75      	ldr	r2, [pc, #468]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x98>
 8003a6a:	4b70      	ldr	r3, [pc, #448]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b6d      	ldr	r3, [pc, #436]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a84:	4b69      	ldr	r3, [pc, #420]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a68      	ldr	r2, [pc, #416]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b66      	ldr	r3, [pc, #408]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a65      	ldr	r2, [pc, #404]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7ff fd00 	bl	80034a8 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7ff fcfc 	bl	80034a8 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	@ 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e207      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b5b      	ldr	r3, [pc, #364]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0xc0>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7ff fcec 	bl	80034a8 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7ff fce8 	bl	80034a8 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1f3      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	4b51      	ldr	r3, [pc, #324]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xe8>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d063      	beq.n	8003bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b02:	4b4a      	ldr	r3, [pc, #296]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0e:	4b47      	ldr	r3, [pc, #284]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b44      	ldr	r3, [pc, #272]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	4b41      	ldr	r3, [pc, #260]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e1c7      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4937      	ldr	r1, [pc, #220]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	e03a      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5c:	4b34      	ldr	r3, [pc, #208]	@ (8003c30 <HAL_RCC_OscConfig+0x244>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7ff fca1 	bl	80034a8 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7ff fc9d 	bl	80034a8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1a8      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4925      	ldr	r1, [pc, #148]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
 8003b9c:	e015      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9e:	4b24      	ldr	r3, [pc, #144]	@ (8003c30 <HAL_RCC_OscConfig+0x244>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7ff fc80 	bl	80034a8 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bac:	f7ff fc7c 	bl	80034a8 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e187      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d036      	beq.n	8003c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bde:	4b15      	ldr	r3, [pc, #84]	@ (8003c34 <HAL_RCC_OscConfig+0x248>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7ff fc60 	bl	80034a8 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bec:	f7ff fc5c 	bl	80034a8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e167      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCC_OscConfig+0x240>)
 8003c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x200>
 8003c0a:	e01b      	b.n	8003c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0c:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <HAL_RCC_OscConfig+0x248>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7ff fc49 	bl	80034a8 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	e00e      	b.n	8003c38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1a:	f7ff fc45 	bl	80034a8 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d907      	bls.n	8003c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e150      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	42470000 	.word	0x42470000
 8003c34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	4b88      	ldr	r3, [pc, #544]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ea      	bne.n	8003c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8097 	beq.w	8003d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b81      	ldr	r3, [pc, #516]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	4b7d      	ldr	r3, [pc, #500]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c72:	4b7a      	ldr	r3, [pc, #488]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	4b77      	ldr	r3, [pc, #476]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d118      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8e:	4b74      	ldr	r3, [pc, #464]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a73      	ldr	r2, [pc, #460]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7ff fc05 	bl	80034a8 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca2:	f7ff fc01 	bl	80034a8 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e10c      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e60 <HAL_RCC_OscConfig+0x474>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d106      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x2ea>
 8003cc8:	4b64      	ldr	r3, [pc, #400]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ccc:	4a63      	ldr	r2, [pc, #396]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd4:	e01c      	b.n	8003d10 <HAL_RCC_OscConfig+0x324>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x30c>
 8003cde:	4b5f      	ldr	r3, [pc, #380]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003ce4:	f043 0304 	orr.w	r3, r3, #4
 8003ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cea:	4b5c      	ldr	r3, [pc, #368]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	4a5b      	ldr	r2, [pc, #364]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf6:	e00b      	b.n	8003d10 <HAL_RCC_OscConfig+0x324>
 8003cf8:	4b58      	ldr	r3, [pc, #352]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfc:	4a57      	ldr	r2, [pc, #348]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d04:	4b55      	ldr	r3, [pc, #340]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d08:	4a54      	ldr	r2, [pc, #336]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	f023 0304 	bic.w	r3, r3, #4
 8003d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7ff fbc6 	bl	80034a8 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7ff fbc2 	bl	80034a8 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e0cb      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d36:	4b49      	ldr	r3, [pc, #292]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ee      	beq.n	8003d20 <HAL_RCC_OscConfig+0x334>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d44:	f7ff fbb0 	bl	80034a8 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7ff fbac 	bl	80034a8 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e0b5      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d62:	4b3e      	ldr	r3, [pc, #248]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1ee      	bne.n	8003d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d74:	4b39      	ldr	r3, [pc, #228]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	4a38      	ldr	r2, [pc, #224]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a1 	beq.w	8003ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d8a:	4b34      	ldr	r3, [pc, #208]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d05c      	beq.n	8003e50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d141      	bne.n	8003e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b31      	ldr	r3, [pc, #196]	@ (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7ff fb80 	bl	80034a8 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7ff fb7c 	bl	80034a8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e087      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b27      	ldr	r3, [pc, #156]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	3b01      	subs	r3, #1
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	491b      	ldr	r1, [pc, #108]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7ff fb55 	bl	80034a8 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7ff fb51 	bl	80034a8 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e05c      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e14:	4b11      	ldr	r3, [pc, #68]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x416>
 8003e20:	e054      	b.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <HAL_RCC_OscConfig+0x478>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7ff fb3e 	bl	80034a8 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7ff fb3a 	bl	80034a8 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e045      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <HAL_RCC_OscConfig+0x470>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x444>
 8003e4e:	e03d      	b.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e038      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40007000 	.word	0x40007000
 8003e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d028      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d121      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d11a      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e98:	4013      	ands	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800

08003edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0cc      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b68      	ldr	r3, [pc, #416]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d90c      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b65      	ldr	r3, [pc, #404]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b63      	ldr	r3, [pc, #396]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0b8      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f30:	4b59      	ldr	r3, [pc, #356]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a58      	ldr	r2, [pc, #352]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f48:	4b53      	ldr	r3, [pc, #332]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b50      	ldr	r3, [pc, #320]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	494d      	ldr	r1, [pc, #308]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d044      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d119      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	4b3b      	ldr	r3, [pc, #236]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e067      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fba:	4b37      	ldr	r3, [pc, #220]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 0203 	bic.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4934      	ldr	r1, [pc, #208]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fcc:	f7ff fa6c 	bl	80034a8 <HAL_GetTick>
 8003fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd4:	f7ff fa68 	bl	80034a8 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	4b2b      	ldr	r3, [pc, #172]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 020c 	and.w	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d1eb      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b25      	ldr	r3, [pc, #148]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d20c      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b22      	ldr	r3, [pc, #136]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b20      	ldr	r3, [pc, #128]	@ (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e032      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004030:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4916      	ldr	r1, [pc, #88]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404e:	4b12      	ldr	r3, [pc, #72]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	490e      	ldr	r1, [pc, #56]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004062:	f000 f821 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8004066:	4602      	mov	r2, r0
 8004068:	4b0b      	ldr	r3, [pc, #44]	@ (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	490a      	ldr	r1, [pc, #40]	@ (800409c <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	4a09      	ldr	r2, [pc, #36]	@ (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800407e:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff f9e0 	bl	8003448 <HAL_InitTick>

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40023c00 	.word	0x40023c00
 8004098:	40023800 	.word	0x40023800
 800409c:	080093d0 	.word	0x080093d0
 80040a0:	20000004 	.word	0x20000004
 80040a4:	20000008 	.word	0x20000008

080040a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b094      	sub	sp, #80	@ 0x50
 80040ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c0:	4b79      	ldr	r3, [pc, #484]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d00d      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x40>
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	f200 80e1 	bhi.w	8004294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x34>
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d003      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040da:	e0db      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040dc:	4b73      	ldr	r3, [pc, #460]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x204>)
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e0:	e0db      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040e2:	4b73      	ldr	r3, [pc, #460]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80040e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e6:	e0d8      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e8:	4b6f      	ldr	r3, [pc, #444]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f2:	4b6d      	ldr	r3, [pc, #436]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d063      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fe:	4b6a      	ldr	r3, [pc, #424]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	2200      	movs	r2, #0
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004108:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	633b      	str	r3, [r7, #48]	@ 0x30
 8004112:	2300      	movs	r3, #0
 8004114:	637b      	str	r3, [r7, #52]	@ 0x34
 8004116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	0159      	lsls	r1, r3, #5
 8004128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412c:	0150      	lsls	r0, r2, #5
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4621      	mov	r1, r4
 8004134:	1a51      	subs	r1, r2, r1
 8004136:	6139      	str	r1, [r7, #16]
 8004138:	4629      	mov	r1, r5
 800413a:	eb63 0301 	sbc.w	r3, r3, r1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800414c:	4659      	mov	r1, fp
 800414e:	018b      	lsls	r3, r1, #6
 8004150:	4651      	mov	r1, sl
 8004152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004156:	4651      	mov	r1, sl
 8004158:	018a      	lsls	r2, r1, #6
 800415a:	4651      	mov	r1, sl
 800415c:	ebb2 0801 	subs.w	r8, r2, r1
 8004160:	4659      	mov	r1, fp
 8004162:	eb63 0901 	sbc.w	r9, r3, r1
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800417a:	4690      	mov	r8, r2
 800417c:	4699      	mov	r9, r3
 800417e:	4623      	mov	r3, r4
 8004180:	eb18 0303 	adds.w	r3, r8, r3
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	462b      	mov	r3, r5
 8004188:	eb49 0303 	adc.w	r3, r9, r3
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800419a:	4629      	mov	r1, r5
 800419c:	024b      	lsls	r3, r1, #9
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041a4:	4621      	mov	r1, r4
 80041a6:	024a      	lsls	r2, r1, #9
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ae:	2200      	movs	r2, #0
 80041b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041b8:	f7fc fd6e 	bl	8000c98 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4613      	mov	r3, r2
 80041c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c4:	e058      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b38      	ldr	r3, [pc, #224]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	4611      	mov	r1, r2
 80041d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	2300      	movs	r3, #0
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
 80041dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	0159      	lsls	r1, r3, #5
 80041ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f2:	0150      	lsls	r0, r2, #5
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4641      	mov	r1, r8
 80041fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80041fe:	4649      	mov	r1, r9
 8004200:	eb63 0b01 	sbc.w	fp, r3, r1
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004218:	ebb2 040a 	subs.w	r4, r2, sl
 800421c:	eb63 050b 	sbc.w	r5, r3, fp
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	00eb      	lsls	r3, r5, #3
 800422a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422e:	00e2      	lsls	r2, r4, #3
 8004230:	4614      	mov	r4, r2
 8004232:	461d      	mov	r5, r3
 8004234:	4643      	mov	r3, r8
 8004236:	18e3      	adds	r3, r4, r3
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	464b      	mov	r3, r9
 800423c:	eb45 0303 	adc.w	r3, r5, r3
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800424e:	4629      	mov	r1, r5
 8004250:	028b      	lsls	r3, r1, #10
 8004252:	4621      	mov	r1, r4
 8004254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004258:	4621      	mov	r1, r4
 800425a:	028a      	lsls	r2, r1, #10
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004262:	2200      	movs	r2, #0
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	61fa      	str	r2, [r7, #28]
 8004268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426c:	f7fc fd14 	bl	8000c98 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4613      	mov	r3, r2
 8004276:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800428a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004292:	e002      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800429c:	4618      	mov	r0, r3
 800429e:	3750      	adds	r7, #80	@ 0x50
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	007a1200 	.word	0x007a1200

080042b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b8:	4b03      	ldr	r3, [pc, #12]	@ (80042c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000004 	.word	0x20000004

080042cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042d0:	f7ff fff0 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0a9b      	lsrs	r3, r3, #10
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	@ (80042f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	080093e0 	.word	0x080093e0

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042f8:	f7ff ffdc 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0b5b      	lsrs	r3, r3, #13
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	@ (8004318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	080093e0 	.word	0x080093e0

0800431c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e042      	b.n	80043b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fe fdae 	bl	8002ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2224      	movs	r2, #36	@ 0x24
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800435e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f82b 	bl	80043bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c0:	b0c0      	sub	sp, #256	@ 0x100
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	68d9      	ldr	r1, [r3, #12]
 80043da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	ea40 0301 	orr.w	r3, r0, r1
 80043e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004414:	f021 010c 	bic.w	r1, r1, #12
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004422:	430b      	orrs	r3, r1
 8004424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004436:	6999      	ldr	r1, [r3, #24]
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	ea40 0301 	orr.w	r3, r0, r1
 8004442:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b8f      	ldr	r3, [pc, #572]	@ (8004688 <UART_SetConfig+0x2cc>)
 800444c:	429a      	cmp	r2, r3
 800444e:	d005      	beq.n	800445c <UART_SetConfig+0xa0>
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4b8d      	ldr	r3, [pc, #564]	@ (800468c <UART_SetConfig+0x2d0>)
 8004458:	429a      	cmp	r2, r3
 800445a:	d104      	bne.n	8004466 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800445c:	f7ff ff4a 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 8004460:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004464:	e003      	b.n	800446e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004466:	f7ff ff31 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 800446a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004478:	f040 810c 	bne.w	8004694 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800447c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004480:	2200      	movs	r2, #0
 8004482:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004486:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800448a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800448e:	4622      	mov	r2, r4
 8004490:	462b      	mov	r3, r5
 8004492:	1891      	adds	r1, r2, r2
 8004494:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004496:	415b      	adcs	r3, r3
 8004498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800449a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800449e:	4621      	mov	r1, r4
 80044a0:	eb12 0801 	adds.w	r8, r2, r1
 80044a4:	4629      	mov	r1, r5
 80044a6:	eb43 0901 	adc.w	r9, r3, r1
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044be:	4690      	mov	r8, r2
 80044c0:	4699      	mov	r9, r3
 80044c2:	4623      	mov	r3, r4
 80044c4:	eb18 0303 	adds.w	r3, r8, r3
 80044c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044cc:	462b      	mov	r3, r5
 80044ce:	eb49 0303 	adc.w	r3, r9, r3
 80044d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044ea:	460b      	mov	r3, r1
 80044ec:	18db      	adds	r3, r3, r3
 80044ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f0:	4613      	mov	r3, r2
 80044f2:	eb42 0303 	adc.w	r3, r2, r3
 80044f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80044f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004500:	f7fc fbca 	bl	8000c98 <__aeabi_uldivmod>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4b61      	ldr	r3, [pc, #388]	@ (8004690 <UART_SetConfig+0x2d4>)
 800450a:	fba3 2302 	umull	r2, r3, r3, r2
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	011c      	lsls	r4, r3, #4
 8004512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004516:	2200      	movs	r2, #0
 8004518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800451c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004520:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004524:	4642      	mov	r2, r8
 8004526:	464b      	mov	r3, r9
 8004528:	1891      	adds	r1, r2, r2
 800452a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800452c:	415b      	adcs	r3, r3
 800452e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004530:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004534:	4641      	mov	r1, r8
 8004536:	eb12 0a01 	adds.w	sl, r2, r1
 800453a:	4649      	mov	r1, r9
 800453c:	eb43 0b01 	adc.w	fp, r3, r1
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800454c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004554:	4692      	mov	sl, r2
 8004556:	469b      	mov	fp, r3
 8004558:	4643      	mov	r3, r8
 800455a:	eb1a 0303 	adds.w	r3, sl, r3
 800455e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004562:	464b      	mov	r3, r9
 8004564:	eb4b 0303 	adc.w	r3, fp, r3
 8004568:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004578:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800457c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004580:	460b      	mov	r3, r1
 8004582:	18db      	adds	r3, r3, r3
 8004584:	643b      	str	r3, [r7, #64]	@ 0x40
 8004586:	4613      	mov	r3, r2
 8004588:	eb42 0303 	adc.w	r3, r2, r3
 800458c:	647b      	str	r3, [r7, #68]	@ 0x44
 800458e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004592:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004596:	f7fc fb7f 	bl	8000c98 <__aeabi_uldivmod>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004690 <UART_SetConfig+0x2d4>)
 80045a2:	fba3 2301 	umull	r2, r3, r3, r1
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	2264      	movs	r2, #100	@ 0x64
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	1acb      	subs	r3, r1, r3
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045b6:	4b36      	ldr	r3, [pc, #216]	@ (8004690 <UART_SetConfig+0x2d4>)
 80045b8:	fba3 2302 	umull	r2, r3, r3, r2
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045c4:	441c      	add	r4, r3
 80045c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045d8:	4642      	mov	r2, r8
 80045da:	464b      	mov	r3, r9
 80045dc:	1891      	adds	r1, r2, r2
 80045de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045e0:	415b      	adcs	r3, r3
 80045e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045e8:	4641      	mov	r1, r8
 80045ea:	1851      	adds	r1, r2, r1
 80045ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80045ee:	4649      	mov	r1, r9
 80045f0:	414b      	adcs	r3, r1
 80045f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004600:	4659      	mov	r1, fp
 8004602:	00cb      	lsls	r3, r1, #3
 8004604:	4651      	mov	r1, sl
 8004606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800460a:	4651      	mov	r1, sl
 800460c:	00ca      	lsls	r2, r1, #3
 800460e:	4610      	mov	r0, r2
 8004610:	4619      	mov	r1, r3
 8004612:	4603      	mov	r3, r0
 8004614:	4642      	mov	r2, r8
 8004616:	189b      	adds	r3, r3, r2
 8004618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800461c:	464b      	mov	r3, r9
 800461e:	460a      	mov	r2, r1
 8004620:	eb42 0303 	adc.w	r3, r2, r3
 8004624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004634:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004638:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800463c:	460b      	mov	r3, r1
 800463e:	18db      	adds	r3, r3, r3
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004642:	4613      	mov	r3, r2
 8004644:	eb42 0303 	adc.w	r3, r2, r3
 8004648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800464a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800464e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004652:	f7fc fb21 	bl	8000c98 <__aeabi_uldivmod>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4b0d      	ldr	r3, [pc, #52]	@ (8004690 <UART_SetConfig+0x2d4>)
 800465c:	fba3 1302 	umull	r1, r3, r3, r2
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	2164      	movs	r1, #100	@ 0x64
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	3332      	adds	r3, #50	@ 0x32
 800466e:	4a08      	ldr	r2, [pc, #32]	@ (8004690 <UART_SetConfig+0x2d4>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	f003 0207 	and.w	r2, r3, #7
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4422      	add	r2, r4
 8004682:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004684:	e106      	b.n	8004894 <UART_SetConfig+0x4d8>
 8004686:	bf00      	nop
 8004688:	40011000 	.word	0x40011000
 800468c:	40011400 	.word	0x40011400
 8004690:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004698:	2200      	movs	r2, #0
 800469a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800469e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046a6:	4642      	mov	r2, r8
 80046a8:	464b      	mov	r3, r9
 80046aa:	1891      	adds	r1, r2, r2
 80046ac:	6239      	str	r1, [r7, #32]
 80046ae:	415b      	adcs	r3, r3
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046b6:	4641      	mov	r1, r8
 80046b8:	1854      	adds	r4, r2, r1
 80046ba:	4649      	mov	r1, r9
 80046bc:	eb43 0501 	adc.w	r5, r3, r1
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	00eb      	lsls	r3, r5, #3
 80046ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ce:	00e2      	lsls	r2, r4, #3
 80046d0:	4614      	mov	r4, r2
 80046d2:	461d      	mov	r5, r3
 80046d4:	4643      	mov	r3, r8
 80046d6:	18e3      	adds	r3, r4, r3
 80046d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046dc:	464b      	mov	r3, r9
 80046de:	eb45 0303 	adc.w	r3, r5, r3
 80046e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004702:	4629      	mov	r1, r5
 8004704:	008b      	lsls	r3, r1, #2
 8004706:	4621      	mov	r1, r4
 8004708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800470c:	4621      	mov	r1, r4
 800470e:	008a      	lsls	r2, r1, #2
 8004710:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004714:	f7fc fac0 	bl	8000c98 <__aeabi_uldivmod>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4b60      	ldr	r3, [pc, #384]	@ (80048a0 <UART_SetConfig+0x4e4>)
 800471e:	fba3 2302 	umull	r2, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	011c      	lsls	r4, r3, #4
 8004726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004730:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004734:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	1891      	adds	r1, r2, r2
 800473e:	61b9      	str	r1, [r7, #24]
 8004740:	415b      	adcs	r3, r3
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004748:	4641      	mov	r1, r8
 800474a:	1851      	adds	r1, r2, r1
 800474c:	6139      	str	r1, [r7, #16]
 800474e:	4649      	mov	r1, r9
 8004750:	414b      	adcs	r3, r1
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004760:	4659      	mov	r1, fp
 8004762:	00cb      	lsls	r3, r1, #3
 8004764:	4651      	mov	r1, sl
 8004766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800476a:	4651      	mov	r1, sl
 800476c:	00ca      	lsls	r2, r1, #3
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	4603      	mov	r3, r0
 8004774:	4642      	mov	r2, r8
 8004776:	189b      	adds	r3, r3, r2
 8004778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800477c:	464b      	mov	r3, r9
 800477e:	460a      	mov	r2, r1
 8004780:	eb42 0303 	adc.w	r3, r2, r3
 8004784:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004792:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047a0:	4649      	mov	r1, r9
 80047a2:	008b      	lsls	r3, r1, #2
 80047a4:	4641      	mov	r1, r8
 80047a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047aa:	4641      	mov	r1, r8
 80047ac:	008a      	lsls	r2, r1, #2
 80047ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047b2:	f7fc fa71 	bl	8000c98 <__aeabi_uldivmod>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	4b38      	ldr	r3, [pc, #224]	@ (80048a0 <UART_SetConfig+0x4e4>)
 80047be:	fba3 2301 	umull	r2, r3, r3, r1
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2264      	movs	r2, #100	@ 0x64
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	1acb      	subs	r3, r1, r3
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	3332      	adds	r3, #50	@ 0x32
 80047d0:	4a33      	ldr	r2, [pc, #204]	@ (80048a0 <UART_SetConfig+0x4e4>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047dc:	441c      	add	r4, r3
 80047de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047e2:	2200      	movs	r2, #0
 80047e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80047e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80047e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047ec:	4642      	mov	r2, r8
 80047ee:	464b      	mov	r3, r9
 80047f0:	1891      	adds	r1, r2, r2
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	415b      	adcs	r3, r3
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047fc:	4641      	mov	r1, r8
 80047fe:	1851      	adds	r1, r2, r1
 8004800:	6039      	str	r1, [r7, #0]
 8004802:	4649      	mov	r1, r9
 8004804:	414b      	adcs	r3, r1
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004814:	4659      	mov	r1, fp
 8004816:	00cb      	lsls	r3, r1, #3
 8004818:	4651      	mov	r1, sl
 800481a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800481e:	4651      	mov	r1, sl
 8004820:	00ca      	lsls	r2, r1, #3
 8004822:	4610      	mov	r0, r2
 8004824:	4619      	mov	r1, r3
 8004826:	4603      	mov	r3, r0
 8004828:	4642      	mov	r2, r8
 800482a:	189b      	adds	r3, r3, r2
 800482c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800482e:	464b      	mov	r3, r9
 8004830:	460a      	mov	r2, r1
 8004832:	eb42 0303 	adc.w	r3, r2, r3
 8004836:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	663b      	str	r3, [r7, #96]	@ 0x60
 8004842:	667a      	str	r2, [r7, #100]	@ 0x64
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004850:	4649      	mov	r1, r9
 8004852:	008b      	lsls	r3, r1, #2
 8004854:	4641      	mov	r1, r8
 8004856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800485a:	4641      	mov	r1, r8
 800485c:	008a      	lsls	r2, r1, #2
 800485e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004862:	f7fc fa19 	bl	8000c98 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4b0d      	ldr	r3, [pc, #52]	@ (80048a0 <UART_SetConfig+0x4e4>)
 800486c:	fba3 1302 	umull	r1, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	2164      	movs	r1, #100	@ 0x64
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	3332      	adds	r3, #50	@ 0x32
 800487e:	4a08      	ldr	r2, [pc, #32]	@ (80048a0 <UART_SetConfig+0x4e4>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	f003 020f 	and.w	r2, r3, #15
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4422      	add	r2, r4
 8004892:	609a      	str	r2, [r3, #8]
}
 8004894:	bf00      	nop
 8004896:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800489a:	46bd      	mov	sp, r7
 800489c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a0:	51eb851f 	.word	0x51eb851f

080048a4 <_strtol_l.constprop.0>:
 80048a4:	2b24      	cmp	r3, #36	@ 0x24
 80048a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048aa:	4686      	mov	lr, r0
 80048ac:	4690      	mov	r8, r2
 80048ae:	d801      	bhi.n	80048b4 <_strtol_l.constprop.0+0x10>
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d106      	bne.n	80048c2 <_strtol_l.constprop.0+0x1e>
 80048b4:	f001 f870 	bl	8005998 <__errno>
 80048b8:	2316      	movs	r3, #22
 80048ba:	6003      	str	r3, [r0, #0]
 80048bc:	2000      	movs	r0, #0
 80048be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c2:	4834      	ldr	r0, [pc, #208]	@ (8004994 <_strtol_l.constprop.0+0xf0>)
 80048c4:	460d      	mov	r5, r1
 80048c6:	462a      	mov	r2, r5
 80048c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048cc:	5d06      	ldrb	r6, [r0, r4]
 80048ce:	f016 0608 	ands.w	r6, r6, #8
 80048d2:	d1f8      	bne.n	80048c6 <_strtol_l.constprop.0+0x22>
 80048d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80048d6:	d12d      	bne.n	8004934 <_strtol_l.constprop.0+0x90>
 80048d8:	782c      	ldrb	r4, [r5, #0]
 80048da:	2601      	movs	r6, #1
 80048dc:	1c95      	adds	r5, r2, #2
 80048de:	f033 0210 	bics.w	r2, r3, #16
 80048e2:	d109      	bne.n	80048f8 <_strtol_l.constprop.0+0x54>
 80048e4:	2c30      	cmp	r4, #48	@ 0x30
 80048e6:	d12a      	bne.n	800493e <_strtol_l.constprop.0+0x9a>
 80048e8:	782a      	ldrb	r2, [r5, #0]
 80048ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80048ee:	2a58      	cmp	r2, #88	@ 0x58
 80048f0:	d125      	bne.n	800493e <_strtol_l.constprop.0+0x9a>
 80048f2:	786c      	ldrb	r4, [r5, #1]
 80048f4:	2310      	movs	r3, #16
 80048f6:	3502      	adds	r5, #2
 80048f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80048fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004900:	2200      	movs	r2, #0
 8004902:	fbbc f9f3 	udiv	r9, ip, r3
 8004906:	4610      	mov	r0, r2
 8004908:	fb03 ca19 	mls	sl, r3, r9, ip
 800490c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004910:	2f09      	cmp	r7, #9
 8004912:	d81b      	bhi.n	800494c <_strtol_l.constprop.0+0xa8>
 8004914:	463c      	mov	r4, r7
 8004916:	42a3      	cmp	r3, r4
 8004918:	dd27      	ble.n	800496a <_strtol_l.constprop.0+0xc6>
 800491a:	1c57      	adds	r7, r2, #1
 800491c:	d007      	beq.n	800492e <_strtol_l.constprop.0+0x8a>
 800491e:	4581      	cmp	r9, r0
 8004920:	d320      	bcc.n	8004964 <_strtol_l.constprop.0+0xc0>
 8004922:	d101      	bne.n	8004928 <_strtol_l.constprop.0+0x84>
 8004924:	45a2      	cmp	sl, r4
 8004926:	db1d      	blt.n	8004964 <_strtol_l.constprop.0+0xc0>
 8004928:	fb00 4003 	mla	r0, r0, r3, r4
 800492c:	2201      	movs	r2, #1
 800492e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004932:	e7eb      	b.n	800490c <_strtol_l.constprop.0+0x68>
 8004934:	2c2b      	cmp	r4, #43	@ 0x2b
 8004936:	bf04      	itt	eq
 8004938:	782c      	ldrbeq	r4, [r5, #0]
 800493a:	1c95      	addeq	r5, r2, #2
 800493c:	e7cf      	b.n	80048de <_strtol_l.constprop.0+0x3a>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1da      	bne.n	80048f8 <_strtol_l.constprop.0+0x54>
 8004942:	2c30      	cmp	r4, #48	@ 0x30
 8004944:	bf0c      	ite	eq
 8004946:	2308      	moveq	r3, #8
 8004948:	230a      	movne	r3, #10
 800494a:	e7d5      	b.n	80048f8 <_strtol_l.constprop.0+0x54>
 800494c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004950:	2f19      	cmp	r7, #25
 8004952:	d801      	bhi.n	8004958 <_strtol_l.constprop.0+0xb4>
 8004954:	3c37      	subs	r4, #55	@ 0x37
 8004956:	e7de      	b.n	8004916 <_strtol_l.constprop.0+0x72>
 8004958:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800495c:	2f19      	cmp	r7, #25
 800495e:	d804      	bhi.n	800496a <_strtol_l.constprop.0+0xc6>
 8004960:	3c57      	subs	r4, #87	@ 0x57
 8004962:	e7d8      	b.n	8004916 <_strtol_l.constprop.0+0x72>
 8004964:	f04f 32ff 	mov.w	r2, #4294967295
 8004968:	e7e1      	b.n	800492e <_strtol_l.constprop.0+0x8a>
 800496a:	1c53      	adds	r3, r2, #1
 800496c:	d108      	bne.n	8004980 <_strtol_l.constprop.0+0xdc>
 800496e:	2322      	movs	r3, #34	@ 0x22
 8004970:	f8ce 3000 	str.w	r3, [lr]
 8004974:	4660      	mov	r0, ip
 8004976:	f1b8 0f00 	cmp.w	r8, #0
 800497a:	d0a0      	beq.n	80048be <_strtol_l.constprop.0+0x1a>
 800497c:	1e69      	subs	r1, r5, #1
 800497e:	e006      	b.n	800498e <_strtol_l.constprop.0+0xea>
 8004980:	b106      	cbz	r6, 8004984 <_strtol_l.constprop.0+0xe0>
 8004982:	4240      	negs	r0, r0
 8004984:	f1b8 0f00 	cmp.w	r8, #0
 8004988:	d099      	beq.n	80048be <_strtol_l.constprop.0+0x1a>
 800498a:	2a00      	cmp	r2, #0
 800498c:	d1f6      	bne.n	800497c <_strtol_l.constprop.0+0xd8>
 800498e:	f8c8 1000 	str.w	r1, [r8]
 8004992:	e794      	b.n	80048be <_strtol_l.constprop.0+0x1a>
 8004994:	080093e9 	.word	0x080093e9

08004998 <_strtol_r>:
 8004998:	f7ff bf84 	b.w	80048a4 <_strtol_l.constprop.0>

0800499c <__cvt>:
 800499c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	ec57 6b10 	vmov	r6, r7, d0
 80049a4:	2f00      	cmp	r7, #0
 80049a6:	460c      	mov	r4, r1
 80049a8:	4619      	mov	r1, r3
 80049aa:	463b      	mov	r3, r7
 80049ac:	bfbb      	ittet	lt
 80049ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80049b2:	461f      	movlt	r7, r3
 80049b4:	2300      	movge	r3, #0
 80049b6:	232d      	movlt	r3, #45	@ 0x2d
 80049b8:	700b      	strb	r3, [r1, #0]
 80049ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80049c0:	4691      	mov	r9, r2
 80049c2:	f023 0820 	bic.w	r8, r3, #32
 80049c6:	bfbc      	itt	lt
 80049c8:	4632      	movlt	r2, r6
 80049ca:	4616      	movlt	r6, r2
 80049cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049d0:	d005      	beq.n	80049de <__cvt+0x42>
 80049d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80049d6:	d100      	bne.n	80049da <__cvt+0x3e>
 80049d8:	3401      	adds	r4, #1
 80049da:	2102      	movs	r1, #2
 80049dc:	e000      	b.n	80049e0 <__cvt+0x44>
 80049de:	2103      	movs	r1, #3
 80049e0:	ab03      	add	r3, sp, #12
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	ab02      	add	r3, sp, #8
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	ec47 6b10 	vmov	d0, r6, r7
 80049ec:	4653      	mov	r3, sl
 80049ee:	4622      	mov	r2, r4
 80049f0:	f001 f88e 	bl	8005b10 <_dtoa_r>
 80049f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80049f8:	4605      	mov	r5, r0
 80049fa:	d119      	bne.n	8004a30 <__cvt+0x94>
 80049fc:	f019 0f01 	tst.w	r9, #1
 8004a00:	d00e      	beq.n	8004a20 <__cvt+0x84>
 8004a02:	eb00 0904 	add.w	r9, r0, r4
 8004a06:	2200      	movs	r2, #0
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	4639      	mov	r1, r7
 8004a0e:	f7fc f863 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a12:	b108      	cbz	r0, 8004a18 <__cvt+0x7c>
 8004a14:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a18:	2230      	movs	r2, #48	@ 0x30
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	454b      	cmp	r3, r9
 8004a1e:	d31e      	bcc.n	8004a5e <__cvt+0xc2>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a24:	1b5b      	subs	r3, r3, r5
 8004a26:	4628      	mov	r0, r5
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	b004      	add	sp, #16
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a34:	eb00 0904 	add.w	r9, r0, r4
 8004a38:	d1e5      	bne.n	8004a06 <__cvt+0x6a>
 8004a3a:	7803      	ldrb	r3, [r0, #0]
 8004a3c:	2b30      	cmp	r3, #48	@ 0x30
 8004a3e:	d10a      	bne.n	8004a56 <__cvt+0xba>
 8004a40:	2200      	movs	r2, #0
 8004a42:	2300      	movs	r3, #0
 8004a44:	4630      	mov	r0, r6
 8004a46:	4639      	mov	r1, r7
 8004a48:	f7fc f846 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a4c:	b918      	cbnz	r0, 8004a56 <__cvt+0xba>
 8004a4e:	f1c4 0401 	rsb	r4, r4, #1
 8004a52:	f8ca 4000 	str.w	r4, [sl]
 8004a56:	f8da 3000 	ldr.w	r3, [sl]
 8004a5a:	4499      	add	r9, r3
 8004a5c:	e7d3      	b.n	8004a06 <__cvt+0x6a>
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	9103      	str	r1, [sp, #12]
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	e7d9      	b.n	8004a1a <__cvt+0x7e>

08004a66 <__exponent>:
 8004a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a68:	2900      	cmp	r1, #0
 8004a6a:	bfba      	itte	lt
 8004a6c:	4249      	neglt	r1, r1
 8004a6e:	232d      	movlt	r3, #45	@ 0x2d
 8004a70:	232b      	movge	r3, #43	@ 0x2b
 8004a72:	2909      	cmp	r1, #9
 8004a74:	7002      	strb	r2, [r0, #0]
 8004a76:	7043      	strb	r3, [r0, #1]
 8004a78:	dd29      	ble.n	8004ace <__exponent+0x68>
 8004a7a:	f10d 0307 	add.w	r3, sp, #7
 8004a7e:	461d      	mov	r5, r3
 8004a80:	270a      	movs	r7, #10
 8004a82:	461a      	mov	r2, r3
 8004a84:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a88:	fb07 1416 	mls	r4, r7, r6, r1
 8004a8c:	3430      	adds	r4, #48	@ 0x30
 8004a8e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a92:	460c      	mov	r4, r1
 8004a94:	2c63      	cmp	r4, #99	@ 0x63
 8004a96:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	dcf1      	bgt.n	8004a82 <__exponent+0x1c>
 8004a9e:	3130      	adds	r1, #48	@ 0x30
 8004aa0:	1e94      	subs	r4, r2, #2
 8004aa2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004aa6:	1c41      	adds	r1, r0, #1
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	42ab      	cmp	r3, r5
 8004aac:	d30a      	bcc.n	8004ac4 <__exponent+0x5e>
 8004aae:	f10d 0309 	add.w	r3, sp, #9
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	42ac      	cmp	r4, r5
 8004ab6:	bf88      	it	hi
 8004ab8:	2300      	movhi	r3, #0
 8004aba:	3302      	adds	r3, #2
 8004abc:	4403      	add	r3, r0
 8004abe:	1a18      	subs	r0, r3, r0
 8004ac0:	b003      	add	sp, #12
 8004ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ac8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004acc:	e7ed      	b.n	8004aaa <__exponent+0x44>
 8004ace:	2330      	movs	r3, #48	@ 0x30
 8004ad0:	3130      	adds	r1, #48	@ 0x30
 8004ad2:	7083      	strb	r3, [r0, #2]
 8004ad4:	70c1      	strb	r1, [r0, #3]
 8004ad6:	1d03      	adds	r3, r0, #4
 8004ad8:	e7f1      	b.n	8004abe <__exponent+0x58>
	...

08004adc <_printf_float>:
 8004adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae0:	b08d      	sub	sp, #52	@ 0x34
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ae8:	4616      	mov	r6, r2
 8004aea:	461f      	mov	r7, r3
 8004aec:	4605      	mov	r5, r0
 8004aee:	f000 ff09 	bl	8005904 <_localeconv_r>
 8004af2:	6803      	ldr	r3, [r0, #0]
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fb fbc2 	bl	8000280 <strlen>
 8004afc:	2300      	movs	r3, #0
 8004afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b00:	f8d8 3000 	ldr.w	r3, [r8]
 8004b04:	9005      	str	r0, [sp, #20]
 8004b06:	3307      	adds	r3, #7
 8004b08:	f023 0307 	bic.w	r3, r3, #7
 8004b0c:	f103 0208 	add.w	r2, r3, #8
 8004b10:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b14:	f8d4 b000 	ldr.w	fp, [r4]
 8004b18:	f8c8 2000 	str.w	r2, [r8]
 8004b1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b20:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b24:	9307      	str	r3, [sp, #28]
 8004b26:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b32:	4b9c      	ldr	r3, [pc, #624]	@ (8004da4 <_printf_float+0x2c8>)
 8004b34:	f04f 32ff 	mov.w	r2, #4294967295
 8004b38:	f7fc f800 	bl	8000b3c <__aeabi_dcmpun>
 8004b3c:	bb70      	cbnz	r0, 8004b9c <_printf_float+0xc0>
 8004b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b42:	4b98      	ldr	r3, [pc, #608]	@ (8004da4 <_printf_float+0x2c8>)
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295
 8004b48:	f7fb ffda 	bl	8000b00 <__aeabi_dcmple>
 8004b4c:	bb30      	cbnz	r0, 8004b9c <_printf_float+0xc0>
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2300      	movs	r3, #0
 8004b52:	4640      	mov	r0, r8
 8004b54:	4649      	mov	r1, r9
 8004b56:	f7fb ffc9 	bl	8000aec <__aeabi_dcmplt>
 8004b5a:	b110      	cbz	r0, 8004b62 <_printf_float+0x86>
 8004b5c:	232d      	movs	r3, #45	@ 0x2d
 8004b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b62:	4a91      	ldr	r2, [pc, #580]	@ (8004da8 <_printf_float+0x2cc>)
 8004b64:	4b91      	ldr	r3, [pc, #580]	@ (8004dac <_printf_float+0x2d0>)
 8004b66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b6a:	bf94      	ite	ls
 8004b6c:	4690      	movls	r8, r2
 8004b6e:	4698      	movhi	r8, r3
 8004b70:	2303      	movs	r3, #3
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	f02b 0304 	bic.w	r3, fp, #4
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	f04f 0900 	mov.w	r9, #0
 8004b7e:	9700      	str	r7, [sp, #0]
 8004b80:	4633      	mov	r3, r6
 8004b82:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b84:	4621      	mov	r1, r4
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f9d2 	bl	8004f30 <_printf_common>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	f040 808d 	bne.w	8004cac <_printf_float+0x1d0>
 8004b92:	f04f 30ff 	mov.w	r0, #4294967295
 8004b96:	b00d      	add	sp, #52	@ 0x34
 8004b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	f7fb ffca 	bl	8000b3c <__aeabi_dcmpun>
 8004ba8:	b140      	cbz	r0, 8004bbc <_printf_float+0xe0>
 8004baa:	464b      	mov	r3, r9
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bfbc      	itt	lt
 8004bb0:	232d      	movlt	r3, #45	@ 0x2d
 8004bb2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004bb6:	4a7e      	ldr	r2, [pc, #504]	@ (8004db0 <_printf_float+0x2d4>)
 8004bb8:	4b7e      	ldr	r3, [pc, #504]	@ (8004db4 <_printf_float+0x2d8>)
 8004bba:	e7d4      	b.n	8004b66 <_printf_float+0x8a>
 8004bbc:	6863      	ldr	r3, [r4, #4]
 8004bbe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004bc2:	9206      	str	r2, [sp, #24]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	d13b      	bne.n	8004c40 <_printf_float+0x164>
 8004bc8:	2306      	movs	r3, #6
 8004bca:	6063      	str	r3, [r4, #4]
 8004bcc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6022      	str	r2, [r4, #0]
 8004bd4:	9303      	str	r3, [sp, #12]
 8004bd6:	ab0a      	add	r3, sp, #40	@ 0x28
 8004bd8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004bdc:	ab09      	add	r3, sp, #36	@ 0x24
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	6861      	ldr	r1, [r4, #4]
 8004be2:	ec49 8b10 	vmov	d0, r8, r9
 8004be6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004bea:	4628      	mov	r0, r5
 8004bec:	f7ff fed6 	bl	800499c <__cvt>
 8004bf0:	9b06      	ldr	r3, [sp, #24]
 8004bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004bf4:	2b47      	cmp	r3, #71	@ 0x47
 8004bf6:	4680      	mov	r8, r0
 8004bf8:	d129      	bne.n	8004c4e <_printf_float+0x172>
 8004bfa:	1cc8      	adds	r0, r1, #3
 8004bfc:	db02      	blt.n	8004c04 <_printf_float+0x128>
 8004bfe:	6863      	ldr	r3, [r4, #4]
 8004c00:	4299      	cmp	r1, r3
 8004c02:	dd41      	ble.n	8004c88 <_printf_float+0x1ac>
 8004c04:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c08:	fa5f fa8a 	uxtb.w	sl, sl
 8004c0c:	3901      	subs	r1, #1
 8004c0e:	4652      	mov	r2, sl
 8004c10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c14:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c16:	f7ff ff26 	bl	8004a66 <__exponent>
 8004c1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c1c:	1813      	adds	r3, r2, r0
 8004c1e:	2a01      	cmp	r2, #1
 8004c20:	4681      	mov	r9, r0
 8004c22:	6123      	str	r3, [r4, #16]
 8004c24:	dc02      	bgt.n	8004c2c <_printf_float+0x150>
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	07d2      	lsls	r2, r2, #31
 8004c2a:	d501      	bpl.n	8004c30 <_printf_float+0x154>
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	6123      	str	r3, [r4, #16]
 8004c30:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0a2      	beq.n	8004b7e <_printf_float+0xa2>
 8004c38:	232d      	movs	r3, #45	@ 0x2d
 8004c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c3e:	e79e      	b.n	8004b7e <_printf_float+0xa2>
 8004c40:	9a06      	ldr	r2, [sp, #24]
 8004c42:	2a47      	cmp	r2, #71	@ 0x47
 8004c44:	d1c2      	bne.n	8004bcc <_printf_float+0xf0>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1c0      	bne.n	8004bcc <_printf_float+0xf0>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e7bd      	b.n	8004bca <_printf_float+0xee>
 8004c4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c52:	d9db      	bls.n	8004c0c <_printf_float+0x130>
 8004c54:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c58:	d118      	bne.n	8004c8c <_printf_float+0x1b0>
 8004c5a:	2900      	cmp	r1, #0
 8004c5c:	6863      	ldr	r3, [r4, #4]
 8004c5e:	dd0b      	ble.n	8004c78 <_printf_float+0x19c>
 8004c60:	6121      	str	r1, [r4, #16]
 8004c62:	b913      	cbnz	r3, 8004c6a <_printf_float+0x18e>
 8004c64:	6822      	ldr	r2, [r4, #0]
 8004c66:	07d0      	lsls	r0, r2, #31
 8004c68:	d502      	bpl.n	8004c70 <_printf_float+0x194>
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	440b      	add	r3, r1
 8004c6e:	6123      	str	r3, [r4, #16]
 8004c70:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c72:	f04f 0900 	mov.w	r9, #0
 8004c76:	e7db      	b.n	8004c30 <_printf_float+0x154>
 8004c78:	b913      	cbnz	r3, 8004c80 <_printf_float+0x1a4>
 8004c7a:	6822      	ldr	r2, [r4, #0]
 8004c7c:	07d2      	lsls	r2, r2, #31
 8004c7e:	d501      	bpl.n	8004c84 <_printf_float+0x1a8>
 8004c80:	3302      	adds	r3, #2
 8004c82:	e7f4      	b.n	8004c6e <_printf_float+0x192>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e7f2      	b.n	8004c6e <_printf_float+0x192>
 8004c88:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c8e:	4299      	cmp	r1, r3
 8004c90:	db05      	blt.n	8004c9e <_printf_float+0x1c2>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	6121      	str	r1, [r4, #16]
 8004c96:	07d8      	lsls	r0, r3, #31
 8004c98:	d5ea      	bpl.n	8004c70 <_printf_float+0x194>
 8004c9a:	1c4b      	adds	r3, r1, #1
 8004c9c:	e7e7      	b.n	8004c6e <_printf_float+0x192>
 8004c9e:	2900      	cmp	r1, #0
 8004ca0:	bfd4      	ite	le
 8004ca2:	f1c1 0202 	rsble	r2, r1, #2
 8004ca6:	2201      	movgt	r2, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	e7e0      	b.n	8004c6e <_printf_float+0x192>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	055a      	lsls	r2, r3, #21
 8004cb0:	d407      	bmi.n	8004cc2 <_printf_float+0x1e6>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b8      	blx	r7
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d12b      	bne.n	8004d18 <_printf_float+0x23c>
 8004cc0:	e767      	b.n	8004b92 <_printf_float+0xb6>
 8004cc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cc6:	f240 80dd 	bls.w	8004e84 <_printf_float+0x3a8>
 8004cca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f7fb ff01 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d033      	beq.n	8004d42 <_printf_float+0x266>
 8004cda:	4a37      	ldr	r2, [pc, #220]	@ (8004db8 <_printf_float+0x2dc>)
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b8      	blx	r7
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	f43f af54 	beq.w	8004b92 <_printf_float+0xb6>
 8004cea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004cee:	4543      	cmp	r3, r8
 8004cf0:	db02      	blt.n	8004cf8 <_printf_float+0x21c>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	07d8      	lsls	r0, r3, #31
 8004cf6:	d50f      	bpl.n	8004d18 <_printf_float+0x23c>
 8004cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b8      	blx	r7
 8004d02:	3001      	adds	r0, #1
 8004d04:	f43f af45 	beq.w	8004b92 <_printf_float+0xb6>
 8004d08:	f04f 0900 	mov.w	r9, #0
 8004d0c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d10:	f104 0a1a 	add.w	sl, r4, #26
 8004d14:	45c8      	cmp	r8, r9
 8004d16:	dc09      	bgt.n	8004d2c <_printf_float+0x250>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	079b      	lsls	r3, r3, #30
 8004d1c:	f100 8103 	bmi.w	8004f26 <_printf_float+0x44a>
 8004d20:	68e0      	ldr	r0, [r4, #12]
 8004d22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d24:	4298      	cmp	r0, r3
 8004d26:	bfb8      	it	lt
 8004d28:	4618      	movlt	r0, r3
 8004d2a:	e734      	b.n	8004b96 <_printf_float+0xba>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4652      	mov	r2, sl
 8004d30:	4631      	mov	r1, r6
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b8      	blx	r7
 8004d36:	3001      	adds	r0, #1
 8004d38:	f43f af2b 	beq.w	8004b92 <_printf_float+0xb6>
 8004d3c:	f109 0901 	add.w	r9, r9, #1
 8004d40:	e7e8      	b.n	8004d14 <_printf_float+0x238>
 8004d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	dc39      	bgt.n	8004dbc <_printf_float+0x2e0>
 8004d48:	4a1b      	ldr	r2, [pc, #108]	@ (8004db8 <_printf_float+0x2dc>)
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4631      	mov	r1, r6
 8004d4e:	4628      	mov	r0, r5
 8004d50:	47b8      	blx	r7
 8004d52:	3001      	adds	r0, #1
 8004d54:	f43f af1d 	beq.w	8004b92 <_printf_float+0xb6>
 8004d58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d5c:	ea59 0303 	orrs.w	r3, r9, r3
 8004d60:	d102      	bne.n	8004d68 <_printf_float+0x28c>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	07d9      	lsls	r1, r3, #31
 8004d66:	d5d7      	bpl.n	8004d18 <_printf_float+0x23c>
 8004d68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b8      	blx	r7
 8004d72:	3001      	adds	r0, #1
 8004d74:	f43f af0d 	beq.w	8004b92 <_printf_float+0xb6>
 8004d78:	f04f 0a00 	mov.w	sl, #0
 8004d7c:	f104 0b1a 	add.w	fp, r4, #26
 8004d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d82:	425b      	negs	r3, r3
 8004d84:	4553      	cmp	r3, sl
 8004d86:	dc01      	bgt.n	8004d8c <_printf_float+0x2b0>
 8004d88:	464b      	mov	r3, r9
 8004d8a:	e793      	b.n	8004cb4 <_printf_float+0x1d8>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	465a      	mov	r2, fp
 8004d90:	4631      	mov	r1, r6
 8004d92:	4628      	mov	r0, r5
 8004d94:	47b8      	blx	r7
 8004d96:	3001      	adds	r0, #1
 8004d98:	f43f aefb 	beq.w	8004b92 <_printf_float+0xb6>
 8004d9c:	f10a 0a01 	add.w	sl, sl, #1
 8004da0:	e7ee      	b.n	8004d80 <_printf_float+0x2a4>
 8004da2:	bf00      	nop
 8004da4:	7fefffff 	.word	0x7fefffff
 8004da8:	080094e9 	.word	0x080094e9
 8004dac:	080094ed 	.word	0x080094ed
 8004db0:	080094f1 	.word	0x080094f1
 8004db4:	080094f5 	.word	0x080094f5
 8004db8:	080094f9 	.word	0x080094f9
 8004dbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004dc2:	4553      	cmp	r3, sl
 8004dc4:	bfa8      	it	ge
 8004dc6:	4653      	movge	r3, sl
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	4699      	mov	r9, r3
 8004dcc:	dc36      	bgt.n	8004e3c <_printf_float+0x360>
 8004dce:	f04f 0b00 	mov.w	fp, #0
 8004dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dd6:	f104 021a 	add.w	r2, r4, #26
 8004dda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ddc:	9306      	str	r3, [sp, #24]
 8004dde:	eba3 0309 	sub.w	r3, r3, r9
 8004de2:	455b      	cmp	r3, fp
 8004de4:	dc31      	bgt.n	8004e4a <_printf_float+0x36e>
 8004de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004de8:	459a      	cmp	sl, r3
 8004dea:	dc3a      	bgt.n	8004e62 <_printf_float+0x386>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	07da      	lsls	r2, r3, #31
 8004df0:	d437      	bmi.n	8004e62 <_printf_float+0x386>
 8004df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df4:	ebaa 0903 	sub.w	r9, sl, r3
 8004df8:	9b06      	ldr	r3, [sp, #24]
 8004dfa:	ebaa 0303 	sub.w	r3, sl, r3
 8004dfe:	4599      	cmp	r9, r3
 8004e00:	bfa8      	it	ge
 8004e02:	4699      	movge	r9, r3
 8004e04:	f1b9 0f00 	cmp.w	r9, #0
 8004e08:	dc33      	bgt.n	8004e72 <_printf_float+0x396>
 8004e0a:	f04f 0800 	mov.w	r8, #0
 8004e0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e12:	f104 0b1a 	add.w	fp, r4, #26
 8004e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e18:	ebaa 0303 	sub.w	r3, sl, r3
 8004e1c:	eba3 0309 	sub.w	r3, r3, r9
 8004e20:	4543      	cmp	r3, r8
 8004e22:	f77f af79 	ble.w	8004d18 <_printf_float+0x23c>
 8004e26:	2301      	movs	r3, #1
 8004e28:	465a      	mov	r2, fp
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f aeae 	beq.w	8004b92 <_printf_float+0xb6>
 8004e36:	f108 0801 	add.w	r8, r8, #1
 8004e3a:	e7ec      	b.n	8004e16 <_printf_float+0x33a>
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b8      	blx	r7
 8004e44:	3001      	adds	r0, #1
 8004e46:	d1c2      	bne.n	8004dce <_printf_float+0x2f2>
 8004e48:	e6a3      	b.n	8004b92 <_printf_float+0xb6>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	9206      	str	r2, [sp, #24]
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	f43f ae9c 	beq.w	8004b92 <_printf_float+0xb6>
 8004e5a:	9a06      	ldr	r2, [sp, #24]
 8004e5c:	f10b 0b01 	add.w	fp, fp, #1
 8004e60:	e7bb      	b.n	8004dda <_printf_float+0x2fe>
 8004e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e66:	4631      	mov	r1, r6
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b8      	blx	r7
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d1c0      	bne.n	8004df2 <_printf_float+0x316>
 8004e70:	e68f      	b.n	8004b92 <_printf_float+0xb6>
 8004e72:	9a06      	ldr	r2, [sp, #24]
 8004e74:	464b      	mov	r3, r9
 8004e76:	4442      	add	r2, r8
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b8      	blx	r7
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d1c3      	bne.n	8004e0a <_printf_float+0x32e>
 8004e82:	e686      	b.n	8004b92 <_printf_float+0xb6>
 8004e84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e88:	f1ba 0f01 	cmp.w	sl, #1
 8004e8c:	dc01      	bgt.n	8004e92 <_printf_float+0x3b6>
 8004e8e:	07db      	lsls	r3, r3, #31
 8004e90:	d536      	bpl.n	8004f00 <_printf_float+0x424>
 8004e92:	2301      	movs	r3, #1
 8004e94:	4642      	mov	r2, r8
 8004e96:	4631      	mov	r1, r6
 8004e98:	4628      	mov	r0, r5
 8004e9a:	47b8      	blx	r7
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	f43f ae78 	beq.w	8004b92 <_printf_float+0xb6>
 8004ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b8      	blx	r7
 8004eac:	3001      	adds	r0, #1
 8004eae:	f43f ae70 	beq.w	8004b92 <_printf_float+0xb6>
 8004eb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ebe:	f7fb fe0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ec2:	b9c0      	cbnz	r0, 8004ef6 <_printf_float+0x41a>
 8004ec4:	4653      	mov	r3, sl
 8004ec6:	f108 0201 	add.w	r2, r8, #1
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	47b8      	blx	r7
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d10c      	bne.n	8004eee <_printf_float+0x412>
 8004ed4:	e65d      	b.n	8004b92 <_printf_float+0xb6>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	465a      	mov	r2, fp
 8004eda:	4631      	mov	r1, r6
 8004edc:	4628      	mov	r0, r5
 8004ede:	47b8      	blx	r7
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	f43f ae56 	beq.w	8004b92 <_printf_float+0xb6>
 8004ee6:	f108 0801 	add.w	r8, r8, #1
 8004eea:	45d0      	cmp	r8, sl
 8004eec:	dbf3      	blt.n	8004ed6 <_printf_float+0x3fa>
 8004eee:	464b      	mov	r3, r9
 8004ef0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ef4:	e6df      	b.n	8004cb6 <_printf_float+0x1da>
 8004ef6:	f04f 0800 	mov.w	r8, #0
 8004efa:	f104 0b1a 	add.w	fp, r4, #26
 8004efe:	e7f4      	b.n	8004eea <_printf_float+0x40e>
 8004f00:	2301      	movs	r3, #1
 8004f02:	4642      	mov	r2, r8
 8004f04:	e7e1      	b.n	8004eca <_printf_float+0x3ee>
 8004f06:	2301      	movs	r3, #1
 8004f08:	464a      	mov	r2, r9
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f ae3e 	beq.w	8004b92 <_printf_float+0xb6>
 8004f16:	f108 0801 	add.w	r8, r8, #1
 8004f1a:	68e3      	ldr	r3, [r4, #12]
 8004f1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f1e:	1a5b      	subs	r3, r3, r1
 8004f20:	4543      	cmp	r3, r8
 8004f22:	dcf0      	bgt.n	8004f06 <_printf_float+0x42a>
 8004f24:	e6fc      	b.n	8004d20 <_printf_float+0x244>
 8004f26:	f04f 0800 	mov.w	r8, #0
 8004f2a:	f104 0919 	add.w	r9, r4, #25
 8004f2e:	e7f4      	b.n	8004f1a <_printf_float+0x43e>

08004f30 <_printf_common>:
 8004f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	4616      	mov	r6, r2
 8004f36:	4698      	mov	r8, r3
 8004f38:	688a      	ldr	r2, [r1, #8]
 8004f3a:	690b      	ldr	r3, [r1, #16]
 8004f3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f40:	4293      	cmp	r3, r2
 8004f42:	bfb8      	it	lt
 8004f44:	4613      	movlt	r3, r2
 8004f46:	6033      	str	r3, [r6, #0]
 8004f48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	b10a      	cbz	r2, 8004f56 <_printf_common+0x26>
 8004f52:	3301      	adds	r3, #1
 8004f54:	6033      	str	r3, [r6, #0]
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	0699      	lsls	r1, r3, #26
 8004f5a:	bf42      	ittt	mi
 8004f5c:	6833      	ldrmi	r3, [r6, #0]
 8004f5e:	3302      	addmi	r3, #2
 8004f60:	6033      	strmi	r3, [r6, #0]
 8004f62:	6825      	ldr	r5, [r4, #0]
 8004f64:	f015 0506 	ands.w	r5, r5, #6
 8004f68:	d106      	bne.n	8004f78 <_printf_common+0x48>
 8004f6a:	f104 0a19 	add.w	sl, r4, #25
 8004f6e:	68e3      	ldr	r3, [r4, #12]
 8004f70:	6832      	ldr	r2, [r6, #0]
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	42ab      	cmp	r3, r5
 8004f76:	dc26      	bgt.n	8004fc6 <_printf_common+0x96>
 8004f78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f7c:	6822      	ldr	r2, [r4, #0]
 8004f7e:	3b00      	subs	r3, #0
 8004f80:	bf18      	it	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	0692      	lsls	r2, r2, #26
 8004f86:	d42b      	bmi.n	8004fe0 <_printf_common+0xb0>
 8004f88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	4638      	mov	r0, r7
 8004f90:	47c8      	blx	r9
 8004f92:	3001      	adds	r0, #1
 8004f94:	d01e      	beq.n	8004fd4 <_printf_common+0xa4>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	6922      	ldr	r2, [r4, #16]
 8004f9a:	f003 0306 	and.w	r3, r3, #6
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	bf02      	ittt	eq
 8004fa2:	68e5      	ldreq	r5, [r4, #12]
 8004fa4:	6833      	ldreq	r3, [r6, #0]
 8004fa6:	1aed      	subeq	r5, r5, r3
 8004fa8:	68a3      	ldr	r3, [r4, #8]
 8004faa:	bf0c      	ite	eq
 8004fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fb0:	2500      	movne	r5, #0
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	bfc4      	itt	gt
 8004fb6:	1a9b      	subgt	r3, r3, r2
 8004fb8:	18ed      	addgt	r5, r5, r3
 8004fba:	2600      	movs	r6, #0
 8004fbc:	341a      	adds	r4, #26
 8004fbe:	42b5      	cmp	r5, r6
 8004fc0:	d11a      	bne.n	8004ff8 <_printf_common+0xc8>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e008      	b.n	8004fd8 <_printf_common+0xa8>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4652      	mov	r2, sl
 8004fca:	4641      	mov	r1, r8
 8004fcc:	4638      	mov	r0, r7
 8004fce:	47c8      	blx	r9
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d103      	bne.n	8004fdc <_printf_common+0xac>
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fdc:	3501      	adds	r5, #1
 8004fde:	e7c6      	b.n	8004f6e <_printf_common+0x3e>
 8004fe0:	18e1      	adds	r1, r4, r3
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	2030      	movs	r0, #48	@ 0x30
 8004fe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fea:	4422      	add	r2, r4
 8004fec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	e7c7      	b.n	8004f88 <_printf_common+0x58>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	4638      	mov	r0, r7
 8005000:	47c8      	blx	r9
 8005002:	3001      	adds	r0, #1
 8005004:	d0e6      	beq.n	8004fd4 <_printf_common+0xa4>
 8005006:	3601      	adds	r6, #1
 8005008:	e7d9      	b.n	8004fbe <_printf_common+0x8e>
	...

0800500c <_printf_i>:
 800500c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	7e0f      	ldrb	r7, [r1, #24]
 8005012:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005014:	2f78      	cmp	r7, #120	@ 0x78
 8005016:	4691      	mov	r9, r2
 8005018:	4680      	mov	r8, r0
 800501a:	460c      	mov	r4, r1
 800501c:	469a      	mov	sl, r3
 800501e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005022:	d807      	bhi.n	8005034 <_printf_i+0x28>
 8005024:	2f62      	cmp	r7, #98	@ 0x62
 8005026:	d80a      	bhi.n	800503e <_printf_i+0x32>
 8005028:	2f00      	cmp	r7, #0
 800502a:	f000 80d2 	beq.w	80051d2 <_printf_i+0x1c6>
 800502e:	2f58      	cmp	r7, #88	@ 0x58
 8005030:	f000 80b9 	beq.w	80051a6 <_printf_i+0x19a>
 8005034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800503c:	e03a      	b.n	80050b4 <_printf_i+0xa8>
 800503e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005042:	2b15      	cmp	r3, #21
 8005044:	d8f6      	bhi.n	8005034 <_printf_i+0x28>
 8005046:	a101      	add	r1, pc, #4	@ (adr r1, 800504c <_printf_i+0x40>)
 8005048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800504c:	080050a5 	.word	0x080050a5
 8005050:	080050b9 	.word	0x080050b9
 8005054:	08005035 	.word	0x08005035
 8005058:	08005035 	.word	0x08005035
 800505c:	08005035 	.word	0x08005035
 8005060:	08005035 	.word	0x08005035
 8005064:	080050b9 	.word	0x080050b9
 8005068:	08005035 	.word	0x08005035
 800506c:	08005035 	.word	0x08005035
 8005070:	08005035 	.word	0x08005035
 8005074:	08005035 	.word	0x08005035
 8005078:	080051b9 	.word	0x080051b9
 800507c:	080050e3 	.word	0x080050e3
 8005080:	08005173 	.word	0x08005173
 8005084:	08005035 	.word	0x08005035
 8005088:	08005035 	.word	0x08005035
 800508c:	080051db 	.word	0x080051db
 8005090:	08005035 	.word	0x08005035
 8005094:	080050e3 	.word	0x080050e3
 8005098:	08005035 	.word	0x08005035
 800509c:	08005035 	.word	0x08005035
 80050a0:	0800517b 	.word	0x0800517b
 80050a4:	6833      	ldr	r3, [r6, #0]
 80050a6:	1d1a      	adds	r2, r3, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6032      	str	r2, [r6, #0]
 80050ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050b4:	2301      	movs	r3, #1
 80050b6:	e09d      	b.n	80051f4 <_printf_i+0x1e8>
 80050b8:	6833      	ldr	r3, [r6, #0]
 80050ba:	6820      	ldr	r0, [r4, #0]
 80050bc:	1d19      	adds	r1, r3, #4
 80050be:	6031      	str	r1, [r6, #0]
 80050c0:	0606      	lsls	r6, r0, #24
 80050c2:	d501      	bpl.n	80050c8 <_printf_i+0xbc>
 80050c4:	681d      	ldr	r5, [r3, #0]
 80050c6:	e003      	b.n	80050d0 <_printf_i+0xc4>
 80050c8:	0645      	lsls	r5, r0, #25
 80050ca:	d5fb      	bpl.n	80050c4 <_printf_i+0xb8>
 80050cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050d0:	2d00      	cmp	r5, #0
 80050d2:	da03      	bge.n	80050dc <_printf_i+0xd0>
 80050d4:	232d      	movs	r3, #45	@ 0x2d
 80050d6:	426d      	negs	r5, r5
 80050d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050dc:	4859      	ldr	r0, [pc, #356]	@ (8005244 <_printf_i+0x238>)
 80050de:	230a      	movs	r3, #10
 80050e0:	e011      	b.n	8005106 <_printf_i+0xfa>
 80050e2:	6821      	ldr	r1, [r4, #0]
 80050e4:	6833      	ldr	r3, [r6, #0]
 80050e6:	0608      	lsls	r0, r1, #24
 80050e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80050ec:	d402      	bmi.n	80050f4 <_printf_i+0xe8>
 80050ee:	0649      	lsls	r1, r1, #25
 80050f0:	bf48      	it	mi
 80050f2:	b2ad      	uxthmi	r5, r5
 80050f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80050f6:	4853      	ldr	r0, [pc, #332]	@ (8005244 <_printf_i+0x238>)
 80050f8:	6033      	str	r3, [r6, #0]
 80050fa:	bf14      	ite	ne
 80050fc:	230a      	movne	r3, #10
 80050fe:	2308      	moveq	r3, #8
 8005100:	2100      	movs	r1, #0
 8005102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005106:	6866      	ldr	r6, [r4, #4]
 8005108:	60a6      	str	r6, [r4, #8]
 800510a:	2e00      	cmp	r6, #0
 800510c:	bfa2      	ittt	ge
 800510e:	6821      	ldrge	r1, [r4, #0]
 8005110:	f021 0104 	bicge.w	r1, r1, #4
 8005114:	6021      	strge	r1, [r4, #0]
 8005116:	b90d      	cbnz	r5, 800511c <_printf_i+0x110>
 8005118:	2e00      	cmp	r6, #0
 800511a:	d04b      	beq.n	80051b4 <_printf_i+0x1a8>
 800511c:	4616      	mov	r6, r2
 800511e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005122:	fb03 5711 	mls	r7, r3, r1, r5
 8005126:	5dc7      	ldrb	r7, [r0, r7]
 8005128:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800512c:	462f      	mov	r7, r5
 800512e:	42bb      	cmp	r3, r7
 8005130:	460d      	mov	r5, r1
 8005132:	d9f4      	bls.n	800511e <_printf_i+0x112>
 8005134:	2b08      	cmp	r3, #8
 8005136:	d10b      	bne.n	8005150 <_printf_i+0x144>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	07df      	lsls	r7, r3, #31
 800513c:	d508      	bpl.n	8005150 <_printf_i+0x144>
 800513e:	6923      	ldr	r3, [r4, #16]
 8005140:	6861      	ldr	r1, [r4, #4]
 8005142:	4299      	cmp	r1, r3
 8005144:	bfde      	ittt	le
 8005146:	2330      	movle	r3, #48	@ 0x30
 8005148:	f806 3c01 	strble.w	r3, [r6, #-1]
 800514c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005150:	1b92      	subs	r2, r2, r6
 8005152:	6122      	str	r2, [r4, #16]
 8005154:	f8cd a000 	str.w	sl, [sp]
 8005158:	464b      	mov	r3, r9
 800515a:	aa03      	add	r2, sp, #12
 800515c:	4621      	mov	r1, r4
 800515e:	4640      	mov	r0, r8
 8005160:	f7ff fee6 	bl	8004f30 <_printf_common>
 8005164:	3001      	adds	r0, #1
 8005166:	d14a      	bne.n	80051fe <_printf_i+0x1f2>
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	b004      	add	sp, #16
 800516e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	f043 0320 	orr.w	r3, r3, #32
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	4833      	ldr	r0, [pc, #204]	@ (8005248 <_printf_i+0x23c>)
 800517c:	2778      	movs	r7, #120	@ 0x78
 800517e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	6831      	ldr	r1, [r6, #0]
 8005186:	061f      	lsls	r7, r3, #24
 8005188:	f851 5b04 	ldr.w	r5, [r1], #4
 800518c:	d402      	bmi.n	8005194 <_printf_i+0x188>
 800518e:	065f      	lsls	r7, r3, #25
 8005190:	bf48      	it	mi
 8005192:	b2ad      	uxthmi	r5, r5
 8005194:	6031      	str	r1, [r6, #0]
 8005196:	07d9      	lsls	r1, r3, #31
 8005198:	bf44      	itt	mi
 800519a:	f043 0320 	orrmi.w	r3, r3, #32
 800519e:	6023      	strmi	r3, [r4, #0]
 80051a0:	b11d      	cbz	r5, 80051aa <_printf_i+0x19e>
 80051a2:	2310      	movs	r3, #16
 80051a4:	e7ac      	b.n	8005100 <_printf_i+0xf4>
 80051a6:	4827      	ldr	r0, [pc, #156]	@ (8005244 <_printf_i+0x238>)
 80051a8:	e7e9      	b.n	800517e <_printf_i+0x172>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	f023 0320 	bic.w	r3, r3, #32
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	e7f6      	b.n	80051a2 <_printf_i+0x196>
 80051b4:	4616      	mov	r6, r2
 80051b6:	e7bd      	b.n	8005134 <_printf_i+0x128>
 80051b8:	6833      	ldr	r3, [r6, #0]
 80051ba:	6825      	ldr	r5, [r4, #0]
 80051bc:	6961      	ldr	r1, [r4, #20]
 80051be:	1d18      	adds	r0, r3, #4
 80051c0:	6030      	str	r0, [r6, #0]
 80051c2:	062e      	lsls	r6, r5, #24
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	d501      	bpl.n	80051cc <_printf_i+0x1c0>
 80051c8:	6019      	str	r1, [r3, #0]
 80051ca:	e002      	b.n	80051d2 <_printf_i+0x1c6>
 80051cc:	0668      	lsls	r0, r5, #25
 80051ce:	d5fb      	bpl.n	80051c8 <_printf_i+0x1bc>
 80051d0:	8019      	strh	r1, [r3, #0]
 80051d2:	2300      	movs	r3, #0
 80051d4:	6123      	str	r3, [r4, #16]
 80051d6:	4616      	mov	r6, r2
 80051d8:	e7bc      	b.n	8005154 <_printf_i+0x148>
 80051da:	6833      	ldr	r3, [r6, #0]
 80051dc:	1d1a      	adds	r2, r3, #4
 80051de:	6032      	str	r2, [r6, #0]
 80051e0:	681e      	ldr	r6, [r3, #0]
 80051e2:	6862      	ldr	r2, [r4, #4]
 80051e4:	2100      	movs	r1, #0
 80051e6:	4630      	mov	r0, r6
 80051e8:	f7fa fffa 	bl	80001e0 <memchr>
 80051ec:	b108      	cbz	r0, 80051f2 <_printf_i+0x1e6>
 80051ee:	1b80      	subs	r0, r0, r6
 80051f0:	6060      	str	r0, [r4, #4]
 80051f2:	6863      	ldr	r3, [r4, #4]
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	2300      	movs	r3, #0
 80051f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051fc:	e7aa      	b.n	8005154 <_printf_i+0x148>
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	4632      	mov	r2, r6
 8005202:	4649      	mov	r1, r9
 8005204:	4640      	mov	r0, r8
 8005206:	47d0      	blx	sl
 8005208:	3001      	adds	r0, #1
 800520a:	d0ad      	beq.n	8005168 <_printf_i+0x15c>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	079b      	lsls	r3, r3, #30
 8005210:	d413      	bmi.n	800523a <_printf_i+0x22e>
 8005212:	68e0      	ldr	r0, [r4, #12]
 8005214:	9b03      	ldr	r3, [sp, #12]
 8005216:	4298      	cmp	r0, r3
 8005218:	bfb8      	it	lt
 800521a:	4618      	movlt	r0, r3
 800521c:	e7a6      	b.n	800516c <_printf_i+0x160>
 800521e:	2301      	movs	r3, #1
 8005220:	4632      	mov	r2, r6
 8005222:	4649      	mov	r1, r9
 8005224:	4640      	mov	r0, r8
 8005226:	47d0      	blx	sl
 8005228:	3001      	adds	r0, #1
 800522a:	d09d      	beq.n	8005168 <_printf_i+0x15c>
 800522c:	3501      	adds	r5, #1
 800522e:	68e3      	ldr	r3, [r4, #12]
 8005230:	9903      	ldr	r1, [sp, #12]
 8005232:	1a5b      	subs	r3, r3, r1
 8005234:	42ab      	cmp	r3, r5
 8005236:	dcf2      	bgt.n	800521e <_printf_i+0x212>
 8005238:	e7eb      	b.n	8005212 <_printf_i+0x206>
 800523a:	2500      	movs	r5, #0
 800523c:	f104 0619 	add.w	r6, r4, #25
 8005240:	e7f5      	b.n	800522e <_printf_i+0x222>
 8005242:	bf00      	nop
 8005244:	080094fb 	.word	0x080094fb
 8005248:	0800950c 	.word	0x0800950c

0800524c <_scanf_float>:
 800524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005250:	b087      	sub	sp, #28
 8005252:	4617      	mov	r7, r2
 8005254:	9303      	str	r3, [sp, #12]
 8005256:	688b      	ldr	r3, [r1, #8]
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800525e:	bf81      	itttt	hi
 8005260:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005264:	eb03 0b05 	addhi.w	fp, r3, r5
 8005268:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800526c:	608b      	strhi	r3, [r1, #8]
 800526e:	680b      	ldr	r3, [r1, #0]
 8005270:	460a      	mov	r2, r1
 8005272:	f04f 0500 	mov.w	r5, #0
 8005276:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800527a:	f842 3b1c 	str.w	r3, [r2], #28
 800527e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005282:	4680      	mov	r8, r0
 8005284:	460c      	mov	r4, r1
 8005286:	bf98      	it	ls
 8005288:	f04f 0b00 	movls.w	fp, #0
 800528c:	9201      	str	r2, [sp, #4]
 800528e:	4616      	mov	r6, r2
 8005290:	46aa      	mov	sl, r5
 8005292:	46a9      	mov	r9, r5
 8005294:	9502      	str	r5, [sp, #8]
 8005296:	68a2      	ldr	r2, [r4, #8]
 8005298:	b152      	cbz	r2, 80052b0 <_scanf_float+0x64>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b4e      	cmp	r3, #78	@ 0x4e
 80052a0:	d864      	bhi.n	800536c <_scanf_float+0x120>
 80052a2:	2b40      	cmp	r3, #64	@ 0x40
 80052a4:	d83c      	bhi.n	8005320 <_scanf_float+0xd4>
 80052a6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80052aa:	b2c8      	uxtb	r0, r1
 80052ac:	280e      	cmp	r0, #14
 80052ae:	d93a      	bls.n	8005326 <_scanf_float+0xda>
 80052b0:	f1b9 0f00 	cmp.w	r9, #0
 80052b4:	d003      	beq.n	80052be <_scanf_float+0x72>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052c2:	f1ba 0f01 	cmp.w	sl, #1
 80052c6:	f200 8117 	bhi.w	80054f8 <_scanf_float+0x2ac>
 80052ca:	9b01      	ldr	r3, [sp, #4]
 80052cc:	429e      	cmp	r6, r3
 80052ce:	f200 8108 	bhi.w	80054e2 <_scanf_float+0x296>
 80052d2:	2001      	movs	r0, #1
 80052d4:	b007      	add	sp, #28
 80052d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052da:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80052de:	2a0d      	cmp	r2, #13
 80052e0:	d8e6      	bhi.n	80052b0 <_scanf_float+0x64>
 80052e2:	a101      	add	r1, pc, #4	@ (adr r1, 80052e8 <_scanf_float+0x9c>)
 80052e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80052e8:	0800542f 	.word	0x0800542f
 80052ec:	080052b1 	.word	0x080052b1
 80052f0:	080052b1 	.word	0x080052b1
 80052f4:	080052b1 	.word	0x080052b1
 80052f8:	0800548f 	.word	0x0800548f
 80052fc:	08005467 	.word	0x08005467
 8005300:	080052b1 	.word	0x080052b1
 8005304:	080052b1 	.word	0x080052b1
 8005308:	0800543d 	.word	0x0800543d
 800530c:	080052b1 	.word	0x080052b1
 8005310:	080052b1 	.word	0x080052b1
 8005314:	080052b1 	.word	0x080052b1
 8005318:	080052b1 	.word	0x080052b1
 800531c:	080053f5 	.word	0x080053f5
 8005320:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005324:	e7db      	b.n	80052de <_scanf_float+0x92>
 8005326:	290e      	cmp	r1, #14
 8005328:	d8c2      	bhi.n	80052b0 <_scanf_float+0x64>
 800532a:	a001      	add	r0, pc, #4	@ (adr r0, 8005330 <_scanf_float+0xe4>)
 800532c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005330:	080053e5 	.word	0x080053e5
 8005334:	080052b1 	.word	0x080052b1
 8005338:	080053e5 	.word	0x080053e5
 800533c:	0800547b 	.word	0x0800547b
 8005340:	080052b1 	.word	0x080052b1
 8005344:	0800538d 	.word	0x0800538d
 8005348:	080053cb 	.word	0x080053cb
 800534c:	080053cb 	.word	0x080053cb
 8005350:	080053cb 	.word	0x080053cb
 8005354:	080053cb 	.word	0x080053cb
 8005358:	080053cb 	.word	0x080053cb
 800535c:	080053cb 	.word	0x080053cb
 8005360:	080053cb 	.word	0x080053cb
 8005364:	080053cb 	.word	0x080053cb
 8005368:	080053cb 	.word	0x080053cb
 800536c:	2b6e      	cmp	r3, #110	@ 0x6e
 800536e:	d809      	bhi.n	8005384 <_scanf_float+0x138>
 8005370:	2b60      	cmp	r3, #96	@ 0x60
 8005372:	d8b2      	bhi.n	80052da <_scanf_float+0x8e>
 8005374:	2b54      	cmp	r3, #84	@ 0x54
 8005376:	d07b      	beq.n	8005470 <_scanf_float+0x224>
 8005378:	2b59      	cmp	r3, #89	@ 0x59
 800537a:	d199      	bne.n	80052b0 <_scanf_float+0x64>
 800537c:	2d07      	cmp	r5, #7
 800537e:	d197      	bne.n	80052b0 <_scanf_float+0x64>
 8005380:	2508      	movs	r5, #8
 8005382:	e02c      	b.n	80053de <_scanf_float+0x192>
 8005384:	2b74      	cmp	r3, #116	@ 0x74
 8005386:	d073      	beq.n	8005470 <_scanf_float+0x224>
 8005388:	2b79      	cmp	r3, #121	@ 0x79
 800538a:	e7f6      	b.n	800537a <_scanf_float+0x12e>
 800538c:	6821      	ldr	r1, [r4, #0]
 800538e:	05c8      	lsls	r0, r1, #23
 8005390:	d51b      	bpl.n	80053ca <_scanf_float+0x17e>
 8005392:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005396:	6021      	str	r1, [r4, #0]
 8005398:	f109 0901 	add.w	r9, r9, #1
 800539c:	f1bb 0f00 	cmp.w	fp, #0
 80053a0:	d003      	beq.n	80053aa <_scanf_float+0x15e>
 80053a2:	3201      	adds	r2, #1
 80053a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053a8:	60a2      	str	r2, [r4, #8]
 80053aa:	68a3      	ldr	r3, [r4, #8]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	60a3      	str	r3, [r4, #8]
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	3301      	adds	r3, #1
 80053b4:	6123      	str	r3, [r4, #16]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	f340 8087 	ble.w	80054d0 <_scanf_float+0x284>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	e765      	b.n	8005296 <_scanf_float+0x4a>
 80053ca:	eb1a 0105 	adds.w	r1, sl, r5
 80053ce:	f47f af6f 	bne.w	80052b0 <_scanf_float+0x64>
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80053d8:	6022      	str	r2, [r4, #0]
 80053da:	460d      	mov	r5, r1
 80053dc:	468a      	mov	sl, r1
 80053de:	f806 3b01 	strb.w	r3, [r6], #1
 80053e2:	e7e2      	b.n	80053aa <_scanf_float+0x15e>
 80053e4:	6822      	ldr	r2, [r4, #0]
 80053e6:	0610      	lsls	r0, r2, #24
 80053e8:	f57f af62 	bpl.w	80052b0 <_scanf_float+0x64>
 80053ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053f0:	6022      	str	r2, [r4, #0]
 80053f2:	e7f4      	b.n	80053de <_scanf_float+0x192>
 80053f4:	f1ba 0f00 	cmp.w	sl, #0
 80053f8:	d10e      	bne.n	8005418 <_scanf_float+0x1cc>
 80053fa:	f1b9 0f00 	cmp.w	r9, #0
 80053fe:	d10e      	bne.n	800541e <_scanf_float+0x1d2>
 8005400:	6822      	ldr	r2, [r4, #0]
 8005402:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005406:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800540a:	d108      	bne.n	800541e <_scanf_float+0x1d2>
 800540c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005410:	6022      	str	r2, [r4, #0]
 8005412:	f04f 0a01 	mov.w	sl, #1
 8005416:	e7e2      	b.n	80053de <_scanf_float+0x192>
 8005418:	f1ba 0f02 	cmp.w	sl, #2
 800541c:	d055      	beq.n	80054ca <_scanf_float+0x27e>
 800541e:	2d01      	cmp	r5, #1
 8005420:	d002      	beq.n	8005428 <_scanf_float+0x1dc>
 8005422:	2d04      	cmp	r5, #4
 8005424:	f47f af44 	bne.w	80052b0 <_scanf_float+0x64>
 8005428:	3501      	adds	r5, #1
 800542a:	b2ed      	uxtb	r5, r5
 800542c:	e7d7      	b.n	80053de <_scanf_float+0x192>
 800542e:	f1ba 0f01 	cmp.w	sl, #1
 8005432:	f47f af3d 	bne.w	80052b0 <_scanf_float+0x64>
 8005436:	f04f 0a02 	mov.w	sl, #2
 800543a:	e7d0      	b.n	80053de <_scanf_float+0x192>
 800543c:	b97d      	cbnz	r5, 800545e <_scanf_float+0x212>
 800543e:	f1b9 0f00 	cmp.w	r9, #0
 8005442:	f47f af38 	bne.w	80052b6 <_scanf_float+0x6a>
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800544c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005450:	f040 8108 	bne.w	8005664 <_scanf_float+0x418>
 8005454:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005458:	6022      	str	r2, [r4, #0]
 800545a:	2501      	movs	r5, #1
 800545c:	e7bf      	b.n	80053de <_scanf_float+0x192>
 800545e:	2d03      	cmp	r5, #3
 8005460:	d0e2      	beq.n	8005428 <_scanf_float+0x1dc>
 8005462:	2d05      	cmp	r5, #5
 8005464:	e7de      	b.n	8005424 <_scanf_float+0x1d8>
 8005466:	2d02      	cmp	r5, #2
 8005468:	f47f af22 	bne.w	80052b0 <_scanf_float+0x64>
 800546c:	2503      	movs	r5, #3
 800546e:	e7b6      	b.n	80053de <_scanf_float+0x192>
 8005470:	2d06      	cmp	r5, #6
 8005472:	f47f af1d 	bne.w	80052b0 <_scanf_float+0x64>
 8005476:	2507      	movs	r5, #7
 8005478:	e7b1      	b.n	80053de <_scanf_float+0x192>
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	0591      	lsls	r1, r2, #22
 800547e:	f57f af17 	bpl.w	80052b0 <_scanf_float+0x64>
 8005482:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005486:	6022      	str	r2, [r4, #0]
 8005488:	f8cd 9008 	str.w	r9, [sp, #8]
 800548c:	e7a7      	b.n	80053de <_scanf_float+0x192>
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005494:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005498:	d006      	beq.n	80054a8 <_scanf_float+0x25c>
 800549a:	0550      	lsls	r0, r2, #21
 800549c:	f57f af08 	bpl.w	80052b0 <_scanf_float+0x64>
 80054a0:	f1b9 0f00 	cmp.w	r9, #0
 80054a4:	f000 80de 	beq.w	8005664 <_scanf_float+0x418>
 80054a8:	0591      	lsls	r1, r2, #22
 80054aa:	bf58      	it	pl
 80054ac:	9902      	ldrpl	r1, [sp, #8]
 80054ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80054b2:	bf58      	it	pl
 80054b4:	eba9 0101 	subpl.w	r1, r9, r1
 80054b8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80054bc:	bf58      	it	pl
 80054be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80054c2:	6022      	str	r2, [r4, #0]
 80054c4:	f04f 0900 	mov.w	r9, #0
 80054c8:	e789      	b.n	80053de <_scanf_float+0x192>
 80054ca:	f04f 0a03 	mov.w	sl, #3
 80054ce:	e786      	b.n	80053de <_scanf_float+0x192>
 80054d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80054d4:	4639      	mov	r1, r7
 80054d6:	4640      	mov	r0, r8
 80054d8:	4798      	blx	r3
 80054da:	2800      	cmp	r0, #0
 80054dc:	f43f aedb 	beq.w	8005296 <_scanf_float+0x4a>
 80054e0:	e6e6      	b.n	80052b0 <_scanf_float+0x64>
 80054e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054ea:	463a      	mov	r2, r7
 80054ec:	4640      	mov	r0, r8
 80054ee:	4798      	blx	r3
 80054f0:	6923      	ldr	r3, [r4, #16]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	e6e8      	b.n	80052ca <_scanf_float+0x7e>
 80054f8:	1e6b      	subs	r3, r5, #1
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	d824      	bhi.n	8005548 <_scanf_float+0x2fc>
 80054fe:	2d02      	cmp	r5, #2
 8005500:	d836      	bhi.n	8005570 <_scanf_float+0x324>
 8005502:	9b01      	ldr	r3, [sp, #4]
 8005504:	429e      	cmp	r6, r3
 8005506:	f67f aee4 	bls.w	80052d2 <_scanf_float+0x86>
 800550a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800550e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005512:	463a      	mov	r2, r7
 8005514:	4640      	mov	r0, r8
 8005516:	4798      	blx	r3
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	3b01      	subs	r3, #1
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	e7f0      	b.n	8005502 <_scanf_float+0x2b6>
 8005520:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005524:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005528:	463a      	mov	r2, r7
 800552a:	4640      	mov	r0, r8
 800552c:	4798      	blx	r3
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	3b01      	subs	r3, #1
 8005532:	6123      	str	r3, [r4, #16]
 8005534:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005538:	fa5f fa8a 	uxtb.w	sl, sl
 800553c:	f1ba 0f02 	cmp.w	sl, #2
 8005540:	d1ee      	bne.n	8005520 <_scanf_float+0x2d4>
 8005542:	3d03      	subs	r5, #3
 8005544:	b2ed      	uxtb	r5, r5
 8005546:	1b76      	subs	r6, r6, r5
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	05da      	lsls	r2, r3, #23
 800554c:	d530      	bpl.n	80055b0 <_scanf_float+0x364>
 800554e:	055b      	lsls	r3, r3, #21
 8005550:	d511      	bpl.n	8005576 <_scanf_float+0x32a>
 8005552:	9b01      	ldr	r3, [sp, #4]
 8005554:	429e      	cmp	r6, r3
 8005556:	f67f aebc 	bls.w	80052d2 <_scanf_float+0x86>
 800555a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800555e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005562:	463a      	mov	r2, r7
 8005564:	4640      	mov	r0, r8
 8005566:	4798      	blx	r3
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	3b01      	subs	r3, #1
 800556c:	6123      	str	r3, [r4, #16]
 800556e:	e7f0      	b.n	8005552 <_scanf_float+0x306>
 8005570:	46aa      	mov	sl, r5
 8005572:	46b3      	mov	fp, r6
 8005574:	e7de      	b.n	8005534 <_scanf_float+0x2e8>
 8005576:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	2965      	cmp	r1, #101	@ 0x65
 800557e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005582:	f106 35ff 	add.w	r5, r6, #4294967295
 8005586:	6123      	str	r3, [r4, #16]
 8005588:	d00c      	beq.n	80055a4 <_scanf_float+0x358>
 800558a:	2945      	cmp	r1, #69	@ 0x45
 800558c:	d00a      	beq.n	80055a4 <_scanf_float+0x358>
 800558e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005592:	463a      	mov	r2, r7
 8005594:	4640      	mov	r0, r8
 8005596:	4798      	blx	r3
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800559e:	3b01      	subs	r3, #1
 80055a0:	1eb5      	subs	r5, r6, #2
 80055a2:	6123      	str	r3, [r4, #16]
 80055a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055a8:	463a      	mov	r2, r7
 80055aa:	4640      	mov	r0, r8
 80055ac:	4798      	blx	r3
 80055ae:	462e      	mov	r6, r5
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	f012 0210 	ands.w	r2, r2, #16
 80055b6:	d001      	beq.n	80055bc <_scanf_float+0x370>
 80055b8:	2000      	movs	r0, #0
 80055ba:	e68b      	b.n	80052d4 <_scanf_float+0x88>
 80055bc:	7032      	strb	r2, [r6, #0]
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80055c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c8:	d11c      	bne.n	8005604 <_scanf_float+0x3b8>
 80055ca:	9b02      	ldr	r3, [sp, #8]
 80055cc:	454b      	cmp	r3, r9
 80055ce:	eba3 0209 	sub.w	r2, r3, r9
 80055d2:	d123      	bne.n	800561c <_scanf_float+0x3d0>
 80055d4:	9901      	ldr	r1, [sp, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	4640      	mov	r0, r8
 80055da:	f002 fc11 	bl	8007e00 <_strtod_r>
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	6821      	ldr	r1, [r4, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f011 0f02 	tst.w	r1, #2
 80055e8:	ec57 6b10 	vmov	r6, r7, d0
 80055ec:	f103 0204 	add.w	r2, r3, #4
 80055f0:	d01f      	beq.n	8005632 <_scanf_float+0x3e6>
 80055f2:	9903      	ldr	r1, [sp, #12]
 80055f4:	600a      	str	r2, [r1, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	e9c3 6700 	strd	r6, r7, [r3]
 80055fc:	68e3      	ldr	r3, [r4, #12]
 80055fe:	3301      	adds	r3, #1
 8005600:	60e3      	str	r3, [r4, #12]
 8005602:	e7d9      	b.n	80055b8 <_scanf_float+0x36c>
 8005604:	9b04      	ldr	r3, [sp, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0e4      	beq.n	80055d4 <_scanf_float+0x388>
 800560a:	9905      	ldr	r1, [sp, #20]
 800560c:	230a      	movs	r3, #10
 800560e:	3101      	adds	r1, #1
 8005610:	4640      	mov	r0, r8
 8005612:	f7ff f9c1 	bl	8004998 <_strtol_r>
 8005616:	9b04      	ldr	r3, [sp, #16]
 8005618:	9e05      	ldr	r6, [sp, #20]
 800561a:	1ac2      	subs	r2, r0, r3
 800561c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005620:	429e      	cmp	r6, r3
 8005622:	bf28      	it	cs
 8005624:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005628:	4910      	ldr	r1, [pc, #64]	@ (800566c <_scanf_float+0x420>)
 800562a:	4630      	mov	r0, r6
 800562c:	f000 f8fe 	bl	800582c <siprintf>
 8005630:	e7d0      	b.n	80055d4 <_scanf_float+0x388>
 8005632:	f011 0f04 	tst.w	r1, #4
 8005636:	9903      	ldr	r1, [sp, #12]
 8005638:	600a      	str	r2, [r1, #0]
 800563a:	d1dc      	bne.n	80055f6 <_scanf_float+0x3aa>
 800563c:	681d      	ldr	r5, [r3, #0]
 800563e:	4632      	mov	r2, r6
 8005640:	463b      	mov	r3, r7
 8005642:	4630      	mov	r0, r6
 8005644:	4639      	mov	r1, r7
 8005646:	f7fb fa79 	bl	8000b3c <__aeabi_dcmpun>
 800564a:	b128      	cbz	r0, 8005658 <_scanf_float+0x40c>
 800564c:	4808      	ldr	r0, [pc, #32]	@ (8005670 <_scanf_float+0x424>)
 800564e:	f000 f9d1 	bl	80059f4 <nanf>
 8005652:	ed85 0a00 	vstr	s0, [r5]
 8005656:	e7d1      	b.n	80055fc <_scanf_float+0x3b0>
 8005658:	4630      	mov	r0, r6
 800565a:	4639      	mov	r1, r7
 800565c:	f7fb facc 	bl	8000bf8 <__aeabi_d2f>
 8005660:	6028      	str	r0, [r5, #0]
 8005662:	e7cb      	b.n	80055fc <_scanf_float+0x3b0>
 8005664:	f04f 0900 	mov.w	r9, #0
 8005668:	e629      	b.n	80052be <_scanf_float+0x72>
 800566a:	bf00      	nop
 800566c:	0800951d 	.word	0x0800951d
 8005670:	080097b4 	.word	0x080097b4

08005674 <std>:
 8005674:	2300      	movs	r3, #0
 8005676:	b510      	push	{r4, lr}
 8005678:	4604      	mov	r4, r0
 800567a:	e9c0 3300 	strd	r3, r3, [r0]
 800567e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005682:	6083      	str	r3, [r0, #8]
 8005684:	8181      	strh	r1, [r0, #12]
 8005686:	6643      	str	r3, [r0, #100]	@ 0x64
 8005688:	81c2      	strh	r2, [r0, #14]
 800568a:	6183      	str	r3, [r0, #24]
 800568c:	4619      	mov	r1, r3
 800568e:	2208      	movs	r2, #8
 8005690:	305c      	adds	r0, #92	@ 0x5c
 8005692:	f000 f92e 	bl	80058f2 <memset>
 8005696:	4b0d      	ldr	r3, [pc, #52]	@ (80056cc <std+0x58>)
 8005698:	6263      	str	r3, [r4, #36]	@ 0x24
 800569a:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <std+0x5c>)
 800569c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800569e:	4b0d      	ldr	r3, [pc, #52]	@ (80056d4 <std+0x60>)
 80056a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <std+0x64>)
 80056a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <std+0x68>)
 80056a8:	6224      	str	r4, [r4, #32]
 80056aa:	429c      	cmp	r4, r3
 80056ac:	d006      	beq.n	80056bc <std+0x48>
 80056ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056b2:	4294      	cmp	r4, r2
 80056b4:	d002      	beq.n	80056bc <std+0x48>
 80056b6:	33d0      	adds	r3, #208	@ 0xd0
 80056b8:	429c      	cmp	r4, r3
 80056ba:	d105      	bne.n	80056c8 <std+0x54>
 80056bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c4:	f000 b992 	b.w	80059ec <__retarget_lock_init_recursive>
 80056c8:	bd10      	pop	{r4, pc}
 80056ca:	bf00      	nop
 80056cc:	0800586d 	.word	0x0800586d
 80056d0:	0800588f 	.word	0x0800588f
 80056d4:	080058c7 	.word	0x080058c7
 80056d8:	080058eb 	.word	0x080058eb
 80056dc:	200009b0 	.word	0x200009b0

080056e0 <stdio_exit_handler>:
 80056e0:	4a02      	ldr	r2, [pc, #8]	@ (80056ec <stdio_exit_handler+0xc>)
 80056e2:	4903      	ldr	r1, [pc, #12]	@ (80056f0 <stdio_exit_handler+0x10>)
 80056e4:	4803      	ldr	r0, [pc, #12]	@ (80056f4 <stdio_exit_handler+0x14>)
 80056e6:	f000 b869 	b.w	80057bc <_fwalk_sglue>
 80056ea:	bf00      	nop
 80056ec:	20000010 	.word	0x20000010
 80056f0:	08008449 	.word	0x08008449
 80056f4:	20000020 	.word	0x20000020

080056f8 <cleanup_stdio>:
 80056f8:	6841      	ldr	r1, [r0, #4]
 80056fa:	4b0c      	ldr	r3, [pc, #48]	@ (800572c <cleanup_stdio+0x34>)
 80056fc:	4299      	cmp	r1, r3
 80056fe:	b510      	push	{r4, lr}
 8005700:	4604      	mov	r4, r0
 8005702:	d001      	beq.n	8005708 <cleanup_stdio+0x10>
 8005704:	f002 fea0 	bl	8008448 <_fflush_r>
 8005708:	68a1      	ldr	r1, [r4, #8]
 800570a:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <cleanup_stdio+0x38>)
 800570c:	4299      	cmp	r1, r3
 800570e:	d002      	beq.n	8005716 <cleanup_stdio+0x1e>
 8005710:	4620      	mov	r0, r4
 8005712:	f002 fe99 	bl	8008448 <_fflush_r>
 8005716:	68e1      	ldr	r1, [r4, #12]
 8005718:	4b06      	ldr	r3, [pc, #24]	@ (8005734 <cleanup_stdio+0x3c>)
 800571a:	4299      	cmp	r1, r3
 800571c:	d004      	beq.n	8005728 <cleanup_stdio+0x30>
 800571e:	4620      	mov	r0, r4
 8005720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005724:	f002 be90 	b.w	8008448 <_fflush_r>
 8005728:	bd10      	pop	{r4, pc}
 800572a:	bf00      	nop
 800572c:	200009b0 	.word	0x200009b0
 8005730:	20000a18 	.word	0x20000a18
 8005734:	20000a80 	.word	0x20000a80

08005738 <global_stdio_init.part.0>:
 8005738:	b510      	push	{r4, lr}
 800573a:	4b0b      	ldr	r3, [pc, #44]	@ (8005768 <global_stdio_init.part.0+0x30>)
 800573c:	4c0b      	ldr	r4, [pc, #44]	@ (800576c <global_stdio_init.part.0+0x34>)
 800573e:	4a0c      	ldr	r2, [pc, #48]	@ (8005770 <global_stdio_init.part.0+0x38>)
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	4620      	mov	r0, r4
 8005744:	2200      	movs	r2, #0
 8005746:	2104      	movs	r1, #4
 8005748:	f7ff ff94 	bl	8005674 <std>
 800574c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005750:	2201      	movs	r2, #1
 8005752:	2109      	movs	r1, #9
 8005754:	f7ff ff8e 	bl	8005674 <std>
 8005758:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800575c:	2202      	movs	r2, #2
 800575e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005762:	2112      	movs	r1, #18
 8005764:	f7ff bf86 	b.w	8005674 <std>
 8005768:	20000ae8 	.word	0x20000ae8
 800576c:	200009b0 	.word	0x200009b0
 8005770:	080056e1 	.word	0x080056e1

08005774 <__sfp_lock_acquire>:
 8005774:	4801      	ldr	r0, [pc, #4]	@ (800577c <__sfp_lock_acquire+0x8>)
 8005776:	f000 b93a 	b.w	80059ee <__retarget_lock_acquire_recursive>
 800577a:	bf00      	nop
 800577c:	20000af1 	.word	0x20000af1

08005780 <__sfp_lock_release>:
 8005780:	4801      	ldr	r0, [pc, #4]	@ (8005788 <__sfp_lock_release+0x8>)
 8005782:	f000 b935 	b.w	80059f0 <__retarget_lock_release_recursive>
 8005786:	bf00      	nop
 8005788:	20000af1 	.word	0x20000af1

0800578c <__sinit>:
 800578c:	b510      	push	{r4, lr}
 800578e:	4604      	mov	r4, r0
 8005790:	f7ff fff0 	bl	8005774 <__sfp_lock_acquire>
 8005794:	6a23      	ldr	r3, [r4, #32]
 8005796:	b11b      	cbz	r3, 80057a0 <__sinit+0x14>
 8005798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800579c:	f7ff bff0 	b.w	8005780 <__sfp_lock_release>
 80057a0:	4b04      	ldr	r3, [pc, #16]	@ (80057b4 <__sinit+0x28>)
 80057a2:	6223      	str	r3, [r4, #32]
 80057a4:	4b04      	ldr	r3, [pc, #16]	@ (80057b8 <__sinit+0x2c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1f5      	bne.n	8005798 <__sinit+0xc>
 80057ac:	f7ff ffc4 	bl	8005738 <global_stdio_init.part.0>
 80057b0:	e7f2      	b.n	8005798 <__sinit+0xc>
 80057b2:	bf00      	nop
 80057b4:	080056f9 	.word	0x080056f9
 80057b8:	20000ae8 	.word	0x20000ae8

080057bc <_fwalk_sglue>:
 80057bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c0:	4607      	mov	r7, r0
 80057c2:	4688      	mov	r8, r1
 80057c4:	4614      	mov	r4, r2
 80057c6:	2600      	movs	r6, #0
 80057c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057cc:	f1b9 0901 	subs.w	r9, r9, #1
 80057d0:	d505      	bpl.n	80057de <_fwalk_sglue+0x22>
 80057d2:	6824      	ldr	r4, [r4, #0]
 80057d4:	2c00      	cmp	r4, #0
 80057d6:	d1f7      	bne.n	80057c8 <_fwalk_sglue+0xc>
 80057d8:	4630      	mov	r0, r6
 80057da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057de:	89ab      	ldrh	r3, [r5, #12]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d907      	bls.n	80057f4 <_fwalk_sglue+0x38>
 80057e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057e8:	3301      	adds	r3, #1
 80057ea:	d003      	beq.n	80057f4 <_fwalk_sglue+0x38>
 80057ec:	4629      	mov	r1, r5
 80057ee:	4638      	mov	r0, r7
 80057f0:	47c0      	blx	r8
 80057f2:	4306      	orrs	r6, r0
 80057f4:	3568      	adds	r5, #104	@ 0x68
 80057f6:	e7e9      	b.n	80057cc <_fwalk_sglue+0x10>

080057f8 <iprintf>:
 80057f8:	b40f      	push	{r0, r1, r2, r3}
 80057fa:	b507      	push	{r0, r1, r2, lr}
 80057fc:	4906      	ldr	r1, [pc, #24]	@ (8005818 <iprintf+0x20>)
 80057fe:	ab04      	add	r3, sp, #16
 8005800:	6808      	ldr	r0, [r1, #0]
 8005802:	f853 2b04 	ldr.w	r2, [r3], #4
 8005806:	6881      	ldr	r1, [r0, #8]
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	f002 fc81 	bl	8008110 <_vfiprintf_r>
 800580e:	b003      	add	sp, #12
 8005810:	f85d eb04 	ldr.w	lr, [sp], #4
 8005814:	b004      	add	sp, #16
 8005816:	4770      	bx	lr
 8005818:	2000001c 	.word	0x2000001c

0800581c <putchar>:
 800581c:	4b02      	ldr	r3, [pc, #8]	@ (8005828 <putchar+0xc>)
 800581e:	4601      	mov	r1, r0
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	6882      	ldr	r2, [r0, #8]
 8005824:	f002 be38 	b.w	8008498 <_putc_r>
 8005828:	2000001c 	.word	0x2000001c

0800582c <siprintf>:
 800582c:	b40e      	push	{r1, r2, r3}
 800582e:	b500      	push	{lr}
 8005830:	b09c      	sub	sp, #112	@ 0x70
 8005832:	ab1d      	add	r3, sp, #116	@ 0x74
 8005834:	9002      	str	r0, [sp, #8]
 8005836:	9006      	str	r0, [sp, #24]
 8005838:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800583c:	4809      	ldr	r0, [pc, #36]	@ (8005864 <siprintf+0x38>)
 800583e:	9107      	str	r1, [sp, #28]
 8005840:	9104      	str	r1, [sp, #16]
 8005842:	4909      	ldr	r1, [pc, #36]	@ (8005868 <siprintf+0x3c>)
 8005844:	f853 2b04 	ldr.w	r2, [r3], #4
 8005848:	9105      	str	r1, [sp, #20]
 800584a:	6800      	ldr	r0, [r0, #0]
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	a902      	add	r1, sp, #8
 8005850:	f002 fb38 	bl	8007ec4 <_svfiprintf_r>
 8005854:	9b02      	ldr	r3, [sp, #8]
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	b01c      	add	sp, #112	@ 0x70
 800585c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005860:	b003      	add	sp, #12
 8005862:	4770      	bx	lr
 8005864:	2000001c 	.word	0x2000001c
 8005868:	ffff0208 	.word	0xffff0208

0800586c <__sread>:
 800586c:	b510      	push	{r4, lr}
 800586e:	460c      	mov	r4, r1
 8005870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005874:	f000 f86c 	bl	8005950 <_read_r>
 8005878:	2800      	cmp	r0, #0
 800587a:	bfab      	itete	ge
 800587c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800587e:	89a3      	ldrhlt	r3, [r4, #12]
 8005880:	181b      	addge	r3, r3, r0
 8005882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005886:	bfac      	ite	ge
 8005888:	6563      	strge	r3, [r4, #84]	@ 0x54
 800588a:	81a3      	strhlt	r3, [r4, #12]
 800588c:	bd10      	pop	{r4, pc}

0800588e <__swrite>:
 800588e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005892:	461f      	mov	r7, r3
 8005894:	898b      	ldrh	r3, [r1, #12]
 8005896:	05db      	lsls	r3, r3, #23
 8005898:	4605      	mov	r5, r0
 800589a:	460c      	mov	r4, r1
 800589c:	4616      	mov	r6, r2
 800589e:	d505      	bpl.n	80058ac <__swrite+0x1e>
 80058a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a4:	2302      	movs	r3, #2
 80058a6:	2200      	movs	r2, #0
 80058a8:	f000 f840 	bl	800592c <_lseek_r>
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058b6:	81a3      	strh	r3, [r4, #12]
 80058b8:	4632      	mov	r2, r6
 80058ba:	463b      	mov	r3, r7
 80058bc:	4628      	mov	r0, r5
 80058be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058c2:	f000 b857 	b.w	8005974 <_write_r>

080058c6 <__sseek>:
 80058c6:	b510      	push	{r4, lr}
 80058c8:	460c      	mov	r4, r1
 80058ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ce:	f000 f82d 	bl	800592c <_lseek_r>
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	bf15      	itete	ne
 80058d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058e2:	81a3      	strheq	r3, [r4, #12]
 80058e4:	bf18      	it	ne
 80058e6:	81a3      	strhne	r3, [r4, #12]
 80058e8:	bd10      	pop	{r4, pc}

080058ea <__sclose>:
 80058ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ee:	f000 b80d 	b.w	800590c <_close_r>

080058f2 <memset>:
 80058f2:	4402      	add	r2, r0
 80058f4:	4603      	mov	r3, r0
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d100      	bne.n	80058fc <memset+0xa>
 80058fa:	4770      	bx	lr
 80058fc:	f803 1b01 	strb.w	r1, [r3], #1
 8005900:	e7f9      	b.n	80058f6 <memset+0x4>
	...

08005904 <_localeconv_r>:
 8005904:	4800      	ldr	r0, [pc, #0]	@ (8005908 <_localeconv_r+0x4>)
 8005906:	4770      	bx	lr
 8005908:	2000015c 	.word	0x2000015c

0800590c <_close_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d06      	ldr	r5, [pc, #24]	@ (8005928 <_close_r+0x1c>)
 8005910:	2300      	movs	r3, #0
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	602b      	str	r3, [r5, #0]
 8005918:	f7fd fba4 	bl	8003064 <_close>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_close_r+0x1a>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	b103      	cbz	r3, 8005926 <_close_r+0x1a>
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	20000aec 	.word	0x20000aec

0800592c <_lseek_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d07      	ldr	r5, [pc, #28]	@ (800594c <_lseek_r+0x20>)
 8005930:	4604      	mov	r4, r0
 8005932:	4608      	mov	r0, r1
 8005934:	4611      	mov	r1, r2
 8005936:	2200      	movs	r2, #0
 8005938:	602a      	str	r2, [r5, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	f7fd fbb9 	bl	80030b2 <_lseek>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_lseek_r+0x1e>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_lseek_r+0x1e>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	20000aec 	.word	0x20000aec

08005950 <_read_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4d07      	ldr	r5, [pc, #28]	@ (8005970 <_read_r+0x20>)
 8005954:	4604      	mov	r4, r0
 8005956:	4608      	mov	r0, r1
 8005958:	4611      	mov	r1, r2
 800595a:	2200      	movs	r2, #0
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f7fd fb47 	bl	8002ff2 <_read>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_read_r+0x1e>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_read_r+0x1e>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000aec 	.word	0x20000aec

08005974 <_write_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d07      	ldr	r5, [pc, #28]	@ (8005994 <_write_r+0x20>)
 8005978:	4604      	mov	r4, r0
 800597a:	4608      	mov	r0, r1
 800597c:	4611      	mov	r1, r2
 800597e:	2200      	movs	r2, #0
 8005980:	602a      	str	r2, [r5, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	f7fd fb52 	bl	800302c <_write>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_write_r+0x1e>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_write_r+0x1e>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	20000aec 	.word	0x20000aec

08005998 <__errno>:
 8005998:	4b01      	ldr	r3, [pc, #4]	@ (80059a0 <__errno+0x8>)
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	2000001c 	.word	0x2000001c

080059a4 <__libc_init_array>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	4d0d      	ldr	r5, [pc, #52]	@ (80059dc <__libc_init_array+0x38>)
 80059a8:	4c0d      	ldr	r4, [pc, #52]	@ (80059e0 <__libc_init_array+0x3c>)
 80059aa:	1b64      	subs	r4, r4, r5
 80059ac:	10a4      	asrs	r4, r4, #2
 80059ae:	2600      	movs	r6, #0
 80059b0:	42a6      	cmp	r6, r4
 80059b2:	d109      	bne.n	80059c8 <__libc_init_array+0x24>
 80059b4:	4d0b      	ldr	r5, [pc, #44]	@ (80059e4 <__libc_init_array+0x40>)
 80059b6:	4c0c      	ldr	r4, [pc, #48]	@ (80059e8 <__libc_init_array+0x44>)
 80059b8:	f003 fb2c 	bl	8009014 <_init>
 80059bc:	1b64      	subs	r4, r4, r5
 80059be:	10a4      	asrs	r4, r4, #2
 80059c0:	2600      	movs	r6, #0
 80059c2:	42a6      	cmp	r6, r4
 80059c4:	d105      	bne.n	80059d2 <__libc_init_array+0x2e>
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059cc:	4798      	blx	r3
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7ee      	b.n	80059b0 <__libc_init_array+0xc>
 80059d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d6:	4798      	blx	r3
 80059d8:	3601      	adds	r6, #1
 80059da:	e7f2      	b.n	80059c2 <__libc_init_array+0x1e>
 80059dc:	08009820 	.word	0x08009820
 80059e0:	08009820 	.word	0x08009820
 80059e4:	08009820 	.word	0x08009820
 80059e8:	08009824 	.word	0x08009824

080059ec <__retarget_lock_init_recursive>:
 80059ec:	4770      	bx	lr

080059ee <__retarget_lock_acquire_recursive>:
 80059ee:	4770      	bx	lr

080059f0 <__retarget_lock_release_recursive>:
 80059f0:	4770      	bx	lr
	...

080059f4 <nanf>:
 80059f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80059fc <nanf+0x8>
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	7fc00000 	.word	0x7fc00000

08005a00 <quorem>:
 8005a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	6903      	ldr	r3, [r0, #16]
 8005a06:	690c      	ldr	r4, [r1, #16]
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	4607      	mov	r7, r0
 8005a0c:	db7e      	blt.n	8005b0c <quorem+0x10c>
 8005a0e:	3c01      	subs	r4, #1
 8005a10:	f101 0814 	add.w	r8, r1, #20
 8005a14:	00a3      	lsls	r3, r4, #2
 8005a16:	f100 0514 	add.w	r5, r0, #20
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a32:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a36:	d32e      	bcc.n	8005a96 <quorem+0x96>
 8005a38:	f04f 0a00 	mov.w	sl, #0
 8005a3c:	46c4      	mov	ip, r8
 8005a3e:	46ae      	mov	lr, r5
 8005a40:	46d3      	mov	fp, sl
 8005a42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a46:	b298      	uxth	r0, r3
 8005a48:	fb06 a000 	mla	r0, r6, r0, sl
 8005a4c:	0c02      	lsrs	r2, r0, #16
 8005a4e:	0c1b      	lsrs	r3, r3, #16
 8005a50:	fb06 2303 	mla	r3, r6, r3, r2
 8005a54:	f8de 2000 	ldr.w	r2, [lr]
 8005a58:	b280      	uxth	r0, r0
 8005a5a:	b292      	uxth	r2, r2
 8005a5c:	1a12      	subs	r2, r2, r0
 8005a5e:	445a      	add	r2, fp
 8005a60:	f8de 0000 	ldr.w	r0, [lr]
 8005a64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a72:	b292      	uxth	r2, r2
 8005a74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a78:	45e1      	cmp	r9, ip
 8005a7a:	f84e 2b04 	str.w	r2, [lr], #4
 8005a7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a82:	d2de      	bcs.n	8005a42 <quorem+0x42>
 8005a84:	9b00      	ldr	r3, [sp, #0]
 8005a86:	58eb      	ldr	r3, [r5, r3]
 8005a88:	b92b      	cbnz	r3, 8005a96 <quorem+0x96>
 8005a8a:	9b01      	ldr	r3, [sp, #4]
 8005a8c:	3b04      	subs	r3, #4
 8005a8e:	429d      	cmp	r5, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	d32f      	bcc.n	8005af4 <quorem+0xf4>
 8005a94:	613c      	str	r4, [r7, #16]
 8005a96:	4638      	mov	r0, r7
 8005a98:	f001 f9c2 	bl	8006e20 <__mcmp>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	db25      	blt.n	8005aec <quorem+0xec>
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005aa8:	f8d1 c000 	ldr.w	ip, [r1]
 8005aac:	fa1f fe82 	uxth.w	lr, r2
 8005ab0:	fa1f f38c 	uxth.w	r3, ip
 8005ab4:	eba3 030e 	sub.w	r3, r3, lr
 8005ab8:	4403      	add	r3, r0
 8005aba:	0c12      	lsrs	r2, r2, #16
 8005abc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005ac0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005aca:	45c1      	cmp	r9, r8
 8005acc:	f841 3b04 	str.w	r3, [r1], #4
 8005ad0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ad4:	d2e6      	bcs.n	8005aa4 <quorem+0xa4>
 8005ad6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ada:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ade:	b922      	cbnz	r2, 8005aea <quorem+0xea>
 8005ae0:	3b04      	subs	r3, #4
 8005ae2:	429d      	cmp	r5, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	d30b      	bcc.n	8005b00 <quorem+0x100>
 8005ae8:	613c      	str	r4, [r7, #16]
 8005aea:	3601      	adds	r6, #1
 8005aec:	4630      	mov	r0, r6
 8005aee:	b003      	add	sp, #12
 8005af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	3b04      	subs	r3, #4
 8005af8:	2a00      	cmp	r2, #0
 8005afa:	d1cb      	bne.n	8005a94 <quorem+0x94>
 8005afc:	3c01      	subs	r4, #1
 8005afe:	e7c6      	b.n	8005a8e <quorem+0x8e>
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	3b04      	subs	r3, #4
 8005b04:	2a00      	cmp	r2, #0
 8005b06:	d1ef      	bne.n	8005ae8 <quorem+0xe8>
 8005b08:	3c01      	subs	r4, #1
 8005b0a:	e7ea      	b.n	8005ae2 <quorem+0xe2>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e7ee      	b.n	8005aee <quorem+0xee>

08005b10 <_dtoa_r>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	69c7      	ldr	r7, [r0, #28]
 8005b16:	b099      	sub	sp, #100	@ 0x64
 8005b18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b1c:	ec55 4b10 	vmov	r4, r5, d0
 8005b20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005b22:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b24:	4683      	mov	fp, r0
 8005b26:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005b2a:	b97f      	cbnz	r7, 8005b4c <_dtoa_r+0x3c>
 8005b2c:	2010      	movs	r0, #16
 8005b2e:	f000 fdfd 	bl	800672c <malloc>
 8005b32:	4602      	mov	r2, r0
 8005b34:	f8cb 001c 	str.w	r0, [fp, #28]
 8005b38:	b920      	cbnz	r0, 8005b44 <_dtoa_r+0x34>
 8005b3a:	4ba7      	ldr	r3, [pc, #668]	@ (8005dd8 <_dtoa_r+0x2c8>)
 8005b3c:	21ef      	movs	r1, #239	@ 0xef
 8005b3e:	48a7      	ldr	r0, [pc, #668]	@ (8005ddc <_dtoa_r+0x2cc>)
 8005b40:	f002 fdc6 	bl	80086d0 <__assert_func>
 8005b44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005b48:	6007      	str	r7, [r0, #0]
 8005b4a:	60c7      	str	r7, [r0, #12]
 8005b4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b50:	6819      	ldr	r1, [r3, #0]
 8005b52:	b159      	cbz	r1, 8005b6c <_dtoa_r+0x5c>
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	604a      	str	r2, [r1, #4]
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4093      	lsls	r3, r2
 8005b5c:	608b      	str	r3, [r1, #8]
 8005b5e:	4658      	mov	r0, fp
 8005b60:	f000 feda 	bl	8006918 <_Bfree>
 8005b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	1e2b      	subs	r3, r5, #0
 8005b6e:	bfb9      	ittee	lt
 8005b70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b74:	9303      	strlt	r3, [sp, #12]
 8005b76:	2300      	movge	r3, #0
 8005b78:	6033      	strge	r3, [r6, #0]
 8005b7a:	9f03      	ldr	r7, [sp, #12]
 8005b7c:	4b98      	ldr	r3, [pc, #608]	@ (8005de0 <_dtoa_r+0x2d0>)
 8005b7e:	bfbc      	itt	lt
 8005b80:	2201      	movlt	r2, #1
 8005b82:	6032      	strlt	r2, [r6, #0]
 8005b84:	43bb      	bics	r3, r7
 8005b86:	d112      	bne.n	8005bae <_dtoa_r+0x9e>
 8005b88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005b8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b94:	4323      	orrs	r3, r4
 8005b96:	f000 854d 	beq.w	8006634 <_dtoa_r+0xb24>
 8005b9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005df4 <_dtoa_r+0x2e4>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 854f 	beq.w	8006644 <_dtoa_r+0xb34>
 8005ba6:	f10a 0303 	add.w	r3, sl, #3
 8005baa:	f000 bd49 	b.w	8006640 <_dtoa_r+0xb30>
 8005bae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	ec51 0b17 	vmov	r0, r1, d7
 8005bb8:	2300      	movs	r3, #0
 8005bba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005bbe:	f7fa ff8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bc2:	4680      	mov	r8, r0
 8005bc4:	b158      	cbz	r0, 8005bde <_dtoa_r+0xce>
 8005bc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005bc8:	2301      	movs	r3, #1
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005bce:	b113      	cbz	r3, 8005bd6 <_dtoa_r+0xc6>
 8005bd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005bd2:	4b84      	ldr	r3, [pc, #528]	@ (8005de4 <_dtoa_r+0x2d4>)
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005df8 <_dtoa_r+0x2e8>
 8005bda:	f000 bd33 	b.w	8006644 <_dtoa_r+0xb34>
 8005bde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005be2:	aa16      	add	r2, sp, #88	@ 0x58
 8005be4:	a917      	add	r1, sp, #92	@ 0x5c
 8005be6:	4658      	mov	r0, fp
 8005be8:	f001 fa3a 	bl	8007060 <__d2b>
 8005bec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005bf0:	4681      	mov	r9, r0
 8005bf2:	2e00      	cmp	r6, #0
 8005bf4:	d077      	beq.n	8005ce6 <_dtoa_r+0x1d6>
 8005bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005c10:	4619      	mov	r1, r3
 8005c12:	2200      	movs	r2, #0
 8005c14:	4b74      	ldr	r3, [pc, #464]	@ (8005de8 <_dtoa_r+0x2d8>)
 8005c16:	f7fa fb3f 	bl	8000298 <__aeabi_dsub>
 8005c1a:	a369      	add	r3, pc, #420	@ (adr r3, 8005dc0 <_dtoa_r+0x2b0>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f7fa fcf2 	bl	8000608 <__aeabi_dmul>
 8005c24:	a368      	add	r3, pc, #416	@ (adr r3, 8005dc8 <_dtoa_r+0x2b8>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f7fa fb37 	bl	800029c <__adddf3>
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4630      	mov	r0, r6
 8005c32:	460d      	mov	r5, r1
 8005c34:	f7fa fc7e 	bl	8000534 <__aeabi_i2d>
 8005c38:	a365      	add	r3, pc, #404	@ (adr r3, 8005dd0 <_dtoa_r+0x2c0>)
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	f7fa fce3 	bl	8000608 <__aeabi_dmul>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4620      	mov	r0, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	f7fa fb27 	bl	800029c <__adddf3>
 8005c4e:	4604      	mov	r4, r0
 8005c50:	460d      	mov	r5, r1
 8005c52:	f7fa ff89 	bl	8000b68 <__aeabi_d2iz>
 8005c56:	2200      	movs	r2, #0
 8005c58:	4607      	mov	r7, r0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	4629      	mov	r1, r5
 8005c60:	f7fa ff44 	bl	8000aec <__aeabi_dcmplt>
 8005c64:	b140      	cbz	r0, 8005c78 <_dtoa_r+0x168>
 8005c66:	4638      	mov	r0, r7
 8005c68:	f7fa fc64 	bl	8000534 <__aeabi_i2d>
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	462b      	mov	r3, r5
 8005c70:	f7fa ff32 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c74:	b900      	cbnz	r0, 8005c78 <_dtoa_r+0x168>
 8005c76:	3f01      	subs	r7, #1
 8005c78:	2f16      	cmp	r7, #22
 8005c7a:	d851      	bhi.n	8005d20 <_dtoa_r+0x210>
 8005c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8005dec <_dtoa_r+0x2dc>)
 8005c7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c8a:	f7fa ff2f 	bl	8000aec <__aeabi_dcmplt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d048      	beq.n	8005d24 <_dtoa_r+0x214>
 8005c92:	3f01      	subs	r7, #1
 8005c94:	2300      	movs	r3, #0
 8005c96:	9312      	str	r3, [sp, #72]	@ 0x48
 8005c98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005c9a:	1b9b      	subs	r3, r3, r6
 8005c9c:	1e5a      	subs	r2, r3, #1
 8005c9e:	bf44      	itt	mi
 8005ca0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ca4:	2300      	movmi	r3, #0
 8005ca6:	9208      	str	r2, [sp, #32]
 8005ca8:	bf54      	ite	pl
 8005caa:	f04f 0800 	movpl.w	r8, #0
 8005cae:	9308      	strmi	r3, [sp, #32]
 8005cb0:	2f00      	cmp	r7, #0
 8005cb2:	db39      	blt.n	8005d28 <_dtoa_r+0x218>
 8005cb4:	9b08      	ldr	r3, [sp, #32]
 8005cb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005cb8:	443b      	add	r3, r7
 8005cba:	9308      	str	r3, [sp, #32]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc2:	2b09      	cmp	r3, #9
 8005cc4:	d864      	bhi.n	8005d90 <_dtoa_r+0x280>
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	bfc4      	itt	gt
 8005cca:	3b04      	subgt	r3, #4
 8005ccc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cd0:	f1a3 0302 	sub.w	r3, r3, #2
 8005cd4:	bfcc      	ite	gt
 8005cd6:	2400      	movgt	r4, #0
 8005cd8:	2401      	movle	r4, #1
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d863      	bhi.n	8005da6 <_dtoa_r+0x296>
 8005cde:	e8df f003 	tbb	[pc, r3]
 8005ce2:	372a      	.short	0x372a
 8005ce4:	5535      	.short	0x5535
 8005ce6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005cea:	441e      	add	r6, r3
 8005cec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	bfc1      	itttt	gt
 8005cf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005cf8:	409f      	lslgt	r7, r3
 8005cfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005cfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d02:	bfd6      	itet	le
 8005d04:	f1c3 0320 	rsble	r3, r3, #32
 8005d08:	ea47 0003 	orrgt.w	r0, r7, r3
 8005d0c:	fa04 f003 	lslle.w	r0, r4, r3
 8005d10:	f7fa fc00 	bl	8000514 <__aeabi_ui2d>
 8005d14:	2201      	movs	r2, #1
 8005d16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005d1a:	3e01      	subs	r6, #1
 8005d1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005d1e:	e777      	b.n	8005c10 <_dtoa_r+0x100>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e7b8      	b.n	8005c96 <_dtoa_r+0x186>
 8005d24:	9012      	str	r0, [sp, #72]	@ 0x48
 8005d26:	e7b7      	b.n	8005c98 <_dtoa_r+0x188>
 8005d28:	427b      	negs	r3, r7
 8005d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	eba8 0807 	sub.w	r8, r8, r7
 8005d32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d34:	e7c4      	b.n	8005cc0 <_dtoa_r+0x1b0>
 8005d36:	2300      	movs	r3, #0
 8005d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dc35      	bgt.n	8005dac <_dtoa_r+0x29c>
 8005d40:	2301      	movs	r3, #1
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	9307      	str	r3, [sp, #28]
 8005d46:	461a      	mov	r2, r3
 8005d48:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d4a:	e00b      	b.n	8005d64 <_dtoa_r+0x254>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e7f3      	b.n	8005d38 <_dtoa_r+0x228>
 8005d50:	2300      	movs	r3, #0
 8005d52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d56:	18fb      	adds	r3, r7, r3
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	9307      	str	r3, [sp, #28]
 8005d60:	bfb8      	it	lt
 8005d62:	2301      	movlt	r3, #1
 8005d64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	f102 0514 	add.w	r5, r2, #20
 8005d70:	429d      	cmp	r5, r3
 8005d72:	d91f      	bls.n	8005db4 <_dtoa_r+0x2a4>
 8005d74:	6041      	str	r1, [r0, #4]
 8005d76:	4658      	mov	r0, fp
 8005d78:	f000 fd8e 	bl	8006898 <_Balloc>
 8005d7c:	4682      	mov	sl, r0
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d13c      	bne.n	8005dfc <_dtoa_r+0x2ec>
 8005d82:	4b1b      	ldr	r3, [pc, #108]	@ (8005df0 <_dtoa_r+0x2e0>)
 8005d84:	4602      	mov	r2, r0
 8005d86:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d8a:	e6d8      	b.n	8005b3e <_dtoa_r+0x2e>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e7e0      	b.n	8005d52 <_dtoa_r+0x242>
 8005d90:	2401      	movs	r4, #1
 8005d92:	2300      	movs	r3, #0
 8005d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005d98:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	9307      	str	r3, [sp, #28]
 8005da0:	2200      	movs	r2, #0
 8005da2:	2312      	movs	r3, #18
 8005da4:	e7d0      	b.n	8005d48 <_dtoa_r+0x238>
 8005da6:	2301      	movs	r3, #1
 8005da8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005daa:	e7f5      	b.n	8005d98 <_dtoa_r+0x288>
 8005dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	9307      	str	r3, [sp, #28]
 8005db2:	e7d7      	b.n	8005d64 <_dtoa_r+0x254>
 8005db4:	3101      	adds	r1, #1
 8005db6:	0052      	lsls	r2, r2, #1
 8005db8:	e7d8      	b.n	8005d6c <_dtoa_r+0x25c>
 8005dba:	bf00      	nop
 8005dbc:	f3af 8000 	nop.w
 8005dc0:	636f4361 	.word	0x636f4361
 8005dc4:	3fd287a7 	.word	0x3fd287a7
 8005dc8:	8b60c8b3 	.word	0x8b60c8b3
 8005dcc:	3fc68a28 	.word	0x3fc68a28
 8005dd0:	509f79fb 	.word	0x509f79fb
 8005dd4:	3fd34413 	.word	0x3fd34413
 8005dd8:	0800952f 	.word	0x0800952f
 8005ddc:	08009546 	.word	0x08009546
 8005de0:	7ff00000 	.word	0x7ff00000
 8005de4:	080094fa 	.word	0x080094fa
 8005de8:	3ff80000 	.word	0x3ff80000
 8005dec:	08009640 	.word	0x08009640
 8005df0:	0800959e 	.word	0x0800959e
 8005df4:	0800952b 	.word	0x0800952b
 8005df8:	080094f9 	.word	0x080094f9
 8005dfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e00:	6018      	str	r0, [r3, #0]
 8005e02:	9b07      	ldr	r3, [sp, #28]
 8005e04:	2b0e      	cmp	r3, #14
 8005e06:	f200 80a4 	bhi.w	8005f52 <_dtoa_r+0x442>
 8005e0a:	2c00      	cmp	r4, #0
 8005e0c:	f000 80a1 	beq.w	8005f52 <_dtoa_r+0x442>
 8005e10:	2f00      	cmp	r7, #0
 8005e12:	dd33      	ble.n	8005e7c <_dtoa_r+0x36c>
 8005e14:	4bad      	ldr	r3, [pc, #692]	@ (80060cc <_dtoa_r+0x5bc>)
 8005e16:	f007 020f 	and.w	r2, r7, #15
 8005e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e1e:	ed93 7b00 	vldr	d7, [r3]
 8005e22:	05f8      	lsls	r0, r7, #23
 8005e24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005e28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005e2c:	d516      	bpl.n	8005e5c <_dtoa_r+0x34c>
 8005e2e:	4ba8      	ldr	r3, [pc, #672]	@ (80060d0 <_dtoa_r+0x5c0>)
 8005e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e38:	f7fa fd10 	bl	800085c <__aeabi_ddiv>
 8005e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e40:	f004 040f 	and.w	r4, r4, #15
 8005e44:	2603      	movs	r6, #3
 8005e46:	4da2      	ldr	r5, [pc, #648]	@ (80060d0 <_dtoa_r+0x5c0>)
 8005e48:	b954      	cbnz	r4, 8005e60 <_dtoa_r+0x350>
 8005e4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e52:	f7fa fd03 	bl	800085c <__aeabi_ddiv>
 8005e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e5a:	e028      	b.n	8005eae <_dtoa_r+0x39e>
 8005e5c:	2602      	movs	r6, #2
 8005e5e:	e7f2      	b.n	8005e46 <_dtoa_r+0x336>
 8005e60:	07e1      	lsls	r1, r4, #31
 8005e62:	d508      	bpl.n	8005e76 <_dtoa_r+0x366>
 8005e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e6c:	f7fa fbcc 	bl	8000608 <__aeabi_dmul>
 8005e70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e74:	3601      	adds	r6, #1
 8005e76:	1064      	asrs	r4, r4, #1
 8005e78:	3508      	adds	r5, #8
 8005e7a:	e7e5      	b.n	8005e48 <_dtoa_r+0x338>
 8005e7c:	f000 80d2 	beq.w	8006024 <_dtoa_r+0x514>
 8005e80:	427c      	negs	r4, r7
 8005e82:	4b92      	ldr	r3, [pc, #584]	@ (80060cc <_dtoa_r+0x5bc>)
 8005e84:	4d92      	ldr	r5, [pc, #584]	@ (80060d0 <_dtoa_r+0x5c0>)
 8005e86:	f004 020f 	and.w	r2, r4, #15
 8005e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e96:	f7fa fbb7 	bl	8000608 <__aeabi_dmul>
 8005e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e9e:	1124      	asrs	r4, r4, #4
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2602      	movs	r6, #2
 8005ea4:	2c00      	cmp	r4, #0
 8005ea6:	f040 80b2 	bne.w	800600e <_dtoa_r+0x4fe>
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1d3      	bne.n	8005e56 <_dtoa_r+0x346>
 8005eae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005eb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80b7 	beq.w	8006028 <_dtoa_r+0x518>
 8005eba:	4b86      	ldr	r3, [pc, #536]	@ (80060d4 <_dtoa_r+0x5c4>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	f7fa fe13 	bl	8000aec <__aeabi_dcmplt>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f000 80ae 	beq.w	8006028 <_dtoa_r+0x518>
 8005ecc:	9b07      	ldr	r3, [sp, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80aa 	beq.w	8006028 <_dtoa_r+0x518>
 8005ed4:	9b00      	ldr	r3, [sp, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	dd37      	ble.n	8005f4a <_dtoa_r+0x43a>
 8005eda:	1e7b      	subs	r3, r7, #1
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4b7d      	ldr	r3, [pc, #500]	@ (80060d8 <_dtoa_r+0x5c8>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	f7fa fb8f 	bl	8000608 <__aeabi_dmul>
 8005eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eee:	9c00      	ldr	r4, [sp, #0]
 8005ef0:	3601      	adds	r6, #1
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7fa fb1e 	bl	8000534 <__aeabi_i2d>
 8005ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005efc:	f7fa fb84 	bl	8000608 <__aeabi_dmul>
 8005f00:	4b76      	ldr	r3, [pc, #472]	@ (80060dc <_dtoa_r+0x5cc>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	f7fa f9ca 	bl	800029c <__adddf3>
 8005f08:	4605      	mov	r5, r0
 8005f0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	f040 808d 	bne.w	800602e <_dtoa_r+0x51e>
 8005f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f18:	4b71      	ldr	r3, [pc, #452]	@ (80060e0 <_dtoa_r+0x5d0>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f7fa f9bc 	bl	8000298 <__aeabi_dsub>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f28:	462a      	mov	r2, r5
 8005f2a:	4633      	mov	r3, r6
 8005f2c:	f7fa fdfc 	bl	8000b28 <__aeabi_dcmpgt>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	f040 828b 	bne.w	800644c <_dtoa_r+0x93c>
 8005f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f3a:	462a      	mov	r2, r5
 8005f3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f40:	f7fa fdd4 	bl	8000aec <__aeabi_dcmplt>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	f040 8128 	bne.w	800619a <_dtoa_r+0x68a>
 8005f4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005f4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005f52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f2c0 815a 	blt.w	800620e <_dtoa_r+0x6fe>
 8005f5a:	2f0e      	cmp	r7, #14
 8005f5c:	f300 8157 	bgt.w	800620e <_dtoa_r+0x6fe>
 8005f60:	4b5a      	ldr	r3, [pc, #360]	@ (80060cc <_dtoa_r+0x5bc>)
 8005f62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f66:	ed93 7b00 	vldr	d7, [r3]
 8005f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	ed8d 7b00 	vstr	d7, [sp]
 8005f72:	da03      	bge.n	8005f7c <_dtoa_r+0x46c>
 8005f74:	9b07      	ldr	r3, [sp, #28]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f340 8101 	ble.w	800617e <_dtoa_r+0x66e>
 8005f7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f80:	4656      	mov	r6, sl
 8005f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f86:	4620      	mov	r0, r4
 8005f88:	4629      	mov	r1, r5
 8005f8a:	f7fa fc67 	bl	800085c <__aeabi_ddiv>
 8005f8e:	f7fa fdeb 	bl	8000b68 <__aeabi_d2iz>
 8005f92:	4680      	mov	r8, r0
 8005f94:	f7fa face 	bl	8000534 <__aeabi_i2d>
 8005f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f9c:	f7fa fb34 	bl	8000608 <__aeabi_dmul>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005fac:	f7fa f974 	bl	8000298 <__aeabi_dsub>
 8005fb0:	f806 4b01 	strb.w	r4, [r6], #1
 8005fb4:	9d07      	ldr	r5, [sp, #28]
 8005fb6:	eba6 040a 	sub.w	r4, r6, sl
 8005fba:	42a5      	cmp	r5, r4
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	f040 8117 	bne.w	80061f2 <_dtoa_r+0x6e2>
 8005fc4:	f7fa f96a 	bl	800029c <__adddf3>
 8005fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fcc:	4604      	mov	r4, r0
 8005fce:	460d      	mov	r5, r1
 8005fd0:	f7fa fdaa 	bl	8000b28 <__aeabi_dcmpgt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f040 80f9 	bne.w	80061cc <_dtoa_r+0x6bc>
 8005fda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7fa fd79 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fe6:	b118      	cbz	r0, 8005ff0 <_dtoa_r+0x4e0>
 8005fe8:	f018 0f01 	tst.w	r8, #1
 8005fec:	f040 80ee 	bne.w	80061cc <_dtoa_r+0x6bc>
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	4658      	mov	r0, fp
 8005ff4:	f000 fc90 	bl	8006918 <_Bfree>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	7033      	strb	r3, [r6, #0]
 8005ffc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ffe:	3701      	adds	r7, #1
 8006000:	601f      	str	r7, [r3, #0]
 8006002:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 831d 	beq.w	8006644 <_dtoa_r+0xb34>
 800600a:	601e      	str	r6, [r3, #0]
 800600c:	e31a      	b.n	8006644 <_dtoa_r+0xb34>
 800600e:	07e2      	lsls	r2, r4, #31
 8006010:	d505      	bpl.n	800601e <_dtoa_r+0x50e>
 8006012:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006016:	f7fa faf7 	bl	8000608 <__aeabi_dmul>
 800601a:	3601      	adds	r6, #1
 800601c:	2301      	movs	r3, #1
 800601e:	1064      	asrs	r4, r4, #1
 8006020:	3508      	adds	r5, #8
 8006022:	e73f      	b.n	8005ea4 <_dtoa_r+0x394>
 8006024:	2602      	movs	r6, #2
 8006026:	e742      	b.n	8005eae <_dtoa_r+0x39e>
 8006028:	9c07      	ldr	r4, [sp, #28]
 800602a:	9704      	str	r7, [sp, #16]
 800602c:	e761      	b.n	8005ef2 <_dtoa_r+0x3e2>
 800602e:	4b27      	ldr	r3, [pc, #156]	@ (80060cc <_dtoa_r+0x5bc>)
 8006030:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006036:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800603a:	4454      	add	r4, sl
 800603c:	2900      	cmp	r1, #0
 800603e:	d053      	beq.n	80060e8 <_dtoa_r+0x5d8>
 8006040:	4928      	ldr	r1, [pc, #160]	@ (80060e4 <_dtoa_r+0x5d4>)
 8006042:	2000      	movs	r0, #0
 8006044:	f7fa fc0a 	bl	800085c <__aeabi_ddiv>
 8006048:	4633      	mov	r3, r6
 800604a:	462a      	mov	r2, r5
 800604c:	f7fa f924 	bl	8000298 <__aeabi_dsub>
 8006050:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006054:	4656      	mov	r6, sl
 8006056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800605a:	f7fa fd85 	bl	8000b68 <__aeabi_d2iz>
 800605e:	4605      	mov	r5, r0
 8006060:	f7fa fa68 	bl	8000534 <__aeabi_i2d>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800606c:	f7fa f914 	bl	8000298 <__aeabi_dsub>
 8006070:	3530      	adds	r5, #48	@ 0x30
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800607a:	f806 5b01 	strb.w	r5, [r6], #1
 800607e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006082:	f7fa fd33 	bl	8000aec <__aeabi_dcmplt>
 8006086:	2800      	cmp	r0, #0
 8006088:	d171      	bne.n	800616e <_dtoa_r+0x65e>
 800608a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800608e:	4911      	ldr	r1, [pc, #68]	@ (80060d4 <_dtoa_r+0x5c4>)
 8006090:	2000      	movs	r0, #0
 8006092:	f7fa f901 	bl	8000298 <__aeabi_dsub>
 8006096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800609a:	f7fa fd27 	bl	8000aec <__aeabi_dcmplt>
 800609e:	2800      	cmp	r0, #0
 80060a0:	f040 8095 	bne.w	80061ce <_dtoa_r+0x6be>
 80060a4:	42a6      	cmp	r6, r4
 80060a6:	f43f af50 	beq.w	8005f4a <_dtoa_r+0x43a>
 80060aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80060ae:	4b0a      	ldr	r3, [pc, #40]	@ (80060d8 <_dtoa_r+0x5c8>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	f7fa faa9 	bl	8000608 <__aeabi_dmul>
 80060b6:	4b08      	ldr	r3, [pc, #32]	@ (80060d8 <_dtoa_r+0x5c8>)
 80060b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060bc:	2200      	movs	r2, #0
 80060be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060c2:	f7fa faa1 	bl	8000608 <__aeabi_dmul>
 80060c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060ca:	e7c4      	b.n	8006056 <_dtoa_r+0x546>
 80060cc:	08009640 	.word	0x08009640
 80060d0:	08009618 	.word	0x08009618
 80060d4:	3ff00000 	.word	0x3ff00000
 80060d8:	40240000 	.word	0x40240000
 80060dc:	401c0000 	.word	0x401c0000
 80060e0:	40140000 	.word	0x40140000
 80060e4:	3fe00000 	.word	0x3fe00000
 80060e8:	4631      	mov	r1, r6
 80060ea:	4628      	mov	r0, r5
 80060ec:	f7fa fa8c 	bl	8000608 <__aeabi_dmul>
 80060f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80060f6:	4656      	mov	r6, sl
 80060f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060fc:	f7fa fd34 	bl	8000b68 <__aeabi_d2iz>
 8006100:	4605      	mov	r5, r0
 8006102:	f7fa fa17 	bl	8000534 <__aeabi_i2d>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800610e:	f7fa f8c3 	bl	8000298 <__aeabi_dsub>
 8006112:	3530      	adds	r5, #48	@ 0x30
 8006114:	f806 5b01 	strb.w	r5, [r6], #1
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	42a6      	cmp	r6, r4
 800611e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	d124      	bne.n	8006172 <_dtoa_r+0x662>
 8006128:	4bac      	ldr	r3, [pc, #688]	@ (80063dc <_dtoa_r+0x8cc>)
 800612a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800612e:	f7fa f8b5 	bl	800029c <__adddf3>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800613a:	f7fa fcf5 	bl	8000b28 <__aeabi_dcmpgt>
 800613e:	2800      	cmp	r0, #0
 8006140:	d145      	bne.n	80061ce <_dtoa_r+0x6be>
 8006142:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006146:	49a5      	ldr	r1, [pc, #660]	@ (80063dc <_dtoa_r+0x8cc>)
 8006148:	2000      	movs	r0, #0
 800614a:	f7fa f8a5 	bl	8000298 <__aeabi_dsub>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006156:	f7fa fcc9 	bl	8000aec <__aeabi_dcmplt>
 800615a:	2800      	cmp	r0, #0
 800615c:	f43f aef5 	beq.w	8005f4a <_dtoa_r+0x43a>
 8006160:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006162:	1e73      	subs	r3, r6, #1
 8006164:	9315      	str	r3, [sp, #84]	@ 0x54
 8006166:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800616a:	2b30      	cmp	r3, #48	@ 0x30
 800616c:	d0f8      	beq.n	8006160 <_dtoa_r+0x650>
 800616e:	9f04      	ldr	r7, [sp, #16]
 8006170:	e73e      	b.n	8005ff0 <_dtoa_r+0x4e0>
 8006172:	4b9b      	ldr	r3, [pc, #620]	@ (80063e0 <_dtoa_r+0x8d0>)
 8006174:	f7fa fa48 	bl	8000608 <__aeabi_dmul>
 8006178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800617c:	e7bc      	b.n	80060f8 <_dtoa_r+0x5e8>
 800617e:	d10c      	bne.n	800619a <_dtoa_r+0x68a>
 8006180:	4b98      	ldr	r3, [pc, #608]	@ (80063e4 <_dtoa_r+0x8d4>)
 8006182:	2200      	movs	r2, #0
 8006184:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006188:	f7fa fa3e 	bl	8000608 <__aeabi_dmul>
 800618c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006190:	f7fa fcc0 	bl	8000b14 <__aeabi_dcmpge>
 8006194:	2800      	cmp	r0, #0
 8006196:	f000 8157 	beq.w	8006448 <_dtoa_r+0x938>
 800619a:	2400      	movs	r4, #0
 800619c:	4625      	mov	r5, r4
 800619e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061a0:	43db      	mvns	r3, r3
 80061a2:	9304      	str	r3, [sp, #16]
 80061a4:	4656      	mov	r6, sl
 80061a6:	2700      	movs	r7, #0
 80061a8:	4621      	mov	r1, r4
 80061aa:	4658      	mov	r0, fp
 80061ac:	f000 fbb4 	bl	8006918 <_Bfree>
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	d0dc      	beq.n	800616e <_dtoa_r+0x65e>
 80061b4:	b12f      	cbz	r7, 80061c2 <_dtoa_r+0x6b2>
 80061b6:	42af      	cmp	r7, r5
 80061b8:	d003      	beq.n	80061c2 <_dtoa_r+0x6b2>
 80061ba:	4639      	mov	r1, r7
 80061bc:	4658      	mov	r0, fp
 80061be:	f000 fbab 	bl	8006918 <_Bfree>
 80061c2:	4629      	mov	r1, r5
 80061c4:	4658      	mov	r0, fp
 80061c6:	f000 fba7 	bl	8006918 <_Bfree>
 80061ca:	e7d0      	b.n	800616e <_dtoa_r+0x65e>
 80061cc:	9704      	str	r7, [sp, #16]
 80061ce:	4633      	mov	r3, r6
 80061d0:	461e      	mov	r6, r3
 80061d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061d6:	2a39      	cmp	r2, #57	@ 0x39
 80061d8:	d107      	bne.n	80061ea <_dtoa_r+0x6da>
 80061da:	459a      	cmp	sl, r3
 80061dc:	d1f8      	bne.n	80061d0 <_dtoa_r+0x6c0>
 80061de:	9a04      	ldr	r2, [sp, #16]
 80061e0:	3201      	adds	r2, #1
 80061e2:	9204      	str	r2, [sp, #16]
 80061e4:	2230      	movs	r2, #48	@ 0x30
 80061e6:	f88a 2000 	strb.w	r2, [sl]
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	3201      	adds	r2, #1
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	e7bd      	b.n	800616e <_dtoa_r+0x65e>
 80061f2:	4b7b      	ldr	r3, [pc, #492]	@ (80063e0 <_dtoa_r+0x8d0>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	f7fa fa07 	bl	8000608 <__aeabi_dmul>
 80061fa:	2200      	movs	r2, #0
 80061fc:	2300      	movs	r3, #0
 80061fe:	4604      	mov	r4, r0
 8006200:	460d      	mov	r5, r1
 8006202:	f7fa fc69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006206:	2800      	cmp	r0, #0
 8006208:	f43f aebb 	beq.w	8005f82 <_dtoa_r+0x472>
 800620c:	e6f0      	b.n	8005ff0 <_dtoa_r+0x4e0>
 800620e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006210:	2a00      	cmp	r2, #0
 8006212:	f000 80db 	beq.w	80063cc <_dtoa_r+0x8bc>
 8006216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006218:	2a01      	cmp	r2, #1
 800621a:	f300 80bf 	bgt.w	800639c <_dtoa_r+0x88c>
 800621e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006220:	2a00      	cmp	r2, #0
 8006222:	f000 80b7 	beq.w	8006394 <_dtoa_r+0x884>
 8006226:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800622a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800622c:	4646      	mov	r6, r8
 800622e:	9a08      	ldr	r2, [sp, #32]
 8006230:	2101      	movs	r1, #1
 8006232:	441a      	add	r2, r3
 8006234:	4658      	mov	r0, fp
 8006236:	4498      	add	r8, r3
 8006238:	9208      	str	r2, [sp, #32]
 800623a:	f000 fc6b 	bl	8006b14 <__i2b>
 800623e:	4605      	mov	r5, r0
 8006240:	b15e      	cbz	r6, 800625a <_dtoa_r+0x74a>
 8006242:	9b08      	ldr	r3, [sp, #32]
 8006244:	2b00      	cmp	r3, #0
 8006246:	dd08      	ble.n	800625a <_dtoa_r+0x74a>
 8006248:	42b3      	cmp	r3, r6
 800624a:	9a08      	ldr	r2, [sp, #32]
 800624c:	bfa8      	it	ge
 800624e:	4633      	movge	r3, r6
 8006250:	eba8 0803 	sub.w	r8, r8, r3
 8006254:	1af6      	subs	r6, r6, r3
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	9308      	str	r3, [sp, #32]
 800625a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800625c:	b1f3      	cbz	r3, 800629c <_dtoa_r+0x78c>
 800625e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 80b7 	beq.w	80063d4 <_dtoa_r+0x8c4>
 8006266:	b18c      	cbz	r4, 800628c <_dtoa_r+0x77c>
 8006268:	4629      	mov	r1, r5
 800626a:	4622      	mov	r2, r4
 800626c:	4658      	mov	r0, fp
 800626e:	f000 fd11 	bl	8006c94 <__pow5mult>
 8006272:	464a      	mov	r2, r9
 8006274:	4601      	mov	r1, r0
 8006276:	4605      	mov	r5, r0
 8006278:	4658      	mov	r0, fp
 800627a:	f000 fc61 	bl	8006b40 <__multiply>
 800627e:	4649      	mov	r1, r9
 8006280:	9004      	str	r0, [sp, #16]
 8006282:	4658      	mov	r0, fp
 8006284:	f000 fb48 	bl	8006918 <_Bfree>
 8006288:	9b04      	ldr	r3, [sp, #16]
 800628a:	4699      	mov	r9, r3
 800628c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800628e:	1b1a      	subs	r2, r3, r4
 8006290:	d004      	beq.n	800629c <_dtoa_r+0x78c>
 8006292:	4649      	mov	r1, r9
 8006294:	4658      	mov	r0, fp
 8006296:	f000 fcfd 	bl	8006c94 <__pow5mult>
 800629a:	4681      	mov	r9, r0
 800629c:	2101      	movs	r1, #1
 800629e:	4658      	mov	r0, fp
 80062a0:	f000 fc38 	bl	8006b14 <__i2b>
 80062a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062a6:	4604      	mov	r4, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 81cf 	beq.w	800664c <_dtoa_r+0xb3c>
 80062ae:	461a      	mov	r2, r3
 80062b0:	4601      	mov	r1, r0
 80062b2:	4658      	mov	r0, fp
 80062b4:	f000 fcee 	bl	8006c94 <__pow5mult>
 80062b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	4604      	mov	r4, r0
 80062be:	f300 8095 	bgt.w	80063ec <_dtoa_r+0x8dc>
 80062c2:	9b02      	ldr	r3, [sp, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f040 8087 	bne.w	80063d8 <_dtoa_r+0x8c8>
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 8089 	bne.w	80063e8 <_dtoa_r+0x8d8>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062dc:	0d1b      	lsrs	r3, r3, #20
 80062de:	051b      	lsls	r3, r3, #20
 80062e0:	b12b      	cbz	r3, 80062ee <_dtoa_r+0x7de>
 80062e2:	9b08      	ldr	r3, [sp, #32]
 80062e4:	3301      	adds	r3, #1
 80062e6:	9308      	str	r3, [sp, #32]
 80062e8:	f108 0801 	add.w	r8, r8, #1
 80062ec:	2301      	movs	r3, #1
 80062ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80062f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 81b0 	beq.w	8006658 <_dtoa_r+0xb48>
 80062f8:	6923      	ldr	r3, [r4, #16]
 80062fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062fe:	6918      	ldr	r0, [r3, #16]
 8006300:	f000 fbbc 	bl	8006a7c <__hi0bits>
 8006304:	f1c0 0020 	rsb	r0, r0, #32
 8006308:	9b08      	ldr	r3, [sp, #32]
 800630a:	4418      	add	r0, r3
 800630c:	f010 001f 	ands.w	r0, r0, #31
 8006310:	d077      	beq.n	8006402 <_dtoa_r+0x8f2>
 8006312:	f1c0 0320 	rsb	r3, r0, #32
 8006316:	2b04      	cmp	r3, #4
 8006318:	dd6b      	ble.n	80063f2 <_dtoa_r+0x8e2>
 800631a:	9b08      	ldr	r3, [sp, #32]
 800631c:	f1c0 001c 	rsb	r0, r0, #28
 8006320:	4403      	add	r3, r0
 8006322:	4480      	add	r8, r0
 8006324:	4406      	add	r6, r0
 8006326:	9308      	str	r3, [sp, #32]
 8006328:	f1b8 0f00 	cmp.w	r8, #0
 800632c:	dd05      	ble.n	800633a <_dtoa_r+0x82a>
 800632e:	4649      	mov	r1, r9
 8006330:	4642      	mov	r2, r8
 8006332:	4658      	mov	r0, fp
 8006334:	f000 fd08 	bl	8006d48 <__lshift>
 8006338:	4681      	mov	r9, r0
 800633a:	9b08      	ldr	r3, [sp, #32]
 800633c:	2b00      	cmp	r3, #0
 800633e:	dd05      	ble.n	800634c <_dtoa_r+0x83c>
 8006340:	4621      	mov	r1, r4
 8006342:	461a      	mov	r2, r3
 8006344:	4658      	mov	r0, fp
 8006346:	f000 fcff 	bl	8006d48 <__lshift>
 800634a:	4604      	mov	r4, r0
 800634c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800634e:	2b00      	cmp	r3, #0
 8006350:	d059      	beq.n	8006406 <_dtoa_r+0x8f6>
 8006352:	4621      	mov	r1, r4
 8006354:	4648      	mov	r0, r9
 8006356:	f000 fd63 	bl	8006e20 <__mcmp>
 800635a:	2800      	cmp	r0, #0
 800635c:	da53      	bge.n	8006406 <_dtoa_r+0x8f6>
 800635e:	1e7b      	subs	r3, r7, #1
 8006360:	9304      	str	r3, [sp, #16]
 8006362:	4649      	mov	r1, r9
 8006364:	2300      	movs	r3, #0
 8006366:	220a      	movs	r2, #10
 8006368:	4658      	mov	r0, fp
 800636a:	f000 faf7 	bl	800695c <__multadd>
 800636e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006370:	4681      	mov	r9, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8172 	beq.w	800665c <_dtoa_r+0xb4c>
 8006378:	2300      	movs	r3, #0
 800637a:	4629      	mov	r1, r5
 800637c:	220a      	movs	r2, #10
 800637e:	4658      	mov	r0, fp
 8006380:	f000 faec 	bl	800695c <__multadd>
 8006384:	9b00      	ldr	r3, [sp, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	4605      	mov	r5, r0
 800638a:	dc67      	bgt.n	800645c <_dtoa_r+0x94c>
 800638c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638e:	2b02      	cmp	r3, #2
 8006390:	dc41      	bgt.n	8006416 <_dtoa_r+0x906>
 8006392:	e063      	b.n	800645c <_dtoa_r+0x94c>
 8006394:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006396:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800639a:	e746      	b.n	800622a <_dtoa_r+0x71a>
 800639c:	9b07      	ldr	r3, [sp, #28]
 800639e:	1e5c      	subs	r4, r3, #1
 80063a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063a2:	42a3      	cmp	r3, r4
 80063a4:	bfbf      	itttt	lt
 80063a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80063a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80063aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80063ac:	1ae3      	sublt	r3, r4, r3
 80063ae:	bfb4      	ite	lt
 80063b0:	18d2      	addlt	r2, r2, r3
 80063b2:	1b1c      	subge	r4, r3, r4
 80063b4:	9b07      	ldr	r3, [sp, #28]
 80063b6:	bfbc      	itt	lt
 80063b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80063ba:	2400      	movlt	r4, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bfb5      	itete	lt
 80063c0:	eba8 0603 	sublt.w	r6, r8, r3
 80063c4:	9b07      	ldrge	r3, [sp, #28]
 80063c6:	2300      	movlt	r3, #0
 80063c8:	4646      	movge	r6, r8
 80063ca:	e730      	b.n	800622e <_dtoa_r+0x71e>
 80063cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80063ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80063d0:	4646      	mov	r6, r8
 80063d2:	e735      	b.n	8006240 <_dtoa_r+0x730>
 80063d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063d6:	e75c      	b.n	8006292 <_dtoa_r+0x782>
 80063d8:	2300      	movs	r3, #0
 80063da:	e788      	b.n	80062ee <_dtoa_r+0x7de>
 80063dc:	3fe00000 	.word	0x3fe00000
 80063e0:	40240000 	.word	0x40240000
 80063e4:	40140000 	.word	0x40140000
 80063e8:	9b02      	ldr	r3, [sp, #8]
 80063ea:	e780      	b.n	80062ee <_dtoa_r+0x7de>
 80063ec:	2300      	movs	r3, #0
 80063ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80063f0:	e782      	b.n	80062f8 <_dtoa_r+0x7e8>
 80063f2:	d099      	beq.n	8006328 <_dtoa_r+0x818>
 80063f4:	9a08      	ldr	r2, [sp, #32]
 80063f6:	331c      	adds	r3, #28
 80063f8:	441a      	add	r2, r3
 80063fa:	4498      	add	r8, r3
 80063fc:	441e      	add	r6, r3
 80063fe:	9208      	str	r2, [sp, #32]
 8006400:	e792      	b.n	8006328 <_dtoa_r+0x818>
 8006402:	4603      	mov	r3, r0
 8006404:	e7f6      	b.n	80063f4 <_dtoa_r+0x8e4>
 8006406:	9b07      	ldr	r3, [sp, #28]
 8006408:	9704      	str	r7, [sp, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	dc20      	bgt.n	8006450 <_dtoa_r+0x940>
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006412:	2b02      	cmp	r3, #2
 8006414:	dd1e      	ble.n	8006454 <_dtoa_r+0x944>
 8006416:	9b00      	ldr	r3, [sp, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f47f aec0 	bne.w	800619e <_dtoa_r+0x68e>
 800641e:	4621      	mov	r1, r4
 8006420:	2205      	movs	r2, #5
 8006422:	4658      	mov	r0, fp
 8006424:	f000 fa9a 	bl	800695c <__multadd>
 8006428:	4601      	mov	r1, r0
 800642a:	4604      	mov	r4, r0
 800642c:	4648      	mov	r0, r9
 800642e:	f000 fcf7 	bl	8006e20 <__mcmp>
 8006432:	2800      	cmp	r0, #0
 8006434:	f77f aeb3 	ble.w	800619e <_dtoa_r+0x68e>
 8006438:	4656      	mov	r6, sl
 800643a:	2331      	movs	r3, #49	@ 0x31
 800643c:	f806 3b01 	strb.w	r3, [r6], #1
 8006440:	9b04      	ldr	r3, [sp, #16]
 8006442:	3301      	adds	r3, #1
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	e6ae      	b.n	80061a6 <_dtoa_r+0x696>
 8006448:	9c07      	ldr	r4, [sp, #28]
 800644a:	9704      	str	r7, [sp, #16]
 800644c:	4625      	mov	r5, r4
 800644e:	e7f3      	b.n	8006438 <_dtoa_r+0x928>
 8006450:	9b07      	ldr	r3, [sp, #28]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8104 	beq.w	8006664 <_dtoa_r+0xb54>
 800645c:	2e00      	cmp	r6, #0
 800645e:	dd05      	ble.n	800646c <_dtoa_r+0x95c>
 8006460:	4629      	mov	r1, r5
 8006462:	4632      	mov	r2, r6
 8006464:	4658      	mov	r0, fp
 8006466:	f000 fc6f 	bl	8006d48 <__lshift>
 800646a:	4605      	mov	r5, r0
 800646c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d05a      	beq.n	8006528 <_dtoa_r+0xa18>
 8006472:	6869      	ldr	r1, [r5, #4]
 8006474:	4658      	mov	r0, fp
 8006476:	f000 fa0f 	bl	8006898 <_Balloc>
 800647a:	4606      	mov	r6, r0
 800647c:	b928      	cbnz	r0, 800648a <_dtoa_r+0x97a>
 800647e:	4b84      	ldr	r3, [pc, #528]	@ (8006690 <_dtoa_r+0xb80>)
 8006480:	4602      	mov	r2, r0
 8006482:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006486:	f7ff bb5a 	b.w	8005b3e <_dtoa_r+0x2e>
 800648a:	692a      	ldr	r2, [r5, #16]
 800648c:	3202      	adds	r2, #2
 800648e:	0092      	lsls	r2, r2, #2
 8006490:	f105 010c 	add.w	r1, r5, #12
 8006494:	300c      	adds	r0, #12
 8006496:	f002 f903 	bl	80086a0 <memcpy>
 800649a:	2201      	movs	r2, #1
 800649c:	4631      	mov	r1, r6
 800649e:	4658      	mov	r0, fp
 80064a0:	f000 fc52 	bl	8006d48 <__lshift>
 80064a4:	f10a 0301 	add.w	r3, sl, #1
 80064a8:	9307      	str	r3, [sp, #28]
 80064aa:	9b00      	ldr	r3, [sp, #0]
 80064ac:	4453      	add	r3, sl
 80064ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064b0:	9b02      	ldr	r3, [sp, #8]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	462f      	mov	r7, r5
 80064b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80064ba:	4605      	mov	r5, r0
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	4621      	mov	r1, r4
 80064c0:	3b01      	subs	r3, #1
 80064c2:	4648      	mov	r0, r9
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	f7ff fa9b 	bl	8005a00 <quorem>
 80064ca:	4639      	mov	r1, r7
 80064cc:	9002      	str	r0, [sp, #8]
 80064ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80064d2:	4648      	mov	r0, r9
 80064d4:	f000 fca4 	bl	8006e20 <__mcmp>
 80064d8:	462a      	mov	r2, r5
 80064da:	9008      	str	r0, [sp, #32]
 80064dc:	4621      	mov	r1, r4
 80064de:	4658      	mov	r0, fp
 80064e0:	f000 fcba 	bl	8006e58 <__mdiff>
 80064e4:	68c2      	ldr	r2, [r0, #12]
 80064e6:	4606      	mov	r6, r0
 80064e8:	bb02      	cbnz	r2, 800652c <_dtoa_r+0xa1c>
 80064ea:	4601      	mov	r1, r0
 80064ec:	4648      	mov	r0, r9
 80064ee:	f000 fc97 	bl	8006e20 <__mcmp>
 80064f2:	4602      	mov	r2, r0
 80064f4:	4631      	mov	r1, r6
 80064f6:	4658      	mov	r0, fp
 80064f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80064fa:	f000 fa0d 	bl	8006918 <_Bfree>
 80064fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006500:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006502:	9e07      	ldr	r6, [sp, #28]
 8006504:	ea43 0102 	orr.w	r1, r3, r2
 8006508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800650a:	4319      	orrs	r1, r3
 800650c:	d110      	bne.n	8006530 <_dtoa_r+0xa20>
 800650e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006512:	d029      	beq.n	8006568 <_dtoa_r+0xa58>
 8006514:	9b08      	ldr	r3, [sp, #32]
 8006516:	2b00      	cmp	r3, #0
 8006518:	dd02      	ble.n	8006520 <_dtoa_r+0xa10>
 800651a:	9b02      	ldr	r3, [sp, #8]
 800651c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006520:	9b00      	ldr	r3, [sp, #0]
 8006522:	f883 8000 	strb.w	r8, [r3]
 8006526:	e63f      	b.n	80061a8 <_dtoa_r+0x698>
 8006528:	4628      	mov	r0, r5
 800652a:	e7bb      	b.n	80064a4 <_dtoa_r+0x994>
 800652c:	2201      	movs	r2, #1
 800652e:	e7e1      	b.n	80064f4 <_dtoa_r+0x9e4>
 8006530:	9b08      	ldr	r3, [sp, #32]
 8006532:	2b00      	cmp	r3, #0
 8006534:	db04      	blt.n	8006540 <_dtoa_r+0xa30>
 8006536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006538:	430b      	orrs	r3, r1
 800653a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800653c:	430b      	orrs	r3, r1
 800653e:	d120      	bne.n	8006582 <_dtoa_r+0xa72>
 8006540:	2a00      	cmp	r2, #0
 8006542:	dded      	ble.n	8006520 <_dtoa_r+0xa10>
 8006544:	4649      	mov	r1, r9
 8006546:	2201      	movs	r2, #1
 8006548:	4658      	mov	r0, fp
 800654a:	f000 fbfd 	bl	8006d48 <__lshift>
 800654e:	4621      	mov	r1, r4
 8006550:	4681      	mov	r9, r0
 8006552:	f000 fc65 	bl	8006e20 <__mcmp>
 8006556:	2800      	cmp	r0, #0
 8006558:	dc03      	bgt.n	8006562 <_dtoa_r+0xa52>
 800655a:	d1e1      	bne.n	8006520 <_dtoa_r+0xa10>
 800655c:	f018 0f01 	tst.w	r8, #1
 8006560:	d0de      	beq.n	8006520 <_dtoa_r+0xa10>
 8006562:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006566:	d1d8      	bne.n	800651a <_dtoa_r+0xa0a>
 8006568:	9a00      	ldr	r2, [sp, #0]
 800656a:	2339      	movs	r3, #57	@ 0x39
 800656c:	7013      	strb	r3, [r2, #0]
 800656e:	4633      	mov	r3, r6
 8006570:	461e      	mov	r6, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006578:	2a39      	cmp	r2, #57	@ 0x39
 800657a:	d052      	beq.n	8006622 <_dtoa_r+0xb12>
 800657c:	3201      	adds	r2, #1
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	e612      	b.n	80061a8 <_dtoa_r+0x698>
 8006582:	2a00      	cmp	r2, #0
 8006584:	dd07      	ble.n	8006596 <_dtoa_r+0xa86>
 8006586:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800658a:	d0ed      	beq.n	8006568 <_dtoa_r+0xa58>
 800658c:	9a00      	ldr	r2, [sp, #0]
 800658e:	f108 0301 	add.w	r3, r8, #1
 8006592:	7013      	strb	r3, [r2, #0]
 8006594:	e608      	b.n	80061a8 <_dtoa_r+0x698>
 8006596:	9b07      	ldr	r3, [sp, #28]
 8006598:	9a07      	ldr	r2, [sp, #28]
 800659a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800659e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d028      	beq.n	80065f6 <_dtoa_r+0xae6>
 80065a4:	4649      	mov	r1, r9
 80065a6:	2300      	movs	r3, #0
 80065a8:	220a      	movs	r2, #10
 80065aa:	4658      	mov	r0, fp
 80065ac:	f000 f9d6 	bl	800695c <__multadd>
 80065b0:	42af      	cmp	r7, r5
 80065b2:	4681      	mov	r9, r0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	f04f 020a 	mov.w	r2, #10
 80065bc:	4639      	mov	r1, r7
 80065be:	4658      	mov	r0, fp
 80065c0:	d107      	bne.n	80065d2 <_dtoa_r+0xac2>
 80065c2:	f000 f9cb 	bl	800695c <__multadd>
 80065c6:	4607      	mov	r7, r0
 80065c8:	4605      	mov	r5, r0
 80065ca:	9b07      	ldr	r3, [sp, #28]
 80065cc:	3301      	adds	r3, #1
 80065ce:	9307      	str	r3, [sp, #28]
 80065d0:	e774      	b.n	80064bc <_dtoa_r+0x9ac>
 80065d2:	f000 f9c3 	bl	800695c <__multadd>
 80065d6:	4629      	mov	r1, r5
 80065d8:	4607      	mov	r7, r0
 80065da:	2300      	movs	r3, #0
 80065dc:	220a      	movs	r2, #10
 80065de:	4658      	mov	r0, fp
 80065e0:	f000 f9bc 	bl	800695c <__multadd>
 80065e4:	4605      	mov	r5, r0
 80065e6:	e7f0      	b.n	80065ca <_dtoa_r+0xaba>
 80065e8:	9b00      	ldr	r3, [sp, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bfcc      	ite	gt
 80065ee:	461e      	movgt	r6, r3
 80065f0:	2601      	movle	r6, #1
 80065f2:	4456      	add	r6, sl
 80065f4:	2700      	movs	r7, #0
 80065f6:	4649      	mov	r1, r9
 80065f8:	2201      	movs	r2, #1
 80065fa:	4658      	mov	r0, fp
 80065fc:	f000 fba4 	bl	8006d48 <__lshift>
 8006600:	4621      	mov	r1, r4
 8006602:	4681      	mov	r9, r0
 8006604:	f000 fc0c 	bl	8006e20 <__mcmp>
 8006608:	2800      	cmp	r0, #0
 800660a:	dcb0      	bgt.n	800656e <_dtoa_r+0xa5e>
 800660c:	d102      	bne.n	8006614 <_dtoa_r+0xb04>
 800660e:	f018 0f01 	tst.w	r8, #1
 8006612:	d1ac      	bne.n	800656e <_dtoa_r+0xa5e>
 8006614:	4633      	mov	r3, r6
 8006616:	461e      	mov	r6, r3
 8006618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800661c:	2a30      	cmp	r2, #48	@ 0x30
 800661e:	d0fa      	beq.n	8006616 <_dtoa_r+0xb06>
 8006620:	e5c2      	b.n	80061a8 <_dtoa_r+0x698>
 8006622:	459a      	cmp	sl, r3
 8006624:	d1a4      	bne.n	8006570 <_dtoa_r+0xa60>
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	3301      	adds	r3, #1
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	2331      	movs	r3, #49	@ 0x31
 800662e:	f88a 3000 	strb.w	r3, [sl]
 8006632:	e5b9      	b.n	80061a8 <_dtoa_r+0x698>
 8006634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006636:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006694 <_dtoa_r+0xb84>
 800663a:	b11b      	cbz	r3, 8006644 <_dtoa_r+0xb34>
 800663c:	f10a 0308 	add.w	r3, sl, #8
 8006640:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	4650      	mov	r0, sl
 8006646:	b019      	add	sp, #100	@ 0x64
 8006648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800664e:	2b01      	cmp	r3, #1
 8006650:	f77f ae37 	ble.w	80062c2 <_dtoa_r+0x7b2>
 8006654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006656:	930a      	str	r3, [sp, #40]	@ 0x28
 8006658:	2001      	movs	r0, #1
 800665a:	e655      	b.n	8006308 <_dtoa_r+0x7f8>
 800665c:	9b00      	ldr	r3, [sp, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f77f aed6 	ble.w	8006410 <_dtoa_r+0x900>
 8006664:	4656      	mov	r6, sl
 8006666:	4621      	mov	r1, r4
 8006668:	4648      	mov	r0, r9
 800666a:	f7ff f9c9 	bl	8005a00 <quorem>
 800666e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006672:	f806 8b01 	strb.w	r8, [r6], #1
 8006676:	9b00      	ldr	r3, [sp, #0]
 8006678:	eba6 020a 	sub.w	r2, r6, sl
 800667c:	4293      	cmp	r3, r2
 800667e:	ddb3      	ble.n	80065e8 <_dtoa_r+0xad8>
 8006680:	4649      	mov	r1, r9
 8006682:	2300      	movs	r3, #0
 8006684:	220a      	movs	r2, #10
 8006686:	4658      	mov	r0, fp
 8006688:	f000 f968 	bl	800695c <__multadd>
 800668c:	4681      	mov	r9, r0
 800668e:	e7ea      	b.n	8006666 <_dtoa_r+0xb56>
 8006690:	0800959e 	.word	0x0800959e
 8006694:	08009522 	.word	0x08009522

08006698 <_free_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4605      	mov	r5, r0
 800669c:	2900      	cmp	r1, #0
 800669e:	d041      	beq.n	8006724 <_free_r+0x8c>
 80066a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a4:	1f0c      	subs	r4, r1, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bfb8      	it	lt
 80066aa:	18e4      	addlt	r4, r4, r3
 80066ac:	f000 f8e8 	bl	8006880 <__malloc_lock>
 80066b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006728 <_free_r+0x90>)
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	b933      	cbnz	r3, 80066c4 <_free_r+0x2c>
 80066b6:	6063      	str	r3, [r4, #4]
 80066b8:	6014      	str	r4, [r2, #0]
 80066ba:	4628      	mov	r0, r5
 80066bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066c0:	f000 b8e4 	b.w	800688c <__malloc_unlock>
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	d908      	bls.n	80066da <_free_r+0x42>
 80066c8:	6820      	ldr	r0, [r4, #0]
 80066ca:	1821      	adds	r1, r4, r0
 80066cc:	428b      	cmp	r3, r1
 80066ce:	bf01      	itttt	eq
 80066d0:	6819      	ldreq	r1, [r3, #0]
 80066d2:	685b      	ldreq	r3, [r3, #4]
 80066d4:	1809      	addeq	r1, r1, r0
 80066d6:	6021      	streq	r1, [r4, #0]
 80066d8:	e7ed      	b.n	80066b6 <_free_r+0x1e>
 80066da:	461a      	mov	r2, r3
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	b10b      	cbz	r3, 80066e4 <_free_r+0x4c>
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	d9fa      	bls.n	80066da <_free_r+0x42>
 80066e4:	6811      	ldr	r1, [r2, #0]
 80066e6:	1850      	adds	r0, r2, r1
 80066e8:	42a0      	cmp	r0, r4
 80066ea:	d10b      	bne.n	8006704 <_free_r+0x6c>
 80066ec:	6820      	ldr	r0, [r4, #0]
 80066ee:	4401      	add	r1, r0
 80066f0:	1850      	adds	r0, r2, r1
 80066f2:	4283      	cmp	r3, r0
 80066f4:	6011      	str	r1, [r2, #0]
 80066f6:	d1e0      	bne.n	80066ba <_free_r+0x22>
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	6053      	str	r3, [r2, #4]
 80066fe:	4408      	add	r0, r1
 8006700:	6010      	str	r0, [r2, #0]
 8006702:	e7da      	b.n	80066ba <_free_r+0x22>
 8006704:	d902      	bls.n	800670c <_free_r+0x74>
 8006706:	230c      	movs	r3, #12
 8006708:	602b      	str	r3, [r5, #0]
 800670a:	e7d6      	b.n	80066ba <_free_r+0x22>
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	1821      	adds	r1, r4, r0
 8006710:	428b      	cmp	r3, r1
 8006712:	bf04      	itt	eq
 8006714:	6819      	ldreq	r1, [r3, #0]
 8006716:	685b      	ldreq	r3, [r3, #4]
 8006718:	6063      	str	r3, [r4, #4]
 800671a:	bf04      	itt	eq
 800671c:	1809      	addeq	r1, r1, r0
 800671e:	6021      	streq	r1, [r4, #0]
 8006720:	6054      	str	r4, [r2, #4]
 8006722:	e7ca      	b.n	80066ba <_free_r+0x22>
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	bf00      	nop
 8006728:	20000af8 	.word	0x20000af8

0800672c <malloc>:
 800672c:	4b02      	ldr	r3, [pc, #8]	@ (8006738 <malloc+0xc>)
 800672e:	4601      	mov	r1, r0
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	f000 b825 	b.w	8006780 <_malloc_r>
 8006736:	bf00      	nop
 8006738:	2000001c 	.word	0x2000001c

0800673c <sbrk_aligned>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	4e0f      	ldr	r6, [pc, #60]	@ (800677c <sbrk_aligned+0x40>)
 8006740:	460c      	mov	r4, r1
 8006742:	6831      	ldr	r1, [r6, #0]
 8006744:	4605      	mov	r5, r0
 8006746:	b911      	cbnz	r1, 800674e <sbrk_aligned+0x12>
 8006748:	f001 ff9a 	bl	8008680 <_sbrk_r>
 800674c:	6030      	str	r0, [r6, #0]
 800674e:	4621      	mov	r1, r4
 8006750:	4628      	mov	r0, r5
 8006752:	f001 ff95 	bl	8008680 <_sbrk_r>
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d103      	bne.n	8006762 <sbrk_aligned+0x26>
 800675a:	f04f 34ff 	mov.w	r4, #4294967295
 800675e:	4620      	mov	r0, r4
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	1cc4      	adds	r4, r0, #3
 8006764:	f024 0403 	bic.w	r4, r4, #3
 8006768:	42a0      	cmp	r0, r4
 800676a:	d0f8      	beq.n	800675e <sbrk_aligned+0x22>
 800676c:	1a21      	subs	r1, r4, r0
 800676e:	4628      	mov	r0, r5
 8006770:	f001 ff86 	bl	8008680 <_sbrk_r>
 8006774:	3001      	adds	r0, #1
 8006776:	d1f2      	bne.n	800675e <sbrk_aligned+0x22>
 8006778:	e7ef      	b.n	800675a <sbrk_aligned+0x1e>
 800677a:	bf00      	nop
 800677c:	20000af4 	.word	0x20000af4

08006780 <_malloc_r>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	1ccd      	adds	r5, r1, #3
 8006786:	f025 0503 	bic.w	r5, r5, #3
 800678a:	3508      	adds	r5, #8
 800678c:	2d0c      	cmp	r5, #12
 800678e:	bf38      	it	cc
 8006790:	250c      	movcc	r5, #12
 8006792:	2d00      	cmp	r5, #0
 8006794:	4606      	mov	r6, r0
 8006796:	db01      	blt.n	800679c <_malloc_r+0x1c>
 8006798:	42a9      	cmp	r1, r5
 800679a:	d904      	bls.n	80067a6 <_malloc_r+0x26>
 800679c:	230c      	movs	r3, #12
 800679e:	6033      	str	r3, [r6, #0]
 80067a0:	2000      	movs	r0, #0
 80067a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800687c <_malloc_r+0xfc>
 80067aa:	f000 f869 	bl	8006880 <__malloc_lock>
 80067ae:	f8d8 3000 	ldr.w	r3, [r8]
 80067b2:	461c      	mov	r4, r3
 80067b4:	bb44      	cbnz	r4, 8006808 <_malloc_r+0x88>
 80067b6:	4629      	mov	r1, r5
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff ffbf 	bl	800673c <sbrk_aligned>
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	4604      	mov	r4, r0
 80067c2:	d158      	bne.n	8006876 <_malloc_r+0xf6>
 80067c4:	f8d8 4000 	ldr.w	r4, [r8]
 80067c8:	4627      	mov	r7, r4
 80067ca:	2f00      	cmp	r7, #0
 80067cc:	d143      	bne.n	8006856 <_malloc_r+0xd6>
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	d04b      	beq.n	800686a <_malloc_r+0xea>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	4639      	mov	r1, r7
 80067d6:	4630      	mov	r0, r6
 80067d8:	eb04 0903 	add.w	r9, r4, r3
 80067dc:	f001 ff50 	bl	8008680 <_sbrk_r>
 80067e0:	4581      	cmp	r9, r0
 80067e2:	d142      	bne.n	800686a <_malloc_r+0xea>
 80067e4:	6821      	ldr	r1, [r4, #0]
 80067e6:	1a6d      	subs	r5, r5, r1
 80067e8:	4629      	mov	r1, r5
 80067ea:	4630      	mov	r0, r6
 80067ec:	f7ff ffa6 	bl	800673c <sbrk_aligned>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d03a      	beq.n	800686a <_malloc_r+0xea>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	442b      	add	r3, r5
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	f8d8 3000 	ldr.w	r3, [r8]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	bb62      	cbnz	r2, 800685c <_malloc_r+0xdc>
 8006802:	f8c8 7000 	str.w	r7, [r8]
 8006806:	e00f      	b.n	8006828 <_malloc_r+0xa8>
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	1b52      	subs	r2, r2, r5
 800680c:	d420      	bmi.n	8006850 <_malloc_r+0xd0>
 800680e:	2a0b      	cmp	r2, #11
 8006810:	d917      	bls.n	8006842 <_malloc_r+0xc2>
 8006812:	1961      	adds	r1, r4, r5
 8006814:	42a3      	cmp	r3, r4
 8006816:	6025      	str	r5, [r4, #0]
 8006818:	bf18      	it	ne
 800681a:	6059      	strne	r1, [r3, #4]
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	bf08      	it	eq
 8006820:	f8c8 1000 	streq.w	r1, [r8]
 8006824:	5162      	str	r2, [r4, r5]
 8006826:	604b      	str	r3, [r1, #4]
 8006828:	4630      	mov	r0, r6
 800682a:	f000 f82f 	bl	800688c <__malloc_unlock>
 800682e:	f104 000b 	add.w	r0, r4, #11
 8006832:	1d23      	adds	r3, r4, #4
 8006834:	f020 0007 	bic.w	r0, r0, #7
 8006838:	1ac2      	subs	r2, r0, r3
 800683a:	bf1c      	itt	ne
 800683c:	1a1b      	subne	r3, r3, r0
 800683e:	50a3      	strne	r3, [r4, r2]
 8006840:	e7af      	b.n	80067a2 <_malloc_r+0x22>
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	42a3      	cmp	r3, r4
 8006846:	bf0c      	ite	eq
 8006848:	f8c8 2000 	streq.w	r2, [r8]
 800684c:	605a      	strne	r2, [r3, #4]
 800684e:	e7eb      	b.n	8006828 <_malloc_r+0xa8>
 8006850:	4623      	mov	r3, r4
 8006852:	6864      	ldr	r4, [r4, #4]
 8006854:	e7ae      	b.n	80067b4 <_malloc_r+0x34>
 8006856:	463c      	mov	r4, r7
 8006858:	687f      	ldr	r7, [r7, #4]
 800685a:	e7b6      	b.n	80067ca <_malloc_r+0x4a>
 800685c:	461a      	mov	r2, r3
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	42a3      	cmp	r3, r4
 8006862:	d1fb      	bne.n	800685c <_malloc_r+0xdc>
 8006864:	2300      	movs	r3, #0
 8006866:	6053      	str	r3, [r2, #4]
 8006868:	e7de      	b.n	8006828 <_malloc_r+0xa8>
 800686a:	230c      	movs	r3, #12
 800686c:	6033      	str	r3, [r6, #0]
 800686e:	4630      	mov	r0, r6
 8006870:	f000 f80c 	bl	800688c <__malloc_unlock>
 8006874:	e794      	b.n	80067a0 <_malloc_r+0x20>
 8006876:	6005      	str	r5, [r0, #0]
 8006878:	e7d6      	b.n	8006828 <_malloc_r+0xa8>
 800687a:	bf00      	nop
 800687c:	20000af8 	.word	0x20000af8

08006880 <__malloc_lock>:
 8006880:	4801      	ldr	r0, [pc, #4]	@ (8006888 <__malloc_lock+0x8>)
 8006882:	f7ff b8b4 	b.w	80059ee <__retarget_lock_acquire_recursive>
 8006886:	bf00      	nop
 8006888:	20000af0 	.word	0x20000af0

0800688c <__malloc_unlock>:
 800688c:	4801      	ldr	r0, [pc, #4]	@ (8006894 <__malloc_unlock+0x8>)
 800688e:	f7ff b8af 	b.w	80059f0 <__retarget_lock_release_recursive>
 8006892:	bf00      	nop
 8006894:	20000af0 	.word	0x20000af0

08006898 <_Balloc>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	69c6      	ldr	r6, [r0, #28]
 800689c:	4604      	mov	r4, r0
 800689e:	460d      	mov	r5, r1
 80068a0:	b976      	cbnz	r6, 80068c0 <_Balloc+0x28>
 80068a2:	2010      	movs	r0, #16
 80068a4:	f7ff ff42 	bl	800672c <malloc>
 80068a8:	4602      	mov	r2, r0
 80068aa:	61e0      	str	r0, [r4, #28]
 80068ac:	b920      	cbnz	r0, 80068b8 <_Balloc+0x20>
 80068ae:	4b18      	ldr	r3, [pc, #96]	@ (8006910 <_Balloc+0x78>)
 80068b0:	4818      	ldr	r0, [pc, #96]	@ (8006914 <_Balloc+0x7c>)
 80068b2:	216b      	movs	r1, #107	@ 0x6b
 80068b4:	f001 ff0c 	bl	80086d0 <__assert_func>
 80068b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068bc:	6006      	str	r6, [r0, #0]
 80068be:	60c6      	str	r6, [r0, #12]
 80068c0:	69e6      	ldr	r6, [r4, #28]
 80068c2:	68f3      	ldr	r3, [r6, #12]
 80068c4:	b183      	cbz	r3, 80068e8 <_Balloc+0x50>
 80068c6:	69e3      	ldr	r3, [r4, #28]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068ce:	b9b8      	cbnz	r0, 8006900 <_Balloc+0x68>
 80068d0:	2101      	movs	r1, #1
 80068d2:	fa01 f605 	lsl.w	r6, r1, r5
 80068d6:	1d72      	adds	r2, r6, #5
 80068d8:	0092      	lsls	r2, r2, #2
 80068da:	4620      	mov	r0, r4
 80068dc:	f001 ff16 	bl	800870c <_calloc_r>
 80068e0:	b160      	cbz	r0, 80068fc <_Balloc+0x64>
 80068e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068e6:	e00e      	b.n	8006906 <_Balloc+0x6e>
 80068e8:	2221      	movs	r2, #33	@ 0x21
 80068ea:	2104      	movs	r1, #4
 80068ec:	4620      	mov	r0, r4
 80068ee:	f001 ff0d 	bl	800870c <_calloc_r>
 80068f2:	69e3      	ldr	r3, [r4, #28]
 80068f4:	60f0      	str	r0, [r6, #12]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e4      	bne.n	80068c6 <_Balloc+0x2e>
 80068fc:	2000      	movs	r0, #0
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	6802      	ldr	r2, [r0, #0]
 8006902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006906:	2300      	movs	r3, #0
 8006908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800690c:	e7f7      	b.n	80068fe <_Balloc+0x66>
 800690e:	bf00      	nop
 8006910:	0800952f 	.word	0x0800952f
 8006914:	080095af 	.word	0x080095af

08006918 <_Bfree>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	69c6      	ldr	r6, [r0, #28]
 800691c:	4605      	mov	r5, r0
 800691e:	460c      	mov	r4, r1
 8006920:	b976      	cbnz	r6, 8006940 <_Bfree+0x28>
 8006922:	2010      	movs	r0, #16
 8006924:	f7ff ff02 	bl	800672c <malloc>
 8006928:	4602      	mov	r2, r0
 800692a:	61e8      	str	r0, [r5, #28]
 800692c:	b920      	cbnz	r0, 8006938 <_Bfree+0x20>
 800692e:	4b09      	ldr	r3, [pc, #36]	@ (8006954 <_Bfree+0x3c>)
 8006930:	4809      	ldr	r0, [pc, #36]	@ (8006958 <_Bfree+0x40>)
 8006932:	218f      	movs	r1, #143	@ 0x8f
 8006934:	f001 fecc 	bl	80086d0 <__assert_func>
 8006938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800693c:	6006      	str	r6, [r0, #0]
 800693e:	60c6      	str	r6, [r0, #12]
 8006940:	b13c      	cbz	r4, 8006952 <_Bfree+0x3a>
 8006942:	69eb      	ldr	r3, [r5, #28]
 8006944:	6862      	ldr	r2, [r4, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800694c:	6021      	str	r1, [r4, #0]
 800694e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	0800952f 	.word	0x0800952f
 8006958:	080095af 	.word	0x080095af

0800695c <__multadd>:
 800695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	690d      	ldr	r5, [r1, #16]
 8006962:	4607      	mov	r7, r0
 8006964:	460c      	mov	r4, r1
 8006966:	461e      	mov	r6, r3
 8006968:	f101 0c14 	add.w	ip, r1, #20
 800696c:	2000      	movs	r0, #0
 800696e:	f8dc 3000 	ldr.w	r3, [ip]
 8006972:	b299      	uxth	r1, r3
 8006974:	fb02 6101 	mla	r1, r2, r1, r6
 8006978:	0c1e      	lsrs	r6, r3, #16
 800697a:	0c0b      	lsrs	r3, r1, #16
 800697c:	fb02 3306 	mla	r3, r2, r6, r3
 8006980:	b289      	uxth	r1, r1
 8006982:	3001      	adds	r0, #1
 8006984:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006988:	4285      	cmp	r5, r0
 800698a:	f84c 1b04 	str.w	r1, [ip], #4
 800698e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006992:	dcec      	bgt.n	800696e <__multadd+0x12>
 8006994:	b30e      	cbz	r6, 80069da <__multadd+0x7e>
 8006996:	68a3      	ldr	r3, [r4, #8]
 8006998:	42ab      	cmp	r3, r5
 800699a:	dc19      	bgt.n	80069d0 <__multadd+0x74>
 800699c:	6861      	ldr	r1, [r4, #4]
 800699e:	4638      	mov	r0, r7
 80069a0:	3101      	adds	r1, #1
 80069a2:	f7ff ff79 	bl	8006898 <_Balloc>
 80069a6:	4680      	mov	r8, r0
 80069a8:	b928      	cbnz	r0, 80069b6 <__multadd+0x5a>
 80069aa:	4602      	mov	r2, r0
 80069ac:	4b0c      	ldr	r3, [pc, #48]	@ (80069e0 <__multadd+0x84>)
 80069ae:	480d      	ldr	r0, [pc, #52]	@ (80069e4 <__multadd+0x88>)
 80069b0:	21ba      	movs	r1, #186	@ 0xba
 80069b2:	f001 fe8d 	bl	80086d0 <__assert_func>
 80069b6:	6922      	ldr	r2, [r4, #16]
 80069b8:	3202      	adds	r2, #2
 80069ba:	f104 010c 	add.w	r1, r4, #12
 80069be:	0092      	lsls	r2, r2, #2
 80069c0:	300c      	adds	r0, #12
 80069c2:	f001 fe6d 	bl	80086a0 <memcpy>
 80069c6:	4621      	mov	r1, r4
 80069c8:	4638      	mov	r0, r7
 80069ca:	f7ff ffa5 	bl	8006918 <_Bfree>
 80069ce:	4644      	mov	r4, r8
 80069d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069d4:	3501      	adds	r5, #1
 80069d6:	615e      	str	r6, [r3, #20]
 80069d8:	6125      	str	r5, [r4, #16]
 80069da:	4620      	mov	r0, r4
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e0:	0800959e 	.word	0x0800959e
 80069e4:	080095af 	.word	0x080095af

080069e8 <__s2b>:
 80069e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ec:	460c      	mov	r4, r1
 80069ee:	4615      	mov	r5, r2
 80069f0:	461f      	mov	r7, r3
 80069f2:	2209      	movs	r2, #9
 80069f4:	3308      	adds	r3, #8
 80069f6:	4606      	mov	r6, r0
 80069f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80069fc:	2100      	movs	r1, #0
 80069fe:	2201      	movs	r2, #1
 8006a00:	429a      	cmp	r2, r3
 8006a02:	db09      	blt.n	8006a18 <__s2b+0x30>
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7ff ff47 	bl	8006898 <_Balloc>
 8006a0a:	b940      	cbnz	r0, 8006a1e <__s2b+0x36>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	4b19      	ldr	r3, [pc, #100]	@ (8006a74 <__s2b+0x8c>)
 8006a10:	4819      	ldr	r0, [pc, #100]	@ (8006a78 <__s2b+0x90>)
 8006a12:	21d3      	movs	r1, #211	@ 0xd3
 8006a14:	f001 fe5c 	bl	80086d0 <__assert_func>
 8006a18:	0052      	lsls	r2, r2, #1
 8006a1a:	3101      	adds	r1, #1
 8006a1c:	e7f0      	b.n	8006a00 <__s2b+0x18>
 8006a1e:	9b08      	ldr	r3, [sp, #32]
 8006a20:	6143      	str	r3, [r0, #20]
 8006a22:	2d09      	cmp	r5, #9
 8006a24:	f04f 0301 	mov.w	r3, #1
 8006a28:	6103      	str	r3, [r0, #16]
 8006a2a:	dd16      	ble.n	8006a5a <__s2b+0x72>
 8006a2c:	f104 0909 	add.w	r9, r4, #9
 8006a30:	46c8      	mov	r8, r9
 8006a32:	442c      	add	r4, r5
 8006a34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a38:	4601      	mov	r1, r0
 8006a3a:	3b30      	subs	r3, #48	@ 0x30
 8006a3c:	220a      	movs	r2, #10
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f7ff ff8c 	bl	800695c <__multadd>
 8006a44:	45a0      	cmp	r8, r4
 8006a46:	d1f5      	bne.n	8006a34 <__s2b+0x4c>
 8006a48:	f1a5 0408 	sub.w	r4, r5, #8
 8006a4c:	444c      	add	r4, r9
 8006a4e:	1b2d      	subs	r5, r5, r4
 8006a50:	1963      	adds	r3, r4, r5
 8006a52:	42bb      	cmp	r3, r7
 8006a54:	db04      	blt.n	8006a60 <__s2b+0x78>
 8006a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a5a:	340a      	adds	r4, #10
 8006a5c:	2509      	movs	r5, #9
 8006a5e:	e7f6      	b.n	8006a4e <__s2b+0x66>
 8006a60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a64:	4601      	mov	r1, r0
 8006a66:	3b30      	subs	r3, #48	@ 0x30
 8006a68:	220a      	movs	r2, #10
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7ff ff76 	bl	800695c <__multadd>
 8006a70:	e7ee      	b.n	8006a50 <__s2b+0x68>
 8006a72:	bf00      	nop
 8006a74:	0800959e 	.word	0x0800959e
 8006a78:	080095af 	.word	0x080095af

08006a7c <__hi0bits>:
 8006a7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a80:	4603      	mov	r3, r0
 8006a82:	bf36      	itet	cc
 8006a84:	0403      	lslcc	r3, r0, #16
 8006a86:	2000      	movcs	r0, #0
 8006a88:	2010      	movcc	r0, #16
 8006a8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a8e:	bf3c      	itt	cc
 8006a90:	021b      	lslcc	r3, r3, #8
 8006a92:	3008      	addcc	r0, #8
 8006a94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a98:	bf3c      	itt	cc
 8006a9a:	011b      	lslcc	r3, r3, #4
 8006a9c:	3004      	addcc	r0, #4
 8006a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa2:	bf3c      	itt	cc
 8006aa4:	009b      	lslcc	r3, r3, #2
 8006aa6:	3002      	addcc	r0, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	db05      	blt.n	8006ab8 <__hi0bits+0x3c>
 8006aac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ab0:	f100 0001 	add.w	r0, r0, #1
 8006ab4:	bf08      	it	eq
 8006ab6:	2020      	moveq	r0, #32
 8006ab8:	4770      	bx	lr

08006aba <__lo0bits>:
 8006aba:	6803      	ldr	r3, [r0, #0]
 8006abc:	4602      	mov	r2, r0
 8006abe:	f013 0007 	ands.w	r0, r3, #7
 8006ac2:	d00b      	beq.n	8006adc <__lo0bits+0x22>
 8006ac4:	07d9      	lsls	r1, r3, #31
 8006ac6:	d421      	bmi.n	8006b0c <__lo0bits+0x52>
 8006ac8:	0798      	lsls	r0, r3, #30
 8006aca:	bf49      	itett	mi
 8006acc:	085b      	lsrmi	r3, r3, #1
 8006ace:	089b      	lsrpl	r3, r3, #2
 8006ad0:	2001      	movmi	r0, #1
 8006ad2:	6013      	strmi	r3, [r2, #0]
 8006ad4:	bf5c      	itt	pl
 8006ad6:	6013      	strpl	r3, [r2, #0]
 8006ad8:	2002      	movpl	r0, #2
 8006ada:	4770      	bx	lr
 8006adc:	b299      	uxth	r1, r3
 8006ade:	b909      	cbnz	r1, 8006ae4 <__lo0bits+0x2a>
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	2010      	movs	r0, #16
 8006ae4:	b2d9      	uxtb	r1, r3
 8006ae6:	b909      	cbnz	r1, 8006aec <__lo0bits+0x32>
 8006ae8:	3008      	adds	r0, #8
 8006aea:	0a1b      	lsrs	r3, r3, #8
 8006aec:	0719      	lsls	r1, r3, #28
 8006aee:	bf04      	itt	eq
 8006af0:	091b      	lsreq	r3, r3, #4
 8006af2:	3004      	addeq	r0, #4
 8006af4:	0799      	lsls	r1, r3, #30
 8006af6:	bf04      	itt	eq
 8006af8:	089b      	lsreq	r3, r3, #2
 8006afa:	3002      	addeq	r0, #2
 8006afc:	07d9      	lsls	r1, r3, #31
 8006afe:	d403      	bmi.n	8006b08 <__lo0bits+0x4e>
 8006b00:	085b      	lsrs	r3, r3, #1
 8006b02:	f100 0001 	add.w	r0, r0, #1
 8006b06:	d003      	beq.n	8006b10 <__lo0bits+0x56>
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	4770      	bx	lr
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	4770      	bx	lr
 8006b10:	2020      	movs	r0, #32
 8006b12:	4770      	bx	lr

08006b14 <__i2b>:
 8006b14:	b510      	push	{r4, lr}
 8006b16:	460c      	mov	r4, r1
 8006b18:	2101      	movs	r1, #1
 8006b1a:	f7ff febd 	bl	8006898 <_Balloc>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	b928      	cbnz	r0, 8006b2e <__i2b+0x1a>
 8006b22:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <__i2b+0x24>)
 8006b24:	4805      	ldr	r0, [pc, #20]	@ (8006b3c <__i2b+0x28>)
 8006b26:	f240 1145 	movw	r1, #325	@ 0x145
 8006b2a:	f001 fdd1 	bl	80086d0 <__assert_func>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	6144      	str	r4, [r0, #20]
 8006b32:	6103      	str	r3, [r0, #16]
 8006b34:	bd10      	pop	{r4, pc}
 8006b36:	bf00      	nop
 8006b38:	0800959e 	.word	0x0800959e
 8006b3c:	080095af 	.word	0x080095af

08006b40 <__multiply>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	4614      	mov	r4, r2
 8006b46:	690a      	ldr	r2, [r1, #16]
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	bfa8      	it	ge
 8006b4e:	4623      	movge	r3, r4
 8006b50:	460f      	mov	r7, r1
 8006b52:	bfa4      	itt	ge
 8006b54:	460c      	movge	r4, r1
 8006b56:	461f      	movge	r7, r3
 8006b58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006b5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006b60:	68a3      	ldr	r3, [r4, #8]
 8006b62:	6861      	ldr	r1, [r4, #4]
 8006b64:	eb0a 0609 	add.w	r6, sl, r9
 8006b68:	42b3      	cmp	r3, r6
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	bfb8      	it	lt
 8006b6e:	3101      	addlt	r1, #1
 8006b70:	f7ff fe92 	bl	8006898 <_Balloc>
 8006b74:	b930      	cbnz	r0, 8006b84 <__multiply+0x44>
 8006b76:	4602      	mov	r2, r0
 8006b78:	4b44      	ldr	r3, [pc, #272]	@ (8006c8c <__multiply+0x14c>)
 8006b7a:	4845      	ldr	r0, [pc, #276]	@ (8006c90 <__multiply+0x150>)
 8006b7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006b80:	f001 fda6 	bl	80086d0 <__assert_func>
 8006b84:	f100 0514 	add.w	r5, r0, #20
 8006b88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4543      	cmp	r3, r8
 8006b92:	d321      	bcc.n	8006bd8 <__multiply+0x98>
 8006b94:	f107 0114 	add.w	r1, r7, #20
 8006b98:	f104 0214 	add.w	r2, r4, #20
 8006b9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006ba0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ba4:	9302      	str	r3, [sp, #8]
 8006ba6:	1b13      	subs	r3, r2, r4
 8006ba8:	3b15      	subs	r3, #21
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	3304      	adds	r3, #4
 8006bb0:	f104 0715 	add.w	r7, r4, #21
 8006bb4:	42ba      	cmp	r2, r7
 8006bb6:	bf38      	it	cc
 8006bb8:	2304      	movcc	r3, #4
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	9b02      	ldr	r3, [sp, #8]
 8006bbe:	9103      	str	r1, [sp, #12]
 8006bc0:	428b      	cmp	r3, r1
 8006bc2:	d80c      	bhi.n	8006bde <__multiply+0x9e>
 8006bc4:	2e00      	cmp	r6, #0
 8006bc6:	dd03      	ble.n	8006bd0 <__multiply+0x90>
 8006bc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d05b      	beq.n	8006c88 <__multiply+0x148>
 8006bd0:	6106      	str	r6, [r0, #16]
 8006bd2:	b005      	add	sp, #20
 8006bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd8:	f843 2b04 	str.w	r2, [r3], #4
 8006bdc:	e7d8      	b.n	8006b90 <__multiply+0x50>
 8006bde:	f8b1 a000 	ldrh.w	sl, [r1]
 8006be2:	f1ba 0f00 	cmp.w	sl, #0
 8006be6:	d024      	beq.n	8006c32 <__multiply+0xf2>
 8006be8:	f104 0e14 	add.w	lr, r4, #20
 8006bec:	46a9      	mov	r9, r5
 8006bee:	f04f 0c00 	mov.w	ip, #0
 8006bf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006bf6:	f8d9 3000 	ldr.w	r3, [r9]
 8006bfa:	fa1f fb87 	uxth.w	fp, r7
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c08:	f8d9 7000 	ldr.w	r7, [r9]
 8006c0c:	4463      	add	r3, ip
 8006c0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c12:	fb0a c70b 	mla	r7, sl, fp, ip
 8006c16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c20:	4572      	cmp	r2, lr
 8006c22:	f849 3b04 	str.w	r3, [r9], #4
 8006c26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c2a:	d8e2      	bhi.n	8006bf2 <__multiply+0xb2>
 8006c2c:	9b01      	ldr	r3, [sp, #4]
 8006c2e:	f845 c003 	str.w	ip, [r5, r3]
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c38:	3104      	adds	r1, #4
 8006c3a:	f1b9 0f00 	cmp.w	r9, #0
 8006c3e:	d021      	beq.n	8006c84 <__multiply+0x144>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	f104 0c14 	add.w	ip, r4, #20
 8006c46:	46ae      	mov	lr, r5
 8006c48:	f04f 0a00 	mov.w	sl, #0
 8006c4c:	f8bc b000 	ldrh.w	fp, [ip]
 8006c50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006c54:	fb09 770b 	mla	r7, r9, fp, r7
 8006c58:	4457      	add	r7, sl
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c60:	f84e 3b04 	str.w	r3, [lr], #4
 8006c64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c6c:	f8be 3000 	ldrh.w	r3, [lr]
 8006c70:	fb09 330a 	mla	r3, r9, sl, r3
 8006c74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006c78:	4562      	cmp	r2, ip
 8006c7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c7e:	d8e5      	bhi.n	8006c4c <__multiply+0x10c>
 8006c80:	9f01      	ldr	r7, [sp, #4]
 8006c82:	51eb      	str	r3, [r5, r7]
 8006c84:	3504      	adds	r5, #4
 8006c86:	e799      	b.n	8006bbc <__multiply+0x7c>
 8006c88:	3e01      	subs	r6, #1
 8006c8a:	e79b      	b.n	8006bc4 <__multiply+0x84>
 8006c8c:	0800959e 	.word	0x0800959e
 8006c90:	080095af 	.word	0x080095af

08006c94 <__pow5mult>:
 8006c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c98:	4615      	mov	r5, r2
 8006c9a:	f012 0203 	ands.w	r2, r2, #3
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	460e      	mov	r6, r1
 8006ca2:	d007      	beq.n	8006cb4 <__pow5mult+0x20>
 8006ca4:	4c25      	ldr	r4, [pc, #148]	@ (8006d3c <__pow5mult+0xa8>)
 8006ca6:	3a01      	subs	r2, #1
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cae:	f7ff fe55 	bl	800695c <__multadd>
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	10ad      	asrs	r5, r5, #2
 8006cb6:	d03d      	beq.n	8006d34 <__pow5mult+0xa0>
 8006cb8:	69fc      	ldr	r4, [r7, #28]
 8006cba:	b97c      	cbnz	r4, 8006cdc <__pow5mult+0x48>
 8006cbc:	2010      	movs	r0, #16
 8006cbe:	f7ff fd35 	bl	800672c <malloc>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	61f8      	str	r0, [r7, #28]
 8006cc6:	b928      	cbnz	r0, 8006cd4 <__pow5mult+0x40>
 8006cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8006d40 <__pow5mult+0xac>)
 8006cca:	481e      	ldr	r0, [pc, #120]	@ (8006d44 <__pow5mult+0xb0>)
 8006ccc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006cd0:	f001 fcfe 	bl	80086d0 <__assert_func>
 8006cd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cd8:	6004      	str	r4, [r0, #0]
 8006cda:	60c4      	str	r4, [r0, #12]
 8006cdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ce0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ce4:	b94c      	cbnz	r4, 8006cfa <__pow5mult+0x66>
 8006ce6:	f240 2171 	movw	r1, #625	@ 0x271
 8006cea:	4638      	mov	r0, r7
 8006cec:	f7ff ff12 	bl	8006b14 <__i2b>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	6003      	str	r3, [r0, #0]
 8006cfa:	f04f 0900 	mov.w	r9, #0
 8006cfe:	07eb      	lsls	r3, r5, #31
 8006d00:	d50a      	bpl.n	8006d18 <__pow5mult+0x84>
 8006d02:	4631      	mov	r1, r6
 8006d04:	4622      	mov	r2, r4
 8006d06:	4638      	mov	r0, r7
 8006d08:	f7ff ff1a 	bl	8006b40 <__multiply>
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4680      	mov	r8, r0
 8006d10:	4638      	mov	r0, r7
 8006d12:	f7ff fe01 	bl	8006918 <_Bfree>
 8006d16:	4646      	mov	r6, r8
 8006d18:	106d      	asrs	r5, r5, #1
 8006d1a:	d00b      	beq.n	8006d34 <__pow5mult+0xa0>
 8006d1c:	6820      	ldr	r0, [r4, #0]
 8006d1e:	b938      	cbnz	r0, 8006d30 <__pow5mult+0x9c>
 8006d20:	4622      	mov	r2, r4
 8006d22:	4621      	mov	r1, r4
 8006d24:	4638      	mov	r0, r7
 8006d26:	f7ff ff0b 	bl	8006b40 <__multiply>
 8006d2a:	6020      	str	r0, [r4, #0]
 8006d2c:	f8c0 9000 	str.w	r9, [r0]
 8006d30:	4604      	mov	r4, r0
 8006d32:	e7e4      	b.n	8006cfe <__pow5mult+0x6a>
 8006d34:	4630      	mov	r0, r6
 8006d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d3a:	bf00      	nop
 8006d3c:	08009608 	.word	0x08009608
 8006d40:	0800952f 	.word	0x0800952f
 8006d44:	080095af 	.word	0x080095af

08006d48 <__lshift>:
 8006d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	6849      	ldr	r1, [r1, #4]
 8006d50:	6923      	ldr	r3, [r4, #16]
 8006d52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d56:	68a3      	ldr	r3, [r4, #8]
 8006d58:	4607      	mov	r7, r0
 8006d5a:	4691      	mov	r9, r2
 8006d5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d60:	f108 0601 	add.w	r6, r8, #1
 8006d64:	42b3      	cmp	r3, r6
 8006d66:	db0b      	blt.n	8006d80 <__lshift+0x38>
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff fd95 	bl	8006898 <_Balloc>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	b948      	cbnz	r0, 8006d86 <__lshift+0x3e>
 8006d72:	4602      	mov	r2, r0
 8006d74:	4b28      	ldr	r3, [pc, #160]	@ (8006e18 <__lshift+0xd0>)
 8006d76:	4829      	ldr	r0, [pc, #164]	@ (8006e1c <__lshift+0xd4>)
 8006d78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006d7c:	f001 fca8 	bl	80086d0 <__assert_func>
 8006d80:	3101      	adds	r1, #1
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	e7ee      	b.n	8006d64 <__lshift+0x1c>
 8006d86:	2300      	movs	r3, #0
 8006d88:	f100 0114 	add.w	r1, r0, #20
 8006d8c:	f100 0210 	add.w	r2, r0, #16
 8006d90:	4618      	mov	r0, r3
 8006d92:	4553      	cmp	r3, sl
 8006d94:	db33      	blt.n	8006dfe <__lshift+0xb6>
 8006d96:	6920      	ldr	r0, [r4, #16]
 8006d98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d9c:	f104 0314 	add.w	r3, r4, #20
 8006da0:	f019 091f 	ands.w	r9, r9, #31
 8006da4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006da8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dac:	d02b      	beq.n	8006e06 <__lshift+0xbe>
 8006dae:	f1c9 0e20 	rsb	lr, r9, #32
 8006db2:	468a      	mov	sl, r1
 8006db4:	2200      	movs	r2, #0
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	fa00 f009 	lsl.w	r0, r0, r9
 8006dbc:	4310      	orrs	r0, r2
 8006dbe:	f84a 0b04 	str.w	r0, [sl], #4
 8006dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc6:	459c      	cmp	ip, r3
 8006dc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006dcc:	d8f3      	bhi.n	8006db6 <__lshift+0x6e>
 8006dce:	ebac 0304 	sub.w	r3, ip, r4
 8006dd2:	3b15      	subs	r3, #21
 8006dd4:	f023 0303 	bic.w	r3, r3, #3
 8006dd8:	3304      	adds	r3, #4
 8006dda:	f104 0015 	add.w	r0, r4, #21
 8006dde:	4584      	cmp	ip, r0
 8006de0:	bf38      	it	cc
 8006de2:	2304      	movcc	r3, #4
 8006de4:	50ca      	str	r2, [r1, r3]
 8006de6:	b10a      	cbz	r2, 8006dec <__lshift+0xa4>
 8006de8:	f108 0602 	add.w	r6, r8, #2
 8006dec:	3e01      	subs	r6, #1
 8006dee:	4638      	mov	r0, r7
 8006df0:	612e      	str	r6, [r5, #16]
 8006df2:	4621      	mov	r1, r4
 8006df4:	f7ff fd90 	bl	8006918 <_Bfree>
 8006df8:	4628      	mov	r0, r5
 8006dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e02:	3301      	adds	r3, #1
 8006e04:	e7c5      	b.n	8006d92 <__lshift+0x4a>
 8006e06:	3904      	subs	r1, #4
 8006e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e10:	459c      	cmp	ip, r3
 8006e12:	d8f9      	bhi.n	8006e08 <__lshift+0xc0>
 8006e14:	e7ea      	b.n	8006dec <__lshift+0xa4>
 8006e16:	bf00      	nop
 8006e18:	0800959e 	.word	0x0800959e
 8006e1c:	080095af 	.word	0x080095af

08006e20 <__mcmp>:
 8006e20:	690a      	ldr	r2, [r1, #16]
 8006e22:	4603      	mov	r3, r0
 8006e24:	6900      	ldr	r0, [r0, #16]
 8006e26:	1a80      	subs	r0, r0, r2
 8006e28:	b530      	push	{r4, r5, lr}
 8006e2a:	d10e      	bne.n	8006e4a <__mcmp+0x2a>
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	3114      	adds	r1, #20
 8006e30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e40:	4295      	cmp	r5, r2
 8006e42:	d003      	beq.n	8006e4c <__mcmp+0x2c>
 8006e44:	d205      	bcs.n	8006e52 <__mcmp+0x32>
 8006e46:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4a:	bd30      	pop	{r4, r5, pc}
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	d3f3      	bcc.n	8006e38 <__mcmp+0x18>
 8006e50:	e7fb      	b.n	8006e4a <__mcmp+0x2a>
 8006e52:	2001      	movs	r0, #1
 8006e54:	e7f9      	b.n	8006e4a <__mcmp+0x2a>
	...

08006e58 <__mdiff>:
 8006e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	4689      	mov	r9, r1
 8006e5e:	4606      	mov	r6, r0
 8006e60:	4611      	mov	r1, r2
 8006e62:	4648      	mov	r0, r9
 8006e64:	4614      	mov	r4, r2
 8006e66:	f7ff ffdb 	bl	8006e20 <__mcmp>
 8006e6a:	1e05      	subs	r5, r0, #0
 8006e6c:	d112      	bne.n	8006e94 <__mdiff+0x3c>
 8006e6e:	4629      	mov	r1, r5
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7ff fd11 	bl	8006898 <_Balloc>
 8006e76:	4602      	mov	r2, r0
 8006e78:	b928      	cbnz	r0, 8006e86 <__mdiff+0x2e>
 8006e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006f78 <__mdiff+0x120>)
 8006e7c:	f240 2137 	movw	r1, #567	@ 0x237
 8006e80:	483e      	ldr	r0, [pc, #248]	@ (8006f7c <__mdiff+0x124>)
 8006e82:	f001 fc25 	bl	80086d0 <__assert_func>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	b003      	add	sp, #12
 8006e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e94:	bfbc      	itt	lt
 8006e96:	464b      	movlt	r3, r9
 8006e98:	46a1      	movlt	r9, r4
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ea0:	bfba      	itte	lt
 8006ea2:	461c      	movlt	r4, r3
 8006ea4:	2501      	movlt	r5, #1
 8006ea6:	2500      	movge	r5, #0
 8006ea8:	f7ff fcf6 	bl	8006898 <_Balloc>
 8006eac:	4602      	mov	r2, r0
 8006eae:	b918      	cbnz	r0, 8006eb8 <__mdiff+0x60>
 8006eb0:	4b31      	ldr	r3, [pc, #196]	@ (8006f78 <__mdiff+0x120>)
 8006eb2:	f240 2145 	movw	r1, #581	@ 0x245
 8006eb6:	e7e3      	b.n	8006e80 <__mdiff+0x28>
 8006eb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ebc:	6926      	ldr	r6, [r4, #16]
 8006ebe:	60c5      	str	r5, [r0, #12]
 8006ec0:	f109 0310 	add.w	r3, r9, #16
 8006ec4:	f109 0514 	add.w	r5, r9, #20
 8006ec8:	f104 0e14 	add.w	lr, r4, #20
 8006ecc:	f100 0b14 	add.w	fp, r0, #20
 8006ed0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ed4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	46d9      	mov	r9, fp
 8006edc:	f04f 0c00 	mov.w	ip, #0
 8006ee0:	9b01      	ldr	r3, [sp, #4]
 8006ee2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ee6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	fa1f f38a 	uxth.w	r3, sl
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	b283      	uxth	r3, r0
 8006ef4:	1acb      	subs	r3, r1, r3
 8006ef6:	0c00      	lsrs	r0, r0, #16
 8006ef8:	4463      	add	r3, ip
 8006efa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006efe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f08:	4576      	cmp	r6, lr
 8006f0a:	f849 3b04 	str.w	r3, [r9], #4
 8006f0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f12:	d8e5      	bhi.n	8006ee0 <__mdiff+0x88>
 8006f14:	1b33      	subs	r3, r6, r4
 8006f16:	3b15      	subs	r3, #21
 8006f18:	f023 0303 	bic.w	r3, r3, #3
 8006f1c:	3415      	adds	r4, #21
 8006f1e:	3304      	adds	r3, #4
 8006f20:	42a6      	cmp	r6, r4
 8006f22:	bf38      	it	cc
 8006f24:	2304      	movcc	r3, #4
 8006f26:	441d      	add	r5, r3
 8006f28:	445b      	add	r3, fp
 8006f2a:	461e      	mov	r6, r3
 8006f2c:	462c      	mov	r4, r5
 8006f2e:	4544      	cmp	r4, r8
 8006f30:	d30e      	bcc.n	8006f50 <__mdiff+0xf8>
 8006f32:	f108 0103 	add.w	r1, r8, #3
 8006f36:	1b49      	subs	r1, r1, r5
 8006f38:	f021 0103 	bic.w	r1, r1, #3
 8006f3c:	3d03      	subs	r5, #3
 8006f3e:	45a8      	cmp	r8, r5
 8006f40:	bf38      	it	cc
 8006f42:	2100      	movcc	r1, #0
 8006f44:	440b      	add	r3, r1
 8006f46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f4a:	b191      	cbz	r1, 8006f72 <__mdiff+0x11a>
 8006f4c:	6117      	str	r7, [r2, #16]
 8006f4e:	e79d      	b.n	8006e8c <__mdiff+0x34>
 8006f50:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f54:	46e6      	mov	lr, ip
 8006f56:	0c08      	lsrs	r0, r1, #16
 8006f58:	fa1c fc81 	uxtah	ip, ip, r1
 8006f5c:	4471      	add	r1, lr
 8006f5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006f62:	b289      	uxth	r1, r1
 8006f64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f68:	f846 1b04 	str.w	r1, [r6], #4
 8006f6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f70:	e7dd      	b.n	8006f2e <__mdiff+0xd6>
 8006f72:	3f01      	subs	r7, #1
 8006f74:	e7e7      	b.n	8006f46 <__mdiff+0xee>
 8006f76:	bf00      	nop
 8006f78:	0800959e 	.word	0x0800959e
 8006f7c:	080095af 	.word	0x080095af

08006f80 <__ulp>:
 8006f80:	b082      	sub	sp, #8
 8006f82:	ed8d 0b00 	vstr	d0, [sp]
 8006f86:	9a01      	ldr	r2, [sp, #4]
 8006f88:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc8 <__ulp+0x48>)
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	dc08      	bgt.n	8006fa6 <__ulp+0x26>
 8006f94:	425b      	negs	r3, r3
 8006f96:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006f9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006f9e:	da04      	bge.n	8006faa <__ulp+0x2a>
 8006fa0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006fa4:	4113      	asrs	r3, r2
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	e008      	b.n	8006fbc <__ulp+0x3c>
 8006faa:	f1a2 0314 	sub.w	r3, r2, #20
 8006fae:	2b1e      	cmp	r3, #30
 8006fb0:	bfda      	itte	le
 8006fb2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006fb6:	40da      	lsrle	r2, r3
 8006fb8:	2201      	movgt	r2, #1
 8006fba:	2300      	movs	r3, #0
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	ec41 0b10 	vmov	d0, r0, r1
 8006fc4:	b002      	add	sp, #8
 8006fc6:	4770      	bx	lr
 8006fc8:	7ff00000 	.word	0x7ff00000

08006fcc <__b2d>:
 8006fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd0:	6906      	ldr	r6, [r0, #16]
 8006fd2:	f100 0814 	add.w	r8, r0, #20
 8006fd6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006fda:	1f37      	subs	r7, r6, #4
 8006fdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f7ff fd4b 	bl	8006a7c <__hi0bits>
 8006fe6:	f1c0 0320 	rsb	r3, r0, #32
 8006fea:	280a      	cmp	r0, #10
 8006fec:	600b      	str	r3, [r1, #0]
 8006fee:	491b      	ldr	r1, [pc, #108]	@ (800705c <__b2d+0x90>)
 8006ff0:	dc15      	bgt.n	800701e <__b2d+0x52>
 8006ff2:	f1c0 0c0b 	rsb	ip, r0, #11
 8006ff6:	fa22 f30c 	lsr.w	r3, r2, ip
 8006ffa:	45b8      	cmp	r8, r7
 8006ffc:	ea43 0501 	orr.w	r5, r3, r1
 8007000:	bf34      	ite	cc
 8007002:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007006:	2300      	movcs	r3, #0
 8007008:	3015      	adds	r0, #21
 800700a:	fa02 f000 	lsl.w	r0, r2, r0
 800700e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007012:	4303      	orrs	r3, r0
 8007014:	461c      	mov	r4, r3
 8007016:	ec45 4b10 	vmov	d0, r4, r5
 800701a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701e:	45b8      	cmp	r8, r7
 8007020:	bf3a      	itte	cc
 8007022:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007026:	f1a6 0708 	subcc.w	r7, r6, #8
 800702a:	2300      	movcs	r3, #0
 800702c:	380b      	subs	r0, #11
 800702e:	d012      	beq.n	8007056 <__b2d+0x8a>
 8007030:	f1c0 0120 	rsb	r1, r0, #32
 8007034:	fa23 f401 	lsr.w	r4, r3, r1
 8007038:	4082      	lsls	r2, r0
 800703a:	4322      	orrs	r2, r4
 800703c:	4547      	cmp	r7, r8
 800703e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007042:	bf8c      	ite	hi
 8007044:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007048:	2200      	movls	r2, #0
 800704a:	4083      	lsls	r3, r0
 800704c:	40ca      	lsrs	r2, r1
 800704e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007052:	4313      	orrs	r3, r2
 8007054:	e7de      	b.n	8007014 <__b2d+0x48>
 8007056:	ea42 0501 	orr.w	r5, r2, r1
 800705a:	e7db      	b.n	8007014 <__b2d+0x48>
 800705c:	3ff00000 	.word	0x3ff00000

08007060 <__d2b>:
 8007060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007064:	460f      	mov	r7, r1
 8007066:	2101      	movs	r1, #1
 8007068:	ec59 8b10 	vmov	r8, r9, d0
 800706c:	4616      	mov	r6, r2
 800706e:	f7ff fc13 	bl	8006898 <_Balloc>
 8007072:	4604      	mov	r4, r0
 8007074:	b930      	cbnz	r0, 8007084 <__d2b+0x24>
 8007076:	4602      	mov	r2, r0
 8007078:	4b23      	ldr	r3, [pc, #140]	@ (8007108 <__d2b+0xa8>)
 800707a:	4824      	ldr	r0, [pc, #144]	@ (800710c <__d2b+0xac>)
 800707c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007080:	f001 fb26 	bl	80086d0 <__assert_func>
 8007084:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800708c:	b10d      	cbz	r5, 8007092 <__d2b+0x32>
 800708e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	f1b8 0300 	subs.w	r3, r8, #0
 8007098:	d023      	beq.n	80070e2 <__d2b+0x82>
 800709a:	4668      	mov	r0, sp
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	f7ff fd0c 	bl	8006aba <__lo0bits>
 80070a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070a6:	b1d0      	cbz	r0, 80070de <__d2b+0x7e>
 80070a8:	f1c0 0320 	rsb	r3, r0, #32
 80070ac:	fa02 f303 	lsl.w	r3, r2, r3
 80070b0:	430b      	orrs	r3, r1
 80070b2:	40c2      	lsrs	r2, r0
 80070b4:	6163      	str	r3, [r4, #20]
 80070b6:	9201      	str	r2, [sp, #4]
 80070b8:	9b01      	ldr	r3, [sp, #4]
 80070ba:	61a3      	str	r3, [r4, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf0c      	ite	eq
 80070c0:	2201      	moveq	r2, #1
 80070c2:	2202      	movne	r2, #2
 80070c4:	6122      	str	r2, [r4, #16]
 80070c6:	b1a5      	cbz	r5, 80070f2 <__d2b+0x92>
 80070c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80070cc:	4405      	add	r5, r0
 80070ce:	603d      	str	r5, [r7, #0]
 80070d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80070d4:	6030      	str	r0, [r6, #0]
 80070d6:	4620      	mov	r0, r4
 80070d8:	b003      	add	sp, #12
 80070da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070de:	6161      	str	r1, [r4, #20]
 80070e0:	e7ea      	b.n	80070b8 <__d2b+0x58>
 80070e2:	a801      	add	r0, sp, #4
 80070e4:	f7ff fce9 	bl	8006aba <__lo0bits>
 80070e8:	9b01      	ldr	r3, [sp, #4]
 80070ea:	6163      	str	r3, [r4, #20]
 80070ec:	3020      	adds	r0, #32
 80070ee:	2201      	movs	r2, #1
 80070f0:	e7e8      	b.n	80070c4 <__d2b+0x64>
 80070f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070fa:	6038      	str	r0, [r7, #0]
 80070fc:	6918      	ldr	r0, [r3, #16]
 80070fe:	f7ff fcbd 	bl	8006a7c <__hi0bits>
 8007102:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007106:	e7e5      	b.n	80070d4 <__d2b+0x74>
 8007108:	0800959e 	.word	0x0800959e
 800710c:	080095af 	.word	0x080095af

08007110 <__ratio>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	b085      	sub	sp, #20
 8007116:	e9cd 1000 	strd	r1, r0, [sp]
 800711a:	a902      	add	r1, sp, #8
 800711c:	f7ff ff56 	bl	8006fcc <__b2d>
 8007120:	9800      	ldr	r0, [sp, #0]
 8007122:	a903      	add	r1, sp, #12
 8007124:	ec55 4b10 	vmov	r4, r5, d0
 8007128:	f7ff ff50 	bl	8006fcc <__b2d>
 800712c:	9b01      	ldr	r3, [sp, #4]
 800712e:	6919      	ldr	r1, [r3, #16]
 8007130:	9b00      	ldr	r3, [sp, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	1ac9      	subs	r1, r1, r3
 8007136:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	ec5b ab10 	vmov	sl, fp, d0
 8007140:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007144:	2b00      	cmp	r3, #0
 8007146:	bfce      	itee	gt
 8007148:	462a      	movgt	r2, r5
 800714a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800714e:	465a      	movle	r2, fp
 8007150:	462f      	mov	r7, r5
 8007152:	46d9      	mov	r9, fp
 8007154:	bfcc      	ite	gt
 8007156:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800715a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800715e:	464b      	mov	r3, r9
 8007160:	4652      	mov	r2, sl
 8007162:	4620      	mov	r0, r4
 8007164:	4639      	mov	r1, r7
 8007166:	f7f9 fb79 	bl	800085c <__aeabi_ddiv>
 800716a:	ec41 0b10 	vmov	d0, r0, r1
 800716e:	b005      	add	sp, #20
 8007170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007174 <__copybits>:
 8007174:	3901      	subs	r1, #1
 8007176:	b570      	push	{r4, r5, r6, lr}
 8007178:	1149      	asrs	r1, r1, #5
 800717a:	6914      	ldr	r4, [r2, #16]
 800717c:	3101      	adds	r1, #1
 800717e:	f102 0314 	add.w	r3, r2, #20
 8007182:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007186:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800718a:	1f05      	subs	r5, r0, #4
 800718c:	42a3      	cmp	r3, r4
 800718e:	d30c      	bcc.n	80071aa <__copybits+0x36>
 8007190:	1aa3      	subs	r3, r4, r2
 8007192:	3b11      	subs	r3, #17
 8007194:	f023 0303 	bic.w	r3, r3, #3
 8007198:	3211      	adds	r2, #17
 800719a:	42a2      	cmp	r2, r4
 800719c:	bf88      	it	hi
 800719e:	2300      	movhi	r3, #0
 80071a0:	4418      	add	r0, r3
 80071a2:	2300      	movs	r3, #0
 80071a4:	4288      	cmp	r0, r1
 80071a6:	d305      	bcc.n	80071b4 <__copybits+0x40>
 80071a8:	bd70      	pop	{r4, r5, r6, pc}
 80071aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80071ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80071b2:	e7eb      	b.n	800718c <__copybits+0x18>
 80071b4:	f840 3b04 	str.w	r3, [r0], #4
 80071b8:	e7f4      	b.n	80071a4 <__copybits+0x30>

080071ba <__any_on>:
 80071ba:	f100 0214 	add.w	r2, r0, #20
 80071be:	6900      	ldr	r0, [r0, #16]
 80071c0:	114b      	asrs	r3, r1, #5
 80071c2:	4298      	cmp	r0, r3
 80071c4:	b510      	push	{r4, lr}
 80071c6:	db11      	blt.n	80071ec <__any_on+0x32>
 80071c8:	dd0a      	ble.n	80071e0 <__any_on+0x26>
 80071ca:	f011 011f 	ands.w	r1, r1, #31
 80071ce:	d007      	beq.n	80071e0 <__any_on+0x26>
 80071d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80071d4:	fa24 f001 	lsr.w	r0, r4, r1
 80071d8:	fa00 f101 	lsl.w	r1, r0, r1
 80071dc:	428c      	cmp	r4, r1
 80071de:	d10b      	bne.n	80071f8 <__any_on+0x3e>
 80071e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d803      	bhi.n	80071f0 <__any_on+0x36>
 80071e8:	2000      	movs	r0, #0
 80071ea:	bd10      	pop	{r4, pc}
 80071ec:	4603      	mov	r3, r0
 80071ee:	e7f7      	b.n	80071e0 <__any_on+0x26>
 80071f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80071f4:	2900      	cmp	r1, #0
 80071f6:	d0f5      	beq.n	80071e4 <__any_on+0x2a>
 80071f8:	2001      	movs	r0, #1
 80071fa:	e7f6      	b.n	80071ea <__any_on+0x30>

080071fc <sulp>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4604      	mov	r4, r0
 8007200:	460d      	mov	r5, r1
 8007202:	ec45 4b10 	vmov	d0, r4, r5
 8007206:	4616      	mov	r6, r2
 8007208:	f7ff feba 	bl	8006f80 <__ulp>
 800720c:	ec51 0b10 	vmov	r0, r1, d0
 8007210:	b17e      	cbz	r6, 8007232 <sulp+0x36>
 8007212:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007216:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800721a:	2b00      	cmp	r3, #0
 800721c:	dd09      	ble.n	8007232 <sulp+0x36>
 800721e:	051b      	lsls	r3, r3, #20
 8007220:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007224:	2400      	movs	r4, #0
 8007226:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800722a:	4622      	mov	r2, r4
 800722c:	462b      	mov	r3, r5
 800722e:	f7f9 f9eb 	bl	8000608 <__aeabi_dmul>
 8007232:	ec41 0b10 	vmov	d0, r0, r1
 8007236:	bd70      	pop	{r4, r5, r6, pc}

08007238 <_strtod_l>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	b09f      	sub	sp, #124	@ 0x7c
 800723e:	460c      	mov	r4, r1
 8007240:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007242:	2200      	movs	r2, #0
 8007244:	921a      	str	r2, [sp, #104]	@ 0x68
 8007246:	9005      	str	r0, [sp, #20]
 8007248:	f04f 0a00 	mov.w	sl, #0
 800724c:	f04f 0b00 	mov.w	fp, #0
 8007250:	460a      	mov	r2, r1
 8007252:	9219      	str	r2, [sp, #100]	@ 0x64
 8007254:	7811      	ldrb	r1, [r2, #0]
 8007256:	292b      	cmp	r1, #43	@ 0x2b
 8007258:	d04a      	beq.n	80072f0 <_strtod_l+0xb8>
 800725a:	d838      	bhi.n	80072ce <_strtod_l+0x96>
 800725c:	290d      	cmp	r1, #13
 800725e:	d832      	bhi.n	80072c6 <_strtod_l+0x8e>
 8007260:	2908      	cmp	r1, #8
 8007262:	d832      	bhi.n	80072ca <_strtod_l+0x92>
 8007264:	2900      	cmp	r1, #0
 8007266:	d03b      	beq.n	80072e0 <_strtod_l+0xa8>
 8007268:	2200      	movs	r2, #0
 800726a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800726c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800726e:	782a      	ldrb	r2, [r5, #0]
 8007270:	2a30      	cmp	r2, #48	@ 0x30
 8007272:	f040 80b3 	bne.w	80073dc <_strtod_l+0x1a4>
 8007276:	786a      	ldrb	r2, [r5, #1]
 8007278:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800727c:	2a58      	cmp	r2, #88	@ 0x58
 800727e:	d16e      	bne.n	800735e <_strtod_l+0x126>
 8007280:	9302      	str	r3, [sp, #8]
 8007282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	ab1a      	add	r3, sp, #104	@ 0x68
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4a8e      	ldr	r2, [pc, #568]	@ (80074c4 <_strtod_l+0x28c>)
 800728c:	9805      	ldr	r0, [sp, #20]
 800728e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007290:	a919      	add	r1, sp, #100	@ 0x64
 8007292:	f001 fab7 	bl	8008804 <__gethex>
 8007296:	f010 060f 	ands.w	r6, r0, #15
 800729a:	4604      	mov	r4, r0
 800729c:	d005      	beq.n	80072aa <_strtod_l+0x72>
 800729e:	2e06      	cmp	r6, #6
 80072a0:	d128      	bne.n	80072f4 <_strtod_l+0xbc>
 80072a2:	3501      	adds	r5, #1
 80072a4:	2300      	movs	r3, #0
 80072a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80072a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 858e 	bne.w	8007dce <_strtod_l+0xb96>
 80072b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072b4:	b1cb      	cbz	r3, 80072ea <_strtod_l+0xb2>
 80072b6:	4652      	mov	r2, sl
 80072b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80072bc:	ec43 2b10 	vmov	d0, r2, r3
 80072c0:	b01f      	add	sp, #124	@ 0x7c
 80072c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c6:	2920      	cmp	r1, #32
 80072c8:	d1ce      	bne.n	8007268 <_strtod_l+0x30>
 80072ca:	3201      	adds	r2, #1
 80072cc:	e7c1      	b.n	8007252 <_strtod_l+0x1a>
 80072ce:	292d      	cmp	r1, #45	@ 0x2d
 80072d0:	d1ca      	bne.n	8007268 <_strtod_l+0x30>
 80072d2:	2101      	movs	r1, #1
 80072d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80072d6:	1c51      	adds	r1, r2, #1
 80072d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80072da:	7852      	ldrb	r2, [r2, #1]
 80072dc:	2a00      	cmp	r2, #0
 80072de:	d1c5      	bne.n	800726c <_strtod_l+0x34>
 80072e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f040 8570 	bne.w	8007dca <_strtod_l+0xb92>
 80072ea:	4652      	mov	r2, sl
 80072ec:	465b      	mov	r3, fp
 80072ee:	e7e5      	b.n	80072bc <_strtod_l+0x84>
 80072f0:	2100      	movs	r1, #0
 80072f2:	e7ef      	b.n	80072d4 <_strtod_l+0x9c>
 80072f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80072f6:	b13a      	cbz	r2, 8007308 <_strtod_l+0xd0>
 80072f8:	2135      	movs	r1, #53	@ 0x35
 80072fa:	a81c      	add	r0, sp, #112	@ 0x70
 80072fc:	f7ff ff3a 	bl	8007174 <__copybits>
 8007300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007302:	9805      	ldr	r0, [sp, #20]
 8007304:	f7ff fb08 	bl	8006918 <_Bfree>
 8007308:	3e01      	subs	r6, #1
 800730a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800730c:	2e04      	cmp	r6, #4
 800730e:	d806      	bhi.n	800731e <_strtod_l+0xe6>
 8007310:	e8df f006 	tbb	[pc, r6]
 8007314:	201d0314 	.word	0x201d0314
 8007318:	14          	.byte	0x14
 8007319:	00          	.byte	0x00
 800731a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800731e:	05e1      	lsls	r1, r4, #23
 8007320:	bf48      	it	mi
 8007322:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007326:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800732a:	0d1b      	lsrs	r3, r3, #20
 800732c:	051b      	lsls	r3, r3, #20
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1bb      	bne.n	80072aa <_strtod_l+0x72>
 8007332:	f7fe fb31 	bl	8005998 <__errno>
 8007336:	2322      	movs	r3, #34	@ 0x22
 8007338:	6003      	str	r3, [r0, #0]
 800733a:	e7b6      	b.n	80072aa <_strtod_l+0x72>
 800733c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007340:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007344:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007348:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800734c:	e7e7      	b.n	800731e <_strtod_l+0xe6>
 800734e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80074cc <_strtod_l+0x294>
 8007352:	e7e4      	b.n	800731e <_strtod_l+0xe6>
 8007354:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007358:	f04f 3aff 	mov.w	sl, #4294967295
 800735c:	e7df      	b.n	800731e <_strtod_l+0xe6>
 800735e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	9219      	str	r2, [sp, #100]	@ 0x64
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b30      	cmp	r3, #48	@ 0x30
 8007368:	d0f9      	beq.n	800735e <_strtod_l+0x126>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d09d      	beq.n	80072aa <_strtod_l+0x72>
 800736e:	2301      	movs	r3, #1
 8007370:	9309      	str	r3, [sp, #36]	@ 0x24
 8007372:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007374:	930c      	str	r3, [sp, #48]	@ 0x30
 8007376:	2300      	movs	r3, #0
 8007378:	9308      	str	r3, [sp, #32]
 800737a:	930a      	str	r3, [sp, #40]	@ 0x28
 800737c:	461f      	mov	r7, r3
 800737e:	220a      	movs	r2, #10
 8007380:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007382:	7805      	ldrb	r5, [r0, #0]
 8007384:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007388:	b2d9      	uxtb	r1, r3
 800738a:	2909      	cmp	r1, #9
 800738c:	d928      	bls.n	80073e0 <_strtod_l+0x1a8>
 800738e:	494e      	ldr	r1, [pc, #312]	@ (80074c8 <_strtod_l+0x290>)
 8007390:	2201      	movs	r2, #1
 8007392:	f001 f963 	bl	800865c <strncmp>
 8007396:	2800      	cmp	r0, #0
 8007398:	d032      	beq.n	8007400 <_strtod_l+0x1c8>
 800739a:	2000      	movs	r0, #0
 800739c:	462a      	mov	r2, r5
 800739e:	4681      	mov	r9, r0
 80073a0:	463d      	mov	r5, r7
 80073a2:	4603      	mov	r3, r0
 80073a4:	2a65      	cmp	r2, #101	@ 0x65
 80073a6:	d001      	beq.n	80073ac <_strtod_l+0x174>
 80073a8:	2a45      	cmp	r2, #69	@ 0x45
 80073aa:	d114      	bne.n	80073d6 <_strtod_l+0x19e>
 80073ac:	b91d      	cbnz	r5, 80073b6 <_strtod_l+0x17e>
 80073ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073b0:	4302      	orrs	r2, r0
 80073b2:	d095      	beq.n	80072e0 <_strtod_l+0xa8>
 80073b4:	2500      	movs	r5, #0
 80073b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80073b8:	1c62      	adds	r2, r4, #1
 80073ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80073bc:	7862      	ldrb	r2, [r4, #1]
 80073be:	2a2b      	cmp	r2, #43	@ 0x2b
 80073c0:	d077      	beq.n	80074b2 <_strtod_l+0x27a>
 80073c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80073c4:	d07b      	beq.n	80074be <_strtod_l+0x286>
 80073c6:	f04f 0c00 	mov.w	ip, #0
 80073ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80073ce:	2909      	cmp	r1, #9
 80073d0:	f240 8082 	bls.w	80074d8 <_strtod_l+0x2a0>
 80073d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80073d6:	f04f 0800 	mov.w	r8, #0
 80073da:	e0a2      	b.n	8007522 <_strtod_l+0x2ea>
 80073dc:	2300      	movs	r3, #0
 80073de:	e7c7      	b.n	8007370 <_strtod_l+0x138>
 80073e0:	2f08      	cmp	r7, #8
 80073e2:	bfd5      	itete	le
 80073e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80073e6:	9908      	ldrgt	r1, [sp, #32]
 80073e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80073ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80073f0:	f100 0001 	add.w	r0, r0, #1
 80073f4:	bfd4      	ite	le
 80073f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80073f8:	9308      	strgt	r3, [sp, #32]
 80073fa:	3701      	adds	r7, #1
 80073fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80073fe:	e7bf      	b.n	8007380 <_strtod_l+0x148>
 8007400:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	9219      	str	r2, [sp, #100]	@ 0x64
 8007406:	785a      	ldrb	r2, [r3, #1]
 8007408:	b37f      	cbz	r7, 800746a <_strtod_l+0x232>
 800740a:	4681      	mov	r9, r0
 800740c:	463d      	mov	r5, r7
 800740e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007412:	2b09      	cmp	r3, #9
 8007414:	d912      	bls.n	800743c <_strtod_l+0x204>
 8007416:	2301      	movs	r3, #1
 8007418:	e7c4      	b.n	80073a4 <_strtod_l+0x16c>
 800741a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007420:	785a      	ldrb	r2, [r3, #1]
 8007422:	3001      	adds	r0, #1
 8007424:	2a30      	cmp	r2, #48	@ 0x30
 8007426:	d0f8      	beq.n	800741a <_strtod_l+0x1e2>
 8007428:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800742c:	2b08      	cmp	r3, #8
 800742e:	f200 84d3 	bhi.w	8007dd8 <_strtod_l+0xba0>
 8007432:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007434:	930c      	str	r3, [sp, #48]	@ 0x30
 8007436:	4681      	mov	r9, r0
 8007438:	2000      	movs	r0, #0
 800743a:	4605      	mov	r5, r0
 800743c:	3a30      	subs	r2, #48	@ 0x30
 800743e:	f100 0301 	add.w	r3, r0, #1
 8007442:	d02a      	beq.n	800749a <_strtod_l+0x262>
 8007444:	4499      	add	r9, r3
 8007446:	eb00 0c05 	add.w	ip, r0, r5
 800744a:	462b      	mov	r3, r5
 800744c:	210a      	movs	r1, #10
 800744e:	4563      	cmp	r3, ip
 8007450:	d10d      	bne.n	800746e <_strtod_l+0x236>
 8007452:	1c69      	adds	r1, r5, #1
 8007454:	4401      	add	r1, r0
 8007456:	4428      	add	r0, r5
 8007458:	2808      	cmp	r0, #8
 800745a:	dc16      	bgt.n	800748a <_strtod_l+0x252>
 800745c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800745e:	230a      	movs	r3, #10
 8007460:	fb03 2300 	mla	r3, r3, r0, r2
 8007464:	930a      	str	r3, [sp, #40]	@ 0x28
 8007466:	2300      	movs	r3, #0
 8007468:	e018      	b.n	800749c <_strtod_l+0x264>
 800746a:	4638      	mov	r0, r7
 800746c:	e7da      	b.n	8007424 <_strtod_l+0x1ec>
 800746e:	2b08      	cmp	r3, #8
 8007470:	f103 0301 	add.w	r3, r3, #1
 8007474:	dc03      	bgt.n	800747e <_strtod_l+0x246>
 8007476:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007478:	434e      	muls	r6, r1
 800747a:	960a      	str	r6, [sp, #40]	@ 0x28
 800747c:	e7e7      	b.n	800744e <_strtod_l+0x216>
 800747e:	2b10      	cmp	r3, #16
 8007480:	bfde      	ittt	le
 8007482:	9e08      	ldrle	r6, [sp, #32]
 8007484:	434e      	mulle	r6, r1
 8007486:	9608      	strle	r6, [sp, #32]
 8007488:	e7e1      	b.n	800744e <_strtod_l+0x216>
 800748a:	280f      	cmp	r0, #15
 800748c:	dceb      	bgt.n	8007466 <_strtod_l+0x22e>
 800748e:	9808      	ldr	r0, [sp, #32]
 8007490:	230a      	movs	r3, #10
 8007492:	fb03 2300 	mla	r3, r3, r0, r2
 8007496:	9308      	str	r3, [sp, #32]
 8007498:	e7e5      	b.n	8007466 <_strtod_l+0x22e>
 800749a:	4629      	mov	r1, r5
 800749c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800749e:	1c50      	adds	r0, r2, #1
 80074a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80074a2:	7852      	ldrb	r2, [r2, #1]
 80074a4:	4618      	mov	r0, r3
 80074a6:	460d      	mov	r5, r1
 80074a8:	e7b1      	b.n	800740e <_strtod_l+0x1d6>
 80074aa:	f04f 0900 	mov.w	r9, #0
 80074ae:	2301      	movs	r3, #1
 80074b0:	e77d      	b.n	80073ae <_strtod_l+0x176>
 80074b2:	f04f 0c00 	mov.w	ip, #0
 80074b6:	1ca2      	adds	r2, r4, #2
 80074b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80074ba:	78a2      	ldrb	r2, [r4, #2]
 80074bc:	e785      	b.n	80073ca <_strtod_l+0x192>
 80074be:	f04f 0c01 	mov.w	ip, #1
 80074c2:	e7f8      	b.n	80074b6 <_strtod_l+0x27e>
 80074c4:	08009720 	.word	0x08009720
 80074c8:	08009708 	.word	0x08009708
 80074cc:	7ff00000 	.word	0x7ff00000
 80074d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074d2:	1c51      	adds	r1, r2, #1
 80074d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80074d6:	7852      	ldrb	r2, [r2, #1]
 80074d8:	2a30      	cmp	r2, #48	@ 0x30
 80074da:	d0f9      	beq.n	80074d0 <_strtod_l+0x298>
 80074dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80074e0:	2908      	cmp	r1, #8
 80074e2:	f63f af78 	bhi.w	80073d6 <_strtod_l+0x19e>
 80074e6:	3a30      	subs	r2, #48	@ 0x30
 80074e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80074ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80074ee:	f04f 080a 	mov.w	r8, #10
 80074f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074f4:	1c56      	adds	r6, r2, #1
 80074f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80074f8:	7852      	ldrb	r2, [r2, #1]
 80074fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80074fe:	f1be 0f09 	cmp.w	lr, #9
 8007502:	d939      	bls.n	8007578 <_strtod_l+0x340>
 8007504:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007506:	1a76      	subs	r6, r6, r1
 8007508:	2e08      	cmp	r6, #8
 800750a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800750e:	dc03      	bgt.n	8007518 <_strtod_l+0x2e0>
 8007510:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007512:	4588      	cmp	r8, r1
 8007514:	bfa8      	it	ge
 8007516:	4688      	movge	r8, r1
 8007518:	f1bc 0f00 	cmp.w	ip, #0
 800751c:	d001      	beq.n	8007522 <_strtod_l+0x2ea>
 800751e:	f1c8 0800 	rsb	r8, r8, #0
 8007522:	2d00      	cmp	r5, #0
 8007524:	d14e      	bne.n	80075c4 <_strtod_l+0x38c>
 8007526:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007528:	4308      	orrs	r0, r1
 800752a:	f47f aebe 	bne.w	80072aa <_strtod_l+0x72>
 800752e:	2b00      	cmp	r3, #0
 8007530:	f47f aed6 	bne.w	80072e0 <_strtod_l+0xa8>
 8007534:	2a69      	cmp	r2, #105	@ 0x69
 8007536:	d028      	beq.n	800758a <_strtod_l+0x352>
 8007538:	dc25      	bgt.n	8007586 <_strtod_l+0x34e>
 800753a:	2a49      	cmp	r2, #73	@ 0x49
 800753c:	d025      	beq.n	800758a <_strtod_l+0x352>
 800753e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007540:	f47f aece 	bne.w	80072e0 <_strtod_l+0xa8>
 8007544:	499b      	ldr	r1, [pc, #620]	@ (80077b4 <_strtod_l+0x57c>)
 8007546:	a819      	add	r0, sp, #100	@ 0x64
 8007548:	f001 fb7e 	bl	8008c48 <__match>
 800754c:	2800      	cmp	r0, #0
 800754e:	f43f aec7 	beq.w	80072e0 <_strtod_l+0xa8>
 8007552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b28      	cmp	r3, #40	@ 0x28
 8007558:	d12e      	bne.n	80075b8 <_strtod_l+0x380>
 800755a:	4997      	ldr	r1, [pc, #604]	@ (80077b8 <_strtod_l+0x580>)
 800755c:	aa1c      	add	r2, sp, #112	@ 0x70
 800755e:	a819      	add	r0, sp, #100	@ 0x64
 8007560:	f001 fb86 	bl	8008c70 <__hexnan>
 8007564:	2805      	cmp	r0, #5
 8007566:	d127      	bne.n	80075b8 <_strtod_l+0x380>
 8007568:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800756a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800756e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007572:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007576:	e698      	b.n	80072aa <_strtod_l+0x72>
 8007578:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800757a:	fb08 2101 	mla	r1, r8, r1, r2
 800757e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007582:	920e      	str	r2, [sp, #56]	@ 0x38
 8007584:	e7b5      	b.n	80074f2 <_strtod_l+0x2ba>
 8007586:	2a6e      	cmp	r2, #110	@ 0x6e
 8007588:	e7da      	b.n	8007540 <_strtod_l+0x308>
 800758a:	498c      	ldr	r1, [pc, #560]	@ (80077bc <_strtod_l+0x584>)
 800758c:	a819      	add	r0, sp, #100	@ 0x64
 800758e:	f001 fb5b 	bl	8008c48 <__match>
 8007592:	2800      	cmp	r0, #0
 8007594:	f43f aea4 	beq.w	80072e0 <_strtod_l+0xa8>
 8007598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800759a:	4989      	ldr	r1, [pc, #548]	@ (80077c0 <_strtod_l+0x588>)
 800759c:	3b01      	subs	r3, #1
 800759e:	a819      	add	r0, sp, #100	@ 0x64
 80075a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80075a2:	f001 fb51 	bl	8008c48 <__match>
 80075a6:	b910      	cbnz	r0, 80075ae <_strtod_l+0x376>
 80075a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075aa:	3301      	adds	r3, #1
 80075ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80075ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80077d0 <_strtod_l+0x598>
 80075b2:	f04f 0a00 	mov.w	sl, #0
 80075b6:	e678      	b.n	80072aa <_strtod_l+0x72>
 80075b8:	4882      	ldr	r0, [pc, #520]	@ (80077c4 <_strtod_l+0x58c>)
 80075ba:	f001 f881 	bl	80086c0 <nan>
 80075be:	ec5b ab10 	vmov	sl, fp, d0
 80075c2:	e672      	b.n	80072aa <_strtod_l+0x72>
 80075c4:	eba8 0309 	sub.w	r3, r8, r9
 80075c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80075cc:	2f00      	cmp	r7, #0
 80075ce:	bf08      	it	eq
 80075d0:	462f      	moveq	r7, r5
 80075d2:	2d10      	cmp	r5, #16
 80075d4:	462c      	mov	r4, r5
 80075d6:	bfa8      	it	ge
 80075d8:	2410      	movge	r4, #16
 80075da:	f7f8 ff9b 	bl	8000514 <__aeabi_ui2d>
 80075de:	2d09      	cmp	r5, #9
 80075e0:	4682      	mov	sl, r0
 80075e2:	468b      	mov	fp, r1
 80075e4:	dc13      	bgt.n	800760e <_strtod_l+0x3d6>
 80075e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f43f ae5e 	beq.w	80072aa <_strtod_l+0x72>
 80075ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f0:	dd78      	ble.n	80076e4 <_strtod_l+0x4ac>
 80075f2:	2b16      	cmp	r3, #22
 80075f4:	dc5f      	bgt.n	80076b6 <_strtod_l+0x47e>
 80075f6:	4974      	ldr	r1, [pc, #464]	@ (80077c8 <_strtod_l+0x590>)
 80075f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007600:	4652      	mov	r2, sl
 8007602:	465b      	mov	r3, fp
 8007604:	f7f9 f800 	bl	8000608 <__aeabi_dmul>
 8007608:	4682      	mov	sl, r0
 800760a:	468b      	mov	fp, r1
 800760c:	e64d      	b.n	80072aa <_strtod_l+0x72>
 800760e:	4b6e      	ldr	r3, [pc, #440]	@ (80077c8 <_strtod_l+0x590>)
 8007610:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007614:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007618:	f7f8 fff6 	bl	8000608 <__aeabi_dmul>
 800761c:	4682      	mov	sl, r0
 800761e:	9808      	ldr	r0, [sp, #32]
 8007620:	468b      	mov	fp, r1
 8007622:	f7f8 ff77 	bl	8000514 <__aeabi_ui2d>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4650      	mov	r0, sl
 800762c:	4659      	mov	r1, fp
 800762e:	f7f8 fe35 	bl	800029c <__adddf3>
 8007632:	2d0f      	cmp	r5, #15
 8007634:	4682      	mov	sl, r0
 8007636:	468b      	mov	fp, r1
 8007638:	ddd5      	ble.n	80075e6 <_strtod_l+0x3ae>
 800763a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800763c:	1b2c      	subs	r4, r5, r4
 800763e:	441c      	add	r4, r3
 8007640:	2c00      	cmp	r4, #0
 8007642:	f340 8096 	ble.w	8007772 <_strtod_l+0x53a>
 8007646:	f014 030f 	ands.w	r3, r4, #15
 800764a:	d00a      	beq.n	8007662 <_strtod_l+0x42a>
 800764c:	495e      	ldr	r1, [pc, #376]	@ (80077c8 <_strtod_l+0x590>)
 800764e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007652:	4652      	mov	r2, sl
 8007654:	465b      	mov	r3, fp
 8007656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800765a:	f7f8 ffd5 	bl	8000608 <__aeabi_dmul>
 800765e:	4682      	mov	sl, r0
 8007660:	468b      	mov	fp, r1
 8007662:	f034 040f 	bics.w	r4, r4, #15
 8007666:	d073      	beq.n	8007750 <_strtod_l+0x518>
 8007668:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800766c:	dd48      	ble.n	8007700 <_strtod_l+0x4c8>
 800766e:	2400      	movs	r4, #0
 8007670:	46a0      	mov	r8, r4
 8007672:	940a      	str	r4, [sp, #40]	@ 0x28
 8007674:	46a1      	mov	r9, r4
 8007676:	9a05      	ldr	r2, [sp, #20]
 8007678:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80077d0 <_strtod_l+0x598>
 800767c:	2322      	movs	r3, #34	@ 0x22
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	f04f 0a00 	mov.w	sl, #0
 8007684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	f43f ae0f 	beq.w	80072aa <_strtod_l+0x72>
 800768c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800768e:	9805      	ldr	r0, [sp, #20]
 8007690:	f7ff f942 	bl	8006918 <_Bfree>
 8007694:	9805      	ldr	r0, [sp, #20]
 8007696:	4649      	mov	r1, r9
 8007698:	f7ff f93e 	bl	8006918 <_Bfree>
 800769c:	9805      	ldr	r0, [sp, #20]
 800769e:	4641      	mov	r1, r8
 80076a0:	f7ff f93a 	bl	8006918 <_Bfree>
 80076a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076a6:	9805      	ldr	r0, [sp, #20]
 80076a8:	f7ff f936 	bl	8006918 <_Bfree>
 80076ac:	9805      	ldr	r0, [sp, #20]
 80076ae:	4621      	mov	r1, r4
 80076b0:	f7ff f932 	bl	8006918 <_Bfree>
 80076b4:	e5f9      	b.n	80072aa <_strtod_l+0x72>
 80076b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80076bc:	4293      	cmp	r3, r2
 80076be:	dbbc      	blt.n	800763a <_strtod_l+0x402>
 80076c0:	4c41      	ldr	r4, [pc, #260]	@ (80077c8 <_strtod_l+0x590>)
 80076c2:	f1c5 050f 	rsb	r5, r5, #15
 80076c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80076ca:	4652      	mov	r2, sl
 80076cc:	465b      	mov	r3, fp
 80076ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d2:	f7f8 ff99 	bl	8000608 <__aeabi_dmul>
 80076d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d8:	1b5d      	subs	r5, r3, r5
 80076da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80076de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80076e2:	e78f      	b.n	8007604 <_strtod_l+0x3cc>
 80076e4:	3316      	adds	r3, #22
 80076e6:	dba8      	blt.n	800763a <_strtod_l+0x402>
 80076e8:	4b37      	ldr	r3, [pc, #220]	@ (80077c8 <_strtod_l+0x590>)
 80076ea:	eba9 0808 	sub.w	r8, r9, r8
 80076ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80076f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80076f6:	4650      	mov	r0, sl
 80076f8:	4659      	mov	r1, fp
 80076fa:	f7f9 f8af 	bl	800085c <__aeabi_ddiv>
 80076fe:	e783      	b.n	8007608 <_strtod_l+0x3d0>
 8007700:	4b32      	ldr	r3, [pc, #200]	@ (80077cc <_strtod_l+0x594>)
 8007702:	9308      	str	r3, [sp, #32]
 8007704:	2300      	movs	r3, #0
 8007706:	1124      	asrs	r4, r4, #4
 8007708:	4650      	mov	r0, sl
 800770a:	4659      	mov	r1, fp
 800770c:	461e      	mov	r6, r3
 800770e:	2c01      	cmp	r4, #1
 8007710:	dc21      	bgt.n	8007756 <_strtod_l+0x51e>
 8007712:	b10b      	cbz	r3, 8007718 <_strtod_l+0x4e0>
 8007714:	4682      	mov	sl, r0
 8007716:	468b      	mov	fp, r1
 8007718:	492c      	ldr	r1, [pc, #176]	@ (80077cc <_strtod_l+0x594>)
 800771a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800771e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007722:	4652      	mov	r2, sl
 8007724:	465b      	mov	r3, fp
 8007726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800772a:	f7f8 ff6d 	bl	8000608 <__aeabi_dmul>
 800772e:	4b28      	ldr	r3, [pc, #160]	@ (80077d0 <_strtod_l+0x598>)
 8007730:	460a      	mov	r2, r1
 8007732:	400b      	ands	r3, r1
 8007734:	4927      	ldr	r1, [pc, #156]	@ (80077d4 <_strtod_l+0x59c>)
 8007736:	428b      	cmp	r3, r1
 8007738:	4682      	mov	sl, r0
 800773a:	d898      	bhi.n	800766e <_strtod_l+0x436>
 800773c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007740:	428b      	cmp	r3, r1
 8007742:	bf86      	itte	hi
 8007744:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80077d8 <_strtod_l+0x5a0>
 8007748:	f04f 3aff 	movhi.w	sl, #4294967295
 800774c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007750:	2300      	movs	r3, #0
 8007752:	9308      	str	r3, [sp, #32]
 8007754:	e07a      	b.n	800784c <_strtod_l+0x614>
 8007756:	07e2      	lsls	r2, r4, #31
 8007758:	d505      	bpl.n	8007766 <_strtod_l+0x52e>
 800775a:	9b08      	ldr	r3, [sp, #32]
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f7f8 ff52 	bl	8000608 <__aeabi_dmul>
 8007764:	2301      	movs	r3, #1
 8007766:	9a08      	ldr	r2, [sp, #32]
 8007768:	3208      	adds	r2, #8
 800776a:	3601      	adds	r6, #1
 800776c:	1064      	asrs	r4, r4, #1
 800776e:	9208      	str	r2, [sp, #32]
 8007770:	e7cd      	b.n	800770e <_strtod_l+0x4d6>
 8007772:	d0ed      	beq.n	8007750 <_strtod_l+0x518>
 8007774:	4264      	negs	r4, r4
 8007776:	f014 020f 	ands.w	r2, r4, #15
 800777a:	d00a      	beq.n	8007792 <_strtod_l+0x55a>
 800777c:	4b12      	ldr	r3, [pc, #72]	@ (80077c8 <_strtod_l+0x590>)
 800777e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007782:	4650      	mov	r0, sl
 8007784:	4659      	mov	r1, fp
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f7f9 f867 	bl	800085c <__aeabi_ddiv>
 800778e:	4682      	mov	sl, r0
 8007790:	468b      	mov	fp, r1
 8007792:	1124      	asrs	r4, r4, #4
 8007794:	d0dc      	beq.n	8007750 <_strtod_l+0x518>
 8007796:	2c1f      	cmp	r4, #31
 8007798:	dd20      	ble.n	80077dc <_strtod_l+0x5a4>
 800779a:	2400      	movs	r4, #0
 800779c:	46a0      	mov	r8, r4
 800779e:	940a      	str	r4, [sp, #40]	@ 0x28
 80077a0:	46a1      	mov	r9, r4
 80077a2:	9a05      	ldr	r2, [sp, #20]
 80077a4:	2322      	movs	r3, #34	@ 0x22
 80077a6:	f04f 0a00 	mov.w	sl, #0
 80077aa:	f04f 0b00 	mov.w	fp, #0
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	e768      	b.n	8007684 <_strtod_l+0x44c>
 80077b2:	bf00      	nop
 80077b4:	080094f6 	.word	0x080094f6
 80077b8:	0800970c 	.word	0x0800970c
 80077bc:	080094ee 	.word	0x080094ee
 80077c0:	08009525 	.word	0x08009525
 80077c4:	080097b4 	.word	0x080097b4
 80077c8:	08009640 	.word	0x08009640
 80077cc:	08009618 	.word	0x08009618
 80077d0:	7ff00000 	.word	0x7ff00000
 80077d4:	7ca00000 	.word	0x7ca00000
 80077d8:	7fefffff 	.word	0x7fefffff
 80077dc:	f014 0310 	ands.w	r3, r4, #16
 80077e0:	bf18      	it	ne
 80077e2:	236a      	movne	r3, #106	@ 0x6a
 80077e4:	4ea9      	ldr	r6, [pc, #676]	@ (8007a8c <_strtod_l+0x854>)
 80077e6:	9308      	str	r3, [sp, #32]
 80077e8:	4650      	mov	r0, sl
 80077ea:	4659      	mov	r1, fp
 80077ec:	2300      	movs	r3, #0
 80077ee:	07e2      	lsls	r2, r4, #31
 80077f0:	d504      	bpl.n	80077fc <_strtod_l+0x5c4>
 80077f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077f6:	f7f8 ff07 	bl	8000608 <__aeabi_dmul>
 80077fa:	2301      	movs	r3, #1
 80077fc:	1064      	asrs	r4, r4, #1
 80077fe:	f106 0608 	add.w	r6, r6, #8
 8007802:	d1f4      	bne.n	80077ee <_strtod_l+0x5b6>
 8007804:	b10b      	cbz	r3, 800780a <_strtod_l+0x5d2>
 8007806:	4682      	mov	sl, r0
 8007808:	468b      	mov	fp, r1
 800780a:	9b08      	ldr	r3, [sp, #32]
 800780c:	b1b3      	cbz	r3, 800783c <_strtod_l+0x604>
 800780e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007812:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007816:	2b00      	cmp	r3, #0
 8007818:	4659      	mov	r1, fp
 800781a:	dd0f      	ble.n	800783c <_strtod_l+0x604>
 800781c:	2b1f      	cmp	r3, #31
 800781e:	dd55      	ble.n	80078cc <_strtod_l+0x694>
 8007820:	2b34      	cmp	r3, #52	@ 0x34
 8007822:	bfde      	ittt	le
 8007824:	f04f 33ff 	movle.w	r3, #4294967295
 8007828:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800782c:	4093      	lslle	r3, r2
 800782e:	f04f 0a00 	mov.w	sl, #0
 8007832:	bfcc      	ite	gt
 8007834:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007838:	ea03 0b01 	andle.w	fp, r3, r1
 800783c:	2200      	movs	r2, #0
 800783e:	2300      	movs	r3, #0
 8007840:	4650      	mov	r0, sl
 8007842:	4659      	mov	r1, fp
 8007844:	f7f9 f948 	bl	8000ad8 <__aeabi_dcmpeq>
 8007848:	2800      	cmp	r0, #0
 800784a:	d1a6      	bne.n	800779a <_strtod_l+0x562>
 800784c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007852:	9805      	ldr	r0, [sp, #20]
 8007854:	462b      	mov	r3, r5
 8007856:	463a      	mov	r2, r7
 8007858:	f7ff f8c6 	bl	80069e8 <__s2b>
 800785c:	900a      	str	r0, [sp, #40]	@ 0x28
 800785e:	2800      	cmp	r0, #0
 8007860:	f43f af05 	beq.w	800766e <_strtod_l+0x436>
 8007864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007866:	2a00      	cmp	r2, #0
 8007868:	eba9 0308 	sub.w	r3, r9, r8
 800786c:	bfa8      	it	ge
 800786e:	2300      	movge	r3, #0
 8007870:	9312      	str	r3, [sp, #72]	@ 0x48
 8007872:	2400      	movs	r4, #0
 8007874:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007878:	9316      	str	r3, [sp, #88]	@ 0x58
 800787a:	46a0      	mov	r8, r4
 800787c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800787e:	9805      	ldr	r0, [sp, #20]
 8007880:	6859      	ldr	r1, [r3, #4]
 8007882:	f7ff f809 	bl	8006898 <_Balloc>
 8007886:	4681      	mov	r9, r0
 8007888:	2800      	cmp	r0, #0
 800788a:	f43f aef4 	beq.w	8007676 <_strtod_l+0x43e>
 800788e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	3202      	adds	r2, #2
 8007894:	f103 010c 	add.w	r1, r3, #12
 8007898:	0092      	lsls	r2, r2, #2
 800789a:	300c      	adds	r0, #12
 800789c:	f000 ff00 	bl	80086a0 <memcpy>
 80078a0:	ec4b ab10 	vmov	d0, sl, fp
 80078a4:	9805      	ldr	r0, [sp, #20]
 80078a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80078a8:	a91b      	add	r1, sp, #108	@ 0x6c
 80078aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80078ae:	f7ff fbd7 	bl	8007060 <__d2b>
 80078b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80078b4:	2800      	cmp	r0, #0
 80078b6:	f43f aede 	beq.w	8007676 <_strtod_l+0x43e>
 80078ba:	9805      	ldr	r0, [sp, #20]
 80078bc:	2101      	movs	r1, #1
 80078be:	f7ff f929 	bl	8006b14 <__i2b>
 80078c2:	4680      	mov	r8, r0
 80078c4:	b948      	cbnz	r0, 80078da <_strtod_l+0x6a2>
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	e6d4      	b.n	8007676 <_strtod_l+0x43e>
 80078cc:	f04f 32ff 	mov.w	r2, #4294967295
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	ea03 0a0a 	and.w	sl, r3, sl
 80078d8:	e7b0      	b.n	800783c <_strtod_l+0x604>
 80078da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80078dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80078de:	2d00      	cmp	r5, #0
 80078e0:	bfab      	itete	ge
 80078e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80078e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80078e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80078e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80078ea:	bfac      	ite	ge
 80078ec:	18ef      	addge	r7, r5, r3
 80078ee:	1b5e      	sublt	r6, r3, r5
 80078f0:	9b08      	ldr	r3, [sp, #32]
 80078f2:	1aed      	subs	r5, r5, r3
 80078f4:	4415      	add	r5, r2
 80078f6:	4b66      	ldr	r3, [pc, #408]	@ (8007a90 <_strtod_l+0x858>)
 80078f8:	3d01      	subs	r5, #1
 80078fa:	429d      	cmp	r5, r3
 80078fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007900:	da50      	bge.n	80079a4 <_strtod_l+0x76c>
 8007902:	1b5b      	subs	r3, r3, r5
 8007904:	2b1f      	cmp	r3, #31
 8007906:	eba2 0203 	sub.w	r2, r2, r3
 800790a:	f04f 0101 	mov.w	r1, #1
 800790e:	dc3d      	bgt.n	800798c <_strtod_l+0x754>
 8007910:	fa01 f303 	lsl.w	r3, r1, r3
 8007914:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007916:	2300      	movs	r3, #0
 8007918:	9310      	str	r3, [sp, #64]	@ 0x40
 800791a:	18bd      	adds	r5, r7, r2
 800791c:	9b08      	ldr	r3, [sp, #32]
 800791e:	42af      	cmp	r7, r5
 8007920:	4416      	add	r6, r2
 8007922:	441e      	add	r6, r3
 8007924:	463b      	mov	r3, r7
 8007926:	bfa8      	it	ge
 8007928:	462b      	movge	r3, r5
 800792a:	42b3      	cmp	r3, r6
 800792c:	bfa8      	it	ge
 800792e:	4633      	movge	r3, r6
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfc2      	ittt	gt
 8007934:	1aed      	subgt	r5, r5, r3
 8007936:	1af6      	subgt	r6, r6, r3
 8007938:	1aff      	subgt	r7, r7, r3
 800793a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800793c:	2b00      	cmp	r3, #0
 800793e:	dd16      	ble.n	800796e <_strtod_l+0x736>
 8007940:	4641      	mov	r1, r8
 8007942:	9805      	ldr	r0, [sp, #20]
 8007944:	461a      	mov	r2, r3
 8007946:	f7ff f9a5 	bl	8006c94 <__pow5mult>
 800794a:	4680      	mov	r8, r0
 800794c:	2800      	cmp	r0, #0
 800794e:	d0ba      	beq.n	80078c6 <_strtod_l+0x68e>
 8007950:	4601      	mov	r1, r0
 8007952:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007954:	9805      	ldr	r0, [sp, #20]
 8007956:	f7ff f8f3 	bl	8006b40 <__multiply>
 800795a:	900e      	str	r0, [sp, #56]	@ 0x38
 800795c:	2800      	cmp	r0, #0
 800795e:	f43f ae8a 	beq.w	8007676 <_strtod_l+0x43e>
 8007962:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007964:	9805      	ldr	r0, [sp, #20]
 8007966:	f7fe ffd7 	bl	8006918 <_Bfree>
 800796a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800796c:	931a      	str	r3, [sp, #104]	@ 0x68
 800796e:	2d00      	cmp	r5, #0
 8007970:	dc1d      	bgt.n	80079ae <_strtod_l+0x776>
 8007972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	dd23      	ble.n	80079c0 <_strtod_l+0x788>
 8007978:	4649      	mov	r1, r9
 800797a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800797c:	9805      	ldr	r0, [sp, #20]
 800797e:	f7ff f989 	bl	8006c94 <__pow5mult>
 8007982:	4681      	mov	r9, r0
 8007984:	b9e0      	cbnz	r0, 80079c0 <_strtod_l+0x788>
 8007986:	f04f 0900 	mov.w	r9, #0
 800798a:	e674      	b.n	8007676 <_strtod_l+0x43e>
 800798c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007990:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007994:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007998:	35e2      	adds	r5, #226	@ 0xe2
 800799a:	fa01 f305 	lsl.w	r3, r1, r5
 800799e:	9310      	str	r3, [sp, #64]	@ 0x40
 80079a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80079a2:	e7ba      	b.n	800791a <_strtod_l+0x6e2>
 80079a4:	2300      	movs	r3, #0
 80079a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80079a8:	2301      	movs	r3, #1
 80079aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079ac:	e7b5      	b.n	800791a <_strtod_l+0x6e2>
 80079ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079b0:	9805      	ldr	r0, [sp, #20]
 80079b2:	462a      	mov	r2, r5
 80079b4:	f7ff f9c8 	bl	8006d48 <__lshift>
 80079b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d1d9      	bne.n	8007972 <_strtod_l+0x73a>
 80079be:	e65a      	b.n	8007676 <_strtod_l+0x43e>
 80079c0:	2e00      	cmp	r6, #0
 80079c2:	dd07      	ble.n	80079d4 <_strtod_l+0x79c>
 80079c4:	4649      	mov	r1, r9
 80079c6:	9805      	ldr	r0, [sp, #20]
 80079c8:	4632      	mov	r2, r6
 80079ca:	f7ff f9bd 	bl	8006d48 <__lshift>
 80079ce:	4681      	mov	r9, r0
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d0d8      	beq.n	8007986 <_strtod_l+0x74e>
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	dd08      	ble.n	80079ea <_strtod_l+0x7b2>
 80079d8:	4641      	mov	r1, r8
 80079da:	9805      	ldr	r0, [sp, #20]
 80079dc:	463a      	mov	r2, r7
 80079de:	f7ff f9b3 	bl	8006d48 <__lshift>
 80079e2:	4680      	mov	r8, r0
 80079e4:	2800      	cmp	r0, #0
 80079e6:	f43f ae46 	beq.w	8007676 <_strtod_l+0x43e>
 80079ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079ec:	9805      	ldr	r0, [sp, #20]
 80079ee:	464a      	mov	r2, r9
 80079f0:	f7ff fa32 	bl	8006e58 <__mdiff>
 80079f4:	4604      	mov	r4, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f43f ae3d 	beq.w	8007676 <_strtod_l+0x43e>
 80079fc:	68c3      	ldr	r3, [r0, #12]
 80079fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a00:	2300      	movs	r3, #0
 8007a02:	60c3      	str	r3, [r0, #12]
 8007a04:	4641      	mov	r1, r8
 8007a06:	f7ff fa0b 	bl	8006e20 <__mcmp>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	da46      	bge.n	8007a9c <_strtod_l+0x864>
 8007a0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a10:	ea53 030a 	orrs.w	r3, r3, sl
 8007a14:	d16c      	bne.n	8007af0 <_strtod_l+0x8b8>
 8007a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d168      	bne.n	8007af0 <_strtod_l+0x8b8>
 8007a1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a22:	0d1b      	lsrs	r3, r3, #20
 8007a24:	051b      	lsls	r3, r3, #20
 8007a26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007a2a:	d961      	bls.n	8007af0 <_strtod_l+0x8b8>
 8007a2c:	6963      	ldr	r3, [r4, #20]
 8007a2e:	b913      	cbnz	r3, 8007a36 <_strtod_l+0x7fe>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	dd5c      	ble.n	8007af0 <_strtod_l+0x8b8>
 8007a36:	4621      	mov	r1, r4
 8007a38:	2201      	movs	r2, #1
 8007a3a:	9805      	ldr	r0, [sp, #20]
 8007a3c:	f7ff f984 	bl	8006d48 <__lshift>
 8007a40:	4641      	mov	r1, r8
 8007a42:	4604      	mov	r4, r0
 8007a44:	f7ff f9ec 	bl	8006e20 <__mcmp>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	dd51      	ble.n	8007af0 <_strtod_l+0x8b8>
 8007a4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a50:	9a08      	ldr	r2, [sp, #32]
 8007a52:	0d1b      	lsrs	r3, r3, #20
 8007a54:	051b      	lsls	r3, r3, #20
 8007a56:	2a00      	cmp	r2, #0
 8007a58:	d06b      	beq.n	8007b32 <_strtod_l+0x8fa>
 8007a5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007a5e:	d868      	bhi.n	8007b32 <_strtod_l+0x8fa>
 8007a60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007a64:	f67f ae9d 	bls.w	80077a2 <_strtod_l+0x56a>
 8007a68:	4b0a      	ldr	r3, [pc, #40]	@ (8007a94 <_strtod_l+0x85c>)
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f7f8 fdca 	bl	8000608 <__aeabi_dmul>
 8007a74:	4b08      	ldr	r3, [pc, #32]	@ (8007a98 <_strtod_l+0x860>)
 8007a76:	400b      	ands	r3, r1
 8007a78:	4682      	mov	sl, r0
 8007a7a:	468b      	mov	fp, r1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f47f ae05 	bne.w	800768c <_strtod_l+0x454>
 8007a82:	9a05      	ldr	r2, [sp, #20]
 8007a84:	2322      	movs	r3, #34	@ 0x22
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	e600      	b.n	800768c <_strtod_l+0x454>
 8007a8a:	bf00      	nop
 8007a8c:	08009738 	.word	0x08009738
 8007a90:	fffffc02 	.word	0xfffffc02
 8007a94:	39500000 	.word	0x39500000
 8007a98:	7ff00000 	.word	0x7ff00000
 8007a9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007aa0:	d165      	bne.n	8007b6e <_strtod_l+0x936>
 8007aa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aa8:	b35a      	cbz	r2, 8007b02 <_strtod_l+0x8ca>
 8007aaa:	4a9f      	ldr	r2, [pc, #636]	@ (8007d28 <_strtod_l+0xaf0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d12b      	bne.n	8007b08 <_strtod_l+0x8d0>
 8007ab0:	9b08      	ldr	r3, [sp, #32]
 8007ab2:	4651      	mov	r1, sl
 8007ab4:	b303      	cbz	r3, 8007af8 <_strtod_l+0x8c0>
 8007ab6:	4b9d      	ldr	r3, [pc, #628]	@ (8007d2c <_strtod_l+0xaf4>)
 8007ab8:	465a      	mov	r2, fp
 8007aba:	4013      	ands	r3, r2
 8007abc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac4:	d81b      	bhi.n	8007afe <_strtod_l+0x8c6>
 8007ac6:	0d1b      	lsrs	r3, r3, #20
 8007ac8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007acc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	d119      	bne.n	8007b08 <_strtod_l+0x8d0>
 8007ad4:	4b96      	ldr	r3, [pc, #600]	@ (8007d30 <_strtod_l+0xaf8>)
 8007ad6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d102      	bne.n	8007ae2 <_strtod_l+0x8aa>
 8007adc:	3101      	adds	r1, #1
 8007ade:	f43f adca 	beq.w	8007676 <_strtod_l+0x43e>
 8007ae2:	4b92      	ldr	r3, [pc, #584]	@ (8007d2c <_strtod_l+0xaf4>)
 8007ae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ae6:	401a      	ands	r2, r3
 8007ae8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007aec:	f04f 0a00 	mov.w	sl, #0
 8007af0:	9b08      	ldr	r3, [sp, #32]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1b8      	bne.n	8007a68 <_strtod_l+0x830>
 8007af6:	e5c9      	b.n	800768c <_strtod_l+0x454>
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295
 8007afc:	e7e8      	b.n	8007ad0 <_strtod_l+0x898>
 8007afe:	4613      	mov	r3, r2
 8007b00:	e7e6      	b.n	8007ad0 <_strtod_l+0x898>
 8007b02:	ea53 030a 	orrs.w	r3, r3, sl
 8007b06:	d0a1      	beq.n	8007a4c <_strtod_l+0x814>
 8007b08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b0a:	b1db      	cbz	r3, 8007b44 <_strtod_l+0x90c>
 8007b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b0e:	4213      	tst	r3, r2
 8007b10:	d0ee      	beq.n	8007af0 <_strtod_l+0x8b8>
 8007b12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b14:	9a08      	ldr	r2, [sp, #32]
 8007b16:	4650      	mov	r0, sl
 8007b18:	4659      	mov	r1, fp
 8007b1a:	b1bb      	cbz	r3, 8007b4c <_strtod_l+0x914>
 8007b1c:	f7ff fb6e 	bl	80071fc <sulp>
 8007b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b24:	ec53 2b10 	vmov	r2, r3, d0
 8007b28:	f7f8 fbb8 	bl	800029c <__adddf3>
 8007b2c:	4682      	mov	sl, r0
 8007b2e:	468b      	mov	fp, r1
 8007b30:	e7de      	b.n	8007af0 <_strtod_l+0x8b8>
 8007b32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007b36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b3e:	f04f 3aff 	mov.w	sl, #4294967295
 8007b42:	e7d5      	b.n	8007af0 <_strtod_l+0x8b8>
 8007b44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b46:	ea13 0f0a 	tst.w	r3, sl
 8007b4a:	e7e1      	b.n	8007b10 <_strtod_l+0x8d8>
 8007b4c:	f7ff fb56 	bl	80071fc <sulp>
 8007b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b54:	ec53 2b10 	vmov	r2, r3, d0
 8007b58:	f7f8 fb9e 	bl	8000298 <__aeabi_dsub>
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4682      	mov	sl, r0
 8007b62:	468b      	mov	fp, r1
 8007b64:	f7f8 ffb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d0c1      	beq.n	8007af0 <_strtod_l+0x8b8>
 8007b6c:	e619      	b.n	80077a2 <_strtod_l+0x56a>
 8007b6e:	4641      	mov	r1, r8
 8007b70:	4620      	mov	r0, r4
 8007b72:	f7ff facd 	bl	8007110 <__ratio>
 8007b76:	ec57 6b10 	vmov	r6, r7, d0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 ffbc 	bl	8000b00 <__aeabi_dcmple>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d06f      	beq.n	8007c6c <_strtod_l+0xa34>
 8007b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d17a      	bne.n	8007c88 <_strtod_l+0xa50>
 8007b92:	f1ba 0f00 	cmp.w	sl, #0
 8007b96:	d158      	bne.n	8007c4a <_strtod_l+0xa12>
 8007b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d15a      	bne.n	8007c58 <_strtod_l+0xa20>
 8007ba2:	4b64      	ldr	r3, [pc, #400]	@ (8007d34 <_strtod_l+0xafc>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 ff9f 	bl	8000aec <__aeabi_dcmplt>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d159      	bne.n	8007c66 <_strtod_l+0xa2e>
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	4639      	mov	r1, r7
 8007bb6:	4b60      	ldr	r3, [pc, #384]	@ (8007d38 <_strtod_l+0xb00>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f7f8 fd25 	bl	8000608 <__aeabi_dmul>
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	460f      	mov	r7, r1
 8007bc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007bc6:	9606      	str	r6, [sp, #24]
 8007bc8:	9307      	str	r3, [sp, #28]
 8007bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bce:	4d57      	ldr	r5, [pc, #348]	@ (8007d2c <_strtod_l+0xaf4>)
 8007bd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bd6:	401d      	ands	r5, r3
 8007bd8:	4b58      	ldr	r3, [pc, #352]	@ (8007d3c <_strtod_l+0xb04>)
 8007bda:	429d      	cmp	r5, r3
 8007bdc:	f040 80b2 	bne.w	8007d44 <_strtod_l+0xb0c>
 8007be0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007be2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007be6:	ec4b ab10 	vmov	d0, sl, fp
 8007bea:	f7ff f9c9 	bl	8006f80 <__ulp>
 8007bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bf2:	ec51 0b10 	vmov	r0, r1, d0
 8007bf6:	f7f8 fd07 	bl	8000608 <__aeabi_dmul>
 8007bfa:	4652      	mov	r2, sl
 8007bfc:	465b      	mov	r3, fp
 8007bfe:	f7f8 fb4d 	bl	800029c <__adddf3>
 8007c02:	460b      	mov	r3, r1
 8007c04:	4949      	ldr	r1, [pc, #292]	@ (8007d2c <_strtod_l+0xaf4>)
 8007c06:	4a4e      	ldr	r2, [pc, #312]	@ (8007d40 <_strtod_l+0xb08>)
 8007c08:	4019      	ands	r1, r3
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	4682      	mov	sl, r0
 8007c0e:	d942      	bls.n	8007c96 <_strtod_l+0xa5e>
 8007c10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c12:	4b47      	ldr	r3, [pc, #284]	@ (8007d30 <_strtod_l+0xaf8>)
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d103      	bne.n	8007c20 <_strtod_l+0x9e8>
 8007c18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	f43f ad2b 	beq.w	8007676 <_strtod_l+0x43e>
 8007c20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007d30 <_strtod_l+0xaf8>
 8007c24:	f04f 3aff 	mov.w	sl, #4294967295
 8007c28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c2a:	9805      	ldr	r0, [sp, #20]
 8007c2c:	f7fe fe74 	bl	8006918 <_Bfree>
 8007c30:	9805      	ldr	r0, [sp, #20]
 8007c32:	4649      	mov	r1, r9
 8007c34:	f7fe fe70 	bl	8006918 <_Bfree>
 8007c38:	9805      	ldr	r0, [sp, #20]
 8007c3a:	4641      	mov	r1, r8
 8007c3c:	f7fe fe6c 	bl	8006918 <_Bfree>
 8007c40:	9805      	ldr	r0, [sp, #20]
 8007c42:	4621      	mov	r1, r4
 8007c44:	f7fe fe68 	bl	8006918 <_Bfree>
 8007c48:	e618      	b.n	800787c <_strtod_l+0x644>
 8007c4a:	f1ba 0f01 	cmp.w	sl, #1
 8007c4e:	d103      	bne.n	8007c58 <_strtod_l+0xa20>
 8007c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f43f ada5 	beq.w	80077a2 <_strtod_l+0x56a>
 8007c58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007d08 <_strtod_l+0xad0>
 8007c5c:	4f35      	ldr	r7, [pc, #212]	@ (8007d34 <_strtod_l+0xafc>)
 8007c5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c62:	2600      	movs	r6, #0
 8007c64:	e7b1      	b.n	8007bca <_strtod_l+0x992>
 8007c66:	4f34      	ldr	r7, [pc, #208]	@ (8007d38 <_strtod_l+0xb00>)
 8007c68:	2600      	movs	r6, #0
 8007c6a:	e7aa      	b.n	8007bc2 <_strtod_l+0x98a>
 8007c6c:	4b32      	ldr	r3, [pc, #200]	@ (8007d38 <_strtod_l+0xb00>)
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4639      	mov	r1, r7
 8007c72:	2200      	movs	r2, #0
 8007c74:	f7f8 fcc8 	bl	8000608 <__aeabi_dmul>
 8007c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460f      	mov	r7, r1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d09f      	beq.n	8007bc2 <_strtod_l+0x98a>
 8007c82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007c86:	e7a0      	b.n	8007bca <_strtod_l+0x992>
 8007c88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007d10 <_strtod_l+0xad8>
 8007c8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c90:	ec57 6b17 	vmov	r6, r7, d7
 8007c94:	e799      	b.n	8007bca <_strtod_l+0x992>
 8007c96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007c9a:	9b08      	ldr	r3, [sp, #32]
 8007c9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1c1      	bne.n	8007c28 <_strtod_l+0x9f0>
 8007ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ca8:	0d1b      	lsrs	r3, r3, #20
 8007caa:	051b      	lsls	r3, r3, #20
 8007cac:	429d      	cmp	r5, r3
 8007cae:	d1bb      	bne.n	8007c28 <_strtod_l+0x9f0>
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f9 f808 	bl	8000cc8 <__aeabi_d2lz>
 8007cb8:	f7f8 fc78 	bl	80005ac <__aeabi_l2d>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 fae8 	bl	8000298 <__aeabi_dsub>
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4602      	mov	r2, r0
 8007ccc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007cd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cd6:	ea46 060a 	orr.w	r6, r6, sl
 8007cda:	431e      	orrs	r6, r3
 8007cdc:	d06f      	beq.n	8007dbe <_strtod_l+0xb86>
 8007cde:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d18 <_strtod_l+0xae0>)
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f7f8 ff02 	bl	8000aec <__aeabi_dcmplt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	f47f accf 	bne.w	800768c <_strtod_l+0x454>
 8007cee:	a30c      	add	r3, pc, #48	@ (adr r3, 8007d20 <_strtod_l+0xae8>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cf8:	f7f8 ff16 	bl	8000b28 <__aeabi_dcmpgt>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d093      	beq.n	8007c28 <_strtod_l+0x9f0>
 8007d00:	e4c4      	b.n	800768c <_strtod_l+0x454>
 8007d02:	bf00      	nop
 8007d04:	f3af 8000 	nop.w
 8007d08:	00000000 	.word	0x00000000
 8007d0c:	bff00000 	.word	0xbff00000
 8007d10:	00000000 	.word	0x00000000
 8007d14:	3ff00000 	.word	0x3ff00000
 8007d18:	94a03595 	.word	0x94a03595
 8007d1c:	3fdfffff 	.word	0x3fdfffff
 8007d20:	35afe535 	.word	0x35afe535
 8007d24:	3fe00000 	.word	0x3fe00000
 8007d28:	000fffff 	.word	0x000fffff
 8007d2c:	7ff00000 	.word	0x7ff00000
 8007d30:	7fefffff 	.word	0x7fefffff
 8007d34:	3ff00000 	.word	0x3ff00000
 8007d38:	3fe00000 	.word	0x3fe00000
 8007d3c:	7fe00000 	.word	0x7fe00000
 8007d40:	7c9fffff 	.word	0x7c9fffff
 8007d44:	9b08      	ldr	r3, [sp, #32]
 8007d46:	b323      	cbz	r3, 8007d92 <_strtod_l+0xb5a>
 8007d48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007d4c:	d821      	bhi.n	8007d92 <_strtod_l+0xb5a>
 8007d4e:	a328      	add	r3, pc, #160	@ (adr r3, 8007df0 <_strtod_l+0xbb8>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	4630      	mov	r0, r6
 8007d56:	4639      	mov	r1, r7
 8007d58:	f7f8 fed2 	bl	8000b00 <__aeabi_dcmple>
 8007d5c:	b1a0      	cbz	r0, 8007d88 <_strtod_l+0xb50>
 8007d5e:	4639      	mov	r1, r7
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7f8 ff29 	bl	8000bb8 <__aeabi_d2uiz>
 8007d66:	2801      	cmp	r0, #1
 8007d68:	bf38      	it	cc
 8007d6a:	2001      	movcc	r0, #1
 8007d6c:	f7f8 fbd2 	bl	8000514 <__aeabi_ui2d>
 8007d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d72:	4606      	mov	r6, r0
 8007d74:	460f      	mov	r7, r1
 8007d76:	b9fb      	cbnz	r3, 8007db8 <_strtod_l+0xb80>
 8007d78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007d7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007d84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007d88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007d8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007d8e:	1b5b      	subs	r3, r3, r5
 8007d90:	9311      	str	r3, [sp, #68]	@ 0x44
 8007d92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007d9a:	f7ff f8f1 	bl	8006f80 <__ulp>
 8007d9e:	4650      	mov	r0, sl
 8007da0:	ec53 2b10 	vmov	r2, r3, d0
 8007da4:	4659      	mov	r1, fp
 8007da6:	f7f8 fc2f 	bl	8000608 <__aeabi_dmul>
 8007daa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007dae:	f7f8 fa75 	bl	800029c <__adddf3>
 8007db2:	4682      	mov	sl, r0
 8007db4:	468b      	mov	fp, r1
 8007db6:	e770      	b.n	8007c9a <_strtod_l+0xa62>
 8007db8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007dbc:	e7e0      	b.n	8007d80 <_strtod_l+0xb48>
 8007dbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8007df8 <_strtod_l+0xbc0>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f7f8 fe92 	bl	8000aec <__aeabi_dcmplt>
 8007dc8:	e798      	b.n	8007cfc <_strtod_l+0xac4>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007dd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	f7ff ba6d 	b.w	80072b2 <_strtod_l+0x7a>
 8007dd8:	2a65      	cmp	r2, #101	@ 0x65
 8007dda:	f43f ab66 	beq.w	80074aa <_strtod_l+0x272>
 8007dde:	2a45      	cmp	r2, #69	@ 0x45
 8007de0:	f43f ab63 	beq.w	80074aa <_strtod_l+0x272>
 8007de4:	2301      	movs	r3, #1
 8007de6:	f7ff bb9e 	b.w	8007526 <_strtod_l+0x2ee>
 8007dea:	bf00      	nop
 8007dec:	f3af 8000 	nop.w
 8007df0:	ffc00000 	.word	0xffc00000
 8007df4:	41dfffff 	.word	0x41dfffff
 8007df8:	94a03595 	.word	0x94a03595
 8007dfc:	3fcfffff 	.word	0x3fcfffff

08007e00 <_strtod_r>:
 8007e00:	4b01      	ldr	r3, [pc, #4]	@ (8007e08 <_strtod_r+0x8>)
 8007e02:	f7ff ba19 	b.w	8007238 <_strtod_l>
 8007e06:	bf00      	nop
 8007e08:	2000006c 	.word	0x2000006c

08007e0c <__ssputs_r>:
 8007e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e10:	688e      	ldr	r6, [r1, #8]
 8007e12:	461f      	mov	r7, r3
 8007e14:	42be      	cmp	r6, r7
 8007e16:	680b      	ldr	r3, [r1, #0]
 8007e18:	4682      	mov	sl, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	4690      	mov	r8, r2
 8007e1e:	d82d      	bhi.n	8007e7c <__ssputs_r+0x70>
 8007e20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e28:	d026      	beq.n	8007e78 <__ssputs_r+0x6c>
 8007e2a:	6965      	ldr	r5, [r4, #20]
 8007e2c:	6909      	ldr	r1, [r1, #16]
 8007e2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e32:	eba3 0901 	sub.w	r9, r3, r1
 8007e36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e3a:	1c7b      	adds	r3, r7, #1
 8007e3c:	444b      	add	r3, r9
 8007e3e:	106d      	asrs	r5, r5, #1
 8007e40:	429d      	cmp	r5, r3
 8007e42:	bf38      	it	cc
 8007e44:	461d      	movcc	r5, r3
 8007e46:	0553      	lsls	r3, r2, #21
 8007e48:	d527      	bpl.n	8007e9a <__ssputs_r+0x8e>
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	f7fe fc98 	bl	8006780 <_malloc_r>
 8007e50:	4606      	mov	r6, r0
 8007e52:	b360      	cbz	r0, 8007eae <__ssputs_r+0xa2>
 8007e54:	6921      	ldr	r1, [r4, #16]
 8007e56:	464a      	mov	r2, r9
 8007e58:	f000 fc22 	bl	80086a0 <memcpy>
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e66:	81a3      	strh	r3, [r4, #12]
 8007e68:	6126      	str	r6, [r4, #16]
 8007e6a:	6165      	str	r5, [r4, #20]
 8007e6c:	444e      	add	r6, r9
 8007e6e:	eba5 0509 	sub.w	r5, r5, r9
 8007e72:	6026      	str	r6, [r4, #0]
 8007e74:	60a5      	str	r5, [r4, #8]
 8007e76:	463e      	mov	r6, r7
 8007e78:	42be      	cmp	r6, r7
 8007e7a:	d900      	bls.n	8007e7e <__ssputs_r+0x72>
 8007e7c:	463e      	mov	r6, r7
 8007e7e:	6820      	ldr	r0, [r4, #0]
 8007e80:	4632      	mov	r2, r6
 8007e82:	4641      	mov	r1, r8
 8007e84:	f000 fbd0 	bl	8008628 <memmove>
 8007e88:	68a3      	ldr	r3, [r4, #8]
 8007e8a:	1b9b      	subs	r3, r3, r6
 8007e8c:	60a3      	str	r3, [r4, #8]
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	4433      	add	r3, r6
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	2000      	movs	r0, #0
 8007e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	f000 ff95 	bl	8008dca <_realloc_r>
 8007ea0:	4606      	mov	r6, r0
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d1e0      	bne.n	8007e68 <__ssputs_r+0x5c>
 8007ea6:	6921      	ldr	r1, [r4, #16]
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	f7fe fbf5 	bl	8006698 <_free_r>
 8007eae:	230c      	movs	r3, #12
 8007eb0:	f8ca 3000 	str.w	r3, [sl]
 8007eb4:	89a3      	ldrh	r3, [r4, #12]
 8007eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eba:	81a3      	strh	r3, [r4, #12]
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	e7e9      	b.n	8007e96 <__ssputs_r+0x8a>
	...

08007ec4 <_svfiprintf_r>:
 8007ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec8:	4698      	mov	r8, r3
 8007eca:	898b      	ldrh	r3, [r1, #12]
 8007ecc:	061b      	lsls	r3, r3, #24
 8007ece:	b09d      	sub	sp, #116	@ 0x74
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	460d      	mov	r5, r1
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	d510      	bpl.n	8007efa <_svfiprintf_r+0x36>
 8007ed8:	690b      	ldr	r3, [r1, #16]
 8007eda:	b973      	cbnz	r3, 8007efa <_svfiprintf_r+0x36>
 8007edc:	2140      	movs	r1, #64	@ 0x40
 8007ede:	f7fe fc4f 	bl	8006780 <_malloc_r>
 8007ee2:	6028      	str	r0, [r5, #0]
 8007ee4:	6128      	str	r0, [r5, #16]
 8007ee6:	b930      	cbnz	r0, 8007ef6 <_svfiprintf_r+0x32>
 8007ee8:	230c      	movs	r3, #12
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	b01d      	add	sp, #116	@ 0x74
 8007ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef6:	2340      	movs	r3, #64	@ 0x40
 8007ef8:	616b      	str	r3, [r5, #20]
 8007efa:	2300      	movs	r3, #0
 8007efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007efe:	2320      	movs	r3, #32
 8007f00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f08:	2330      	movs	r3, #48	@ 0x30
 8007f0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80080a8 <_svfiprintf_r+0x1e4>
 8007f0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f12:	f04f 0901 	mov.w	r9, #1
 8007f16:	4623      	mov	r3, r4
 8007f18:	469a      	mov	sl, r3
 8007f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f1e:	b10a      	cbz	r2, 8007f24 <_svfiprintf_r+0x60>
 8007f20:	2a25      	cmp	r2, #37	@ 0x25
 8007f22:	d1f9      	bne.n	8007f18 <_svfiprintf_r+0x54>
 8007f24:	ebba 0b04 	subs.w	fp, sl, r4
 8007f28:	d00b      	beq.n	8007f42 <_svfiprintf_r+0x7e>
 8007f2a:	465b      	mov	r3, fp
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4629      	mov	r1, r5
 8007f30:	4638      	mov	r0, r7
 8007f32:	f7ff ff6b 	bl	8007e0c <__ssputs_r>
 8007f36:	3001      	adds	r0, #1
 8007f38:	f000 80a7 	beq.w	800808a <_svfiprintf_r+0x1c6>
 8007f3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f3e:	445a      	add	r2, fp
 8007f40:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f42:	f89a 3000 	ldrb.w	r3, [sl]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 809f 	beq.w	800808a <_svfiprintf_r+0x1c6>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f56:	f10a 0a01 	add.w	sl, sl, #1
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	9307      	str	r3, [sp, #28]
 8007f5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f62:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f64:	4654      	mov	r4, sl
 8007f66:	2205      	movs	r2, #5
 8007f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f6c:	484e      	ldr	r0, [pc, #312]	@ (80080a8 <_svfiprintf_r+0x1e4>)
 8007f6e:	f7f8 f937 	bl	80001e0 <memchr>
 8007f72:	9a04      	ldr	r2, [sp, #16]
 8007f74:	b9d8      	cbnz	r0, 8007fae <_svfiprintf_r+0xea>
 8007f76:	06d0      	lsls	r0, r2, #27
 8007f78:	bf44      	itt	mi
 8007f7a:	2320      	movmi	r3, #32
 8007f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f80:	0711      	lsls	r1, r2, #28
 8007f82:	bf44      	itt	mi
 8007f84:	232b      	movmi	r3, #43	@ 0x2b
 8007f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f90:	d015      	beq.n	8007fbe <_svfiprintf_r+0xfa>
 8007f92:	9a07      	ldr	r2, [sp, #28]
 8007f94:	4654      	mov	r4, sl
 8007f96:	2000      	movs	r0, #0
 8007f98:	f04f 0c0a 	mov.w	ip, #10
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fa2:	3b30      	subs	r3, #48	@ 0x30
 8007fa4:	2b09      	cmp	r3, #9
 8007fa6:	d94b      	bls.n	8008040 <_svfiprintf_r+0x17c>
 8007fa8:	b1b0      	cbz	r0, 8007fd8 <_svfiprintf_r+0x114>
 8007faa:	9207      	str	r2, [sp, #28]
 8007fac:	e014      	b.n	8007fd8 <_svfiprintf_r+0x114>
 8007fae:	eba0 0308 	sub.w	r3, r0, r8
 8007fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	9304      	str	r3, [sp, #16]
 8007fba:	46a2      	mov	sl, r4
 8007fbc:	e7d2      	b.n	8007f64 <_svfiprintf_r+0xa0>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	1d19      	adds	r1, r3, #4
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	9103      	str	r1, [sp, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bfbb      	ittet	lt
 8007fca:	425b      	neglt	r3, r3
 8007fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007fd0:	9307      	strge	r3, [sp, #28]
 8007fd2:	9307      	strlt	r3, [sp, #28]
 8007fd4:	bfb8      	it	lt
 8007fd6:	9204      	strlt	r2, [sp, #16]
 8007fd8:	7823      	ldrb	r3, [r4, #0]
 8007fda:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fdc:	d10a      	bne.n	8007ff4 <_svfiprintf_r+0x130>
 8007fde:	7863      	ldrb	r3, [r4, #1]
 8007fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fe2:	d132      	bne.n	800804a <_svfiprintf_r+0x186>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	1d1a      	adds	r2, r3, #4
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	9203      	str	r2, [sp, #12]
 8007fec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ff0:	3402      	adds	r4, #2
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80080b8 <_svfiprintf_r+0x1f4>
 8007ff8:	7821      	ldrb	r1, [r4, #0]
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	4650      	mov	r0, sl
 8007ffe:	f7f8 f8ef 	bl	80001e0 <memchr>
 8008002:	b138      	cbz	r0, 8008014 <_svfiprintf_r+0x150>
 8008004:	9b04      	ldr	r3, [sp, #16]
 8008006:	eba0 000a 	sub.w	r0, r0, sl
 800800a:	2240      	movs	r2, #64	@ 0x40
 800800c:	4082      	lsls	r2, r0
 800800e:	4313      	orrs	r3, r2
 8008010:	3401      	adds	r4, #1
 8008012:	9304      	str	r3, [sp, #16]
 8008014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008018:	4824      	ldr	r0, [pc, #144]	@ (80080ac <_svfiprintf_r+0x1e8>)
 800801a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800801e:	2206      	movs	r2, #6
 8008020:	f7f8 f8de 	bl	80001e0 <memchr>
 8008024:	2800      	cmp	r0, #0
 8008026:	d036      	beq.n	8008096 <_svfiprintf_r+0x1d2>
 8008028:	4b21      	ldr	r3, [pc, #132]	@ (80080b0 <_svfiprintf_r+0x1ec>)
 800802a:	bb1b      	cbnz	r3, 8008074 <_svfiprintf_r+0x1b0>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	3307      	adds	r3, #7
 8008030:	f023 0307 	bic.w	r3, r3, #7
 8008034:	3308      	adds	r3, #8
 8008036:	9303      	str	r3, [sp, #12]
 8008038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800803a:	4433      	add	r3, r6
 800803c:	9309      	str	r3, [sp, #36]	@ 0x24
 800803e:	e76a      	b.n	8007f16 <_svfiprintf_r+0x52>
 8008040:	fb0c 3202 	mla	r2, ip, r2, r3
 8008044:	460c      	mov	r4, r1
 8008046:	2001      	movs	r0, #1
 8008048:	e7a8      	b.n	8007f9c <_svfiprintf_r+0xd8>
 800804a:	2300      	movs	r3, #0
 800804c:	3401      	adds	r4, #1
 800804e:	9305      	str	r3, [sp, #20]
 8008050:	4619      	mov	r1, r3
 8008052:	f04f 0c0a 	mov.w	ip, #10
 8008056:	4620      	mov	r0, r4
 8008058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800805c:	3a30      	subs	r2, #48	@ 0x30
 800805e:	2a09      	cmp	r2, #9
 8008060:	d903      	bls.n	800806a <_svfiprintf_r+0x1a6>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0c6      	beq.n	8007ff4 <_svfiprintf_r+0x130>
 8008066:	9105      	str	r1, [sp, #20]
 8008068:	e7c4      	b.n	8007ff4 <_svfiprintf_r+0x130>
 800806a:	fb0c 2101 	mla	r1, ip, r1, r2
 800806e:	4604      	mov	r4, r0
 8008070:	2301      	movs	r3, #1
 8008072:	e7f0      	b.n	8008056 <_svfiprintf_r+0x192>
 8008074:	ab03      	add	r3, sp, #12
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	462a      	mov	r2, r5
 800807a:	4b0e      	ldr	r3, [pc, #56]	@ (80080b4 <_svfiprintf_r+0x1f0>)
 800807c:	a904      	add	r1, sp, #16
 800807e:	4638      	mov	r0, r7
 8008080:	f7fc fd2c 	bl	8004adc <_printf_float>
 8008084:	1c42      	adds	r2, r0, #1
 8008086:	4606      	mov	r6, r0
 8008088:	d1d6      	bne.n	8008038 <_svfiprintf_r+0x174>
 800808a:	89ab      	ldrh	r3, [r5, #12]
 800808c:	065b      	lsls	r3, r3, #25
 800808e:	f53f af2d 	bmi.w	8007eec <_svfiprintf_r+0x28>
 8008092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008094:	e72c      	b.n	8007ef0 <_svfiprintf_r+0x2c>
 8008096:	ab03      	add	r3, sp, #12
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	462a      	mov	r2, r5
 800809c:	4b05      	ldr	r3, [pc, #20]	@ (80080b4 <_svfiprintf_r+0x1f0>)
 800809e:	a904      	add	r1, sp, #16
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7fc ffb3 	bl	800500c <_printf_i>
 80080a6:	e7ed      	b.n	8008084 <_svfiprintf_r+0x1c0>
 80080a8:	08009760 	.word	0x08009760
 80080ac:	0800976a 	.word	0x0800976a
 80080b0:	08004add 	.word	0x08004add
 80080b4:	08007e0d 	.word	0x08007e0d
 80080b8:	08009766 	.word	0x08009766

080080bc <__sfputc_r>:
 80080bc:	6893      	ldr	r3, [r2, #8]
 80080be:	3b01      	subs	r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	b410      	push	{r4}
 80080c4:	6093      	str	r3, [r2, #8]
 80080c6:	da08      	bge.n	80080da <__sfputc_r+0x1e>
 80080c8:	6994      	ldr	r4, [r2, #24]
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	db01      	blt.n	80080d2 <__sfputc_r+0x16>
 80080ce:	290a      	cmp	r1, #10
 80080d0:	d103      	bne.n	80080da <__sfputc_r+0x1e>
 80080d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080d6:	f000 ba13 	b.w	8008500 <__swbuf_r>
 80080da:	6813      	ldr	r3, [r2, #0]
 80080dc:	1c58      	adds	r0, r3, #1
 80080de:	6010      	str	r0, [r2, #0]
 80080e0:	7019      	strb	r1, [r3, #0]
 80080e2:	4608      	mov	r0, r1
 80080e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <__sfputs_r>:
 80080ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ec:	4606      	mov	r6, r0
 80080ee:	460f      	mov	r7, r1
 80080f0:	4614      	mov	r4, r2
 80080f2:	18d5      	adds	r5, r2, r3
 80080f4:	42ac      	cmp	r4, r5
 80080f6:	d101      	bne.n	80080fc <__sfputs_r+0x12>
 80080f8:	2000      	movs	r0, #0
 80080fa:	e007      	b.n	800810c <__sfputs_r+0x22>
 80080fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008100:	463a      	mov	r2, r7
 8008102:	4630      	mov	r0, r6
 8008104:	f7ff ffda 	bl	80080bc <__sfputc_r>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	d1f3      	bne.n	80080f4 <__sfputs_r+0xa>
 800810c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008110 <_vfiprintf_r>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	460d      	mov	r5, r1
 8008116:	b09d      	sub	sp, #116	@ 0x74
 8008118:	4614      	mov	r4, r2
 800811a:	4698      	mov	r8, r3
 800811c:	4606      	mov	r6, r0
 800811e:	b118      	cbz	r0, 8008128 <_vfiprintf_r+0x18>
 8008120:	6a03      	ldr	r3, [r0, #32]
 8008122:	b90b      	cbnz	r3, 8008128 <_vfiprintf_r+0x18>
 8008124:	f7fd fb32 	bl	800578c <__sinit>
 8008128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800812a:	07d9      	lsls	r1, r3, #31
 800812c:	d405      	bmi.n	800813a <_vfiprintf_r+0x2a>
 800812e:	89ab      	ldrh	r3, [r5, #12]
 8008130:	059a      	lsls	r2, r3, #22
 8008132:	d402      	bmi.n	800813a <_vfiprintf_r+0x2a>
 8008134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008136:	f7fd fc5a 	bl	80059ee <__retarget_lock_acquire_recursive>
 800813a:	89ab      	ldrh	r3, [r5, #12]
 800813c:	071b      	lsls	r3, r3, #28
 800813e:	d501      	bpl.n	8008144 <_vfiprintf_r+0x34>
 8008140:	692b      	ldr	r3, [r5, #16]
 8008142:	b99b      	cbnz	r3, 800816c <_vfiprintf_r+0x5c>
 8008144:	4629      	mov	r1, r5
 8008146:	4630      	mov	r0, r6
 8008148:	f000 fa18 	bl	800857c <__swsetup_r>
 800814c:	b170      	cbz	r0, 800816c <_vfiprintf_r+0x5c>
 800814e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008150:	07dc      	lsls	r4, r3, #31
 8008152:	d504      	bpl.n	800815e <_vfiprintf_r+0x4e>
 8008154:	f04f 30ff 	mov.w	r0, #4294967295
 8008158:	b01d      	add	sp, #116	@ 0x74
 800815a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815e:	89ab      	ldrh	r3, [r5, #12]
 8008160:	0598      	lsls	r0, r3, #22
 8008162:	d4f7      	bmi.n	8008154 <_vfiprintf_r+0x44>
 8008164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008166:	f7fd fc43 	bl	80059f0 <__retarget_lock_release_recursive>
 800816a:	e7f3      	b.n	8008154 <_vfiprintf_r+0x44>
 800816c:	2300      	movs	r3, #0
 800816e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008170:	2320      	movs	r3, #32
 8008172:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008176:	f8cd 800c 	str.w	r8, [sp, #12]
 800817a:	2330      	movs	r3, #48	@ 0x30
 800817c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800832c <_vfiprintf_r+0x21c>
 8008180:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008184:	f04f 0901 	mov.w	r9, #1
 8008188:	4623      	mov	r3, r4
 800818a:	469a      	mov	sl, r3
 800818c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008190:	b10a      	cbz	r2, 8008196 <_vfiprintf_r+0x86>
 8008192:	2a25      	cmp	r2, #37	@ 0x25
 8008194:	d1f9      	bne.n	800818a <_vfiprintf_r+0x7a>
 8008196:	ebba 0b04 	subs.w	fp, sl, r4
 800819a:	d00b      	beq.n	80081b4 <_vfiprintf_r+0xa4>
 800819c:	465b      	mov	r3, fp
 800819e:	4622      	mov	r2, r4
 80081a0:	4629      	mov	r1, r5
 80081a2:	4630      	mov	r0, r6
 80081a4:	f7ff ffa1 	bl	80080ea <__sfputs_r>
 80081a8:	3001      	adds	r0, #1
 80081aa:	f000 80a7 	beq.w	80082fc <_vfiprintf_r+0x1ec>
 80081ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b0:	445a      	add	r2, fp
 80081b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80081b4:	f89a 3000 	ldrb.w	r3, [sl]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 809f 	beq.w	80082fc <_vfiprintf_r+0x1ec>
 80081be:	2300      	movs	r3, #0
 80081c0:	f04f 32ff 	mov.w	r2, #4294967295
 80081c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081c8:	f10a 0a01 	add.w	sl, sl, #1
 80081cc:	9304      	str	r3, [sp, #16]
 80081ce:	9307      	str	r3, [sp, #28]
 80081d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80081d6:	4654      	mov	r4, sl
 80081d8:	2205      	movs	r2, #5
 80081da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081de:	4853      	ldr	r0, [pc, #332]	@ (800832c <_vfiprintf_r+0x21c>)
 80081e0:	f7f7 fffe 	bl	80001e0 <memchr>
 80081e4:	9a04      	ldr	r2, [sp, #16]
 80081e6:	b9d8      	cbnz	r0, 8008220 <_vfiprintf_r+0x110>
 80081e8:	06d1      	lsls	r1, r2, #27
 80081ea:	bf44      	itt	mi
 80081ec:	2320      	movmi	r3, #32
 80081ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081f2:	0713      	lsls	r3, r2, #28
 80081f4:	bf44      	itt	mi
 80081f6:	232b      	movmi	r3, #43	@ 0x2b
 80081f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008200:	2b2a      	cmp	r3, #42	@ 0x2a
 8008202:	d015      	beq.n	8008230 <_vfiprintf_r+0x120>
 8008204:	9a07      	ldr	r2, [sp, #28]
 8008206:	4654      	mov	r4, sl
 8008208:	2000      	movs	r0, #0
 800820a:	f04f 0c0a 	mov.w	ip, #10
 800820e:	4621      	mov	r1, r4
 8008210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008214:	3b30      	subs	r3, #48	@ 0x30
 8008216:	2b09      	cmp	r3, #9
 8008218:	d94b      	bls.n	80082b2 <_vfiprintf_r+0x1a2>
 800821a:	b1b0      	cbz	r0, 800824a <_vfiprintf_r+0x13a>
 800821c:	9207      	str	r2, [sp, #28]
 800821e:	e014      	b.n	800824a <_vfiprintf_r+0x13a>
 8008220:	eba0 0308 	sub.w	r3, r0, r8
 8008224:	fa09 f303 	lsl.w	r3, r9, r3
 8008228:	4313      	orrs	r3, r2
 800822a:	9304      	str	r3, [sp, #16]
 800822c:	46a2      	mov	sl, r4
 800822e:	e7d2      	b.n	80081d6 <_vfiprintf_r+0xc6>
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	1d19      	adds	r1, r3, #4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	9103      	str	r1, [sp, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	bfbb      	ittet	lt
 800823c:	425b      	neglt	r3, r3
 800823e:	f042 0202 	orrlt.w	r2, r2, #2
 8008242:	9307      	strge	r3, [sp, #28]
 8008244:	9307      	strlt	r3, [sp, #28]
 8008246:	bfb8      	it	lt
 8008248:	9204      	strlt	r2, [sp, #16]
 800824a:	7823      	ldrb	r3, [r4, #0]
 800824c:	2b2e      	cmp	r3, #46	@ 0x2e
 800824e:	d10a      	bne.n	8008266 <_vfiprintf_r+0x156>
 8008250:	7863      	ldrb	r3, [r4, #1]
 8008252:	2b2a      	cmp	r3, #42	@ 0x2a
 8008254:	d132      	bne.n	80082bc <_vfiprintf_r+0x1ac>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	1d1a      	adds	r2, r3, #4
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	9203      	str	r2, [sp, #12]
 800825e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008262:	3402      	adds	r4, #2
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800833c <_vfiprintf_r+0x22c>
 800826a:	7821      	ldrb	r1, [r4, #0]
 800826c:	2203      	movs	r2, #3
 800826e:	4650      	mov	r0, sl
 8008270:	f7f7 ffb6 	bl	80001e0 <memchr>
 8008274:	b138      	cbz	r0, 8008286 <_vfiprintf_r+0x176>
 8008276:	9b04      	ldr	r3, [sp, #16]
 8008278:	eba0 000a 	sub.w	r0, r0, sl
 800827c:	2240      	movs	r2, #64	@ 0x40
 800827e:	4082      	lsls	r2, r0
 8008280:	4313      	orrs	r3, r2
 8008282:	3401      	adds	r4, #1
 8008284:	9304      	str	r3, [sp, #16]
 8008286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828a:	4829      	ldr	r0, [pc, #164]	@ (8008330 <_vfiprintf_r+0x220>)
 800828c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008290:	2206      	movs	r2, #6
 8008292:	f7f7 ffa5 	bl	80001e0 <memchr>
 8008296:	2800      	cmp	r0, #0
 8008298:	d03f      	beq.n	800831a <_vfiprintf_r+0x20a>
 800829a:	4b26      	ldr	r3, [pc, #152]	@ (8008334 <_vfiprintf_r+0x224>)
 800829c:	bb1b      	cbnz	r3, 80082e6 <_vfiprintf_r+0x1d6>
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	3307      	adds	r3, #7
 80082a2:	f023 0307 	bic.w	r3, r3, #7
 80082a6:	3308      	adds	r3, #8
 80082a8:	9303      	str	r3, [sp, #12]
 80082aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ac:	443b      	add	r3, r7
 80082ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80082b0:	e76a      	b.n	8008188 <_vfiprintf_r+0x78>
 80082b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082b6:	460c      	mov	r4, r1
 80082b8:	2001      	movs	r0, #1
 80082ba:	e7a8      	b.n	800820e <_vfiprintf_r+0xfe>
 80082bc:	2300      	movs	r3, #0
 80082be:	3401      	adds	r4, #1
 80082c0:	9305      	str	r3, [sp, #20]
 80082c2:	4619      	mov	r1, r3
 80082c4:	f04f 0c0a 	mov.w	ip, #10
 80082c8:	4620      	mov	r0, r4
 80082ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ce:	3a30      	subs	r2, #48	@ 0x30
 80082d0:	2a09      	cmp	r2, #9
 80082d2:	d903      	bls.n	80082dc <_vfiprintf_r+0x1cc>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0c6      	beq.n	8008266 <_vfiprintf_r+0x156>
 80082d8:	9105      	str	r1, [sp, #20]
 80082da:	e7c4      	b.n	8008266 <_vfiprintf_r+0x156>
 80082dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80082e0:	4604      	mov	r4, r0
 80082e2:	2301      	movs	r3, #1
 80082e4:	e7f0      	b.n	80082c8 <_vfiprintf_r+0x1b8>
 80082e6:	ab03      	add	r3, sp, #12
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	462a      	mov	r2, r5
 80082ec:	4b12      	ldr	r3, [pc, #72]	@ (8008338 <_vfiprintf_r+0x228>)
 80082ee:	a904      	add	r1, sp, #16
 80082f0:	4630      	mov	r0, r6
 80082f2:	f7fc fbf3 	bl	8004adc <_printf_float>
 80082f6:	4607      	mov	r7, r0
 80082f8:	1c78      	adds	r0, r7, #1
 80082fa:	d1d6      	bne.n	80082aa <_vfiprintf_r+0x19a>
 80082fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082fe:	07d9      	lsls	r1, r3, #31
 8008300:	d405      	bmi.n	800830e <_vfiprintf_r+0x1fe>
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	059a      	lsls	r2, r3, #22
 8008306:	d402      	bmi.n	800830e <_vfiprintf_r+0x1fe>
 8008308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800830a:	f7fd fb71 	bl	80059f0 <__retarget_lock_release_recursive>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	065b      	lsls	r3, r3, #25
 8008312:	f53f af1f 	bmi.w	8008154 <_vfiprintf_r+0x44>
 8008316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008318:	e71e      	b.n	8008158 <_vfiprintf_r+0x48>
 800831a:	ab03      	add	r3, sp, #12
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	462a      	mov	r2, r5
 8008320:	4b05      	ldr	r3, [pc, #20]	@ (8008338 <_vfiprintf_r+0x228>)
 8008322:	a904      	add	r1, sp, #16
 8008324:	4630      	mov	r0, r6
 8008326:	f7fc fe71 	bl	800500c <_printf_i>
 800832a:	e7e4      	b.n	80082f6 <_vfiprintf_r+0x1e6>
 800832c:	08009760 	.word	0x08009760
 8008330:	0800976a 	.word	0x0800976a
 8008334:	08004add 	.word	0x08004add
 8008338:	080080eb 	.word	0x080080eb
 800833c:	08009766 	.word	0x08009766

08008340 <__sflush_r>:
 8008340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008348:	0716      	lsls	r6, r2, #28
 800834a:	4605      	mov	r5, r0
 800834c:	460c      	mov	r4, r1
 800834e:	d454      	bmi.n	80083fa <__sflush_r+0xba>
 8008350:	684b      	ldr	r3, [r1, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dc02      	bgt.n	800835c <__sflush_r+0x1c>
 8008356:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008358:	2b00      	cmp	r3, #0
 800835a:	dd48      	ble.n	80083ee <__sflush_r+0xae>
 800835c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800835e:	2e00      	cmp	r6, #0
 8008360:	d045      	beq.n	80083ee <__sflush_r+0xae>
 8008362:	2300      	movs	r3, #0
 8008364:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008368:	682f      	ldr	r7, [r5, #0]
 800836a:	6a21      	ldr	r1, [r4, #32]
 800836c:	602b      	str	r3, [r5, #0]
 800836e:	d030      	beq.n	80083d2 <__sflush_r+0x92>
 8008370:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	0759      	lsls	r1, r3, #29
 8008376:	d505      	bpl.n	8008384 <__sflush_r+0x44>
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	1ad2      	subs	r2, r2, r3
 800837c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800837e:	b10b      	cbz	r3, 8008384 <__sflush_r+0x44>
 8008380:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008382:	1ad2      	subs	r2, r2, r3
 8008384:	2300      	movs	r3, #0
 8008386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008388:	6a21      	ldr	r1, [r4, #32]
 800838a:	4628      	mov	r0, r5
 800838c:	47b0      	blx	r6
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	d106      	bne.n	80083a2 <__sflush_r+0x62>
 8008394:	6829      	ldr	r1, [r5, #0]
 8008396:	291d      	cmp	r1, #29
 8008398:	d82b      	bhi.n	80083f2 <__sflush_r+0xb2>
 800839a:	4a2a      	ldr	r2, [pc, #168]	@ (8008444 <__sflush_r+0x104>)
 800839c:	410a      	asrs	r2, r1
 800839e:	07d6      	lsls	r6, r2, #31
 80083a0:	d427      	bmi.n	80083f2 <__sflush_r+0xb2>
 80083a2:	2200      	movs	r2, #0
 80083a4:	6062      	str	r2, [r4, #4]
 80083a6:	04d9      	lsls	r1, r3, #19
 80083a8:	6922      	ldr	r2, [r4, #16]
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	d504      	bpl.n	80083b8 <__sflush_r+0x78>
 80083ae:	1c42      	adds	r2, r0, #1
 80083b0:	d101      	bne.n	80083b6 <__sflush_r+0x76>
 80083b2:	682b      	ldr	r3, [r5, #0]
 80083b4:	b903      	cbnz	r3, 80083b8 <__sflush_r+0x78>
 80083b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80083b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083ba:	602f      	str	r7, [r5, #0]
 80083bc:	b1b9      	cbz	r1, 80083ee <__sflush_r+0xae>
 80083be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083c2:	4299      	cmp	r1, r3
 80083c4:	d002      	beq.n	80083cc <__sflush_r+0x8c>
 80083c6:	4628      	mov	r0, r5
 80083c8:	f7fe f966 	bl	8006698 <_free_r>
 80083cc:	2300      	movs	r3, #0
 80083ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80083d0:	e00d      	b.n	80083ee <__sflush_r+0xae>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b0      	blx	r6
 80083d8:	4602      	mov	r2, r0
 80083da:	1c50      	adds	r0, r2, #1
 80083dc:	d1c9      	bne.n	8008372 <__sflush_r+0x32>
 80083de:	682b      	ldr	r3, [r5, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0c6      	beq.n	8008372 <__sflush_r+0x32>
 80083e4:	2b1d      	cmp	r3, #29
 80083e6:	d001      	beq.n	80083ec <__sflush_r+0xac>
 80083e8:	2b16      	cmp	r3, #22
 80083ea:	d11e      	bne.n	800842a <__sflush_r+0xea>
 80083ec:	602f      	str	r7, [r5, #0]
 80083ee:	2000      	movs	r0, #0
 80083f0:	e022      	b.n	8008438 <__sflush_r+0xf8>
 80083f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083f6:	b21b      	sxth	r3, r3
 80083f8:	e01b      	b.n	8008432 <__sflush_r+0xf2>
 80083fa:	690f      	ldr	r7, [r1, #16]
 80083fc:	2f00      	cmp	r7, #0
 80083fe:	d0f6      	beq.n	80083ee <__sflush_r+0xae>
 8008400:	0793      	lsls	r3, r2, #30
 8008402:	680e      	ldr	r6, [r1, #0]
 8008404:	bf08      	it	eq
 8008406:	694b      	ldreq	r3, [r1, #20]
 8008408:	600f      	str	r7, [r1, #0]
 800840a:	bf18      	it	ne
 800840c:	2300      	movne	r3, #0
 800840e:	eba6 0807 	sub.w	r8, r6, r7
 8008412:	608b      	str	r3, [r1, #8]
 8008414:	f1b8 0f00 	cmp.w	r8, #0
 8008418:	dde9      	ble.n	80083ee <__sflush_r+0xae>
 800841a:	6a21      	ldr	r1, [r4, #32]
 800841c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800841e:	4643      	mov	r3, r8
 8008420:	463a      	mov	r2, r7
 8008422:	4628      	mov	r0, r5
 8008424:	47b0      	blx	r6
 8008426:	2800      	cmp	r0, #0
 8008428:	dc08      	bgt.n	800843c <__sflush_r+0xfc>
 800842a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	f04f 30ff 	mov.w	r0, #4294967295
 8008438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800843c:	4407      	add	r7, r0
 800843e:	eba8 0800 	sub.w	r8, r8, r0
 8008442:	e7e7      	b.n	8008414 <__sflush_r+0xd4>
 8008444:	dfbffffe 	.word	0xdfbffffe

08008448 <_fflush_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	690b      	ldr	r3, [r1, #16]
 800844c:	4605      	mov	r5, r0
 800844e:	460c      	mov	r4, r1
 8008450:	b913      	cbnz	r3, 8008458 <_fflush_r+0x10>
 8008452:	2500      	movs	r5, #0
 8008454:	4628      	mov	r0, r5
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	b118      	cbz	r0, 8008462 <_fflush_r+0x1a>
 800845a:	6a03      	ldr	r3, [r0, #32]
 800845c:	b90b      	cbnz	r3, 8008462 <_fflush_r+0x1a>
 800845e:	f7fd f995 	bl	800578c <__sinit>
 8008462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0f3      	beq.n	8008452 <_fflush_r+0xa>
 800846a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800846c:	07d0      	lsls	r0, r2, #31
 800846e:	d404      	bmi.n	800847a <_fflush_r+0x32>
 8008470:	0599      	lsls	r1, r3, #22
 8008472:	d402      	bmi.n	800847a <_fflush_r+0x32>
 8008474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008476:	f7fd faba 	bl	80059ee <__retarget_lock_acquire_recursive>
 800847a:	4628      	mov	r0, r5
 800847c:	4621      	mov	r1, r4
 800847e:	f7ff ff5f 	bl	8008340 <__sflush_r>
 8008482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008484:	07da      	lsls	r2, r3, #31
 8008486:	4605      	mov	r5, r0
 8008488:	d4e4      	bmi.n	8008454 <_fflush_r+0xc>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	059b      	lsls	r3, r3, #22
 800848e:	d4e1      	bmi.n	8008454 <_fflush_r+0xc>
 8008490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008492:	f7fd faad 	bl	80059f0 <__retarget_lock_release_recursive>
 8008496:	e7dd      	b.n	8008454 <_fflush_r+0xc>

08008498 <_putc_r>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	460d      	mov	r5, r1
 800849c:	4614      	mov	r4, r2
 800849e:	4606      	mov	r6, r0
 80084a0:	b118      	cbz	r0, 80084aa <_putc_r+0x12>
 80084a2:	6a03      	ldr	r3, [r0, #32]
 80084a4:	b90b      	cbnz	r3, 80084aa <_putc_r+0x12>
 80084a6:	f7fd f971 	bl	800578c <__sinit>
 80084aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084ac:	07d8      	lsls	r0, r3, #31
 80084ae:	d405      	bmi.n	80084bc <_putc_r+0x24>
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	0599      	lsls	r1, r3, #22
 80084b4:	d402      	bmi.n	80084bc <_putc_r+0x24>
 80084b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084b8:	f7fd fa99 	bl	80059ee <__retarget_lock_acquire_recursive>
 80084bc:	68a3      	ldr	r3, [r4, #8]
 80084be:	3b01      	subs	r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	60a3      	str	r3, [r4, #8]
 80084c4:	da05      	bge.n	80084d2 <_putc_r+0x3a>
 80084c6:	69a2      	ldr	r2, [r4, #24]
 80084c8:	4293      	cmp	r3, r2
 80084ca:	db12      	blt.n	80084f2 <_putc_r+0x5a>
 80084cc:	b2eb      	uxtb	r3, r5
 80084ce:	2b0a      	cmp	r3, #10
 80084d0:	d00f      	beq.n	80084f2 <_putc_r+0x5a>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	6022      	str	r2, [r4, #0]
 80084d8:	701d      	strb	r5, [r3, #0]
 80084da:	b2ed      	uxtb	r5, r5
 80084dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084de:	07da      	lsls	r2, r3, #31
 80084e0:	d405      	bmi.n	80084ee <_putc_r+0x56>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	059b      	lsls	r3, r3, #22
 80084e6:	d402      	bmi.n	80084ee <_putc_r+0x56>
 80084e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084ea:	f7fd fa81 	bl	80059f0 <__retarget_lock_release_recursive>
 80084ee:	4628      	mov	r0, r5
 80084f0:	bd70      	pop	{r4, r5, r6, pc}
 80084f2:	4629      	mov	r1, r5
 80084f4:	4622      	mov	r2, r4
 80084f6:	4630      	mov	r0, r6
 80084f8:	f000 f802 	bl	8008500 <__swbuf_r>
 80084fc:	4605      	mov	r5, r0
 80084fe:	e7ed      	b.n	80084dc <_putc_r+0x44>

08008500 <__swbuf_r>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	460e      	mov	r6, r1
 8008504:	4614      	mov	r4, r2
 8008506:	4605      	mov	r5, r0
 8008508:	b118      	cbz	r0, 8008512 <__swbuf_r+0x12>
 800850a:	6a03      	ldr	r3, [r0, #32]
 800850c:	b90b      	cbnz	r3, 8008512 <__swbuf_r+0x12>
 800850e:	f7fd f93d 	bl	800578c <__sinit>
 8008512:	69a3      	ldr	r3, [r4, #24]
 8008514:	60a3      	str	r3, [r4, #8]
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	071a      	lsls	r2, r3, #28
 800851a:	d501      	bpl.n	8008520 <__swbuf_r+0x20>
 800851c:	6923      	ldr	r3, [r4, #16]
 800851e:	b943      	cbnz	r3, 8008532 <__swbuf_r+0x32>
 8008520:	4621      	mov	r1, r4
 8008522:	4628      	mov	r0, r5
 8008524:	f000 f82a 	bl	800857c <__swsetup_r>
 8008528:	b118      	cbz	r0, 8008532 <__swbuf_r+0x32>
 800852a:	f04f 37ff 	mov.w	r7, #4294967295
 800852e:	4638      	mov	r0, r7
 8008530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	6922      	ldr	r2, [r4, #16]
 8008536:	1a98      	subs	r0, r3, r2
 8008538:	6963      	ldr	r3, [r4, #20]
 800853a:	b2f6      	uxtb	r6, r6
 800853c:	4283      	cmp	r3, r0
 800853e:	4637      	mov	r7, r6
 8008540:	dc05      	bgt.n	800854e <__swbuf_r+0x4e>
 8008542:	4621      	mov	r1, r4
 8008544:	4628      	mov	r0, r5
 8008546:	f7ff ff7f 	bl	8008448 <_fflush_r>
 800854a:	2800      	cmp	r0, #0
 800854c:	d1ed      	bne.n	800852a <__swbuf_r+0x2a>
 800854e:	68a3      	ldr	r3, [r4, #8]
 8008550:	3b01      	subs	r3, #1
 8008552:	60a3      	str	r3, [r4, #8]
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	6022      	str	r2, [r4, #0]
 800855a:	701e      	strb	r6, [r3, #0]
 800855c:	6962      	ldr	r2, [r4, #20]
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	429a      	cmp	r2, r3
 8008562:	d004      	beq.n	800856e <__swbuf_r+0x6e>
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	07db      	lsls	r3, r3, #31
 8008568:	d5e1      	bpl.n	800852e <__swbuf_r+0x2e>
 800856a:	2e0a      	cmp	r6, #10
 800856c:	d1df      	bne.n	800852e <__swbuf_r+0x2e>
 800856e:	4621      	mov	r1, r4
 8008570:	4628      	mov	r0, r5
 8008572:	f7ff ff69 	bl	8008448 <_fflush_r>
 8008576:	2800      	cmp	r0, #0
 8008578:	d0d9      	beq.n	800852e <__swbuf_r+0x2e>
 800857a:	e7d6      	b.n	800852a <__swbuf_r+0x2a>

0800857c <__swsetup_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4b29      	ldr	r3, [pc, #164]	@ (8008624 <__swsetup_r+0xa8>)
 8008580:	4605      	mov	r5, r0
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	460c      	mov	r4, r1
 8008586:	b118      	cbz	r0, 8008590 <__swsetup_r+0x14>
 8008588:	6a03      	ldr	r3, [r0, #32]
 800858a:	b90b      	cbnz	r3, 8008590 <__swsetup_r+0x14>
 800858c:	f7fd f8fe 	bl	800578c <__sinit>
 8008590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008594:	0719      	lsls	r1, r3, #28
 8008596:	d422      	bmi.n	80085de <__swsetup_r+0x62>
 8008598:	06da      	lsls	r2, r3, #27
 800859a:	d407      	bmi.n	80085ac <__swsetup_r+0x30>
 800859c:	2209      	movs	r2, #9
 800859e:	602a      	str	r2, [r5, #0]
 80085a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a4:	81a3      	strh	r3, [r4, #12]
 80085a6:	f04f 30ff 	mov.w	r0, #4294967295
 80085aa:	e033      	b.n	8008614 <__swsetup_r+0x98>
 80085ac:	0758      	lsls	r0, r3, #29
 80085ae:	d512      	bpl.n	80085d6 <__swsetup_r+0x5a>
 80085b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085b2:	b141      	cbz	r1, 80085c6 <__swsetup_r+0x4a>
 80085b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085b8:	4299      	cmp	r1, r3
 80085ba:	d002      	beq.n	80085c2 <__swsetup_r+0x46>
 80085bc:	4628      	mov	r0, r5
 80085be:	f7fe f86b 	bl	8006698 <_free_r>
 80085c2:	2300      	movs	r3, #0
 80085c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085cc:	81a3      	strh	r3, [r4, #12]
 80085ce:	2300      	movs	r3, #0
 80085d0:	6063      	str	r3, [r4, #4]
 80085d2:	6923      	ldr	r3, [r4, #16]
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	f043 0308 	orr.w	r3, r3, #8
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	6923      	ldr	r3, [r4, #16]
 80085e0:	b94b      	cbnz	r3, 80085f6 <__swsetup_r+0x7a>
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085ec:	d003      	beq.n	80085f6 <__swsetup_r+0x7a>
 80085ee:	4621      	mov	r1, r4
 80085f0:	4628      	mov	r0, r5
 80085f2:	f000 fc5d 	bl	8008eb0 <__smakebuf_r>
 80085f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085fa:	f013 0201 	ands.w	r2, r3, #1
 80085fe:	d00a      	beq.n	8008616 <__swsetup_r+0x9a>
 8008600:	2200      	movs	r2, #0
 8008602:	60a2      	str	r2, [r4, #8]
 8008604:	6962      	ldr	r2, [r4, #20]
 8008606:	4252      	negs	r2, r2
 8008608:	61a2      	str	r2, [r4, #24]
 800860a:	6922      	ldr	r2, [r4, #16]
 800860c:	b942      	cbnz	r2, 8008620 <__swsetup_r+0xa4>
 800860e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008612:	d1c5      	bne.n	80085a0 <__swsetup_r+0x24>
 8008614:	bd38      	pop	{r3, r4, r5, pc}
 8008616:	0799      	lsls	r1, r3, #30
 8008618:	bf58      	it	pl
 800861a:	6962      	ldrpl	r2, [r4, #20]
 800861c:	60a2      	str	r2, [r4, #8]
 800861e:	e7f4      	b.n	800860a <__swsetup_r+0x8e>
 8008620:	2000      	movs	r0, #0
 8008622:	e7f7      	b.n	8008614 <__swsetup_r+0x98>
 8008624:	2000001c 	.word	0x2000001c

08008628 <memmove>:
 8008628:	4288      	cmp	r0, r1
 800862a:	b510      	push	{r4, lr}
 800862c:	eb01 0402 	add.w	r4, r1, r2
 8008630:	d902      	bls.n	8008638 <memmove+0x10>
 8008632:	4284      	cmp	r4, r0
 8008634:	4623      	mov	r3, r4
 8008636:	d807      	bhi.n	8008648 <memmove+0x20>
 8008638:	1e43      	subs	r3, r0, #1
 800863a:	42a1      	cmp	r1, r4
 800863c:	d008      	beq.n	8008650 <memmove+0x28>
 800863e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008646:	e7f8      	b.n	800863a <memmove+0x12>
 8008648:	4402      	add	r2, r0
 800864a:	4601      	mov	r1, r0
 800864c:	428a      	cmp	r2, r1
 800864e:	d100      	bne.n	8008652 <memmove+0x2a>
 8008650:	bd10      	pop	{r4, pc}
 8008652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800865a:	e7f7      	b.n	800864c <memmove+0x24>

0800865c <strncmp>:
 800865c:	b510      	push	{r4, lr}
 800865e:	b16a      	cbz	r2, 800867c <strncmp+0x20>
 8008660:	3901      	subs	r1, #1
 8008662:	1884      	adds	r4, r0, r2
 8008664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008668:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800866c:	429a      	cmp	r2, r3
 800866e:	d103      	bne.n	8008678 <strncmp+0x1c>
 8008670:	42a0      	cmp	r0, r4
 8008672:	d001      	beq.n	8008678 <strncmp+0x1c>
 8008674:	2a00      	cmp	r2, #0
 8008676:	d1f5      	bne.n	8008664 <strncmp+0x8>
 8008678:	1ad0      	subs	r0, r2, r3
 800867a:	bd10      	pop	{r4, pc}
 800867c:	4610      	mov	r0, r2
 800867e:	e7fc      	b.n	800867a <strncmp+0x1e>

08008680 <_sbrk_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d06      	ldr	r5, [pc, #24]	@ (800869c <_sbrk_r+0x1c>)
 8008684:	2300      	movs	r3, #0
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	f7fa fd1e 	bl	80030cc <_sbrk>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_sbrk_r+0x1a>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_sbrk_r+0x1a>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	20000aec 	.word	0x20000aec

080086a0 <memcpy>:
 80086a0:	440a      	add	r2, r1
 80086a2:	4291      	cmp	r1, r2
 80086a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086a8:	d100      	bne.n	80086ac <memcpy+0xc>
 80086aa:	4770      	bx	lr
 80086ac:	b510      	push	{r4, lr}
 80086ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b6:	4291      	cmp	r1, r2
 80086b8:	d1f9      	bne.n	80086ae <memcpy+0xe>
 80086ba:	bd10      	pop	{r4, pc}
 80086bc:	0000      	movs	r0, r0
	...

080086c0 <nan>:
 80086c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80086c8 <nan+0x8>
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	00000000 	.word	0x00000000
 80086cc:	7ff80000 	.word	0x7ff80000

080086d0 <__assert_func>:
 80086d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086d2:	4614      	mov	r4, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	4b09      	ldr	r3, [pc, #36]	@ (80086fc <__assert_func+0x2c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4605      	mov	r5, r0
 80086dc:	68d8      	ldr	r0, [r3, #12]
 80086de:	b954      	cbnz	r4, 80086f6 <__assert_func+0x26>
 80086e0:	4b07      	ldr	r3, [pc, #28]	@ (8008700 <__assert_func+0x30>)
 80086e2:	461c      	mov	r4, r3
 80086e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086e8:	9100      	str	r1, [sp, #0]
 80086ea:	462b      	mov	r3, r5
 80086ec:	4905      	ldr	r1, [pc, #20]	@ (8008704 <__assert_func+0x34>)
 80086ee:	f000 fba7 	bl	8008e40 <fiprintf>
 80086f2:	f000 fc3b 	bl	8008f6c <abort>
 80086f6:	4b04      	ldr	r3, [pc, #16]	@ (8008708 <__assert_func+0x38>)
 80086f8:	e7f4      	b.n	80086e4 <__assert_func+0x14>
 80086fa:	bf00      	nop
 80086fc:	2000001c 	.word	0x2000001c
 8008700:	080097b4 	.word	0x080097b4
 8008704:	08009786 	.word	0x08009786
 8008708:	08009779 	.word	0x08009779

0800870c <_calloc_r>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	fba1 5402 	umull	r5, r4, r1, r2
 8008712:	b93c      	cbnz	r4, 8008724 <_calloc_r+0x18>
 8008714:	4629      	mov	r1, r5
 8008716:	f7fe f833 	bl	8006780 <_malloc_r>
 800871a:	4606      	mov	r6, r0
 800871c:	b928      	cbnz	r0, 800872a <_calloc_r+0x1e>
 800871e:	2600      	movs	r6, #0
 8008720:	4630      	mov	r0, r6
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	220c      	movs	r2, #12
 8008726:	6002      	str	r2, [r0, #0]
 8008728:	e7f9      	b.n	800871e <_calloc_r+0x12>
 800872a:	462a      	mov	r2, r5
 800872c:	4621      	mov	r1, r4
 800872e:	f7fd f8e0 	bl	80058f2 <memset>
 8008732:	e7f5      	b.n	8008720 <_calloc_r+0x14>

08008734 <rshift>:
 8008734:	6903      	ldr	r3, [r0, #16]
 8008736:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800873a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800873e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008742:	f100 0414 	add.w	r4, r0, #20
 8008746:	dd45      	ble.n	80087d4 <rshift+0xa0>
 8008748:	f011 011f 	ands.w	r1, r1, #31
 800874c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008750:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008754:	d10c      	bne.n	8008770 <rshift+0x3c>
 8008756:	f100 0710 	add.w	r7, r0, #16
 800875a:	4629      	mov	r1, r5
 800875c:	42b1      	cmp	r1, r6
 800875e:	d334      	bcc.n	80087ca <rshift+0x96>
 8008760:	1a9b      	subs	r3, r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	1eea      	subs	r2, r5, #3
 8008766:	4296      	cmp	r6, r2
 8008768:	bf38      	it	cc
 800876a:	2300      	movcc	r3, #0
 800876c:	4423      	add	r3, r4
 800876e:	e015      	b.n	800879c <rshift+0x68>
 8008770:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008774:	f1c1 0820 	rsb	r8, r1, #32
 8008778:	40cf      	lsrs	r7, r1
 800877a:	f105 0e04 	add.w	lr, r5, #4
 800877e:	46a1      	mov	r9, r4
 8008780:	4576      	cmp	r6, lr
 8008782:	46f4      	mov	ip, lr
 8008784:	d815      	bhi.n	80087b2 <rshift+0x7e>
 8008786:	1a9a      	subs	r2, r3, r2
 8008788:	0092      	lsls	r2, r2, #2
 800878a:	3a04      	subs	r2, #4
 800878c:	3501      	adds	r5, #1
 800878e:	42ae      	cmp	r6, r5
 8008790:	bf38      	it	cc
 8008792:	2200      	movcc	r2, #0
 8008794:	18a3      	adds	r3, r4, r2
 8008796:	50a7      	str	r7, [r4, r2]
 8008798:	b107      	cbz	r7, 800879c <rshift+0x68>
 800879a:	3304      	adds	r3, #4
 800879c:	1b1a      	subs	r2, r3, r4
 800879e:	42a3      	cmp	r3, r4
 80087a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80087a4:	bf08      	it	eq
 80087a6:	2300      	moveq	r3, #0
 80087a8:	6102      	str	r2, [r0, #16]
 80087aa:	bf08      	it	eq
 80087ac:	6143      	streq	r3, [r0, #20]
 80087ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087b2:	f8dc c000 	ldr.w	ip, [ip]
 80087b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80087ba:	ea4c 0707 	orr.w	r7, ip, r7
 80087be:	f849 7b04 	str.w	r7, [r9], #4
 80087c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087c6:	40cf      	lsrs	r7, r1
 80087c8:	e7da      	b.n	8008780 <rshift+0x4c>
 80087ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80087ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80087d2:	e7c3      	b.n	800875c <rshift+0x28>
 80087d4:	4623      	mov	r3, r4
 80087d6:	e7e1      	b.n	800879c <rshift+0x68>

080087d8 <__hexdig_fun>:
 80087d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80087dc:	2b09      	cmp	r3, #9
 80087de:	d802      	bhi.n	80087e6 <__hexdig_fun+0xe>
 80087e0:	3820      	subs	r0, #32
 80087e2:	b2c0      	uxtb	r0, r0
 80087e4:	4770      	bx	lr
 80087e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80087ea:	2b05      	cmp	r3, #5
 80087ec:	d801      	bhi.n	80087f2 <__hexdig_fun+0x1a>
 80087ee:	3847      	subs	r0, #71	@ 0x47
 80087f0:	e7f7      	b.n	80087e2 <__hexdig_fun+0xa>
 80087f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80087f6:	2b05      	cmp	r3, #5
 80087f8:	d801      	bhi.n	80087fe <__hexdig_fun+0x26>
 80087fa:	3827      	subs	r0, #39	@ 0x27
 80087fc:	e7f1      	b.n	80087e2 <__hexdig_fun+0xa>
 80087fe:	2000      	movs	r0, #0
 8008800:	4770      	bx	lr
	...

08008804 <__gethex>:
 8008804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008808:	b085      	sub	sp, #20
 800880a:	468a      	mov	sl, r1
 800880c:	9302      	str	r3, [sp, #8]
 800880e:	680b      	ldr	r3, [r1, #0]
 8008810:	9001      	str	r0, [sp, #4]
 8008812:	4690      	mov	r8, r2
 8008814:	1c9c      	adds	r4, r3, #2
 8008816:	46a1      	mov	r9, r4
 8008818:	f814 0b01 	ldrb.w	r0, [r4], #1
 800881c:	2830      	cmp	r0, #48	@ 0x30
 800881e:	d0fa      	beq.n	8008816 <__gethex+0x12>
 8008820:	eba9 0303 	sub.w	r3, r9, r3
 8008824:	f1a3 0b02 	sub.w	fp, r3, #2
 8008828:	f7ff ffd6 	bl	80087d8 <__hexdig_fun>
 800882c:	4605      	mov	r5, r0
 800882e:	2800      	cmp	r0, #0
 8008830:	d168      	bne.n	8008904 <__gethex+0x100>
 8008832:	49a0      	ldr	r1, [pc, #640]	@ (8008ab4 <__gethex+0x2b0>)
 8008834:	2201      	movs	r2, #1
 8008836:	4648      	mov	r0, r9
 8008838:	f7ff ff10 	bl	800865c <strncmp>
 800883c:	4607      	mov	r7, r0
 800883e:	2800      	cmp	r0, #0
 8008840:	d167      	bne.n	8008912 <__gethex+0x10e>
 8008842:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008846:	4626      	mov	r6, r4
 8008848:	f7ff ffc6 	bl	80087d8 <__hexdig_fun>
 800884c:	2800      	cmp	r0, #0
 800884e:	d062      	beq.n	8008916 <__gethex+0x112>
 8008850:	4623      	mov	r3, r4
 8008852:	7818      	ldrb	r0, [r3, #0]
 8008854:	2830      	cmp	r0, #48	@ 0x30
 8008856:	4699      	mov	r9, r3
 8008858:	f103 0301 	add.w	r3, r3, #1
 800885c:	d0f9      	beq.n	8008852 <__gethex+0x4e>
 800885e:	f7ff ffbb 	bl	80087d8 <__hexdig_fun>
 8008862:	fab0 f580 	clz	r5, r0
 8008866:	096d      	lsrs	r5, r5, #5
 8008868:	f04f 0b01 	mov.w	fp, #1
 800886c:	464a      	mov	r2, r9
 800886e:	4616      	mov	r6, r2
 8008870:	3201      	adds	r2, #1
 8008872:	7830      	ldrb	r0, [r6, #0]
 8008874:	f7ff ffb0 	bl	80087d8 <__hexdig_fun>
 8008878:	2800      	cmp	r0, #0
 800887a:	d1f8      	bne.n	800886e <__gethex+0x6a>
 800887c:	498d      	ldr	r1, [pc, #564]	@ (8008ab4 <__gethex+0x2b0>)
 800887e:	2201      	movs	r2, #1
 8008880:	4630      	mov	r0, r6
 8008882:	f7ff feeb 	bl	800865c <strncmp>
 8008886:	2800      	cmp	r0, #0
 8008888:	d13f      	bne.n	800890a <__gethex+0x106>
 800888a:	b944      	cbnz	r4, 800889e <__gethex+0x9a>
 800888c:	1c74      	adds	r4, r6, #1
 800888e:	4622      	mov	r2, r4
 8008890:	4616      	mov	r6, r2
 8008892:	3201      	adds	r2, #1
 8008894:	7830      	ldrb	r0, [r6, #0]
 8008896:	f7ff ff9f 	bl	80087d8 <__hexdig_fun>
 800889a:	2800      	cmp	r0, #0
 800889c:	d1f8      	bne.n	8008890 <__gethex+0x8c>
 800889e:	1ba4      	subs	r4, r4, r6
 80088a0:	00a7      	lsls	r7, r4, #2
 80088a2:	7833      	ldrb	r3, [r6, #0]
 80088a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80088a8:	2b50      	cmp	r3, #80	@ 0x50
 80088aa:	d13e      	bne.n	800892a <__gethex+0x126>
 80088ac:	7873      	ldrb	r3, [r6, #1]
 80088ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80088b0:	d033      	beq.n	800891a <__gethex+0x116>
 80088b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80088b4:	d034      	beq.n	8008920 <__gethex+0x11c>
 80088b6:	1c71      	adds	r1, r6, #1
 80088b8:	2400      	movs	r4, #0
 80088ba:	7808      	ldrb	r0, [r1, #0]
 80088bc:	f7ff ff8c 	bl	80087d8 <__hexdig_fun>
 80088c0:	1e43      	subs	r3, r0, #1
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b18      	cmp	r3, #24
 80088c6:	d830      	bhi.n	800892a <__gethex+0x126>
 80088c8:	f1a0 0210 	sub.w	r2, r0, #16
 80088cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088d0:	f7ff ff82 	bl	80087d8 <__hexdig_fun>
 80088d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80088d8:	fa5f fc8c 	uxtb.w	ip, ip
 80088dc:	f1bc 0f18 	cmp.w	ip, #24
 80088e0:	f04f 030a 	mov.w	r3, #10
 80088e4:	d91e      	bls.n	8008924 <__gethex+0x120>
 80088e6:	b104      	cbz	r4, 80088ea <__gethex+0xe6>
 80088e8:	4252      	negs	r2, r2
 80088ea:	4417      	add	r7, r2
 80088ec:	f8ca 1000 	str.w	r1, [sl]
 80088f0:	b1ed      	cbz	r5, 800892e <__gethex+0x12a>
 80088f2:	f1bb 0f00 	cmp.w	fp, #0
 80088f6:	bf0c      	ite	eq
 80088f8:	2506      	moveq	r5, #6
 80088fa:	2500      	movne	r5, #0
 80088fc:	4628      	mov	r0, r5
 80088fe:	b005      	add	sp, #20
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	2500      	movs	r5, #0
 8008906:	462c      	mov	r4, r5
 8008908:	e7b0      	b.n	800886c <__gethex+0x68>
 800890a:	2c00      	cmp	r4, #0
 800890c:	d1c7      	bne.n	800889e <__gethex+0x9a>
 800890e:	4627      	mov	r7, r4
 8008910:	e7c7      	b.n	80088a2 <__gethex+0x9e>
 8008912:	464e      	mov	r6, r9
 8008914:	462f      	mov	r7, r5
 8008916:	2501      	movs	r5, #1
 8008918:	e7c3      	b.n	80088a2 <__gethex+0x9e>
 800891a:	2400      	movs	r4, #0
 800891c:	1cb1      	adds	r1, r6, #2
 800891e:	e7cc      	b.n	80088ba <__gethex+0xb6>
 8008920:	2401      	movs	r4, #1
 8008922:	e7fb      	b.n	800891c <__gethex+0x118>
 8008924:	fb03 0002 	mla	r0, r3, r2, r0
 8008928:	e7ce      	b.n	80088c8 <__gethex+0xc4>
 800892a:	4631      	mov	r1, r6
 800892c:	e7de      	b.n	80088ec <__gethex+0xe8>
 800892e:	eba6 0309 	sub.w	r3, r6, r9
 8008932:	3b01      	subs	r3, #1
 8008934:	4629      	mov	r1, r5
 8008936:	2b07      	cmp	r3, #7
 8008938:	dc0a      	bgt.n	8008950 <__gethex+0x14c>
 800893a:	9801      	ldr	r0, [sp, #4]
 800893c:	f7fd ffac 	bl	8006898 <_Balloc>
 8008940:	4604      	mov	r4, r0
 8008942:	b940      	cbnz	r0, 8008956 <__gethex+0x152>
 8008944:	4b5c      	ldr	r3, [pc, #368]	@ (8008ab8 <__gethex+0x2b4>)
 8008946:	4602      	mov	r2, r0
 8008948:	21e4      	movs	r1, #228	@ 0xe4
 800894a:	485c      	ldr	r0, [pc, #368]	@ (8008abc <__gethex+0x2b8>)
 800894c:	f7ff fec0 	bl	80086d0 <__assert_func>
 8008950:	3101      	adds	r1, #1
 8008952:	105b      	asrs	r3, r3, #1
 8008954:	e7ef      	b.n	8008936 <__gethex+0x132>
 8008956:	f100 0a14 	add.w	sl, r0, #20
 800895a:	2300      	movs	r3, #0
 800895c:	4655      	mov	r5, sl
 800895e:	469b      	mov	fp, r3
 8008960:	45b1      	cmp	r9, r6
 8008962:	d337      	bcc.n	80089d4 <__gethex+0x1d0>
 8008964:	f845 bb04 	str.w	fp, [r5], #4
 8008968:	eba5 050a 	sub.w	r5, r5, sl
 800896c:	10ad      	asrs	r5, r5, #2
 800896e:	6125      	str	r5, [r4, #16]
 8008970:	4658      	mov	r0, fp
 8008972:	f7fe f883 	bl	8006a7c <__hi0bits>
 8008976:	016d      	lsls	r5, r5, #5
 8008978:	f8d8 6000 	ldr.w	r6, [r8]
 800897c:	1a2d      	subs	r5, r5, r0
 800897e:	42b5      	cmp	r5, r6
 8008980:	dd54      	ble.n	8008a2c <__gethex+0x228>
 8008982:	1bad      	subs	r5, r5, r6
 8008984:	4629      	mov	r1, r5
 8008986:	4620      	mov	r0, r4
 8008988:	f7fe fc17 	bl	80071ba <__any_on>
 800898c:	4681      	mov	r9, r0
 800898e:	b178      	cbz	r0, 80089b0 <__gethex+0x1ac>
 8008990:	1e6b      	subs	r3, r5, #1
 8008992:	1159      	asrs	r1, r3, #5
 8008994:	f003 021f 	and.w	r2, r3, #31
 8008998:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800899c:	f04f 0901 	mov.w	r9, #1
 80089a0:	fa09 f202 	lsl.w	r2, r9, r2
 80089a4:	420a      	tst	r2, r1
 80089a6:	d003      	beq.n	80089b0 <__gethex+0x1ac>
 80089a8:	454b      	cmp	r3, r9
 80089aa:	dc36      	bgt.n	8008a1a <__gethex+0x216>
 80089ac:	f04f 0902 	mov.w	r9, #2
 80089b0:	4629      	mov	r1, r5
 80089b2:	4620      	mov	r0, r4
 80089b4:	f7ff febe 	bl	8008734 <rshift>
 80089b8:	442f      	add	r7, r5
 80089ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089be:	42bb      	cmp	r3, r7
 80089c0:	da42      	bge.n	8008a48 <__gethex+0x244>
 80089c2:	9801      	ldr	r0, [sp, #4]
 80089c4:	4621      	mov	r1, r4
 80089c6:	f7fd ffa7 	bl	8006918 <_Bfree>
 80089ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089cc:	2300      	movs	r3, #0
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	25a3      	movs	r5, #163	@ 0xa3
 80089d2:	e793      	b.n	80088fc <__gethex+0xf8>
 80089d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80089d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80089da:	d012      	beq.n	8008a02 <__gethex+0x1fe>
 80089dc:	2b20      	cmp	r3, #32
 80089de:	d104      	bne.n	80089ea <__gethex+0x1e6>
 80089e0:	f845 bb04 	str.w	fp, [r5], #4
 80089e4:	f04f 0b00 	mov.w	fp, #0
 80089e8:	465b      	mov	r3, fp
 80089ea:	7830      	ldrb	r0, [r6, #0]
 80089ec:	9303      	str	r3, [sp, #12]
 80089ee:	f7ff fef3 	bl	80087d8 <__hexdig_fun>
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	f000 000f 	and.w	r0, r0, #15
 80089f8:	4098      	lsls	r0, r3
 80089fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80089fe:	3304      	adds	r3, #4
 8008a00:	e7ae      	b.n	8008960 <__gethex+0x15c>
 8008a02:	45b1      	cmp	r9, r6
 8008a04:	d8ea      	bhi.n	80089dc <__gethex+0x1d8>
 8008a06:	492b      	ldr	r1, [pc, #172]	@ (8008ab4 <__gethex+0x2b0>)
 8008a08:	9303      	str	r3, [sp, #12]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff fe25 	bl	800865c <strncmp>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d1e1      	bne.n	80089dc <__gethex+0x1d8>
 8008a18:	e7a2      	b.n	8008960 <__gethex+0x15c>
 8008a1a:	1ea9      	subs	r1, r5, #2
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7fe fbcc 	bl	80071ba <__any_on>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d0c2      	beq.n	80089ac <__gethex+0x1a8>
 8008a26:	f04f 0903 	mov.w	r9, #3
 8008a2a:	e7c1      	b.n	80089b0 <__gethex+0x1ac>
 8008a2c:	da09      	bge.n	8008a42 <__gethex+0x23e>
 8008a2e:	1b75      	subs	r5, r6, r5
 8008a30:	4621      	mov	r1, r4
 8008a32:	9801      	ldr	r0, [sp, #4]
 8008a34:	462a      	mov	r2, r5
 8008a36:	f7fe f987 	bl	8006d48 <__lshift>
 8008a3a:	1b7f      	subs	r7, r7, r5
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	f100 0a14 	add.w	sl, r0, #20
 8008a42:	f04f 0900 	mov.w	r9, #0
 8008a46:	e7b8      	b.n	80089ba <__gethex+0x1b6>
 8008a48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a4c:	42bd      	cmp	r5, r7
 8008a4e:	dd6f      	ble.n	8008b30 <__gethex+0x32c>
 8008a50:	1bed      	subs	r5, r5, r7
 8008a52:	42ae      	cmp	r6, r5
 8008a54:	dc34      	bgt.n	8008ac0 <__gethex+0x2bc>
 8008a56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d022      	beq.n	8008aa4 <__gethex+0x2a0>
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d024      	beq.n	8008aac <__gethex+0x2a8>
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d115      	bne.n	8008a92 <__gethex+0x28e>
 8008a66:	42ae      	cmp	r6, r5
 8008a68:	d113      	bne.n	8008a92 <__gethex+0x28e>
 8008a6a:	2e01      	cmp	r6, #1
 8008a6c:	d10b      	bne.n	8008a86 <__gethex+0x282>
 8008a6e:	9a02      	ldr	r2, [sp, #8]
 8008a70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	2301      	movs	r3, #1
 8008a78:	6123      	str	r3, [r4, #16]
 8008a7a:	f8ca 3000 	str.w	r3, [sl]
 8008a7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a80:	2562      	movs	r5, #98	@ 0x62
 8008a82:	601c      	str	r4, [r3, #0]
 8008a84:	e73a      	b.n	80088fc <__gethex+0xf8>
 8008a86:	1e71      	subs	r1, r6, #1
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f7fe fb96 	bl	80071ba <__any_on>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d1ed      	bne.n	8008a6e <__gethex+0x26a>
 8008a92:	9801      	ldr	r0, [sp, #4]
 8008a94:	4621      	mov	r1, r4
 8008a96:	f7fd ff3f 	bl	8006918 <_Bfree>
 8008a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	2550      	movs	r5, #80	@ 0x50
 8008aa2:	e72b      	b.n	80088fc <__gethex+0xf8>
 8008aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1f3      	bne.n	8008a92 <__gethex+0x28e>
 8008aaa:	e7e0      	b.n	8008a6e <__gethex+0x26a>
 8008aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1dd      	bne.n	8008a6e <__gethex+0x26a>
 8008ab2:	e7ee      	b.n	8008a92 <__gethex+0x28e>
 8008ab4:	08009708 	.word	0x08009708
 8008ab8:	0800959e 	.word	0x0800959e
 8008abc:	080097b5 	.word	0x080097b5
 8008ac0:	1e6f      	subs	r7, r5, #1
 8008ac2:	f1b9 0f00 	cmp.w	r9, #0
 8008ac6:	d130      	bne.n	8008b2a <__gethex+0x326>
 8008ac8:	b127      	cbz	r7, 8008ad4 <__gethex+0x2d0>
 8008aca:	4639      	mov	r1, r7
 8008acc:	4620      	mov	r0, r4
 8008ace:	f7fe fb74 	bl	80071ba <__any_on>
 8008ad2:	4681      	mov	r9, r0
 8008ad4:	117a      	asrs	r2, r7, #5
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008adc:	f007 071f 	and.w	r7, r7, #31
 8008ae0:	40bb      	lsls	r3, r7
 8008ae2:	4213      	tst	r3, r2
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	bf18      	it	ne
 8008aea:	f049 0902 	orrne.w	r9, r9, #2
 8008aee:	f7ff fe21 	bl	8008734 <rshift>
 8008af2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008af6:	1b76      	subs	r6, r6, r5
 8008af8:	2502      	movs	r5, #2
 8008afa:	f1b9 0f00 	cmp.w	r9, #0
 8008afe:	d047      	beq.n	8008b90 <__gethex+0x38c>
 8008b00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d015      	beq.n	8008b34 <__gethex+0x330>
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d017      	beq.n	8008b3c <__gethex+0x338>
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d109      	bne.n	8008b24 <__gethex+0x320>
 8008b10:	f019 0f02 	tst.w	r9, #2
 8008b14:	d006      	beq.n	8008b24 <__gethex+0x320>
 8008b16:	f8da 3000 	ldr.w	r3, [sl]
 8008b1a:	ea49 0903 	orr.w	r9, r9, r3
 8008b1e:	f019 0f01 	tst.w	r9, #1
 8008b22:	d10e      	bne.n	8008b42 <__gethex+0x33e>
 8008b24:	f045 0510 	orr.w	r5, r5, #16
 8008b28:	e032      	b.n	8008b90 <__gethex+0x38c>
 8008b2a:	f04f 0901 	mov.w	r9, #1
 8008b2e:	e7d1      	b.n	8008ad4 <__gethex+0x2d0>
 8008b30:	2501      	movs	r5, #1
 8008b32:	e7e2      	b.n	8008afa <__gethex+0x2f6>
 8008b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b36:	f1c3 0301 	rsb	r3, r3, #1
 8008b3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0f0      	beq.n	8008b24 <__gethex+0x320>
 8008b42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b46:	f104 0314 	add.w	r3, r4, #20
 8008b4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b52:	f04f 0c00 	mov.w	ip, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b60:	d01b      	beq.n	8008b9a <__gethex+0x396>
 8008b62:	3201      	adds	r2, #1
 8008b64:	6002      	str	r2, [r0, #0]
 8008b66:	2d02      	cmp	r5, #2
 8008b68:	f104 0314 	add.w	r3, r4, #20
 8008b6c:	d13c      	bne.n	8008be8 <__gethex+0x3e4>
 8008b6e:	f8d8 2000 	ldr.w	r2, [r8]
 8008b72:	3a01      	subs	r2, #1
 8008b74:	42b2      	cmp	r2, r6
 8008b76:	d109      	bne.n	8008b8c <__gethex+0x388>
 8008b78:	1171      	asrs	r1, r6, #5
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b80:	f006 061f 	and.w	r6, r6, #31
 8008b84:	fa02 f606 	lsl.w	r6, r2, r6
 8008b88:	421e      	tst	r6, r3
 8008b8a:	d13a      	bne.n	8008c02 <__gethex+0x3fe>
 8008b8c:	f045 0520 	orr.w	r5, r5, #32
 8008b90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b92:	601c      	str	r4, [r3, #0]
 8008b94:	9b02      	ldr	r3, [sp, #8]
 8008b96:	601f      	str	r7, [r3, #0]
 8008b98:	e6b0      	b.n	80088fc <__gethex+0xf8>
 8008b9a:	4299      	cmp	r1, r3
 8008b9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ba0:	d8d9      	bhi.n	8008b56 <__gethex+0x352>
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	459b      	cmp	fp, r3
 8008ba6:	db17      	blt.n	8008bd8 <__gethex+0x3d4>
 8008ba8:	6861      	ldr	r1, [r4, #4]
 8008baa:	9801      	ldr	r0, [sp, #4]
 8008bac:	3101      	adds	r1, #1
 8008bae:	f7fd fe73 	bl	8006898 <_Balloc>
 8008bb2:	4681      	mov	r9, r0
 8008bb4:	b918      	cbnz	r0, 8008bbe <__gethex+0x3ba>
 8008bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8008c20 <__gethex+0x41c>)
 8008bb8:	4602      	mov	r2, r0
 8008bba:	2184      	movs	r1, #132	@ 0x84
 8008bbc:	e6c5      	b.n	800894a <__gethex+0x146>
 8008bbe:	6922      	ldr	r2, [r4, #16]
 8008bc0:	3202      	adds	r2, #2
 8008bc2:	f104 010c 	add.w	r1, r4, #12
 8008bc6:	0092      	lsls	r2, r2, #2
 8008bc8:	300c      	adds	r0, #12
 8008bca:	f7ff fd69 	bl	80086a0 <memcpy>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	9801      	ldr	r0, [sp, #4]
 8008bd2:	f7fd fea1 	bl	8006918 <_Bfree>
 8008bd6:	464c      	mov	r4, r9
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	1c5a      	adds	r2, r3, #1
 8008bdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008be0:	6122      	str	r2, [r4, #16]
 8008be2:	2201      	movs	r2, #1
 8008be4:	615a      	str	r2, [r3, #20]
 8008be6:	e7be      	b.n	8008b66 <__gethex+0x362>
 8008be8:	6922      	ldr	r2, [r4, #16]
 8008bea:	455a      	cmp	r2, fp
 8008bec:	dd0b      	ble.n	8008c06 <__gethex+0x402>
 8008bee:	2101      	movs	r1, #1
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f7ff fd9f 	bl	8008734 <rshift>
 8008bf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bfa:	3701      	adds	r7, #1
 8008bfc:	42bb      	cmp	r3, r7
 8008bfe:	f6ff aee0 	blt.w	80089c2 <__gethex+0x1be>
 8008c02:	2501      	movs	r5, #1
 8008c04:	e7c2      	b.n	8008b8c <__gethex+0x388>
 8008c06:	f016 061f 	ands.w	r6, r6, #31
 8008c0a:	d0fa      	beq.n	8008c02 <__gethex+0x3fe>
 8008c0c:	4453      	add	r3, sl
 8008c0e:	f1c6 0620 	rsb	r6, r6, #32
 8008c12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c16:	f7fd ff31 	bl	8006a7c <__hi0bits>
 8008c1a:	42b0      	cmp	r0, r6
 8008c1c:	dbe7      	blt.n	8008bee <__gethex+0x3ea>
 8008c1e:	e7f0      	b.n	8008c02 <__gethex+0x3fe>
 8008c20:	0800959e 	.word	0x0800959e

08008c24 <L_shift>:
 8008c24:	f1c2 0208 	rsb	r2, r2, #8
 8008c28:	0092      	lsls	r2, r2, #2
 8008c2a:	b570      	push	{r4, r5, r6, lr}
 8008c2c:	f1c2 0620 	rsb	r6, r2, #32
 8008c30:	6843      	ldr	r3, [r0, #4]
 8008c32:	6804      	ldr	r4, [r0, #0]
 8008c34:	fa03 f506 	lsl.w	r5, r3, r6
 8008c38:	432c      	orrs	r4, r5
 8008c3a:	40d3      	lsrs	r3, r2
 8008c3c:	6004      	str	r4, [r0, #0]
 8008c3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c42:	4288      	cmp	r0, r1
 8008c44:	d3f4      	bcc.n	8008c30 <L_shift+0xc>
 8008c46:	bd70      	pop	{r4, r5, r6, pc}

08008c48 <__match>:
 8008c48:	b530      	push	{r4, r5, lr}
 8008c4a:	6803      	ldr	r3, [r0, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c52:	b914      	cbnz	r4, 8008c5a <__match+0x12>
 8008c54:	6003      	str	r3, [r0, #0]
 8008c56:	2001      	movs	r0, #1
 8008c58:	bd30      	pop	{r4, r5, pc}
 8008c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008c62:	2d19      	cmp	r5, #25
 8008c64:	bf98      	it	ls
 8008c66:	3220      	addls	r2, #32
 8008c68:	42a2      	cmp	r2, r4
 8008c6a:	d0f0      	beq.n	8008c4e <__match+0x6>
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	e7f3      	b.n	8008c58 <__match+0x10>

08008c70 <__hexnan>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	680b      	ldr	r3, [r1, #0]
 8008c76:	6801      	ldr	r1, [r0, #0]
 8008c78:	115e      	asrs	r6, r3, #5
 8008c7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c7e:	f013 031f 	ands.w	r3, r3, #31
 8008c82:	b087      	sub	sp, #28
 8008c84:	bf18      	it	ne
 8008c86:	3604      	addne	r6, #4
 8008c88:	2500      	movs	r5, #0
 8008c8a:	1f37      	subs	r7, r6, #4
 8008c8c:	4682      	mov	sl, r0
 8008c8e:	4690      	mov	r8, r2
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c96:	46b9      	mov	r9, r7
 8008c98:	463c      	mov	r4, r7
 8008c9a:	9502      	str	r5, [sp, #8]
 8008c9c:	46ab      	mov	fp, r5
 8008c9e:	784a      	ldrb	r2, [r1, #1]
 8008ca0:	1c4b      	adds	r3, r1, #1
 8008ca2:	9303      	str	r3, [sp, #12]
 8008ca4:	b342      	cbz	r2, 8008cf8 <__hexnan+0x88>
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	9105      	str	r1, [sp, #20]
 8008caa:	9204      	str	r2, [sp, #16]
 8008cac:	f7ff fd94 	bl	80087d8 <__hexdig_fun>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d151      	bne.n	8008d58 <__hexnan+0xe8>
 8008cb4:	9a04      	ldr	r2, [sp, #16]
 8008cb6:	9905      	ldr	r1, [sp, #20]
 8008cb8:	2a20      	cmp	r2, #32
 8008cba:	d818      	bhi.n	8008cee <__hexnan+0x7e>
 8008cbc:	9b02      	ldr	r3, [sp, #8]
 8008cbe:	459b      	cmp	fp, r3
 8008cc0:	dd13      	ble.n	8008cea <__hexnan+0x7a>
 8008cc2:	454c      	cmp	r4, r9
 8008cc4:	d206      	bcs.n	8008cd4 <__hexnan+0x64>
 8008cc6:	2d07      	cmp	r5, #7
 8008cc8:	dc04      	bgt.n	8008cd4 <__hexnan+0x64>
 8008cca:	462a      	mov	r2, r5
 8008ccc:	4649      	mov	r1, r9
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f7ff ffa8 	bl	8008c24 <L_shift>
 8008cd4:	4544      	cmp	r4, r8
 8008cd6:	d952      	bls.n	8008d7e <__hexnan+0x10e>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f1a4 0904 	sub.w	r9, r4, #4
 8008cde:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ce2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ce6:	464c      	mov	r4, r9
 8008ce8:	461d      	mov	r5, r3
 8008cea:	9903      	ldr	r1, [sp, #12]
 8008cec:	e7d7      	b.n	8008c9e <__hexnan+0x2e>
 8008cee:	2a29      	cmp	r2, #41	@ 0x29
 8008cf0:	d157      	bne.n	8008da2 <__hexnan+0x132>
 8008cf2:	3102      	adds	r1, #2
 8008cf4:	f8ca 1000 	str.w	r1, [sl]
 8008cf8:	f1bb 0f00 	cmp.w	fp, #0
 8008cfc:	d051      	beq.n	8008da2 <__hexnan+0x132>
 8008cfe:	454c      	cmp	r4, r9
 8008d00:	d206      	bcs.n	8008d10 <__hexnan+0xa0>
 8008d02:	2d07      	cmp	r5, #7
 8008d04:	dc04      	bgt.n	8008d10 <__hexnan+0xa0>
 8008d06:	462a      	mov	r2, r5
 8008d08:	4649      	mov	r1, r9
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f7ff ff8a 	bl	8008c24 <L_shift>
 8008d10:	4544      	cmp	r4, r8
 8008d12:	d936      	bls.n	8008d82 <__hexnan+0x112>
 8008d14:	f1a8 0204 	sub.w	r2, r8, #4
 8008d18:	4623      	mov	r3, r4
 8008d1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d22:	429f      	cmp	r7, r3
 8008d24:	d2f9      	bcs.n	8008d1a <__hexnan+0xaa>
 8008d26:	1b3b      	subs	r3, r7, r4
 8008d28:	f023 0303 	bic.w	r3, r3, #3
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	3401      	adds	r4, #1
 8008d30:	3e03      	subs	r6, #3
 8008d32:	42b4      	cmp	r4, r6
 8008d34:	bf88      	it	hi
 8008d36:	2304      	movhi	r3, #4
 8008d38:	4443      	add	r3, r8
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f843 2b04 	str.w	r2, [r3], #4
 8008d40:	429f      	cmp	r7, r3
 8008d42:	d2fb      	bcs.n	8008d3c <__hexnan+0xcc>
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	b91b      	cbnz	r3, 8008d50 <__hexnan+0xe0>
 8008d48:	4547      	cmp	r7, r8
 8008d4a:	d128      	bne.n	8008d9e <__hexnan+0x12e>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	2005      	movs	r0, #5
 8008d52:	b007      	add	sp, #28
 8008d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d58:	3501      	adds	r5, #1
 8008d5a:	2d08      	cmp	r5, #8
 8008d5c:	f10b 0b01 	add.w	fp, fp, #1
 8008d60:	dd06      	ble.n	8008d70 <__hexnan+0x100>
 8008d62:	4544      	cmp	r4, r8
 8008d64:	d9c1      	bls.n	8008cea <__hexnan+0x7a>
 8008d66:	2300      	movs	r3, #0
 8008d68:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d6c:	2501      	movs	r5, #1
 8008d6e:	3c04      	subs	r4, #4
 8008d70:	6822      	ldr	r2, [r4, #0]
 8008d72:	f000 000f 	and.w	r0, r0, #15
 8008d76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d7a:	6020      	str	r0, [r4, #0]
 8008d7c:	e7b5      	b.n	8008cea <__hexnan+0x7a>
 8008d7e:	2508      	movs	r5, #8
 8008d80:	e7b3      	b.n	8008cea <__hexnan+0x7a>
 8008d82:	9b01      	ldr	r3, [sp, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0dd      	beq.n	8008d44 <__hexnan+0xd4>
 8008d88:	f1c3 0320 	rsb	r3, r3, #32
 8008d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d90:	40da      	lsrs	r2, r3
 8008d92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d96:	4013      	ands	r3, r2
 8008d98:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d9c:	e7d2      	b.n	8008d44 <__hexnan+0xd4>
 8008d9e:	3f04      	subs	r7, #4
 8008da0:	e7d0      	b.n	8008d44 <__hexnan+0xd4>
 8008da2:	2004      	movs	r0, #4
 8008da4:	e7d5      	b.n	8008d52 <__hexnan+0xe2>

08008da6 <__ascii_mbtowc>:
 8008da6:	b082      	sub	sp, #8
 8008da8:	b901      	cbnz	r1, 8008dac <__ascii_mbtowc+0x6>
 8008daa:	a901      	add	r1, sp, #4
 8008dac:	b142      	cbz	r2, 8008dc0 <__ascii_mbtowc+0x1a>
 8008dae:	b14b      	cbz	r3, 8008dc4 <__ascii_mbtowc+0x1e>
 8008db0:	7813      	ldrb	r3, [r2, #0]
 8008db2:	600b      	str	r3, [r1, #0]
 8008db4:	7812      	ldrb	r2, [r2, #0]
 8008db6:	1e10      	subs	r0, r2, #0
 8008db8:	bf18      	it	ne
 8008dba:	2001      	movne	r0, #1
 8008dbc:	b002      	add	sp, #8
 8008dbe:	4770      	bx	lr
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	e7fb      	b.n	8008dbc <__ascii_mbtowc+0x16>
 8008dc4:	f06f 0001 	mvn.w	r0, #1
 8008dc8:	e7f8      	b.n	8008dbc <__ascii_mbtowc+0x16>

08008dca <_realloc_r>:
 8008dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dce:	4680      	mov	r8, r0
 8008dd0:	4615      	mov	r5, r2
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	b921      	cbnz	r1, 8008de0 <_realloc_r+0x16>
 8008dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dda:	4611      	mov	r1, r2
 8008ddc:	f7fd bcd0 	b.w	8006780 <_malloc_r>
 8008de0:	b92a      	cbnz	r2, 8008dee <_realloc_r+0x24>
 8008de2:	f7fd fc59 	bl	8006698 <_free_r>
 8008de6:	2400      	movs	r4, #0
 8008de8:	4620      	mov	r0, r4
 8008dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dee:	f000 f8c4 	bl	8008f7a <_malloc_usable_size_r>
 8008df2:	4285      	cmp	r5, r0
 8008df4:	4606      	mov	r6, r0
 8008df6:	d802      	bhi.n	8008dfe <_realloc_r+0x34>
 8008df8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008dfc:	d8f4      	bhi.n	8008de8 <_realloc_r+0x1e>
 8008dfe:	4629      	mov	r1, r5
 8008e00:	4640      	mov	r0, r8
 8008e02:	f7fd fcbd 	bl	8006780 <_malloc_r>
 8008e06:	4607      	mov	r7, r0
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d0ec      	beq.n	8008de6 <_realloc_r+0x1c>
 8008e0c:	42b5      	cmp	r5, r6
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4621      	mov	r1, r4
 8008e12:	bf28      	it	cs
 8008e14:	4632      	movcs	r2, r6
 8008e16:	f7ff fc43 	bl	80086a0 <memcpy>
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	f7fd fc3b 	bl	8006698 <_free_r>
 8008e22:	463c      	mov	r4, r7
 8008e24:	e7e0      	b.n	8008de8 <_realloc_r+0x1e>

08008e26 <__ascii_wctomb>:
 8008e26:	4603      	mov	r3, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	b141      	cbz	r1, 8008e3e <__ascii_wctomb+0x18>
 8008e2c:	2aff      	cmp	r2, #255	@ 0xff
 8008e2e:	d904      	bls.n	8008e3a <__ascii_wctomb+0x14>
 8008e30:	228a      	movs	r2, #138	@ 0x8a
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	4770      	bx	lr
 8008e3a:	700a      	strb	r2, [r1, #0]
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	4770      	bx	lr

08008e40 <fiprintf>:
 8008e40:	b40e      	push	{r1, r2, r3}
 8008e42:	b503      	push	{r0, r1, lr}
 8008e44:	4601      	mov	r1, r0
 8008e46:	ab03      	add	r3, sp, #12
 8008e48:	4805      	ldr	r0, [pc, #20]	@ (8008e60 <fiprintf+0x20>)
 8008e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4e:	6800      	ldr	r0, [r0, #0]
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	f7ff f95d 	bl	8008110 <_vfiprintf_r>
 8008e56:	b002      	add	sp, #8
 8008e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e5c:	b003      	add	sp, #12
 8008e5e:	4770      	bx	lr
 8008e60:	2000001c 	.word	0x2000001c

08008e64 <__swhatbuf_r>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	460c      	mov	r4, r1
 8008e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	b096      	sub	sp, #88	@ 0x58
 8008e70:	4615      	mov	r5, r2
 8008e72:	461e      	mov	r6, r3
 8008e74:	da0d      	bge.n	8008e92 <__swhatbuf_r+0x2e>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e7c:	f04f 0100 	mov.w	r1, #0
 8008e80:	bf14      	ite	ne
 8008e82:	2340      	movne	r3, #64	@ 0x40
 8008e84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e88:	2000      	movs	r0, #0
 8008e8a:	6031      	str	r1, [r6, #0]
 8008e8c:	602b      	str	r3, [r5, #0]
 8008e8e:	b016      	add	sp, #88	@ 0x58
 8008e90:	bd70      	pop	{r4, r5, r6, pc}
 8008e92:	466a      	mov	r2, sp
 8008e94:	f000 f848 	bl	8008f28 <_fstat_r>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	dbec      	blt.n	8008e76 <__swhatbuf_r+0x12>
 8008e9c:	9901      	ldr	r1, [sp, #4]
 8008e9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ea2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ea6:	4259      	negs	r1, r3
 8008ea8:	4159      	adcs	r1, r3
 8008eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008eae:	e7eb      	b.n	8008e88 <__swhatbuf_r+0x24>

08008eb0 <__smakebuf_r>:
 8008eb0:	898b      	ldrh	r3, [r1, #12]
 8008eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eb4:	079d      	lsls	r5, r3, #30
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	460c      	mov	r4, r1
 8008eba:	d507      	bpl.n	8008ecc <__smakebuf_r+0x1c>
 8008ebc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	6123      	str	r3, [r4, #16]
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	6163      	str	r3, [r4, #20]
 8008ec8:	b003      	add	sp, #12
 8008eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ecc:	ab01      	add	r3, sp, #4
 8008ece:	466a      	mov	r2, sp
 8008ed0:	f7ff ffc8 	bl	8008e64 <__swhatbuf_r>
 8008ed4:	9f00      	ldr	r7, [sp, #0]
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	4639      	mov	r1, r7
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7fd fc50 	bl	8006780 <_malloc_r>
 8008ee0:	b948      	cbnz	r0, 8008ef6 <__smakebuf_r+0x46>
 8008ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ee6:	059a      	lsls	r2, r3, #22
 8008ee8:	d4ee      	bmi.n	8008ec8 <__smakebuf_r+0x18>
 8008eea:	f023 0303 	bic.w	r3, r3, #3
 8008eee:	f043 0302 	orr.w	r3, r3, #2
 8008ef2:	81a3      	strh	r3, [r4, #12]
 8008ef4:	e7e2      	b.n	8008ebc <__smakebuf_r+0xc>
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	6020      	str	r0, [r4, #0]
 8008efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	9b01      	ldr	r3, [sp, #4]
 8008f02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f06:	b15b      	cbz	r3, 8008f20 <__smakebuf_r+0x70>
 8008f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f000 f81d 	bl	8008f4c <_isatty_r>
 8008f12:	b128      	cbz	r0, 8008f20 <__smakebuf_r+0x70>
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	f023 0303 	bic.w	r3, r3, #3
 8008f1a:	f043 0301 	orr.w	r3, r3, #1
 8008f1e:	81a3      	strh	r3, [r4, #12]
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	431d      	orrs	r5, r3
 8008f24:	81a5      	strh	r5, [r4, #12]
 8008f26:	e7cf      	b.n	8008ec8 <__smakebuf_r+0x18>

08008f28 <_fstat_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4d07      	ldr	r5, [pc, #28]	@ (8008f48 <_fstat_r+0x20>)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	4611      	mov	r1, r2
 8008f34:	602b      	str	r3, [r5, #0]
 8008f36:	f7fa f8a1 	bl	800307c <_fstat>
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	d102      	bne.n	8008f44 <_fstat_r+0x1c>
 8008f3e:	682b      	ldr	r3, [r5, #0]
 8008f40:	b103      	cbz	r3, 8008f44 <_fstat_r+0x1c>
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	bd38      	pop	{r3, r4, r5, pc}
 8008f46:	bf00      	nop
 8008f48:	20000aec 	.word	0x20000aec

08008f4c <_isatty_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4d06      	ldr	r5, [pc, #24]	@ (8008f68 <_isatty_r+0x1c>)
 8008f50:	2300      	movs	r3, #0
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	602b      	str	r3, [r5, #0]
 8008f58:	f7fa f8a0 	bl	800309c <_isatty>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d102      	bne.n	8008f66 <_isatty_r+0x1a>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	b103      	cbz	r3, 8008f66 <_isatty_r+0x1a>
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	20000aec 	.word	0x20000aec

08008f6c <abort>:
 8008f6c:	b508      	push	{r3, lr}
 8008f6e:	2006      	movs	r0, #6
 8008f70:	f000 f834 	bl	8008fdc <raise>
 8008f74:	2001      	movs	r0, #1
 8008f76:	f7fa f831 	bl	8002fdc <_exit>

08008f7a <_malloc_usable_size_r>:
 8008f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7e:	1f18      	subs	r0, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	bfbc      	itt	lt
 8008f84:	580b      	ldrlt	r3, [r1, r0]
 8008f86:	18c0      	addlt	r0, r0, r3
 8008f88:	4770      	bx	lr

08008f8a <_raise_r>:
 8008f8a:	291f      	cmp	r1, #31
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4605      	mov	r5, r0
 8008f90:	460c      	mov	r4, r1
 8008f92:	d904      	bls.n	8008f9e <_raise_r+0x14>
 8008f94:	2316      	movs	r3, #22
 8008f96:	6003      	str	r3, [r0, #0]
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fa0:	b112      	cbz	r2, 8008fa8 <_raise_r+0x1e>
 8008fa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fa6:	b94b      	cbnz	r3, 8008fbc <_raise_r+0x32>
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f000 f831 	bl	8009010 <_getpid_r>
 8008fae:	4622      	mov	r2, r4
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fb8:	f000 b818 	b.w	8008fec <_kill_r>
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d00a      	beq.n	8008fd6 <_raise_r+0x4c>
 8008fc0:	1c59      	adds	r1, r3, #1
 8008fc2:	d103      	bne.n	8008fcc <_raise_r+0x42>
 8008fc4:	2316      	movs	r3, #22
 8008fc6:	6003      	str	r3, [r0, #0]
 8008fc8:	2001      	movs	r0, #1
 8008fca:	e7e7      	b.n	8008f9c <_raise_r+0x12>
 8008fcc:	2100      	movs	r1, #0
 8008fce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	4798      	blx	r3
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e7e0      	b.n	8008f9c <_raise_r+0x12>
	...

08008fdc <raise>:
 8008fdc:	4b02      	ldr	r3, [pc, #8]	@ (8008fe8 <raise+0xc>)
 8008fde:	4601      	mov	r1, r0
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	f7ff bfd2 	b.w	8008f8a <_raise_r>
 8008fe6:	bf00      	nop
 8008fe8:	2000001c 	.word	0x2000001c

08008fec <_kill_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4d07      	ldr	r5, [pc, #28]	@ (800900c <_kill_r+0x20>)
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	f7f9 ffdf 	bl	8002fbc <_kill>
 8008ffe:	1c43      	adds	r3, r0, #1
 8009000:	d102      	bne.n	8009008 <_kill_r+0x1c>
 8009002:	682b      	ldr	r3, [r5, #0]
 8009004:	b103      	cbz	r3, 8009008 <_kill_r+0x1c>
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	bd38      	pop	{r3, r4, r5, pc}
 800900a:	bf00      	nop
 800900c:	20000aec 	.word	0x20000aec

08009010 <_getpid_r>:
 8009010:	f7f9 bfcc 	b.w	8002fac <_getpid>

08009014 <_init>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	bf00      	nop
 8009018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901a:	bc08      	pop	{r3}
 800901c:	469e      	mov	lr, r3
 800901e:	4770      	bx	lr

08009020 <_fini>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	bf00      	nop
 8009024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009026:	bc08      	pop	{r3}
 8009028:	469e      	mov	lr, r3
 800902a:	4770      	bx	lr
