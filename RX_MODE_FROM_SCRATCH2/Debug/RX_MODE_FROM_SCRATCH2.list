
RX_MODE_FROM_SCRATCH2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002868  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08002a08  08002a08  00003a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002abc  08002abc  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002abc  08002abc  00003abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ac4  08002ac4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac4  08002ac4  00003ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ac8  08002ac8  00003ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002acc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000068  08002b34  00004068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08002b34  000041e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000481e  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001452  00000000  00000000  000088b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  00009d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000408  00000000  00000000  0000a2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016539  00000000  00000000  0000a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006957  00000000  00000000  00020bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000857e1  00000000  00000000  00027548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000acd29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c3c  00000000  00000000  000acd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000ae9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080029f0 	.word	0x080029f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080029f0 	.word	0x080029f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <millis>:
}



uint64_t millis()
	{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000576:	b672      	cpsid	i
}
 8000578:	bf00      	nop
	__disable_irq();
	uint64_t ml=mil;
 800057a:	4b08      	ldr	r3, [pc, #32]	@ (800059c <millis+0x2c>)
 800057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000580:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8000584:	b662      	cpsie	i
}
 8000586:	bf00      	nop
	__enable_irq();
	return ml;
 8000588:	e9d7 2300 	ldrd	r2, r3, [r7]
	}
 800058c:	4610      	mov	r0, r2
 800058e:	4619      	mov	r1, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000088 	.word	0x20000088

080005a0 <delay>:



void delay(uint32_t time)
	{
 80005a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]

	uint64_t start=millis();
 80005aa:	f7ff ffe1 	bl	8000570 <millis>
 80005ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while((millis() - start) < time);
 80005b2:	bf00      	nop
 80005b4:	f7ff ffdc 	bl	8000570 <millis>
 80005b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb61 0503 	sbc.w	r5, r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	4698      	mov	r8, r3
 80005c8:	4691      	mov	r9, r2
 80005ca:	4544      	cmp	r4, r8
 80005cc:	eb75 0309 	sbcs.w	r3, r5, r9
 80005d0:	d3f0      	bcc.n	80005b4 <delay+0x14>

	}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080005e0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	mil++;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <SysTick_Handler+0x20>)
 80005e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ea:	1c50      	adds	r0, r2, #1
 80005ec:	f143 0100 	adc.w	r1, r3, #0
 80005f0:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <SysTick_Handler+0x20>)
 80005f2:	e9c3 0100 	strd	r0, r1, [r3]
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	20000088 	.word	0x20000088

08000604 <init_CSN_CE_PINS>:
	#include"delay.h"
	#include"SPI.h"
	#include"utilities.h"
#include<stdio.h>

void init_CSN_CE_PINS(){
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <init_CSN_CE_PINS+0x3c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060c:	4a0c      	ldr	r2, [pc, #48]	@ (8000640 <init_CSN_CE_PINS+0x3c>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6313      	str	r3, [r2, #48]	@ 0x30
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER4, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <init_CSN_CE_PINS+0x40>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800061c:	4a09      	ldr	r2, [pc, #36]	@ (8000644 <init_CSN_CE_PINS+0x40>)
 800061e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000622:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER0, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <init_CSN_CE_PINS+0x40>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f023 0303 	bic.w	r3, r3, #3
 800062c:	4a05      	ldr	r2, [pc, #20]	@ (8000644 <init_CSN_CE_PINS+0x40>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020000 	.word	0x40020000

08000648 <CSN_SELECT_NRF>:


	void CSN_SELECT_NRF(){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BR_4; //pull low to enable nrf
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <CSN_SELECT_NRF+0x1c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <CSN_SELECT_NRF+0x1c>)
 8000652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000656:	6193      	str	r3, [r2, #24]
	}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40020000 	.word	0x40020000

08000668 <CSN_UNSELECT_NRF>:

	void CSN_UNSELECT_NRF(){
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BS_4; //make high to disable
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <CSN_UNSELECT_NRF+0x1c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <CSN_UNSELECT_NRF+0x1c>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6193      	str	r3, [r2, #24]
	}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40020000 	.word	0x40020000

08000688 <NRF_ENABLE>:

	void NRF_ENABLE(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BS_0;
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <NRF_ENABLE+0x1c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <NRF_ENABLE+0x1c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6193      	str	r3, [r2, #24]
	}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40020000 	.word	0x40020000

080006a8 <NRF_DISABLE>:

	void NRF_DISABLE(){
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BR_0;
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <NRF_DISABLE+0x1c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <NRF_DISABLE+0x1c>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006b6:	6193      	str	r3, [r2, #24]
	}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40020000 	.word	0x40020000

080006c8 <NRF_WRITE_REGISTER>:



	void NRF_WRITE_REGISTER(uint8_t REG_ADDRESS,uint8_t data){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	460a      	mov	r2, r1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	4613      	mov	r3, r2
 80006d6:	71bb      	strb	r3, [r7, #6]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	733b      	strb	r3, [r7, #12]
		trans_buff[1]=data;
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	737b      	strb	r3, [r7, #13]
		CSN_SELECT_NRF();
 80006e6:	f7ff ffaf 	bl	8000648 <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,2);
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f9f1 	bl	8000ad8 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 80006f6:	f7ff ffb7 	bl	8000668 <CSN_UNSELECT_NRF>

	}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <NRF_WRITE_REG_MULTI_BYTES>:
	void NRF_WRITE_REG_MULTI_BYTES(uint8_t REG_ADDRESS,uint8_t* data_trans,int size_trans){
 8000702:	b580      	push	{r7, lr}
 8000704:	b086      	sub	sp, #24
 8000706:	af00      	add	r7, sp, #0
 8000708:	4603      	mov	r3, r0
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	73fb      	strb	r3, [r7, #15]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	f043 0320 	orr.w	r3, r3, #32
 8000716:	b2db      	uxtb	r3, r3
 8000718:	753b      	strb	r3, [r7, #20]
		CSN_SELECT_NRF();
 800071a:	f7ff ff95 	bl	8000648 <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,1);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f9d7 	bl	8000ad8 <SPI_TX_MULTI>
		SPI_TX_MULTI(data_trans,size_trans);
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	68b8      	ldr	r0, [r7, #8]
 800072e:	f000 f9d3 	bl	8000ad8 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 8000732:	f7ff ff99 	bl	8000668 <CSN_UNSELECT_NRF>
	}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <NRF_READ_REGISTER>:

	uint8_t NRF_READ_REGISTER(uint8_t REG_ADDRESS){
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	71fb      	strb	r3, [r7, #7]
		uint8_t data_returned=0;
 8000748:	2300      	movs	r3, #0
 800074a:	73fb      	strb	r3, [r7, #15]
		CSN_SELECT_NRF();
 800074c:	f7ff ff7c 	bl	8000648 <CSN_SELECT_NRF>
		SPI_TX_MULTI(&REG_ADDRESS,1);
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	2101      	movs	r1, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f9bf 	bl	8000ad8 <SPI_TX_MULTI>
		SPI_READ_MULTI(&data_returned,1);
 800075a:	f107 030f 	add.w	r3, r7, #15
 800075e:	2101      	movs	r1, #1
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f9f1 	bl	8000b48 <SPI_READ_MULTI>
		CSN_UNSELECT_NRF();
 8000766:	f7ff ff7f 	bl	8000668 <CSN_UNSELECT_NRF>
		return data_returned;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
	}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <NRF_PRX_CONFIG>:
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR,Address,5); //set address
		NRF_WRITE_REGISTER(CONFIG,0x0a); //powwr on device and keep in tx mode
		//NRF_ENABLE();
	}

	void NRF_PRX_CONFIG(uint8_t *Address, uint8_t channel){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
		NRF_DISABLE();
 8000780:	f7ff ff92 	bl	80006a8 <NRF_DISABLE>
		NRF_WRITE_REGISTER(RF_CH,channel); //select channel
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	4619      	mov	r1, r3
 8000788:	2005      	movs	r0, #5
 800078a:	f7ff ff9d 	bl	80006c8 <NRF_WRITE_REGISTER>
		uint8_t current_pipe_status=NRF_READ_REGISTER(EN_RXADDR);
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff ffd5 	bl	800073e <NRF_READ_REGISTER>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
		current_pipe_status=current_pipe_status|(1<<1);//enable pipe 1
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	f043 0302 	orr.w	r3, r3, #2
 800079e:	73fb      	strb	r3, [r7, #15]
		NRF_WRITE_REGISTER(EN_RXADDR,current_pipe_status);
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	4619      	mov	r1, r3
 80007a4:	2002      	movs	r0, #2
 80007a6:	f7ff ff8f 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P1,Address,5); //pipe address
 80007aa:	2205      	movs	r2, #5
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	200b      	movs	r0, #11
 80007b0:	f7ff ffa7 	bl	8000702 <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_PW_P1,32); //data 32 bytes width
 80007b4:	2120      	movs	r1, #32
 80007b6:	2012      	movs	r0, #18
 80007b8:	f7ff ff86 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(CONFIG,0x0b); //powwr on device and keep in tx mode
 80007bc:	210b      	movs	r1, #11
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ff82 	bl	80006c8 <NRF_WRITE_REGISTER>
		delay(5);
 80007c4:	2005      	movs	r0, #5
 80007c6:	f7ff feeb 	bl	80005a0 <delay>
		//NRF_ENABLE();
	}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <nrf24_reset>:

	void nrf24_reset(uint8_t REG)
	{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
		if (REG == STATUS)
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	d104      	bne.n	80007ee <nrf24_reset+0x1a>
		{
			NRF_WRITE_REGISTER(STATUS, 0x00);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2007      	movs	r0, #7
 80007e8:	f7ff ff6e 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
		NRF_WRITE_REGISTER(DYNPD, 0);
		NRF_WRITE_REGISTER(FEATURE, 0);
		}
	}
 80007ec:	e090      	b.n	8000910 <nrf24_reset+0x13c>
		else if (REG == FIFO_STATUS)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b17      	cmp	r3, #23
 80007f2:	d104      	bne.n	80007fe <nrf24_reset+0x2a>
			NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 80007f4:	2111      	movs	r1, #17
 80007f6:	2017      	movs	r0, #23
 80007f8:	f7ff ff66 	bl	80006c8 <NRF_WRITE_REGISTER>
	}
 80007fc:	e088      	b.n	8000910 <nrf24_reset+0x13c>
		NRF_WRITE_REGISTER(CONFIG, 0x08);
 80007fe:	2108      	movs	r1, #8
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ff61 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3F);
 8000806:	213f      	movs	r1, #63	@ 0x3f
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff ff5d 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_RXADDR, 0x03);
 800080e:	2103      	movs	r1, #3
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff59 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_AW, 0x03);
 8000816:	2103      	movs	r1, #3
 8000818:	2003      	movs	r0, #3
 800081a:	f7ff ff55 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0x03);
 800081e:	2103      	movs	r1, #3
 8000820:	2004      	movs	r0, #4
 8000822:	f7ff ff51 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_CH, 0x02);
 8000826:	2102      	movs	r1, #2
 8000828:	2005      	movs	r0, #5
 800082a:	f7ff ff4d 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_SETUP, 0x0E);
 800082e:	210e      	movs	r1, #14
 8000830:	2006      	movs	r0, #6
 8000832:	f7ff ff49 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(STATUS, 0x00);
 8000836:	2100      	movs	r1, #0
 8000838:	2007      	movs	r0, #7
 800083a:	f7ff ff45 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(OBSERVE_TX, 0x00);
 800083e:	2100      	movs	r1, #0
 8000840:	2008      	movs	r0, #8
 8000842:	f7ff ff41 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(CD, 0x00);
 8000846:	2100      	movs	r1, #0
 8000848:	2009      	movs	r0, #9
 800084a:	f7ff ff3d 	bl	80006c8 <NRF_WRITE_REGISTER>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800084e:	4a32      	ldr	r2, [pc, #200]	@ (8000918 <nrf24_reset+0x144>)
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000858:	6018      	str	r0, [r3, #0]
 800085a:	3304      	adds	r3, #4
 800085c:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0, rx_addr_p0_def, 5);
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	2205      	movs	r2, #5
 8000864:	4619      	mov	r1, r3
 8000866:	200a      	movs	r0, #10
 8000868:	f7ff ff4b 	bl	8000702 <NRF_WRITE_REG_MULTI_BYTES>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800086c:	4a2b      	ldr	r2, [pc, #172]	@ (800091c <nrf24_reset+0x148>)
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000876:	6018      	str	r0, [r3, #0]
 8000878:	3304      	adds	r3, #4
 800087a:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P1, rx_addr_p1_def, 5);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	2205      	movs	r2, #5
 8000882:	4619      	mov	r1, r3
 8000884:	200b      	movs	r0, #11
 8000886:	f7ff ff3c 	bl	8000702 <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_ADDR_P2, 0xC3);
 800088a:	21c3      	movs	r1, #195	@ 0xc3
 800088c:	200c      	movs	r0, #12
 800088e:	f7ff ff1b 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P3, 0xC4);
 8000892:	21c4      	movs	r1, #196	@ 0xc4
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff ff17 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P4, 0xC5);
 800089a:	21c5      	movs	r1, #197	@ 0xc5
 800089c:	200e      	movs	r0, #14
 800089e:	f7ff ff13 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P5, 0xC6);
 80008a2:	21c6      	movs	r1, #198	@ 0xc6
 80008a4:	200f      	movs	r0, #15
 80008a6:	f7ff ff0f 	bl	80006c8 <NRF_WRITE_REGISTER>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80008aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <nrf24_reset+0x144>)
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	6018      	str	r0, [r3, #0]
 80008b6:	3304      	adds	r3, #4
 80008b8:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR, tx_addr_def, 5);
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2205      	movs	r2, #5
 80008c0:	4619      	mov	r1, r3
 80008c2:	2010      	movs	r0, #16
 80008c4:	f7ff ff1d 	bl	8000702 <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_PW_P0, 0);
 80008c8:	2100      	movs	r1, #0
 80008ca:	2011      	movs	r0, #17
 80008cc:	f7ff fefc 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P1, 0);
 80008d0:	2100      	movs	r1, #0
 80008d2:	2012      	movs	r0, #18
 80008d4:	f7ff fef8 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P2, 0);
 80008d8:	2100      	movs	r1, #0
 80008da:	2013      	movs	r0, #19
 80008dc:	f7ff fef4 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P3, 0);
 80008e0:	2100      	movs	r1, #0
 80008e2:	2014      	movs	r0, #20
 80008e4:	f7ff fef0 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P4, 0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2015      	movs	r0, #21
 80008ec:	f7ff feec 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
 80008f0:	2100      	movs	r1, #0
 80008f2:	2016      	movs	r0, #22
 80008f4:	f7ff fee8 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 80008f8:	2111      	movs	r1, #17
 80008fa:	2017      	movs	r0, #23
 80008fc:	f7ff fee4 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(DYNPD, 0);
 8000900:	2100      	movs	r1, #0
 8000902:	201c      	movs	r0, #28
 8000904:	f7ff fee0 	bl	80006c8 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FEATURE, 0);
 8000908:	2100      	movs	r1, #0
 800090a:	201d      	movs	r0, #29
 800090c:	f7ff fedc 	bl	80006c8 <NRF_WRITE_REGISTER>
	}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08002a08 	.word	0x08002a08
 800091c:	08002a10 	.word	0x08002a10

08000920 <NRF_INIT>:


	void NRF_INIT(){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
		SPI_INIT(); //initalize spi comms
 8000924:	f000 f87e 	bl	8000a24 <SPI_INIT>
		init_CSN_CE_PINS();
 8000928:	f7ff fe6c 	bl	8000604 <init_CSN_CE_PINS>
		NRF_DISABLE();
 800092c:	f7ff febc 	bl	80006a8 <NRF_DISABLE>
		nrf24_reset(0);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff4f 	bl	80007d4 <nrf24_reset>
		NRF_WRITE_REGISTER(CONFIG, 0);  // will be configured later
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fec5 	bl	80006c8 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
 800093e:	213f      	movs	r1, #63	@ 0x3f
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fec1 	bl	80006c8 <NRF_WRITE_REGISTER>
		//NRF_WRITE_REGISTER(SETUP_RETR, 0x03); // 15 retries, 500µs delay

		NRF_WRITE_REGISTER (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000946:	2100      	movs	r1, #0
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff febd 	bl	80006c8 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800094e:	2103      	movs	r1, #3
 8000950:	2003      	movs	r0, #3
 8000952:	f7ff feb9 	bl	80006c8 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_RETR, 0x3);   // No retransmission
 8000956:	2103      	movs	r1, #3
 8000958:	2004      	movs	r0, #4
 800095a:	f7ff feb5 	bl	80006c8 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_CH, 0);  // will be setup during Tx or RX
 800095e:	2100      	movs	r1, #0
 8000960:	2005      	movs	r0, #5
 8000962:	f7ff feb1 	bl	80006c8 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_SETUP, 0x0e);   // Power= 0db, data rate = 2Mbps
 8000966:	210e      	movs	r1, #14
 8000968:	2006      	movs	r0, #6
 800096a:	f7ff fead 	bl	80006c8 <NRF_WRITE_REGISTER>
		//NRF_ENABLE();
	}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}

08000972 <NRD_SEND_CMD>:


	void NRD_SEND_CMD (uint8_t cmd)
	{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
		// Pull the CS Pin LOW to select the device
		CSN_SELECT_NRF();
 800097c:	f7ff fe64 	bl	8000648 <CSN_SELECT_NRF>

		SPI_TX_MULTI(&cmd, 1);
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	2101      	movs	r1, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f000 f8a7 	bl	8000ad8 <SPI_TX_MULTI>

		// Pull the CS HIGH to release the device
		CSN_UNSELECT_NRF();
 800098a:	f7ff fe6d 	bl	8000668 <CSN_UNSELECT_NRF>
	}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <is_data_on_pipe>:
		}
		return 0;

	}

uint8_t is_data_on_pipe(uint8_t pipenum){
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
	NRF_ENABLE();
 80009a0:	f7ff fe72 	bl	8000688 <NRF_ENABLE>
uint8_t status_reg=NRF_READ_REGISTER(STATUS);
 80009a4:	2007      	movs	r0, #7
 80009a6:	f7ff feca 	bl	800073e <NRF_READ_REGISTER>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
//if 6 th bit is set and respective data pipe is set
if((status_reg & (1<<6))&& status_reg &(1<<pipenum)){
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d00d      	beq.n	80009d4 <is_data_on_pipe+0x3e>
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	fa42 f303 	asr.w	r3, r2, r3
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d005      	beq.n	80009d4 <is_data_on_pipe+0x3e>
//clear rx_dr
	NRF_WRITE_REGISTER(STATUS,(1<<6));
 80009c8:	2140      	movs	r1, #64	@ 0x40
 80009ca:	2007      	movs	r0, #7
 80009cc:	f7ff fe7c 	bl	80006c8 <NRF_WRITE_REGISTER>
	return 1; //data recieved
 80009d0:	2301      	movs	r3, #1
 80009d2:	e000      	b.n	80009d6 <is_data_on_pipe+0x40>
}
return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <NRF_RECV_DATA>:

void NRF_RECV_DATA(uint8_t *data_ptr_RECV){
 80009de:	b580      	push	{r7, lr}
 80009e0:	b084      	sub	sp, #16
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	uint8_t cmd = R_RX_PAYLOAD;
 80009e6:	2361      	movs	r3, #97	@ 0x61
 80009e8:	73fb      	strb	r3, [r7, #15]
	CSN_SELECT_NRF();
 80009ea:	f7ff fe2d 	bl	8000648 <CSN_SELECT_NRF>
	SPI_TX_MULTI( &cmd, 1);
 80009ee:	f107 030f 	add.w	r3, r7, #15
 80009f2:	2101      	movs	r1, #1
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f86f 	bl	8000ad8 <SPI_TX_MULTI>
	SPI_READ_MULTI(data_ptr_RECV,32);//recieve data
 80009fa:	2120      	movs	r1, #32
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f8a3 	bl	8000b48 <SPI_READ_MULTI>
	CSN_UNSELECT_NRF();
 8000a02:	f7ff fe31 	bl	8000668 <CSN_UNSELECT_NRF>
	delay(10);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f7ff fdca 	bl	80005a0 <delay>
	cmd=FLUSH_RX;
 8000a0c:	23e2      	movs	r3, #226	@ 0xe2
 8000a0e:	73fb      	strb	r3, [r7, #15]
	NRD_SEND_CMD(cmd); //flush rx fifo
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ffad 	bl	8000972 <NRD_SEND_CMD>
	NRF_DISABLE();
 8000a18:	f7ff fe46 	bl	80006a8 <NRF_DISABLE>
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SPI_INIT>:
#include"SPI.h"
#include"stdio.h"
#define AF05  (0x05)


void SPI_INIT(){
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	//enable clock for GPIOA
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8000a28:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <SPI_INIT+0xa8>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2c:	4a27      	ldr	r2, [pc, #156]	@ (8000acc <SPI_INIT+0xa8>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA5, PA6 and PA7 to alternate function mode
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1;
 8000a34:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <SPI_INIT+0xac>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a25      	ldr	r2, [pc, #148]	@ (8000ad0 <SPI_INIT+0xac>)
 8000a3a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000a3e:	6013      	str	r3, [r2, #0]
	//set which type of alternate function is
	GPIOA->AFR[0]|=(AF05<<20)|(AF05<<24)|(AF05<<28);
 8000a40:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <SPI_INIT+0xac>)
 8000a42:	6a1b      	ldr	r3, [r3, #32]
 8000a44:	4a22      	ldr	r2, [pc, #136]	@ (8000ad0 <SPI_INIT+0xac>)
 8000a46:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000a4a:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000a4e:	6213      	str	r3, [r2, #32]
	//enable clock access to SPI1
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <SPI_INIT+0xa8>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a54:	4a1d      	ldr	r2, [pc, #116]	@ (8000acc <SPI_INIT+0xa8>)
 8000a56:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a5a:	6453      	str	r3, [r2, #68]	@ 0x44
	//set software slave managment
	SPI1->CR1|=SPI_CR1_SSM|SPI_CR1_SSI;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a62:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000a66:	6013      	str	r3, [r2, #0]
	//set SPI in master mode
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_MSTR, 1);
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a19      	ldr	r2, [pc, #100]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_BR,  3);
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000a7c:	4a15      	ldr	r2, [pc, #84]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a7e:	f043 0318 	orr.w	r3, r3, #24
 8000a82:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPHA, 0);
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a8a:	f023 0301 	bic.w	r3, r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPOL, 0);
 8000a90:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a96:	f023 0302 	bic.w	r3, r3, #2
 8000a9a:	6013      	str	r3, [r2, #0]
	//MODIFY_FIELD(SPI1->CR1, SPI_CR1_LSBFIRST, 1);
	SPI1->CR2 |= 0x4;
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x40; // Enabling SPI SPI periph
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a09      	ldr	r2, [pc, #36]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ab2:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_SPE, 1);
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a06      	ldr	r2, [pc, #24]	@ (8000ad4 <SPI_INIT+0xb0>)
 8000aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40013000 	.word	0x40013000

08000ad8 <SPI_TX_MULTI>:

//send multiple bytes in case size>1
void SPI_TX_MULTI(uint8_t *data_ptr,int size){
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
int i=0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
uint8_t temp;
while(i<size){
 8000ae6:	e00f      	b.n	8000b08 <SPI_TX_MULTI+0x30>
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000ae8:	bf00      	nop
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <SPI_TX_MULTI+0x6c>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f9      	beq.n	8000aea <SPI_TX_MULTI+0x12>
	SPI1->DR = data_ptr[i];
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <SPI_TX_MULTI+0x6c>)
 8000b00:	60da      	str	r2, [r3, #12]
	i++;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3301      	adds	r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
while(i<size){
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbeb      	blt.n	8000ae8 <SPI_TX_MULTI+0x10>
}
/*Wait until TXE is set*/
while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000b10:	bf00      	nop
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <SPI_TX_MULTI+0x6c>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0f9      	beq.n	8000b12 <SPI_TX_MULTI+0x3a>

/*Wait for BUSY flag to reset*/
while((SPI1->SR & (SPI_SR_BSY))){}
 8000b1e:	bf00      	nop
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <SPI_TX_MULTI+0x6c>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1f9      	bne.n	8000b20 <SPI_TX_MULTI+0x48>

/*Clear OVR flag*/
temp = SPI1->DR;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <SPI_TX_MULTI+0x6c>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	72fb      	strb	r3, [r7, #11]
temp = SPI1->SR;
 8000b32:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <SPI_TX_MULTI+0x6c>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	72fb      	strb	r3, [r7, #11]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40013000 	.word	0x40013000

08000b48 <SPI_READ_MULTI>:


void SPI_READ_MULTI(uint8_t *data_ptr,int size){
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
	while(size)
 8000b52:	e013      	b.n	8000b7c <SPI_READ_MULTI+0x34>
	{
		/*Send dummy data*/
		SPI1->DR =0;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <SPI_READ_MULTI+0x48>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]

		/*Wait for RXNE flag to be set*/
		while(!(SPI1->SR & (SPI_SR_RXNE))){}
 8000b5a:	bf00      	nop
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <SPI_READ_MULTI+0x48>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f9      	beq.n	8000b5c <SPI_READ_MULTI+0x14>

		/*Read data from data register*/
		*data_ptr++ = (SPI1->DR);
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <SPI_READ_MULTI+0x48>)
 8000b6a:	68d9      	ldr	r1, [r3, #12]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	b2ca      	uxtb	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
		size--;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
	while(size)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1e8      	bne.n	8000b54 <SPI_READ_MULTI+0xc>
	}
}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40013000 	.word	0x40013000

08000b94 <print>:

void SystemClock_Config(void);


void print(uint8_t data[], uint32_t len)
	{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	int i=0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
	while(data[i]){
 8000ba2:	e009      	b.n	8000bb8 <print+0x24>
		putchar(data[i]);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 f887 	bl	8001cc0 <putchar>
		i++;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
	while(data[i]){
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1ef      	bne.n	8000ba4 <print+0x10>
	}
	printf("\n \r");
 8000bc4:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <print+0x40>)
 8000bc6:	f001 f869 	bl	8001c9c <iprintf>
	}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	08002a18 	.word	0x08002a18

08000bd8 <main>:

int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

SystemClock_Config();
 8000bde:	f000 f84d 	bl	8000c7c <SystemClock_Config>
delay(6000);
 8000be2:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000be6:	f7ff fcdb 	bl	80005a0 <delay>
uint8_t RxAddress[] = {0xB3,0xB4,0xB5,0xB6,0x05};
 8000bea:	4a20      	ldr	r2, [pc, #128]	@ (8000c6c <main+0x94>)
 8000bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf4:	6018      	str	r0, [r3, #0]
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	7019      	strb	r1, [r3, #0]
uint8_t RxData[32] ;
uint8_t channel=10;
 8000bfa:	230a      	movs	r3, #10
 8000bfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
usart_init();
 8000c00:	f000 f98a 	bl	8000f18 <usart_init>
NRF_INIT();
 8000c04:	f7ff fe8c 	bl	8000920 <NRF_INIT>
NRF_PRX_CONFIG(RxAddress,channel);
 8000c08:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fdae 	bl	8000774 <NRF_PRX_CONFIG>
printf("\n \rsetting up as PRX \n \r");
 8000c18:	4815      	ldr	r0, [pc, #84]	@ (8000c70 <main+0x98>)
 8000c1a:	f001 f83f 	bl	8001c9c <iprintf>
for(int i=0;i<0x1D;i++){
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c22:	e00d      	b.n	8000c40 <main+0x68>
	printf("\n \r register %x is value %x \n \r",i,NRF_READ_REGISTER(i));
 8000c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd88 	bl	800073e <NRF_READ_REGISTER>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c34:	480f      	ldr	r0, [pc, #60]	@ (8000c74 <main+0x9c>)
 8000c36:	f001 f831 	bl	8001c9c <iprintf>
for(int i=0;i<0x1D;i++){
 8000c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c42:	2b1c      	cmp	r3, #28
 8000c44:	ddee      	ble.n	8000c24 <main+0x4c>
}

while(1){
	if(is_data_on_pipe(1)==1){
 8000c46:	2001      	movs	r0, #1
 8000c48:	f7ff fea5 	bl	8000996 <is_data_on_pipe>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d1f9      	bne.n	8000c46 <main+0x6e>
		printf("\n \r recieved data \n \r");
 8000c52:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <main+0xa0>)
 8000c54:	f001 f822 	bl	8001c9c <iprintf>
		NRF_RECV_DATA(RxData);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff febf 	bl	80009de <NRF_RECV_DATA>
		print(RxData,32);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2120      	movs	r1, #32
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff95 	bl	8000b94 <print>
	if(is_data_on_pipe(1)==1){
 8000c6a:	e7ec      	b.n	8000c46 <main+0x6e>
 8000c6c:	08002a70 	.word	0x08002a70
 8000c70:	08002a1c 	.word	0x08002a1c
 8000c74:	08002a38 	.word	0x08002a38
 8000c78:	08002a58 	.word	0x08002a58

08000c7c <SystemClock_Config>:
	}
}

}
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	@ 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	@ 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 f863 	bl	8001d56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	4a27      	ldr	r2, [pc, #156]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb0:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a21      	ldr	r2, [pc, #132]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cec:	2308      	movs	r3, #8
 8000cee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cf0:	23c0      	movs	r3, #192	@ 0xc0
 8000cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 faa5 	bl	8001250 <HAL_RCC_OscConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d0c:	f000 f820 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d10:	230f      	movs	r3, #15
 8000d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d14:	2302      	movs	r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2103      	movs	r1, #3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fd06 	bl	8001740 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d3a:	f000 f809 	bl	8000d50 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	@ 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <NMI_Handler+0x4>

08000d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <MemManage_Handler+0x4>

08000d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e00a      	b.n	8000dd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc0:	f000 f922 	bl	8001008 <__io_getchar>
 8000dc4:	4601      	mov	r1, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	60ba      	str	r2, [r7, #8]
 8000dcc:	b2ca      	uxtb	r2, r1
 8000dce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dbf0      	blt.n	8000dc0 <_read+0x12>
  }

  return len;
 8000dde:	687b      	ldr	r3, [r7, #4]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e009      	b.n	8000e0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	60ba      	str	r2, [r7, #8]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f8f2 	bl	8000fec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dbf1      	blt.n	8000dfa <_write+0x12>
  }
  return len;
 8000e16:	687b      	ldr	r3, [r7, #4]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_close>:

int _close(int file)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e48:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_isatty>:

int _isatty(int file)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b085      	sub	sp, #20
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	@ (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	@ (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f000 ff9c 	bl	8001df4 <__errno>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <_sbrk+0x64>)
 8000ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20020000 	.word	0x20020000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	20000090 	.word	0x20000090
 8000ef0:	200001e8 	.word	0x200001e8

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <usart_init>:
 *  usart get and put and usart init
 */

#include "usart.h"

void usart_init() {
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <usart_init+0x70>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	4a19      	ldr	r2, [pc, #100]	@ (8000f88 <usart_init+0x70>)
 8000f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f26:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <usart_init+0x70>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	4a16      	ldr	r2, [pc, #88]	@ (8000f88 <usart_init+0x70>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 and PA3 as alternate function
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER2_Pos);
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <usart_init+0x74>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <usart_init+0x74>)
 8000f3a:	f043 0320 	orr.w	r3, r3, #32
 8000f3e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER3_Pos);
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <usart_init+0x74>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a11      	ldr	r2, [pc, #68]	@ (8000f8c <usart_init+0x74>)
 8000f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f4a:	6013      	str	r3, [r2, #0]

    // Set PA2 to USART_TX and PA3 to USART_RX
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos); // TX alternate function
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <usart_init+0x74>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <usart_init+0x74>)
 8000f52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000f56:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL3_Pos); // RX alternate function
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <usart_init+0x74>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f8c <usart_init+0x74>)
 8000f5e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000f62:	6213      	str	r3, [r2, #32]

    // Enable USART, transmitter, and receiver
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <usart_init+0x78>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a09      	ldr	r2, [pc, #36]	@ (8000f90 <usart_init+0x78>)
 8000f6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f6e:	f043 030c 	orr.w	r3, r3, #12
 8000f72:	60d3      	str	r3, [r2, #12]

    // Set baud rate to 9600 (make sure BAUD_9600 is defined based on your clock setup)
    USART2->BRR = BAUD_9600;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <usart_init+0x78>)
 8000f76:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000f7a:	609a      	str	r2, [r3, #8]

    // Test character output to verify USART setup
   // USART2->DR = 'B';
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40004400 	.word	0x40004400

08000f94 <usart_out>:

void usart_out(char ch) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)) {
 8000f9e:	bf00      	nop
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <usart_out+0x2c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f9      	beq.n	8000fa0 <usart_out+0xc>
        // Wait until transmit buffer is empty
    }
    USART2->DR = ch;
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <usart_out+0x2c>)
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	6053      	str	r3, [r2, #4]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <usart_get>:
    while (*string) {
        usart_out(*string++);
    }
}

char usart_get() {
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE)) {
 8000fc8:	bf00      	nop
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <usart_get+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f9      	beq.n	8000fca <usart_get+0x6>
        // Wait until receive buffer is not empty
    }
    return USART2->DR;
 8000fd6:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <usart_get+0x24>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	b2db      	uxtb	r3, r3
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40004400 	.word	0x40004400

08000fec <__io_putchar>:

// Override weak symbols for printf and getchar compatibility
int __io_putchar(int ch) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    usart_out((char)ch); // Send character using USART
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ffcb 	bl	8000f94 <usart_out>
    return ch;           // Return the character for compatibility
 8000ffe:	687b      	ldr	r3, [r7, #4]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <__io_getchar>:

int __io_getchar(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    return usart_get();  // Receive character using USART
 800100c:	f7ff ffda 	bl	8000fc4 <usart_get>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001050 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800101c:	f7ff ff6a 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	@ (8001064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f000 fedb 	bl	8001e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fdc5 	bl	8000bd8 <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800105c:	08002acc 	.word	0x08002acc
  ldr r2, =_sbss
 8001060:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001064:	200001e4 	.word	0x200001e4

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>
	...

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f8d4 	bl	8001238 <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f8aa 	bl	8001200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	@ (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000004 	.word	0x20000004

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	@ (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000094 	.word	0x20000094

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	@ (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	@ 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
         );
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	@ 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011cc:	d301      	bcc.n	80011d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00f      	b.n	80011f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <SysTick_Config+0x40>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011da:	210f      	movs	r1, #15
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f7ff ff8e 	bl	8001100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <SysTick_Config+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <SysTick_Config+0x40>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001212:	f7ff ff67 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001216:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	6978      	ldr	r0, [r7, #20]
 800121e:	f7ff ff99 	bl	8001154 <NVIC_EncodePriority>
 8001222:	4602      	mov	r2, r0
 8001224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff68 	bl	8001100 <__NVIC_SetPriority>
}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffbb 	bl	80011bc <SysTick_Config>
 8001246:	4603      	mov	r3, r0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e267      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d075      	beq.n	800135a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800126e:	4b88      	ldr	r3, [pc, #544]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d00c      	beq.n	8001294 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b85      	ldr	r3, [pc, #532]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001282:	2b08      	cmp	r3, #8
 8001284:	d112      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4b82      	ldr	r3, [pc, #520]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800128e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001292:	d10b      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4b7e      	ldr	r3, [pc, #504]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d05b      	beq.n	8001358 <HAL_RCC_OscConfig+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d157      	bne.n	8001358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e242      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b4:	d106      	bne.n	80012c4 <HAL_RCC_OscConfig+0x74>
 80012b6:	4b76      	ldr	r3, [pc, #472]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a75      	ldr	r2, [pc, #468]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e01d      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b70      	ldr	r3, [pc, #448]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b6d      	ldr	r3, [pc, #436]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a6c      	ldr	r2, [pc, #432]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012e8:	4b69      	ldr	r3, [pc, #420]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a68      	ldr	r2, [pc, #416]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b66      	ldr	r3, [pc, #408]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a65      	ldr	r2, [pc, #404]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fee0 	bl	80010cc <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fedc 	bl	80010cc <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	@ 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e207      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b5b      	ldr	r3, [pc, #364]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0xc0>
 800132e:	e014      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fecc 	bl	80010cc <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fec8 	bl	80010cc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	@ 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e1f3      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	4b51      	ldr	r3, [pc, #324]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0xe8>
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d063      	beq.n	800142e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001366:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800137a:	2b08      	cmp	r3, #8
 800137c:	d11c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b44      	ldr	r3, [pc, #272]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d116      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	4b41      	ldr	r3, [pc, #260]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1c7      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4937      	ldr	r1, [pc, #220]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	e03a      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c0:	4b34      	ldr	r3, [pc, #208]	@ (8001494 <HAL_RCC_OscConfig+0x244>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fe81 	bl	80010cc <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fe7d 	bl	80010cc <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1a8      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4925      	ldr	r1, [pc, #148]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001402:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <HAL_RCC_OscConfig+0x244>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fe60 	bl	80010cc <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fe5c 	bl	80010cc <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e187      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d036      	beq.n	80014a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d016      	beq.n	8001470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_RCC_OscConfig+0x248>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fe40 	bl	80010cc <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fe3c 	bl	80010cc <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e167      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_RCC_OscConfig+0x240>)
 8001464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x200>
 800146e:	e01b      	b.n	80014a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <HAL_RCC_OscConfig+0x248>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fe29 	bl	80010cc <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	e00e      	b.n	800149c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff fe25 	bl	80010cc <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d907      	bls.n	800149c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e150      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
 8001490:	40023800 	.word	0x40023800
 8001494:	42470000 	.word	0x42470000
 8001498:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	4b88      	ldr	r3, [pc, #544]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ea      	bne.n	800147e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 8097 	beq.w	80015e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b81      	ldr	r3, [pc, #516]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b7d      	ldr	r3, [pc, #500]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	4a7c      	ldr	r2, [pc, #496]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d6:	4b7a      	ldr	r3, [pc, #488]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b77      	ldr	r3, [pc, #476]	@ (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b74      	ldr	r3, [pc, #464]	@ (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a73      	ldr	r2, [pc, #460]	@ (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fde5 	bl	80010cc <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff fde1 	bl	80010cc <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e10c      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b6a      	ldr	r3, [pc, #424]	@ (80016c4 <HAL_RCC_OscConfig+0x474>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x2ea>
 800152c:	4b64      	ldr	r3, [pc, #400]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001530:	4a63      	ldr	r2, [pc, #396]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6713      	str	r3, [r2, #112]	@ 0x70
 8001538:	e01c      	b.n	8001574 <HAL_RCC_OscConfig+0x324>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x30c>
 8001542:	4b5f      	ldr	r3, [pc, #380]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001546:	4a5e      	ldr	r2, [pc, #376]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6713      	str	r3, [r2, #112]	@ 0x70
 800154e:	4b5c      	ldr	r3, [pc, #368]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001552:	4a5b      	ldr	r2, [pc, #364]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	@ 0x70
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0x324>
 800155c:	4b58      	ldr	r3, [pc, #352]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001560:	4a57      	ldr	r2, [pc, #348]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	@ 0x70
 8001568:	4b55      	ldr	r3, [pc, #340]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156c:	4a54      	ldr	r2, [pc, #336]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 800156e:	f023 0304 	bic.w	r3, r3, #4
 8001572:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d015      	beq.n	80015a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fda6 	bl	80010cc <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fda2 	bl	80010cc <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e0cb      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	4b49      	ldr	r3, [pc, #292]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0ee      	beq.n	8001584 <HAL_RCC_OscConfig+0x334>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fd90 	bl	80010cc <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fd8c 	bl	80010cc <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e0b5      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c6:	4b3e      	ldr	r3, [pc, #248]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ee      	bne.n	80015b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d8:	4b39      	ldr	r3, [pc, #228]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	4a38      	ldr	r2, [pc, #224]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a1 	beq.w	8001730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ee:	4b34      	ldr	r3, [pc, #208]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d05c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d141      	bne.n	8001686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b31      	ldr	r3, [pc, #196]	@ (80016c8 <HAL_RCC_OscConfig+0x478>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fd60 	bl	80010cc <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fd5c 	bl	80010cc <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e087      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69da      	ldr	r2, [r3, #28]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	3b01      	subs	r3, #1
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001650:	061b      	lsls	r3, r3, #24
 8001652:	491b      	ldr	r1, [pc, #108]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <HAL_RCC_OscConfig+0x478>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fd35 	bl	80010cc <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fd31 	bl	80010cc <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e05c      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x416>
 8001684:	e054      	b.n	8001730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <HAL_RCC_OscConfig+0x478>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fd1e 	bl	80010cc <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff fd1a 	bl	80010cc <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e045      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_RCC_OscConfig+0x470>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x444>
 80016b2:	e03d      	b.n	8001730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e038      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000
 80016c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_RCC_OscConfig+0x4ec>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d028      	beq.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d121      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d11a      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001704:	4293      	cmp	r3, r2
 8001706:	d111      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	3b01      	subs	r3, #1
 8001716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d107      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0cc      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b68      	ldr	r3, [pc, #416]	@ (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d90c      	bls.n	800177c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b65      	ldr	r3, [pc, #404]	@ (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b63      	ldr	r3, [pc, #396]	@ (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b59      	ldr	r3, [pc, #356]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a58      	ldr	r2, [pc, #352]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800179e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b53      	ldr	r3, [pc, #332]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a52      	ldr	r2, [pc, #328]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b50      	ldr	r3, [pc, #320]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494d      	ldr	r1, [pc, #308]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d044      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b47      	ldr	r3, [pc, #284]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d119      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b3f      	ldr	r3, [pc, #252]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3b      	ldr	r3, [pc, #236]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e067      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b37      	ldr	r3, [pc, #220]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4934      	ldr	r1, [pc, #208]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff fc4c 	bl	80010cc <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff fc48 	bl	80010cc <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e04f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d20c      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e032      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4916      	ldr	r1, [pc, #88]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490e      	ldr	r1, [pc, #56]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f821 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	490a      	ldr	r1, [pc, #40]	@ (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a09      	ldr	r2, [pc, #36]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fbc0 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00
 80018fc:	40023800 	.word	0x40023800
 8001900:	08002a78 	.word	0x08002a78
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001910:	b094      	sub	sp, #80	@ 0x50
 8001912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001924:	4b79      	ldr	r3, [pc, #484]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d00d      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x40>
 8001930:	2b08      	cmp	r3, #8
 8001932:	f200 80e1 	bhi.w	8001af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x34>
 800193a:	2b04      	cmp	r3, #4
 800193c:	d003      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x3a>
 800193e:	e0db      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b73      	ldr	r3, [pc, #460]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001942:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001944:	e0db      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001946:	4b73      	ldr	r3, [pc, #460]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800194a:	e0d8      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001954:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001956:	4b6d      	ldr	r3, [pc, #436]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4b6a      	ldr	r3, [pc, #424]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	2200      	movs	r2, #0
 800196a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800196c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800196e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001974:	633b      	str	r3, [r7, #48]	@ 0x30
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	@ 0x34
 800197a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800197e:	4622      	mov	r2, r4
 8001980:	462b      	mov	r3, r5
 8001982:	f04f 0000 	mov.w	r0, #0
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	0159      	lsls	r1, r3, #5
 800198c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001990:	0150      	lsls	r0, r2, #5
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4621      	mov	r1, r4
 8001998:	1a51      	subs	r1, r2, r1
 800199a:	6139      	str	r1, [r7, #16]
 800199c:	4629      	mov	r1, r5
 800199e:	eb63 0301 	sbc.w	r3, r3, r1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b0:	4659      	mov	r1, fp
 80019b2:	018b      	lsls	r3, r1, #6
 80019b4:	4651      	mov	r1, sl
 80019b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ba:	4651      	mov	r1, sl
 80019bc:	018a      	lsls	r2, r1, #6
 80019be:	4651      	mov	r1, sl
 80019c0:	ebb2 0801 	subs.w	r8, r2, r1
 80019c4:	4659      	mov	r1, fp
 80019c6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019de:	4690      	mov	r8, r2
 80019e0:	4699      	mov	r9, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	eb18 0303 	adds.w	r3, r8, r3
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	462b      	mov	r3, r5
 80019ec:	eb49 0303 	adc.w	r3, r9, r3
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019fe:	4629      	mov	r1, r5
 8001a00:	024b      	lsls	r3, r1, #9
 8001a02:	4621      	mov	r1, r4
 8001a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a08:	4621      	mov	r1, r4
 8001a0a:	024a      	lsls	r2, r1, #9
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a12:	2200      	movs	r2, #0
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a1c:	f7fe fc30 	bl	8000280 <__aeabi_uldivmod>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4613      	mov	r3, r2
 8001a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a28:	e058      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b38      	ldr	r3, [pc, #224]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	2200      	movs	r2, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	4611      	mov	r1, r2
 8001a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a44:	4642      	mov	r2, r8
 8001a46:	464b      	mov	r3, r9
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	0159      	lsls	r1, r3, #5
 8001a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a56:	0150      	lsls	r0, r2, #5
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a62:	4649      	mov	r1, r9
 8001a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a80:	eb63 050b 	sbc.w	r5, r3, fp
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	00eb      	lsls	r3, r5, #3
 8001a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a92:	00e2      	lsls	r2, r4, #3
 8001a94:	4614      	mov	r4, r2
 8001a96:	461d      	mov	r5, r3
 8001a98:	4643      	mov	r3, r8
 8001a9a:	18e3      	adds	r3, r4, r3
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	eb45 0303 	adc.w	r3, r5, r3
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	028b      	lsls	r3, r1, #10
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001abc:	4621      	mov	r1, r4
 8001abe:	028a      	lsls	r2, r1, #10
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	61fa      	str	r2, [r7, #28]
 8001acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad0:	f7fe fbd6 	bl	8000280 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001aec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af6:	e002      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3750      	adds	r7, #80	@ 0x50
 8001b04:	46bd      	mov	sp, r7
 8001b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	00f42400 	.word	0x00f42400
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <std>:
 8001b18:	2300      	movs	r3, #0
 8001b1a:	b510      	push	{r4, lr}
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8001b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b26:	6083      	str	r3, [r0, #8]
 8001b28:	8181      	strh	r1, [r0, #12]
 8001b2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001b2c:	81c2      	strh	r2, [r0, #14]
 8001b2e:	6183      	str	r3, [r0, #24]
 8001b30:	4619      	mov	r1, r3
 8001b32:	2208      	movs	r2, #8
 8001b34:	305c      	adds	r0, #92	@ 0x5c
 8001b36:	f000 f90e 	bl	8001d56 <memset>
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <std+0x58>)
 8001b3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <std+0x5c>)
 8001b40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001b42:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <std+0x60>)
 8001b44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <std+0x64>)
 8001b48:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <std+0x68>)
 8001b4c:	6224      	str	r4, [r4, #32]
 8001b4e:	429c      	cmp	r4, r3
 8001b50:	d006      	beq.n	8001b60 <std+0x48>
 8001b52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001b56:	4294      	cmp	r4, r2
 8001b58:	d002      	beq.n	8001b60 <std+0x48>
 8001b5a:	33d0      	adds	r3, #208	@ 0xd0
 8001b5c:	429c      	cmp	r4, r3
 8001b5e:	d105      	bne.n	8001b6c <std+0x54>
 8001b60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b68:	f000 b96e 	b.w	8001e48 <__retarget_lock_init_recursive>
 8001b6c:	bd10      	pop	{r4, pc}
 8001b6e:	bf00      	nop
 8001b70:	08001cd1 	.word	0x08001cd1
 8001b74:	08001cf3 	.word	0x08001cf3
 8001b78:	08001d2b 	.word	0x08001d2b
 8001b7c:	08001d4f 	.word	0x08001d4f
 8001b80:	20000098 	.word	0x20000098

08001b84 <stdio_exit_handler>:
 8001b84:	4a02      	ldr	r2, [pc, #8]	@ (8001b90 <stdio_exit_handler+0xc>)
 8001b86:	4903      	ldr	r1, [pc, #12]	@ (8001b94 <stdio_exit_handler+0x10>)
 8001b88:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <stdio_exit_handler+0x14>)
 8001b8a:	f000 b869 	b.w	8001c60 <_fwalk_sglue>
 8001b8e:	bf00      	nop
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	080026e9 	.word	0x080026e9
 8001b98:	2000001c 	.word	0x2000001c

08001b9c <cleanup_stdio>:
 8001b9c:	6841      	ldr	r1, [r0, #4]
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <cleanup_stdio+0x34>)
 8001ba0:	4299      	cmp	r1, r3
 8001ba2:	b510      	push	{r4, lr}
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	d001      	beq.n	8001bac <cleanup_stdio+0x10>
 8001ba8:	f000 fd9e 	bl	80026e8 <_fflush_r>
 8001bac:	68a1      	ldr	r1, [r4, #8]
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <cleanup_stdio+0x38>)
 8001bb0:	4299      	cmp	r1, r3
 8001bb2:	d002      	beq.n	8001bba <cleanup_stdio+0x1e>
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f000 fd97 	bl	80026e8 <_fflush_r>
 8001bba:	68e1      	ldr	r1, [r4, #12]
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <cleanup_stdio+0x3c>)
 8001bbe:	4299      	cmp	r1, r3
 8001bc0:	d004      	beq.n	8001bcc <cleanup_stdio+0x30>
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bc8:	f000 bd8e 	b.w	80026e8 <_fflush_r>
 8001bcc:	bd10      	pop	{r4, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000098 	.word	0x20000098
 8001bd4:	20000100 	.word	0x20000100
 8001bd8:	20000168 	.word	0x20000168

08001bdc <global_stdio_init.part.0>:
 8001bdc:	b510      	push	{r4, lr}
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <global_stdio_init.part.0+0x30>)
 8001be0:	4c0b      	ldr	r4, [pc, #44]	@ (8001c10 <global_stdio_init.part.0+0x34>)
 8001be2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c14 <global_stdio_init.part.0+0x38>)
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	4620      	mov	r0, r4
 8001be8:	2200      	movs	r2, #0
 8001bea:	2104      	movs	r1, #4
 8001bec:	f7ff ff94 	bl	8001b18 <std>
 8001bf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2109      	movs	r1, #9
 8001bf8:	f7ff ff8e 	bl	8001b18 <std>
 8001bfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001c00:	2202      	movs	r2, #2
 8001c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c06:	2112      	movs	r1, #18
 8001c08:	f7ff bf86 	b.w	8001b18 <std>
 8001c0c:	200001d0 	.word	0x200001d0
 8001c10:	20000098 	.word	0x20000098
 8001c14:	08001b85 	.word	0x08001b85

08001c18 <__sfp_lock_acquire>:
 8001c18:	4801      	ldr	r0, [pc, #4]	@ (8001c20 <__sfp_lock_acquire+0x8>)
 8001c1a:	f000 b916 	b.w	8001e4a <__retarget_lock_acquire_recursive>
 8001c1e:	bf00      	nop
 8001c20:	200001d9 	.word	0x200001d9

08001c24 <__sfp_lock_release>:
 8001c24:	4801      	ldr	r0, [pc, #4]	@ (8001c2c <__sfp_lock_release+0x8>)
 8001c26:	f000 b911 	b.w	8001e4c <__retarget_lock_release_recursive>
 8001c2a:	bf00      	nop
 8001c2c:	200001d9 	.word	0x200001d9

08001c30 <__sinit>:
 8001c30:	b510      	push	{r4, lr}
 8001c32:	4604      	mov	r4, r0
 8001c34:	f7ff fff0 	bl	8001c18 <__sfp_lock_acquire>
 8001c38:	6a23      	ldr	r3, [r4, #32]
 8001c3a:	b11b      	cbz	r3, 8001c44 <__sinit+0x14>
 8001c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c40:	f7ff bff0 	b.w	8001c24 <__sfp_lock_release>
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <__sinit+0x28>)
 8001c46:	6223      	str	r3, [r4, #32]
 8001c48:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <__sinit+0x2c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f5      	bne.n	8001c3c <__sinit+0xc>
 8001c50:	f7ff ffc4 	bl	8001bdc <global_stdio_init.part.0>
 8001c54:	e7f2      	b.n	8001c3c <__sinit+0xc>
 8001c56:	bf00      	nop
 8001c58:	08001b9d 	.word	0x08001b9d
 8001c5c:	200001d0 	.word	0x200001d0

08001c60 <_fwalk_sglue>:
 8001c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c64:	4607      	mov	r7, r0
 8001c66:	4688      	mov	r8, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	2600      	movs	r6, #0
 8001c6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c70:	f1b9 0901 	subs.w	r9, r9, #1
 8001c74:	d505      	bpl.n	8001c82 <_fwalk_sglue+0x22>
 8001c76:	6824      	ldr	r4, [r4, #0]
 8001c78:	2c00      	cmp	r4, #0
 8001c7a:	d1f7      	bne.n	8001c6c <_fwalk_sglue+0xc>
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c82:	89ab      	ldrh	r3, [r5, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d907      	bls.n	8001c98 <_fwalk_sglue+0x38>
 8001c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	d003      	beq.n	8001c98 <_fwalk_sglue+0x38>
 8001c90:	4629      	mov	r1, r5
 8001c92:	4638      	mov	r0, r7
 8001c94:	47c0      	blx	r8
 8001c96:	4306      	orrs	r6, r0
 8001c98:	3568      	adds	r5, #104	@ 0x68
 8001c9a:	e7e9      	b.n	8001c70 <_fwalk_sglue+0x10>

08001c9c <iprintf>:
 8001c9c:	b40f      	push	{r0, r1, r2, r3}
 8001c9e:	b507      	push	{r0, r1, r2, lr}
 8001ca0:	4906      	ldr	r1, [pc, #24]	@ (8001cbc <iprintf+0x20>)
 8001ca2:	ab04      	add	r3, sp, #16
 8001ca4:	6808      	ldr	r0, [r1, #0]
 8001ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001caa:	6881      	ldr	r1, [r0, #8]
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	f000 f9f1 	bl	8002094 <_vfiprintf_r>
 8001cb2:	b003      	add	sp, #12
 8001cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001cb8:	b004      	add	sp, #16
 8001cba:	4770      	bx	lr
 8001cbc:	20000018 	.word	0x20000018

08001cc0 <putchar>:
 8001cc0:	4b02      	ldr	r3, [pc, #8]	@ (8001ccc <putchar+0xc>)
 8001cc2:	4601      	mov	r1, r0
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	6882      	ldr	r2, [r0, #8]
 8001cc8:	f000 bd36 	b.w	8002738 <_putc_r>
 8001ccc:	20000018 	.word	0x20000018

08001cd0 <__sread>:
 8001cd0:	b510      	push	{r4, lr}
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cd8:	f000 f868 	bl	8001dac <_read_r>
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	bfab      	itete	ge
 8001ce0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8001ce4:	181b      	addge	r3, r3, r0
 8001ce6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001cea:	bfac      	ite	ge
 8001cec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001cee:	81a3      	strhlt	r3, [r4, #12]
 8001cf0:	bd10      	pop	{r4, pc}

08001cf2 <__swrite>:
 8001cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf6:	461f      	mov	r7, r3
 8001cf8:	898b      	ldrh	r3, [r1, #12]
 8001cfa:	05db      	lsls	r3, r3, #23
 8001cfc:	4605      	mov	r5, r0
 8001cfe:	460c      	mov	r4, r1
 8001d00:	4616      	mov	r6, r2
 8001d02:	d505      	bpl.n	8001d10 <__swrite+0x1e>
 8001d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f000 f83c 	bl	8001d88 <_lseek_r>
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d1a:	81a3      	strh	r3, [r4, #12]
 8001d1c:	4632      	mov	r2, r6
 8001d1e:	463b      	mov	r3, r7
 8001d20:	4628      	mov	r0, r5
 8001d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d26:	f000 b853 	b.w	8001dd0 <_write_r>

08001d2a <__sseek>:
 8001d2a:	b510      	push	{r4, lr}
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d32:	f000 f829 	bl	8001d88 <_lseek_r>
 8001d36:	1c43      	adds	r3, r0, #1
 8001d38:	89a3      	ldrh	r3, [r4, #12]
 8001d3a:	bf15      	itete	ne
 8001d3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001d3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001d42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001d46:	81a3      	strheq	r3, [r4, #12]
 8001d48:	bf18      	it	ne
 8001d4a:	81a3      	strhne	r3, [r4, #12]
 8001d4c:	bd10      	pop	{r4, pc}

08001d4e <__sclose>:
 8001d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d52:	f000 b809 	b.w	8001d68 <_close_r>

08001d56 <memset>:
 8001d56:	4402      	add	r2, r0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d100      	bne.n	8001d60 <memset+0xa>
 8001d5e:	4770      	bx	lr
 8001d60:	f803 1b01 	strb.w	r1, [r3], #1
 8001d64:	e7f9      	b.n	8001d5a <memset+0x4>
	...

08001d68 <_close_r>:
 8001d68:	b538      	push	{r3, r4, r5, lr}
 8001d6a:	4d06      	ldr	r5, [pc, #24]	@ (8001d84 <_close_r+0x1c>)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	4604      	mov	r4, r0
 8001d70:	4608      	mov	r0, r1
 8001d72:	602b      	str	r3, [r5, #0]
 8001d74:	f7ff f854 	bl	8000e20 <_close>
 8001d78:	1c43      	adds	r3, r0, #1
 8001d7a:	d102      	bne.n	8001d82 <_close_r+0x1a>
 8001d7c:	682b      	ldr	r3, [r5, #0]
 8001d7e:	b103      	cbz	r3, 8001d82 <_close_r+0x1a>
 8001d80:	6023      	str	r3, [r4, #0]
 8001d82:	bd38      	pop	{r3, r4, r5, pc}
 8001d84:	200001d4 	.word	0x200001d4

08001d88 <_lseek_r>:
 8001d88:	b538      	push	{r3, r4, r5, lr}
 8001d8a:	4d07      	ldr	r5, [pc, #28]	@ (8001da8 <_lseek_r+0x20>)
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	4608      	mov	r0, r1
 8001d90:	4611      	mov	r1, r2
 8001d92:	2200      	movs	r2, #0
 8001d94:	602a      	str	r2, [r5, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f7ff f869 	bl	8000e6e <_lseek>
 8001d9c:	1c43      	adds	r3, r0, #1
 8001d9e:	d102      	bne.n	8001da6 <_lseek_r+0x1e>
 8001da0:	682b      	ldr	r3, [r5, #0]
 8001da2:	b103      	cbz	r3, 8001da6 <_lseek_r+0x1e>
 8001da4:	6023      	str	r3, [r4, #0]
 8001da6:	bd38      	pop	{r3, r4, r5, pc}
 8001da8:	200001d4 	.word	0x200001d4

08001dac <_read_r>:
 8001dac:	b538      	push	{r3, r4, r5, lr}
 8001dae:	4d07      	ldr	r5, [pc, #28]	@ (8001dcc <_read_r+0x20>)
 8001db0:	4604      	mov	r4, r0
 8001db2:	4608      	mov	r0, r1
 8001db4:	4611      	mov	r1, r2
 8001db6:	2200      	movs	r2, #0
 8001db8:	602a      	str	r2, [r5, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f7fe fff7 	bl	8000dae <_read>
 8001dc0:	1c43      	adds	r3, r0, #1
 8001dc2:	d102      	bne.n	8001dca <_read_r+0x1e>
 8001dc4:	682b      	ldr	r3, [r5, #0]
 8001dc6:	b103      	cbz	r3, 8001dca <_read_r+0x1e>
 8001dc8:	6023      	str	r3, [r4, #0]
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
 8001dcc:	200001d4 	.word	0x200001d4

08001dd0 <_write_r>:
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	4d07      	ldr	r5, [pc, #28]	@ (8001df0 <_write_r+0x20>)
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	4608      	mov	r0, r1
 8001dd8:	4611      	mov	r1, r2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	602a      	str	r2, [r5, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	f7ff f802 	bl	8000de8 <_write>
 8001de4:	1c43      	adds	r3, r0, #1
 8001de6:	d102      	bne.n	8001dee <_write_r+0x1e>
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	b103      	cbz	r3, 8001dee <_write_r+0x1e>
 8001dec:	6023      	str	r3, [r4, #0]
 8001dee:	bd38      	pop	{r3, r4, r5, pc}
 8001df0:	200001d4 	.word	0x200001d4

08001df4 <__errno>:
 8001df4:	4b01      	ldr	r3, [pc, #4]	@ (8001dfc <__errno+0x8>)
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000018 	.word	0x20000018

08001e00 <__libc_init_array>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	4d0d      	ldr	r5, [pc, #52]	@ (8001e38 <__libc_init_array+0x38>)
 8001e04:	4c0d      	ldr	r4, [pc, #52]	@ (8001e3c <__libc_init_array+0x3c>)
 8001e06:	1b64      	subs	r4, r4, r5
 8001e08:	10a4      	asrs	r4, r4, #2
 8001e0a:	2600      	movs	r6, #0
 8001e0c:	42a6      	cmp	r6, r4
 8001e0e:	d109      	bne.n	8001e24 <__libc_init_array+0x24>
 8001e10:	4d0b      	ldr	r5, [pc, #44]	@ (8001e40 <__libc_init_array+0x40>)
 8001e12:	4c0c      	ldr	r4, [pc, #48]	@ (8001e44 <__libc_init_array+0x44>)
 8001e14:	f000 fdec 	bl	80029f0 <_init>
 8001e18:	1b64      	subs	r4, r4, r5
 8001e1a:	10a4      	asrs	r4, r4, #2
 8001e1c:	2600      	movs	r6, #0
 8001e1e:	42a6      	cmp	r6, r4
 8001e20:	d105      	bne.n	8001e2e <__libc_init_array+0x2e>
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
 8001e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e28:	4798      	blx	r3
 8001e2a:	3601      	adds	r6, #1
 8001e2c:	e7ee      	b.n	8001e0c <__libc_init_array+0xc>
 8001e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e32:	4798      	blx	r3
 8001e34:	3601      	adds	r6, #1
 8001e36:	e7f2      	b.n	8001e1e <__libc_init_array+0x1e>
 8001e38:	08002ac4 	.word	0x08002ac4
 8001e3c:	08002ac4 	.word	0x08002ac4
 8001e40:	08002ac4 	.word	0x08002ac4
 8001e44:	08002ac8 	.word	0x08002ac8

08001e48 <__retarget_lock_init_recursive>:
 8001e48:	4770      	bx	lr

08001e4a <__retarget_lock_acquire_recursive>:
 8001e4a:	4770      	bx	lr

08001e4c <__retarget_lock_release_recursive>:
 8001e4c:	4770      	bx	lr
	...

08001e50 <_free_r>:
 8001e50:	b538      	push	{r3, r4, r5, lr}
 8001e52:	4605      	mov	r5, r0
 8001e54:	2900      	cmp	r1, #0
 8001e56:	d041      	beq.n	8001edc <_free_r+0x8c>
 8001e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e5c:	1f0c      	subs	r4, r1, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bfb8      	it	lt
 8001e62:	18e4      	addlt	r4, r4, r3
 8001e64:	f000 f8e0 	bl	8002028 <__malloc_lock>
 8001e68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee0 <_free_r+0x90>)
 8001e6a:	6813      	ldr	r3, [r2, #0]
 8001e6c:	b933      	cbnz	r3, 8001e7c <_free_r+0x2c>
 8001e6e:	6063      	str	r3, [r4, #4]
 8001e70:	6014      	str	r4, [r2, #0]
 8001e72:	4628      	mov	r0, r5
 8001e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e78:	f000 b8dc 	b.w	8002034 <__malloc_unlock>
 8001e7c:	42a3      	cmp	r3, r4
 8001e7e:	d908      	bls.n	8001e92 <_free_r+0x42>
 8001e80:	6820      	ldr	r0, [r4, #0]
 8001e82:	1821      	adds	r1, r4, r0
 8001e84:	428b      	cmp	r3, r1
 8001e86:	bf01      	itttt	eq
 8001e88:	6819      	ldreq	r1, [r3, #0]
 8001e8a:	685b      	ldreq	r3, [r3, #4]
 8001e8c:	1809      	addeq	r1, r1, r0
 8001e8e:	6021      	streq	r1, [r4, #0]
 8001e90:	e7ed      	b.n	8001e6e <_free_r+0x1e>
 8001e92:	461a      	mov	r2, r3
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	b10b      	cbz	r3, 8001e9c <_free_r+0x4c>
 8001e98:	42a3      	cmp	r3, r4
 8001e9a:	d9fa      	bls.n	8001e92 <_free_r+0x42>
 8001e9c:	6811      	ldr	r1, [r2, #0]
 8001e9e:	1850      	adds	r0, r2, r1
 8001ea0:	42a0      	cmp	r0, r4
 8001ea2:	d10b      	bne.n	8001ebc <_free_r+0x6c>
 8001ea4:	6820      	ldr	r0, [r4, #0]
 8001ea6:	4401      	add	r1, r0
 8001ea8:	1850      	adds	r0, r2, r1
 8001eaa:	4283      	cmp	r3, r0
 8001eac:	6011      	str	r1, [r2, #0]
 8001eae:	d1e0      	bne.n	8001e72 <_free_r+0x22>
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	6053      	str	r3, [r2, #4]
 8001eb6:	4408      	add	r0, r1
 8001eb8:	6010      	str	r0, [r2, #0]
 8001eba:	e7da      	b.n	8001e72 <_free_r+0x22>
 8001ebc:	d902      	bls.n	8001ec4 <_free_r+0x74>
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	602b      	str	r3, [r5, #0]
 8001ec2:	e7d6      	b.n	8001e72 <_free_r+0x22>
 8001ec4:	6820      	ldr	r0, [r4, #0]
 8001ec6:	1821      	adds	r1, r4, r0
 8001ec8:	428b      	cmp	r3, r1
 8001eca:	bf04      	itt	eq
 8001ecc:	6819      	ldreq	r1, [r3, #0]
 8001ece:	685b      	ldreq	r3, [r3, #4]
 8001ed0:	6063      	str	r3, [r4, #4]
 8001ed2:	bf04      	itt	eq
 8001ed4:	1809      	addeq	r1, r1, r0
 8001ed6:	6021      	streq	r1, [r4, #0]
 8001ed8:	6054      	str	r4, [r2, #4]
 8001eda:	e7ca      	b.n	8001e72 <_free_r+0x22>
 8001edc:	bd38      	pop	{r3, r4, r5, pc}
 8001ede:	bf00      	nop
 8001ee0:	200001e0 	.word	0x200001e0

08001ee4 <sbrk_aligned>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	4e0f      	ldr	r6, [pc, #60]	@ (8001f24 <sbrk_aligned+0x40>)
 8001ee8:	460c      	mov	r4, r1
 8001eea:	6831      	ldr	r1, [r6, #0]
 8001eec:	4605      	mov	r5, r0
 8001eee:	b911      	cbnz	r1, 8001ef6 <sbrk_aligned+0x12>
 8001ef0:	f000 fcea 	bl	80028c8 <_sbrk_r>
 8001ef4:	6030      	str	r0, [r6, #0]
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	4628      	mov	r0, r5
 8001efa:	f000 fce5 	bl	80028c8 <_sbrk_r>
 8001efe:	1c43      	adds	r3, r0, #1
 8001f00:	d103      	bne.n	8001f0a <sbrk_aligned+0x26>
 8001f02:	f04f 34ff 	mov.w	r4, #4294967295
 8001f06:	4620      	mov	r0, r4
 8001f08:	bd70      	pop	{r4, r5, r6, pc}
 8001f0a:	1cc4      	adds	r4, r0, #3
 8001f0c:	f024 0403 	bic.w	r4, r4, #3
 8001f10:	42a0      	cmp	r0, r4
 8001f12:	d0f8      	beq.n	8001f06 <sbrk_aligned+0x22>
 8001f14:	1a21      	subs	r1, r4, r0
 8001f16:	4628      	mov	r0, r5
 8001f18:	f000 fcd6 	bl	80028c8 <_sbrk_r>
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	d1f2      	bne.n	8001f06 <sbrk_aligned+0x22>
 8001f20:	e7ef      	b.n	8001f02 <sbrk_aligned+0x1e>
 8001f22:	bf00      	nop
 8001f24:	200001dc 	.word	0x200001dc

08001f28 <_malloc_r>:
 8001f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f2c:	1ccd      	adds	r5, r1, #3
 8001f2e:	f025 0503 	bic.w	r5, r5, #3
 8001f32:	3508      	adds	r5, #8
 8001f34:	2d0c      	cmp	r5, #12
 8001f36:	bf38      	it	cc
 8001f38:	250c      	movcc	r5, #12
 8001f3a:	2d00      	cmp	r5, #0
 8001f3c:	4606      	mov	r6, r0
 8001f3e:	db01      	blt.n	8001f44 <_malloc_r+0x1c>
 8001f40:	42a9      	cmp	r1, r5
 8001f42:	d904      	bls.n	8001f4e <_malloc_r+0x26>
 8001f44:	230c      	movs	r3, #12
 8001f46:	6033      	str	r3, [r6, #0]
 8001f48:	2000      	movs	r0, #0
 8001f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002024 <_malloc_r+0xfc>
 8001f52:	f000 f869 	bl	8002028 <__malloc_lock>
 8001f56:	f8d8 3000 	ldr.w	r3, [r8]
 8001f5a:	461c      	mov	r4, r3
 8001f5c:	bb44      	cbnz	r4, 8001fb0 <_malloc_r+0x88>
 8001f5e:	4629      	mov	r1, r5
 8001f60:	4630      	mov	r0, r6
 8001f62:	f7ff ffbf 	bl	8001ee4 <sbrk_aligned>
 8001f66:	1c43      	adds	r3, r0, #1
 8001f68:	4604      	mov	r4, r0
 8001f6a:	d158      	bne.n	800201e <_malloc_r+0xf6>
 8001f6c:	f8d8 4000 	ldr.w	r4, [r8]
 8001f70:	4627      	mov	r7, r4
 8001f72:	2f00      	cmp	r7, #0
 8001f74:	d143      	bne.n	8001ffe <_malloc_r+0xd6>
 8001f76:	2c00      	cmp	r4, #0
 8001f78:	d04b      	beq.n	8002012 <_malloc_r+0xea>
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	4639      	mov	r1, r7
 8001f7e:	4630      	mov	r0, r6
 8001f80:	eb04 0903 	add.w	r9, r4, r3
 8001f84:	f000 fca0 	bl	80028c8 <_sbrk_r>
 8001f88:	4581      	cmp	r9, r0
 8001f8a:	d142      	bne.n	8002012 <_malloc_r+0xea>
 8001f8c:	6821      	ldr	r1, [r4, #0]
 8001f8e:	1a6d      	subs	r5, r5, r1
 8001f90:	4629      	mov	r1, r5
 8001f92:	4630      	mov	r0, r6
 8001f94:	f7ff ffa6 	bl	8001ee4 <sbrk_aligned>
 8001f98:	3001      	adds	r0, #1
 8001f9a:	d03a      	beq.n	8002012 <_malloc_r+0xea>
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	442b      	add	r3, r5
 8001fa0:	6023      	str	r3, [r4, #0]
 8001fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	bb62      	cbnz	r2, 8002004 <_malloc_r+0xdc>
 8001faa:	f8c8 7000 	str.w	r7, [r8]
 8001fae:	e00f      	b.n	8001fd0 <_malloc_r+0xa8>
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	1b52      	subs	r2, r2, r5
 8001fb4:	d420      	bmi.n	8001ff8 <_malloc_r+0xd0>
 8001fb6:	2a0b      	cmp	r2, #11
 8001fb8:	d917      	bls.n	8001fea <_malloc_r+0xc2>
 8001fba:	1961      	adds	r1, r4, r5
 8001fbc:	42a3      	cmp	r3, r4
 8001fbe:	6025      	str	r5, [r4, #0]
 8001fc0:	bf18      	it	ne
 8001fc2:	6059      	strne	r1, [r3, #4]
 8001fc4:	6863      	ldr	r3, [r4, #4]
 8001fc6:	bf08      	it	eq
 8001fc8:	f8c8 1000 	streq.w	r1, [r8]
 8001fcc:	5162      	str	r2, [r4, r5]
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	4630      	mov	r0, r6
 8001fd2:	f000 f82f 	bl	8002034 <__malloc_unlock>
 8001fd6:	f104 000b 	add.w	r0, r4, #11
 8001fda:	1d23      	adds	r3, r4, #4
 8001fdc:	f020 0007 	bic.w	r0, r0, #7
 8001fe0:	1ac2      	subs	r2, r0, r3
 8001fe2:	bf1c      	itt	ne
 8001fe4:	1a1b      	subne	r3, r3, r0
 8001fe6:	50a3      	strne	r3, [r4, r2]
 8001fe8:	e7af      	b.n	8001f4a <_malloc_r+0x22>
 8001fea:	6862      	ldr	r2, [r4, #4]
 8001fec:	42a3      	cmp	r3, r4
 8001fee:	bf0c      	ite	eq
 8001ff0:	f8c8 2000 	streq.w	r2, [r8]
 8001ff4:	605a      	strne	r2, [r3, #4]
 8001ff6:	e7eb      	b.n	8001fd0 <_malloc_r+0xa8>
 8001ff8:	4623      	mov	r3, r4
 8001ffa:	6864      	ldr	r4, [r4, #4]
 8001ffc:	e7ae      	b.n	8001f5c <_malloc_r+0x34>
 8001ffe:	463c      	mov	r4, r7
 8002000:	687f      	ldr	r7, [r7, #4]
 8002002:	e7b6      	b.n	8001f72 <_malloc_r+0x4a>
 8002004:	461a      	mov	r2, r3
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	42a3      	cmp	r3, r4
 800200a:	d1fb      	bne.n	8002004 <_malloc_r+0xdc>
 800200c:	2300      	movs	r3, #0
 800200e:	6053      	str	r3, [r2, #4]
 8002010:	e7de      	b.n	8001fd0 <_malloc_r+0xa8>
 8002012:	230c      	movs	r3, #12
 8002014:	6033      	str	r3, [r6, #0]
 8002016:	4630      	mov	r0, r6
 8002018:	f000 f80c 	bl	8002034 <__malloc_unlock>
 800201c:	e794      	b.n	8001f48 <_malloc_r+0x20>
 800201e:	6005      	str	r5, [r0, #0]
 8002020:	e7d6      	b.n	8001fd0 <_malloc_r+0xa8>
 8002022:	bf00      	nop
 8002024:	200001e0 	.word	0x200001e0

08002028 <__malloc_lock>:
 8002028:	4801      	ldr	r0, [pc, #4]	@ (8002030 <__malloc_lock+0x8>)
 800202a:	f7ff bf0e 	b.w	8001e4a <__retarget_lock_acquire_recursive>
 800202e:	bf00      	nop
 8002030:	200001d8 	.word	0x200001d8

08002034 <__malloc_unlock>:
 8002034:	4801      	ldr	r0, [pc, #4]	@ (800203c <__malloc_unlock+0x8>)
 8002036:	f7ff bf09 	b.w	8001e4c <__retarget_lock_release_recursive>
 800203a:	bf00      	nop
 800203c:	200001d8 	.word	0x200001d8

08002040 <__sfputc_r>:
 8002040:	6893      	ldr	r3, [r2, #8]
 8002042:	3b01      	subs	r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	b410      	push	{r4}
 8002048:	6093      	str	r3, [r2, #8]
 800204a:	da08      	bge.n	800205e <__sfputc_r+0x1e>
 800204c:	6994      	ldr	r4, [r2, #24]
 800204e:	42a3      	cmp	r3, r4
 8002050:	db01      	blt.n	8002056 <__sfputc_r+0x16>
 8002052:	290a      	cmp	r1, #10
 8002054:	d103      	bne.n	800205e <__sfputc_r+0x1e>
 8002056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800205a:	f000 bba1 	b.w	80027a0 <__swbuf_r>
 800205e:	6813      	ldr	r3, [r2, #0]
 8002060:	1c58      	adds	r0, r3, #1
 8002062:	6010      	str	r0, [r2, #0]
 8002064:	7019      	strb	r1, [r3, #0]
 8002066:	4608      	mov	r0, r1
 8002068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800206c:	4770      	bx	lr

0800206e <__sfputs_r>:
 800206e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002070:	4606      	mov	r6, r0
 8002072:	460f      	mov	r7, r1
 8002074:	4614      	mov	r4, r2
 8002076:	18d5      	adds	r5, r2, r3
 8002078:	42ac      	cmp	r4, r5
 800207a:	d101      	bne.n	8002080 <__sfputs_r+0x12>
 800207c:	2000      	movs	r0, #0
 800207e:	e007      	b.n	8002090 <__sfputs_r+0x22>
 8002080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002084:	463a      	mov	r2, r7
 8002086:	4630      	mov	r0, r6
 8002088:	f7ff ffda 	bl	8002040 <__sfputc_r>
 800208c:	1c43      	adds	r3, r0, #1
 800208e:	d1f3      	bne.n	8002078 <__sfputs_r+0xa>
 8002090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002094 <_vfiprintf_r>:
 8002094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002098:	460d      	mov	r5, r1
 800209a:	b09d      	sub	sp, #116	@ 0x74
 800209c:	4614      	mov	r4, r2
 800209e:	4698      	mov	r8, r3
 80020a0:	4606      	mov	r6, r0
 80020a2:	b118      	cbz	r0, 80020ac <_vfiprintf_r+0x18>
 80020a4:	6a03      	ldr	r3, [r0, #32]
 80020a6:	b90b      	cbnz	r3, 80020ac <_vfiprintf_r+0x18>
 80020a8:	f7ff fdc2 	bl	8001c30 <__sinit>
 80020ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020ae:	07d9      	lsls	r1, r3, #31
 80020b0:	d405      	bmi.n	80020be <_vfiprintf_r+0x2a>
 80020b2:	89ab      	ldrh	r3, [r5, #12]
 80020b4:	059a      	lsls	r2, r3, #22
 80020b6:	d402      	bmi.n	80020be <_vfiprintf_r+0x2a>
 80020b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020ba:	f7ff fec6 	bl	8001e4a <__retarget_lock_acquire_recursive>
 80020be:	89ab      	ldrh	r3, [r5, #12]
 80020c0:	071b      	lsls	r3, r3, #28
 80020c2:	d501      	bpl.n	80020c8 <_vfiprintf_r+0x34>
 80020c4:	692b      	ldr	r3, [r5, #16]
 80020c6:	b99b      	cbnz	r3, 80020f0 <_vfiprintf_r+0x5c>
 80020c8:	4629      	mov	r1, r5
 80020ca:	4630      	mov	r0, r6
 80020cc:	f000 fba6 	bl	800281c <__swsetup_r>
 80020d0:	b170      	cbz	r0, 80020f0 <_vfiprintf_r+0x5c>
 80020d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020d4:	07dc      	lsls	r4, r3, #31
 80020d6:	d504      	bpl.n	80020e2 <_vfiprintf_r+0x4e>
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	b01d      	add	sp, #116	@ 0x74
 80020de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e2:	89ab      	ldrh	r3, [r5, #12]
 80020e4:	0598      	lsls	r0, r3, #22
 80020e6:	d4f7      	bmi.n	80020d8 <_vfiprintf_r+0x44>
 80020e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020ea:	f7ff feaf 	bl	8001e4c <__retarget_lock_release_recursive>
 80020ee:	e7f3      	b.n	80020d8 <_vfiprintf_r+0x44>
 80020f0:	2300      	movs	r3, #0
 80020f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80020f4:	2320      	movs	r3, #32
 80020f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80020fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80020fe:	2330      	movs	r3, #48	@ 0x30
 8002100:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80022b0 <_vfiprintf_r+0x21c>
 8002104:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002108:	f04f 0901 	mov.w	r9, #1
 800210c:	4623      	mov	r3, r4
 800210e:	469a      	mov	sl, r3
 8002110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002114:	b10a      	cbz	r2, 800211a <_vfiprintf_r+0x86>
 8002116:	2a25      	cmp	r2, #37	@ 0x25
 8002118:	d1f9      	bne.n	800210e <_vfiprintf_r+0x7a>
 800211a:	ebba 0b04 	subs.w	fp, sl, r4
 800211e:	d00b      	beq.n	8002138 <_vfiprintf_r+0xa4>
 8002120:	465b      	mov	r3, fp
 8002122:	4622      	mov	r2, r4
 8002124:	4629      	mov	r1, r5
 8002126:	4630      	mov	r0, r6
 8002128:	f7ff ffa1 	bl	800206e <__sfputs_r>
 800212c:	3001      	adds	r0, #1
 800212e:	f000 80a7 	beq.w	8002280 <_vfiprintf_r+0x1ec>
 8002132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002134:	445a      	add	r2, fp
 8002136:	9209      	str	r2, [sp, #36]	@ 0x24
 8002138:	f89a 3000 	ldrb.w	r3, [sl]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 809f 	beq.w	8002280 <_vfiprintf_r+0x1ec>
 8002142:	2300      	movs	r3, #0
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800214c:	f10a 0a01 	add.w	sl, sl, #1
 8002150:	9304      	str	r3, [sp, #16]
 8002152:	9307      	str	r3, [sp, #28]
 8002154:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002158:	931a      	str	r3, [sp, #104]	@ 0x68
 800215a:	4654      	mov	r4, sl
 800215c:	2205      	movs	r2, #5
 800215e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002162:	4853      	ldr	r0, [pc, #332]	@ (80022b0 <_vfiprintf_r+0x21c>)
 8002164:	f7fe f83c 	bl	80001e0 <memchr>
 8002168:	9a04      	ldr	r2, [sp, #16]
 800216a:	b9d8      	cbnz	r0, 80021a4 <_vfiprintf_r+0x110>
 800216c:	06d1      	lsls	r1, r2, #27
 800216e:	bf44      	itt	mi
 8002170:	2320      	movmi	r3, #32
 8002172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002176:	0713      	lsls	r3, r2, #28
 8002178:	bf44      	itt	mi
 800217a:	232b      	movmi	r3, #43	@ 0x2b
 800217c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002180:	f89a 3000 	ldrb.w	r3, [sl]
 8002184:	2b2a      	cmp	r3, #42	@ 0x2a
 8002186:	d015      	beq.n	80021b4 <_vfiprintf_r+0x120>
 8002188:	9a07      	ldr	r2, [sp, #28]
 800218a:	4654      	mov	r4, sl
 800218c:	2000      	movs	r0, #0
 800218e:	f04f 0c0a 	mov.w	ip, #10
 8002192:	4621      	mov	r1, r4
 8002194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002198:	3b30      	subs	r3, #48	@ 0x30
 800219a:	2b09      	cmp	r3, #9
 800219c:	d94b      	bls.n	8002236 <_vfiprintf_r+0x1a2>
 800219e:	b1b0      	cbz	r0, 80021ce <_vfiprintf_r+0x13a>
 80021a0:	9207      	str	r2, [sp, #28]
 80021a2:	e014      	b.n	80021ce <_vfiprintf_r+0x13a>
 80021a4:	eba0 0308 	sub.w	r3, r0, r8
 80021a8:	fa09 f303 	lsl.w	r3, r9, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	9304      	str	r3, [sp, #16]
 80021b0:	46a2      	mov	sl, r4
 80021b2:	e7d2      	b.n	800215a <_vfiprintf_r+0xc6>
 80021b4:	9b03      	ldr	r3, [sp, #12]
 80021b6:	1d19      	adds	r1, r3, #4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	9103      	str	r1, [sp, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bfbb      	ittet	lt
 80021c0:	425b      	neglt	r3, r3
 80021c2:	f042 0202 	orrlt.w	r2, r2, #2
 80021c6:	9307      	strge	r3, [sp, #28]
 80021c8:	9307      	strlt	r3, [sp, #28]
 80021ca:	bfb8      	it	lt
 80021cc:	9204      	strlt	r2, [sp, #16]
 80021ce:	7823      	ldrb	r3, [r4, #0]
 80021d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80021d2:	d10a      	bne.n	80021ea <_vfiprintf_r+0x156>
 80021d4:	7863      	ldrb	r3, [r4, #1]
 80021d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80021d8:	d132      	bne.n	8002240 <_vfiprintf_r+0x1ac>
 80021da:	9b03      	ldr	r3, [sp, #12]
 80021dc:	1d1a      	adds	r2, r3, #4
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	9203      	str	r2, [sp, #12]
 80021e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80021e6:	3402      	adds	r4, #2
 80021e8:	9305      	str	r3, [sp, #20]
 80021ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80022c0 <_vfiprintf_r+0x22c>
 80021ee:	7821      	ldrb	r1, [r4, #0]
 80021f0:	2203      	movs	r2, #3
 80021f2:	4650      	mov	r0, sl
 80021f4:	f7fd fff4 	bl	80001e0 <memchr>
 80021f8:	b138      	cbz	r0, 800220a <_vfiprintf_r+0x176>
 80021fa:	9b04      	ldr	r3, [sp, #16]
 80021fc:	eba0 000a 	sub.w	r0, r0, sl
 8002200:	2240      	movs	r2, #64	@ 0x40
 8002202:	4082      	lsls	r2, r0
 8002204:	4313      	orrs	r3, r2
 8002206:	3401      	adds	r4, #1
 8002208:	9304      	str	r3, [sp, #16]
 800220a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800220e:	4829      	ldr	r0, [pc, #164]	@ (80022b4 <_vfiprintf_r+0x220>)
 8002210:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002214:	2206      	movs	r2, #6
 8002216:	f7fd ffe3 	bl	80001e0 <memchr>
 800221a:	2800      	cmp	r0, #0
 800221c:	d03f      	beq.n	800229e <_vfiprintf_r+0x20a>
 800221e:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <_vfiprintf_r+0x224>)
 8002220:	bb1b      	cbnz	r3, 800226a <_vfiprintf_r+0x1d6>
 8002222:	9b03      	ldr	r3, [sp, #12]
 8002224:	3307      	adds	r3, #7
 8002226:	f023 0307 	bic.w	r3, r3, #7
 800222a:	3308      	adds	r3, #8
 800222c:	9303      	str	r3, [sp, #12]
 800222e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002230:	443b      	add	r3, r7
 8002232:	9309      	str	r3, [sp, #36]	@ 0x24
 8002234:	e76a      	b.n	800210c <_vfiprintf_r+0x78>
 8002236:	fb0c 3202 	mla	r2, ip, r2, r3
 800223a:	460c      	mov	r4, r1
 800223c:	2001      	movs	r0, #1
 800223e:	e7a8      	b.n	8002192 <_vfiprintf_r+0xfe>
 8002240:	2300      	movs	r3, #0
 8002242:	3401      	adds	r4, #1
 8002244:	9305      	str	r3, [sp, #20]
 8002246:	4619      	mov	r1, r3
 8002248:	f04f 0c0a 	mov.w	ip, #10
 800224c:	4620      	mov	r0, r4
 800224e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002252:	3a30      	subs	r2, #48	@ 0x30
 8002254:	2a09      	cmp	r2, #9
 8002256:	d903      	bls.n	8002260 <_vfiprintf_r+0x1cc>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0c6      	beq.n	80021ea <_vfiprintf_r+0x156>
 800225c:	9105      	str	r1, [sp, #20]
 800225e:	e7c4      	b.n	80021ea <_vfiprintf_r+0x156>
 8002260:	fb0c 2101 	mla	r1, ip, r1, r2
 8002264:	4604      	mov	r4, r0
 8002266:	2301      	movs	r3, #1
 8002268:	e7f0      	b.n	800224c <_vfiprintf_r+0x1b8>
 800226a:	ab03      	add	r3, sp, #12
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	462a      	mov	r2, r5
 8002270:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <_vfiprintf_r+0x228>)
 8002272:	a904      	add	r1, sp, #16
 8002274:	4630      	mov	r0, r6
 8002276:	f3af 8000 	nop.w
 800227a:	4607      	mov	r7, r0
 800227c:	1c78      	adds	r0, r7, #1
 800227e:	d1d6      	bne.n	800222e <_vfiprintf_r+0x19a>
 8002280:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002282:	07d9      	lsls	r1, r3, #31
 8002284:	d405      	bmi.n	8002292 <_vfiprintf_r+0x1fe>
 8002286:	89ab      	ldrh	r3, [r5, #12]
 8002288:	059a      	lsls	r2, r3, #22
 800228a:	d402      	bmi.n	8002292 <_vfiprintf_r+0x1fe>
 800228c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800228e:	f7ff fddd 	bl	8001e4c <__retarget_lock_release_recursive>
 8002292:	89ab      	ldrh	r3, [r5, #12]
 8002294:	065b      	lsls	r3, r3, #25
 8002296:	f53f af1f 	bmi.w	80020d8 <_vfiprintf_r+0x44>
 800229a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800229c:	e71e      	b.n	80020dc <_vfiprintf_r+0x48>
 800229e:	ab03      	add	r3, sp, #12
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	462a      	mov	r2, r5
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <_vfiprintf_r+0x228>)
 80022a6:	a904      	add	r1, sp, #16
 80022a8:	4630      	mov	r0, r6
 80022aa:	f000 f879 	bl	80023a0 <_printf_i>
 80022ae:	e7e4      	b.n	800227a <_vfiprintf_r+0x1e6>
 80022b0:	08002a88 	.word	0x08002a88
 80022b4:	08002a92 	.word	0x08002a92
 80022b8:	00000000 	.word	0x00000000
 80022bc:	0800206f 	.word	0x0800206f
 80022c0:	08002a8e 	.word	0x08002a8e

080022c4 <_printf_common>:
 80022c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c8:	4616      	mov	r6, r2
 80022ca:	4698      	mov	r8, r3
 80022cc:	688a      	ldr	r2, [r1, #8]
 80022ce:	690b      	ldr	r3, [r1, #16]
 80022d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80022d4:	4293      	cmp	r3, r2
 80022d6:	bfb8      	it	lt
 80022d8:	4613      	movlt	r3, r2
 80022da:	6033      	str	r3, [r6, #0]
 80022dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80022e0:	4607      	mov	r7, r0
 80022e2:	460c      	mov	r4, r1
 80022e4:	b10a      	cbz	r2, 80022ea <_printf_common+0x26>
 80022e6:	3301      	adds	r3, #1
 80022e8:	6033      	str	r3, [r6, #0]
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	0699      	lsls	r1, r3, #26
 80022ee:	bf42      	ittt	mi
 80022f0:	6833      	ldrmi	r3, [r6, #0]
 80022f2:	3302      	addmi	r3, #2
 80022f4:	6033      	strmi	r3, [r6, #0]
 80022f6:	6825      	ldr	r5, [r4, #0]
 80022f8:	f015 0506 	ands.w	r5, r5, #6
 80022fc:	d106      	bne.n	800230c <_printf_common+0x48>
 80022fe:	f104 0a19 	add.w	sl, r4, #25
 8002302:	68e3      	ldr	r3, [r4, #12]
 8002304:	6832      	ldr	r2, [r6, #0]
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	42ab      	cmp	r3, r5
 800230a:	dc26      	bgt.n	800235a <_printf_common+0x96>
 800230c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	3b00      	subs	r3, #0
 8002314:	bf18      	it	ne
 8002316:	2301      	movne	r3, #1
 8002318:	0692      	lsls	r2, r2, #26
 800231a:	d42b      	bmi.n	8002374 <_printf_common+0xb0>
 800231c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002320:	4641      	mov	r1, r8
 8002322:	4638      	mov	r0, r7
 8002324:	47c8      	blx	r9
 8002326:	3001      	adds	r0, #1
 8002328:	d01e      	beq.n	8002368 <_printf_common+0xa4>
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	6922      	ldr	r2, [r4, #16]
 800232e:	f003 0306 	and.w	r3, r3, #6
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf02      	ittt	eq
 8002336:	68e5      	ldreq	r5, [r4, #12]
 8002338:	6833      	ldreq	r3, [r6, #0]
 800233a:	1aed      	subeq	r5, r5, r3
 800233c:	68a3      	ldr	r3, [r4, #8]
 800233e:	bf0c      	ite	eq
 8002340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002344:	2500      	movne	r5, #0
 8002346:	4293      	cmp	r3, r2
 8002348:	bfc4      	itt	gt
 800234a:	1a9b      	subgt	r3, r3, r2
 800234c:	18ed      	addgt	r5, r5, r3
 800234e:	2600      	movs	r6, #0
 8002350:	341a      	adds	r4, #26
 8002352:	42b5      	cmp	r5, r6
 8002354:	d11a      	bne.n	800238c <_printf_common+0xc8>
 8002356:	2000      	movs	r0, #0
 8002358:	e008      	b.n	800236c <_printf_common+0xa8>
 800235a:	2301      	movs	r3, #1
 800235c:	4652      	mov	r2, sl
 800235e:	4641      	mov	r1, r8
 8002360:	4638      	mov	r0, r7
 8002362:	47c8      	blx	r9
 8002364:	3001      	adds	r0, #1
 8002366:	d103      	bne.n	8002370 <_printf_common+0xac>
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002370:	3501      	adds	r5, #1
 8002372:	e7c6      	b.n	8002302 <_printf_common+0x3e>
 8002374:	18e1      	adds	r1, r4, r3
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	2030      	movs	r0, #48	@ 0x30
 800237a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800237e:	4422      	add	r2, r4
 8002380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002388:	3302      	adds	r3, #2
 800238a:	e7c7      	b.n	800231c <_printf_common+0x58>
 800238c:	2301      	movs	r3, #1
 800238e:	4622      	mov	r2, r4
 8002390:	4641      	mov	r1, r8
 8002392:	4638      	mov	r0, r7
 8002394:	47c8      	blx	r9
 8002396:	3001      	adds	r0, #1
 8002398:	d0e6      	beq.n	8002368 <_printf_common+0xa4>
 800239a:	3601      	adds	r6, #1
 800239c:	e7d9      	b.n	8002352 <_printf_common+0x8e>
	...

080023a0 <_printf_i>:
 80023a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023a4:	7e0f      	ldrb	r7, [r1, #24]
 80023a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80023a8:	2f78      	cmp	r7, #120	@ 0x78
 80023aa:	4691      	mov	r9, r2
 80023ac:	4680      	mov	r8, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	469a      	mov	sl, r3
 80023b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80023b6:	d807      	bhi.n	80023c8 <_printf_i+0x28>
 80023b8:	2f62      	cmp	r7, #98	@ 0x62
 80023ba:	d80a      	bhi.n	80023d2 <_printf_i+0x32>
 80023bc:	2f00      	cmp	r7, #0
 80023be:	f000 80d2 	beq.w	8002566 <_printf_i+0x1c6>
 80023c2:	2f58      	cmp	r7, #88	@ 0x58
 80023c4:	f000 80b9 	beq.w	800253a <_printf_i+0x19a>
 80023c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80023cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80023d0:	e03a      	b.n	8002448 <_printf_i+0xa8>
 80023d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80023d6:	2b15      	cmp	r3, #21
 80023d8:	d8f6      	bhi.n	80023c8 <_printf_i+0x28>
 80023da:	a101      	add	r1, pc, #4	@ (adr r1, 80023e0 <_printf_i+0x40>)
 80023dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023e0:	08002439 	.word	0x08002439
 80023e4:	0800244d 	.word	0x0800244d
 80023e8:	080023c9 	.word	0x080023c9
 80023ec:	080023c9 	.word	0x080023c9
 80023f0:	080023c9 	.word	0x080023c9
 80023f4:	080023c9 	.word	0x080023c9
 80023f8:	0800244d 	.word	0x0800244d
 80023fc:	080023c9 	.word	0x080023c9
 8002400:	080023c9 	.word	0x080023c9
 8002404:	080023c9 	.word	0x080023c9
 8002408:	080023c9 	.word	0x080023c9
 800240c:	0800254d 	.word	0x0800254d
 8002410:	08002477 	.word	0x08002477
 8002414:	08002507 	.word	0x08002507
 8002418:	080023c9 	.word	0x080023c9
 800241c:	080023c9 	.word	0x080023c9
 8002420:	0800256f 	.word	0x0800256f
 8002424:	080023c9 	.word	0x080023c9
 8002428:	08002477 	.word	0x08002477
 800242c:	080023c9 	.word	0x080023c9
 8002430:	080023c9 	.word	0x080023c9
 8002434:	0800250f 	.word	0x0800250f
 8002438:	6833      	ldr	r3, [r6, #0]
 800243a:	1d1a      	adds	r2, r3, #4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6032      	str	r2, [r6, #0]
 8002440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002448:	2301      	movs	r3, #1
 800244a:	e09d      	b.n	8002588 <_printf_i+0x1e8>
 800244c:	6833      	ldr	r3, [r6, #0]
 800244e:	6820      	ldr	r0, [r4, #0]
 8002450:	1d19      	adds	r1, r3, #4
 8002452:	6031      	str	r1, [r6, #0]
 8002454:	0606      	lsls	r6, r0, #24
 8002456:	d501      	bpl.n	800245c <_printf_i+0xbc>
 8002458:	681d      	ldr	r5, [r3, #0]
 800245a:	e003      	b.n	8002464 <_printf_i+0xc4>
 800245c:	0645      	lsls	r5, r0, #25
 800245e:	d5fb      	bpl.n	8002458 <_printf_i+0xb8>
 8002460:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002464:	2d00      	cmp	r5, #0
 8002466:	da03      	bge.n	8002470 <_printf_i+0xd0>
 8002468:	232d      	movs	r3, #45	@ 0x2d
 800246a:	426d      	negs	r5, r5
 800246c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002470:	4859      	ldr	r0, [pc, #356]	@ (80025d8 <_printf_i+0x238>)
 8002472:	230a      	movs	r3, #10
 8002474:	e011      	b.n	800249a <_printf_i+0xfa>
 8002476:	6821      	ldr	r1, [r4, #0]
 8002478:	6833      	ldr	r3, [r6, #0]
 800247a:	0608      	lsls	r0, r1, #24
 800247c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002480:	d402      	bmi.n	8002488 <_printf_i+0xe8>
 8002482:	0649      	lsls	r1, r1, #25
 8002484:	bf48      	it	mi
 8002486:	b2ad      	uxthmi	r5, r5
 8002488:	2f6f      	cmp	r7, #111	@ 0x6f
 800248a:	4853      	ldr	r0, [pc, #332]	@ (80025d8 <_printf_i+0x238>)
 800248c:	6033      	str	r3, [r6, #0]
 800248e:	bf14      	ite	ne
 8002490:	230a      	movne	r3, #10
 8002492:	2308      	moveq	r3, #8
 8002494:	2100      	movs	r1, #0
 8002496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800249a:	6866      	ldr	r6, [r4, #4]
 800249c:	60a6      	str	r6, [r4, #8]
 800249e:	2e00      	cmp	r6, #0
 80024a0:	bfa2      	ittt	ge
 80024a2:	6821      	ldrge	r1, [r4, #0]
 80024a4:	f021 0104 	bicge.w	r1, r1, #4
 80024a8:	6021      	strge	r1, [r4, #0]
 80024aa:	b90d      	cbnz	r5, 80024b0 <_printf_i+0x110>
 80024ac:	2e00      	cmp	r6, #0
 80024ae:	d04b      	beq.n	8002548 <_printf_i+0x1a8>
 80024b0:	4616      	mov	r6, r2
 80024b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80024b6:	fb03 5711 	mls	r7, r3, r1, r5
 80024ba:	5dc7      	ldrb	r7, [r0, r7]
 80024bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80024c0:	462f      	mov	r7, r5
 80024c2:	42bb      	cmp	r3, r7
 80024c4:	460d      	mov	r5, r1
 80024c6:	d9f4      	bls.n	80024b2 <_printf_i+0x112>
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d10b      	bne.n	80024e4 <_printf_i+0x144>
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	07df      	lsls	r7, r3, #31
 80024d0:	d508      	bpl.n	80024e4 <_printf_i+0x144>
 80024d2:	6923      	ldr	r3, [r4, #16]
 80024d4:	6861      	ldr	r1, [r4, #4]
 80024d6:	4299      	cmp	r1, r3
 80024d8:	bfde      	ittt	le
 80024da:	2330      	movle	r3, #48	@ 0x30
 80024dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80024e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80024e4:	1b92      	subs	r2, r2, r6
 80024e6:	6122      	str	r2, [r4, #16]
 80024e8:	f8cd a000 	str.w	sl, [sp]
 80024ec:	464b      	mov	r3, r9
 80024ee:	aa03      	add	r2, sp, #12
 80024f0:	4621      	mov	r1, r4
 80024f2:	4640      	mov	r0, r8
 80024f4:	f7ff fee6 	bl	80022c4 <_printf_common>
 80024f8:	3001      	adds	r0, #1
 80024fa:	d14a      	bne.n	8002592 <_printf_i+0x1f2>
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	b004      	add	sp, #16
 8002502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	f043 0320 	orr.w	r3, r3, #32
 800250c:	6023      	str	r3, [r4, #0]
 800250e:	4833      	ldr	r0, [pc, #204]	@ (80025dc <_printf_i+0x23c>)
 8002510:	2778      	movs	r7, #120	@ 0x78
 8002512:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	6831      	ldr	r1, [r6, #0]
 800251a:	061f      	lsls	r7, r3, #24
 800251c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002520:	d402      	bmi.n	8002528 <_printf_i+0x188>
 8002522:	065f      	lsls	r7, r3, #25
 8002524:	bf48      	it	mi
 8002526:	b2ad      	uxthmi	r5, r5
 8002528:	6031      	str	r1, [r6, #0]
 800252a:	07d9      	lsls	r1, r3, #31
 800252c:	bf44      	itt	mi
 800252e:	f043 0320 	orrmi.w	r3, r3, #32
 8002532:	6023      	strmi	r3, [r4, #0]
 8002534:	b11d      	cbz	r5, 800253e <_printf_i+0x19e>
 8002536:	2310      	movs	r3, #16
 8002538:	e7ac      	b.n	8002494 <_printf_i+0xf4>
 800253a:	4827      	ldr	r0, [pc, #156]	@ (80025d8 <_printf_i+0x238>)
 800253c:	e7e9      	b.n	8002512 <_printf_i+0x172>
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	f023 0320 	bic.w	r3, r3, #32
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	e7f6      	b.n	8002536 <_printf_i+0x196>
 8002548:	4616      	mov	r6, r2
 800254a:	e7bd      	b.n	80024c8 <_printf_i+0x128>
 800254c:	6833      	ldr	r3, [r6, #0]
 800254e:	6825      	ldr	r5, [r4, #0]
 8002550:	6961      	ldr	r1, [r4, #20]
 8002552:	1d18      	adds	r0, r3, #4
 8002554:	6030      	str	r0, [r6, #0]
 8002556:	062e      	lsls	r6, r5, #24
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	d501      	bpl.n	8002560 <_printf_i+0x1c0>
 800255c:	6019      	str	r1, [r3, #0]
 800255e:	e002      	b.n	8002566 <_printf_i+0x1c6>
 8002560:	0668      	lsls	r0, r5, #25
 8002562:	d5fb      	bpl.n	800255c <_printf_i+0x1bc>
 8002564:	8019      	strh	r1, [r3, #0]
 8002566:	2300      	movs	r3, #0
 8002568:	6123      	str	r3, [r4, #16]
 800256a:	4616      	mov	r6, r2
 800256c:	e7bc      	b.n	80024e8 <_printf_i+0x148>
 800256e:	6833      	ldr	r3, [r6, #0]
 8002570:	1d1a      	adds	r2, r3, #4
 8002572:	6032      	str	r2, [r6, #0]
 8002574:	681e      	ldr	r6, [r3, #0]
 8002576:	6862      	ldr	r2, [r4, #4]
 8002578:	2100      	movs	r1, #0
 800257a:	4630      	mov	r0, r6
 800257c:	f7fd fe30 	bl	80001e0 <memchr>
 8002580:	b108      	cbz	r0, 8002586 <_printf_i+0x1e6>
 8002582:	1b80      	subs	r0, r0, r6
 8002584:	6060      	str	r0, [r4, #4]
 8002586:	6863      	ldr	r3, [r4, #4]
 8002588:	6123      	str	r3, [r4, #16]
 800258a:	2300      	movs	r3, #0
 800258c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002590:	e7aa      	b.n	80024e8 <_printf_i+0x148>
 8002592:	6923      	ldr	r3, [r4, #16]
 8002594:	4632      	mov	r2, r6
 8002596:	4649      	mov	r1, r9
 8002598:	4640      	mov	r0, r8
 800259a:	47d0      	blx	sl
 800259c:	3001      	adds	r0, #1
 800259e:	d0ad      	beq.n	80024fc <_printf_i+0x15c>
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	079b      	lsls	r3, r3, #30
 80025a4:	d413      	bmi.n	80025ce <_printf_i+0x22e>
 80025a6:	68e0      	ldr	r0, [r4, #12]
 80025a8:	9b03      	ldr	r3, [sp, #12]
 80025aa:	4298      	cmp	r0, r3
 80025ac:	bfb8      	it	lt
 80025ae:	4618      	movlt	r0, r3
 80025b0:	e7a6      	b.n	8002500 <_printf_i+0x160>
 80025b2:	2301      	movs	r3, #1
 80025b4:	4632      	mov	r2, r6
 80025b6:	4649      	mov	r1, r9
 80025b8:	4640      	mov	r0, r8
 80025ba:	47d0      	blx	sl
 80025bc:	3001      	adds	r0, #1
 80025be:	d09d      	beq.n	80024fc <_printf_i+0x15c>
 80025c0:	3501      	adds	r5, #1
 80025c2:	68e3      	ldr	r3, [r4, #12]
 80025c4:	9903      	ldr	r1, [sp, #12]
 80025c6:	1a5b      	subs	r3, r3, r1
 80025c8:	42ab      	cmp	r3, r5
 80025ca:	dcf2      	bgt.n	80025b2 <_printf_i+0x212>
 80025cc:	e7eb      	b.n	80025a6 <_printf_i+0x206>
 80025ce:	2500      	movs	r5, #0
 80025d0:	f104 0619 	add.w	r6, r4, #25
 80025d4:	e7f5      	b.n	80025c2 <_printf_i+0x222>
 80025d6:	bf00      	nop
 80025d8:	08002a99 	.word	0x08002a99
 80025dc:	08002aaa 	.word	0x08002aaa

080025e0 <__sflush_r>:
 80025e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80025e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e8:	0716      	lsls	r6, r2, #28
 80025ea:	4605      	mov	r5, r0
 80025ec:	460c      	mov	r4, r1
 80025ee:	d454      	bmi.n	800269a <__sflush_r+0xba>
 80025f0:	684b      	ldr	r3, [r1, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	dc02      	bgt.n	80025fc <__sflush_r+0x1c>
 80025f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	dd48      	ble.n	800268e <__sflush_r+0xae>
 80025fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80025fe:	2e00      	cmp	r6, #0
 8002600:	d045      	beq.n	800268e <__sflush_r+0xae>
 8002602:	2300      	movs	r3, #0
 8002604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002608:	682f      	ldr	r7, [r5, #0]
 800260a:	6a21      	ldr	r1, [r4, #32]
 800260c:	602b      	str	r3, [r5, #0]
 800260e:	d030      	beq.n	8002672 <__sflush_r+0x92>
 8002610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002612:	89a3      	ldrh	r3, [r4, #12]
 8002614:	0759      	lsls	r1, r3, #29
 8002616:	d505      	bpl.n	8002624 <__sflush_r+0x44>
 8002618:	6863      	ldr	r3, [r4, #4]
 800261a:	1ad2      	subs	r2, r2, r3
 800261c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800261e:	b10b      	cbz	r3, 8002624 <__sflush_r+0x44>
 8002620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002622:	1ad2      	subs	r2, r2, r3
 8002624:	2300      	movs	r3, #0
 8002626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002628:	6a21      	ldr	r1, [r4, #32]
 800262a:	4628      	mov	r0, r5
 800262c:	47b0      	blx	r6
 800262e:	1c43      	adds	r3, r0, #1
 8002630:	89a3      	ldrh	r3, [r4, #12]
 8002632:	d106      	bne.n	8002642 <__sflush_r+0x62>
 8002634:	6829      	ldr	r1, [r5, #0]
 8002636:	291d      	cmp	r1, #29
 8002638:	d82b      	bhi.n	8002692 <__sflush_r+0xb2>
 800263a:	4a2a      	ldr	r2, [pc, #168]	@ (80026e4 <__sflush_r+0x104>)
 800263c:	410a      	asrs	r2, r1
 800263e:	07d6      	lsls	r6, r2, #31
 8002640:	d427      	bmi.n	8002692 <__sflush_r+0xb2>
 8002642:	2200      	movs	r2, #0
 8002644:	6062      	str	r2, [r4, #4]
 8002646:	04d9      	lsls	r1, r3, #19
 8002648:	6922      	ldr	r2, [r4, #16]
 800264a:	6022      	str	r2, [r4, #0]
 800264c:	d504      	bpl.n	8002658 <__sflush_r+0x78>
 800264e:	1c42      	adds	r2, r0, #1
 8002650:	d101      	bne.n	8002656 <__sflush_r+0x76>
 8002652:	682b      	ldr	r3, [r5, #0]
 8002654:	b903      	cbnz	r3, 8002658 <__sflush_r+0x78>
 8002656:	6560      	str	r0, [r4, #84]	@ 0x54
 8002658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800265a:	602f      	str	r7, [r5, #0]
 800265c:	b1b9      	cbz	r1, 800268e <__sflush_r+0xae>
 800265e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002662:	4299      	cmp	r1, r3
 8002664:	d002      	beq.n	800266c <__sflush_r+0x8c>
 8002666:	4628      	mov	r0, r5
 8002668:	f7ff fbf2 	bl	8001e50 <_free_r>
 800266c:	2300      	movs	r3, #0
 800266e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002670:	e00d      	b.n	800268e <__sflush_r+0xae>
 8002672:	2301      	movs	r3, #1
 8002674:	4628      	mov	r0, r5
 8002676:	47b0      	blx	r6
 8002678:	4602      	mov	r2, r0
 800267a:	1c50      	adds	r0, r2, #1
 800267c:	d1c9      	bne.n	8002612 <__sflush_r+0x32>
 800267e:	682b      	ldr	r3, [r5, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0c6      	beq.n	8002612 <__sflush_r+0x32>
 8002684:	2b1d      	cmp	r3, #29
 8002686:	d001      	beq.n	800268c <__sflush_r+0xac>
 8002688:	2b16      	cmp	r3, #22
 800268a:	d11e      	bne.n	80026ca <__sflush_r+0xea>
 800268c:	602f      	str	r7, [r5, #0]
 800268e:	2000      	movs	r0, #0
 8002690:	e022      	b.n	80026d8 <__sflush_r+0xf8>
 8002692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002696:	b21b      	sxth	r3, r3
 8002698:	e01b      	b.n	80026d2 <__sflush_r+0xf2>
 800269a:	690f      	ldr	r7, [r1, #16]
 800269c:	2f00      	cmp	r7, #0
 800269e:	d0f6      	beq.n	800268e <__sflush_r+0xae>
 80026a0:	0793      	lsls	r3, r2, #30
 80026a2:	680e      	ldr	r6, [r1, #0]
 80026a4:	bf08      	it	eq
 80026a6:	694b      	ldreq	r3, [r1, #20]
 80026a8:	600f      	str	r7, [r1, #0]
 80026aa:	bf18      	it	ne
 80026ac:	2300      	movne	r3, #0
 80026ae:	eba6 0807 	sub.w	r8, r6, r7
 80026b2:	608b      	str	r3, [r1, #8]
 80026b4:	f1b8 0f00 	cmp.w	r8, #0
 80026b8:	dde9      	ble.n	800268e <__sflush_r+0xae>
 80026ba:	6a21      	ldr	r1, [r4, #32]
 80026bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80026be:	4643      	mov	r3, r8
 80026c0:	463a      	mov	r2, r7
 80026c2:	4628      	mov	r0, r5
 80026c4:	47b0      	blx	r6
 80026c6:	2800      	cmp	r0, #0
 80026c8:	dc08      	bgt.n	80026dc <__sflush_r+0xfc>
 80026ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026d2:	81a3      	strh	r3, [r4, #12]
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026dc:	4407      	add	r7, r0
 80026de:	eba8 0800 	sub.w	r8, r8, r0
 80026e2:	e7e7      	b.n	80026b4 <__sflush_r+0xd4>
 80026e4:	dfbffffe 	.word	0xdfbffffe

080026e8 <_fflush_r>:
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	690b      	ldr	r3, [r1, #16]
 80026ec:	4605      	mov	r5, r0
 80026ee:	460c      	mov	r4, r1
 80026f0:	b913      	cbnz	r3, 80026f8 <_fflush_r+0x10>
 80026f2:	2500      	movs	r5, #0
 80026f4:	4628      	mov	r0, r5
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	b118      	cbz	r0, 8002702 <_fflush_r+0x1a>
 80026fa:	6a03      	ldr	r3, [r0, #32]
 80026fc:	b90b      	cbnz	r3, 8002702 <_fflush_r+0x1a>
 80026fe:	f7ff fa97 	bl	8001c30 <__sinit>
 8002702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f3      	beq.n	80026f2 <_fflush_r+0xa>
 800270a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800270c:	07d0      	lsls	r0, r2, #31
 800270e:	d404      	bmi.n	800271a <_fflush_r+0x32>
 8002710:	0599      	lsls	r1, r3, #22
 8002712:	d402      	bmi.n	800271a <_fflush_r+0x32>
 8002714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002716:	f7ff fb98 	bl	8001e4a <__retarget_lock_acquire_recursive>
 800271a:	4628      	mov	r0, r5
 800271c:	4621      	mov	r1, r4
 800271e:	f7ff ff5f 	bl	80025e0 <__sflush_r>
 8002722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002724:	07da      	lsls	r2, r3, #31
 8002726:	4605      	mov	r5, r0
 8002728:	d4e4      	bmi.n	80026f4 <_fflush_r+0xc>
 800272a:	89a3      	ldrh	r3, [r4, #12]
 800272c:	059b      	lsls	r3, r3, #22
 800272e:	d4e1      	bmi.n	80026f4 <_fflush_r+0xc>
 8002730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002732:	f7ff fb8b 	bl	8001e4c <__retarget_lock_release_recursive>
 8002736:	e7dd      	b.n	80026f4 <_fflush_r+0xc>

08002738 <_putc_r>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	460d      	mov	r5, r1
 800273c:	4614      	mov	r4, r2
 800273e:	4606      	mov	r6, r0
 8002740:	b118      	cbz	r0, 800274a <_putc_r+0x12>
 8002742:	6a03      	ldr	r3, [r0, #32]
 8002744:	b90b      	cbnz	r3, 800274a <_putc_r+0x12>
 8002746:	f7ff fa73 	bl	8001c30 <__sinit>
 800274a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800274c:	07d8      	lsls	r0, r3, #31
 800274e:	d405      	bmi.n	800275c <_putc_r+0x24>
 8002750:	89a3      	ldrh	r3, [r4, #12]
 8002752:	0599      	lsls	r1, r3, #22
 8002754:	d402      	bmi.n	800275c <_putc_r+0x24>
 8002756:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002758:	f7ff fb77 	bl	8001e4a <__retarget_lock_acquire_recursive>
 800275c:	68a3      	ldr	r3, [r4, #8]
 800275e:	3b01      	subs	r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	60a3      	str	r3, [r4, #8]
 8002764:	da05      	bge.n	8002772 <_putc_r+0x3a>
 8002766:	69a2      	ldr	r2, [r4, #24]
 8002768:	4293      	cmp	r3, r2
 800276a:	db12      	blt.n	8002792 <_putc_r+0x5a>
 800276c:	b2eb      	uxtb	r3, r5
 800276e:	2b0a      	cmp	r3, #10
 8002770:	d00f      	beq.n	8002792 <_putc_r+0x5a>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	6022      	str	r2, [r4, #0]
 8002778:	701d      	strb	r5, [r3, #0]
 800277a:	b2ed      	uxtb	r5, r5
 800277c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800277e:	07da      	lsls	r2, r3, #31
 8002780:	d405      	bmi.n	800278e <_putc_r+0x56>
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	059b      	lsls	r3, r3, #22
 8002786:	d402      	bmi.n	800278e <_putc_r+0x56>
 8002788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800278a:	f7ff fb5f 	bl	8001e4c <__retarget_lock_release_recursive>
 800278e:	4628      	mov	r0, r5
 8002790:	bd70      	pop	{r4, r5, r6, pc}
 8002792:	4629      	mov	r1, r5
 8002794:	4622      	mov	r2, r4
 8002796:	4630      	mov	r0, r6
 8002798:	f000 f802 	bl	80027a0 <__swbuf_r>
 800279c:	4605      	mov	r5, r0
 800279e:	e7ed      	b.n	800277c <_putc_r+0x44>

080027a0 <__swbuf_r>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	460e      	mov	r6, r1
 80027a4:	4614      	mov	r4, r2
 80027a6:	4605      	mov	r5, r0
 80027a8:	b118      	cbz	r0, 80027b2 <__swbuf_r+0x12>
 80027aa:	6a03      	ldr	r3, [r0, #32]
 80027ac:	b90b      	cbnz	r3, 80027b2 <__swbuf_r+0x12>
 80027ae:	f7ff fa3f 	bl	8001c30 <__sinit>
 80027b2:	69a3      	ldr	r3, [r4, #24]
 80027b4:	60a3      	str	r3, [r4, #8]
 80027b6:	89a3      	ldrh	r3, [r4, #12]
 80027b8:	071a      	lsls	r2, r3, #28
 80027ba:	d501      	bpl.n	80027c0 <__swbuf_r+0x20>
 80027bc:	6923      	ldr	r3, [r4, #16]
 80027be:	b943      	cbnz	r3, 80027d2 <__swbuf_r+0x32>
 80027c0:	4621      	mov	r1, r4
 80027c2:	4628      	mov	r0, r5
 80027c4:	f000 f82a 	bl	800281c <__swsetup_r>
 80027c8:	b118      	cbz	r0, 80027d2 <__swbuf_r+0x32>
 80027ca:	f04f 37ff 	mov.w	r7, #4294967295
 80027ce:	4638      	mov	r0, r7
 80027d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	6922      	ldr	r2, [r4, #16]
 80027d6:	1a98      	subs	r0, r3, r2
 80027d8:	6963      	ldr	r3, [r4, #20]
 80027da:	b2f6      	uxtb	r6, r6
 80027dc:	4283      	cmp	r3, r0
 80027de:	4637      	mov	r7, r6
 80027e0:	dc05      	bgt.n	80027ee <__swbuf_r+0x4e>
 80027e2:	4621      	mov	r1, r4
 80027e4:	4628      	mov	r0, r5
 80027e6:	f7ff ff7f 	bl	80026e8 <_fflush_r>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d1ed      	bne.n	80027ca <__swbuf_r+0x2a>
 80027ee:	68a3      	ldr	r3, [r4, #8]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60a3      	str	r3, [r4, #8]
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	6022      	str	r2, [r4, #0]
 80027fa:	701e      	strb	r6, [r3, #0]
 80027fc:	6962      	ldr	r2, [r4, #20]
 80027fe:	1c43      	adds	r3, r0, #1
 8002800:	429a      	cmp	r2, r3
 8002802:	d004      	beq.n	800280e <__swbuf_r+0x6e>
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	07db      	lsls	r3, r3, #31
 8002808:	d5e1      	bpl.n	80027ce <__swbuf_r+0x2e>
 800280a:	2e0a      	cmp	r6, #10
 800280c:	d1df      	bne.n	80027ce <__swbuf_r+0x2e>
 800280e:	4621      	mov	r1, r4
 8002810:	4628      	mov	r0, r5
 8002812:	f7ff ff69 	bl	80026e8 <_fflush_r>
 8002816:	2800      	cmp	r0, #0
 8002818:	d0d9      	beq.n	80027ce <__swbuf_r+0x2e>
 800281a:	e7d6      	b.n	80027ca <__swbuf_r+0x2a>

0800281c <__swsetup_r>:
 800281c:	b538      	push	{r3, r4, r5, lr}
 800281e:	4b29      	ldr	r3, [pc, #164]	@ (80028c4 <__swsetup_r+0xa8>)
 8002820:	4605      	mov	r5, r0
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	460c      	mov	r4, r1
 8002826:	b118      	cbz	r0, 8002830 <__swsetup_r+0x14>
 8002828:	6a03      	ldr	r3, [r0, #32]
 800282a:	b90b      	cbnz	r3, 8002830 <__swsetup_r+0x14>
 800282c:	f7ff fa00 	bl	8001c30 <__sinit>
 8002830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002834:	0719      	lsls	r1, r3, #28
 8002836:	d422      	bmi.n	800287e <__swsetup_r+0x62>
 8002838:	06da      	lsls	r2, r3, #27
 800283a:	d407      	bmi.n	800284c <__swsetup_r+0x30>
 800283c:	2209      	movs	r2, #9
 800283e:	602a      	str	r2, [r5, #0]
 8002840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002844:	81a3      	strh	r3, [r4, #12]
 8002846:	f04f 30ff 	mov.w	r0, #4294967295
 800284a:	e033      	b.n	80028b4 <__swsetup_r+0x98>
 800284c:	0758      	lsls	r0, r3, #29
 800284e:	d512      	bpl.n	8002876 <__swsetup_r+0x5a>
 8002850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002852:	b141      	cbz	r1, 8002866 <__swsetup_r+0x4a>
 8002854:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002858:	4299      	cmp	r1, r3
 800285a:	d002      	beq.n	8002862 <__swsetup_r+0x46>
 800285c:	4628      	mov	r0, r5
 800285e:	f7ff faf7 	bl	8001e50 <_free_r>
 8002862:	2300      	movs	r3, #0
 8002864:	6363      	str	r3, [r4, #52]	@ 0x34
 8002866:	89a3      	ldrh	r3, [r4, #12]
 8002868:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800286c:	81a3      	strh	r3, [r4, #12]
 800286e:	2300      	movs	r3, #0
 8002870:	6063      	str	r3, [r4, #4]
 8002872:	6923      	ldr	r3, [r4, #16]
 8002874:	6023      	str	r3, [r4, #0]
 8002876:	89a3      	ldrh	r3, [r4, #12]
 8002878:	f043 0308 	orr.w	r3, r3, #8
 800287c:	81a3      	strh	r3, [r4, #12]
 800287e:	6923      	ldr	r3, [r4, #16]
 8002880:	b94b      	cbnz	r3, 8002896 <__swsetup_r+0x7a>
 8002882:	89a3      	ldrh	r3, [r4, #12]
 8002884:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800288c:	d003      	beq.n	8002896 <__swsetup_r+0x7a>
 800288e:	4621      	mov	r1, r4
 8002890:	4628      	mov	r0, r5
 8002892:	f000 f84f 	bl	8002934 <__smakebuf_r>
 8002896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800289a:	f013 0201 	ands.w	r2, r3, #1
 800289e:	d00a      	beq.n	80028b6 <__swsetup_r+0x9a>
 80028a0:	2200      	movs	r2, #0
 80028a2:	60a2      	str	r2, [r4, #8]
 80028a4:	6962      	ldr	r2, [r4, #20]
 80028a6:	4252      	negs	r2, r2
 80028a8:	61a2      	str	r2, [r4, #24]
 80028aa:	6922      	ldr	r2, [r4, #16]
 80028ac:	b942      	cbnz	r2, 80028c0 <__swsetup_r+0xa4>
 80028ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80028b2:	d1c5      	bne.n	8002840 <__swsetup_r+0x24>
 80028b4:	bd38      	pop	{r3, r4, r5, pc}
 80028b6:	0799      	lsls	r1, r3, #30
 80028b8:	bf58      	it	pl
 80028ba:	6962      	ldrpl	r2, [r4, #20]
 80028bc:	60a2      	str	r2, [r4, #8]
 80028be:	e7f4      	b.n	80028aa <__swsetup_r+0x8e>
 80028c0:	2000      	movs	r0, #0
 80028c2:	e7f7      	b.n	80028b4 <__swsetup_r+0x98>
 80028c4:	20000018 	.word	0x20000018

080028c8 <_sbrk_r>:
 80028c8:	b538      	push	{r3, r4, r5, lr}
 80028ca:	4d06      	ldr	r5, [pc, #24]	@ (80028e4 <_sbrk_r+0x1c>)
 80028cc:	2300      	movs	r3, #0
 80028ce:	4604      	mov	r4, r0
 80028d0:	4608      	mov	r0, r1
 80028d2:	602b      	str	r3, [r5, #0]
 80028d4:	f7fe fad8 	bl	8000e88 <_sbrk>
 80028d8:	1c43      	adds	r3, r0, #1
 80028da:	d102      	bne.n	80028e2 <_sbrk_r+0x1a>
 80028dc:	682b      	ldr	r3, [r5, #0]
 80028de:	b103      	cbz	r3, 80028e2 <_sbrk_r+0x1a>
 80028e0:	6023      	str	r3, [r4, #0]
 80028e2:	bd38      	pop	{r3, r4, r5, pc}
 80028e4:	200001d4 	.word	0x200001d4

080028e8 <__swhatbuf_r>:
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	460c      	mov	r4, r1
 80028ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028f0:	2900      	cmp	r1, #0
 80028f2:	b096      	sub	sp, #88	@ 0x58
 80028f4:	4615      	mov	r5, r2
 80028f6:	461e      	mov	r6, r3
 80028f8:	da0d      	bge.n	8002916 <__swhatbuf_r+0x2e>
 80028fa:	89a3      	ldrh	r3, [r4, #12]
 80028fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	bf14      	ite	ne
 8002906:	2340      	movne	r3, #64	@ 0x40
 8002908:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800290c:	2000      	movs	r0, #0
 800290e:	6031      	str	r1, [r6, #0]
 8002910:	602b      	str	r3, [r5, #0]
 8002912:	b016      	add	sp, #88	@ 0x58
 8002914:	bd70      	pop	{r4, r5, r6, pc}
 8002916:	466a      	mov	r2, sp
 8002918:	f000 f848 	bl	80029ac <_fstat_r>
 800291c:	2800      	cmp	r0, #0
 800291e:	dbec      	blt.n	80028fa <__swhatbuf_r+0x12>
 8002920:	9901      	ldr	r1, [sp, #4]
 8002922:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002926:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800292a:	4259      	negs	r1, r3
 800292c:	4159      	adcs	r1, r3
 800292e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002932:	e7eb      	b.n	800290c <__swhatbuf_r+0x24>

08002934 <__smakebuf_r>:
 8002934:	898b      	ldrh	r3, [r1, #12]
 8002936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002938:	079d      	lsls	r5, r3, #30
 800293a:	4606      	mov	r6, r0
 800293c:	460c      	mov	r4, r1
 800293e:	d507      	bpl.n	8002950 <__smakebuf_r+0x1c>
 8002940:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002944:	6023      	str	r3, [r4, #0]
 8002946:	6123      	str	r3, [r4, #16]
 8002948:	2301      	movs	r3, #1
 800294a:	6163      	str	r3, [r4, #20]
 800294c:	b003      	add	sp, #12
 800294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002950:	ab01      	add	r3, sp, #4
 8002952:	466a      	mov	r2, sp
 8002954:	f7ff ffc8 	bl	80028e8 <__swhatbuf_r>
 8002958:	9f00      	ldr	r7, [sp, #0]
 800295a:	4605      	mov	r5, r0
 800295c:	4639      	mov	r1, r7
 800295e:	4630      	mov	r0, r6
 8002960:	f7ff fae2 	bl	8001f28 <_malloc_r>
 8002964:	b948      	cbnz	r0, 800297a <__smakebuf_r+0x46>
 8002966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800296a:	059a      	lsls	r2, r3, #22
 800296c:	d4ee      	bmi.n	800294c <__smakebuf_r+0x18>
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	81a3      	strh	r3, [r4, #12]
 8002978:	e7e2      	b.n	8002940 <__smakebuf_r+0xc>
 800297a:	89a3      	ldrh	r3, [r4, #12]
 800297c:	6020      	str	r0, [r4, #0]
 800297e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002982:	81a3      	strh	r3, [r4, #12]
 8002984:	9b01      	ldr	r3, [sp, #4]
 8002986:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800298a:	b15b      	cbz	r3, 80029a4 <__smakebuf_r+0x70>
 800298c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002990:	4630      	mov	r0, r6
 8002992:	f000 f81d 	bl	80029d0 <_isatty_r>
 8002996:	b128      	cbz	r0, 80029a4 <__smakebuf_r+0x70>
 8002998:	89a3      	ldrh	r3, [r4, #12]
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	81a3      	strh	r3, [r4, #12]
 80029a4:	89a3      	ldrh	r3, [r4, #12]
 80029a6:	431d      	orrs	r5, r3
 80029a8:	81a5      	strh	r5, [r4, #12]
 80029aa:	e7cf      	b.n	800294c <__smakebuf_r+0x18>

080029ac <_fstat_r>:
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	4d07      	ldr	r5, [pc, #28]	@ (80029cc <_fstat_r+0x20>)
 80029b0:	2300      	movs	r3, #0
 80029b2:	4604      	mov	r4, r0
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	602b      	str	r3, [r5, #0]
 80029ba:	f7fe fa3d 	bl	8000e38 <_fstat>
 80029be:	1c43      	adds	r3, r0, #1
 80029c0:	d102      	bne.n	80029c8 <_fstat_r+0x1c>
 80029c2:	682b      	ldr	r3, [r5, #0]
 80029c4:	b103      	cbz	r3, 80029c8 <_fstat_r+0x1c>
 80029c6:	6023      	str	r3, [r4, #0]
 80029c8:	bd38      	pop	{r3, r4, r5, pc}
 80029ca:	bf00      	nop
 80029cc:	200001d4 	.word	0x200001d4

080029d0 <_isatty_r>:
 80029d0:	b538      	push	{r3, r4, r5, lr}
 80029d2:	4d06      	ldr	r5, [pc, #24]	@ (80029ec <_isatty_r+0x1c>)
 80029d4:	2300      	movs	r3, #0
 80029d6:	4604      	mov	r4, r0
 80029d8:	4608      	mov	r0, r1
 80029da:	602b      	str	r3, [r5, #0]
 80029dc:	f7fe fa3c 	bl	8000e58 <_isatty>
 80029e0:	1c43      	adds	r3, r0, #1
 80029e2:	d102      	bne.n	80029ea <_isatty_r+0x1a>
 80029e4:	682b      	ldr	r3, [r5, #0]
 80029e6:	b103      	cbz	r3, 80029ea <_isatty_r+0x1a>
 80029e8:	6023      	str	r3, [r4, #0]
 80029ea:	bd38      	pop	{r3, r4, r5, pc}
 80029ec:	200001d4 	.word	0x200001d4

080029f0 <_init>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr

080029fc <_fini>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr
