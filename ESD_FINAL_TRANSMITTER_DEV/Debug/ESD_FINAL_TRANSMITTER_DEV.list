
ESD_FINAL_TRANSMITTER_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec8  08010b50  08010b50  00011b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a18  08011a18  00013208  2**0
                  CONTENTS
  4 .ARM          00000008  08011a18  08011a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a20  08011a20  00013208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a20  08011a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011a24  08011a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08011a28  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd8  20000208  08011c30  00013208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ee0  08011c30  00013ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e97  00000000  00000000  00013238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d35  00000000  00000000  000260cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00029e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfd  00000000  00000000  0002af40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a898  00000000  00000000  0002bc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab58  00000000  00000000  000464d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf3d  00000000  00000000  0006102d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edf6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e1c  00000000  00000000  000edfb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f3dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010b34 	.word	0x08010b34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08010b34 	.word	0x08010b34

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <millis>:
}



uint64_t millis()
	{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101a:	b672      	cpsid	i
}
 800101c:	bf00      	nop
	__disable_irq();
	uint64_t ml=mil;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <millis+0x2c>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001028:	b662      	cpsie	i
}
 800102a:	bf00      	nop
	__enable_irq();
	return ml;
 800102c:	e9d7 2300 	ldrd	r2, r3, [r7]
	}
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000228 	.word	0x20000228

08001044 <delay>:



void delay(uint32_t time)
	{
 8001044:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]

	uint64_t start=millis();
 800104e:	f7ff ffe1 	bl	8001014 <millis>
 8001052:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while((millis() - start) < time);
 8001056:	bf00      	nop
 8001058:	f7ff ffdc 	bl	8001014 <millis>
 800105c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001060:	1a84      	subs	r4, r0, r2
 8001062:	eb61 0503 	sbc.w	r5, r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	4698      	mov	r8, r3
 800106c:	4691      	mov	r9, r2
 800106e:	4544      	cmp	r4, r8
 8001070:	eb75 0309 	sbcs.w	r3, r5, r9
 8001074:	d3f0      	bcc.n	8001058 <delay+0x14>

	}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001084 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	mil++;
 8001088:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <SysTick_Handler+0x70>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	1c50      	adds	r0, r2, #1
 8001090:	f143 0100 	adc.w	r1, r3, #0
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <SysTick_Handler+0x70>)
 8001096:	e9c3 0100 	strd	r0, r1, [r3]
    if (timeout > 0)  timeout--;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <SysTick_Handler+0x74>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <SysTick_Handler+0x2a>
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <SysTick_Handler+0x74>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <SysTick_Handler+0x74>)
 80010ac:	801a      	strh	r2, [r3, #0]
	if (VCCTimeout>0) VCCTimeout--;
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <SysTick_Handler+0x78>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	dd04      	ble.n	80010c0 <SysTick_Handler+0x3c>
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <SysTick_Handler+0x78>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	4a0f      	ldr	r2, [pc, #60]	@ (80010fc <SysTick_Handler+0x78>)
 80010be:	6013      	str	r3, [r2, #0]
	if (Timer1 > 0){
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <SysTick_Handler+0x7c>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <SysTick_Handler+0x50>
		Timer1--;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <SysTick_Handler+0x7c>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <SysTick_Handler+0x7c>)
 80010d2:	801a      	strh	r2, [r3, #0]
	}
	if (Timer2 > 0){
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <SysTick_Handler+0x80>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <SysTick_Handler+0x64>
		Timer2--;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <SysTick_Handler+0x80>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <SysTick_Handler+0x80>)
 80010e6:	801a      	strh	r2, [r3, #0]
	}
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000228 	.word	0x20000228
 80010f8:	20000738 	.word	0x20000738
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000260 	.word	0x20000260
 8001104:	20000262 	.word	0x20000262

08001108 <I2C_init_config>:
 */

#include <I2C_driver.h>
#include"delay.h"

void I2C_init_config(){
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800110c:	4b35      	ldr	r3, [pc, #212]	@ (80011e4 <I2C_init_config+0xdc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a34      	ldr	r2, [pc, #208]	@ (80011e4 <I2C_init_config+0xdc>)
 8001112:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; //send clock for I2C1 and port B
 8001118:	4b32      	ldr	r3, [pc, #200]	@ (80011e4 <I2C_init_config+0xdc>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111c:	4a31      	ldr	r2, [pc, #196]	@ (80011e4 <I2C_init_config+0xdc>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	6313      	str	r3, [r2, #48]	@ 0x30

	//declare as alternate func
	MODIFY_FIELD(GPIOB->MODER,GPIO_MODER_MODER8,ESF_GPIO_MODER_ALT_FUNC);
 8001124:	4b30      	ldr	r3, [pc, #192]	@ (80011e8 <I2C_init_config+0xe0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800112c:	4a2e      	ldr	r2, [pc, #184]	@ (80011e8 <I2C_init_config+0xe0>)
 800112e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001132:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER,GPIO_MODER_MODER9,ESF_GPIO_MODER_ALT_FUNC);
 8001134:	4b2c      	ldr	r3, [pc, #176]	@ (80011e8 <I2C_init_config+0xe0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800113c:	4a2a      	ldr	r2, [pc, #168]	@ (80011e8 <I2C_init_config+0xe0>)
 800113e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001142:	6013      	str	r3, [r2, #0]

	//PB8 scl PB9 sda
	MODIFY_FIELD(GPIOB->AFR[1], GPIO_AFRH_AFSEL8, 4);
 8001144:	4b28      	ldr	r3, [pc, #160]	@ (80011e8 <I2C_init_config+0xe0>)
 8001146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001148:	f023 030f 	bic.w	r3, r3, #15
 800114c:	4a26      	ldr	r2, [pc, #152]	@ (80011e8 <I2C_init_config+0xe0>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6253      	str	r3, [r2, #36]	@ 0x24
	MODIFY_FIELD(GPIOB->AFR[1], GPIO_AFRH_AFSEL9, 4);
 8001154:	4b24      	ldr	r3, [pc, #144]	@ (80011e8 <I2C_init_config+0xe0>)
 8001156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001158:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800115c:	4a22      	ldr	r2, [pc, #136]	@ (80011e8 <I2C_init_config+0xe0>)
 800115e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001162:	6253      	str	r3, [r2, #36]	@ 0x24

	//configure as outout open drain
	MODIFY_FIELD(GPIOB->OTYPER,GPIO_OTYPER_OT8,1);
 8001164:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <I2C_init_config+0xe0>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <I2C_init_config+0xe0>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116e:	6053      	str	r3, [r2, #4]
	MODIFY_FIELD(GPIOB->OTYPER,GPIO_OTYPER_OT9,1);
 8001170:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <I2C_init_config+0xe0>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a1c      	ldr	r2, [pc, #112]	@ (80011e8 <I2C_init_config+0xe0>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800117a:	6053      	str	r3, [r2, #4]

	//set speed
	GPIOB->OSPEEDR|=(3<<16)|(3<<18);
 800117c:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <I2C_init_config+0xe0>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a19      	ldr	r2, [pc, #100]	@ (80011e8 <I2C_init_config+0xe0>)
 8001182:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8001186:	6093      	str	r3, [r2, #8]

	//select pull up
	GPIOB->PUPDR|=(1<<16)|(1<<18);
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <I2C_init_config+0xe0>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	4a16      	ldr	r2, [pc, #88]	@ (80011e8 <I2C_init_config+0xe0>)
 800118e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8001192:	60d3      	str	r3, [r2, #12]

	//i2c setup begins
	//first reset i2c
	I2C1->CR1 = I2C_CR1_SWRST;
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <I2C_init_config+0xe4>)
 8001196:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800119a:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <I2C_init_config+0xe4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <I2C_init_config+0xe4>)
 80011a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80011a6:	6013      	str	r3, [r2, #0]

	//setup peripherla clock freq
	I2C1->CR2 |= 0x18<<0;// its 24 mhz hex of 24 ! see ioc file
 80011a8:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <I2C_init_config+0xe4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <I2C_init_config+0xe4>)
 80011ae:	f043 0318 	orr.w	r3, r3, #24
 80011b2:	6053      	str	r3, [r2, #4]

	//i2c ccrr value see thigh calc its 120 in decimal 1000+4000/(1/pckl which is 24))
	I2C1->CCR|=0x78<<0;
 80011b4:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <I2C_init_config+0xe4>)
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	4a0c      	ldr	r2, [pc, #48]	@ (80011ec <I2C_init_config+0xe4>)
 80011ba:	f043 0378 	orr.w	r3, r3, #120	@ 0x78
 80011be:	61d3      	str	r3, [r2, #28]

	//set trise
	I2C1->TRISE|=0x19<<0; //1000/(1pcll)+1
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <I2C_init_config+0xe4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <I2C_init_config+0xe4>)
 80011c6:	f043 0319 	orr.w	r3, r3, #25
 80011ca:	6213      	str	r3, [r2, #32]

	//enable i2c peripheral
	I2C1->CR1 |= I2C_CR1_PE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <I2C_init_config+0xe4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a06      	ldr	r2, [pc, #24]	@ (80011ec <I2C_init_config+0xe4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6013      	str	r3, [r2, #0]

}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40005400 	.word	0x40005400

080011f0 <I2C_START_COMS>:

void I2C_START_COMS(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	//start bit
	I2C1->CR1|=I2C_CR1_ACK; //enable ACK
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <I2C_START_COMS+0x34>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <I2C_START_COMS+0x34>)
 80011fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011fe:	6013      	str	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_START;
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <I2C_START_COMS+0x34>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <I2C_START_COMS+0x34>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120a:	6013      	str	r3, [r2, #0]
	while (I2C1->CR2 & I2C_SR1_SB){}// wait for start condition to generate
 800120c:	bf00      	nop
 800120e:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <I2C_START_COMS+0x34>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f9      	bne.n	800120e <I2C_START_COMS+0x1e>
	delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff ff12 	bl	8001044 <delay>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40005400 	.word	0x40005400

08001228 <I2C_WRITE_DATA>:

void I2C_WRITE_DATA(uint8_t data){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 &I2C_SR1_TXE));  // wait for TXE bit to set
 8001232:	bf00      	nop
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <I2C_WRITE_DATA+0x3c>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f9      	beq.n	8001234 <I2C_WRITE_DATA+0xc>
	I2C1->DR = data;
 8001240:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <I2C_WRITE_DATA+0x3c>)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 &I2C_SR1_BTF)); //wait for byte trans
 8001246:	bf00      	nop
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <I2C_WRITE_DATA+0x3c>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f9      	beq.n	8001248 <I2C_WRITE_DATA+0x20>
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40005400 	.word	0x40005400

08001268 <I2C_SEND_ADDRESS>:

void I2C_SEND_ADDRESS(uint8_t address){
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]

	I2C1->DR = address;
 8001272:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <I2C_SEND_ADDRESS+0x3c>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	6113      	str	r3, [r2, #16]
	//delay(4);
//	printf("\n \r  1 of addr is %d \n \r",I2C1->SR1 & (1<<1));
	while (!(I2C1->SR1 & (1<<1))); //wait for address bit to be set
 8001278:	bf00      	nop
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <I2C_SEND_ADDRESS+0x3c>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f9      	beq.n	800127a <I2C_SEND_ADDRESS+0x12>
	//This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
//	printf("\n \r after 2 of addr is %d \n \r",I2C1->SR1 & (1<<1));
	uint8_t temp_clear=I2C1->SR1 | I2C1->SR2;
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <I2C_SEND_ADDRESS+0x3c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <I2C_SEND_ADDRESS+0x3c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	73fb      	strb	r3, [r7, #15]
//	printf("\n \r after 3 of addr is %d \n \r",I2C1->SR1 & (1<<1));


}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40005400 	.word	0x40005400

080012a8 <I2C_STOP_COMS>:

void I2C_STOP_COMS(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	I2C1->CR1|=I2C_CR1_STOP; //stop condition
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <I2C_STOP_COMS+0x1c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <I2C_STOP_COMS+0x1c>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b6:	6013      	str	r3, [r2, #0]
   // while (I2C1->CR1 & I2C_CR1_STOP);
	delay(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff fec3 	bl	8001044 <delay>
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40005400 	.word	0x40005400

080012c8 <I2C_READ>:


void I2C_READ(uint8_t address_slave, uint8_t *buffer_recv,uint8_t recv_buff_size){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	4613      	mov	r3, r2
 80012d6:	71bb      	strb	r3, [r7, #6]
	uint8_t remaining_bytes=recv_buff_size;
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	73fb      	strb	r3, [r7, #15]
//if only 1
/*. In case a single byte has to be received, the Acknowledge disable is made during EV6
(before ADDR flag is cleared) and the STOP condition generation is made after EV6.*/
	if(recv_buff_size==1){
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d126      	bne.n	8001330 <I2C_READ+0x68>
		I2C1->DR = address_slave;
 80012e2:	4a3c      	ldr	r2, [pc, #240]	@ (80013d4 <I2C_READ+0x10c>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 &I2C_SR1_ADDR)); //wait for address bit to be set
 80012e8:	bf00      	nop
 80012ea:	4b3a      	ldr	r3, [pc, #232]	@ (80013d4 <I2C_READ+0x10c>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f9      	beq.n	80012ea <I2C_READ+0x22>
		I2C1->CR1 &= ~(1<<10); //clear ack
 80012f6:	4b37      	ldr	r3, [pc, #220]	@ (80013d4 <I2C_READ+0x10c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a36      	ldr	r2, [pc, #216]	@ (80013d4 <I2C_READ+0x10c>)
 80012fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001300:	6013      	str	r3, [r2, #0]
		uint8_t temp_clear=I2C1->SR1 | I2C1->SR2; //ev6
 8001302:	4b34      	ldr	r3, [pc, #208]	@ (80013d4 <I2C_READ+0x10c>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <I2C_READ+0x10c>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	73bb      	strb	r3, [r7, #14]
		I2C_STOP_COMS();
 8001312:	f7ff ffc9 	bl	80012a8 <I2C_STOP_COMS>
		while (!(I2C1->SR1 &I2C_SR1_RXNE));
 8001316:	bf00      	nop
 8001318:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <I2C_READ+0x10c>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f9      	beq.n	8001318 <I2C_READ+0x50>
		buffer_recv[0]= I2C1->DR;// recieve data
 8001324:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <I2C_READ+0x10c>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	701a      	strb	r2, [r3, #0]
		return ;
 800132e:	e04e      	b.n	80013ce <I2C_READ+0x106>
must be cleared just after reading the second last data byte (after second last RxNE
event).
2. In order to generate the Stop/Restart condition, software must set the STOP/START bit
after reading the second last data byte (after the second last RxNE event). */
	else{
		I2C_SEND_ADDRESS(address_slave);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff98 	bl	8001268 <I2C_SEND_ADDRESS>
		//keep reading and storing in loop also send acks
		while(remaining_bytes>2){
 8001338:	e019      	b.n	800136e <I2C_READ+0xa6>
			while (!(I2C1->SR1 &I2C_SR1_RXNE));
 800133a:	bf00      	nop
 800133c:	4b25      	ldr	r3, [pc, #148]	@ (80013d4 <I2C_READ+0x10c>)
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f9      	beq.n	800133c <I2C_READ+0x74>
			buffer_recv[recv_buff_size-remaining_bytes]=I2C1->DR;
 8001348:	4b22      	ldr	r3, [pc, #136]	@ (80013d4 <I2C_READ+0x10c>)
 800134a:	6919      	ldr	r1, [r3, #16]
 800134c:	79ba      	ldrb	r2, [r7, #6]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	461a      	mov	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4413      	add	r3, r2
 8001358:	b2ca      	uxtb	r2, r1
 800135a:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= I2C_CR1_ACK; //send ack master sends this !!
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <I2C_READ+0x10c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <I2C_READ+0x10c>)
 8001362:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001366:	6013      	str	r3, [r2, #0]
			remaining_bytes--;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3b01      	subs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
		while(remaining_bytes>2){
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d8e2      	bhi.n	800133a <I2C_READ+0x72>
		}

		//second last byte nack condition
		while (!(I2C1->SR1 &I2C_SR1_RXNE));
 8001374:	bf00      	nop
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <I2C_READ+0x10c>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f9      	beq.n	8001376 <I2C_READ+0xae>
		buffer_recv[recv_buff_size-remaining_bytes]=I2C1->DR;
 8001382:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <I2C_READ+0x10c>)
 8001384:	6919      	ldr	r1, [r3, #16]
 8001386:	79ba      	ldrb	r2, [r7, #6]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	461a      	mov	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	4413      	add	r3, r2
 8001392:	b2ca      	uxtb	r2, r1
 8001394:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1<<10); //clear ack
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <I2C_READ+0x10c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <I2C_READ+0x10c>)
 800139c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80013a0:	6013      	str	r3, [r2, #0]
		I2C_STOP_COMS();
 80013a2:	f7ff ff81 	bl	80012a8 <I2C_STOP_COMS>
		remaining_bytes--;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
		//last byte
		while (!(I2C1->SR1 &I2C_SR1_RXNE));
 80013ac:	bf00      	nop
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <I2C_READ+0x10c>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f9      	beq.n	80013ae <I2C_READ+0xe6>
		buffer_recv[recv_buff_size-remaining_bytes]=I2C1->DR;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <I2C_READ+0x10c>)
 80013bc:	6919      	ldr	r1, [r3, #16]
 80013be:	79ba      	ldrb	r2, [r7, #6]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
	}

}
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40005400 	.word	0x40005400

080013d8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 80013d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013dc:	b08c      	sub	sp, #48	@ 0x30
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
	inx = 0;
 80013e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001554 <decodeGGA+0x17c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80013ee:	e004      	b.n	80013fa <decodeGGA+0x22>
 80013f0:	4b58      	ldr	r3, [pc, #352]	@ (8001554 <decodeGGA+0x17c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a57      	ldr	r2, [pc, #348]	@ (8001554 <decodeGGA+0x17c>)
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b56      	ldr	r3, [pc, #344]	@ (8001554 <decodeGGA+0x17c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b2c      	cmp	r3, #44	@ 0x2c
 8001408:	d1f2      	bne.n	80013f0 <decodeGGA+0x18>
	inx++;
 800140a:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <decodeGGA+0x17c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	4a50      	ldr	r2, [pc, #320]	@ (8001554 <decodeGGA+0x17c>)
 8001412:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001414:	e004      	b.n	8001420 <decodeGGA+0x48>
 8001416:	4b4f      	ldr	r3, [pc, #316]	@ (8001554 <decodeGGA+0x17c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a4d      	ldr	r2, [pc, #308]	@ (8001554 <decodeGGA+0x17c>)
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b4c      	ldr	r3, [pc, #304]	@ (8001554 <decodeGGA+0x17c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b2c      	cmp	r3, #44	@ 0x2c
 800142e:	d1f2      	bne.n	8001416 <decodeGGA+0x3e>
	inx++;
 8001430:	4b48      	ldr	r3, [pc, #288]	@ (8001554 <decodeGGA+0x17c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a47      	ldr	r2, [pc, #284]	@ (8001554 <decodeGGA+0x17c>)
 8001438:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 800143a:	e004      	b.n	8001446 <decodeGGA+0x6e>
 800143c:	4b45      	ldr	r3, [pc, #276]	@ (8001554 <decodeGGA+0x17c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	4a44      	ldr	r2, [pc, #272]	@ (8001554 <decodeGGA+0x17c>)
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b43      	ldr	r3, [pc, #268]	@ (8001554 <decodeGGA+0x17c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b2c      	cmp	r3, #44	@ 0x2c
 8001454:	d1f2      	bne.n	800143c <decodeGGA+0x64>
	inx++;
 8001456:	4b3f      	ldr	r3, [pc, #252]	@ (8001554 <decodeGGA+0x17c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a3d      	ldr	r2, [pc, #244]	@ (8001554 <decodeGGA+0x17c>)
 800145e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001460:	e004      	b.n	800146c <decodeGGA+0x94>
 8001462:	4b3c      	ldr	r3, [pc, #240]	@ (8001554 <decodeGGA+0x17c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a3a      	ldr	r2, [pc, #232]	@ (8001554 <decodeGGA+0x17c>)
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b39      	ldr	r3, [pc, #228]	@ (8001554 <decodeGGA+0x17c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b2c      	cmp	r3, #44	@ 0x2c
 800147a:	d1f2      	bne.n	8001462 <decodeGGA+0x8a>
	inx++;
 800147c:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <decodeGGA+0x17c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	4a34      	ldr	r2, [pc, #208]	@ (8001554 <decodeGGA+0x17c>)
 8001484:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001486:	e004      	b.n	8001492 <decodeGGA+0xba>
 8001488:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <decodeGGA+0x17c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a31      	ldr	r2, [pc, #196]	@ (8001554 <decodeGGA+0x17c>)
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b30      	ldr	r3, [pc, #192]	@ (8001554 <decodeGGA+0x17c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b2c      	cmp	r3, #44	@ 0x2c
 80014a0:	d1f2      	bne.n	8001488 <decodeGGA+0xb0>
	inx++;
 80014a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <decodeGGA+0x17c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001554 <decodeGGA+0x17c>)
 80014aa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 80014ac:	e004      	b.n	80014b8 <decodeGGA+0xe0>
 80014ae:	4b29      	ldr	r3, [pc, #164]	@ (8001554 <decodeGGA+0x17c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	4a27      	ldr	r2, [pc, #156]	@ (8001554 <decodeGGA+0x17c>)
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <decodeGGA+0x17c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b2c      	cmp	r3, #44	@ 0x2c
 80014c6:	d1f2      	bne.n	80014ae <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 80014c8:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <decodeGGA+0x17c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <decodeGGA+0x17c>)
 80014d0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 80014d2:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <decodeGGA+0x17c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b31      	cmp	r3, #49	@ 0x31
 80014e0:	d00f      	beq.n	8001502 <decodeGGA+0x12a>
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <decodeGGA+0x17c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b32      	cmp	r3, #50	@ 0x32
 80014f0:	d007      	beq.n	8001502 <decodeGGA+0x12a>
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <decodeGGA+0x17c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b36      	cmp	r3, #54	@ 0x36
 8001500:	d106      	bne.n	8001510 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <decodeGGA+0x17c>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800150e:	e009      	b.n	8001524 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001516:	2301      	movs	r3, #1
 8001518:	e2fd      	b.n	8001b16 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <decodeGGA+0x17c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	4a0c      	ldr	r2, [pc, #48]	@ (8001554 <decodeGGA+0x17c>)
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <decodeGGA+0x17c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b2c      	cmp	r3, #44	@ 0x2c
 8001532:	d1f2      	bne.n	800151a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <decodeGGA+0x17c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	4a06      	ldr	r2, [pc, #24]	@ (8001554 <decodeGGA+0x17c>)
 800153c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	220c      	movs	r2, #12
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f00a fc9a 	bl	800be80 <memset>
	i=0;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001550:	e016      	b.n	8001580 <decodeGGA+0x1a8>
 8001552:	bf00      	nop
 8001554:	20000230 	.word	0x20000230
	{
		buffer[i] = GGAbuffer[inx];
 8001558:	4bab      	ldr	r3, [pc, #684]	@ (8001808 <decodeGGA+0x430>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	7819      	ldrb	r1, [r3, #0]
 8001564:	f107 020c 	add.w	r2, r7, #12
 8001568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800156a:	4413      	add	r3, r2
 800156c:	460a      	mov	r2, r1
 800156e:	701a      	strb	r2, [r3, #0]
		i++;
 8001570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001572:	3301      	adds	r3, #1
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001576:	4ba4      	ldr	r3, [pc, #656]	@ (8001808 <decodeGGA+0x430>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4aa2      	ldr	r2, [pc, #648]	@ (8001808 <decodeGGA+0x430>)
 800157e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001580:	4ba1      	ldr	r3, [pc, #644]	@ (8001808 <decodeGGA+0x430>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b2c      	cmp	r3, #44	@ 0x2c
 800158e:	d1e3      	bne.n	8001558 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	4618      	mov	r0, r3
 8001596:	f009 fb1f 	bl	800abd8 <atoi>
 800159a:	4603      	mov	r3, r0
 800159c:	4a9b      	ldr	r2, [pc, #620]	@ (800180c <decodeGGA+0x434>)
 800159e:	fb82 1203 	smull	r1, r2, r2, r3
 80015a2:	1312      	asrs	r2, r2, #12
 80015a4:	17db      	asrs	r3, r3, #31
 80015a6:	1ad2      	subs	r2, r2, r3
 80015a8:	4b99      	ldr	r3, [pc, #612]	@ (8001810 <decodeGGA+0x438>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4999      	ldr	r1, [pc, #612]	@ (8001814 <decodeGGA+0x43c>)
 80015ae:	fb81 0103 	smull	r0, r1, r1, r3
 80015b2:	1149      	asrs	r1, r1, #5
 80015b4:	17db      	asrs	r3, r3, #31
 80015b6:	1acb      	subs	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	4a97      	ldr	r2, [pc, #604]	@ (8001818 <decodeGGA+0x440>)
 80015bc:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4618      	mov	r0, r3
 80015c4:	f009 fb08 	bl	800abd8 <atoi>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a92      	ldr	r2, [pc, #584]	@ (8001814 <decodeGGA+0x43c>)
 80015cc:	fb82 1203 	smull	r1, r2, r2, r3
 80015d0:	1152      	asrs	r2, r2, #5
 80015d2:	17db      	asrs	r3, r3, #31
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	4a8f      	ldr	r2, [pc, #572]	@ (8001814 <decodeGGA+0x43c>)
 80015d8:	fb82 1203 	smull	r1, r2, r2, r3
 80015dc:	1151      	asrs	r1, r2, #5
 80015de:	17da      	asrs	r2, r3, #31
 80015e0:	1a8a      	subs	r2, r1, r2
 80015e2:	2164      	movs	r1, #100	@ 0x64
 80015e4:	fb01 f202 	mul.w	r2, r1, r2
 80015e8:	1a9a      	subs	r2, r3, r2
 80015ea:	4b89      	ldr	r3, [pc, #548]	@ (8001810 <decodeGGA+0x438>)
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	4b89      	ldr	r3, [pc, #548]	@ (8001814 <decodeGGA+0x43c>)
 80015f0:	fb83 0301 	smull	r0, r3, r3, r1
 80015f4:	1158      	asrs	r0, r3, #5
 80015f6:	17cb      	asrs	r3, r1, #31
 80015f8:	1ac3      	subs	r3, r0, r3
 80015fa:	2064      	movs	r0, #100	@ 0x64
 80015fc:	fb00 f303 	mul.w	r3, r0, r3
 8001600:	1acb      	subs	r3, r1, r3
 8001602:	4413      	add	r3, r2
 8001604:	4a85      	ldr	r2, [pc, #532]	@ (800181c <decodeGGA+0x444>)
 8001606:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001608:	4b84      	ldr	r3, [pc, #528]	@ (800181c <decodeGGA+0x444>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b3b      	cmp	r3, #59	@ 0x3b
 800160e:	dd09      	ble.n	8001624 <decodeGGA+0x24c>
	{
		min = min-60;
 8001610:	4b82      	ldr	r3, [pc, #520]	@ (800181c <decodeGGA+0x444>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3b3c      	subs	r3, #60	@ 0x3c
 8001616:	4a81      	ldr	r2, [pc, #516]	@ (800181c <decodeGGA+0x444>)
 8001618:	6013      	str	r3, [r2, #0]
		hr++;
 800161a:	4b7f      	ldr	r3, [pc, #508]	@ (8001818 <decodeGGA+0x440>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a7d      	ldr	r2, [pc, #500]	@ (8001818 <decodeGGA+0x440>)
 8001622:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001624:	4b7c      	ldr	r3, [pc, #496]	@ (8001818 <decodeGGA+0x440>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da09      	bge.n	8001640 <decodeGGA+0x268>
	{
		hr=24+hr;
 800162c:	4b7a      	ldr	r3, [pc, #488]	@ (8001818 <decodeGGA+0x440>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3318      	adds	r3, #24
 8001632:	4a79      	ldr	r2, [pc, #484]	@ (8001818 <decodeGGA+0x440>)
 8001634:	6013      	str	r3, [r2, #0]
		daychange--;
 8001636:	4b7a      	ldr	r3, [pc, #488]	@ (8001820 <decodeGGA+0x448>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3b01      	subs	r3, #1
 800163c:	4a78      	ldr	r2, [pc, #480]	@ (8001820 <decodeGGA+0x448>)
 800163e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001640:	4b75      	ldr	r3, [pc, #468]	@ (8001818 <decodeGGA+0x440>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b17      	cmp	r3, #23
 8001646:	dd09      	ble.n	800165c <decodeGGA+0x284>
	{
		hr=hr-24;
 8001648:	4b73      	ldr	r3, [pc, #460]	@ (8001818 <decodeGGA+0x440>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3b18      	subs	r3, #24
 800164e:	4a72      	ldr	r2, [pc, #456]	@ (8001818 <decodeGGA+0x440>)
 8001650:	6013      	str	r3, [r2, #0]
		daychange++;
 8001652:	4b73      	ldr	r3, [pc, #460]	@ (8001820 <decodeGGA+0x448>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	4a71      	ldr	r2, [pc, #452]	@ (8001820 <decodeGGA+0x448>)
 800165a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 800165c:	4b6e      	ldr	r3, [pc, #440]	@ (8001818 <decodeGGA+0x440>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001664:	4b6d      	ldr	r3, [pc, #436]	@ (800181c <decodeGGA+0x444>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4618      	mov	r0, r3
 8001672:	f009 fab1 	bl	800abd8 <atoi>
 8001676:	4602      	mov	r2, r0
 8001678:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <decodeGGA+0x43c>)
 800167a:	fb83 1302 	smull	r1, r3, r3, r2
 800167e:	1159      	asrs	r1, r3, #5
 8001680:	17d3      	asrs	r3, r2, #31
 8001682:	1acb      	subs	r3, r1, r3
 8001684:	2164      	movs	r1, #100	@ 0x64
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001690:	4b5d      	ldr	r3, [pc, #372]	@ (8001808 <decodeGGA+0x430>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	4a5c      	ldr	r2, [pc, #368]	@ (8001808 <decodeGGA+0x430>)
 8001698:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	220c      	movs	r2, #12
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f00a fbec 	bl	800be80 <memset>
	i=0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80016ac:	e013      	b.n	80016d6 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 80016ae:	4b56      	ldr	r3, [pc, #344]	@ (8001808 <decodeGGA+0x430>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	7819      	ldrb	r1, [r3, #0]
 80016ba:	f107 020c 	add.w	r2, r7, #12
 80016be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c0:	4413      	add	r3, r2
 80016c2:	460a      	mov	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
		i++;
 80016c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c8:	3301      	adds	r3, #1
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80016cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001808 <decodeGGA+0x430>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001808 <decodeGGA+0x430>)
 80016d4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80016d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001808 <decodeGGA+0x430>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b2c      	cmp	r3, #44	@ 0x2c
 80016e4:	d1e3      	bne.n	80016ae <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fdd8 	bl	80002a0 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d801      	bhi.n	80016fa <decodeGGA+0x322>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e20d      	b.n	8001b16 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	4618      	mov	r0, r3
 8001700:	f009 fa6a 	bl	800abd8 <atoi>
 8001704:	4603      	mov	r3, r0
 8001706:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 800170c:	e002      	b.n	8001714 <decodeGGA+0x33c>
 800170e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001710:	3301      	adds	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001714:	f107 020c 	add.w	r2, r7, #12
 8001718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001720:	d1f5      	bne.n	800170e <decodeGGA+0x336>
	j++;
 8001722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001724:	3301      	adds	r3, #1
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fdb7 	bl	80002a0 <strlen>
 8001732:	4602      	mov	r2, r0
 8001734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 800173a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173c:	f107 020c 	add.w	r2, r7, #12
 8001740:	4413      	add	r3, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f009 fa48 	bl	800abd8 <atoi>
 8001748:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 800174a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe ff00 	bl	8000554 <__aeabi_i2d>
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b32      	ldr	r3, [pc, #200]	@ (8001824 <decodeGGA+0x44c>)
 800175a:	f7ff f88f 	bl	800087c <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	69f8      	ldr	r0, [r7, #28]
 8001768:	f7fe fef4 	bl	8000554 <__aeabi_i2d>
 800176c:	4604      	mov	r4, r0
 800176e:	460d      	mov	r5, r1
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	3302      	adds	r3, #2
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe feed 	bl	8000554 <__aeabi_i2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	ec43 2b11 	vmov	d1, r2, r3
 8001782:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8001800 <decodeGGA+0x428>
 8001786:	f00e fa77 	bl	800fc78 <pow>
 800178a:	ec53 2b10 	vmov	r2, r3, d0
 800178e:	4620      	mov	r0, r4
 8001790:	4629      	mov	r1, r5
 8001792:	f7ff f873 	bl	800087c <__aeabi_ddiv>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4640      	mov	r0, r8
 800179c:	4649      	mov	r1, r9
 800179e:	f7fe fd8d 	bl	80002bc <__adddf3>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff fa35 	bl	8000c18 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	601a      	str	r2, [r3, #0]
	inx++;  
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <decodeGGA+0x430>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <decodeGGA+0x430>)
 80017c0:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <decodeGGA+0x430>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <decodeGGA+0x430>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001808 <decodeGGA+0x430>)
 80017da:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 80017dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <decodeGGA+0x430>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a09      	ldr	r2, [pc, #36]	@ (8001808 <decodeGGA+0x430>)
 80017e4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	220c      	movs	r2, #12
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00a fb46 	bl	800be80 <memset>
	i=0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80017f8:	e02a      	b.n	8001850 <decodeGGA+0x478>
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	00000000 	.word	0x00000000
 8001804:	40240000 	.word	0x40240000
 8001808:	20000230 	.word	0x20000230
 800180c:	68db8bad 	.word	0x68db8bad
 8001810:	20000000 	.word	0x20000000
 8001814:	51eb851f 	.word	0x51eb851f
 8001818:	20000234 	.word	0x20000234
 800181c:	20000238 	.word	0x20000238
 8001820:	2000023c 	.word	0x2000023c
 8001824:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001828:	4b8b      	ldr	r3, [pc, #556]	@ (8001a58 <decodeGGA+0x680>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	7819      	ldrb	r1, [r3, #0]
 8001834:	f107 020c 	add.w	r2, r7, #12
 8001838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183a:	4413      	add	r3, r2
 800183c:	460a      	mov	r2, r1
 800183e:	701a      	strb	r2, [r3, #0]
		i++;
 8001840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001842:	3301      	adds	r3, #1
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001846:	4b84      	ldr	r3, [pc, #528]	@ (8001a58 <decodeGGA+0x680>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	4a82      	ldr	r2, [pc, #520]	@ (8001a58 <decodeGGA+0x680>)
 800184e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001850:	4b81      	ldr	r3, [pc, #516]	@ (8001a58 <decodeGGA+0x680>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b2c      	cmp	r3, #44	@ 0x2c
 800185e:	d1e3      	bne.n	8001828 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4618      	mov	r0, r3
 8001866:	f009 f9b7 	bl	800abd8 <atoi>
 800186a:	4603      	mov	r3, r0
 800186c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001872:	e002      	b.n	800187a <decodeGGA+0x4a2>
 8001874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001876:	3301      	adds	r3, #1
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800187a:	f107 020c 	add.w	r2, r7, #12
 800187e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b2e      	cmp	r3, #46	@ 0x2e
 8001886:	d1f5      	bne.n	8001874 <decodeGGA+0x49c>
	j++;
 8001888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188a:	3301      	adds	r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fd04 	bl	80002a0 <strlen>
 8001898:	4602      	mov	r2, r0
 800189a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80018a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a2:	f107 020c 	add.w	r2, r7, #12
 80018a6:	4413      	add	r3, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f009 f995 	bl	800abd8 <atoi>
 80018ae:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80018b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe4d 	bl	8000554 <__aeabi_i2d>
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b67      	ldr	r3, [pc, #412]	@ (8001a5c <decodeGGA+0x684>)
 80018c0:	f7fe ffdc 	bl	800087c <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4690      	mov	r8, r2
 80018ca:	4699      	mov	r9, r3
 80018cc:	69f8      	ldr	r0, [r7, #28]
 80018ce:	f7fe fe41 	bl	8000554 <__aeabi_i2d>
 80018d2:	4604      	mov	r4, r0
 80018d4:	460d      	mov	r5, r1
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	3302      	adds	r3, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe3a 	bl	8000554 <__aeabi_i2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	ec43 2b11 	vmov	d1, r2, r3
 80018e8:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 8001a50 <decodeGGA+0x678>
 80018ec:	f00e f9c4 	bl	800fc78 <pow>
 80018f0:	ec53 2b10 	vmov	r2, r3, d0
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe ffc0 	bl	800087c <__aeabi_ddiv>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4640      	mov	r0, r8
 8001902:	4649      	mov	r1, r9
 8001904:	f7fe fcda 	bl	80002bc <__adddf3>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f982 	bl	8000c18 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	609a      	str	r2, [r3, #8]
	inx++;
 800191e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a58 <decodeGGA+0x680>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a4c      	ldr	r2, [pc, #304]	@ (8001a58 <decodeGGA+0x680>)
 8001926:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001928:	4b4b      	ldr	r3, [pc, #300]	@ (8001a58 <decodeGGA+0x680>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001938:	4b47      	ldr	r3, [pc, #284]	@ (8001a58 <decodeGGA+0x680>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a46      	ldr	r2, [pc, #280]	@ (8001a58 <decodeGGA+0x680>)
 8001940:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001942:	4b45      	ldr	r3, [pc, #276]	@ (8001a58 <decodeGGA+0x680>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	4a43      	ldr	r2, [pc, #268]	@ (8001a58 <decodeGGA+0x680>)
 800194a:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800194c:	4b42      	ldr	r3, [pc, #264]	@ (8001a58 <decodeGGA+0x680>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a41      	ldr	r2, [pc, #260]	@ (8001a58 <decodeGGA+0x680>)
 8001954:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001956:	4b40      	ldr	r3, [pc, #256]	@ (8001a58 <decodeGGA+0x680>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	4a3e      	ldr	r2, [pc, #248]	@ (8001a58 <decodeGGA+0x680>)
 800195e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	220c      	movs	r2, #12
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f00a fa89 	bl	800be80 <memset>
	i=0;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001972:	e013      	b.n	800199c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 8001974:	4b38      	ldr	r3, [pc, #224]	@ (8001a58 <decodeGGA+0x680>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	7819      	ldrb	r1, [r3, #0]
 8001980:	f107 020c 	add.w	r2, r7, #12
 8001984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001986:	4413      	add	r3, r2
 8001988:	460a      	mov	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
		i++;
 800198c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198e:	3301      	adds	r3, #1
 8001990:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001992:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <decodeGGA+0x680>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	4a2f      	ldr	r2, [pc, #188]	@ (8001a58 <decodeGGA+0x680>)
 800199a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800199c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <decodeGGA+0x680>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b2c      	cmp	r3, #44	@ 0x2c
 80019aa:	d1e3      	bne.n	8001974 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	4618      	mov	r0, r3
 80019b2:	f009 f911 	bl	800abd8 <atoi>
 80019b6:	4602      	mov	r2, r0
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80019bc:	4b26      	ldr	r3, [pc, #152]	@ (8001a58 <decodeGGA+0x680>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a25      	ldr	r2, [pc, #148]	@ (8001a58 <decodeGGA+0x680>)
 80019c4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80019c6:	e004      	b.n	80019d2 <decodeGGA+0x5fa>
 80019c8:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <decodeGGA+0x680>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	4a22      	ldr	r2, [pc, #136]	@ (8001a58 <decodeGGA+0x680>)
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <decodeGGA+0x680>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b2c      	cmp	r3, #44	@ 0x2c
 80019e0:	d1f2      	bne.n	80019c8 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <decodeGGA+0x680>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a58 <decodeGGA+0x680>)
 80019ea:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	220c      	movs	r2, #12
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00a fa43 	bl	800be80 <memset>
	i=0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 80019fe:	e013      	b.n	8001a28 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8001a00:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <decodeGGA+0x680>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	7819      	ldrb	r1, [r3, #0]
 8001a0c:	f107 020c 	add.w	r2, r7, #12
 8001a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a12:	4413      	add	r3, r2
 8001a14:	460a      	mov	r2, r1
 8001a16:	701a      	strb	r2, [r3, #0]
		i++;
 8001a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <decodeGGA+0x680>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a0c      	ldr	r2, [pc, #48]	@ (8001a58 <decodeGGA+0x680>)
 8001a26:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <decodeGGA+0x680>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a36:	d1e3      	bne.n	8001a00 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f009 f8cb 	bl	800abd8 <atoi>
 8001a42:	4603      	mov	r3, r0
 8001a44:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 8001a4a:	e00c      	b.n	8001a66 <decodeGGA+0x68e>
 8001a4c:	f3af 8000 	nop.w
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40240000 	.word	0x40240000
 8001a58:	20000230 	.word	0x20000230
 8001a5c:	40590000 	.word	0x40590000
 8001a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a62:	3301      	adds	r3, #1
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a66:	f107 020c 	add.w	r2, r7, #12
 8001a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a72:	d1f5      	bne.n	8001a60 <decodeGGA+0x688>
	j++;
 8001a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a76:	3301      	adds	r3, #1
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fc0e 	bl	80002a0 <strlen>
 8001a84:	4602      	mov	r2, r0
 8001a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8e:	f107 020c 	add.w	r2, r7, #12
 8001a92:	4413      	add	r3, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f009 f89f 	bl	800abd8 <atoi>
 8001a9a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001a9c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd57 	bl	8000554 <__aeabi_i2d>
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	69f8      	ldr	r0, [r7, #28]
 8001aac:	f7fe fd52 	bl	8000554 <__aeabi_i2d>
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	4689      	mov	r9, r1
 8001ab4:	6a38      	ldr	r0, [r7, #32]
 8001ab6:	f7fe fd4d 	bl	8000554 <__aeabi_i2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ec43 2b11 	vmov	d1, r2, r3
 8001ac2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8001b20 <decodeGGA+0x748>
 8001ac6:	f00e f8d7 	bl	800fc78 <pow>
 8001aca:	ec53 2b10 	vmov	r2, r3, d0
 8001ace:	4640      	mov	r0, r8
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f7fe fed3 	bl	800087c <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fbed 	bl	80002bc <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f895 	bl	8000c18 <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	621a      	str	r2, [r3, #32]

	inx++;
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <decodeGGA+0x750>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <decodeGGA+0x750>)
 8001b00:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <decodeGGA+0x750>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 8001b14:	2300      	movs	r3, #0

}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3730      	adds	r7, #48	@ 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b20:	00000000 	.word	0x00000000
 8001b24:	40240000 	.word	0x40240000
 8001b28:	20000230 	.word	0x20000230

08001b2c <print>:
	#include"SPI.h"
	#include"utilities.h"
	volatile char command_ack[32];

void print(uint8_t data[], uint32_t len)
	{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
	int i=0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
	while(data[i]){
 8001b3a:	e009      	b.n	8001b50 <print+0x24>
		putchar(data[i]);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f00a f811 	bl	800bb6c <putchar>
		i++;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
	while(data[i]){
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ef      	bne.n	8001b3c <print+0x10>
	}
	printf("\n \r");
 8001b5c:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <print+0x40>)
 8001b5e:	f009 fff3 	bl	800bb48 <iprintf>
	}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	08010b50 	.word	0x08010b50

08001b70 <init_CSN_CE_PINS>:

void init_CSN_CE_PINS(){
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <init_CSN_CE_PINS+0x5c>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b78:	4a14      	ldr	r2, [pc, #80]	@ (8001bcc <init_CSN_CE_PINS+0x5c>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6313      	str	r3, [r2, #48]	@ 0x30
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER4, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <init_CSN_CE_PINS+0x60>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b88:	4a11      	ldr	r2, [pc, #68]	@ (8001bd0 <init_CSN_CE_PINS+0x60>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b8e:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER0, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 8001b90:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <init_CSN_CE_PINS+0x60>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 0303 	bic.w	r3, r3, #3
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <init_CSN_CE_PINS+0x60>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER, GPIO_MODER_MODER6, ESF_GPIO_MODER_OUTPUT); // no ack led
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <init_CSN_CE_PINS+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <init_CSN_CE_PINS+0x64>)
 8001baa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bae:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER, GPIO_MODER_MODER7, ESF_GPIO_MODER_OUTPUT); //  ack led
 8001bb0:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <init_CSN_CE_PINS+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bb8:	4a06      	ldr	r2, [pc, #24]	@ (8001bd4 <init_CSN_CE_PINS+0x64>)
 8001bba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400

08001bd8 <CSN_SELECT_NRF>:


	void CSN_SELECT_NRF(){
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BR_4; //pull low to enable nrf
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <CSN_SELECT_NRF+0x1c>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <CSN_SELECT_NRF+0x1c>)
 8001be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001be6:	6193      	str	r3, [r2, #24]
	}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <CSN_UNSELECT_NRF>:

	void CSN_UNSELECT_NRF(){
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BS_4; //make high to disable
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <CSN_UNSELECT_NRF+0x1c>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <CSN_UNSELECT_NRF+0x1c>)
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	6193      	str	r3, [r2, #24]
	}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40020000 	.word	0x40020000

08001c18 <NRF_ENABLE>:

	void NRF_ENABLE(){
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BS_0;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <NRF_ENABLE+0x1c>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <NRF_ENABLE+0x1c>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6193      	str	r3, [r2, #24]
	}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40020000 	.word	0x40020000

08001c38 <NRF_DISABLE>:

	void NRF_DISABLE(){
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BR_0;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <NRF_DISABLE+0x1c>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <NRF_DISABLE+0x1c>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c46:	6193      	str	r3, [r2, #24]
	}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40020000 	.word	0x40020000

08001c58 <NRF_WRITE_REGISTER>:



	void NRF_WRITE_REGISTER(uint8_t REG_ADDRESS,uint8_t data){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460a      	mov	r2, r1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71bb      	strb	r3, [r7, #6]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f043 0320 	orr.w	r3, r3, #32
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	733b      	strb	r3, [r7, #12]
		trans_buff[1]=data;
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	737b      	strb	r3, [r7, #13]
		CSN_SELECT_NRF();
 8001c76:	f7ff ffaf 	bl	8001bd8 <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,2);
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fa93 	bl	80021ac <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 8001c86:	f7ff ffb7 	bl	8001bf8 <CSN_UNSELECT_NRF>

	}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <NRF_WRITE_REG_MULTI_BYTES>:
	void NRF_WRITE_REG_MULTI_BYTES(uint8_t REG_ADDRESS,uint8_t* data_trans,int size_trans){
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	f043 0320 	orr.w	r3, r3, #32
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	753b      	strb	r3, [r7, #20]
		CSN_SELECT_NRF();
 8001caa:	f7ff ff95 	bl	8001bd8 <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,1);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fa79 	bl	80021ac <SPI_TX_MULTI>
		SPI_TX_MULTI(data_trans,size_trans);
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	68b8      	ldr	r0, [r7, #8]
 8001cbe:	f000 fa75 	bl	80021ac <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 8001cc2:	f7ff ff99 	bl	8001bf8 <CSN_UNSELECT_NRF>
	}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <NRF_READ_REGISTER>:

	uint8_t NRF_READ_REGISTER(uint8_t REG_ADDRESS){
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
		uint8_t data_returned=0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
		CSN_SELECT_NRF();
 8001cdc:	f7ff ff7c 	bl	8001bd8 <CSN_SELECT_NRF>
		SPI_TX_MULTI(&REG_ADDRESS,1);
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fa61 	bl	80021ac <SPI_TX_MULTI>
		SPI_READ_MULTI(&data_returned,1);
 8001cea:	f107 030f 	add.w	r3, r7, #15
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fa93 	bl	800221c <SPI_READ_MULTI>
		CSN_UNSELECT_NRF();
 8001cf6:	f7ff ff7f 	bl	8001bf8 <CSN_UNSELECT_NRF>
		return data_returned;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <NRF_PTX_CONFIG>:
		SPI_TX_MULTI(&REG_ADDRESS,1);
		SPI_READ_MULTI(RECV_BUFFER,RECV_BUFFER_SIZE);
		CSN_UNSELECT_NRF();
	}

	void NRF_PTX_CONFIG(uint8_t *Address, uint8_t channel){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
		NRF_DISABLE();
 8001d10:	f7ff ff92 	bl	8001c38 <NRF_DISABLE>
		NRF_WRITE_REGISTER(RF_CH,channel); //select channel
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	4619      	mov	r1, r3
 8001d18:	2005      	movs	r0, #5
 8001d1a:	f7ff ff9d 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR,Address,5); //set address
 8001d1e:	2205      	movs	r2, #5
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	2010      	movs	r0, #16
 8001d24:	f7ff ffb5 	bl	8001c92 <NRF_WRITE_REG_MULTI_BYTES>

		// un comment belowo code to setup for auto ack
		uint8_t current_pipe_status=NRF_READ_REGISTER(EN_RXADDR);
 8001d28:	2002      	movs	r0, #2
 8001d2a:	f7ff ffd0 	bl	8001cce <NRF_READ_REGISTER>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	73fb      	strb	r3, [r7, #15]
		current_pipe_status=current_pipe_status|(1<<0);//enable pipe 1
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
		NRF_WRITE_REGISTER(EN_RXADDR,current_pipe_status);
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2002      	movs	r0, #2
 8001d40:	f7ff ff8a 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0,Address,5); //pipe address
 8001d44:	2205      	movs	r2, #5
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f7ff ffa2 	bl	8001c92 <NRF_WRITE_REG_MULTI_BYTES>

		NRF_WRITE_REGISTER(CONFIG,0x0a); //powwr on device and keep in tx mode
 8001d4e:	210a      	movs	r1, #10
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff ff81 	bl	8001c58 <NRF_WRITE_REGISTER>
		delay(5);
 8001d56:	2005      	movs	r0, #5
 8001d58:	f7ff f974 	bl	8001044 <delay>
		//NRF_ENABLE();
	}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <nrf24_reset>:
		NRF_WRITE_REGISTER(CONFIG,0x0b); //powwr on device and keep in tx mode
		NRF_ENABLE();
	}

	void nrf24_reset(uint8_t REG)
	{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
		if (REG == STATUS)
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b07      	cmp	r3, #7
 8001d72:	d104      	bne.n	8001d7e <nrf24_reset+0x1a>
		{
			NRF_WRITE_REGISTER(STATUS, 0x00);
 8001d74:	2100      	movs	r1, #0
 8001d76:	2007      	movs	r0, #7
 8001d78:	f7ff ff6e 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
		NRF_WRITE_REGISTER(DYNPD, 0);
		NRF_WRITE_REGISTER(FEATURE, 0);
		}
	}
 8001d7c:	e090      	b.n	8001ea0 <nrf24_reset+0x13c>
		else if (REG == FIFO_STATUS)
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2b17      	cmp	r3, #23
 8001d82:	d104      	bne.n	8001d8e <nrf24_reset+0x2a>
			NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 8001d84:	2111      	movs	r1, #17
 8001d86:	2017      	movs	r0, #23
 8001d88:	f7ff ff66 	bl	8001c58 <NRF_WRITE_REGISTER>
	}
 8001d8c:	e088      	b.n	8001ea0 <nrf24_reset+0x13c>
		NRF_WRITE_REGISTER(CONFIG, 0x08);
 8001d8e:	2108      	movs	r1, #8
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff ff61 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3F);
 8001d96:	213f      	movs	r1, #63	@ 0x3f
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff ff5d 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_RXADDR, 0x03);
 8001d9e:	2103      	movs	r1, #3
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7ff ff59 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_AW, 0x03);
 8001da6:	2103      	movs	r1, #3
 8001da8:	2003      	movs	r0, #3
 8001daa:	f7ff ff55 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0x03);
 8001dae:	2103      	movs	r1, #3
 8001db0:	2004      	movs	r0, #4
 8001db2:	f7ff ff51 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_CH, 0x02);
 8001db6:	2102      	movs	r1, #2
 8001db8:	2005      	movs	r0, #5
 8001dba:	f7ff ff4d 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_SETUP, 0x0E);
 8001dbe:	210e      	movs	r1, #14
 8001dc0:	2006      	movs	r0, #6
 8001dc2:	f7ff ff49 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(STATUS, 0x00);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2007      	movs	r0, #7
 8001dca:	f7ff ff45 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(OBSERVE_TX, 0x00);
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2008      	movs	r0, #8
 8001dd2:	f7ff ff41 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(CD, 0x00);
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2009      	movs	r0, #9
 8001dda:	f7ff ff3d 	bl	8001c58 <NRF_WRITE_REGISTER>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001dde:	4a32      	ldr	r2, [pc, #200]	@ (8001ea8 <nrf24_reset+0x144>)
 8001de0:	f107 0318 	add.w	r3, r7, #24
 8001de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001de8:	6018      	str	r0, [r3, #0]
 8001dea:	3304      	adds	r3, #4
 8001dec:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	2205      	movs	r2, #5
 8001df4:	4619      	mov	r1, r3
 8001df6:	200a      	movs	r0, #10
 8001df8:	f7ff ff4b 	bl	8001c92 <NRF_WRITE_REG_MULTI_BYTES>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8001eac <nrf24_reset+0x148>)
 8001dfe:	f107 0310 	add.w	r3, r7, #16
 8001e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e06:	6018      	str	r0, [r3, #0]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	2205      	movs	r2, #5
 8001e12:	4619      	mov	r1, r3
 8001e14:	200b      	movs	r0, #11
 8001e16:	f7ff ff3c 	bl	8001c92 <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_ADDR_P2, 0xC3);
 8001e1a:	21c3      	movs	r1, #195	@ 0xc3
 8001e1c:	200c      	movs	r0, #12
 8001e1e:	f7ff ff1b 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P3, 0xC4);
 8001e22:	21c4      	movs	r1, #196	@ 0xc4
 8001e24:	200d      	movs	r0, #13
 8001e26:	f7ff ff17 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P4, 0xC5);
 8001e2a:	21c5      	movs	r1, #197	@ 0xc5
 8001e2c:	200e      	movs	r0, #14
 8001e2e:	f7ff ff13 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P5, 0xC6);
 8001e32:	21c6      	movs	r1, #198	@ 0xc6
 8001e34:	200f      	movs	r0, #15
 8001e36:	f7ff ff0f 	bl	8001c58 <NRF_WRITE_REGISTER>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <nrf24_reset+0x144>)
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e44:	6018      	str	r0, [r3, #0]
 8001e46:	3304      	adds	r3, #4
 8001e48:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR, tx_addr_def, 5);
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	2205      	movs	r2, #5
 8001e50:	4619      	mov	r1, r3
 8001e52:	2010      	movs	r0, #16
 8001e54:	f7ff ff1d 	bl	8001c92 <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_PW_P0, 0);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2011      	movs	r0, #17
 8001e5c:	f7ff fefc 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P1, 0);
 8001e60:	2100      	movs	r1, #0
 8001e62:	2012      	movs	r0, #18
 8001e64:	f7ff fef8 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P2, 0);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2013      	movs	r0, #19
 8001e6c:	f7ff fef4 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P3, 0);
 8001e70:	2100      	movs	r1, #0
 8001e72:	2014      	movs	r0, #20
 8001e74:	f7ff fef0 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P4, 0);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2015      	movs	r0, #21
 8001e7c:	f7ff feec 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
 8001e80:	2100      	movs	r1, #0
 8001e82:	2016      	movs	r0, #22
 8001e84:	f7ff fee8 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 8001e88:	2111      	movs	r1, #17
 8001e8a:	2017      	movs	r0, #23
 8001e8c:	f7ff fee4 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(DYNPD, 0);
 8001e90:	2100      	movs	r1, #0
 8001e92:	201c      	movs	r0, #28
 8001e94:	f7ff fee0 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FEATURE, 0);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	201d      	movs	r0, #29
 8001e9c:	f7ff fedc 	bl	8001c58 <NRF_WRITE_REGISTER>
	}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	08010b54 	.word	0x08010b54
 8001eac:	08010b5c 	.word	0x08010b5c

08001eb0 <NRF_INIT>:


	void NRF_INIT(){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
		SPI_INIT(); //initalize spi comms
 8001eb4:	f000 f920 	bl	80020f8 <SPI_INIT>
		init_CSN_CE_PINS();
 8001eb8:	f7ff fe5a 	bl	8001b70 <init_CSN_CE_PINS>
		NRF_DISABLE();
 8001ebc:	f7ff febc 	bl	8001c38 <NRF_DISABLE>
		nrf24_reset(0);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff ff4f 	bl	8001d64 <nrf24_reset>
		NRF_WRITE_REGISTER(CONFIG, 0);  // will be configured later
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff fec5 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x00);  // No Auto ACK
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f7ff fec1 	bl	8001c58 <NRF_WRITE_REGISTER>

		/*uncomment below code to enable auto ack stuff*/
		//NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
		//NRF_WRITE_REGISTER(SETUP_RETR, 0x03); // 15 retries, 500µs delay

		NRF_WRITE_REGISTER (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f7ff febd 	bl	8001c58 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001ede:	2103      	movs	r1, #3
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f7ff feb9 	bl	8001c58 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_RETR, 0x00);   // No retransmission
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2004      	movs	r0, #4
 8001eea:	f7ff feb5 	bl	8001c58 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_CH, 0);  // will be setup during Tx or RX
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2005      	movs	r0, #5
 8001ef2:	f7ff feb1 	bl	8001c58 <NRF_WRITE_REGISTER>

		//enable dynamic payloads on all pipes
		//for DYNP I require EN_AA and Requires EN_DPL and ENAA_P0
		NRF_WRITE_REGISTER (DYNPD, 0x3f);  // will be setup during Tx or RX
 8001ef6:	213f      	movs	r1, #63	@ 0x3f
 8001ef8:	201c      	movs	r0, #28
 8001efa:	f7ff fead 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER (FEATURE, 0x6);  // enable dynamic payload length
 8001efe:	2106      	movs	r1, #6
 8001f00:	201d      	movs	r0, #29
 8001f02:	f7ff fea9 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
 8001f06:	213f      	movs	r1, #63	@ 0x3f
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff fea5 	bl	8001c58 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0xff); // 15 retries, 500µs delay
 8001f0e:	21ff      	movs	r1, #255	@ 0xff
 8001f10:	2004      	movs	r0, #4
 8001f12:	f7ff fea1 	bl	8001c58 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_SETUP, 0x0e);   // Power= 0db, data rate = 2Mbps
 8001f16:	210e      	movs	r1, #14
 8001f18:	2006      	movs	r0, #6
 8001f1a:	f7ff fe9d 	bl	8001c58 <NRF_WRITE_REGISTER>
		//NRF_ENABLE();
	}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <NRD_SEND_CMD>:


	void NRD_SEND_CMD (uint8_t cmd)
	{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
		// Pull the CS Pin LOW to select the device
		CSN_SELECT_NRF();
 8001f2c:	f7ff fe54 	bl	8001bd8 <CSN_SELECT_NRF>

		SPI_TX_MULTI(&cmd, 1);
 8001f30:	1dfb      	adds	r3, r7, #7
 8001f32:	2101      	movs	r1, #1
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f939 	bl	80021ac <SPI_TX_MULTI>

		// Pull the CS HIGH to release the device
		CSN_UNSELECT_NRF();
 8001f3a:	f7ff fe5d 	bl	8001bf8 <CSN_UNSELECT_NRF>
	}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <NRF_TX_DATA>:


	uint8_t NRF_TX_DATA(uint8_t *data_ptr,uint8_t sizeofdata){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
		uint8_t tx_fifo_stat;
		uint8_t status_reg;
		CSN_SELECT_NRF();
 8001f54:	f7ff fe40 	bl	8001bd8 <CSN_SELECT_NRF>
	   uint8_t cmd = W_TX_PAYLOAD;
 8001f58:	23a0      	movs	r3, #160	@ 0xa0
 8001f5a:	737b      	strb	r3, [r7, #13]
	  SPI_TX_MULTI( &cmd, 1);
 8001f5c:	f107 030d 	add.w	r3, r7, #13
 8001f60:	2101      	movs	r1, #1
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f922 	bl	80021ac <SPI_TX_MULTI>
		SPI_TX_MULTI(data_ptr,sizeofdata);//send payload
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f91d 	bl	80021ac <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 8001f72:	f7ff fe41 	bl	8001bf8 <CSN_UNSELECT_NRF>
		NRF_ENABLE();
 8001f76:	f7ff fe4f 	bl	8001c18 <NRF_ENABLE>
		delay(10);
 8001f7a:	200a      	movs	r0, #10
 8001f7c:	f7ff f862 	bl	8001044 <delay>
		NRF_DISABLE();
 8001f80:	f7ff fe5a 	bl	8001c38 <NRF_DISABLE>
		tx_fifo_stat=NRF_READ_REGISTER(FIFO_STATUS);
 8001f84:	2017      	movs	r0, #23
 8001f86:	f7ff fea2 	bl	8001cce <NRF_READ_REGISTER>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	73fb      	strb	r3, [r7, #15]
		status_reg=NRF_READ_REGISTER(STATUS);
 8001f8e:	2007      	movs	r0, #7
 8001f90:	f7ff fe9d 	bl	8001cce <NRF_READ_REGISTER>
 8001f94:	4603      	mov	r3, r0
 8001f96:	73bb      	strb	r3, [r7, #14]


		NRF_ENABLE();
 8001f98:	f7ff fe3e 	bl	8001c18 <NRF_ENABLE>
		delay(10);
 8001f9c:	200a      	movs	r0, #10
 8001f9e:	f7ff f851 	bl	8001044 <delay>
		if(is_data_on_pipe(0)==1){
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 f868 	bl	8002078 <is_data_on_pipe>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d11d      	bne.n	8001fea <NRF_TX_DATA+0xa2>
			GPIOB->BSRR |=GPIO_BSRR_BS_7;
 8001fae:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <NRF_TX_DATA+0x11c>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002064 <NRF_TX_DATA+0x11c>)
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb8:	6193      	str	r3, [r2, #24]
			delay(300);
 8001fba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001fbe:	f7ff f841 	bl	8001044 <delay>
			GPIOB->BSRR |=GPIO_BSRR_BR_7;
 8001fc2:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <NRF_TX_DATA+0x11c>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	4a27      	ldr	r2, [pc, #156]	@ (8002064 <NRF_TX_DATA+0x11c>)
 8001fc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fcc:	6193      	str	r3, [r2, #24]
			delay(300);
 8001fce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001fd2:	f7ff f837 	bl	8001044 <delay>
			print_success("ACK RECIEVED FROM PRX NODE ! \n \r");
 8001fd6:	4824      	ldr	r0, [pc, #144]	@ (8002068 <NRF_TX_DATA+0x120>)
 8001fd8:	f000 fe12 	bl	8002c00 <print_success>
			NRF_RECV_DATA(command_ack);
 8001fdc:	4823      	ldr	r0, [pc, #140]	@ (800206c <NRF_TX_DATA+0x124>)
 8001fde:	f000 f865 	bl	80020ac <NRF_RECV_DATA>
			print(command_ack,32);
 8001fe2:	2120      	movs	r1, #32
 8001fe4:	4821      	ldr	r0, [pc, #132]	@ (800206c <NRF_TX_DATA+0x124>)
 8001fe6:	f7ff fda1 	bl	8001b2c <print>
			NRD_SEND_CMD(cmd);
			NRF_WRITE_REGISTER(FIFO_STATUS, 0x11); //reset fifo
			return 1;
		}
*/
		if(status_reg &(1<<4)){
 8001fea:	7bbb      	ldrb	r3, [r7, #14]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d031      	beq.n	8002058 <NRF_TX_DATA+0x110>
			print_error("\n\rMax number of retransmission Reached !\n \r");
 8001ff4:	481e      	ldr	r0, [pc, #120]	@ (8002070 <NRF_TX_DATA+0x128>)
 8001ff6:	f000 fe1f 	bl	8002c38 <print_error>
			GPIOB->BSRR |=GPIO_BSRR_BS_6;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <NRF_TX_DATA+0x11c>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	4a19      	ldr	r2, [pc, #100]	@ (8002064 <NRF_TX_DATA+0x11c>)
 8002000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002004:	6193      	str	r3, [r2, #24]
			delay(300);
 8002006:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800200a:	f7ff f81b 	bl	8001044 <delay>
			GPIOB->BSRR |=GPIO_BSRR_BR_6;
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <NRF_TX_DATA+0x11c>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <NRF_TX_DATA+0x11c>)
 8002014:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002018:	6193      	str	r3, [r2, #24]
			delay(300);
 800201a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800201e:	f7ff f811 	bl	8001044 <delay>
			status_reg=status_reg|(1<<4)|(1<<5);
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002028:	73bb      	strb	r3, [r7, #14]
			NRF_WRITE_REGISTER(STATUS,status_reg);
 800202a:	7bbb      	ldrb	r3, [r7, #14]
 800202c:	4619      	mov	r1, r3
 800202e:	2007      	movs	r0, #7
 8002030:	f7ff fe12 	bl	8001c58 <NRF_WRITE_REGISTER>
			status_reg=NRF_READ_REGISTER(STATUS);
 8002034:	2007      	movs	r0, #7
 8002036:	f7ff fe4a 	bl	8001cce <NRF_READ_REGISTER>
 800203a:	4603      	mov	r3, r0
 800203c:	73bb      	strb	r3, [r7, #14]
			print_info("Clearing MAX retransmission flag ! \n \r");
 800203e:	480d      	ldr	r0, [pc, #52]	@ (8002074 <NRF_TX_DATA+0x12c>)
 8002040:	f000 fdec 	bl	8002c1c <print_info>
			cmd=FLUSH_TX;
 8002044:	23e1      	movs	r3, #225	@ 0xe1
 8002046:	737b      	strb	r3, [r7, #13]
		 NRD_SEND_CMD(cmd);
 8002048:	7b7b      	ldrb	r3, [r7, #13]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff69 	bl	8001f22 <NRD_SEND_CMD>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11); //reset fifo
 8002050:	2111      	movs	r1, #17
 8002052:	2017      	movs	r0, #23
 8002054:	f7ff fe00 	bl	8001c58 <NRF_WRITE_REGISTER>

		}

		return 0;
 8002058:	2300      	movs	r3, #0

	}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40020400 	.word	0x40020400
 8002068:	08010b64 	.word	0x08010b64
 800206c:	20000240 	.word	0x20000240
 8002070:	08010b88 	.word	0x08010b88
 8002074:	08010bb4 	.word	0x08010bb4

08002078 <is_data_on_pipe>:

uint8_t is_data_on_pipe(uint8_t pipenum){
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
uint8_t status_reg=NRF_READ_REGISTER(STATUS);
 8002082:	2007      	movs	r0, #7
 8002084:	f7ff fe23 	bl	8001cce <NRF_READ_REGISTER>
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]
//if 6 th bit is set and respective data pipe is set
if((status_reg & (1<<6))){
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <is_data_on_pipe+0x2a>
//clear rx_dr
	NRF_WRITE_REGISTER(STATUS,(1<<6));
 8002096:	2140      	movs	r1, #64	@ 0x40
 8002098:	2007      	movs	r0, #7
 800209a:	f7ff fddd 	bl	8001c58 <NRF_WRITE_REGISTER>
	return 1; //data recieved
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <is_data_on_pipe+0x2c>
}
return 0;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <NRF_RECV_DATA>:
	return (uint8_t)(SPI1->DR);
}

//this code needs to  be modefied for dyanmic first we will send
//R_RX_PL_WID first and then R_RX_PAYLOAD
void NRF_RECV_DATA(uint8_t *data_ptr_RECV){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	//f
	uint8_t cmd = R_RX_PL_WID;
 80020b4:	2360      	movs	r3, #96	@ 0x60
 80020b6:	73bb      	strb	r3, [r7, #14]
	uint8_t payLoad_width=0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
	CSN_SELECT_NRF();
 80020bc:	f7ff fd8c 	bl	8001bd8 <CSN_SELECT_NRF>
	//payLoad_width=NRF_SEND_PAYLOAD_WIDTH_READ(cmd);
	//printf("\n \r  payloadWidth %d \n \r",payLoad_width);
	//next comand to read payload
	cmd=R_RX_PAYLOAD;
 80020c0:	2361      	movs	r3, #97	@ 0x61
 80020c2:	73bb      	strb	r3, [r7, #14]
	SPI_TX_MULTI( &cmd, 1);
 80020c4:	f107 030e 	add.w	r3, r7, #14
 80020c8:	2101      	movs	r1, #1
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f86e 	bl	80021ac <SPI_TX_MULTI>
	SPI_READ_MULTI(data_ptr_RECV,10);//recieve data
 80020d0:	210a      	movs	r1, #10
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8a2 	bl	800221c <SPI_READ_MULTI>
	CSN_UNSELECT_NRF();
 80020d8:	f7ff fd8e 	bl	8001bf8 <CSN_UNSELECT_NRF>
	delay(10);
 80020dc:	200a      	movs	r0, #10
 80020de:	f7fe ffb1 	bl	8001044 <delay>
	cmd=FLUSH_RX;
 80020e2:	23e2      	movs	r3, #226	@ 0xe2
 80020e4:	73bb      	strb	r3, [r7, #14]
	NRD_SEND_CMD(cmd); //flush rx fifo
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff1a 	bl	8001f22 <NRD_SEND_CMD>

}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <SPI_INIT>:
#include"SPI.h"
#include"stdio.h"
#define AF05  (0x05)


void SPI_INIT(){
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
	//enable clock for GPIOA
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 80020fc:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <SPI_INIT+0xa8>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	4a27      	ldr	r2, [pc, #156]	@ (80021a0 <SPI_INIT+0xa8>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA5, PA6 and PA7 to alternate function mode
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1;
 8002108:	4b26      	ldr	r3, [pc, #152]	@ (80021a4 <SPI_INIT+0xac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a25      	ldr	r2, [pc, #148]	@ (80021a4 <SPI_INIT+0xac>)
 800210e:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8002112:	6013      	str	r3, [r2, #0]
	//set which type of alternate function is
	GPIOA->AFR[0]|=(AF05<<20)|(AF05<<24)|(AF05<<28);
 8002114:	4b23      	ldr	r3, [pc, #140]	@ (80021a4 <SPI_INIT+0xac>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a22      	ldr	r2, [pc, #136]	@ (80021a4 <SPI_INIT+0xac>)
 800211a:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 800211e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8002122:	6213      	str	r3, [r2, #32]
	//enable clock access to SPI1
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN;
 8002124:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <SPI_INIT+0xa8>)
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	4a1d      	ldr	r2, [pc, #116]	@ (80021a0 <SPI_INIT+0xa8>)
 800212a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800212e:	6453      	str	r3, [r2, #68]	@ 0x44
	//set software slave managment
	SPI1->CR1|=SPI_CR1_SSM|SPI_CR1_SSI;
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <SPI_INIT+0xb0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1c      	ldr	r2, [pc, #112]	@ (80021a8 <SPI_INIT+0xb0>)
 8002136:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800213a:	6013      	str	r3, [r2, #0]
	//set SPI in master mode
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_MSTR, 1);
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <SPI_INIT+0xb0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a19      	ldr	r2, [pc, #100]	@ (80021a8 <SPI_INIT+0xb0>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_BR,  3);
 8002148:	4b17      	ldr	r3, [pc, #92]	@ (80021a8 <SPI_INIT+0xb0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002150:	4a15      	ldr	r2, [pc, #84]	@ (80021a8 <SPI_INIT+0xb0>)
 8002152:	f043 0318 	orr.w	r3, r3, #24
 8002156:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPHA, 0);
 8002158:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <SPI_INIT+0xb0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a12      	ldr	r2, [pc, #72]	@ (80021a8 <SPI_INIT+0xb0>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPOL, 0);
 8002164:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <SPI_INIT+0xb0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0f      	ldr	r2, [pc, #60]	@ (80021a8 <SPI_INIT+0xb0>)
 800216a:	f023 0302 	bic.w	r3, r3, #2
 800216e:	6013      	str	r3, [r2, #0]
	//MODIFY_FIELD(SPI1->CR1, SPI_CR1_LSBFIRST, 1);
	SPI1->CR2 |= 0x4;
 8002170:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <SPI_INIT+0xb0>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a0c      	ldr	r2, [pc, #48]	@ (80021a8 <SPI_INIT+0xb0>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x40; // Enabling SPI SPI periph
 800217c:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <SPI_INIT+0xb0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a09      	ldr	r2, [pc, #36]	@ (80021a8 <SPI_INIT+0xb0>)
 8002182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002186:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_SPE, 1);
 8002188:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <SPI_INIT+0xb0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a06      	ldr	r2, [pc, #24]	@ (80021a8 <SPI_INIT+0xb0>)
 800218e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020000 	.word	0x40020000
 80021a8:	40013000 	.word	0x40013000

080021ac <SPI_TX_MULTI>:

//send multiple bytes in case size>1
void SPI_TX_MULTI(uint8_t *data_ptr,int size){
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
int i=0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
uint8_t temp;
while(i<size){
 80021ba:	e00f      	b.n	80021dc <SPI_TX_MULTI+0x30>
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 80021bc:	bf00      	nop
 80021be:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <SPI_TX_MULTI+0x6c>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f9      	beq.n	80021be <SPI_TX_MULTI+0x12>
	SPI1->DR = data_ptr[i];
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <SPI_TX_MULTI+0x6c>)
 80021d4:	60da      	str	r2, [r3, #12]
	i++;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
while(i<size){
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	dbeb      	blt.n	80021bc <SPI_TX_MULTI+0x10>
}
/*Wait until TXE is set*/
while(!(SPI1->SR & (SPI_SR_TXE))){}
 80021e4:	bf00      	nop
 80021e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <SPI_TX_MULTI+0x6c>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f9      	beq.n	80021e6 <SPI_TX_MULTI+0x3a>

/*Wait for BUSY flag to reset*/
while((SPI1->SR & (SPI_SR_BSY))){}
 80021f2:	bf00      	nop
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <SPI_TX_MULTI+0x6c>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <SPI_TX_MULTI+0x48>

/*Clear OVR flag*/
temp = SPI1->DR;
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <SPI_TX_MULTI+0x6c>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	72fb      	strb	r3, [r7, #11]
temp = SPI1->SR;
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <SPI_TX_MULTI+0x6c>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	72fb      	strb	r3, [r7, #11]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40013000 	.word	0x40013000

0800221c <SPI_READ_MULTI>:


void SPI_READ_MULTI(uint8_t *data_ptr,int size){
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	while(size)
 8002226:	e013      	b.n	8002250 <SPI_READ_MULTI+0x34>
	{
		/*Send dummy data*/
		SPI1->DR =0;
 8002228:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <SPI_READ_MULTI+0x48>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]

		/*Wait for RXNE flag to be set*/
		while(!(SPI1->SR & (SPI_SR_RXNE))){}
 800222e:	bf00      	nop
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <SPI_READ_MULTI+0x48>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f9      	beq.n	8002230 <SPI_READ_MULTI+0x14>

		/*Read data from data register*/
		*data_ptr++ = (SPI1->DR);
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <SPI_READ_MULTI+0x48>)
 800223e:	68d9      	ldr	r1, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	b2ca      	uxtb	r2, r1
 8002248:	701a      	strb	r2, [r3, #0]
		size--;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	603b      	str	r3, [r7, #0]
	while(size)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1e8      	bne.n	8002228 <SPI_READ_MULTI+0xc>
	}
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40013000 	.word	0x40013000

08002268 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002272:	4804      	ldr	r0, [pc, #16]	@ (8002284 <SELECT+0x1c>)
 8002274:	f003 f9ec 	bl	8005650 <HAL_GPIO_WritePin>
 delay(10);
 8002278:	200a      	movs	r0, #10
 800227a:	f7fe fee3 	bl	8001044 <delay>
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40020400 	.word	0x40020400

08002288 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800228c:	2201      	movs	r2, #1
 800228e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002292:	4804      	ldr	r0, [pc, #16]	@ (80022a4 <DESELECT+0x1c>)
 8002294:	f003 f9dc 	bl	8005650 <HAL_GPIO_WritePin>
  delay(10);
 8002298:	200a      	movs	r0, #10
 800229a:	f7fe fed3 	bl	8001044 <delay>
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40020400 	.word	0x40020400

080022a8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80022b2:	bf00      	nop
 80022b4:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <SPI_TxByte+0x30>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d1f8      	bne.n	80022b4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80022c2:	1df9      	adds	r1, r7, #7
 80022c4:	2364      	movs	r3, #100	@ 0x64
 80022c6:	2201      	movs	r2, #1
 80022c8:	4803      	ldr	r0, [pc, #12]	@ (80022d8 <SPI_TxByte+0x30>)
 80022ca:	f003 fefc 	bl	80060c6 <HAL_SPI_Transmit>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000350 	.word	0x20000350

080022dc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80022e8:	bf00      	nop
 80022ea:	4b08      	ldr	r3, [pc, #32]	@ (800230c <SPI_TxBuffer+0x30>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d1f8      	bne.n	80022ea <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80022f8:	887a      	ldrh	r2, [r7, #2]
 80022fa:	2364      	movs	r3, #100	@ 0x64
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4803      	ldr	r0, [pc, #12]	@ (800230c <SPI_TxBuffer+0x30>)
 8002300:	f003 fee1 	bl	80060c6 <HAL_SPI_Transmit>
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000350 	.word	0x20000350

08002310 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8002316:	23ff      	movs	r3, #255	@ 0xff
 8002318:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800231a:	bf00      	nop
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <SPI_RxByte+0x34>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b02      	cmp	r3, #2
 8002328:	d1f8      	bne.n	800231c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800232a:	1dba      	adds	r2, r7, #6
 800232c:	1df9      	adds	r1, r7, #7
 800232e:	2364      	movs	r3, #100	@ 0x64
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2301      	movs	r3, #1
 8002334:	4803      	ldr	r0, [pc, #12]	@ (8002344 <SPI_RxByte+0x34>)
 8002336:	f004 f80a 	bl	800634e <HAL_SPI_TransmitReceive>

  return data;
 800233a:	79bb      	ldrb	r3, [r7, #6]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000350 	.word	0x20000350

08002348 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002350:	f7ff ffde 	bl	8002310 <SPI_RxByte>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	701a      	strb	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800236a:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <SD_ReadyWait+0x30>)
 800236c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002370:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8002372:	f7ff ffcd 	bl	8002310 <SPI_RxByte>
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2bff      	cmp	r3, #255	@ 0xff
 800237e:	d003      	beq.n	8002388 <SD_ReadyWait+0x24>
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <SD_ReadyWait+0x30>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f4      	bne.n	8002372 <SD_ReadyWait+0xe>

  return res;
 8002388:	79fb      	ldrb	r3, [r7, #7]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000262 	.word	0x20000262

08002398 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800239e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80023a2:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80023a4:	f7ff ff70 	bl	8002288 <DESELECT>
  for(int i = 0; i < 10; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	e005      	b.n	80023ba <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80023ae:	20ff      	movs	r0, #255	@ 0xff
 80023b0:	f7ff ff7a 	bl	80022a8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	3301      	adds	r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b09      	cmp	r3, #9
 80023be:	ddf6      	ble.n	80023ae <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80023c0:	f7ff ff52 	bl	8002268 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80023c4:	2340      	movs	r3, #64	@ 0x40
 80023c6:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 80023d8:	2395      	movs	r3, #149	@ 0x95
 80023da:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80023dc:	463b      	mov	r3, r7
 80023de:	2106      	movs	r1, #6
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff7b 	bl	80022dc <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80023e6:	e002      	b.n	80023ee <SD_PowerOn+0x56>
  {
    cnt--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80023ee:	f7ff ff8f 	bl	8002310 <SPI_RxByte>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d002      	beq.n	80023fe <SD_PowerOn+0x66>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f4      	bne.n	80023e8 <SD_PowerOn+0x50>
  }

  DESELECT();
 80023fe:	f7ff ff43 	bl	8002288 <DESELECT>
  SPI_TxByte(0XFF);
 8002402:	20ff      	movs	r0, #255	@ 0xff
 8002404:	f7ff ff50 	bl	80022a8 <SPI_TxByte>

  PowerFlag = 1;
 8002408:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <SD_PowerOn+0x80>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000265 	.word	0x20000265

0800241c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <SD_PowerOff+0x14>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	20000265 	.word	0x20000265

08002434 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return PowerFlag;
 8002438:	4b03      	ldr	r3, [pc, #12]	@ (8002448 <SD_CheckPower+0x14>)
 800243a:	781b      	ldrb	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000265 	.word	0x20000265

0800244c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8002456:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <SD_RxDataBlock+0x58>)
 8002458:	22c8      	movs	r2, #200	@ 0xc8
 800245a:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800245c:	f7ff ff58 	bl	8002310 <SPI_RxByte>
 8002460:	4603      	mov	r3, r0
 8002462:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2bff      	cmp	r3, #255	@ 0xff
 8002468:	d103      	bne.n	8002472 <SD_RxDataBlock+0x26>
 800246a:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <SD_RxDataBlock+0x58>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f4      	bne.n	800245c <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2bfe      	cmp	r3, #254	@ 0xfe
 8002476:	d001      	beq.n	800247c <SD_RxDataBlock+0x30>
 8002478:	2300      	movs	r3, #0
 800247a:	e00f      	b.n	800249c <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff60 	bl	8002348 <SPI_RxBytePtr>
  } while(len--);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	1e5a      	subs	r2, r3, #1
 800248c:	603a      	str	r2, [r7, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f4      	bne.n	800247c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8002492:	f7ff ff3d 	bl	8002310 <SPI_RxByte>
  SPI_RxByte();
 8002496:	f7ff ff3b 	bl	8002310 <SPI_RxByte>

  return TRUE;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000260 	.word	0x20000260

080024a8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80024b8:	f7ff ff54 	bl	8002364 <SD_ReadyWait>
 80024bc:	4603      	mov	r3, r0
 80024be:	2bff      	cmp	r3, #255	@ 0xff
 80024c0:	d001      	beq.n	80024c6 <SD_TxDataBlock+0x1e>
 80024c2:	2300      	movs	r3, #0
 80024c4:	e02f      	b.n	8002526 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff feed 	bl	80022a8 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	2bfd      	cmp	r3, #253	@ 0xfd
 80024d2:	d020      	beq.n	8002516 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80024d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff feff 	bl	80022dc <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80024de:	f7ff ff17 	bl	8002310 <SPI_RxByte>
    SPI_RxByte();
 80024e2:	f7ff ff15 	bl	8002310 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80024e6:	e00b      	b.n	8002500 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80024e8:	f7ff ff12 	bl	8002310 <SPI_RxByte>
 80024ec:	4603      	mov	r3, r0
 80024ee:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d006      	beq.n	8002508 <SD_TxDataBlock+0x60>
      i++;
 80024fa:	7bbb      	ldrb	r3, [r7, #14]
 80024fc:	3301      	adds	r3, #1
 80024fe:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8002500:	7bbb      	ldrb	r3, [r7, #14]
 8002502:	2b40      	cmp	r3, #64	@ 0x40
 8002504:	d9f0      	bls.n	80024e8 <SD_TxDataBlock+0x40>
 8002506:	e000      	b.n	800250a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8002508:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800250a:	bf00      	nop
 800250c:	f7ff ff00 	bl	8002310 <SPI_RxByte>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0fa      	beq.n	800250c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	2b05      	cmp	r3, #5
 800251e:	d101      	bne.n	8002524 <SD_TxDataBlock+0x7c>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <SD_TxDataBlock+0x7e>

  return FALSE;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	6039      	str	r1, [r7, #0]
 8002538:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800253a:	f7ff ff13 	bl	8002364 <SD_ReadyWait>
 800253e:	4603      	mov	r3, r0
 8002540:	2bff      	cmp	r3, #255	@ 0xff
 8002542:	d001      	beq.n	8002548 <SD_SendCmd+0x1a>
 8002544:	23ff      	movs	r3, #255	@ 0xff
 8002546:	e042      	b.n	80025ce <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff feac 	bl	80022a8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	0e1b      	lsrs	r3, r3, #24
 8002554:	b2db      	uxtb	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fea6 	bl	80022a8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fea0 	bl	80022a8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe9a 	bl	80022a8 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fe95 	bl	80022a8 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2b40      	cmp	r3, #64	@ 0x40
 8002582:	d102      	bne.n	800258a <SD_SendCmd+0x5c>
 8002584:	2395      	movs	r3, #149	@ 0x95
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e007      	b.n	800259a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	2b48      	cmp	r3, #72	@ 0x48
 800258e:	d102      	bne.n	8002596 <SD_SendCmd+0x68>
 8002590:	2387      	movs	r3, #135	@ 0x87
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	e001      	b.n	800259a <SD_SendCmd+0x6c>
  else crc = 1;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fe83 	bl	80022a8 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b4c      	cmp	r3, #76	@ 0x4c
 80025a6:	d101      	bne.n	80025ac <SD_SendCmd+0x7e>
 80025a8:	f7ff feb2 	bl	8002310 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80025ac:	230a      	movs	r3, #10
 80025ae:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80025b0:	f7ff feae 	bl	8002310 <SPI_RxByte>
 80025b4:	4603      	mov	r3, r0
 80025b6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80025b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da05      	bge.n	80025cc <SD_SendCmd+0x9e>
 80025c0:	7bbb      	ldrb	r3, [r7, #14]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	73bb      	strb	r3, [r7, #14]
 80025c6:	7bbb      	ldrb	r3, [r7, #14]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f1      	bne.n	80025b0 <SD_SendCmd+0x82>

  return res;
 80025cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <SD_disk_initialize+0x14>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0d1      	b.n	8002790 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80025ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002798 <SD_disk_initialize+0x1c0>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <SD_disk_initialize+0x2a>
 80025fa:	4b67      	ldr	r3, [pc, #412]	@ (8002798 <SD_disk_initialize+0x1c0>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	e0c6      	b.n	8002790 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8002602:	f7ff fec9 	bl	8002398 <SD_PowerOn>

  /* slave select */
  SELECT();
 8002606:	f7ff fe2f 	bl	8002268 <SELECT>

  /* check disk type */
  type = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800260e:	2100      	movs	r1, #0
 8002610:	2040      	movs	r0, #64	@ 0x40
 8002612:	f7ff ff8c 	bl	800252e <SD_SendCmd>
 8002616:	4603      	mov	r3, r0
 8002618:	2b01      	cmp	r3, #1
 800261a:	f040 80a1 	bne.w	8002760 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800261e:	4b5f      	ldr	r3, [pc, #380]	@ (800279c <SD_disk_initialize+0x1c4>)
 8002620:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002624:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002626:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800262a:	2048      	movs	r0, #72	@ 0x48
 800262c:	f7ff ff7f 	bl	800252e <SD_SendCmd>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d155      	bne.n	80026e2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e00c      	b.n	8002656 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800263c:	7bfc      	ldrb	r4, [r7, #15]
 800263e:	f7ff fe67 	bl	8002310 <SPI_RxByte>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	f104 0310 	add.w	r3, r4, #16
 800264a:	443b      	add	r3, r7
 800264c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	3301      	adds	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d9ef      	bls.n	800263c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800265c:	7abb      	ldrb	r3, [r7, #10]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d17e      	bne.n	8002760 <SD_disk_initialize+0x188>
 8002662:	7afb      	ldrb	r3, [r7, #11]
 8002664:	2baa      	cmp	r3, #170	@ 0xaa
 8002666:	d17b      	bne.n	8002760 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002668:	2100      	movs	r1, #0
 800266a:	2077      	movs	r0, #119	@ 0x77
 800266c:	f7ff ff5f 	bl	800252e <SD_SendCmd>
 8002670:	4603      	mov	r3, r0
 8002672:	2b01      	cmp	r3, #1
 8002674:	d807      	bhi.n	8002686 <SD_disk_initialize+0xae>
 8002676:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800267a:	2069      	movs	r0, #105	@ 0x69
 800267c:	f7ff ff57 	bl	800252e <SD_SendCmd>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8002686:	4b45      	ldr	r3, [pc, #276]	@ (800279c <SD_disk_initialize+0x1c4>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ec      	bne.n	8002668 <SD_disk_initialize+0x90>
 800268e:	e000      	b.n	8002692 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002690:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002692:	4b42      	ldr	r3, [pc, #264]	@ (800279c <SD_disk_initialize+0x1c4>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d062      	beq.n	8002760 <SD_disk_initialize+0x188>
 800269a:	2100      	movs	r1, #0
 800269c:	207a      	movs	r0, #122	@ 0x7a
 800269e:	f7ff ff46 	bl	800252e <SD_SendCmd>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d15b      	bne.n	8002760 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e00c      	b.n	80026c8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80026ae:	7bfc      	ldrb	r4, [r7, #15]
 80026b0:	f7ff fe2e 	bl	8002310 <SPI_RxByte>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461a      	mov	r2, r3
 80026b8:	f104 0310 	add.w	r3, r4, #16
 80026bc:	443b      	add	r3, r7
 80026be:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	3301      	adds	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d9ef      	bls.n	80026ae <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80026ce:	7a3b      	ldrb	r3, [r7, #8]
 80026d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <SD_disk_initialize+0x104>
 80026d8:	230c      	movs	r3, #12
 80026da:	e000      	b.n	80026de <SD_disk_initialize+0x106>
 80026dc:	2304      	movs	r3, #4
 80026de:	73bb      	strb	r3, [r7, #14]
 80026e0:	e03e      	b.n	8002760 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80026e2:	2100      	movs	r1, #0
 80026e4:	2077      	movs	r0, #119	@ 0x77
 80026e6:	f7ff ff22 	bl	800252e <SD_SendCmd>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d808      	bhi.n	8002702 <SD_disk_initialize+0x12a>
 80026f0:	2100      	movs	r1, #0
 80026f2:	2069      	movs	r0, #105	@ 0x69
 80026f4:	f7ff ff1b 	bl	800252e <SD_SendCmd>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d801      	bhi.n	8002702 <SD_disk_initialize+0x12a>
 80026fe:	2302      	movs	r3, #2
 8002700:	e000      	b.n	8002704 <SD_disk_initialize+0x12c>
 8002702:	2301      	movs	r3, #1
 8002704:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8002706:	7bbb      	ldrb	r3, [r7, #14]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d10e      	bne.n	800272a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800270c:	2100      	movs	r1, #0
 800270e:	2077      	movs	r0, #119	@ 0x77
 8002710:	f7ff ff0d 	bl	800252e <SD_SendCmd>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d80e      	bhi.n	8002738 <SD_disk_initialize+0x160>
 800271a:	2100      	movs	r1, #0
 800271c:	2069      	movs	r0, #105	@ 0x69
 800271e:	f7ff ff06 	bl	800252e <SD_SendCmd>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <SD_disk_initialize+0x160>
 8002728:	e00c      	b.n	8002744 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800272a:	2100      	movs	r1, #0
 800272c:	2041      	movs	r0, #65	@ 0x41
 800272e:	f7ff fefe 	bl	800252e <SD_SendCmd>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8002738:	4b18      	ldr	r3, [pc, #96]	@ (800279c <SD_disk_initialize+0x1c4>)
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e2      	bne.n	8002706 <SD_disk_initialize+0x12e>
 8002740:	e000      	b.n	8002744 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002742:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <SD_disk_initialize+0x1c4>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <SD_disk_initialize+0x184>
 800274c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002750:	2050      	movs	r0, #80	@ 0x50
 8002752:	f7ff feec 	bl	800252e <SD_SendCmd>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <SD_disk_initialize+0x188>
 800275c:	2300      	movs	r3, #0
 800275e:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8002760:	4a0f      	ldr	r2, [pc, #60]	@ (80027a0 <SD_disk_initialize+0x1c8>)
 8002762:	7bbb      	ldrb	r3, [r7, #14]
 8002764:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8002766:	f7ff fd8f 	bl	8002288 <DESELECT>
  SPI_RxByte();
 800276a:	f7ff fdd1 	bl	8002310 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800276e:	7bbb      	ldrb	r3, [r7, #14]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8002774:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <SD_disk_initialize+0x1c0>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <SD_disk_initialize+0x1c0>)
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e001      	b.n	800278a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002786:	f7ff fe49 	bl	800241c <SD_PowerOff>
  }

  return Stat;
 800278a:	4b03      	ldr	r3, [pc, #12]	@ (8002798 <SD_disk_initialize+0x1c0>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bd90      	pop	{r4, r7, pc}
 8002798:	20000004 	.word	0x20000004
 800279c:	20000260 	.word	0x20000260
 80027a0:	20000264 	.word	0x20000264

080027a4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <SD_disk_status+0x14>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e002      	b.n	80027be <SD_disk_status+0x1a>
  return Stat;
 80027b8:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <SD_disk_status+0x28>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b2db      	uxtb	r3, r3
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000004 	.word	0x20000004

080027d0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4603      	mov	r3, r0
 80027de:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <SD_disk_read+0x1c>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <SD_disk_read+0x20>
 80027ec:	2304      	movs	r3, #4
 80027ee:	e051      	b.n	8002894 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80027f0:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <SD_disk_read+0xcc>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <SD_disk_read+0x32>
 80027fe:	2303      	movs	r3, #3
 8002800:	e048      	b.n	8002894 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8002802:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <SD_disk_read+0xd0>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <SD_disk_read+0x44>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	025b      	lsls	r3, r3, #9
 8002812:	607b      	str	r3, [r7, #4]

  SELECT();
 8002814:	f7ff fd28 	bl	8002268 <SELECT>

  if (count == 1)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d111      	bne.n	8002842 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	2051      	movs	r0, #81	@ 0x51
 8002822:	f7ff fe84 	bl	800252e <SD_SendCmd>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d129      	bne.n	8002880 <SD_disk_read+0xb0>
 800282c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002830:	68b8      	ldr	r0, [r7, #8]
 8002832:	f7ff fe0b 	bl	800244c <SD_RxDataBlock>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d021      	beq.n	8002880 <SD_disk_read+0xb0>
 800283c:	2300      	movs	r3, #0
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	e01e      	b.n	8002880 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	2052      	movs	r0, #82	@ 0x52
 8002846:	f7ff fe72 	bl	800252e <SD_SendCmd>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d117      	bne.n	8002880 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8002850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002854:	68b8      	ldr	r0, [r7, #8]
 8002856:	f7ff fdf9 	bl	800244c <SD_RxDataBlock>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <SD_disk_read+0xa6>
        buff += 512;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002866:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	3b01      	subs	r3, #1
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ed      	bne.n	8002850 <SD_disk_read+0x80>
 8002874:	e000      	b.n	8002878 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8002876:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8002878:	2100      	movs	r1, #0
 800287a:	204c      	movs	r0, #76	@ 0x4c
 800287c:	f7ff fe57 	bl	800252e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8002880:	f7ff fd02 	bl	8002288 <DESELECT>
  SPI_RxByte();
 8002884:	f7ff fd44 	bl	8002310 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf14      	ite	ne
 800288e:	2301      	movne	r3, #1
 8002890:	2300      	moveq	r3, #0
 8002892:	b2db      	uxtb	r3, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000004 	.word	0x20000004
 80028a0:	20000264 	.word	0x20000264

080028a4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <SD_disk_write+0x1c>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <SD_disk_write+0x20>
 80028c0:	2304      	movs	r3, #4
 80028c2:	e06b      	b.n	800299c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80028c4:	4b37      	ldr	r3, [pc, #220]	@ (80029a4 <SD_disk_write+0x100>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <SD_disk_write+0x32>
 80028d2:	2303      	movs	r3, #3
 80028d4:	e062      	b.n	800299c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80028d6:	4b33      	ldr	r3, [pc, #204]	@ (80029a4 <SD_disk_write+0x100>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <SD_disk_write+0x44>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e059      	b.n	800299c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80028e8:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <SD_disk_write+0x104>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <SD_disk_write+0x56>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	025b      	lsls	r3, r3, #9
 80028f8:	607b      	str	r3, [r7, #4]

  SELECT();
 80028fa:	f7ff fcb5 	bl	8002268 <SELECT>

  if (count == 1)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d110      	bne.n	8002926 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	2058      	movs	r0, #88	@ 0x58
 8002908:	f7ff fe11 	bl	800252e <SD_SendCmd>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d13a      	bne.n	8002988 <SD_disk_write+0xe4>
 8002912:	21fe      	movs	r1, #254	@ 0xfe
 8002914:	68b8      	ldr	r0, [r7, #8]
 8002916:	f7ff fdc7 	bl	80024a8 <SD_TxDataBlock>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d033      	beq.n	8002988 <SD_disk_write+0xe4>
      count = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	e030      	b.n	8002988 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <SD_disk_write+0x104>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002932:	2100      	movs	r1, #0
 8002934:	2077      	movs	r0, #119	@ 0x77
 8002936:	f7ff fdfa 	bl	800252e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800293a:	6839      	ldr	r1, [r7, #0]
 800293c:	2057      	movs	r0, #87	@ 0x57
 800293e:	f7ff fdf6 	bl	800252e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	2059      	movs	r0, #89	@ 0x59
 8002946:	f7ff fdf2 	bl	800252e <SD_SendCmd>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11b      	bne.n	8002988 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002950:	21fc      	movs	r1, #252	@ 0xfc
 8002952:	68b8      	ldr	r0, [r7, #8]
 8002954:	f7ff fda8 	bl	80024a8 <SD_TxDataBlock>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <SD_disk_write+0xd0>
        buff += 512;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002964:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ee      	bne.n	8002950 <SD_disk_write+0xac>
 8002972:	e000      	b.n	8002976 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002974:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8002976:	21fd      	movs	r1, #253	@ 0xfd
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fd95 	bl	80024a8 <SD_TxDataBlock>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <SD_disk_write+0xe4>
      {
        count = 1;
 8002984:	2301      	movs	r3, #1
 8002986:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8002988:	f7ff fc7e 	bl	8002288 <DESELECT>
  SPI_RxByte();
 800298c:	f7ff fcc0 	bl	8002310 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf14      	ite	ne
 8002996:	2301      	movne	r3, #1
 8002998:	2300      	moveq	r3, #0
 800299a:	b2db      	uxtb	r3, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000004 	.word	0x20000004
 80029a8:	20000264 	.word	0x20000264

080029ac <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b08b      	sub	sp, #44	@ 0x2c
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	603a      	str	r2, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
 80029b8:	460b      	mov	r3, r1
 80029ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <SD_disk_ioctl+0x1e>
 80029c6:	2304      	movs	r3, #4
 80029c8:	e113      	b.n	8002bf2 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80029d0:	79bb      	ldrb	r3, [r7, #6]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d124      	bne.n	8002a20 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d012      	beq.n	8002a04 <SD_disk_ioctl+0x58>
 80029de:	2b02      	cmp	r3, #2
 80029e0:	dc1a      	bgt.n	8002a18 <SD_disk_ioctl+0x6c>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <SD_disk_ioctl+0x40>
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d006      	beq.n	80029f8 <SD_disk_ioctl+0x4c>
 80029ea:	e015      	b.n	8002a18 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80029ec:	f7ff fd16 	bl	800241c <SD_PowerOff>
      res = RES_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80029f6:	e0fa      	b.n	8002bee <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80029f8:	f7ff fcce 	bl	8002398 <SD_PowerOn>
      res = RES_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002a02:	e0f4      	b.n	8002bee <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	1c5c      	adds	r4, r3, #1
 8002a08:	f7ff fd14 	bl	8002434 <SD_CheckPower>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002a16:	e0ea      	b.n	8002bee <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8002a18:	2304      	movs	r3, #4
 8002a1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002a1e:	e0e6      	b.n	8002bee <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002a20:	4b76      	ldr	r3, [pc, #472]	@ (8002bfc <SD_disk_ioctl+0x250>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <SD_disk_ioctl+0x86>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0df      	b.n	8002bf2 <SD_disk_ioctl+0x246>

    SELECT();
 8002a32:	f7ff fc19 	bl	8002268 <SELECT>

    switch (ctrl)
 8002a36:	79bb      	ldrb	r3, [r7, #6]
 8002a38:	2b0d      	cmp	r3, #13
 8002a3a:	f200 80c9 	bhi.w	8002bd0 <SD_disk_ioctl+0x224>
 8002a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a44 <SD_disk_ioctl+0x98>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002b3b 	.word	0x08002b3b
 8002a48:	08002a7d 	.word	0x08002a7d
 8002a4c:	08002b2b 	.word	0x08002b2b
 8002a50:	08002bd1 	.word	0x08002bd1
 8002a54:	08002bd1 	.word	0x08002bd1
 8002a58:	08002bd1 	.word	0x08002bd1
 8002a5c:	08002bd1 	.word	0x08002bd1
 8002a60:	08002bd1 	.word	0x08002bd1
 8002a64:	08002bd1 	.word	0x08002bd1
 8002a68:	08002bd1 	.word	0x08002bd1
 8002a6c:	08002bd1 	.word	0x08002bd1
 8002a70:	08002b4d 	.word	0x08002b4d
 8002a74:	08002b71 	.word	0x08002b71
 8002a78:	08002b95 	.word	0x08002b95
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2049      	movs	r0, #73	@ 0x49
 8002a80:	f7ff fd55 	bl	800252e <SD_SendCmd>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 80a6 	bne.w	8002bd8 <SD_disk_ioctl+0x22c>
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	2110      	movs	r1, #16
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fcda 	bl	800244c <SD_RxDataBlock>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 809c 	beq.w	8002bd8 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8002aa0:	7b3b      	ldrb	r3, [r7, #12]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d10d      	bne.n	8002ac6 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002aaa:	7d7b      	ldrb	r3, [r7, #21]
 8002aac:	461a      	mov	r2, r3
 8002aae:	7d3b      	ldrb	r3, [r7, #20]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002abc:	8bfb      	ldrh	r3, [r7, #30]
 8002abe:	029a      	lsls	r2, r3, #10
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e02d      	b.n	8002b22 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002ac6:	7c7b      	ldrb	r3, [r7, #17]
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	7dbb      	ldrb	r3, [r7, #22]
 8002ad0:	09db      	lsrs	r3, r3, #7
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	7d7b      	ldrb	r3, [r7, #21]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 0306 	and.w	r3, r3, #6
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3302      	adds	r3, #2
 8002aea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002aee:	7d3b      	ldrb	r3, [r7, #20]
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	7cbb      	ldrb	r3, [r7, #18]
 8002b02:	029b      	lsls	r3, r3, #10
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002b14:	8bfa      	ldrh	r2, [r7, #30]
 8002b16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002b1a:	3b09      	subs	r3, #9
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8002b28:	e056      	b.n	8002bd8 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b30:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002b38:	e055      	b.n	8002be6 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002b3a:	f7ff fc13 	bl	8002364 <SD_ReadyWait>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2bff      	cmp	r3, #255	@ 0xff
 8002b42:	d14b      	bne.n	8002bdc <SD_disk_ioctl+0x230>
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002b4a:	e047      	b.n	8002bdc <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2049      	movs	r0, #73	@ 0x49
 8002b50:	f7ff fced 	bl	800252e <SD_SendCmd>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d142      	bne.n	8002be0 <SD_disk_ioctl+0x234>
 8002b5a:	2110      	movs	r1, #16
 8002b5c:	6a38      	ldr	r0, [r7, #32]
 8002b5e:	f7ff fc75 	bl	800244c <SD_RxDataBlock>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d03b      	beq.n	8002be0 <SD_disk_ioctl+0x234>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002b6e:	e037      	b.n	8002be0 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002b70:	2100      	movs	r1, #0
 8002b72:	204a      	movs	r0, #74	@ 0x4a
 8002b74:	f7ff fcdb 	bl	800252e <SD_SendCmd>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d132      	bne.n	8002be4 <SD_disk_ioctl+0x238>
 8002b7e:	2110      	movs	r1, #16
 8002b80:	6a38      	ldr	r0, [r7, #32]
 8002b82:	f7ff fc63 	bl	800244c <SD_RxDataBlock>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02b      	beq.n	8002be4 <SD_disk_ioctl+0x238>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002b92:	e027      	b.n	8002be4 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002b94:	2100      	movs	r1, #0
 8002b96:	207a      	movs	r0, #122	@ 0x7a
 8002b98:	f7ff fcc9 	bl	800252e <SD_SendCmd>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002ba8:	e00b      	b.n	8002bc2 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8002baa:	6a3c      	ldr	r4, [r7, #32]
 8002bac:	1c63      	adds	r3, r4, #1
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	f7ff fbae 	bl	8002310 <SPI_RxByte>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002bb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002bc2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d9ef      	bls.n	8002baa <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002bd6:	e006      	b.n	8002be6 <SD_disk_ioctl+0x23a>
      break;
 8002bd8:	bf00      	nop
 8002bda:	e004      	b.n	8002be6 <SD_disk_ioctl+0x23a>
      break;
 8002bdc:	bf00      	nop
 8002bde:	e002      	b.n	8002be6 <SD_disk_ioctl+0x23a>
      break;
 8002be0:	bf00      	nop
 8002be2:	e000      	b.n	8002be6 <SD_disk_ioctl+0x23a>
      break;
 8002be4:	bf00      	nop
    }

    DESELECT();
 8002be6:	f7ff fb4f 	bl	8002288 <DESELECT>
    SPI_RxByte();
 8002bea:	f7ff fb91 	bl	8002310 <SPI_RxByte>
  }

  return res;
 8002bee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	372c      	adds	r7, #44	@ 0x2c
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd90      	pop	{r4, r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000004 	.word	0x20000004

08002c00 <print_success>:


#include"formated_printf.h"


void print_success(char * str){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
    printf("\033[32m%s\033[0m\n \r", str);
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4803      	ldr	r0, [pc, #12]	@ (8002c18 <print_success+0x18>)
 8002c0c:	f008 ff9c 	bl	800bb48 <iprintf>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	08010bdc 	.word	0x08010bdc

08002c1c <print_info>:


void print_info(char * str){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    printf("\033[33m%s\033[0m\n\r", str);
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4803      	ldr	r0, [pc, #12]	@ (8002c34 <print_info+0x18>)
 8002c28:	f008 ff8e 	bl	800bb48 <iprintf>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	08010bec 	.word	0x08010bec

08002c38 <print_error>:

void print_error(char * str){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
    printf("\033[31m%s\033[0m\n \r", str);
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4803      	ldr	r0, [pc, #12]	@ (8002c50 <print_error+0x18>)
 8002c44:	f008 ff80 	bl	800bb48 <iprintf>
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	08010bfc 	.word	0x08010bfc

08002c54 <parse_gps_output>:
int count = 0;

int VCCTimeout = 5000; // GGA or RMC will not be received if the VCC is not sufficient

void parse_gps_output(float *latitude, char *NS, float *longitude, char *EW)
{
 8002c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c56:	b08b      	sub	sp, #44	@ 0x2c
 8002c58:	af06      	add	r7, sp, #24
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
	  count++;
 8002c62:	4b39      	ldr	r3, [pc, #228]	@ (8002d48 <parse_gps_output+0xf4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	4a37      	ldr	r2, [pc, #220]	@ (8002d48 <parse_gps_output+0xf4>)
 8002c6a:	6013      	str	r3, [r2, #0]
	  if (Wait_for("GGA") == 1)
 8002c6c:	4837      	ldr	r0, [pc, #220]	@ (8002d4c <parse_gps_output+0xf8>)
 8002c6e:	f001 ffd9 	bl	8004c24 <Wait_for>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d116      	bne.n	8002ca6 <parse_gps_output+0x52>
	  {
		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 8002c78:	4b35      	ldr	r3, [pc, #212]	@ (8002d50 <parse_gps_output+0xfc>)
 8002c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7e:	601a      	str	r2, [r3, #0]

		  Copy_upto("*", GGA);
 8002c80:	4934      	ldr	r1, [pc, #208]	@ (8002d54 <parse_gps_output+0x100>)
 8002c82:	4835      	ldr	r0, [pc, #212]	@ (8002d58 <parse_gps_output+0x104>)
 8002c84:	f001 ff4e 	bl	8004b24 <Copy_upto>
		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8002c88:	4934      	ldr	r1, [pc, #208]	@ (8002d5c <parse_gps_output+0x108>)
 8002c8a:	4832      	ldr	r0, [pc, #200]	@ (8002d54 <parse_gps_output+0x100>)
 8002c8c:	f7fe fba4 	bl	80013d8 <decodeGGA>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <parse_gps_output+0x4a>
 8002c96:	4b32      	ldr	r3, [pc, #200]	@ (8002d60 <parse_gps_output+0x10c>)
 8002c98:	2202      	movs	r2, #2
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e007      	b.n	8002cae <parse_gps_output+0x5a>
		  else flagGGA = 1;  // 1 indicates the data is invalid
 8002c9e:	4b30      	ldr	r3, [pc, #192]	@ (8002d60 <parse_gps_output+0x10c>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e003      	b.n	8002cae <parse_gps_output+0x5a>
	  }
	  else{
		  print_error("TIMEOUT of GPS ! \n \r");
 8002ca6:	482f      	ldr	r0, [pc, #188]	@ (8002d64 <parse_gps_output+0x110>)
 8002ca8:	f7ff ffc6 	bl	8002c38 <print_error>
		  return;
 8002cac:	e049      	b.n	8002d42 <parse_gps_output+0xee>
	  }

	  if ((flagGGA == 2) | (flagRMC == 2))
 8002cae:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <parse_gps_output+0x10c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <parse_gps_output+0x114>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d037      	beq.n	8002d42 <parse_gps_output+0xee>
	  {
		  memset(gpsBuffer, '\0', 50);
 8002cd2:	2232      	movs	r2, #50	@ 0x32
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4825      	ldr	r0, [pc, #148]	@ (8002d6c <parse_gps_output+0x118>)
 8002cd8:	f009 f8d2 	bl	800be80 <memset>

		  sprintf (gpsBuffer, "%.2f%c,%.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d5c <parse_gps_output+0x108>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fc49 	bl	8000578 <__aeabi_f2d>
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	460d      	mov	r5, r1
 8002cea:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <parse_gps_output+0x108>)
 8002cec:	791b      	ldrb	r3, [r3, #4]
 8002cee:	461e      	mov	r6, r3
				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <parse_gps_output+0x108>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
		  sprintf (gpsBuffer, "%.2f%c,%.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fc3f 	bl	8000578 <__aeabi_f2d>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8002cfe:	4917      	ldr	r1, [pc, #92]	@ (8002d5c <parse_gps_output+0x108>)
 8002d00:	7b09      	ldrb	r1, [r1, #12]
		  sprintf (gpsBuffer, "%.2f%c,%.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8002d02:	9104      	str	r1, [sp, #16]
 8002d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d08:	9600      	str	r6, [sp, #0]
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	4918      	ldr	r1, [pc, #96]	@ (8002d70 <parse_gps_output+0x11c>)
 8002d10:	4816      	ldr	r0, [pc, #88]	@ (8002d6c <parse_gps_output+0x118>)
 8002d12:	f008 ff91 	bl	800bc38 <siprintf>
		  print_success("\n\rGPS DATA SUCCESS");
 8002d16:	4817      	ldr	r0, [pc, #92]	@ (8002d74 <parse_gps_output+0x120>)
 8002d18:	f7ff ff72 	bl	8002c00 <print_success>
		  print_success(gpsBuffer);
 8002d1c:	4813      	ldr	r0, [pc, #76]	@ (8002d6c <parse_gps_output+0x118>)
 8002d1e:	f7ff ff6f 	bl	8002c00 <print_success>
		    // Use sscanf to extract the values
		  if (sscanf(gpsBuffer, "%f%c,%f%c", latitude, NS, longitude, EW) != 4) {
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4912      	ldr	r1, [pc, #72]	@ (8002d78 <parse_gps_output+0x124>)
 8002d30:	480e      	ldr	r0, [pc, #56]	@ (8002d6c <parse_gps_output+0x118>)
 8002d32:	f008 ffa1 	bl	800bc78 <siscanf>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d002      	beq.n	8002d42 <parse_gps_output+0xee>
			  print_error("Error: Unable to parse the input string.\n");
 8002d3c:	480f      	ldr	r0, [pc, #60]	@ (8002d7c <parse_gps_output+0x128>)
 8002d3e:	f7ff ff7b 	bl	8002c38 <print_error>
		  }
	  }
}
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d48:	2000034c 	.word	0x2000034c
 8002d4c:	08010c0c 	.word	0x08010c0c
 8002d50:	20000008 	.word	0x20000008
 8002d54:	20000268 	.word	0x20000268
 8002d58:	08010c10 	.word	0x08010c10
 8002d5c:	200002cc 	.word	0x200002cc
 8002d60:	20000310 	.word	0x20000310
 8002d64:	08010c14 	.word	0x08010c14
 8002d68:	20000314 	.word	0x20000314
 8002d6c:	20000318 	.word	0x20000318
 8002d70:	08010c2c 	.word	0x08010c2c
 8002d74:	08010c3c 	.word	0x08010c3c
 8002d78:	08010c50 	.word	0x08010c50
 8002d7c:	08010c5c 	.word	0x08010c5c

08002d80 <main>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_SPI2_Init(void);

int main(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b094      	sub	sp, #80	@ 0x50
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  HAL_Init();
 8002d86:	f002 f8dd 	bl	8004f44 <HAL_Init>

  SystemClock_Config();
 8002d8a:	f000 f861 	bl	8002e50 <SystemClock_Config>

  usart_init();
 8002d8e:	f002 f82f 	bl	8004df0 <usart_init>

  print_info("\n\rCalling INIT MAX30102\n\r");
 8002d92:	4828      	ldr	r0, [pc, #160]	@ (8002e34 <main+0xb4>)
 8002d94:	f7ff ff42 	bl	8002c1c <print_info>

  MAX30102_init();
 8002d98:	f000 f98a 	bl	80030b0 <MAX30102_init>

  print_info("MAX30102 DETECTED AND INITALIZED!");
 8002d9c:	4826      	ldr	r0, [pc, #152]	@ (8002e38 <main+0xb8>)
 8002d9e:	f7ff ff3d 	bl	8002c1c <print_info>
  printf("\n \r");
 8002da2:	4826      	ldr	r0, [pc, #152]	@ (8002e3c <main+0xbc>)
 8002da4:	f008 fed0 	bl	800bb48 <iprintf>

  // nrf init code

  uint8_t TxAddress[] = {0xB3, 0xB4, 0xB5, 0xB6, 0x05};
 8002da8:	4a25      	ldr	r2, [pc, #148]	@ (8002e40 <main+0xc0>)
 8002daa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002db2:	6018      	str	r0, [r3, #0]
 8002db4:	3304      	adds	r3, #4
 8002db6:	7019      	strb	r1, [r3, #0]

  uint8_t channel = 10;
 8002db8:	230a      	movs	r3, #10
 8002dba:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

  delay(2000);
 8002dbe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002dc2:	f7fe f93f 	bl	8001044 <delay>
  print_info("Calling NRF INIT\n\r");
 8002dc6:	481f      	ldr	r0, [pc, #124]	@ (8002e44 <main+0xc4>)
 8002dc8:	f7ff ff28 	bl	8002c1c <print_info>
  NRF_INIT();
 8002dcc:	f7ff f870 	bl	8001eb0 <NRF_INIT>

  NRF_PTX_CONFIG(TxAddress, channel);
 8002dd0:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002dd4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe ff92 	bl	8001d04 <NRF_PTX_CONFIG>

  print_info("SETTING NODE AS PRIMARY TRANSMITTER \n \r ");
 8002de0:	4819      	ldr	r0, [pc, #100]	@ (8002e48 <main+0xc8>)
 8002de2:	f7ff ff1b 	bl	8002c1c <print_info>

  for (int i = 0; i <= 0x1D; i++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dea:	e00d      	b.n	8002e08 <main+0x88>
  {

	 printf("\n \r register %x is value %x \n \r", i, NRF_READ_REGISTER(i));
 8002dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe ff6c 	bl	8001cce <NRF_READ_REGISTER>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002dfc:	4813      	ldr	r0, [pc, #76]	@ (8002e4c <main+0xcc>)
 8002dfe:	f008 fea3 	bl	800bb48 <iprintf>
  for (int i = 0; i <= 0x1D; i++)
 8002e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e04:	3301      	adds	r3, #1
 8002e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e0a:	2b1d      	cmp	r3, #29
 8002e0c:	ddee      	ble.n	8002dec <main+0x6c>
  }

  StateMachine SM;

  FSM_INIT(&SM);
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 f9d5 	bl	80041c0 <FSM_INIT>

  MX_GPIO_Init();
 8002e16:	f000 f8e5 	bl	8002fe4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002e1a:	f000 f8b9 	bl	8002f90 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002e1e:	f000 f881 	bl	8002f24 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002e22:	f004 fc37 	bl	8007694 <MX_FATFS_Init>

  Ringbuf_init();
 8002e26:	f001 fdcd 	bl	80049c4 <Ringbuf_init>

  while (1)
  {
    execute_sm(&SM);
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 f9fd 	bl	800422c <execute_sm>
 8002e32:	e7fa      	b.n	8002e2a <main+0xaa>
 8002e34:	08010c88 	.word	0x08010c88
 8002e38:	08010ca4 	.word	0x08010ca4
 8002e3c:	08010cc8 	.word	0x08010cc8
 8002e40:	08010d2c 	.word	0x08010d2c
 8002e44:	08010ccc 	.word	0x08010ccc
 8002e48:	08010ce0 	.word	0x08010ce0
 8002e4c:	08010d0c 	.word	0x08010d0c

08002e50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b094      	sub	sp, #80	@ 0x50
 8002e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e56:	f107 0320 	add.w	r3, r7, #32
 8002e5a:	2230      	movs	r2, #48	@ 0x30
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f009 f80e 	bl	800be80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e64:	f107 030c 	add.w	r3, r7, #12
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e74:	2300      	movs	r3, #0
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	4b28      	ldr	r3, [pc, #160]	@ (8002f1c <SystemClock_Config+0xcc>)
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	4a27      	ldr	r2, [pc, #156]	@ (8002f1c <SystemClock_Config+0xcc>)
 8002e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e84:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <SystemClock_Config+0xcc>)
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e90:	2300      	movs	r3, #0
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	4b22      	ldr	r3, [pc, #136]	@ (8002f20 <SystemClock_Config+0xd0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a21      	ldr	r2, [pc, #132]	@ (8002f20 <SystemClock_Config+0xd0>)
 8002e9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <SystemClock_Config+0xd0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eac:	2302      	movs	r3, #2
 8002eae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002ec4:	23c0      	movs	r3, #192	@ 0xc0
 8002ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ec8:	2304      	movs	r3, #4
 8002eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002ecc:	2308      	movs	r3, #8
 8002ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed0:	f107 0320 	add.w	r3, r7, #32
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 fbd5 	bl	8005684 <HAL_RCC_OscConfig>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ee0:	f000 f8e0 	bl	80030a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ee4:	230f      	movs	r3, #15
 8002ee6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ef0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002efa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	2103      	movs	r1, #3
 8002f02:	4618      	mov	r0, r3
 8002f04:	f002 fe36 	bl	8005b74 <HAL_RCC_ClockConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f0e:	f000 f8c9 	bl	80030a4 <Error_Handler>
  }
}
 8002f12:	bf00      	nop
 8002f14:	3750      	adds	r7, #80	@ 0x50
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40007000 	.word	0x40007000

08002f24 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002f28:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f2a:	4a18      	ldr	r2, [pc, #96]	@ (8002f8c <MX_SPI2_Init+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f2e:	4b16      	ldr	r3, [pc, #88]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f36:	4b14      	ldr	r3, [pc, #80]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f3c:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f42:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f48:	4b0f      	ldr	r3, [pc, #60]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f56:	4b0c      	ldr	r3, [pc, #48]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f62:	4b09      	ldr	r3, [pc, #36]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f68:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f6e:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f70:	220a      	movs	r2, #10
 8002f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f74:	4804      	ldr	r0, [pc, #16]	@ (8002f88 <MX_SPI2_Init+0x64>)
 8002f76:	f003 f81d 	bl	8005fb4 <HAL_SPI_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002f80:	f000 f890 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000350 	.word	0x20000350
 8002f8c:	40003800 	.word	0x40003800

08002f90 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f94:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <MX_USART1_UART_Init+0x4c>)
 8002f96:	4a12      	ldr	r2, [pc, #72]	@ (8002fe0 <MX_USART1_UART_Init+0x50>)
 8002f98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f9a:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <MX_USART1_UART_Init+0x4c>)
 8002f9c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002fa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fdc <MX_USART1_UART_Init+0x4c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <MX_USART1_UART_Init+0x4c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fae:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <MX_USART1_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	4b09      	ldr	r3, [pc, #36]	@ (8002fdc <MX_USART1_UART_Init+0x4c>)
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fba:	4b08      	ldr	r3, [pc, #32]	@ (8002fdc <MX_USART1_UART_Init+0x4c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <MX_USART1_UART_Init+0x4c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fc6:	4805      	ldr	r0, [pc, #20]	@ (8002fdc <MX_USART1_UART_Init+0x4c>)
 8002fc8:	f003 fc46 	bl	8006858 <HAL_UART_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fd2:	f000 f867 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200003a8 	.word	0x200003a8
 8002fe0:	40011000 	.word	0x40011000

08002fe4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	@ 0x28
 8002fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fea:	f107 0314 	add.w	r3, r7, #20
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	60da      	str	r2, [r3, #12]
 8002ff8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b27      	ldr	r3, [pc, #156]	@ (800309c <MX_GPIO_Init+0xb8>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	4a26      	ldr	r2, [pc, #152]	@ (800309c <MX_GPIO_Init+0xb8>)
 8003004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003008:	6313      	str	r3, [r2, #48]	@ 0x30
 800300a:	4b24      	ldr	r3, [pc, #144]	@ (800309c <MX_GPIO_Init+0xb8>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b20      	ldr	r3, [pc, #128]	@ (800309c <MX_GPIO_Init+0xb8>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <MX_GPIO_Init+0xb8>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	6313      	str	r3, [r2, #48]	@ 0x30
 8003026:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <MX_GPIO_Init+0xb8>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	4b19      	ldr	r3, [pc, #100]	@ (800309c <MX_GPIO_Init+0xb8>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	4a18      	ldr	r2, [pc, #96]	@ (800309c <MX_GPIO_Init+0xb8>)
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	6313      	str	r3, [r2, #48]	@ 0x30
 8003042:	4b16      	ldr	r3, [pc, #88]	@ (800309c <MX_GPIO_Init+0xb8>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	4b12      	ldr	r3, [pc, #72]	@ (800309c <MX_GPIO_Init+0xb8>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	4a11      	ldr	r2, [pc, #68]	@ (800309c <MX_GPIO_Init+0xb8>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6313      	str	r3, [r2, #48]	@ 0x30
 800305e:	4b0f      	ldr	r3, [pc, #60]	@ (800309c <MX_GPIO_Init+0xb8>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800306a:	2200      	movs	r2, #0
 800306c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003070:	480b      	ldr	r0, [pc, #44]	@ (80030a0 <MX_GPIO_Init+0xbc>)
 8003072:	f002 faed 	bl	8005650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800307a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307c:	2301      	movs	r3, #1
 800307e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	2300      	movs	r3, #0
 8003086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4619      	mov	r1, r3
 800308e:	4804      	ldr	r0, [pc, #16]	@ (80030a0 <MX_GPIO_Init+0xbc>)
 8003090:	f002 f95a 	bl	8005348 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003094:	bf00      	nop
 8003096:	3728      	adds	r7, #40	@ 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	40020400 	.word	0x40020400

080030a4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030a8:	b672      	cpsid	i
}
 80030aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <Error_Handler+0x8>

080030b0 <MAX30102_init>:
 uint8_t tail;
} sense_struct; //This is our circular buffer of readings from the sensor

sense_struct sense;

void MAX30102_init(){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
	I2C_init_config(); //initalize i2c
 80030b4:	f7fe f828 	bl	8001108 <I2C_init_config>

	    // Reset the sensor
	    MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x40); // Reset the device
 80030b8:	2140      	movs	r1, #64	@ 0x40
 80030ba:	2009      	movs	r0, #9
 80030bc:	f000 f81e 	bl	80030fc <MAX30102_WRITE_REGISTER>

	    //led brightness as 60
	    MAX30102_WRITE_REGISTER(LED1_PA_REG, 0x3c); //power set as 60
 80030c0:	213c      	movs	r1, #60	@ 0x3c
 80030c2:	200c      	movs	r0, #12
 80030c4:	f000 f81a 	bl	80030fc <MAX30102_WRITE_REGISTER>
	    MAX30102_WRITE_REGISTER(LED2_PA_REG, 0x3c); // power set as 60
 80030c8:	213c      	movs	r1, #60	@ 0x3c
 80030ca:	200d      	movs	r0, #13
 80030cc:	f000 f816 	bl	80030fc <MAX30102_WRITE_REGISTER>

	    //led mode 3 both ir and red led are needed
	    MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x3); // spo2
 80030d0:	2103      	movs	r1, #3
 80030d2:	2009      	movs	r0, #9
 80030d4:	f000 f812 	bl	80030fc <MAX30102_WRITE_REGISTER>

	    //sample average as 4 and enable fifo rollover 0x50 0101 0000
	    MAX30102_WRITE_REGISTER(FIFO_CONFIG_REG, 0x50); //
 80030d8:	2150      	movs	r1, #80	@ 0x50
 80030da:	2008      	movs	r0, #8
 80030dc:	f000 f80e 	bl	80030fc <MAX30102_WRITE_REGISTER>

	    //spo2 config adc range as 4096  samples as 100 led pulse as 411 0010 0111
	    MAX30102_WRITE_REGISTER(SPO2_CONFIG_REG, 0x27); //
 80030e0:	2127      	movs	r1, #39	@ 0x27
 80030e2:	200a      	movs	r0, #10
 80030e4:	f000 f80a 	bl	80030fc <MAX30102_WRITE_REGISTER>

	    // FIFO pointers
	    MAX30102_WRITE_REGISTER(FIFO_READ_PTR, 0x00); // Reset FIFO write pointer
 80030e8:	2100      	movs	r1, #0
 80030ea:	2006      	movs	r0, #6
 80030ec:	f000 f806 	bl	80030fc <MAX30102_WRITE_REGISTER>
	    MAX30102_WRITE_REGISTER(FIFO_WR_PTR, 0x00); // Reset FIFO read pointer
 80030f0:	2100      	movs	r1, #0
 80030f2:	2004      	movs	r0, #4
 80030f4:	f000 f802 	bl	80030fc <MAX30102_WRITE_REGISTER>
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <MAX30102_WRITE_REGISTER>:
    // FIFO Configuration
    MAX30102_WRITE_REGISTER(FIFO_CONFIG_REG, 0x02);
    // FIFO_Average: No averaging, direct samples
}

void MAX30102_WRITE_REGISTER(uint8_t register_Address, uint8_t data){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	460a      	mov	r2, r1
 8003106:	71fb      	strb	r3, [r7, #7]
 8003108:	4613      	mov	r3, r2
 800310a:	71bb      	strb	r3, [r7, #6]
	I2C_START_COMS();
 800310c:	f7fe f870 	bl	80011f0 <I2C_START_COMS>
	uint8_t write_masked_address=0xAE;
 8003110:	23ae      	movs	r3, #174	@ 0xae
 8003112:	73fb      	strb	r3, [r7, #15]
	I2C_SEND_ADDRESS(write_masked_address); //same as AE
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe f8a6 	bl	8001268 <I2C_SEND_ADDRESS>
	I2C_WRITE_DATA(register_Address);
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe f882 	bl	8001228 <I2C_WRITE_DATA>
	I2C_WRITE_DATA(data);
 8003124:	79bb      	ldrb	r3, [r7, #6]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe f87e 	bl	8001228 <I2C_WRITE_DATA>
	I2C_STOP_COMS();
 800312c:	f7fe f8bc 	bl	80012a8 <I2C_STOP_COMS>
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <MAX30102_READ_REGISTER>:


void MAX30102_READ_REGISTER(uint8_t register_Address, uint8_t *recv_buff, uint8_t recv_size){
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	71fb      	strb	r3, [r7, #7]
 8003144:	4613      	mov	r3, r2
 8003146:	71bb      	strb	r3, [r7, #6]

	uint8_t write_masked_address=0xAE;
 8003148:	23ae      	movs	r3, #174	@ 0xae
 800314a:	73fb      	strb	r3, [r7, #15]
	uint8_t read_masked_address=0xAF; //should be AF
 800314c:	23af      	movs	r3, #175	@ 0xaf
 800314e:	73bb      	strb	r3, [r7, #14]
	I2C_START_COMS(); //start i2c
 8003150:	f7fe f84e 	bl	80011f0 <I2C_START_COMS>
	I2C_SEND_ADDRESS(write_masked_address); //first send slave address
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe f886 	bl	8001268 <I2C_SEND_ADDRESS>
	I2C_WRITE_DATA(register_Address); //send register address
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe f862 	bl	8001228 <I2C_WRITE_DATA>
	I2C_START_COMS(); //repeated start
 8003164:	f7fe f844 	bl	80011f0 <I2C_START_COMS>
	I2C_READ(read_masked_address,recv_buff,recv_size); //this should be slave with read
 8003168:	79ba      	ldrb	r2, [r7, #6]
 800316a:	7bbb      	ldrb	r3, [r7, #14]
 800316c:	6839      	ldr	r1, [r7, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe f8aa 	bl	80012c8 <I2C_READ>
//	I2C_STOP_COMS(); this caused 2 hours of debugging
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <MAX30102_Start_Temperature_Measurement>:

void MAX30102_Start_Temperature_Measurement() {
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
    MAX30102_WRITE_REGISTER(TEMP_CONFIG_REG, 0x01); // Start temperature conversion
 8003180:	2101      	movs	r1, #1
 8003182:	2021      	movs	r0, #33	@ 0x21
 8003184:	f7ff ffba 	bl	80030fc <MAX30102_WRITE_REGISTER>
    MAX30102_WRITE_REGISTER(DIE_TEMP_RDY_EN, 0x02); // Start temperature conversion
 8003188:	2102      	movs	r1, #2
 800318a:	2003      	movs	r0, #3
 800318c:	f7ff ffb6 	bl	80030fc <MAX30102_WRITE_REGISTER>
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}

08003194 <MAX30102_Read_Temperature>:


float MAX30102_Read_Temperature() {
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
    uint8_t temp_int, temp_frac;

    // Read the temperature integer part
    MAX30102_READ_REGISTER(TEMP_INT_REG, &temp_int, 1);
 800319a:	1cfb      	adds	r3, r7, #3
 800319c:	2201      	movs	r2, #1
 800319e:	4619      	mov	r1, r3
 80031a0:	201f      	movs	r0, #31
 80031a2:	f7ff ffc9 	bl	8003138 <MAX30102_READ_REGISTER>

    // Read the temperature fractional part
    MAX30102_READ_REGISTER(TEMP_FRAC_REG, &temp_frac, 1);
 80031a6:	1cbb      	adds	r3, r7, #2
 80031a8:	2201      	movs	r2, #1
 80031aa:	4619      	mov	r1, r3
 80031ac:	2020      	movs	r0, #32
 80031ae:	f7ff ffc3 	bl	8003138 <MAX30102_READ_REGISTER>

    // Combine the integer and fractional parts
    float temperature = temp_int + (temp_frac * 0.0625);
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f9cd 	bl	8000554 <__aeabi_i2d>
 80031ba:	4604      	mov	r4, r0
 80031bc:	460d      	mov	r5, r1
 80031be:	78bb      	ldrb	r3, [r7, #2]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd f9c7 	bl	8000554 <__aeabi_i2d>
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <MAX30102_Read_Temperature+0x68>)
 80031cc:	f7fd fa2c 	bl	8000628 <__aeabi_dmul>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4620      	mov	r0, r4
 80031d6:	4629      	mov	r1, r5
 80031d8:	f7fd f870 	bl	80002bc <__adddf3>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7fd fd18 	bl	8000c18 <__aeabi_d2f>
 80031e8:	4603      	mov	r3, r0
 80031ea:	607b      	str	r3, [r7, #4]
    //printf("hi one read was done but then something happened %d \n \r",temp_frac);
    return temperature;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	ee07 3a90 	vmov	s15, r3
}
 80031f2:	eeb0 0a67 	vmov.f32	s0, s15
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bdb0      	pop	{r4, r5, r7, pc}
 80031fc:	3fb00000 	.word	0x3fb00000

08003200 <MAX30102_get_Read_ptr>:

uint8_t MAX30102_get_Read_ptr(){
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
	uint8_t read_ptr;
 MAX30102_READ_REGISTER(FIFO_READ_PTR,&read_ptr,1);
 8003206:	1dfb      	adds	r3, r7, #7
 8003208:	2201      	movs	r2, #1
 800320a:	4619      	mov	r1, r3
 800320c:	2006      	movs	r0, #6
 800320e:	f7ff ff93 	bl	8003138 <MAX30102_READ_REGISTER>
	return read_ptr;
 8003212:	79fb      	ldrb	r3, [r7, #7]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <MAX30102_get_WR_ptr>:

uint8_t MAX30102_get_WR_ptr(){
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
	uint8_t wr_ptr;
    MAX30102_READ_REGISTER(FIFO_WR_PTR,&wr_ptr,1);
 8003222:	1dfb      	adds	r3, r7, #7
 8003224:	2201      	movs	r2, #1
 8003226:	4619      	mov	r1, r3
 8003228:	2004      	movs	r0, #4
 800322a:	f7ff ff85 	bl	8003138 <MAX30102_READ_REGISTER>
	return wr_ptr;
 800322e:	79fb      	ldrb	r3, [r7, #7]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <available>:

uint8_t available(void)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
  int8_t numberOfSamples = sense.head - sense.tail;
 800323e:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <available+0x38>)
 8003240:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003244:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <available+0x38>)
 8003246:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	71fb      	strb	r3, [r7, #7]
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	da03      	bge.n	8003260 <available+0x28>
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	3304      	adds	r3, #4
 800325c:	b2db      	uxtb	r3, r3
 800325e:	71fb      	strb	r3, [r7, #7]

  return (numberOfSamples);
 8003260:	79fb      	ldrb	r3, [r7, #7]
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	200003f0 	.word	0x200003f0

08003274 <check_new_data>:




uint16_t check_new_data(){
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
	uint8_t writePointer=MAX30102_get_WR_ptr();
 800327a:	f7ff ffcf 	bl	800321c <MAX30102_get_WR_ptr>
 800327e:	4603      	mov	r3, r0
 8003280:	74fb      	strb	r3, [r7, #19]
	uint8_t readPointer=MAX30102_get_Read_ptr();
 8003282:	f7ff ffbd 	bl	8003200 <MAX30102_get_Read_ptr>
 8003286:	4603      	mov	r3, r0
 8003288:	74bb      	strb	r3, [r7, #18]
	int numberOfSamples = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
	if(readPointer!=writePointer){
 800328e:	7cba      	ldrb	r2, [r7, #18]
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	429a      	cmp	r2, r3
 8003294:	d064      	beq.n	8003360 <check_new_data+0xec>
		 numberOfSamples = writePointer - readPointer;
 8003296:	7cfa      	ldrb	r2, [r7, #19]
 8003298:	7cbb      	ldrb	r3, [r7, #18]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	61fb      	str	r3, [r7, #28]
		 if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	da02      	bge.n	80032aa <check_new_data+0x36>
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	3320      	adds	r3, #32
 80032a8:	61fb      	str	r3, [r7, #28]
		    //We now have the number of readings, now calc bytes to read
		    //For this example we are just doing Red and IR (3 bytes each)
		    int bytesLeftToRead = numberOfSamples * 2 * 3;
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	61bb      	str	r3, [r7, #24]
		    while (bytesLeftToRead > 0)
 80032b6:	e050      	b.n	800335a <check_new_data+0xe6>
		     {
		       int toGet = bytesLeftToRead;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	617b      	str	r3, [r7, #20]
		       if (toGet > I2C_BUFFER_LENGTH)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b20      	cmp	r3, #32
 80032c0:	dd01      	ble.n	80032c6 <check_new_data+0x52>
		       {
		         //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
		         //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
		         //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

		         toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (2 * 3)); //Trim toGet to be a multiple of the samples we need to read
 80032c2:	231e      	movs	r3, #30
 80032c4:	617b      	str	r3, [r7, #20]
		       }

		       bytesLeftToRead -= toGet;
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	61bb      	str	r3, [r7, #24]

		       //Request toGet number of bytes from sensor

		       while (toGet > 0)
 80032ce:	e041      	b.n	8003354 <check_new_data+0xe0>
		       {
		         sense.head++; //Advance the head of the storage struct
 80032d0:	4b26      	ldr	r3, [pc, #152]	@ (800336c <check_new_data+0xf8>)
 80032d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d6:	3301      	adds	r3, #1
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4b24      	ldr	r3, [pc, #144]	@ (800336c <check_new_data+0xf8>)
 80032dc:	f883 2020 	strb.w	r2, [r3, #32]
		         sense.head %= STORAGE_SIZE; //Wrap condition
 80032e0:	4b22      	ldr	r3, [pc, #136]	@ (800336c <check_new_data+0xf8>)
 80032e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <check_new_data+0xf8>)
 80032ee:	f883 2020 	strb.w	r2, [r3, #32]
		         uint32_t red_led,ir_led;

		         uint8_t fifo_data[6]; // To store 6 bytes of FIFO data (3 bytes for red, 3 bytes for IR)

		         // Read 6 bytes from FIFO_DATA register
		         MAX30102_READ_REGISTER(FIFO_DATA_REG, fifo_data, 6);
 80032f2:	463b      	mov	r3, r7
 80032f4:	2206      	movs	r2, #6
 80032f6:	4619      	mov	r1, r3
 80032f8:	2007      	movs	r0, #7
 80032fa:	f7ff ff1d 	bl	8003138 <MAX30102_READ_REGISTER>

		         // Combine the bytes for red LED
		         red_led = ((uint32_t)fifo_data[0] << 16) | ((uint32_t)fifo_data[1] << 8) | fifo_data[2];
 80032fe:	783b      	ldrb	r3, [r7, #0]
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	787b      	ldrb	r3, [r7, #1]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	4313      	orrs	r3, r2
 8003308:	78ba      	ldrb	r2, [r7, #2]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
		         red_led &= 0x03FFFF; // Mask to 18 bits
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003314:	60fb      	str	r3, [r7, #12]
		         sense.red[sense.head] = red_led;
 8003316:	4b15      	ldr	r3, [pc, #84]	@ (800336c <check_new_data+0xf8>)
 8003318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331c:	4619      	mov	r1, r3
 800331e:	4a13      	ldr	r2, [pc, #76]	@ (800336c <check_new_data+0xf8>)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		         // Combine the bytes for IR LED
		         ir_led = ((uint32_t)fifo_data[3] << 16) | ((uint32_t)fifo_data[4] << 8) | fifo_data[5];
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	041a      	lsls	r2, r3, #16
 800332a:	793b      	ldrb	r3, [r7, #4]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	4313      	orrs	r3, r2
 8003330:	797a      	ldrb	r2, [r7, #5]
 8003332:	4313      	orrs	r3, r2
 8003334:	60bb      	str	r3, [r7, #8]
		         ir_led &= 0x03FFFF; // Mask to 18 bits
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800333c:	60bb      	str	r3, [r7, #8]
		         sense.IR[sense.head] = ir_led;
 800333e:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <check_new_data+0xf8>)
 8003340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003344:	4909      	ldr	r1, [pc, #36]	@ (800336c <check_new_data+0xf8>)
 8003346:	3304      	adds	r3, #4
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		         toGet -= 2 * 3;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3b06      	subs	r3, #6
 8003352:	617b      	str	r3, [r7, #20]
		       while (toGet > 0)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	dcba      	bgt.n	80032d0 <check_new_data+0x5c>
		    while (bytesLeftToRead > 0)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2b00      	cmp	r3, #0
 800335e:	dcab      	bgt.n	80032b8 <check_new_data+0x44>

		     } //End while (bytesLeftToRead > 0)

		   } //End readPtr != writePtr

		   return (numberOfSamples); //Let the world know how much new data we found
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	b29b      	uxth	r3, r3
	}
 8003364:	4618      	mov	r0, r3
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	200003f0 	.word	0x200003f0

08003370 <safeCheck>:


bool safeCheck(uint16_t maxTimeToCheck)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	80fb      	strh	r3, [r7, #6]
  uint32_t markTime = millis();
 800337c:	f7fd fe4a 	bl	8001014 <millis>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4613      	mov	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 8003388:	f7fd fe44 	bl	8001014 <millis>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	68f9      	ldr	r1, [r7, #12]
 8003392:	2000      	movs	r0, #0
 8003394:	4688      	mov	r8, r1
 8003396:	4681      	mov	r9, r0
 8003398:	ebb2 0408 	subs.w	r4, r2, r8
 800339c:	eb63 0509 	sbc.w	r5, r3, r9
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	2200      	movs	r2, #0
 80033a4:	469a      	mov	sl, r3
 80033a6:	4693      	mov	fp, r2
 80033a8:	45a2      	cmp	sl, r4
 80033aa:	eb7b 0305 	sbcs.w	r3, fp, r5
 80033ae:	d201      	bcs.n	80033b4 <safeCheck+0x44>
 80033b0:	2300      	movs	r3, #0
 80033b2:	e00a      	b.n	80033ca <safeCheck+0x5a>

	if(check_new_data() == true) //We found new data!
 80033b4:	f7ff ff5e 	bl	8003274 <check_new_data>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <safeCheck+0x52>
	  return(true);
 80033be:	2301      	movs	r3, #1
 80033c0:	e003      	b.n	80033ca <safeCheck+0x5a>

	delay(1);
 80033c2:	2001      	movs	r0, #1
 80033c4:	f7fd fe3e 	bl	8001044 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
 80033c8:	e7de      	b.n	8003388 <safeCheck+0x18>
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080033d4 <getRed>:
    *ir_led &= 0x03FFFF; // Mask to 18 bits
}

//Report the most recent red value
uint32_t getRed(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  //Check the sensor for new data for 250ms
	if(safeCheck(250))
 80033d8:	20fa      	movs	r0, #250	@ 0xfa
 80033da:	f7ff ffc9 	bl	8003370 <safeCheck>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <getRed+0x20>
    return (sense.red[sense.head]);
 80033e4:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <getRed+0x28>)
 80033e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <getRed+0x28>)
 80033ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f2:	e000      	b.n	80033f6 <getRed+0x22>
  else
    return(0); //Sensor failed to find new data
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200003f0 	.word	0x200003f0

08003400 <getIR>:

uint32_t getIR(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  //Check the sensor for new data for 250ms
	if(safeCheck(250))
 8003404:	20fa      	movs	r0, #250	@ 0xfa
 8003406:	f7ff ffb3 	bl	8003370 <safeCheck>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <getIR+0x20>
    return (sense.IR[sense.head]);
 8003410:	4b05      	ldr	r3, [pc, #20]	@ (8003428 <getIR+0x28>)
 8003412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003416:	4a04      	ldr	r2, [pc, #16]	@ (8003428 <getIR+0x28>)
 8003418:	3304      	adds	r3, #4
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	e000      	b.n	8003422 <getIR+0x22>
  else
    return(0); //Sensor failed to find new data
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	200003f0 	.word	0x200003f0

0800342c <nextSample>:

//Advance the tail
void nextSample(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  if(available()) //Only advance the tail if new data is available
 8003430:	f7ff ff02 	bl	8003238 <available>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d010      	beq.n	800345c <nextSample+0x30>
  {
    sense.tail++;
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <nextSample+0x34>)
 800343c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003440:	3301      	adds	r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <nextSample+0x34>)
 8003446:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    sense.tail %= STORAGE_SIZE; //Wrap condition
 800344a:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <nextSample+0x34>)
 800344c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4b02      	ldr	r3, [pc, #8]	@ (8003460 <nextSample+0x34>)
 8003458:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }
}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	200003f0 	.word	0x200003f0

08003464 <acquire_max_30102_data>:
void acquire_max_30102_data(uint32_t num_ters,int8_t* heart_rate_status,int32_t* spo2_var,int32_t* heart_rate_var,int8_t* valid_spo2,bool *status)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	f5ad 7d53 	sub.w	sp, sp, #844	@ 0x34c
 800346a:	af04      	add	r7, sp, #16
 800346c:	f507 744e 	add.w	r4, r7, #824	@ 0x338
 8003470:	f5a4 744b 	sub.w	r4, r4, #812	@ 0x32c
 8003474:	6020      	str	r0, [r4, #0]
 8003476:	f507 704e 	add.w	r0, r7, #824	@ 0x338
 800347a:	f5a0 704c 	sub.w	r0, r0, #816	@ 0x330
 800347e:	6001      	str	r1, [r0, #0]
 8003480:	f507 714e 	add.w	r1, r7, #824	@ 0x338
 8003484:	f5a1 714d 	sub.w	r1, r1, #820	@ 0x334
 8003488:	600a      	str	r2, [r1, #0]
 800348a:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 800348e:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 8003492:	6013      	str	r3, [r2, #0]
	uint32_t irBuffer[100]; //infrared LED sensor data
	uint32_t redBuffer[100];  //red LED sensor data
	int32_t bufferLength;


	bufferLength=100;
 8003494:	2364      	movs	r3, #100	@ 0x64
 8003496:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

	  for (uint8_t i = 0 ; i < bufferLength ; i++)
 800349a:	2300      	movs	r3, #0
 800349c:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 80034a0:	e023      	b.n	80034ea <acquire_max_30102_data+0x86>
	  {
	    while (available() == false) //do we have new data?
	    	check_new_data(); //Check the sensor for new data
 80034a2:	f7ff fee7 	bl	8003274 <check_new_data>
	    while (available() == false) //do we have new data?
 80034a6:	f7ff fec7 	bl	8003238 <available>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f8      	beq.n	80034a2 <acquire_max_30102_data+0x3e>

	    redBuffer[i] = getRed();
 80034b0:	f897 4337 	ldrb.w	r4, [r7, #823]	@ 0x337
 80034b4:	f7ff ff8e 	bl	80033d4 <getRed>
 80034b8:	4602      	mov	r2, r0
 80034ba:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80034be:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80034c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	    irBuffer[i] =  getIR();
 80034c6:	f897 4337 	ldrb.w	r4, [r7, #823]	@ 0x337
 80034ca:	f7ff ff99 	bl	8003400 <getIR>
 80034ce:	4602      	mov	r2, r0
 80034d0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80034d4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80034d8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	    nextSample(); //We're finished with this sample so move to next sample
 80034dc:	f7ff ffa6 	bl	800342c <nextSample>
	  for (uint8_t i = 0 ; i < bufferLength ; i++)
 80034e0:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 80034e4:	3301      	adds	r3, #1
 80034e6:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 80034ea:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 80034ee:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 80034f2:	429a      	cmp	r2, r3
 80034f4:	dcd7      	bgt.n	80034a6 <acquire_max_30102_data+0x42>
	  }
	  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, spo2_var, valid_spo2, heart_rate_var, heart_rate_status);
 80034f6:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80034fa:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80034fe:	f107 0110 	add.w	r1, r7, #16
 8003502:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8003506:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 800350a:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	9202      	str	r2, [sp, #8]
 8003512:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8003516:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	9201      	str	r2, [sp, #4]
 800351e:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8003522:	9200      	str	r2, [sp, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	460a      	mov	r2, r1
 8003528:	f8d7 1330 	ldr.w	r1, [r7, #816]	@ 0x330
 800352c:	f000 f9ba 	bl	80038a4 <maxim_heart_rate_and_oxygen_saturation>
	    if(*valid_spo2==1){
 8003530:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8003534:	f993 3000 	ldrsb.w	r3, [r3]
 8003538:	2b01      	cmp	r3, #1
 800353a:	f040 808a 	bne.w	8003652 <acquire_max_30102_data+0x1ee>
		    	*status=true;
 800353e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
		    return ;
 8003546:	e097      	b.n	8003678 <acquire_max_30102_data+0x214>
		    }
	//  uint32_t start_time = millis();
	  while (--num_ters)
	  {
	    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
	    for (uint8_t i = 25; i < 100; i++)
 8003548:	2319      	movs	r3, #25
 800354a:	f887 3336 	strb.w	r3, [r7, #822]	@ 0x336
 800354e:	e028      	b.n	80035a2 <acquire_max_30102_data+0x13e>
	    {
	      redBuffer[i - 25] = redBuffer[i];
 8003550:	f897 1336 	ldrb.w	r1, [r7, #822]	@ 0x336
 8003554:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 8003558:	f1a3 0219 	sub.w	r2, r3, #25
 800355c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8003560:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8003564:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003568:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800356c:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8003570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	      irBuffer[i - 25] = irBuffer[i];
 8003574:	f897 1336 	ldrb.w	r1, [r7, #822]	@ 0x336
 8003578:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 800357c:	f1a3 0219 	sub.w	r2, r3, #25
 8003580:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8003584:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003588:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800358c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8003590:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for (uint8_t i = 25; i < 100; i++)
 8003598:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 800359c:	3301      	adds	r3, #1
 800359e:	f887 3336 	strb.w	r3, [r7, #822]	@ 0x336
 80035a2:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 80035a6:	2b63      	cmp	r3, #99	@ 0x63
 80035a8:	d9d2      	bls.n	8003550 <acquire_max_30102_data+0xec>
	    }

	    //take 25 sets of samples before calculating the heart rate.
	    for (uint8_t i = 75; i < 100; i++)
 80035aa:	234b      	movs	r3, #75	@ 0x4b
 80035ac:	f887 3335 	strb.w	r3, [r7, #821]	@ 0x335
 80035b0:	e02e      	b.n	8003610 <acquire_max_30102_data+0x1ac>
	    {
	      while (available() == false) //do we have new data?
	    	  check_new_data(); //Check the sensor for new data
 80035b2:	f7ff fe5f 	bl	8003274 <check_new_data>
	      while (available() == false) //do we have new data?
 80035b6:	f7ff fe3f 	bl	8003238 <available>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f8      	beq.n	80035b2 <acquire_max_30102_data+0x14e>



	      redBuffer[i] = getRed();
 80035c0:	f897 4335 	ldrb.w	r4, [r7, #821]	@ 0x335
 80035c4:	f7ff ff06 	bl	80033d4 <getRed>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80035ce:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80035d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	      irBuffer[i] = getIR();
 80035d6:	f897 4335 	ldrb.w	r4, [r7, #821]	@ 0x335
 80035da:	f7ff ff11 	bl	8003400 <getIR>
 80035de:	4602      	mov	r2, r0
 80035e0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80035e4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035e8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	     nextSample(); //We're finished with this sample so move to next sample
 80035ec:	f7ff ff1e 	bl	800342c <nextSample>
	 	 printf(" spo2 =%ld",*spo2_var);
	     printf(" is valid spo2 =%d",*valid_spo2);
		 printf(" red =%ld",redBuffer[i]);
		 printf(" IR valid spo2 =%ld",irBuffer[i]);
*/
		    if(*valid_spo2==1){
 80035f0:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 80035f4:	f993 3000 	ldrsb.w	r3, [r3]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d104      	bne.n	8003606 <acquire_max_30102_data+0x1a2>
			    	*status=true;
 80035fc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
			    return ;
 8003604:	e038      	b.n	8003678 <acquire_max_30102_data+0x214>
	    for (uint8_t i = 75; i < 100; i++)
 8003606:	f897 3335 	ldrb.w	r3, [r7, #821]	@ 0x335
 800360a:	3301      	adds	r3, #1
 800360c:	f887 3335 	strb.w	r3, [r7, #821]	@ 0x335
 8003610:	f897 3335 	ldrb.w	r3, [r7, #821]	@ 0x335
 8003614:	2b63      	cmp	r3, #99	@ 0x63
 8003616:	d9ce      	bls.n	80035b6 <acquire_max_30102_data+0x152>
			    }
	   }
	    //After gathering 25 new samples recalculate HR and SP02

	    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, spo2_var, valid_spo2, heart_rate_var, heart_rate_status);
 8003618:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800361c:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8003620:	f107 0110 	add.w	r1, r7, #16
 8003624:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8003628:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 800362c:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	9202      	str	r2, [sp, #8]
 8003634:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8003638:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	9201      	str	r2, [sp, #4]
 8003640:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8003644:	9200      	str	r2, [sp, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	460a      	mov	r2, r1
 800364a:	f8d7 1330 	ldr.w	r1, [r7, #816]	@ 0x330
 800364e:	f000 f929 	bl	80038a4 <maxim_heart_rate_and_oxygen_saturation>
	  while (--num_ters)
 8003652:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8003656:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 800365a:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 800365e:	f5a2 724b 	sub.w	r2, r2, #812	@ 0x32c
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	3a01      	subs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800366c:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f47f af68 	bne.w	8003548 <acquire_max_30102_data+0xe4>
	  }

}
 8003678:	f507 774f 	add.w	r7, r7, #828	@ 0x33c
 800367c:	46bd      	mov	sp, r7
 800367e:	bd90      	pop	{r4, r7, pc}

08003680 <process_SD_card>:
#include "sd_card.h"
#include "fatfs.h"
#include"formated_printf.h"

void process_SD_card(char log_str[])
{
 8003680:	b580      	push	{r7, lr}
 8003682:	f5ad 5d03 	sub.w	sp, sp, #8384	@ 0x20c0
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800368e:	f843 0ce4 	str.w	r0, [r3, #-228]
  char        buf[100];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 8003692:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8003696:	f103 0308 	add.w	r3, r3, #8
 800369a:	3b04      	subs	r3, #4
 800369c:	2201      	movs	r2, #1
 800369e:	4976      	ldr	r1, [pc, #472]	@ (8003878 <process_SD_card+0x1f8>)
 80036a0:	4618      	mov	r0, r3
 80036a2:	f006 fa3f 	bl	8009b24 <f_mount>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80036ac:	f102 0227 	add.w	r2, r2, #39	@ 0x27
 80036b0:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 80036b2:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80036b6:	f103 0327 	add.w	r3, r3, #39	@ 0x27
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d009      	beq.n	80036d4 <process_SD_card+0x54>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 80036c0:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80036c4:	f103 0327 	add.w	r3, r3, #39	@ 0x27
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4619      	mov	r1, r3
 80036cc:	486b      	ldr	r0, [pc, #428]	@ (800387c <process_SD_card+0x1fc>)
 80036ce:	f008 fa3b 	bl	800bb48 <iprintf>
      break;
 80036d2:	e0c3      	b.n	800385c <process_SD_card+0x1dc>
    }
    print_success("SD Card Mounted Successfully!\r\n");
 80036d4:	486a      	ldr	r0, [pc, #424]	@ (8003880 <process_SD_card+0x200>)
 80036d6:	f7ff fa93 	bl	8002c00 <print_success>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("", &fre_clust, &pfs);
 80036da:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80036de:	3a1c      	subs	r2, #28
 80036e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036e4:	3b20      	subs	r3, #32
 80036e6:	4619      	mov	r1, r3
 80036e8:	4863      	ldr	r0, [pc, #396]	@ (8003878 <process_SD_card+0x1f8>)
 80036ea:	f006 ffc4 	bl	800a676 <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80036ee:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80036f2:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	3b02      	subs	r3, #2
 80036fa:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 80036fe:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 8003702:	8952      	ldrh	r2, [r2, #10]
 8003704:	fb02 f303 	mul.w	r3, r2, r3
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc ff13 	bl	8000534 <__aeabi_ui2d>
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	4b5c      	ldr	r3, [pc, #368]	@ (8003884 <process_SD_card+0x204>)
 8003714:	f7fc ff88 	bl	8000628 <__aeabi_dmul>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	f7fd fa5a 	bl	8000bd8 <__aeabi_d2uiz>
 8003724:	4603      	mov	r3, r0
 8003726:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800372a:	f102 0220 	add.w	r2, r2, #32
 800372e:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8003730:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003734:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8003738:	895b      	ldrh	r3, [r3, #10]
 800373a:	461a      	mov	r2, r3
 800373c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003740:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	4618      	mov	r0, r3
 800374a:	f7fc fef3 	bl	8000534 <__aeabi_ui2d>
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	4b4c      	ldr	r3, [pc, #304]	@ (8003884 <process_SD_card+0x204>)
 8003754:	f7fc ff68 	bl	8000628 <__aeabi_dmul>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	f7fd fa3a 	bl	8000bd8 <__aeabi_d2uiz>
 8003764:	4603      	mov	r3, r0
 8003766:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800376a:	f102 021c 	add.w	r2, r2, #28
 800376e:	6013      	str	r3, [r2, #0]

    //Open the file
    //FA_OPEN_APPEND  | FA_WRITE
    fres = f_open(&fil, "logger.txt", FA_OPEN_APPEND| FA_WRITE);
 8003770:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8003774:	3b34      	subs	r3, #52	@ 0x34
 8003776:	2232      	movs	r2, #50	@ 0x32
 8003778:	4943      	ldr	r1, [pc, #268]	@ (8003888 <process_SD_card+0x208>)
 800377a:	4618      	mov	r0, r3
 800377c:	f006 fa18 	bl	8009bb0 <f_open>
 8003780:	4603      	mov	r3, r0
 8003782:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8003786:	f102 0227 	add.w	r2, r2, #39	@ 0x27
 800378a:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 800378c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8003790:	f103 0327 	add.w	r3, r3, #39	@ 0x27
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <process_SD_card+0x12e>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 800379a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800379e:	f103 0327 	add.w	r3, r3, #39	@ 0x27
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	4619      	mov	r1, r3
 80037a6:	4839      	ldr	r0, [pc, #228]	@ (800388c <process_SD_card+0x20c>)
 80037a8:	f008 f9ce 	bl	800bb48 <iprintf>
      break;
 80037ac:	e056      	b.n	800385c <process_SD_card+0x1dc>
    }

    printf("\n\rWriting data to logger.txt!\r\n");
 80037ae:	4838      	ldr	r0, [pc, #224]	@ (8003890 <process_SD_card+0x210>)
 80037b0:	f008 fa3a 	bl	800bc28 <puts>
    strcat(log_str, "\n\r");
 80037b4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80037b8:	f853 0ce4 	ldr.w	r0, [r3, #-228]
 80037bc:	f7fc fd70 	bl	80002a0 <strlen>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80037c8:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 80037cc:	4413      	add	r3, r2
 80037ce:	4a31      	ldr	r2, [pc, #196]	@ (8003894 <process_SD_card+0x214>)
 80037d0:	8811      	ldrh	r1, [r2, #0]
 80037d2:	7892      	ldrb	r2, [r2, #2]
 80037d4:	8019      	strh	r1, [r3, #0]
 80037d6:	709a      	strb	r2, [r3, #2]

    //write the data
    f_puts(log_str,&fil);
 80037d8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80037dc:	3b34      	subs	r3, #52	@ 0x34
 80037de:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 80037e2:	4619      	mov	r1, r3
 80037e4:	f852 0ce4 	ldr.w	r0, [r2, #-228]
 80037e8:	f007 f8af 	bl	800a94a <f_puts>

    //close your file
    f_close(&fil);
 80037ec:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80037f0:	3b34      	subs	r3, #52	@ 0x34
 80037f2:	4618      	mov	r0, r3
 80037f4:	f006 ff15 	bl	800a622 <f_close>

    //Open the file
    fres = f_open(&fil, "logger.txt", FA_READ);
 80037f8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80037fc:	3b34      	subs	r3, #52	@ 0x34
 80037fe:	2201      	movs	r2, #1
 8003800:	4921      	ldr	r1, [pc, #132]	@ (8003888 <process_SD_card+0x208>)
 8003802:	4618      	mov	r0, r3
 8003804:	f006 f9d4 	bl	8009bb0 <f_open>
 8003808:	4603      	mov	r3, r0
 800380a:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800380e:	f102 0227 	add.w	r2, r2, #39	@ 0x27
 8003812:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8003814:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8003818:	f103 0327 	add.w	r3, r3, #39	@ 0x27
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <process_SD_card+0x1b6>
    {
      printf("File opening Error : (%i)\r\n", fres);
 8003822:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8003826:	f103 0327 	add.w	r3, r3, #39	@ 0x27
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	481a      	ldr	r0, [pc, #104]	@ (8003898 <process_SD_card+0x218>)
 8003830:	f008 f98a 	bl	800bb48 <iprintf>
      break;
 8003834:	e012      	b.n	800385c <process_SD_card+0x1dc>
    }

    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8003836:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800383a:	3a34      	subs	r2, #52	@ 0x34
 800383c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003840:	3b18      	subs	r3, #24
 8003842:	2164      	movs	r1, #100	@ 0x64
 8003844:	4618      	mov	r0, r3
 8003846:	f006 ffcb 	bl	800a7e0 <f_gets>

    //close your file
    f_close(&fil);
 800384a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800384e:	3b34      	subs	r3, #52	@ 0x34
 8003850:	4618      	mov	r0, r3
 8003852:	f006 fee6 	bl	800a622 <f_close>
    printf("\n\rClosing File!\r\n");
 8003856:	4811      	ldr	r0, [pc, #68]	@ (800389c <process_SD_card+0x21c>)
 8003858:	f008 f9e6 	bl	800bc28 <puts>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 800385c:	2200      	movs	r2, #0
 800385e:	4906      	ldr	r1, [pc, #24]	@ (8003878 <process_SD_card+0x1f8>)
 8003860:	2000      	movs	r0, #0
 8003862:	f006 f95f 	bl	8009b24 <f_mount>
  printf("\n\rSD Card Unmounted Successfully!\r\n");
 8003866:	480e      	ldr	r0, [pc, #56]	@ (80038a0 <process_SD_card+0x220>)
 8003868:	f008 f9de 	bl	800bc28 <puts>
}
 800386c:	bf00      	nop
 800386e:	f507 5703 	add.w	r7, r7, #8384	@ 0x20c0
 8003872:	3728      	adds	r7, #40	@ 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	08010d34 	.word	0x08010d34
 800387c:	08010d38 	.word	0x08010d38
 8003880:	08010d54 	.word	0x08010d54
 8003884:	3fe00000 	.word	0x3fe00000
 8003888:	08010d74 	.word	0x08010d74
 800388c:	08010d80 	.word	0x08010d80
 8003890:	08010da4 	.word	0x08010da4
 8003894:	08010dc4 	.word	0x08010dc4
 8003898:	08010dc8 	.word	0x08010dc8
 800389c:	08010de4 	.word	0x08010de4
 80038a0:	08010df8 	.word	0x08010df8

080038a4 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b0b0      	sub	sp, #192	@ 0xc0
 80038a8:	af04      	add	r7, sp, #16
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  int32_t n_peak_interval_sum;

  int32_t n_y_ac, n_x_ac;
  int32_t n_spo2_calc;
  int32_t n_y_dc_max, n_x_dc_max;
  int32_t n_y_dc_max_idx = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int32_t n_x_dc_max_idx = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int32_t an_ratio[5], n_ratio_average;
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0;
 80038be:	2300      	movs	r3, #0
 80038c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038ca:	e00f      	b.n	80038ec <maxim_heart_rate_and_oxygen_saturation+0x48>
 80038cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038dc:	4413      	add	r3, r2
 80038de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038e6:	3301      	adds	r3, #1
 80038e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	dbea      	blt.n	80038cc <maxim_heart_rate_and_oxygen_saturation+0x28>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 8003904:	2300      	movs	r3, #0
 8003906:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800390a:	e013      	b.n	8003934 <maxim_heart_rate_and_oxygen_saturation+0x90>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ;
 800390c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	4619      	mov	r1, r3
 8003920:	4ab4      	ldr	r2, [pc, #720]	@ (8003bf4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003926:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 800392a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800392e:	3301      	adds	r3, #1
 8003930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003934:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	dbe6      	blt.n	800390c <maxim_heart_rate_and_oxygen_saturation+0x68>

  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800393e:	2300      	movs	r3, #0
 8003940:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003944:	e028      	b.n	8003998 <maxim_heart_rate_and_oxygen_saturation+0xf4>
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;
 8003946:	4aab      	ldr	r2, [pc, #684]	@ (8003bf4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800394c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003950:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003954:	3301      	adds	r3, #1
 8003956:	49a7      	ldr	r1, [pc, #668]	@ (8003bf4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003958:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800395c:	441a      	add	r2, r3
 800395e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003962:	3302      	adds	r3, #2
 8003964:	49a3      	ldr	r1, [pc, #652]	@ (8003bf4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003966:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800396a:	441a      	add	r2, r3
 800396c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003970:	3303      	adds	r3, #3
 8003972:	49a0      	ldr	r1, [pc, #640]	@ (8003bf4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003974:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003978:	4413      	add	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	da00      	bge.n	8003980 <maxim_heart_rate_and_oxygen_saturation+0xdc>
 800397e:	3303      	adds	r3, #3
 8003980:	109b      	asrs	r3, r3, #2
 8003982:	4619      	mov	r1, r3
 8003984:	4a9b      	ldr	r2, [pc, #620]	@ (8003bf4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800398a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800398e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003992:	3301      	adds	r3, #1
 8003994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800399c:	2b5f      	cmp	r3, #95	@ 0x5f
 800399e:	ddd2      	ble.n	8003946 <maxim_heart_rate_and_oxygen_saturation+0xa2>
  }
  // calculate threshold
  n_th1=0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039ac:	e00e      	b.n	80039cc <maxim_heart_rate_and_oxygen_saturation+0x128>
    n_th1 +=  an_x[k];
 80039ae:	4a91      	ldr	r2, [pc, #580]	@ (8003bf4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80039b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80039bc:	4413      	add	r3, r2
 80039be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80039c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039c6:	3301      	adds	r3, #1
 80039c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039d0:	2b63      	cmp	r3, #99	@ 0x63
 80039d2:	ddec      	ble.n	80039ae <maxim_heart_rate_and_oxygen_saturation+0x10a>
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
 80039d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039d8:	4a87      	ldr	r2, [pc, #540]	@ (8003bf8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 80039da:	fb82 1203 	smull	r1, r2, r2, r3
 80039de:	1152      	asrs	r2, r2, #5
 80039e0:	17db      	asrs	r3, r3, #31
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1<30) n_th1=30; // min allowed
 80039e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039ec:	2b1d      	cmp	r3, #29
 80039ee:	dc02      	bgt.n	80039f6 <maxim_heart_rate_and_oxygen_saturation+0x152>
 80039f0:	231e      	movs	r3, #30
 80039f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1>60) n_th1=60; // max allowed
 80039f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039fa:	2b3c      	cmp	r3, #60	@ 0x3c
 80039fc:	dd02      	ble.n	8003a04 <maxim_heart_rate_and_oxygen_saturation+0x160>
 80039fe:	233c      	movs	r3, #60	@ 0x3c
 8003a00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a0a:	e00c      	b.n	8003a26 <maxim_heart_rate_and_oxygen_saturation+0x182>
 8003a0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	33b0      	adds	r3, #176	@ 0xb0
 8003a14:	443b      	add	r3, r7
 8003a16:	2200      	movs	r2, #0
 8003a18:	f843 2c88 	str.w	r2, [r3, #-136]
 8003a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a20:	3301      	adds	r3, #1
 8003a22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a2a:	2b0e      	cmp	r3, #14
 8003a2c:	ddee      	ble.n	8003a0c <maxim_heart_rate_and_oxygen_saturation+0x168>
  // since we flipped signal, we use peak detector azs valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks
 8003a2e:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8003a32:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003a36:	230f      	movs	r3, #15
 8003a38:	9302      	str	r3, [sp, #8]
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2364      	movs	r3, #100	@ 0x64
 8003a46:	4a6b      	ldr	r2, [pc, #428]	@ (8003bf4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003a48:	f000 fa36 	bl	8003eb8 <maxim_find_peaks>
  n_peak_interval_sum =0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (n_npks>=2){
 8003a52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	dd38      	ble.n	8003aca <maxim_heart_rate_and_oxygen_saturation+0x226>
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a5e:	e019      	b.n	8003a94 <maxim_heart_rate_and_oxygen_saturation+0x1f0>
 8003a60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	33b0      	adds	r3, #176	@ 0xb0
 8003a68:	443b      	add	r3, r7
 8003a6a:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8003a6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a72:	3b01      	subs	r3, #1
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	33b0      	adds	r3, #176	@ 0xb0
 8003a78:	443b      	add	r3, r7
 8003a7a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003a84:	4413      	add	r3, r2
 8003a86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	dbe0      	blt.n	8003a60 <maxim_heart_rate_and_oxygen_saturation+0x1bc>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 8003a9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8003aaa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 8003aae:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003ab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ab6:	fb92 f2f3 	sdiv	r2, r2, r3
 8003aba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003abe:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8003ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	e007      	b.n	8003ada <maxim_heart_rate_and_oxygen_saturation+0x236>
  }
  else  {
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 8003aca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ace:	4a4b      	ldr	r2, [pc, #300]	@ (8003bfc <maxim_heart_rate_and_oxygen_saturation+0x358>)
 8003ad0:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 8003ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8003ada:	2300      	movs	r3, #0
 8003adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ae0:	e01c      	b.n	8003b1c <maxim_heart_rate_and_oxygen_saturation+0x278>
      an_x[k] =  pun_ir_buffer[k] ;
 8003ae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4619      	mov	r1, r3
 8003af0:	4a40      	ldr	r2, [pc, #256]	@ (8003bf4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      an_y[k] =  pun_red_buffer[k] ;
 8003afa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	4a3d      	ldr	r2, [pc, #244]	@ (8003c00 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 8003b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8003b12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b16:	3301      	adds	r3, #1
 8003b18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b1c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	dbdd      	blt.n	8003ae2 <maxim_heart_rate_and_oxygen_saturation+0x23e>
  }

  // find precise min near an_ir_valley_locs
  n_exact_ir_valley_locs_count =n_npks;
 8003b26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  n_i_ratio_count = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for(k=0; k< 5; k++) an_ratio[k]=0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b3e:	e00c      	b.n	8003b5a <maxim_heart_rate_and_oxygen_saturation+0x2b6>
 8003b40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	33b0      	adds	r3, #176	@ 0xb0
 8003b48:	443b      	add	r3, r7
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f843 2c9c 	str.w	r2, [r3, #-156]
 8003b50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b54:	3301      	adds	r3, #1
 8003b56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	ddee      	ble.n	8003b40 <maxim_heart_rate_and_oxygen_saturation+0x29c>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8003b62:	2300      	movs	r3, #0
 8003b64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b68:	e015      	b.n	8003b96 <maxim_heart_rate_and_oxygen_saturation+0x2f2>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 8003b6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	33b0      	adds	r3, #176	@ 0xb0
 8003b72:	443b      	add	r3, r7
 8003b74:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003b78:	2b64      	cmp	r3, #100	@ 0x64
 8003b7a:	dd07      	ble.n	8003b8c <maxim_heart_rate_and_oxygen_saturation+0x2e8>
      *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bfc <maxim_heart_rate_and_oxygen_saturation+0x358>)
 8003b80:	601a      	str	r2, [r3, #0]
      *pch_spo2_valid  = 0;
 8003b82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	e189      	b.n	8003ea0 <maxim_heart_rate_and_oxygen_saturation+0x5fc>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8003b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b90:	3301      	adds	r3, #1
 8003b92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	dbe3      	blt.n	8003b6a <maxim_heart_rate_and_oxygen_saturation+0x2c6>
      return;
    }
  }
  // find max between two valley locations
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ba8:	e129      	b.n	8003dfe <maxim_heart_rate_and_oxygen_saturation+0x55a>
    n_y_dc_max= -16777216 ;
 8003baa:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    n_x_dc_max= -16777216;
 8003bb2:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 8003bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	33b0      	adds	r3, #176	@ 0xb0
 8003bc4:	443b      	add	r3, r7
 8003bc6:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8003bca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	33b0      	adds	r3, #176	@ 0xb0
 8003bd2:	443b      	add	r3, r7
 8003bd4:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	f340 810a 	ble.w	8003df4 <maxim_heart_rate_and_oxygen_saturation+0x550>
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8003be0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	33b0      	adds	r3, #176	@ 0xb0
 8003be8:	443b      	add	r3, r7
 8003bea:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bf2:	e034      	b.n	8003c5e <maxim_heart_rate_and_oxygen_saturation+0x3ba>
 8003bf4:	20000414 	.word	0x20000414
 8003bf8:	51eb851f 	.word	0x51eb851f
 8003bfc:	fffffc19 	.word	0xfffffc19
 8003c00:	200005a4 	.word	0x200005a4
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 8003c04:	4aa8      	ldr	r2, [pc, #672]	@ (8003ea8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8003c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003c12:	429a      	cmp	r2, r3
 8003c14:	da0a      	bge.n	8003c2c <maxim_heart_rate_and_oxygen_saturation+0x388>
 8003c16:	4aa4      	ldr	r2, [pc, #656]	@ (8003ea8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8003c18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 8003c2c:	4a9f      	ldr	r2, [pc, #636]	@ (8003eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8003c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	da0a      	bge.n	8003c54 <maxim_heart_rate_and_oxygen_saturation+0x3b0>
 8003c3e:	4a9b      	ldr	r2, [pc, #620]	@ (8003eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8003c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8003c54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c62:	3301      	adds	r3, #1
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	33b0      	adds	r3, #176	@ 0xb0
 8003c68:	443b      	add	r3, r7
 8003c6a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003c6e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003c72:	429a      	cmp	r2, r3
 8003c74:	dbc6      	blt.n	8003c04 <maxim_heart_rate_and_oxygen_saturation+0x360>
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 8003c76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	33b0      	adds	r3, #176	@ 0xb0
 8003c80:	443b      	add	r3, r7
 8003c82:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003c86:	4a89      	ldr	r2, [pc, #548]	@ (8003eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8003c88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	33b0      	adds	r3, #176	@ 0xb0
 8003c94:	443b      	add	r3, r7
 8003c96:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003c9a:	4984      	ldr	r1, [pc, #528]	@ (8003eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8003c9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ca0:	1ad2      	subs	r2, r2, r3
 8003ca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	33b0      	adds	r3, #176	@ 0xb0
 8003caa:	443b      	add	r3, r7
 8003cac:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003cb0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003cb4:	1acb      	subs	r3, r1, r3
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ;
 8003cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	33b0      	adds	r3, #176	@ 0xb0
 8003cc4:	443b      	add	r3, r7
 8003cc6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003cca:	4a78      	ldr	r2, [pc, #480]	@ (8003eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8003ccc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003cd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	33b0      	adds	r3, #176	@ 0xb0
 8003cda:	443b      	add	r3, r7
 8003cdc:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8003ce0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	33b0      	adds	r3, #176	@ 0xb0
 8003ce8:	443b      	add	r3, r7
 8003cea:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003cee:	1acb      	subs	r3, r1, r3
 8003cf0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003cf2:	fb91 f3f3 	sdiv	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 8003cfa:	4a6c      	ldr	r2, [pc, #432]	@ (8003eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8003cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	677b      	str	r3, [r7, #116]	@ 0x74
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 8003d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d0e:	3301      	adds	r3, #1
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	33b0      	adds	r3, #176	@ 0xb0
 8003d14:	443b      	add	r3, r7
 8003d16:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003d1a:	4a63      	ldr	r2, [pc, #396]	@ (8003ea8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8003d1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	33b0      	adds	r3, #176	@ 0xb0
 8003d28:	443b      	add	r3, r7
 8003d2a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003d2e:	495e      	ldr	r1, [pc, #376]	@ (8003ea8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8003d30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d34:	1ad2      	subs	r2, r2, r3
 8003d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	33b0      	adds	r3, #176	@ 0xb0
 8003d3e:	443b      	add	r3, r7
 8003d40:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003d44:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003d48:	1acb      	subs	r3, r1, r3
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]);
 8003d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	33b0      	adds	r3, #176	@ 0xb0
 8003d58:	443b      	add	r3, r7
 8003d5a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003d5e:	4a52      	ldr	r2, [pc, #328]	@ (8003ea8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8003d60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d68:	3301      	adds	r3, #1
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	33b0      	adds	r3, #176	@ 0xb0
 8003d6e:	443b      	add	r3, r7
 8003d70:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8003d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	33b0      	adds	r3, #176	@ 0xb0
 8003d7c:	443b      	add	r3, r7
 8003d7e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003d82:	1acb      	subs	r3, r1, r3
 8003d84:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003d86:	fb91 f3f3 	sdiv	r3, r1, r3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 8003d8e:	4a46      	ldr	r2, [pc, #280]	@ (8003ea8 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8003d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	673b      	str	r3, [r7, #112]	@ 0x70
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8003d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003da0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003da4:	fb02 f303 	mul.w	r3, r2, r3
 8003da8:	11db      	asrs	r3, r3, #7
 8003daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8003dac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	11db      	asrs	r3, r3, #7
 8003db8:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8003dba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	dd19      	ble.n	8003df4 <maxim_heart_rate_and_oxygen_saturation+0x550>
 8003dc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	dc15      	bgt.n	8003df4 <maxim_heart_rate_and_oxygen_saturation+0x550>
 8003dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d012      	beq.n	8003df4 <maxim_heart_rate_and_oxygen_saturation+0x550>
      {
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8003dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd0:	2264      	movs	r2, #100	@ 0x64
 8003dd2:	fb03 f202 	mul.w	r2, r3, r2
 8003dd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dd8:	fb92 f2f3 	sdiv	r2, r2, r3
 8003ddc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	33b0      	adds	r3, #176	@ 0xb0
 8003de4:	443b      	add	r3, r7
 8003de6:	f843 2c9c 	str.w	r2, [r3, #-156]
        n_i_ratio_count++;
 8003dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dee:	3301      	adds	r3, #1
 8003df0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8003df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e02:	3b01      	subs	r3, #1
 8003e04:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f6ff aece 	blt.w	8003baa <maxim_heart_rate_and_oxygen_saturation+0x306>
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8003e0e:	f107 0314 	add.w	r3, r7, #20
 8003e12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f943 	bl	80040a2 <maxim_sort_ascend>
  n_middle_idx= n_i_ratio_count/2;
 8003e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e20:	0fda      	lsrs	r2, r3, #31
 8003e22:	4413      	add	r3, r2
 8003e24:	105b      	asrs	r3, r3, #1
 8003e26:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (n_middle_idx >1)
 8003e28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	dd13      	ble.n	8003e56 <maxim_heart_rate_and_oxygen_saturation+0x5b2>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8003e2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e30:	3b01      	subs	r3, #1
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	33b0      	adds	r3, #176	@ 0xb0
 8003e36:	443b      	add	r3, r7
 8003e38:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 8003e3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	33b0      	adds	r3, #176	@ 0xb0
 8003e42:	443b      	add	r3, r7
 8003e44:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8003e48:	4413      	add	r3, r2
 8003e4a:	0fda      	lsrs	r2, r3, #31
 8003e4c:	4413      	add	r3, r2
 8003e4e:	105b      	asrs	r3, r3, #1
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e54:	e007      	b.n	8003e66 <maxim_heart_rate_and_oxygen_saturation+0x5c2>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
 8003e56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	33b0      	adds	r3, #176	@ 0xb0
 8003e5c:	443b      	add	r3, r7
 8003e5e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8003e62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  if( n_ratio_average>2 && n_ratio_average <184){
 8003e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	dd11      	ble.n	8003e92 <maxim_heart_rate_and_oxygen_saturation+0x5ee>
 8003e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e72:	2bb7      	cmp	r3, #183	@ 0xb7
 8003e74:	dc0d      	bgt.n	8003e92 <maxim_heart_rate_and_oxygen_saturation+0x5ee>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8003e76:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb0 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8003e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e7c:	4413      	add	r3, r2
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	67bb      	str	r3, [r7, #120]	@ 0x78
    *pn_spo2 = n_spo2_calc ;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003e86:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8003e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e006      	b.n	8003ea0 <maxim_heart_rate_and_oxygen_saturation+0x5fc>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	4a07      	ldr	r2, [pc, #28]	@ (8003eb4 <maxim_heart_rate_and_oxygen_saturation+0x610>)
 8003e96:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8003e98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
  }
}
 8003ea0:	37b0      	adds	r7, #176	@ 0xb0
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000414 	.word	0x20000414
 8003eac:	200005a4 	.word	0x200005a4
 8003eb0:	08011094 	.word	0x08011094
 8003eb4:	fffffc19 	.word	0xfffffc19

08003eb8 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f812 	bl	8003efa <maxim_peaks_above_min_height>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f880 	bl	8003fe2 <maxim_remove_close_peaks>
  *n_npks = min( *n_npks, n_max_num );
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	bfa8      	it	ge
 8003eec:	461a      	movge	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	601a      	str	r2, [r3, #0]
}
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]
  int32_t i = 1, n_width;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
  *n_npks = 0;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]

  while (i < n_size-1){
 8003f12:	e05a      	b.n	8003fca <maxim_peaks_above_min_height+0xd0>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a3a      	ldr	r2, [r7, #32]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	da4f      	bge.n	8003fc4 <maxim_peaks_above_min_height+0xca>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f34:	3b01      	subs	r3, #1
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	440b      	add	r3, r1
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	dd40      	ble.n	8003fc4 <maxim_peaks_above_min_height+0xca>
      n_width = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8003f46:	e002      	b.n	8003f4e <maxim_peaks_above_min_height+0x54>
        n_width++;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	dd0d      	ble.n	8003f76 <maxim_peaks_above_min_height+0x7c>
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	6979      	ldr	r1, [r7, #20]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	440b      	add	r3, r1
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	440b      	add	r3, r1
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d0e8      	beq.n	8003f48 <maxim_peaks_above_min_height+0x4e>
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	6979      	ldr	r1, [r7, #20]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	440b      	add	r3, r1
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	440b      	add	r3, r1
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	dd13      	ble.n	8003fba <maxim_peaks_above_min_height+0xc0>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b0e      	cmp	r3, #14
 8003f98:	dc0f      	bgt.n	8003fba <maxim_peaks_above_min_height+0xc0>
        pn_locs[(*n_npks)++] = i;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	6011      	str	r1, [r2, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	601a      	str	r2, [r3, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8003fb8:	e007      	b.n	8003fca <maxim_peaks_above_min_height+0xd0>
      }
      else
        i += n_width;
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8003fc2:	e002      	b.n	8003fca <maxim_peaks_above_min_height+0xd0>
    }
    else
      i++;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
  while (i < n_size-1){
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	db9f      	blt.n	8003f14 <maxim_peaks_above_min_height+0x1a>
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b088      	sub	sp, #32
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	603b      	str	r3, [r7, #0]

  int32_t i, j, n_old_npks, n_dist;

  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68f9      	ldr	r1, [r7, #12]
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f895 	bl	8004128 <maxim_sort_indices_descend>

  for ( i = -1; i < *pn_npks; i++ ){
 8003ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	e03e      	b.n	8004084 <maxim_remove_close_peaks+0xa2>
    n_old_npks = *pn_npks;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	617b      	str	r3, [r7, #20]
    *pn_npks = i+1;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	e02c      	b.n	8004076 <maxim_remove_close_peaks+0x94>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d005      	beq.n	800403a <maxim_remove_close_peaks+0x58>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	440b      	add	r3, r1
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	e001      	b.n	800403e <maxim_remove_close_peaks+0x5c>
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	613b      	str	r3, [r7, #16]
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	dc04      	bgt.n	8004054 <maxim_remove_close_peaks+0x72>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	425b      	negs	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	429a      	cmp	r2, r3
 8004052:	da0d      	bge.n	8004070 <maxim_remove_close_peaks+0x8e>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	441a      	add	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	1c58      	adds	r0, r3, #1
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	6008      	str	r0, [r1, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	68f9      	ldr	r1, [r7, #12]
 800406a:	440b      	add	r3, r1
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3301      	adds	r3, #1
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	429a      	cmp	r2, r3
 800407c:	dbce      	blt.n	800401c <maxim_remove_close_peaks+0x3a>
  for ( i = -1; i < *pn_npks; i++ ){
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3301      	adds	r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	429a      	cmp	r2, r3
 800408c:	dbbb      	blt.n	8004006 <maxim_remove_close_peaks+0x24>
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4619      	mov	r1, r3
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f804 	bl	80040a2 <maxim_sort_ascend>
}
 800409a:	bf00      	nop
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80040a2:	b480      	push	{r7}
 80040a4:	b087      	sub	sp, #28
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80040ac:	2301      	movs	r3, #1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e02f      	b.n	8004112 <maxim_sort_ascend+0x70>
    n_temp = pn_x[i];
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	e00f      	b.n	80040e4 <maxim_sort_ascend+0x42>
        pn_x[j] = pn_x[j-1];
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040ca:	3b01      	subs	r3, #1
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	441a      	add	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	440b      	add	r3, r1
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	dd0a      	ble.n	8004100 <maxim_sort_ascend+0x5e>
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040f0:	3b01      	subs	r3, #1
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	dbe1      	blt.n	80040c4 <maxim_sort_ascend+0x22>
    pn_x[j] = n_temp;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	3301      	adds	r3, #1
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	dbcb      	blt.n	80040b2 <maxim_sort_ascend+0x10>
  }
}
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8004128:	b480      	push	{r7}
 800412a:	b089      	sub	sp, #36	@ 0x24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8004134:	2301      	movs	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	e037      	b.n	80041aa <maxim_sort_indices_descend+0x82>
    n_temp = pn_indx[i];
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	4413      	add	r3, r2
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	617b      	str	r3, [r7, #20]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	e00f      	b.n	800416c <maxim_sort_indices_descend+0x44>
      pn_indx[j] = pn_indx[j-1];
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004152:	3b01      	subs	r3, #1
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	441a      	add	r2, r3
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	440b      	add	r3, r1
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	3b01      	subs	r3, #1
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	dd12      	ble.n	8004198 <maxim_sort_indices_descend+0x70>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004182:	3b01      	subs	r3, #1
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	440b      	add	r3, r1
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	440b      	add	r3, r1
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	dcd9      	bgt.n	800414c <maxim_sort_indices_descend+0x24>
    pn_indx[j] = n_temp;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	4413      	add	r3, r2
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	3301      	adds	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	dbc3      	blt.n	800413a <maxim_sort_indices_descend+0x12>
  }
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	3724      	adds	r7, #36	@ 0x24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <FSM_INIT>:

extern volatile char command_ack[32];



void FSM_INIT(StateMachine *sm){
 80041c0:	b4b0      	push	{r4, r5, r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	sm->current_state=STATE_HEART_DATA_ACQUIRE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
	sm->valid_heart_rate=0;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	705a      	strb	r2, [r3, #1]
	sm->spo2=0;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]
	sm->heart_rate=0;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
	sm->valid_spo2=0;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	731a      	strb	r2, [r3, #12]
	strcpy(sm->nrf_payload,"default_payload");
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3320      	adds	r3, #32
 80041ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004228 <FSM_INIT+0x68>)
 80041ec:	461c      	mov	r4, r3
 80041ee:	4615      	mov	r5, r2
 80041f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041f2:	6020      	str	r0, [r4, #0]
 80041f4:	6061      	str	r1, [r4, #4]
 80041f6:	60a2      	str	r2, [r4, #8]
 80041f8:	60e3      	str	r3, [r4, #12]
	sm->dir1=0;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	761a      	strb	r2, [r3, #24]
	sm->dir2=0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	765a      	strb	r2, [r3, #25]
	sm->gps_lat=0.0;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	611a      	str	r2, [r3, #16]
	sm->gps_long=0.0;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	615a      	str	r2, [r3, #20]
	sm->temperature=0.0;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	61da      	str	r2, [r3, #28]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bcb0      	pop	{r4, r5, r7}
 8004226:	4770      	bx	lr
 8004228:	08010e1c 	.word	0x08010e1c

0800422c <execute_sm>:

void execute_sm(StateMachine *sm){
 800422c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422e:	b09f      	sub	sp, #124	@ 0x7c
 8004230:	af06      	add	r7, sp, #24
 8004232:	6078      	str	r0, [r7, #4]
	switch(sm->current_state){
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b04      	cmp	r3, #4
 800423a:	f200 81cb 	bhi.w	80045d4 <execute_sm+0x3a8>
 800423e:	a201      	add	r2, pc, #4	@ (adr r2, 8004244 <execute_sm+0x18>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004259 	.word	0x08004259
 8004248:	0800433d 	.word	0x0800433d
 800424c:	0800438b 	.word	0x0800438b
 8004250:	080045bd 	.word	0x080045bd
 8004254:	08004571 	.word	0x08004571
		case STATE_HEART_DATA_ACQUIRE:
			sm->valid_heart_rate=0;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	705a      	strb	r2, [r3, #1]
			sm->spo2=0;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	605a      	str	r2, [r3, #4]
			sm->heart_rate=0;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
			sm->valid_spo2=0;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	731a      	strb	r2, [r3, #12]
			sm->temperature=0.0;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	61da      	str	r2, [r3, #28]
			print_info("\n \r State machine Status: Acquire Max30102 data \n \r");
 8004278:	48ac      	ldr	r0, [pc, #688]	@ (800452c <execute_sm+0x300>)
 800427a:	f7fe fccf 	bl	8002c1c <print_info>
			if(strcmp(command_ack,"DIS_MAX")==0){
 800427e:	49ac      	ldr	r1, [pc, #688]	@ (8004530 <execute_sm+0x304>)
 8004280:	48ac      	ldr	r0, [pc, #688]	@ (8004534 <execute_sm+0x308>)
 8004282:	f7fb ffad 	bl	80001e0 <strcmp>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d111      	bne.n	80042b0 <execute_sm+0x84>
				printf("MAX30102 Is disabled ! \n \r");
 800428c:	48aa      	ldr	r0, [pc, #680]	@ (8004538 <execute_sm+0x30c>)
 800428e:	f007 fc5b 	bl	800bb48 <iprintf>
				   MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x0); // spo2
 8004292:	2100      	movs	r1, #0
 8004294:	2009      	movs	r0, #9
 8004296:	f7fe ff31 	bl	80030fc <MAX30102_WRITE_REGISTER>
				sm->spo2=0.0;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	605a      	str	r2, [r3, #4]
				sm->temperature=0.0;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	61da      	str	r2, [r3, #28]
				sm->current_state=STATE_GPS_DATA_ACQUIRE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
				break;
 80042ae:	e191      	b.n	80045d4 <execute_sm+0x3a8>
			}
			MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x3); // spo2
 80042b0:	2103      	movs	r1, #3
 80042b2:	2009      	movs	r0, #9
 80042b4:	f7fe ff22 	bl	80030fc <MAX30102_WRITE_REGISTER>
			bool valid_data=false;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			uint32_t timeout_val=1; //try for 10 seconds to get heart rate data
 80042be:	2301      	movs	r3, #1
 80042c0:	64bb      	str	r3, [r7, #72]	@ 0x48
			acquire_max_30102_data(timeout_val,&(sm->valid_heart_rate),&(sm->spo2),&(sm->heart_rate),&(sm->valid_spo2),&valid_data);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	1c59      	adds	r1, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	1d18      	adds	r0, r3, #4
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f103 0408 	add.w	r4, r3, #8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	330c      	adds	r3, #12
 80042d4:	f107 0247 	add.w	r2, r7, #71	@ 0x47
 80042d8:	9201      	str	r2, [sp, #4]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	4623      	mov	r3, r4
 80042de:	4602      	mov	r2, r0
 80042e0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80042e2:	f7ff f8bf 	bl	8003464 <acquire_max_30102_data>
			sm->current_state=STATE_GPS_DATA_ACQUIRE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	701a      	strb	r2, [r3, #0]
			if(!valid_data){
 80042ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80042f0:	f083 0301 	eor.w	r3, r3, #1
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <execute_sm+0xd6>
				print_error("TIMEOUT ENCOUNTERED! \n \r");
 80042fa:	4890      	ldr	r0, [pc, #576]	@ (800453c <execute_sm+0x310>)
 80042fc:	f7fe fc9c 	bl	8002c38 <print_error>
 8004300:	e008      	b.n	8004314 <execute_sm+0xe8>
			}

			else{
				 print_success("\n\rMAX30102 DATA SUCCESS \n \r");
 8004302:	488f      	ldr	r0, [pc, #572]	@ (8004540 <execute_sm+0x314>)
 8004304:	f7fe fc7c 	bl	8002c00 <print_success>
				 printf("Spo2 : %ld \n \r",sm->spo2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4619      	mov	r1, r3
 800430e:	488d      	ldr	r0, [pc, #564]	@ (8004544 <execute_sm+0x318>)
 8004310:	f007 fc1a 	bl	800bb48 <iprintf>
			}

			MAX30102_Start_Temperature_Measurement();
 8004314:	f7fe ff32 	bl	800317c <MAX30102_Start_Temperature_Measurement>
			sm->temperature =MAX30102_Read_Temperature();
 8004318:	f7fe ff3c 	bl	8003194 <MAX30102_Read_Temperature>
 800431c:	eef0 7a40 	vmov.f32	s15, s0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	edc3 7a07 	vstr	s15, [r3, #28]
			printf("temperature value : %f \n \r",sm->temperature);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f924 	bl	8000578 <__aeabi_f2d>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4884      	ldr	r0, [pc, #528]	@ (8004548 <execute_sm+0x31c>)
 8004336:	f007 fc07 	bl	800bb48 <iprintf>
			break;
 800433a:	e14b      	b.n	80045d4 <execute_sm+0x3a8>

		case STATE_GPS_DATA_ACQUIRE:
			print_info("State machine Status: Acquire GPS Data \n \r");
 800433c:	4883      	ldr	r0, [pc, #524]	@ (800454c <execute_sm+0x320>)
 800433e:	f7fe fc6d 	bl	8002c1c <print_info>
			if(strcmp(command_ack,"DIS_GPS")==0){
 8004342:	4983      	ldr	r1, [pc, #524]	@ (8004550 <execute_sm+0x324>)
 8004344:	487b      	ldr	r0, [pc, #492]	@ (8004534 <execute_sm+0x308>)
 8004346:	f7fb ff4b 	bl	80001e0 <strcmp>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <execute_sm+0x13c>
				printf("GPS Is disabled ! \n \r");
 8004350:	4880      	ldr	r0, [pc, #512]	@ (8004554 <execute_sm+0x328>)
 8004352:	f007 fbf9 	bl	800bb48 <iprintf>
				sm->gps_lat=0.0;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	611a      	str	r2, [r3, #16]
				sm->gps_long=0.0;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	615a      	str	r2, [r3, #20]
 8004366:	e00c      	b.n	8004382 <execute_sm+0x156>
			}
			else{
			parse_gps_output(&(sm->gps_lat), &(sm->dir1), &(sm->gps_long), &(sm->dir2));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f103 0010 	add.w	r0, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f103 0118 	add.w	r1, r3, #24
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f103 0214 	add.w	r2, r3, #20
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3319      	adds	r3, #25
 800437e:	f7fe fc69 	bl	8002c54 <parse_gps_output>
			}
			sm->current_state=STATE_PACKET_FORMATION;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	701a      	strb	r2, [r3, #0]
			break;
 8004388:	e124      	b.n	80045d4 <execute_sm+0x3a8>

		case STATE_PACKET_FORMATION:
			float tempr=0;
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	653b      	str	r3, [r7, #80]	@ 0x50
			int spo2=0;
 8004390:	2300      	movs	r3, #0
 8004392:	65fb      	str	r3, [r7, #92]	@ 0x5c
			char delimiter='-';
 8004394:	232d      	movs	r3, #45	@ 0x2d
 8004396:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			print_info("\n\rState machine Status: Packet formatting \n \r");
 800439a:	486f      	ldr	r0, [pc, #444]	@ (8004558 <execute_sm+0x32c>)
 800439c:	f7fe fc3e 	bl	8002c1c <print_info>
			tempr=sm->temperature;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	653b      	str	r3, [r7, #80]	@ 0x50
			spo2=sm->spo2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
			int payload_idx=0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	65bb      	str	r3, [r7, #88]	@ 0x58
			sm->nrf_payload[payload_idx++]='T';
 80043b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	2254      	movs	r2, #84	@ 0x54
 80043bc:	f883 2020 	strb.w	r2, [r3, #32]
			if(spo2==-999){
 80043c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043c2:	4a66      	ldr	r2, [pc, #408]	@ (800455c <execute_sm+0x330>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <execute_sm+0x1a0>
			spo2=0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
			}
			char temp_holder[10];
			sprintf(temp_holder, "%.2f", tempr);
 80043cc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80043ce:	f7fc f8d3 	bl	8000578 <__aeabi_f2d>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80043da:	4961      	ldr	r1, [pc, #388]	@ (8004560 <execute_sm+0x334>)
 80043dc:	f007 fc2c 	bl	800bc38 <siprintf>
			int i=0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	657b      	str	r3, [r7, #84]	@ 0x54
			while(temp_holder[i]){
 80043e4:	e00e      	b.n	8004404 <execute_sm+0x1d8>
			sm->nrf_payload[payload_idx++]=temp_holder[i++];
 80043e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043e8:	1c53      	adds	r3, r2, #1
 80043ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ee:	1c59      	adds	r1, r3, #1
 80043f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043f2:	3260      	adds	r2, #96	@ 0x60
 80043f4:	443a      	add	r2, r7
 80043f6:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	460a      	mov	r2, r1
 8004400:	f883 2020 	strb.w	r2, [r3, #32]
			while(temp_holder[i]){
 8004404:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440a:	4413      	add	r3, r2
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e9      	bne.n	80043e6 <execute_sm+0x1ba>
			}
			sm->nrf_payload[payload_idx++]=delimiter;
 8004412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	4413      	add	r3, r2
 800441c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004420:	f883 2020 	strb.w	r2, [r3, #32]
			sm->nrf_payload[payload_idx++]='O';
 8004424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	65ba      	str	r2, [r7, #88]	@ 0x58
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	224f      	movs	r2, #79	@ 0x4f
 8004430:	f883 2020 	strb.w	r2, [r3, #32]
			i++;
 8004434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004436:	3301      	adds	r3, #1
 8004438:	657b      	str	r3, [r7, #84]	@ 0x54
			sprintf(temp_holder, "%d", spo2);
 800443a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800443e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004440:	4948      	ldr	r1, [pc, #288]	@ (8004564 <execute_sm+0x338>)
 8004442:	4618      	mov	r0, r3
 8004444:	f007 fbf8 	bl	800bc38 <siprintf>
			i=0;
 8004448:	2300      	movs	r3, #0
 800444a:	657b      	str	r3, [r7, #84]	@ 0x54
			while(temp_holder[i]){
 800444c:	e00e      	b.n	800446c <execute_sm+0x240>
			sm->nrf_payload[payload_idx++]=temp_holder[i++];
 800444e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004450:	1c53      	adds	r3, r2, #1
 8004452:	657b      	str	r3, [r7, #84]	@ 0x54
 8004454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	65b9      	str	r1, [r7, #88]	@ 0x58
 800445a:	3260      	adds	r2, #96	@ 0x60
 800445c:	443a      	add	r2, r7
 800445e:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	460a      	mov	r2, r1
 8004468:	f883 2020 	strb.w	r2, [r3, #32]
			while(temp_holder[i]){
 800446c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004472:	4413      	add	r3, r2
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e9      	bne.n	800444e <execute_sm+0x222>
			}

			char gps_string[50];
			sm->nrf_payload[payload_idx++]=delimiter;
 800447a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4413      	add	r3, r2
 8004484:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004488:	f883 2020 	strb.w	r2, [r3, #32]
			sprintf(gps_string, "G%.2f%c,%.2f%c", sm->gps_lat, sm->dir1, sm->gps_long, sm->dir2);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc f871 	bl	8000578 <__aeabi_f2d>
 8004496:	4604      	mov	r4, r0
 8004498:	460d      	mov	r5, r1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	7e1b      	ldrb	r3, [r3, #24]
 800449e:	461e      	mov	r6, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc f867 	bl	8000578 <__aeabi_f2d>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	7e49      	ldrb	r1, [r1, #25]
 80044b2:	f107 0008 	add.w	r0, r7, #8
 80044b6:	9104      	str	r1, [sp, #16]
 80044b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044bc:	9600      	str	r6, [sp, #0]
 80044be:	4622      	mov	r2, r4
 80044c0:	462b      	mov	r3, r5
 80044c2:	4929      	ldr	r1, [pc, #164]	@ (8004568 <execute_sm+0x33c>)
 80044c4:	f007 fbb8 	bl	800bc38 <siprintf>
			i = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	657b      	str	r3, [r7, #84]	@ 0x54
			while (gps_string[i]) {
 80044cc:	e00e      	b.n	80044ec <execute_sm+0x2c0>
				sm->nrf_payload[payload_idx++] = gps_string[i++];
 80044ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80044d0:	1c53      	adds	r3, r2, #1
 80044d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044d6:	1c59      	adds	r1, r3, #1
 80044d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044da:	3260      	adds	r2, #96	@ 0x60
 80044dc:	443a      	add	r2, r7
 80044de:	f812 1c58 	ldrb.w	r1, [r2, #-88]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	460a      	mov	r2, r1
 80044e8:	f883 2020 	strb.w	r2, [r3, #32]
			while (gps_string[i]) {
 80044ec:	f107 0208 	add.w	r2, r7, #8
 80044f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f2:	4413      	add	r3, r2
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e9      	bne.n	80044ce <execute_sm+0x2a2>
			}

			sm->nrf_payload[payload_idx] = '\0'; // Null-terminate the payload
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044fe:	4413      	add	r3, r2
 8004500:	3320      	adds	r3, #32
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]
			printf("Formatted Payload %s size of payload is %d \n\r", sm->nrf_payload,strlen(sm->nrf_payload));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f103 0420 	add.w	r4, r3, #32
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3320      	adds	r3, #32
 8004510:	4618      	mov	r0, r3
 8004512:	f7fb fec5 	bl	80002a0 <strlen>
 8004516:	4603      	mov	r3, r0
 8004518:	461a      	mov	r2, r3
 800451a:	4621      	mov	r1, r4
 800451c:	4813      	ldr	r0, [pc, #76]	@ (800456c <execute_sm+0x340>)
 800451e:	f007 fb13 	bl	800bb48 <iprintf>

			sm->current_state = STATE_TRANSMIT_NRF;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2204      	movs	r2, #4
 8004526:	701a      	strb	r2, [r3, #0]
			break;
 8004528:	e054      	b.n	80045d4 <execute_sm+0x3a8>
 800452a:	bf00      	nop
 800452c:	08010e2c 	.word	0x08010e2c
 8004530:	08010e60 	.word	0x08010e60
 8004534:	20000240 	.word	0x20000240
 8004538:	08010e68 	.word	0x08010e68
 800453c:	08010e84 	.word	0x08010e84
 8004540:	08010ea0 	.word	0x08010ea0
 8004544:	08010ebc 	.word	0x08010ebc
 8004548:	08010ecc 	.word	0x08010ecc
 800454c:	08010ee8 	.word	0x08010ee8
 8004550:	08010f14 	.word	0x08010f14
 8004554:	08010f1c 	.word	0x08010f1c
 8004558:	08010f34 	.word	0x08010f34
 800455c:	fffffc19 	.word	0xfffffc19
 8004560:	08010f64 	.word	0x08010f64
 8004564:	08010f6c 	.word	0x08010f6c
 8004568:	08010f70 	.word	0x08010f70
 800456c:	08010f80 	.word	0x08010f80

		case STATE_TRANSMIT_NRF:
			print_info("\n\rState machine Status: Transmit PayLoad \n \r");
 8004570:	481a      	ldr	r0, [pc, #104]	@ (80045dc <execute_sm+0x3b0>)
 8004572:	f7fe fb53 	bl	8002c1c <print_info>
			if(NRF_TX_DATA(sm->nrf_payload,strlen(sm->nrf_payload))==1){
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f103 0420 	add.w	r4, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3320      	adds	r3, #32
 8004580:	4618      	mov	r0, r3
 8004582:	f7fb fe8d 	bl	80002a0 <strlen>
 8004586:	4603      	mov	r3, r0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	4619      	mov	r1, r3
 800458c:	4620      	mov	r0, r4
 800458e:	f7fd fcdb 	bl	8001f48 <NRF_TX_DATA>
 8004592:	4603      	mov	r3, r0
 8004594:	2b01      	cmp	r3, #1
 8004596:	d109      	bne.n	80045ac <execute_sm+0x380>
			printf("\n \r transmit success payload size was %d \n \r",strlen(sm->nrf_payload));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3320      	adds	r3, #32
 800459c:	4618      	mov	r0, r3
 800459e:	f7fb fe7f 	bl	80002a0 <strlen>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4619      	mov	r1, r3
 80045a6:	480e      	ldr	r0, [pc, #56]	@ (80045e0 <execute_sm+0x3b4>)
 80045a8:	f007 face 	bl	800bb48 <iprintf>
			}
			sm->current_state=STATE_STORE_DATA_SD_CARD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2203      	movs	r2, #3
 80045b0:	701a      	strb	r2, [r3, #0]
			delay(2000);
 80045b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80045b6:	f7fc fd45 	bl	8001044 <delay>
			break;
 80045ba:	e00b      	b.n	80045d4 <execute_sm+0x3a8>
		case STATE_STORE_DATA_SD_CARD:
			print_info("\n\rState machine Status: Log Data to SD CARD\n \r");
 80045bc:	4809      	ldr	r0, [pc, #36]	@ (80045e4 <execute_sm+0x3b8>)
 80045be:	f7fe fb2d 	bl	8002c1c <print_info>
			process_SD_card(sm->nrf_payload);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3320      	adds	r3, #32
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff f85a 	bl	8003680 <process_SD_card>
			sm->current_state=STATE_HEART_DATA_ACQUIRE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
			break;
 80045d2:	bf00      	nop
	}

}
 80045d4:	bf00      	nop
 80045d6:	3764      	adds	r7, #100	@ 0x64
 80045d8:	46bd      	mov	sp, r7
 80045da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045dc:	08010fb0 	.word	0x08010fb0
 80045e0:	08010fe0 	.word	0x08010fe0
 80045e4:	08011010 	.word	0x08011010

080045e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
 80045f2:	4b10      	ldr	r3, [pc, #64]	@ (8004634 <HAL_MspInit+0x4c>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004634 <HAL_MspInit+0x4c>)
 80045f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80045fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004634 <HAL_MspInit+0x4c>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	4b09      	ldr	r3, [pc, #36]	@ (8004634 <HAL_MspInit+0x4c>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	4a08      	ldr	r2, [pc, #32]	@ (8004634 <HAL_MspInit+0x4c>)
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	@ 0x40
 800461a:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <HAL_MspInit+0x4c>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004626:	2007      	movs	r0, #7
 8004628:	f000 fdba 	bl	80051a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800

08004638 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	@ 0x28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	f107 0314 	add.w	r3, r7, #20
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a28      	ldr	r2, [pc, #160]	@ (80046f8 <HAL_SPI_MspInit+0xc0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d14a      	bne.n	80046f0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	4b27      	ldr	r3, [pc, #156]	@ (80046fc <HAL_SPI_MspInit+0xc4>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	4a26      	ldr	r2, [pc, #152]	@ (80046fc <HAL_SPI_MspInit+0xc4>)
 8004664:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004668:	6413      	str	r3, [r2, #64]	@ 0x40
 800466a:	4b24      	ldr	r3, [pc, #144]	@ (80046fc <HAL_SPI_MspInit+0xc4>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b20      	ldr	r3, [pc, #128]	@ (80046fc <HAL_SPI_MspInit+0xc4>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	4a1f      	ldr	r2, [pc, #124]	@ (80046fc <HAL_SPI_MspInit+0xc4>)
 8004680:	f043 0304 	orr.w	r3, r3, #4
 8004684:	6313      	str	r3, [r2, #48]	@ 0x30
 8004686:	4b1d      	ldr	r3, [pc, #116]	@ (80046fc <HAL_SPI_MspInit+0xc4>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	4b19      	ldr	r3, [pc, #100]	@ (80046fc <HAL_SPI_MspInit+0xc4>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	4a18      	ldr	r2, [pc, #96]	@ (80046fc <HAL_SPI_MspInit+0xc4>)
 800469c:	f043 0302 	orr.w	r3, r3, #2
 80046a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046a2:	4b16      	ldr	r3, [pc, #88]	@ (80046fc <HAL_SPI_MspInit+0xc4>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046ae:	230c      	movs	r3, #12
 80046b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b2:	2302      	movs	r3, #2
 80046b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ba:	2303      	movs	r3, #3
 80046bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046be:	2305      	movs	r3, #5
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046c2:	f107 0314 	add.w	r3, r7, #20
 80046c6:	4619      	mov	r1, r3
 80046c8:	480d      	ldr	r0, [pc, #52]	@ (8004700 <HAL_SPI_MspInit+0xc8>)
 80046ca:	f000 fe3d 	bl	8005348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d4:	2302      	movs	r3, #2
 80046d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046dc:	2303      	movs	r3, #3
 80046de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046e0:	2305      	movs	r3, #5
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e4:	f107 0314 	add.w	r3, r7, #20
 80046e8:	4619      	mov	r1, r3
 80046ea:	4806      	ldr	r0, [pc, #24]	@ (8004704 <HAL_SPI_MspInit+0xcc>)
 80046ec:	f000 fe2c 	bl	8005348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80046f0:	bf00      	nop
 80046f2:	3728      	adds	r7, #40	@ 0x28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40003800 	.word	0x40003800
 80046fc:	40023800 	.word	0x40023800
 8004700:	40020800 	.word	0x40020800
 8004704:	40020400 	.word	0x40020400

08004708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	@ 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004710:	f107 0314 	add.w	r3, r7, #20
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1d      	ldr	r2, [pc, #116]	@ (800479c <HAL_UART_MspInit+0x94>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d134      	bne.n	8004794 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	4b1c      	ldr	r3, [pc, #112]	@ (80047a0 <HAL_UART_MspInit+0x98>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	4a1b      	ldr	r2, [pc, #108]	@ (80047a0 <HAL_UART_MspInit+0x98>)
 8004734:	f043 0310 	orr.w	r3, r3, #16
 8004738:	6453      	str	r3, [r2, #68]	@ 0x44
 800473a:	4b19      	ldr	r3, [pc, #100]	@ (80047a0 <HAL_UART_MspInit+0x98>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	4b15      	ldr	r3, [pc, #84]	@ (80047a0 <HAL_UART_MspInit+0x98>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	4a14      	ldr	r2, [pc, #80]	@ (80047a0 <HAL_UART_MspInit+0x98>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6313      	str	r3, [r2, #48]	@ 0x30
 8004756:	4b12      	ldr	r3, [pc, #72]	@ (80047a0 <HAL_UART_MspInit+0x98>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004762:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004768:	2302      	movs	r3, #2
 800476a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	2300      	movs	r3, #0
 800476e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004770:	2303      	movs	r3, #3
 8004772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004774:	2307      	movs	r3, #7
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004778:	f107 0314 	add.w	r3, r7, #20
 800477c:	4619      	mov	r1, r3
 800477e:	4809      	ldr	r0, [pc, #36]	@ (80047a4 <HAL_UART_MspInit+0x9c>)
 8004780:	f000 fde2 	bl	8005348 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004784:	2200      	movs	r2, #0
 8004786:	2100      	movs	r1, #0
 8004788:	2025      	movs	r0, #37	@ 0x25
 800478a:	f000 fd14 	bl	80051b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800478e:	2025      	movs	r0, #37	@ 0x25
 8004790:	f000 fd2d 	bl	80051ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004794:	bf00      	nop
 8004796:	3728      	adds	r7, #40	@ 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40011000 	.word	0x40011000
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40020000 	.word	0x40020000

080047a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <NMI_Handler+0x4>

080047b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047b4:	bf00      	nop
 80047b6:	e7fd      	b.n	80047b4 <HardFault_Handler+0x4>

080047b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047bc:	bf00      	nop
 80047be:	e7fd      	b.n	80047bc <MemManage_Handler+0x4>

080047c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <BusFault_Handler+0x4>

080047c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047cc:	bf00      	nop
 80047ce:	e7fd      	b.n	80047cc <UsageFault_Handler+0x4>

080047d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047de:	b480      	push	{r7}
 80047e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047e2:	bf00      	nop
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  Uart_isr(&huart1);
 8004800:	4803      	ldr	r0, [pc, #12]	@ (8004810 <USART1_IRQHandler+0x14>)
 8004802:	f000 fa97 	bl	8004d34 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004806:	4802      	ldr	r0, [pc, #8]	@ (8004810 <USART1_IRQHandler+0x14>)
 8004808:	f002 f876 	bl	80068f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800480c:	bf00      	nop
 800480e:	bd80      	pop	{r7, pc}
 8004810:	200003a8 	.word	0x200003a8

08004814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return 1;
 8004818:	2301      	movs	r3, #1
}
 800481a:	4618      	mov	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <_kill>:

int _kill(int pid, int sig)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800482e:	f007 fb79 	bl	800bf24 <__errno>
 8004832:	4603      	mov	r3, r0
 8004834:	2216      	movs	r2, #22
 8004836:	601a      	str	r2, [r3, #0]
  return -1;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <_exit>:

void _exit (int status)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800484c:	f04f 31ff 	mov.w	r1, #4294967295
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ffe7 	bl	8004824 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004856:	bf00      	nop
 8004858:	e7fd      	b.n	8004856 <_exit+0x12>

0800485a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b086      	sub	sp, #24
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e00a      	b.n	8004882 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800486c:	f000 fb38 	bl	8004ee0 <__io_getchar>
 8004870:	4601      	mov	r1, r0
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	60ba      	str	r2, [r7, #8]
 8004878:	b2ca      	uxtb	r2, r1
 800487a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3301      	adds	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	429a      	cmp	r2, r3
 8004888:	dbf0      	blt.n	800486c <_read+0x12>
  }

  return len;
 800488a:	687b      	ldr	r3, [r7, #4]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e009      	b.n	80048ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	60ba      	str	r2, [r7, #8]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fb08 	bl	8004ec4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	3301      	adds	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	dbf1      	blt.n	80048a6 <_write+0x12>
  }
  return len;
 80048c2:	687b      	ldr	r3, [r7, #4]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <_close>:

int _close(int file)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80048d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048f4:	605a      	str	r2, [r3, #4]
  return 0;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <_isatty>:

int _isatty(int file)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800490c:	2301      	movs	r3, #1
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800493c:	4a14      	ldr	r2, [pc, #80]	@ (8004990 <_sbrk+0x5c>)
 800493e:	4b15      	ldr	r3, [pc, #84]	@ (8004994 <_sbrk+0x60>)
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004948:	4b13      	ldr	r3, [pc, #76]	@ (8004998 <_sbrk+0x64>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d102      	bne.n	8004956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004950:	4b11      	ldr	r3, [pc, #68]	@ (8004998 <_sbrk+0x64>)
 8004952:	4a12      	ldr	r2, [pc, #72]	@ (800499c <_sbrk+0x68>)
 8004954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004956:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <_sbrk+0x64>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	429a      	cmp	r2, r3
 8004962:	d207      	bcs.n	8004974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004964:	f007 fade 	bl	800bf24 <__errno>
 8004968:	4603      	mov	r3, r0
 800496a:	220c      	movs	r2, #12
 800496c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800496e:	f04f 33ff 	mov.w	r3, #4294967295
 8004972:	e009      	b.n	8004988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004974:	4b08      	ldr	r3, [pc, #32]	@ (8004998 <_sbrk+0x64>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800497a:	4b07      	ldr	r3, [pc, #28]	@ (8004998 <_sbrk+0x64>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4413      	add	r3, r2
 8004982:	4a05      	ldr	r2, [pc, #20]	@ (8004998 <_sbrk+0x64>)
 8004984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004986:	68fb      	ldr	r3, [r7, #12]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20020000 	.word	0x20020000
 8004994:	00000400 	.word	0x00000400
 8004998:	20000734 	.word	0x20000734
 800499c:	20000ee0 	.word	0x20000ee0

080049a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049a4:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <SystemInit+0x20>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049aa:	4a05      	ldr	r2, [pc, #20]	@ (80049c0 <SystemInit+0x20>)
 80049ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049b4:	bf00      	nop
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	e000ed00 	.word	0xe000ed00

080049c4 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80049c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a00 <Ringbuf_init+0x3c>)
 80049ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004a04 <Ringbuf_init+0x40>)
 80049cc:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80049ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004a08 <Ringbuf_init+0x44>)
 80049d0:	4a0e      	ldr	r2, [pc, #56]	@ (8004a0c <Ringbuf_init+0x48>)
 80049d2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80049d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <Ringbuf_init+0x4c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695a      	ldr	r2, [r3, #20]
 80049da:	4b0d      	ldr	r3, [pc, #52]	@ (8004a10 <Ringbuf_init+0x4c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80049e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a10 <Ringbuf_init+0x4c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <Ringbuf_init+0x4c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0220 	orr.w	r2, r2, #32
 80049f2:	60da      	str	r2, [r3, #12]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000b4c 	.word	0x20000b4c
 8004a04:	2000073c 	.word	0x2000073c
 8004a08:	20000b50 	.word	0x20000b50
 8004a0c:	20000944 	.word	0x20000944
 8004a10:	200003a8 	.word	0x200003a8

08004a14 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	6039      	str	r1, [r7, #0]
 8004a1e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a26:	3301      	adds	r3, #1
 8004a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d009      	beq.n	8004a4e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	79f9      	ldrb	r1, [r7, #7]
 8004a44:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8004a62:	4b13      	ldr	r3, [pc, #76]	@ (8004ab0 <Uart_read+0x54>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004a6a:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <Uart_read+0x54>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d102      	bne.n	8004a7c <Uart_read+0x20>
  {
    return -1;
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	e013      	b.n	8004aa4 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab0 <Uart_read+0x54>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <Uart_read+0x54>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004a88:	5cd3      	ldrb	r3, [r2, r3]
 8004a8a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8004a8c:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <Uart_read+0x54>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <Uart_read+0x54>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000b4c 	.word	0x20000b4c

08004ab4 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae4 <IsDataAvailable+0x30>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	4b08      	ldr	r3, [pc, #32]	@ (8004ae4 <IsDataAvailable+0x30>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000b4c 	.word	0x20000b4c

08004ae8 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8004aec:	4b0c      	ldr	r3, [pc, #48]	@ (8004b20 <Uart_peek+0x38>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004af4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <Uart_peek+0x38>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d102      	bne.n	8004b06 <Uart_peek+0x1e>
  {
    return -1;
 8004b00:	f04f 33ff 	mov.w	r3, #4294967295
 8004b04:	e006      	b.n	8004b14 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8004b06:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <Uart_peek+0x38>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <Uart_peek+0x38>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004b12:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000b4c 	.word	0x20000b4c

08004b24 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fb fbb4 	bl	80002a0 <strlen>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8004b40:	e01e      	b.n	8004b80 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8004b42:	4b36      	ldr	r3, [pc, #216]	@ (8004c1c <Copy_upto+0xf8>)
 8004b44:	6819      	ldr	r1, [r3, #0]
 8004b46:	4b35      	ldr	r3, [pc, #212]	@ (8004c1c <Copy_upto+0xf8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6838      	ldr	r0, [r7, #0]
 8004b52:	4403      	add	r3, r0
 8004b54:	5c8a      	ldrb	r2, [r1, r2]
 8004b56:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8004b58:	4b30      	ldr	r3, [pc, #192]	@ (8004c1c <Copy_upto+0xf8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	4b2e      	ldr	r3, [pc, #184]	@ (8004c1c <Copy_upto+0xf8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b6a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3301      	adds	r3, #1
 8004b72:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8004b74:	bf00      	nop
 8004b76:	f7ff ff9d 	bl	8004ab4 <IsDataAvailable>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0fa      	beq.n	8004b76 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8004b80:	f7ff ffb2 	bl	8004ae8 <Uart_peek>
 8004b84:	4601      	mov	r1, r0
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	4299      	cmp	r1, r3
 8004b90:	d1d7      	bne.n	8004b42 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8004b92:	e027      	b.n	8004be4 <Copy_upto+0xc0>
	{
		so_far++;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	3301      	adds	r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8004b9a:	f7ff ff5f 	bl	8004a5c <Uart_read>
 8004b9e:	4601      	mov	r1, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	613a      	str	r2, [r7, #16]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	b2ca      	uxtb	r2, r1
 8004bae:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d101      	bne.n	8004bbc <Copy_upto+0x98>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e02a      	b.n	8004c12 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8004bbc:	4b18      	ldr	r3, [pc, #96]	@ (8004c20 <Copy_upto+0xfc>)
 8004bbe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004bc2:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8004bc4:	bf00      	nop
 8004bc6:	f7ff ff75 	bl	8004ab4 <IsDataAvailable>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d103      	bne.n	8004bd8 <Copy_upto+0xb4>
 8004bd0:	4b13      	ldr	r3, [pc, #76]	@ (8004c20 <Copy_upto+0xfc>)
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f6      	bne.n	8004bc6 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	@ (8004c20 <Copy_upto+0xfc>)
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <Copy_upto+0xc0>
 8004be0:	2300      	movs	r3, #0
 8004be2:	e016      	b.n	8004c12 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8004be4:	f7ff ff80 	bl	8004ae8 <Uart_peek>
 8004be8:	4601      	mov	r1, r0
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4413      	add	r3, r2
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	4299      	cmp	r1, r3
 8004bf4:	d0ce      	beq.n	8004b94 <Copy_upto+0x70>
	}

	if (so_far != len)
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d002      	beq.n	8004c04 <Copy_upto+0xe0>
	{
		so_far = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
		goto again;
 8004c02:	e79d      	b.n	8004b40 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d101      	bne.n	8004c10 <Copy_upto+0xec>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <Copy_upto+0xee>
	else return 0;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000b4c 	.word	0x20000b4c
 8004c20:	20000738 	.word	0x20000738

08004c24 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fb fb35 	bl	80002a0 <strlen>
 8004c36:	4603      	mov	r3, r0
 8004c38:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8004c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d2c <Wait_for+0x108>)
 8004c3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004c40:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8004c42:	bf00      	nop
 8004c44:	f7ff ff36 	bl	8004ab4 <IsDataAvailable>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <Wait_for+0x32>
 8004c4e:	4b37      	ldr	r3, [pc, #220]	@ (8004d2c <Wait_for+0x108>)
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f6      	bne.n	8004c44 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8004c56:	4b35      	ldr	r3, [pc, #212]	@ (8004d2c <Wait_for+0x108>)
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d119      	bne.n	8004c92 <Wait_for+0x6e>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e060      	b.n	8004d24 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8004c62:	4b33      	ldr	r3, [pc, #204]	@ (8004d30 <Wait_for+0x10c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c6a:	4b31      	ldr	r3, [pc, #196]	@ (8004d30 <Wait_for+0x10c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d00b      	beq.n	8004c8e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8004c76:	4b2e      	ldr	r3, [pc, #184]	@ (8004d30 <Wait_for+0x10c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	4b2b      	ldr	r3, [pc, #172]	@ (8004d30 <Wait_for+0x10c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c88:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004c8c:	e001      	b.n	8004c92 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e048      	b.n	8004d24 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8004c92:	f7ff ff29 	bl	8004ae8 <Uart_peek>
 8004c96:	4601      	mov	r1, r0
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	4299      	cmp	r1, r3
 8004ca2:	d1de      	bne.n	8004c62 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8004ca4:	e027      	b.n	8004cf6 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8004cac:	4b20      	ldr	r3, [pc, #128]	@ (8004d30 <Wait_for+0x10c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d30 <Wait_for+0x10c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d101      	bne.n	8004cce <Wait_for+0xaa>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e02a      	b.n	8004d24 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8004cce:	4b17      	ldr	r3, [pc, #92]	@ (8004d2c <Wait_for+0x108>)
 8004cd0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004cd4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8004cd6:	bf00      	nop
 8004cd8:	f7ff feec 	bl	8004ab4 <IsDataAvailable>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <Wait_for+0xc6>
 8004ce2:	4b12      	ldr	r3, [pc, #72]	@ (8004d2c <Wait_for+0x108>)
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f6      	bne.n	8004cd8 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8004cea:	4b10      	ldr	r3, [pc, #64]	@ (8004d2c <Wait_for+0x108>)
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <Wait_for+0xd2>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e016      	b.n	8004d24 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8004cf6:	f7ff fef7 	bl	8004ae8 <Uart_peek>
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	4299      	cmp	r1, r3
 8004d06:	d0ce      	beq.n	8004ca6 <Wait_for+0x82>
	}

	if (so_far != len)
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d002      	beq.n	8004d16 <Wait_for+0xf2>
	{
		so_far = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
		goto again;
 8004d14:	e791      	b.n	8004c3a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d101      	bne.n	8004d22 <Wait_for+0xfe>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <Wait_for+0x100>
	else return 0;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20000738 	.word	0x20000738
 8004d30:	20000b4c 	.word	0x20000b4c

08004d34 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d013      	beq.n	8004d7e <Uart_isr+0x4a>
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8004d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004de8 <Uart_isr+0xb4>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	4611      	mov	r1, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fe4c 	bl	8004a14 <store_char>
        return;
 8004d7c:	e031      	b.n	8004de2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d02c      	beq.n	8004de2 <Uart_isr+0xae>
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d027      	beq.n	8004de2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8004d92:	4b16      	ldr	r3, [pc, #88]	@ (8004dec <Uart_isr+0xb8>)
 8004d94:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004d98:	4b14      	ldr	r3, [pc, #80]	@ (8004dec <Uart_isr+0xb8>)
 8004d9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d108      	bne.n	8004db4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004db0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8004db2:	e015      	b.n	8004de0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8004db4:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <Uart_isr+0xb8>)
 8004db6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004dba:	4a0c      	ldr	r2, [pc, #48]	@ (8004dec <Uart_isr+0xb8>)
 8004dbc:	5cd3      	ldrb	r3, [r2, r3]
 8004dbe:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <Uart_isr+0xb8>)
 8004dc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dcc:	4a07      	ldr	r2, [pc, #28]	@ (8004dec <Uart_isr+0xb8>)
 8004dce:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	7bba      	ldrb	r2, [r7, #14]
 8004dde:	605a      	str	r2, [r3, #4]
    	return;
 8004de0:	bf00      	nop
    }
}
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000b4c 	.word	0x20000b4c
 8004dec:	20000944 	.word	0x20000944

08004df0 <usart_init>:
 *  usart get and put and usart init
 */

#include "usart.h"

void usart_init() {
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 8004df4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e60 <usart_init+0x70>)
 8004df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df8:	4a19      	ldr	r2, [pc, #100]	@ (8004e60 <usart_init+0x70>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dfe:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 8004e00:	4b17      	ldr	r3, [pc, #92]	@ (8004e60 <usart_init+0x70>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	4a16      	ldr	r2, [pc, #88]	@ (8004e60 <usart_init+0x70>)
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 and PA3 as alternate function
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER2_Pos);
 8004e0c:	4b15      	ldr	r3, [pc, #84]	@ (8004e64 <usart_init+0x74>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a14      	ldr	r2, [pc, #80]	@ (8004e64 <usart_init+0x74>)
 8004e12:	f043 0320 	orr.w	r3, r3, #32
 8004e16:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER3_Pos);
 8004e18:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <usart_init+0x74>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a11      	ldr	r2, [pc, #68]	@ (8004e64 <usart_init+0x74>)
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e22:	6013      	str	r3, [r2, #0]

    // Set PA2 to USART_TX and PA3 to USART_RX
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos); // TX alternate function
 8004e24:	4b0f      	ldr	r3, [pc, #60]	@ (8004e64 <usart_init+0x74>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	4a0e      	ldr	r2, [pc, #56]	@ (8004e64 <usart_init+0x74>)
 8004e2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e2e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL3_Pos); // RX alternate function
 8004e30:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <usart_init+0x74>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	4a0b      	ldr	r2, [pc, #44]	@ (8004e64 <usart_init+0x74>)
 8004e36:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8004e3a:	6213      	str	r3, [r2, #32]

    // Enable USART, transmitter, and receiver
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <usart_init+0x78>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4a09      	ldr	r2, [pc, #36]	@ (8004e68 <usart_init+0x78>)
 8004e42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e46:	f043 030c 	orr.w	r3, r3, #12
 8004e4a:	60d3      	str	r3, [r2, #12]

    // Set baud rate to 9600 (make sure BAUD_9600 is defined based on your clock setup)
    USART2->BRR = BAUD_9600;
 8004e4c:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <usart_init+0x78>)
 8004e4e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004e52:	609a      	str	r2, [r3, #8]

    // Test character output to verify USART setup
   // USART2->DR = 'B';
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800
 8004e64:	40020000 	.word	0x40020000
 8004e68:	40004400 	.word	0x40004400

08004e6c <usart_out>:

void usart_out(char ch) {
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)) {
 8004e76:	bf00      	nop
 8004e78:	4b07      	ldr	r3, [pc, #28]	@ (8004e98 <usart_out+0x2c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f9      	beq.n	8004e78 <usart_out+0xc>
        // Wait until transmit buffer is empty
    }
    USART2->DR = ch;
 8004e84:	4a04      	ldr	r2, [pc, #16]	@ (8004e98 <usart_out+0x2c>)
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	6053      	str	r3, [r2, #4]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40004400 	.word	0x40004400

08004e9c <usart_get>:
    while (*string) {
        usart_out(*string++);
    }
}

char usart_get() {
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE)) {
 8004ea0:	bf00      	nop
 8004ea2:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <usart_get+0x24>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f9      	beq.n	8004ea2 <usart_get+0x6>
        // Wait until receive buffer is not empty
    }
    return USART2->DR;
 8004eae:	4b04      	ldr	r3, [pc, #16]	@ (8004ec0 <usart_get+0x24>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b2db      	uxtb	r3, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40004400 	.word	0x40004400

08004ec4 <__io_putchar>:

// Override weak symbols for printf and getchar compatibility
int __io_putchar(int ch) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
    usart_out((char)ch); // Send character using USART
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff ffcb 	bl	8004e6c <usart_out>
    return ch;           // Return the character for compatibility
 8004ed6:	687b      	ldr	r3, [r7, #4]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <__io_getchar>:

int __io_getchar(void) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
    return usart_get();  // Receive character using USART
 8004ee4:	f7ff ffda 	bl	8004e9c <usart_get>
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ef0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004f28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ef4:	f7ff fd54 	bl	80049a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ef8:	480c      	ldr	r0, [pc, #48]	@ (8004f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004efa:	490d      	ldr	r1, [pc, #52]	@ (8004f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004efc:	4a0d      	ldr	r2, [pc, #52]	@ (8004f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f00:	e002      	b.n	8004f08 <LoopCopyDataInit>

08004f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f06:	3304      	adds	r3, #4

08004f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f0c:	d3f9      	bcc.n	8004f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f10:	4c0a      	ldr	r4, [pc, #40]	@ (8004f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f14:	e001      	b.n	8004f1a <LoopFillZerobss>

08004f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f18:	3204      	adds	r2, #4

08004f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f1c:	d3fb      	bcc.n	8004f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f1e:	f007 f807 	bl	800bf30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f22:	f7fd ff2d 	bl	8002d80 <main>
  bx  lr    
 8004f26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f30:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004f34:	08011a28 	.word	0x08011a28
  ldr r2, =_sbss
 8004f38:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004f3c:	20000ee0 	.word	0x20000ee0

08004f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f40:	e7fe      	b.n	8004f40 <ADC_IRQHandler>
	...

08004f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f48:	4b0e      	ldr	r3, [pc, #56]	@ (8004f84 <HAL_Init+0x40>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004f84 <HAL_Init+0x40>)
 8004f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f54:	4b0b      	ldr	r3, [pc, #44]	@ (8004f84 <HAL_Init+0x40>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a0a      	ldr	r2, [pc, #40]	@ (8004f84 <HAL_Init+0x40>)
 8004f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f60:	4b08      	ldr	r3, [pc, #32]	@ (8004f84 <HAL_Init+0x40>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a07      	ldr	r2, [pc, #28]	@ (8004f84 <HAL_Init+0x40>)
 8004f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f6c:	2003      	movs	r0, #3
 8004f6e:	f000 f917 	bl	80051a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f72:	2000      	movs	r0, #0
 8004f74:	f000 f808 	bl	8004f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f78:	f7ff fb36 	bl	80045e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40023c00 	.word	0x40023c00

08004f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f90:	4b12      	ldr	r3, [pc, #72]	@ (8004fdc <HAL_InitTick+0x54>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4b12      	ldr	r3, [pc, #72]	@ (8004fe0 <HAL_InitTick+0x58>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f92f 	bl	800520a <HAL_SYSTICK_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e00e      	b.n	8004fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b0f      	cmp	r3, #15
 8004fba:	d80a      	bhi.n	8004fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc4:	f000 f8f7 	bl	80051b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fc8:	4a06      	ldr	r2, [pc, #24]	@ (8004fe4 <HAL_InitTick+0x5c>)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	2000000c 	.word	0x2000000c
 8004fe0:	20000014 	.word	0x20000014
 8004fe4:	20000010 	.word	0x20000010

08004fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return uwTick;
 8004fec:	4b03      	ldr	r3, [pc, #12]	@ (8004ffc <HAL_GetTick+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000b54 	.word	0x20000b54

08005000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005010:	4b0c      	ldr	r3, [pc, #48]	@ (8005044 <__NVIC_SetPriorityGrouping+0x44>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800501c:	4013      	ands	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800502c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005032:	4a04      	ldr	r2, [pc, #16]	@ (8005044 <__NVIC_SetPriorityGrouping+0x44>)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	60d3      	str	r3, [r2, #12]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800504c:	4b04      	ldr	r3, [pc, #16]	@ (8005060 <__NVIC_GetPriorityGrouping+0x18>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	f003 0307 	and.w	r3, r3, #7
}
 8005056:	4618      	mov	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	e000ed00 	.word	0xe000ed00

08005064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800506e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005072:	2b00      	cmp	r3, #0
 8005074:	db0b      	blt.n	800508e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	f003 021f 	and.w	r2, r3, #31
 800507c:	4907      	ldr	r1, [pc, #28]	@ (800509c <__NVIC_EnableIRQ+0x38>)
 800507e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2001      	movs	r0, #1
 8005086:	fa00 f202 	lsl.w	r2, r0, r2
 800508a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	e000e100 	.word	0xe000e100

080050a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	6039      	str	r1, [r7, #0]
 80050aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	db0a      	blt.n	80050ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	490c      	ldr	r1, [pc, #48]	@ (80050ec <__NVIC_SetPriority+0x4c>)
 80050ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050be:	0112      	lsls	r2, r2, #4
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	440b      	add	r3, r1
 80050c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050c8:	e00a      	b.n	80050e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	4908      	ldr	r1, [pc, #32]	@ (80050f0 <__NVIC_SetPriority+0x50>)
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	3b04      	subs	r3, #4
 80050d8:	0112      	lsls	r2, r2, #4
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	440b      	add	r3, r1
 80050de:	761a      	strb	r2, [r3, #24]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	e000e100 	.word	0xe000e100
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b089      	sub	sp, #36	@ 0x24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f1c3 0307 	rsb	r3, r3, #7
 800510e:	2b04      	cmp	r3, #4
 8005110:	bf28      	it	cs
 8005112:	2304      	movcs	r3, #4
 8005114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3304      	adds	r3, #4
 800511a:	2b06      	cmp	r3, #6
 800511c:	d902      	bls.n	8005124 <NVIC_EncodePriority+0x30>
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3b03      	subs	r3, #3
 8005122:	e000      	b.n	8005126 <NVIC_EncodePriority+0x32>
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005128:	f04f 32ff 	mov.w	r2, #4294967295
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43da      	mvns	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	401a      	ands	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800513c:	f04f 31ff 	mov.w	r1, #4294967295
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	fa01 f303 	lsl.w	r3, r1, r3
 8005146:	43d9      	mvns	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800514c:	4313      	orrs	r3, r2
         );
}
 800514e:	4618      	mov	r0, r3
 8005150:	3724      	adds	r7, #36	@ 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3b01      	subs	r3, #1
 8005168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800516c:	d301      	bcc.n	8005172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800516e:	2301      	movs	r3, #1
 8005170:	e00f      	b.n	8005192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005172:	4a0a      	ldr	r2, [pc, #40]	@ (800519c <SysTick_Config+0x40>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3b01      	subs	r3, #1
 8005178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800517a:	210f      	movs	r1, #15
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	f7ff ff8e 	bl	80050a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005184:	4b05      	ldr	r3, [pc, #20]	@ (800519c <SysTick_Config+0x40>)
 8005186:	2200      	movs	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800518a:	4b04      	ldr	r3, [pc, #16]	@ (800519c <SysTick_Config+0x40>)
 800518c:	2207      	movs	r2, #7
 800518e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	e000e010 	.word	0xe000e010

080051a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff29 	bl	8005000 <__NVIC_SetPriorityGrouping>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b086      	sub	sp, #24
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	4603      	mov	r3, r0
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051c8:	f7ff ff3e 	bl	8005048 <__NVIC_GetPriorityGrouping>
 80051cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	6978      	ldr	r0, [r7, #20]
 80051d4:	f7ff ff8e 	bl	80050f4 <NVIC_EncodePriority>
 80051d8:	4602      	mov	r2, r0
 80051da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051de:	4611      	mov	r1, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff ff5d 	bl	80050a0 <__NVIC_SetPriority>
}
 80051e6:	bf00      	nop
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	4603      	mov	r3, r0
 80051f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff ff31 	bl	8005064 <__NVIC_EnableIRQ>
}
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff ffa2 	bl	800515c <SysTick_Config>
 8005218:	4603      	mov	r3, r0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005230:	f7ff feda 	bl	8004fe8 <HAL_GetTick>
 8005234:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d008      	beq.n	8005254 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2280      	movs	r2, #128	@ 0x80
 8005246:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e052      	b.n	80052fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0216 	bic.w	r2, r2, #22
 8005262:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005272:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d103      	bne.n	8005284 <HAL_DMA_Abort+0x62>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0208 	bic.w	r2, r2, #8
 8005292:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052a4:	e013      	b.n	80052ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052a6:	f7ff fe9f 	bl	8004fe8 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b05      	cmp	r3, #5
 80052b2:	d90c      	bls.n	80052ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2203      	movs	r2, #3
 80052be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e015      	b.n	80052fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e4      	bne.n	80052a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e0:	223f      	movs	r2, #63	@ 0x3f
 80052e2:	409a      	lsls	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d004      	beq.n	8005320 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2280      	movs	r2, #128	@ 0x80
 800531a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e00c      	b.n	800533a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2205      	movs	r2, #5
 8005324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005348:	b480      	push	{r7}
 800534a:	b089      	sub	sp, #36	@ 0x24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005356:	2300      	movs	r3, #0
 8005358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800535a:	2300      	movs	r3, #0
 800535c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	e159      	b.n	8005618 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005364:	2201      	movs	r2, #1
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4013      	ands	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	429a      	cmp	r2, r3
 800537e:	f040 8148 	bne.w	8005612 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b01      	cmp	r3, #1
 800538c:	d005      	beq.n	800539a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005396:	2b02      	cmp	r3, #2
 8005398:	d130      	bne.n	80053fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	2203      	movs	r2, #3
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053d0:	2201      	movs	r2, #1
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	f003 0201 	and.w	r2, r3, #1
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b03      	cmp	r3, #3
 8005406:	d017      	beq.n	8005438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	2203      	movs	r2, #3
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4013      	ands	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d123      	bne.n	800548c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	08da      	lsrs	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3208      	adds	r2, #8
 800544c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	220f      	movs	r2, #15
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	43db      	mvns	r3, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	08da      	lsrs	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3208      	adds	r2, #8
 8005486:	69b9      	ldr	r1, [r7, #24]
 8005488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	2203      	movs	r2, #3
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 0203 	and.w	r2, r3, #3
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80a2 	beq.w	8005612 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	4b57      	ldr	r3, [pc, #348]	@ (8005630 <HAL_GPIO_Init+0x2e8>)
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	4a56      	ldr	r2, [pc, #344]	@ (8005630 <HAL_GPIO_Init+0x2e8>)
 80054d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80054de:	4b54      	ldr	r3, [pc, #336]	@ (8005630 <HAL_GPIO_Init+0x2e8>)
 80054e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054ea:	4a52      	ldr	r2, [pc, #328]	@ (8005634 <HAL_GPIO_Init+0x2ec>)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	3302      	adds	r3, #2
 80054f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	220f      	movs	r2, #15
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4013      	ands	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a49      	ldr	r2, [pc, #292]	@ (8005638 <HAL_GPIO_Init+0x2f0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d019      	beq.n	800554a <HAL_GPIO_Init+0x202>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a48      	ldr	r2, [pc, #288]	@ (800563c <HAL_GPIO_Init+0x2f4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <HAL_GPIO_Init+0x1fe>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a47      	ldr	r2, [pc, #284]	@ (8005640 <HAL_GPIO_Init+0x2f8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00d      	beq.n	8005542 <HAL_GPIO_Init+0x1fa>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a46      	ldr	r2, [pc, #280]	@ (8005644 <HAL_GPIO_Init+0x2fc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <HAL_GPIO_Init+0x1f6>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a45      	ldr	r2, [pc, #276]	@ (8005648 <HAL_GPIO_Init+0x300>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d101      	bne.n	800553a <HAL_GPIO_Init+0x1f2>
 8005536:	2304      	movs	r3, #4
 8005538:	e008      	b.n	800554c <HAL_GPIO_Init+0x204>
 800553a:	2307      	movs	r3, #7
 800553c:	e006      	b.n	800554c <HAL_GPIO_Init+0x204>
 800553e:	2303      	movs	r3, #3
 8005540:	e004      	b.n	800554c <HAL_GPIO_Init+0x204>
 8005542:	2302      	movs	r3, #2
 8005544:	e002      	b.n	800554c <HAL_GPIO_Init+0x204>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <HAL_GPIO_Init+0x204>
 800554a:	2300      	movs	r3, #0
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	f002 0203 	and.w	r2, r2, #3
 8005552:	0092      	lsls	r2, r2, #2
 8005554:	4093      	lsls	r3, r2
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4313      	orrs	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800555c:	4935      	ldr	r1, [pc, #212]	@ (8005634 <HAL_GPIO_Init+0x2ec>)
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	089b      	lsrs	r3, r3, #2
 8005562:	3302      	adds	r3, #2
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800556a:	4b38      	ldr	r3, [pc, #224]	@ (800564c <HAL_GPIO_Init+0x304>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	43db      	mvns	r3, r3
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	4013      	ands	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800558e:	4a2f      	ldr	r2, [pc, #188]	@ (800564c <HAL_GPIO_Init+0x304>)
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005594:	4b2d      	ldr	r3, [pc, #180]	@ (800564c <HAL_GPIO_Init+0x304>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	43db      	mvns	r3, r3
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4013      	ands	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055b8:	4a24      	ldr	r2, [pc, #144]	@ (800564c <HAL_GPIO_Init+0x304>)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055be:	4b23      	ldr	r3, [pc, #140]	@ (800564c <HAL_GPIO_Init+0x304>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	43db      	mvns	r3, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4013      	ands	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055e2:	4a1a      	ldr	r2, [pc, #104]	@ (800564c <HAL_GPIO_Init+0x304>)
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055e8:	4b18      	ldr	r3, [pc, #96]	@ (800564c <HAL_GPIO_Init+0x304>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	43db      	mvns	r3, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800560c:	4a0f      	ldr	r2, [pc, #60]	@ (800564c <HAL_GPIO_Init+0x304>)
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3301      	adds	r3, #1
 8005616:	61fb      	str	r3, [r7, #28]
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	2b0f      	cmp	r3, #15
 800561c:	f67f aea2 	bls.w	8005364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	3724      	adds	r7, #36	@ 0x24
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800
 8005634:	40013800 	.word	0x40013800
 8005638:	40020000 	.word	0x40020000
 800563c:	40020400 	.word	0x40020400
 8005640:	40020800 	.word	0x40020800
 8005644:	40020c00 	.word	0x40020c00
 8005648:	40021000 	.word	0x40021000
 800564c:	40013c00 	.word	0x40013c00

08005650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	807b      	strh	r3, [r7, #2]
 800565c:	4613      	mov	r3, r2
 800565e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005660:	787b      	ldrb	r3, [r7, #1]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005666:	887a      	ldrh	r2, [r7, #2]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800566c:	e003      	b.n	8005676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800566e:	887b      	ldrh	r3, [r7, #2]
 8005670:	041a      	lsls	r2, r3, #16
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	619a      	str	r2, [r3, #24]
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e267      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d075      	beq.n	800578e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056a2:	4b88      	ldr	r3, [pc, #544]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d00c      	beq.n	80056c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ae:	4b85      	ldr	r3, [pc, #532]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d112      	bne.n	80056e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ba:	4b82      	ldr	r3, [pc, #520]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056c6:	d10b      	bne.n	80056e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c8:	4b7e      	ldr	r3, [pc, #504]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05b      	beq.n	800578c <HAL_RCC_OscConfig+0x108>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d157      	bne.n	800578c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e242      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e8:	d106      	bne.n	80056f8 <HAL_RCC_OscConfig+0x74>
 80056ea:	4b76      	ldr	r3, [pc, #472]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a75      	ldr	r2, [pc, #468]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e01d      	b.n	8005734 <HAL_RCC_OscConfig+0xb0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005700:	d10c      	bne.n	800571c <HAL_RCC_OscConfig+0x98>
 8005702:	4b70      	ldr	r3, [pc, #448]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a6f      	ldr	r2, [pc, #444]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	4b6d      	ldr	r3, [pc, #436]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a6c      	ldr	r2, [pc, #432]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e00b      	b.n	8005734 <HAL_RCC_OscConfig+0xb0>
 800571c:	4b69      	ldr	r3, [pc, #420]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a68      	ldr	r2, [pc, #416]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	4b66      	ldr	r3, [pc, #408]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a65      	ldr	r2, [pc, #404]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 800572e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d013      	beq.n	8005764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573c:	f7ff fc54 	bl	8004fe8 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005744:	f7ff fc50 	bl	8004fe8 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	@ 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e207      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005756:	4b5b      	ldr	r3, [pc, #364]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0xc0>
 8005762:	e014      	b.n	800578e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005764:	f7ff fc40 	bl	8004fe8 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800576c:	f7ff fc3c 	bl	8004fe8 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b64      	cmp	r3, #100	@ 0x64
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e1f3      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800577e:	4b51      	ldr	r3, [pc, #324]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0xe8>
 800578a:	e000      	b.n	800578e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800578c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d063      	beq.n	8005862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800579a:	4b4a      	ldr	r3, [pc, #296]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057a6:	4b47      	ldr	r3, [pc, #284]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d11c      	bne.n	80057ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057b2:	4b44      	ldr	r3, [pc, #272]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d116      	bne.n	80057ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057be:	4b41      	ldr	r3, [pc, #260]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_RCC_OscConfig+0x152>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d001      	beq.n	80057d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e1c7      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d6:	4b3b      	ldr	r3, [pc, #236]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4937      	ldr	r1, [pc, #220]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ea:	e03a      	b.n	8005862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d020      	beq.n	8005836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057f4:	4b34      	ldr	r3, [pc, #208]	@ (80058c8 <HAL_RCC_OscConfig+0x244>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fa:	f7ff fbf5 	bl	8004fe8 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005802:	f7ff fbf1 	bl	8004fe8 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e1a8      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005814:	4b2b      	ldr	r3, [pc, #172]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0f0      	beq.n	8005802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005820:	4b28      	ldr	r3, [pc, #160]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	4925      	ldr	r1, [pc, #148]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]
 8005834:	e015      	b.n	8005862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005836:	4b24      	ldr	r3, [pc, #144]	@ (80058c8 <HAL_RCC_OscConfig+0x244>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7ff fbd4 	bl	8004fe8 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005844:	f7ff fbd0 	bl	8004fe8 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e187      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005856:	4b1b      	ldr	r3, [pc, #108]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d036      	beq.n	80058dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d016      	beq.n	80058a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005876:	4b15      	ldr	r3, [pc, #84]	@ (80058cc <HAL_RCC_OscConfig+0x248>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587c:	f7ff fbb4 	bl	8004fe8 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005884:	f7ff fbb0 	bl	8004fe8 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e167      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005896:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0x200>
 80058a2:	e01b      	b.n	80058dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058a4:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <HAL_RCC_OscConfig+0x248>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058aa:	f7ff fb9d 	bl	8004fe8 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b0:	e00e      	b.n	80058d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b2:	f7ff fb99 	bl	8004fe8 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d907      	bls.n	80058d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e150      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
 80058c4:	40023800 	.word	0x40023800
 80058c8:	42470000 	.word	0x42470000
 80058cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d0:	4b88      	ldr	r3, [pc, #544]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 80058d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1ea      	bne.n	80058b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8097 	beq.w	8005a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ee:	4b81      	ldr	r3, [pc, #516]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10f      	bne.n	800591a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058fa:	2300      	movs	r3, #0
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	4b7d      	ldr	r3, [pc, #500]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	4a7c      	ldr	r2, [pc, #496]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005908:	6413      	str	r3, [r2, #64]	@ 0x40
 800590a:	4b7a      	ldr	r3, [pc, #488]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005916:	2301      	movs	r3, #1
 8005918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591a:	4b77      	ldr	r3, [pc, #476]	@ (8005af8 <HAL_RCC_OscConfig+0x474>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d118      	bne.n	8005958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005926:	4b74      	ldr	r3, [pc, #464]	@ (8005af8 <HAL_RCC_OscConfig+0x474>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a73      	ldr	r2, [pc, #460]	@ (8005af8 <HAL_RCC_OscConfig+0x474>)
 800592c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005932:	f7ff fb59 	bl	8004fe8 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593a:	f7ff fb55 	bl	8004fe8 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e10c      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594c:	4b6a      	ldr	r3, [pc, #424]	@ (8005af8 <HAL_RCC_OscConfig+0x474>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d106      	bne.n	800596e <HAL_RCC_OscConfig+0x2ea>
 8005960:	4b64      	ldr	r3, [pc, #400]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005964:	4a63      	ldr	r2, [pc, #396]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	6713      	str	r3, [r2, #112]	@ 0x70
 800596c:	e01c      	b.n	80059a8 <HAL_RCC_OscConfig+0x324>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b05      	cmp	r3, #5
 8005974:	d10c      	bne.n	8005990 <HAL_RCC_OscConfig+0x30c>
 8005976:	4b5f      	ldr	r3, [pc, #380]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597a:	4a5e      	ldr	r2, [pc, #376]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 800597c:	f043 0304 	orr.w	r3, r3, #4
 8005980:	6713      	str	r3, [r2, #112]	@ 0x70
 8005982:	4b5c      	ldr	r3, [pc, #368]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005986:	4a5b      	ldr	r2, [pc, #364]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	6713      	str	r3, [r2, #112]	@ 0x70
 800598e:	e00b      	b.n	80059a8 <HAL_RCC_OscConfig+0x324>
 8005990:	4b58      	ldr	r3, [pc, #352]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005994:	4a57      	ldr	r2, [pc, #348]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	6713      	str	r3, [r2, #112]	@ 0x70
 800599c:	4b55      	ldr	r3, [pc, #340]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a0:	4a54      	ldr	r2, [pc, #336]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 80059a2:	f023 0304 	bic.w	r3, r3, #4
 80059a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d015      	beq.n	80059dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b0:	f7ff fb1a 	bl	8004fe8 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b6:	e00a      	b.n	80059ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b8:	f7ff fb16 	bl	8004fe8 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0cb      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ce:	4b49      	ldr	r3, [pc, #292]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0ee      	beq.n	80059b8 <HAL_RCC_OscConfig+0x334>
 80059da:	e014      	b.n	8005a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059dc:	f7ff fb04 	bl	8004fe8 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e4:	f7ff fb00 	bl	8004fe8 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e0b5      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059fa:	4b3e      	ldr	r3, [pc, #248]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1ee      	bne.n	80059e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d105      	bne.n	8005a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0c:	4b39      	ldr	r3, [pc, #228]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	4a38      	ldr	r2, [pc, #224]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80a1 	beq.w	8005b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a22:	4b34      	ldr	r3, [pc, #208]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d05c      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d141      	bne.n	8005aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a36:	4b31      	ldr	r3, [pc, #196]	@ (8005afc <HAL_RCC_OscConfig+0x478>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3c:	f7ff fad4 	bl	8004fe8 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a44:	f7ff fad0 	bl	8004fe8 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e087      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a56:	4b27      	ldr	r3, [pc, #156]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f0      	bne.n	8005a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69da      	ldr	r2, [r3, #28]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	019b      	lsls	r3, r3, #6
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a84:	061b      	lsls	r3, r3, #24
 8005a86:	491b      	ldr	r1, [pc, #108]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005afc <HAL_RCC_OscConfig+0x478>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a92:	f7ff faa9 	bl	8004fe8 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a9a:	f7ff faa5 	bl	8004fe8 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e05c      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aac:	4b11      	ldr	r3, [pc, #68]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f0      	beq.n	8005a9a <HAL_RCC_OscConfig+0x416>
 8005ab8:	e054      	b.n	8005b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aba:	4b10      	ldr	r3, [pc, #64]	@ (8005afc <HAL_RCC_OscConfig+0x478>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac0:	f7ff fa92 	bl	8004fe8 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac8:	f7ff fa8e 	bl	8004fe8 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e045      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ada:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x444>
 8005ae6:	e03d      	b.n	8005b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d107      	bne.n	8005b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e038      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
 8005af4:	40023800 	.word	0x40023800
 8005af8:	40007000 	.word	0x40007000
 8005afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b00:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <HAL_RCC_OscConfig+0x4ec>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d028      	beq.n	8005b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d121      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d11a      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b30:	4013      	ands	r3, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d111      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40023800 	.word	0x40023800

08005b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0cc      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b88:	4b68      	ldr	r3, [pc, #416]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d90c      	bls.n	8005bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b96:	4b65      	ldr	r3, [pc, #404]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9e:	4b63      	ldr	r3, [pc, #396]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0b8      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d020      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bc8:	4b59      	ldr	r3, [pc, #356]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4a58      	ldr	r2, [pc, #352]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005be0:	4b53      	ldr	r3, [pc, #332]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4a52      	ldr	r2, [pc, #328]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005be6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bec:	4b50      	ldr	r3, [pc, #320]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	494d      	ldr	r1, [pc, #308]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d044      	beq.n	8005c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d107      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c12:	4b47      	ldr	r3, [pc, #284]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d119      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e07f      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d003      	beq.n	8005c32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d107      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c32:	4b3f      	ldr	r3, [pc, #252]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e06f      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c42:	4b3b      	ldr	r3, [pc, #236]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e067      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c52:	4b37      	ldr	r3, [pc, #220]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f023 0203 	bic.w	r2, r3, #3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	4934      	ldr	r1, [pc, #208]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c64:	f7ff f9c0 	bl	8004fe8 <HAL_GetTick>
 8005c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	e00a      	b.n	8005c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c6c:	f7ff f9bc 	bl	8004fe8 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e04f      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c82:	4b2b      	ldr	r3, [pc, #172]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 020c 	and.w	r2, r3, #12
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d1eb      	bne.n	8005c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c94:	4b25      	ldr	r3, [pc, #148]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d20c      	bcs.n	8005cbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca2:	4b22      	ldr	r3, [pc, #136]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005caa:	4b20      	ldr	r3, [pc, #128]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d001      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e032      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cc8:	4b19      	ldr	r3, [pc, #100]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4916      	ldr	r1, [pc, #88]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ce6:	4b12      	ldr	r3, [pc, #72]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	490e      	ldr	r1, [pc, #56]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cfa:	f000 f821 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	091b      	lsrs	r3, r3, #4
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	490a      	ldr	r1, [pc, #40]	@ (8005d34 <HAL_RCC_ClockConfig+0x1c0>)
 8005d0c:	5ccb      	ldrb	r3, [r1, r3]
 8005d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d12:	4a09      	ldr	r2, [pc, #36]	@ (8005d38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d16:	4b09      	ldr	r3, [pc, #36]	@ (8005d3c <HAL_RCC_ClockConfig+0x1c8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff f934 	bl	8004f88 <HAL_InitTick>

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40023c00 	.word	0x40023c00
 8005d30:	40023800 	.word	0x40023800
 8005d34:	0801114c 	.word	0x0801114c
 8005d38:	2000000c 	.word	0x2000000c
 8005d3c:	20000010 	.word	0x20000010

08005d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d44:	b094      	sub	sp, #80	@ 0x50
 8005d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d58:	4b79      	ldr	r3, [pc, #484]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 030c 	and.w	r3, r3, #12
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d00d      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0x40>
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	f200 80e1 	bhi.w	8005f2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_RCC_GetSysClockFreq+0x34>
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d003      	beq.n	8005d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d72:	e0db      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d74:	4b73      	ldr	r3, [pc, #460]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d78:	e0db      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d7a:	4b73      	ldr	r3, [pc, #460]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d7e:	e0d8      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d80:	4b6f      	ldr	r3, [pc, #444]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d063      	beq.n	8005e5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d96:	4b6a      	ldr	r3, [pc, #424]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	099b      	lsrs	r3, r3, #6
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005da0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005daa:	2300      	movs	r3, #0
 8005dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005db2:	4622      	mov	r2, r4
 8005db4:	462b      	mov	r3, r5
 8005db6:	f04f 0000 	mov.w	r0, #0
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	0159      	lsls	r1, r3, #5
 8005dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dc4:	0150      	lsls	r0, r2, #5
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4621      	mov	r1, r4
 8005dcc:	1a51      	subs	r1, r2, r1
 8005dce:	6139      	str	r1, [r7, #16]
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	f04f 0300 	mov.w	r3, #0
 8005de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005de4:	4659      	mov	r1, fp
 8005de6:	018b      	lsls	r3, r1, #6
 8005de8:	4651      	mov	r1, sl
 8005dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dee:	4651      	mov	r1, sl
 8005df0:	018a      	lsls	r2, r1, #6
 8005df2:	4651      	mov	r1, sl
 8005df4:	ebb2 0801 	subs.w	r8, r2, r1
 8005df8:	4659      	mov	r1, fp
 8005dfa:	eb63 0901 	sbc.w	r9, r3, r1
 8005dfe:	f04f 0200 	mov.w	r2, #0
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e12:	4690      	mov	r8, r2
 8005e14:	4699      	mov	r9, r3
 8005e16:	4623      	mov	r3, r4
 8005e18:	eb18 0303 	adds.w	r3, r8, r3
 8005e1c:	60bb      	str	r3, [r7, #8]
 8005e1e:	462b      	mov	r3, r5
 8005e20:	eb49 0303 	adc.w	r3, r9, r3
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e32:	4629      	mov	r1, r5
 8005e34:	024b      	lsls	r3, r1, #9
 8005e36:	4621      	mov	r1, r4
 8005e38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	024a      	lsls	r2, r1, #9
 8005e40:	4610      	mov	r0, r2
 8005e42:	4619      	mov	r1, r3
 8005e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e46:	2200      	movs	r2, #0
 8005e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e50:	f7fa ff32 	bl	8000cb8 <__aeabi_uldivmod>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4613      	mov	r3, r2
 8005e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e5c:	e058      	b.n	8005f10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e5e:	4b38      	ldr	r3, [pc, #224]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	099b      	lsrs	r3, r3, #6
 8005e64:	2200      	movs	r2, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	4611      	mov	r1, r2
 8005e6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e6e:	623b      	str	r3, [r7, #32]
 8005e70:	2300      	movs	r3, #0
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e78:	4642      	mov	r2, r8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	f04f 0000 	mov.w	r0, #0
 8005e80:	f04f 0100 	mov.w	r1, #0
 8005e84:	0159      	lsls	r1, r3, #5
 8005e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e8a:	0150      	lsls	r0, r2, #5
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4641      	mov	r1, r8
 8005e92:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e96:	4649      	mov	r1, r9
 8005e98:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ea8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005eac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005eb0:	ebb2 040a 	subs.w	r4, r2, sl
 8005eb4:	eb63 050b 	sbc.w	r5, r3, fp
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	00eb      	lsls	r3, r5, #3
 8005ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ec6:	00e2      	lsls	r2, r4, #3
 8005ec8:	4614      	mov	r4, r2
 8005eca:	461d      	mov	r5, r3
 8005ecc:	4643      	mov	r3, r8
 8005ece:	18e3      	adds	r3, r4, r3
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	eb45 0303 	adc.w	r3, r5, r3
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	028b      	lsls	r3, r1, #10
 8005eea:	4621      	mov	r1, r4
 8005eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	028a      	lsls	r2, r1, #10
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005efa:	2200      	movs	r2, #0
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	61fa      	str	r2, [r7, #28]
 8005f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f04:	f7fa fed8 	bl	8000cb8 <__aeabi_uldivmod>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f10:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	0c1b      	lsrs	r3, r3, #16
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005f20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f2a:	e002      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f2c:	4b05      	ldr	r3, [pc, #20]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3750      	adds	r7, #80	@ 0x50
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f3e:	bf00      	nop
 8005f40:	40023800 	.word	0x40023800
 8005f44:	00f42400 	.word	0x00f42400
 8005f48:	007a1200 	.word	0x007a1200

08005f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f50:	4b03      	ldr	r3, [pc, #12]	@ (8005f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f52:	681b      	ldr	r3, [r3, #0]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	2000000c 	.word	0x2000000c

08005f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f68:	f7ff fff0 	bl	8005f4c <HAL_RCC_GetHCLKFreq>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	0a9b      	lsrs	r3, r3, #10
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	4903      	ldr	r1, [pc, #12]	@ (8005f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f7a:	5ccb      	ldrb	r3, [r1, r3]
 8005f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40023800 	.word	0x40023800
 8005f88:	0801115c 	.word	0x0801115c

08005f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f90:	f7ff ffdc 	bl	8005f4c <HAL_RCC_GetHCLKFreq>
 8005f94:	4602      	mov	r2, r0
 8005f96:	4b05      	ldr	r3, [pc, #20]	@ (8005fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	0b5b      	lsrs	r3, r3, #13
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	4903      	ldr	r1, [pc, #12]	@ (8005fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fa2:	5ccb      	ldrb	r3, [r1, r3]
 8005fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	0801115c 	.word	0x0801115c

08005fb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e07b      	b.n	80060be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d108      	bne.n	8005fe0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fd6:	d009      	beq.n	8005fec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	61da      	str	r2, [r3, #28]
 8005fde:	e005      	b.n	8005fec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fe fb16 	bl	8004638 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006022:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006070:	ea42 0103 	orr.w	r1, r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006078:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	0c1b      	lsrs	r3, r3, #16
 800608a:	f003 0104 	and.w	r1, r3, #4
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	f003 0210 	and.w	r2, r3, #16
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b088      	sub	sp, #32
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	603b      	str	r3, [r7, #0]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060d6:	f7fe ff87 	bl	8004fe8 <HAL_GetTick>
 80060da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d001      	beq.n	80060f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80060ec:	2302      	movs	r3, #2
 80060ee:	e12a      	b.n	8006346 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_SPI_Transmit+0x36>
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e122      	b.n	8006346 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_SPI_Transmit+0x48>
 800610a:	2302      	movs	r3, #2
 800610c:	e11b      	b.n	8006346 <HAL_SPI_Transmit+0x280>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2203      	movs	r2, #3
 800611a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	88fa      	ldrh	r2, [r7, #6]
 800612e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	88fa      	ldrh	r2, [r7, #6]
 8006134:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800615c:	d10f      	bne.n	800617e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800616c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800617c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006188:	2b40      	cmp	r3, #64	@ 0x40
 800618a:	d007      	beq.n	800619c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800619a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061a4:	d152      	bne.n	800624c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_SPI_Transmit+0xee>
 80061ae:	8b7b      	ldrh	r3, [r7, #26]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d145      	bne.n	8006240 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b8:	881a      	ldrh	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c4:	1c9a      	adds	r2, r3, #2
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061d8:	e032      	b.n	8006240 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d112      	bne.n	800620e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ec:	881a      	ldrh	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f8:	1c9a      	adds	r2, r3, #2
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800620c:	e018      	b.n	8006240 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800620e:	f7fe feeb 	bl	8004fe8 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d803      	bhi.n	8006226 <HAL_SPI_Transmit+0x160>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d102      	bne.n	800622c <HAL_SPI_Transmit+0x166>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d109      	bne.n	8006240 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e082      	b.n	8006346 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1c7      	bne.n	80061da <HAL_SPI_Transmit+0x114>
 800624a:	e053      	b.n	80062f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_SPI_Transmit+0x194>
 8006254:	8b7b      	ldrh	r3, [r7, #26]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d147      	bne.n	80062ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	7812      	ldrb	r2, [r2, #0]
 8006266:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006280:	e033      	b.n	80062ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b02      	cmp	r3, #2
 800628e:	d113      	bne.n	80062b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	7812      	ldrb	r2, [r2, #0]
 800629c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062b6:	e018      	b.n	80062ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b8:	f7fe fe96 	bl	8004fe8 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d803      	bhi.n	80062d0 <HAL_SPI_Transmit+0x20a>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ce:	d102      	bne.n	80062d6 <HAL_SPI_Transmit+0x210>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e02d      	b.n	8006346 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1c6      	bne.n	8006282 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 fa59 	bl	80067b0 <SPI_EndRxTxTransaction>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10a      	bne.n	8006328 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006312:	2300      	movs	r3, #0
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006344:	2300      	movs	r3, #0
  }
}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b08a      	sub	sp, #40	@ 0x28
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
 800635a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800635c:	2301      	movs	r3, #1
 800635e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006360:	f7fe fe42 	bl	8004fe8 <HAL_GetTick>
 8006364:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800636c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006378:	7ffb      	ldrb	r3, [r7, #31]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d00c      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x4a>
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006384:	d106      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d102      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x46>
 800638e:	7ffb      	ldrb	r3, [r7, #31]
 8006390:	2b04      	cmp	r3, #4
 8006392:	d001      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
 8006396:	e17f      	b.n	8006698 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_SPI_TransmitReceive+0x5c>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HAL_SPI_TransmitReceive+0x5c>
 80063a4:	887b      	ldrh	r3, [r7, #2]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e174      	b.n	8006698 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x6e>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e16d      	b.n	8006698 <HAL_SPI_TransmitReceive+0x34a>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d003      	beq.n	80063d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2205      	movs	r2, #5
 80063d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	887a      	ldrh	r2, [r7, #2]
 80063e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	887a      	ldrh	r2, [r7, #2]
 80063ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	887a      	ldrh	r2, [r7, #2]
 80063fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	887a      	ldrh	r2, [r7, #2]
 8006400:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006418:	2b40      	cmp	r3, #64	@ 0x40
 800641a:	d007      	beq.n	800642c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800642a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006434:	d17e      	bne.n	8006534 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_SPI_TransmitReceive+0xf6>
 800643e:	8afb      	ldrh	r3, [r7, #22]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d16c      	bne.n	800651e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	1c9a      	adds	r2, r3, #2
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006468:	e059      	b.n	800651e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b02      	cmp	r3, #2
 8006476:	d11b      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x162>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d016      	beq.n	80064b0 <HAL_SPI_TransmitReceive+0x162>
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	2b01      	cmp	r3, #1
 8006486:	d113      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648c:	881a      	ldrh	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006498:	1c9a      	adds	r2, r3, #2
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d119      	bne.n	80064f2 <HAL_SPI_TransmitReceive+0x1a4>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d014      	beq.n	80064f2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d2:	b292      	uxth	r2, r2
 80064d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	1c9a      	adds	r2, r3, #2
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064ee:	2301      	movs	r3, #1
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064f2:	f7fe fd79 	bl	8004fe8 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064fe:	429a      	cmp	r2, r3
 8006500:	d80d      	bhi.n	800651e <HAL_SPI_TransmitReceive+0x1d0>
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d009      	beq.n	800651e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e0bc      	b.n	8006698 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1a0      	bne.n	800646a <HAL_SPI_TransmitReceive+0x11c>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d19b      	bne.n	800646a <HAL_SPI_TransmitReceive+0x11c>
 8006532:	e082      	b.n	800663a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_SPI_TransmitReceive+0x1f4>
 800653c:	8afb      	ldrh	r3, [r7, #22]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d171      	bne.n	8006626 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	330c      	adds	r3, #12
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006568:	e05d      	b.n	8006626 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b02      	cmp	r3, #2
 8006576:	d11c      	bne.n	80065b2 <HAL_SPI_TransmitReceive+0x264>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d017      	beq.n	80065b2 <HAL_SPI_TransmitReceive+0x264>
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	2b01      	cmp	r3, #1
 8006586:	d114      	bne.n	80065b2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	330c      	adds	r3, #12
 8006592:	7812      	ldrb	r2, [r2, #0]
 8006594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d119      	bne.n	80065f4 <HAL_SPI_TransmitReceive+0x2a6>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d014      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065f0:	2301      	movs	r3, #1
 80065f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065f4:	f7fe fcf8 	bl	8004fe8 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006600:	429a      	cmp	r2, r3
 8006602:	d803      	bhi.n	800660c <HAL_SPI_TransmitReceive+0x2be>
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660a:	d102      	bne.n	8006612 <HAL_SPI_TransmitReceive+0x2c4>
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	2b00      	cmp	r3, #0
 8006610:	d109      	bne.n	8006626 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e038      	b.n	8006698 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d19c      	bne.n	800656a <HAL_SPI_TransmitReceive+0x21c>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d197      	bne.n	800656a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800663a:	6a3a      	ldr	r2, [r7, #32]
 800663c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 f8b6 	bl	80067b0 <SPI_EndRxTxTransaction>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e01d      	b.n	8006698 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006664:	2300      	movs	r3, #0
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006696:	2300      	movs	r3, #0
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3728      	adds	r7, #40	@ 0x28
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066b0:	f7fe fc9a 	bl	8004fe8 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	4413      	add	r3, r2
 80066be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066c0:	f7fe fc92 	bl	8004fe8 <HAL_GetTick>
 80066c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066c6:	4b39      	ldr	r3, [pc, #228]	@ (80067ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	015b      	lsls	r3, r3, #5
 80066cc:	0d1b      	lsrs	r3, r3, #20
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	fb02 f303 	mul.w	r3, r2, r3
 80066d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066d6:	e054      	b.n	8006782 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066de:	d050      	beq.n	8006782 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066e0:	f7fe fc82 	bl	8004fe8 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d902      	bls.n	80066f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d13d      	bne.n	8006772 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006704:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800670e:	d111      	bne.n	8006734 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006718:	d004      	beq.n	8006724 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006722:	d107      	bne.n	8006734 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800673c:	d10f      	bne.n	800675e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800675c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e017      	b.n	80067a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	3b01      	subs	r3, #1
 8006780:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4013      	ands	r3, r2
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	bf0c      	ite	eq
 8006792:	2301      	moveq	r3, #1
 8006794:	2300      	movne	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	429a      	cmp	r2, r3
 800679e:	d19b      	bne.n	80066d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3720      	adds	r7, #32
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	2000000c 	.word	0x2000000c

080067b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2201      	movs	r2, #1
 80067c4:	2102      	movs	r1, #2
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff ff6a 	bl	80066a0 <SPI_WaitFlagStateUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e032      	b.n	8006848 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006850 <SPI_EndRxTxTransaction+0xa0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006854 <SPI_EndRxTxTransaction+0xa4>)
 80067e8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ec:	0d5b      	lsrs	r3, r3, #21
 80067ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
 80067f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006800:	d112      	bne.n	8006828 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2200      	movs	r2, #0
 800680a:	2180      	movs	r1, #128	@ 0x80
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff ff47 	bl	80066a0 <SPI_WaitFlagStateUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d016      	beq.n	8006846 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681c:	f043 0220 	orr.w	r2, r3, #32
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e00f      	b.n	8006848 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	3b01      	subs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683e:	2b80      	cmp	r3, #128	@ 0x80
 8006840:	d0f2      	beq.n	8006828 <SPI_EndRxTxTransaction+0x78>
 8006842:	e000      	b.n	8006846 <SPI_EndRxTxTransaction+0x96>
        break;
 8006844:	bf00      	nop
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	2000000c 	.word	0x2000000c
 8006854:	165e9f81 	.word	0x165e9f81

08006858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e042      	b.n	80068f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fd ff42 	bl	8004708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2224      	movs	r2, #36	@ 0x24
 8006888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800689a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fc85 	bl	80071ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695a      	ldr	r2, [r3, #20]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b0ba      	sub	sp, #232	@ 0xe8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800691e:	2300      	movs	r3, #0
 8006920:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800692a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800692e:	f003 030f 	and.w	r3, r3, #15
 8006932:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10f      	bne.n	800695e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <HAL_UART_IRQHandler+0x66>
 800694a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fb69 	bl	800702e <UART_Receive_IT>
      return;
 800695c:	e25b      	b.n	8006e16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800695e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 80de 	beq.w	8006b24 <HAL_UART_IRQHandler+0x22c>
 8006968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d106      	bne.n	8006982 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006978:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80d1 	beq.w	8006b24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00b      	beq.n	80069a6 <HAL_UART_IRQHandler+0xae>
 800698e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800699e:	f043 0201 	orr.w	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <HAL_UART_IRQHandler+0xd2>
 80069b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c2:	f043 0202 	orr.w	r2, r3, #2
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <HAL_UART_IRQHandler+0xf6>
 80069d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e6:	f043 0204 	orr.w	r2, r3, #4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d011      	beq.n	8006a1e <HAL_UART_IRQHandler+0x126>
 80069fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d105      	bne.n	8006a12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a16:	f043 0208 	orr.w	r2, r3, #8
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 81f2 	beq.w	8006e0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <HAL_UART_IRQHandler+0x14e>
 8006a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 faf4 	bl	800702e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a50:	2b40      	cmp	r3, #64	@ 0x40
 8006a52:	bf0c      	ite	eq
 8006a54:	2301      	moveq	r3, #1
 8006a56:	2300      	movne	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a62:	f003 0308 	and.w	r3, r3, #8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d103      	bne.n	8006a72 <HAL_UART_IRQHandler+0x17a>
 8006a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d04f      	beq.n	8006b12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f9fc 	bl	8006e70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a82:	2b40      	cmp	r3, #64	@ 0x40
 8006a84:	d141      	bne.n	8006b0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3314      	adds	r3, #20
 8006a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3314      	adds	r3, #20
 8006aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ab2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006abe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1d9      	bne.n	8006a86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d013      	beq.n	8006b02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ade:	4a7e      	ldr	r2, [pc, #504]	@ (8006cd8 <HAL_UART_IRQHandler+0x3e0>)
 8006ae0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fe fc0b 	bl	8005302 <HAL_DMA_Abort_IT>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d016      	beq.n	8006b20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006afc:	4610      	mov	r0, r2
 8006afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b00:	e00e      	b.n	8006b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f99e 	bl	8006e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b08:	e00a      	b.n	8006b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f99a 	bl	8006e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b10:	e006      	b.n	8006b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f996 	bl	8006e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b1e:	e175      	b.n	8006e0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b20:	bf00      	nop
    return;
 8006b22:	e173      	b.n	8006e0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	f040 814f 	bne.w	8006dcc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b32:	f003 0310 	and.w	r3, r3, #16
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 8148 	beq.w	8006dcc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8141 	beq.w	8006dcc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60bb      	str	r3, [r7, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	60bb      	str	r3, [r7, #8]
 8006b5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6a:	2b40      	cmp	r3, #64	@ 0x40
 8006b6c:	f040 80b6 	bne.w	8006cdc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 8145 	beq.w	8006e10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	f080 813e 	bcs.w	8006e10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ba6:	f000 8088 	beq.w	8006cba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	330c      	adds	r3, #12
 8006bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	330c      	adds	r3, #12
 8006bd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006bd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006bda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1d9      	bne.n	8006baa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3314      	adds	r3, #20
 8006bfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3314      	adds	r3, #20
 8006c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e1      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3314      	adds	r3, #20
 8006c38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3314      	adds	r3, #20
 8006c52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e3      	bne.n	8006c32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c8a:	f023 0310 	bic.w	r3, r3, #16
 8006c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	330c      	adds	r3, #12
 8006c98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ca2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e3      	bne.n	8006c78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe fab4 	bl	8005222 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f8c1 	bl	8006e58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cd6:	e09b      	b.n	8006e10 <HAL_UART_IRQHandler+0x518>
 8006cd8:	08006f37 	.word	0x08006f37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 808e 	beq.w	8006e14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8089 	beq.w	8006e14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006d26:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e3      	bne.n	8006d02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3314      	adds	r3, #20
 8006d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	623b      	str	r3, [r7, #32]
   return(result);
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	f023 0301 	bic.w	r3, r3, #1
 8006d50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3314      	adds	r3, #20
 8006d5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e3      	bne.n	8006d3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	330c      	adds	r3, #12
 8006d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0310 	bic.w	r3, r3, #16
 8006d96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	330c      	adds	r3, #12
 8006da0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006da4:	61fa      	str	r2, [r7, #28]
 8006da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	69b9      	ldr	r1, [r7, #24]
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	617b      	str	r3, [r7, #20]
   return(result);
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e3      	bne.n	8006d80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f847 	bl	8006e58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dca:	e023      	b.n	8006e14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d009      	beq.n	8006dec <HAL_UART_IRQHandler+0x4f4>
 8006dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f8ba 	bl	8006f5e <UART_Transmit_IT>
    return;
 8006dea:	e014      	b.n	8006e16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00e      	beq.n	8006e16 <HAL_UART_IRQHandler+0x51e>
 8006df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f8fa 	bl	8006ffe <UART_EndTransmit_IT>
    return;
 8006e0a:	e004      	b.n	8006e16 <HAL_UART_IRQHandler+0x51e>
    return;
 8006e0c:	bf00      	nop
 8006e0e:	e002      	b.n	8006e16 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e10:	bf00      	nop
 8006e12:	e000      	b.n	8006e16 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e14:	bf00      	nop
  }
}
 8006e16:	37e8      	adds	r7, #232	@ 0xe8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b095      	sub	sp, #84	@ 0x54
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e98:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e5      	bne.n	8006e78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	f023 0301 	bic.w	r3, r3, #1
 8006ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e5      	bne.n	8006eac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d119      	bne.n	8006f1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f023 0310 	bic.w	r3, r3, #16
 8006efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	330c      	adds	r3, #12
 8006f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f08:	61ba      	str	r2, [r7, #24]
 8006f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6979      	ldr	r1, [r7, #20]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	613b      	str	r3, [r7, #16]
   return(result);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e5      	bne.n	8006ee8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f2a:	bf00      	nop
 8006f2c:	3754      	adds	r7, #84	@ 0x54
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff ff77 	bl	8006e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b085      	sub	sp, #20
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b21      	cmp	r3, #33	@ 0x21
 8006f70:	d13e      	bne.n	8006ff0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f7a:	d114      	bne.n	8006fa6 <UART_Transmit_IT+0x48>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d110      	bne.n	8006fa6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	1c9a      	adds	r2, r3, #2
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	621a      	str	r2, [r3, #32]
 8006fa4:	e008      	b.n	8006fb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	1c59      	adds	r1, r3, #1
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6211      	str	r1, [r2, #32]
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10f      	bne.n	8006fec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e000      	b.n	8006ff2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ff0:	2302      	movs	r3, #2
  }
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007014:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff fefc 	bl	8006e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b08c      	sub	sp, #48	@ 0x30
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b22      	cmp	r3, #34	@ 0x22
 8007040:	f040 80ae 	bne.w	80071a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704c:	d117      	bne.n	800707e <UART_Receive_IT+0x50>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d113      	bne.n	800707e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706c:	b29a      	uxth	r2, r3
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	1c9a      	adds	r2, r3, #2
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	629a      	str	r2, [r3, #40]	@ 0x28
 800707c:	e026      	b.n	80070cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007082:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007084:	2300      	movs	r3, #0
 8007086:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007090:	d007      	beq.n	80070a2 <UART_Receive_IT+0x74>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <UART_Receive_IT+0x82>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e008      	b.n	80070c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	4619      	mov	r1, r3
 80070da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d15d      	bne.n	800719c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0220 	bic.w	r2, r2, #32
 80070ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695a      	ldr	r2, [r3, #20]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0201 	bic.w	r2, r2, #1
 800710e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007122:	2b01      	cmp	r3, #1
 8007124:	d135      	bne.n	8007192 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	330c      	adds	r3, #12
 8007132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	613b      	str	r3, [r7, #16]
   return(result);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f023 0310 	bic.w	r3, r3, #16
 8007142:	627b      	str	r3, [r7, #36]	@ 0x24
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	330c      	adds	r3, #12
 800714a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800714c:	623a      	str	r2, [r7, #32]
 800714e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	69f9      	ldr	r1, [r7, #28]
 8007152:	6a3a      	ldr	r2, [r7, #32]
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	61bb      	str	r3, [r7, #24]
   return(result);
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e5      	bne.n	800712c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b10      	cmp	r3, #16
 800716c:	d10a      	bne.n	8007184 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800716e:	2300      	movs	r3, #0
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fe64 	bl	8006e58 <HAL_UARTEx_RxEventCallback>
 8007190:	e002      	b.n	8007198 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fe4c 	bl	8006e30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e002      	b.n	80071a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071a0:	2302      	movs	r3, #2
  }
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3730      	adds	r7, #48	@ 0x30
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b0:	b0c0      	sub	sp, #256	@ 0x100
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c8:	68d9      	ldr	r1, [r3, #12]
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	ea40 0301 	orr.w	r3, r0, r1
 80071d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	431a      	orrs	r2, r3
 80071e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007204:	f021 010c 	bic.w	r1, r1, #12
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007212:	430b      	orrs	r3, r1
 8007214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007226:	6999      	ldr	r1, [r3, #24]
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	ea40 0301 	orr.w	r3, r0, r1
 8007232:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b8f      	ldr	r3, [pc, #572]	@ (8007478 <UART_SetConfig+0x2cc>)
 800723c:	429a      	cmp	r2, r3
 800723e:	d005      	beq.n	800724c <UART_SetConfig+0xa0>
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4b8d      	ldr	r3, [pc, #564]	@ (800747c <UART_SetConfig+0x2d0>)
 8007248:	429a      	cmp	r2, r3
 800724a:	d104      	bne.n	8007256 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800724c:	f7fe fe9e 	bl	8005f8c <HAL_RCC_GetPCLK2Freq>
 8007250:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007254:	e003      	b.n	800725e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007256:	f7fe fe85 	bl	8005f64 <HAL_RCC_GetPCLK1Freq>
 800725a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800725e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007268:	f040 810c 	bne.w	8007484 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800726c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007270:	2200      	movs	r2, #0
 8007272:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007276:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800727a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800727e:	4622      	mov	r2, r4
 8007280:	462b      	mov	r3, r5
 8007282:	1891      	adds	r1, r2, r2
 8007284:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007286:	415b      	adcs	r3, r3
 8007288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800728a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800728e:	4621      	mov	r1, r4
 8007290:	eb12 0801 	adds.w	r8, r2, r1
 8007294:	4629      	mov	r1, r5
 8007296:	eb43 0901 	adc.w	r9, r3, r1
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072ae:	4690      	mov	r8, r2
 80072b0:	4699      	mov	r9, r3
 80072b2:	4623      	mov	r3, r4
 80072b4:	eb18 0303 	adds.w	r3, r8, r3
 80072b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072bc:	462b      	mov	r3, r5
 80072be:	eb49 0303 	adc.w	r3, r9, r3
 80072c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80072d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072da:	460b      	mov	r3, r1
 80072dc:	18db      	adds	r3, r3, r3
 80072de:	653b      	str	r3, [r7, #80]	@ 0x50
 80072e0:	4613      	mov	r3, r2
 80072e2:	eb42 0303 	adc.w	r3, r2, r3
 80072e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80072e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072f0:	f7f9 fce2 	bl	8000cb8 <__aeabi_uldivmod>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4b61      	ldr	r3, [pc, #388]	@ (8007480 <UART_SetConfig+0x2d4>)
 80072fa:	fba3 2302 	umull	r2, r3, r3, r2
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	011c      	lsls	r4, r3, #4
 8007302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007306:	2200      	movs	r2, #0
 8007308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800730c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007310:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007314:	4642      	mov	r2, r8
 8007316:	464b      	mov	r3, r9
 8007318:	1891      	adds	r1, r2, r2
 800731a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800731c:	415b      	adcs	r3, r3
 800731e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007320:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007324:	4641      	mov	r1, r8
 8007326:	eb12 0a01 	adds.w	sl, r2, r1
 800732a:	4649      	mov	r1, r9
 800732c:	eb43 0b01 	adc.w	fp, r3, r1
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800733c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007344:	4692      	mov	sl, r2
 8007346:	469b      	mov	fp, r3
 8007348:	4643      	mov	r3, r8
 800734a:	eb1a 0303 	adds.w	r3, sl, r3
 800734e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007352:	464b      	mov	r3, r9
 8007354:	eb4b 0303 	adc.w	r3, fp, r3
 8007358:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007368:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800736c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007370:	460b      	mov	r3, r1
 8007372:	18db      	adds	r3, r3, r3
 8007374:	643b      	str	r3, [r7, #64]	@ 0x40
 8007376:	4613      	mov	r3, r2
 8007378:	eb42 0303 	adc.w	r3, r2, r3
 800737c:	647b      	str	r3, [r7, #68]	@ 0x44
 800737e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007382:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007386:	f7f9 fc97 	bl	8000cb8 <__aeabi_uldivmod>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4611      	mov	r1, r2
 8007390:	4b3b      	ldr	r3, [pc, #236]	@ (8007480 <UART_SetConfig+0x2d4>)
 8007392:	fba3 2301 	umull	r2, r3, r3, r1
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	2264      	movs	r2, #100	@ 0x64
 800739a:	fb02 f303 	mul.w	r3, r2, r3
 800739e:	1acb      	subs	r3, r1, r3
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073a6:	4b36      	ldr	r3, [pc, #216]	@ (8007480 <UART_SetConfig+0x2d4>)
 80073a8:	fba3 2302 	umull	r2, r3, r3, r2
 80073ac:	095b      	lsrs	r3, r3, #5
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80073b4:	441c      	add	r4, r3
 80073b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80073c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80073c8:	4642      	mov	r2, r8
 80073ca:	464b      	mov	r3, r9
 80073cc:	1891      	adds	r1, r2, r2
 80073ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80073d0:	415b      	adcs	r3, r3
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073d8:	4641      	mov	r1, r8
 80073da:	1851      	adds	r1, r2, r1
 80073dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80073de:	4649      	mov	r1, r9
 80073e0:	414b      	adcs	r3, r1
 80073e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073f0:	4659      	mov	r1, fp
 80073f2:	00cb      	lsls	r3, r1, #3
 80073f4:	4651      	mov	r1, sl
 80073f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073fa:	4651      	mov	r1, sl
 80073fc:	00ca      	lsls	r2, r1, #3
 80073fe:	4610      	mov	r0, r2
 8007400:	4619      	mov	r1, r3
 8007402:	4603      	mov	r3, r0
 8007404:	4642      	mov	r2, r8
 8007406:	189b      	adds	r3, r3, r2
 8007408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800740c:	464b      	mov	r3, r9
 800740e:	460a      	mov	r2, r1
 8007410:	eb42 0303 	adc.w	r3, r2, r3
 8007414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007424:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800742c:	460b      	mov	r3, r1
 800742e:	18db      	adds	r3, r3, r3
 8007430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007432:	4613      	mov	r3, r2
 8007434:	eb42 0303 	adc.w	r3, r2, r3
 8007438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800743a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800743e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007442:	f7f9 fc39 	bl	8000cb8 <__aeabi_uldivmod>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <UART_SetConfig+0x2d4>)
 800744c:	fba3 1302 	umull	r1, r3, r3, r2
 8007450:	095b      	lsrs	r3, r3, #5
 8007452:	2164      	movs	r1, #100	@ 0x64
 8007454:	fb01 f303 	mul.w	r3, r1, r3
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	3332      	adds	r3, #50	@ 0x32
 800745e:	4a08      	ldr	r2, [pc, #32]	@ (8007480 <UART_SetConfig+0x2d4>)
 8007460:	fba2 2303 	umull	r2, r3, r2, r3
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	f003 0207 	and.w	r2, r3, #7
 800746a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4422      	add	r2, r4
 8007472:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007474:	e106      	b.n	8007684 <UART_SetConfig+0x4d8>
 8007476:	bf00      	nop
 8007478:	40011000 	.word	0x40011000
 800747c:	40011400 	.word	0x40011400
 8007480:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007488:	2200      	movs	r2, #0
 800748a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800748e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007492:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007496:	4642      	mov	r2, r8
 8007498:	464b      	mov	r3, r9
 800749a:	1891      	adds	r1, r2, r2
 800749c:	6239      	str	r1, [r7, #32]
 800749e:	415b      	adcs	r3, r3
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074a6:	4641      	mov	r1, r8
 80074a8:	1854      	adds	r4, r2, r1
 80074aa:	4649      	mov	r1, r9
 80074ac:	eb43 0501 	adc.w	r5, r3, r1
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	00eb      	lsls	r3, r5, #3
 80074ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074be:	00e2      	lsls	r2, r4, #3
 80074c0:	4614      	mov	r4, r2
 80074c2:	461d      	mov	r5, r3
 80074c4:	4643      	mov	r3, r8
 80074c6:	18e3      	adds	r3, r4, r3
 80074c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074cc:	464b      	mov	r3, r9
 80074ce:	eb45 0303 	adc.w	r3, r5, r3
 80074d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074f2:	4629      	mov	r1, r5
 80074f4:	008b      	lsls	r3, r1, #2
 80074f6:	4621      	mov	r1, r4
 80074f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074fc:	4621      	mov	r1, r4
 80074fe:	008a      	lsls	r2, r1, #2
 8007500:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007504:	f7f9 fbd8 	bl	8000cb8 <__aeabi_uldivmod>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4b60      	ldr	r3, [pc, #384]	@ (8007690 <UART_SetConfig+0x4e4>)
 800750e:	fba3 2302 	umull	r2, r3, r3, r2
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	011c      	lsls	r4, r3, #4
 8007516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800751a:	2200      	movs	r2, #0
 800751c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007520:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007524:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007528:	4642      	mov	r2, r8
 800752a:	464b      	mov	r3, r9
 800752c:	1891      	adds	r1, r2, r2
 800752e:	61b9      	str	r1, [r7, #24]
 8007530:	415b      	adcs	r3, r3
 8007532:	61fb      	str	r3, [r7, #28]
 8007534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007538:	4641      	mov	r1, r8
 800753a:	1851      	adds	r1, r2, r1
 800753c:	6139      	str	r1, [r7, #16]
 800753e:	4649      	mov	r1, r9
 8007540:	414b      	adcs	r3, r1
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007550:	4659      	mov	r1, fp
 8007552:	00cb      	lsls	r3, r1, #3
 8007554:	4651      	mov	r1, sl
 8007556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800755a:	4651      	mov	r1, sl
 800755c:	00ca      	lsls	r2, r1, #3
 800755e:	4610      	mov	r0, r2
 8007560:	4619      	mov	r1, r3
 8007562:	4603      	mov	r3, r0
 8007564:	4642      	mov	r2, r8
 8007566:	189b      	adds	r3, r3, r2
 8007568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800756c:	464b      	mov	r3, r9
 800756e:	460a      	mov	r2, r1
 8007570:	eb42 0303 	adc.w	r3, r2, r3
 8007574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007582:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007584:	f04f 0200 	mov.w	r2, #0
 8007588:	f04f 0300 	mov.w	r3, #0
 800758c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007590:	4649      	mov	r1, r9
 8007592:	008b      	lsls	r3, r1, #2
 8007594:	4641      	mov	r1, r8
 8007596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800759a:	4641      	mov	r1, r8
 800759c:	008a      	lsls	r2, r1, #2
 800759e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075a2:	f7f9 fb89 	bl	8000cb8 <__aeabi_uldivmod>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4611      	mov	r1, r2
 80075ac:	4b38      	ldr	r3, [pc, #224]	@ (8007690 <UART_SetConfig+0x4e4>)
 80075ae:	fba3 2301 	umull	r2, r3, r3, r1
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	2264      	movs	r2, #100	@ 0x64
 80075b6:	fb02 f303 	mul.w	r3, r2, r3
 80075ba:	1acb      	subs	r3, r1, r3
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	3332      	adds	r3, #50	@ 0x32
 80075c0:	4a33      	ldr	r2, [pc, #204]	@ (8007690 <UART_SetConfig+0x4e4>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075cc:	441c      	add	r4, r3
 80075ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075d2:	2200      	movs	r2, #0
 80075d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80075d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80075d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075dc:	4642      	mov	r2, r8
 80075de:	464b      	mov	r3, r9
 80075e0:	1891      	adds	r1, r2, r2
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	415b      	adcs	r3, r3
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075ec:	4641      	mov	r1, r8
 80075ee:	1851      	adds	r1, r2, r1
 80075f0:	6039      	str	r1, [r7, #0]
 80075f2:	4649      	mov	r1, r9
 80075f4:	414b      	adcs	r3, r1
 80075f6:	607b      	str	r3, [r7, #4]
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007604:	4659      	mov	r1, fp
 8007606:	00cb      	lsls	r3, r1, #3
 8007608:	4651      	mov	r1, sl
 800760a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800760e:	4651      	mov	r1, sl
 8007610:	00ca      	lsls	r2, r1, #3
 8007612:	4610      	mov	r0, r2
 8007614:	4619      	mov	r1, r3
 8007616:	4603      	mov	r3, r0
 8007618:	4642      	mov	r2, r8
 800761a:	189b      	adds	r3, r3, r2
 800761c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800761e:	464b      	mov	r3, r9
 8007620:	460a      	mov	r2, r1
 8007622:	eb42 0303 	adc.w	r3, r2, r3
 8007626:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	663b      	str	r3, [r7, #96]	@ 0x60
 8007632:	667a      	str	r2, [r7, #100]	@ 0x64
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007640:	4649      	mov	r1, r9
 8007642:	008b      	lsls	r3, r1, #2
 8007644:	4641      	mov	r1, r8
 8007646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800764a:	4641      	mov	r1, r8
 800764c:	008a      	lsls	r2, r1, #2
 800764e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007652:	f7f9 fb31 	bl	8000cb8 <__aeabi_uldivmod>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <UART_SetConfig+0x4e4>)
 800765c:	fba3 1302 	umull	r1, r3, r3, r2
 8007660:	095b      	lsrs	r3, r3, #5
 8007662:	2164      	movs	r1, #100	@ 0x64
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	3332      	adds	r3, #50	@ 0x32
 800766e:	4a08      	ldr	r2, [pc, #32]	@ (8007690 <UART_SetConfig+0x4e4>)
 8007670:	fba2 2303 	umull	r2, r3, r2, r3
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	f003 020f 	and.w	r2, r3, #15
 800767a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4422      	add	r2, r4
 8007682:	609a      	str	r2, [r3, #8]
}
 8007684:	bf00      	nop
 8007686:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800768a:	46bd      	mov	sp, r7
 800768c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007690:	51eb851f 	.word	0x51eb851f

08007694 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007698:	4904      	ldr	r1, [pc, #16]	@ (80076ac <MX_FATFS_Init+0x18>)
 800769a:	4805      	ldr	r0, [pc, #20]	@ (80076b0 <MX_FATFS_Init+0x1c>)
 800769c:	f003 f9c6 	bl	800aa2c <FATFS_LinkDriver>
 80076a0:	4603      	mov	r3, r0
 80076a2:	461a      	mov	r2, r3
 80076a4:	4b03      	ldr	r3, [pc, #12]	@ (80076b4 <MX_FATFS_Init+0x20>)
 80076a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80076a8:	bf00      	nop
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000b5c 	.word	0x20000b5c
 80076b0:	20000018 	.word	0x20000018
 80076b4:	20000b58 	.word	0x20000b58

080076b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80076bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80076be:	4618      	mov	r0, r3
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80076d2:	79fb      	ldrb	r3, [r7, #7]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fa ff7f 	bl	80025d8 <SD_disk_initialize>
 80076da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80076ee:	79fb      	ldrb	r3, [r7, #7]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fb f857 	bl	80027a4 <SD_disk_status>
 80076f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007710:	7bf8      	ldrb	r0, [r7, #15]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	f7fb f85a 	bl	80027d0 <SD_disk_read>
 800771c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007736:	7bf8      	ldrb	r0, [r7, #15]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	f7fb f8b1 	bl	80028a4 <SD_disk_write>
 8007742:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	603a      	str	r2, [r7, #0]
 8007756:	71fb      	strb	r3, [r7, #7]
 8007758:	460b      	mov	r3, r1
 800775a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800775c:	79b9      	ldrb	r1, [r7, #6]
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7fb f922 	bl	80029ac <SD_disk_ioctl>
 8007768:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	4a08      	ldr	r2, [pc, #32]	@ (80077a4 <disk_status+0x30>)
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	79fa      	ldrb	r2, [r7, #7]
 800778c:	4905      	ldr	r1, [pc, #20]	@ (80077a4 <disk_status+0x30>)
 800778e:	440a      	add	r2, r1
 8007790:	7a12      	ldrb	r2, [r2, #8]
 8007792:	4610      	mov	r0, r2
 8007794:	4798      	blx	r3
 8007796:	4603      	mov	r3, r0
 8007798:	73fb      	strb	r3, [r7, #15]
  return stat;
 800779a:	7bfb      	ldrb	r3, [r7, #15]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000d88 	.word	0x20000d88

080077a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	4a0e      	ldr	r2, [pc, #56]	@ (80077f4 <disk_initialize+0x4c>)
 80077ba:	5cd3      	ldrb	r3, [r2, r3]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d114      	bne.n	80077ea <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	4a0c      	ldr	r2, [pc, #48]	@ (80077f4 <disk_initialize+0x4c>)
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	79fa      	ldrb	r2, [r7, #7]
 80077ce:	4909      	ldr	r1, [pc, #36]	@ (80077f4 <disk_initialize+0x4c>)
 80077d0:	440a      	add	r2, r1
 80077d2:	7a12      	ldrb	r2, [r2, #8]
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d103      	bne.n	80077ea <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	4a03      	ldr	r2, [pc, #12]	@ (80077f4 <disk_initialize+0x4c>)
 80077e6:	2101      	movs	r1, #1
 80077e8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20000d88 	.word	0x20000d88

080077f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80077f8:	b590      	push	{r4, r7, lr}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	4a0a      	ldr	r2, [pc, #40]	@ (8007834 <disk_read+0x3c>)
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	689c      	ldr	r4, [r3, #8]
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	4a07      	ldr	r2, [pc, #28]	@ (8007834 <disk_read+0x3c>)
 8007818:	4413      	add	r3, r2
 800781a:	7a18      	ldrb	r0, [r3, #8]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	47a0      	blx	r4
 8007824:	4603      	mov	r3, r0
 8007826:	75fb      	strb	r3, [r7, #23]
  return res;
 8007828:	7dfb      	ldrb	r3, [r7, #23]
}
 800782a:	4618      	mov	r0, r3
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	bd90      	pop	{r4, r7, pc}
 8007832:	bf00      	nop
 8007834:	20000d88 	.word	0x20000d88

08007838 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007838:	b590      	push	{r4, r7, lr}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	607a      	str	r2, [r7, #4]
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	4a0a      	ldr	r2, [pc, #40]	@ (8007874 <disk_write+0x3c>)
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	68dc      	ldr	r4, [r3, #12]
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	4a07      	ldr	r2, [pc, #28]	@ (8007874 <disk_write+0x3c>)
 8007858:	4413      	add	r3, r2
 800785a:	7a18      	ldrb	r0, [r3, #8]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	68b9      	ldr	r1, [r7, #8]
 8007862:	47a0      	blx	r4
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]
  return res;
 8007868:	7dfb      	ldrb	r3, [r7, #23]
}
 800786a:	4618      	mov	r0, r3
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	bd90      	pop	{r4, r7, pc}
 8007872:	bf00      	nop
 8007874:	20000d88 	.word	0x20000d88

08007878 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	603a      	str	r2, [r7, #0]
 8007882:	71fb      	strb	r3, [r7, #7]
 8007884:	460b      	mov	r3, r1
 8007886:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	4a09      	ldr	r2, [pc, #36]	@ (80078b0 <disk_ioctl+0x38>)
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	79fa      	ldrb	r2, [r7, #7]
 8007896:	4906      	ldr	r1, [pc, #24]	@ (80078b0 <disk_ioctl+0x38>)
 8007898:	440a      	add	r2, r1
 800789a:	7a10      	ldrb	r0, [r2, #8]
 800789c:	79b9      	ldrb	r1, [r7, #6]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	4798      	blx	r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20000d88 	.word	0x20000d88

080078b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3301      	adds	r3, #1
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80078c4:	89fb      	ldrh	r3, [r7, #14]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	b21a      	sxth	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	b21b      	sxth	r3, r3
 80078d0:	4313      	orrs	r3, r2
 80078d2:	b21b      	sxth	r3, r3
 80078d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80078d6:	89fb      	ldrh	r3, [r7, #14]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3303      	adds	r3, #3
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	3202      	adds	r2, #2
 80078fc:	7812      	ldrb	r2, [r2, #0]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	3201      	adds	r2, #1
 800790a:	7812      	ldrb	r2, [r2, #0]
 800790c:	4313      	orrs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	7812      	ldrb	r2, [r2, #0]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
	return rv;
 800791c:	68fb      	ldr	r3, [r7, #12]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	460b      	mov	r3, r1
 8007934:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	887a      	ldrh	r2, [r7, #2]
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	887b      	ldrh	r3, [r7, #2]
 8007944:	0a1b      	lsrs	r3, r3, #8
 8007946:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	607a      	str	r2, [r7, #4]
 800794e:	887a      	ldrh	r2, [r7, #2]
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	701a      	strb	r2, [r3, #0]
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	0a1b      	lsrs	r3, r3, #8
 800798c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	701a      	strb	r2, [r3, #0]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	0a1b      	lsrs	r3, r3, #8
 800799e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	607a      	str	r2, [r7, #4]
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	701a      	strb	r2, [r3, #0]
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	1c53      	adds	r3, r2, #1
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	1c59      	adds	r1, r3, #1
 80079dc:	6179      	str	r1, [r7, #20]
 80079de:	7812      	ldrb	r2, [r2, #0]
 80079e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	607b      	str	r3, [r7, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1f1      	bne.n	80079d2 <mem_cpy+0x1a>
	}
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80079fa:	b480      	push	{r7}
 80079fc:	b087      	sub	sp, #28
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	617a      	str	r2, [r7, #20]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	b2d2      	uxtb	r2, r2
 8007a14:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f3      	bne.n	8007a0a <mem_set+0x10>
}
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007a30:	b480      	push	{r7}
 8007a32:	b089      	sub	sp, #36	@ 0x24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	61fb      	str	r3, [r7, #28]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	61fa      	str	r2, [r7, #28]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	4619      	mov	r1, r3
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	61ba      	str	r2, [r7, #24]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	1acb      	subs	r3, r1, r3
 8007a5c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	607b      	str	r3, [r7, #4]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <mem_cmp+0x40>
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d0eb      	beq.n	8007a48 <mem_cmp+0x18>

	return r;
 8007a70:	697b      	ldr	r3, [r7, #20]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3724      	adds	r7, #36	@ 0x24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007a88:	e002      	b.n	8007a90 <chk_chr+0x12>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	607b      	str	r3, [r7, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <chk_chr+0x26>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d1f2      	bne.n	8007a8a <chk_chr+0xc>
	return *str;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60bb      	str	r3, [r7, #8]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	e029      	b.n	8007b1c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007ac8:	4a27      	ldr	r2, [pc, #156]	@ (8007b68 <chk_lock+0xb4>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	4413      	add	r3, r2
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d01d      	beq.n	8007b12 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007ad6:	4a24      	ldr	r2, [pc, #144]	@ (8007b68 <chk_lock+0xb4>)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	4413      	add	r3, r2
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d116      	bne.n	8007b16 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b68 <chk_lock+0xb4>)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	4413      	add	r3, r2
 8007af0:	3304      	adds	r3, #4
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d10c      	bne.n	8007b16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007afc:	4a1a      	ldr	r2, [pc, #104]	@ (8007b68 <chk_lock+0xb4>)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	4413      	add	r3, r2
 8007b04:	3308      	adds	r3, #8
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d102      	bne.n	8007b16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b10:	e007      	b.n	8007b22 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007b12:	2301      	movs	r3, #1
 8007b14:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d9d2      	bls.n	8007ac8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d109      	bne.n	8007b3c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <chk_lock+0x80>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d101      	bne.n	8007b38 <chk_lock+0x84>
 8007b34:	2300      	movs	r3, #0
 8007b36:	e010      	b.n	8007b5a <chk_lock+0xa6>
 8007b38:	2312      	movs	r3, #18
 8007b3a:	e00e      	b.n	8007b5a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d108      	bne.n	8007b54 <chk_lock+0xa0>
 8007b42:	4a09      	ldr	r2, [pc, #36]	@ (8007b68 <chk_lock+0xb4>)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	4413      	add	r3, r2
 8007b4a:	330c      	adds	r3, #12
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b52:	d101      	bne.n	8007b58 <chk_lock+0xa4>
 8007b54:	2310      	movs	r3, #16
 8007b56:	e000      	b.n	8007b5a <chk_lock+0xa6>
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20000b68 	.word	0x20000b68

08007b6c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b72:	2300      	movs	r3, #0
 8007b74:	607b      	str	r3, [r7, #4]
 8007b76:	e002      	b.n	8007b7e <enq_lock+0x12>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	607b      	str	r3, [r7, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d806      	bhi.n	8007b92 <enq_lock+0x26>
 8007b84:	4a09      	ldr	r2, [pc, #36]	@ (8007bac <enq_lock+0x40>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	011b      	lsls	r3, r3, #4
 8007b8a:	4413      	add	r3, r2
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f2      	bne.n	8007b78 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	bf14      	ite	ne
 8007b98:	2301      	movne	r3, #1
 8007b9a:	2300      	moveq	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	20000b68 	.word	0x20000b68

08007bb0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e01f      	b.n	8007c00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007bc0:	4a41      	ldr	r2, [pc, #260]	@ (8007cc8 <inc_lock+0x118>)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	4413      	add	r3, r2
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d113      	bne.n	8007bfa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8007cc8 <inc_lock+0x118>)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	4413      	add	r3, r2
 8007bda:	3304      	adds	r3, #4
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d109      	bne.n	8007bfa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007be6:	4a38      	ldr	r2, [pc, #224]	@ (8007cc8 <inc_lock+0x118>)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	4413      	add	r3, r2
 8007bee:	3308      	adds	r3, #8
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d006      	beq.n	8007c08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d9dc      	bls.n	8007bc0 <inc_lock+0x10>
 8007c06:	e000      	b.n	8007c0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007c08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d132      	bne.n	8007c76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e002      	b.n	8007c1c <inc_lock+0x6c>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d806      	bhi.n	8007c30 <inc_lock+0x80>
 8007c22:	4a29      	ldr	r2, [pc, #164]	@ (8007cc8 <inc_lock+0x118>)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	011b      	lsls	r3, r3, #4
 8007c28:	4413      	add	r3, r2
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1f2      	bne.n	8007c16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d101      	bne.n	8007c3a <inc_lock+0x8a>
 8007c36:	2300      	movs	r3, #0
 8007c38:	e040      	b.n	8007cbc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	4922      	ldr	r1, [pc, #136]	@ (8007cc8 <inc_lock+0x118>)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	440b      	add	r3, r1
 8007c46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	491e      	ldr	r1, [pc, #120]	@ (8007cc8 <inc_lock+0x118>)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	440b      	add	r3, r1
 8007c54:	3304      	adds	r3, #4
 8007c56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	695a      	ldr	r2, [r3, #20]
 8007c5c:	491a      	ldr	r1, [pc, #104]	@ (8007cc8 <inc_lock+0x118>)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	440b      	add	r3, r1
 8007c64:	3308      	adds	r3, #8
 8007c66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007c68:	4a17      	ldr	r2, [pc, #92]	@ (8007cc8 <inc_lock+0x118>)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	4413      	add	r3, r2
 8007c70:	330c      	adds	r3, #12
 8007c72:	2200      	movs	r2, #0
 8007c74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d009      	beq.n	8007c90 <inc_lock+0xe0>
 8007c7c:	4a12      	ldr	r2, [pc, #72]	@ (8007cc8 <inc_lock+0x118>)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	4413      	add	r3, r2
 8007c84:	330c      	adds	r3, #12
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <inc_lock+0xe0>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	e015      	b.n	8007cbc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d108      	bne.n	8007ca8 <inc_lock+0xf8>
 8007c96:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc8 <inc_lock+0x118>)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	4413      	add	r3, r2
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	e001      	b.n	8007cac <inc_lock+0xfc>
 8007ca8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cac:	4906      	ldr	r1, [pc, #24]	@ (8007cc8 <inc_lock+0x118>)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	011b      	lsls	r3, r3, #4
 8007cb2:	440b      	add	r3, r1
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3301      	adds	r3, #1
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	20000b68 	.word	0x20000b68

08007ccc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d825      	bhi.n	8007d2c <dec_lock+0x60>
		n = Files[i].ctr;
 8007ce0:	4a17      	ldr	r2, [pc, #92]	@ (8007d40 <dec_lock+0x74>)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	4413      	add	r3, r2
 8007ce8:	330c      	adds	r3, #12
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007cee:	89fb      	ldrh	r3, [r7, #14]
 8007cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cf4:	d101      	bne.n	8007cfa <dec_lock+0x2e>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007cfa:	89fb      	ldrh	r3, [r7, #14]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <dec_lock+0x3a>
 8007d00:	89fb      	ldrh	r3, [r7, #14]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d06:	4a0e      	ldr	r2, [pc, #56]	@ (8007d40 <dec_lock+0x74>)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	4413      	add	r3, r2
 8007d0e:	330c      	adds	r3, #12
 8007d10:	89fa      	ldrh	r2, [r7, #14]
 8007d12:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d14:	89fb      	ldrh	r3, [r7, #14]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d105      	bne.n	8007d26 <dec_lock+0x5a>
 8007d1a:	4a09      	ldr	r2, [pc, #36]	@ (8007d40 <dec_lock+0x74>)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	4413      	add	r3, r2
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	737b      	strb	r3, [r7, #13]
 8007d2a:	e001      	b.n	8007d30 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007d30:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20000b68 	.word	0x20000b68

08007d44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	e010      	b.n	8007d74 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007d52:	4a0d      	ldr	r2, [pc, #52]	@ (8007d88 <clear_lock+0x44>)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	4413      	add	r3, r2
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d105      	bne.n	8007d6e <clear_lock+0x2a>
 8007d62:	4a09      	ldr	r2, [pc, #36]	@ (8007d88 <clear_lock+0x44>)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	4413      	add	r3, r2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d9eb      	bls.n	8007d52 <clear_lock+0xe>
	}
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	20000b68 	.word	0x20000b68

08007d8c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	78db      	ldrb	r3, [r3, #3]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d034      	beq.n	8007e0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007da4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	7858      	ldrb	r0, [r3, #1]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007db0:	2301      	movs	r3, #1
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	f7ff fd40 	bl	8007838 <disk_write>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	73fb      	strb	r3, [r7, #15]
 8007dc2:	e022      	b.n	8007e0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	1ad2      	subs	r2, r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d217      	bcs.n	8007e0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	789b      	ldrb	r3, [r3, #2]
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	e010      	b.n	8007e04 <sync_window+0x78>
					wsect += fs->fsize;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	4413      	add	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7858      	ldrb	r0, [r3, #1]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007df6:	2301      	movs	r3, #1
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	f7ff fd1d 	bl	8007838 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	3b01      	subs	r3, #1
 8007e02:	613b      	str	r3, [r7, #16]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d8eb      	bhi.n	8007de2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d01b      	beq.n	8007e64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff ffad 	bl	8007d8c <sync_window>
 8007e32:	4603      	mov	r3, r0
 8007e34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d113      	bne.n	8007e64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7858      	ldrb	r0, [r3, #1]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007e46:	2301      	movs	r3, #1
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	f7ff fcd5 	bl	80077f8 <disk_read>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d004      	beq.n	8007e5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007e54:	f04f 33ff 	mov.w	r3, #4294967295
 8007e58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff ff87 	bl	8007d8c <sync_window>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d159      	bne.n	8007f3c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	d149      	bne.n	8007f24 <sync_fs+0xb4>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	791b      	ldrb	r3, [r3, #4]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d145      	bne.n	8007f24 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	899b      	ldrh	r3, [r3, #12]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	f7ff fda8 	bl	80079fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3338      	adds	r3, #56	@ 0x38
 8007eae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007eb2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fd37 	bl	800792a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3338      	adds	r3, #56	@ 0x38
 8007ec0:	4921      	ldr	r1, [pc, #132]	@ (8007f48 <sync_fs+0xd8>)
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff fd4c 	bl	8007960 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3338      	adds	r3, #56	@ 0x38
 8007ecc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007ed0:	491e      	ldr	r1, [pc, #120]	@ (8007f4c <sync_fs+0xdc>)
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff fd44 	bl	8007960 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3338      	adds	r3, #56	@ 0x38
 8007edc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	f7ff fd3a 	bl	8007960 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3338      	adds	r3, #56	@ 0x38
 8007ef0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f7ff fd30 	bl	8007960 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	7858      	ldrb	r0, [r3, #1]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f7ff fc8d 	bl	8007838 <disk_write>
			fs->fsi_flag = 0;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	785b      	ldrb	r3, [r3, #1]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fca3 	bl	8007878 <disk_ioctl>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <sync_fs+0xcc>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	41615252 	.word	0x41615252
 8007f4c:	61417272 	.word	0x61417272

08007f50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	3b02      	subs	r3, #2
 8007f5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	3b02      	subs	r3, #2
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d301      	bcc.n	8007f70 <clust2sect+0x20>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e008      	b.n	8007f82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	895b      	ldrh	r3, [r3, #10]
 8007f74:	461a      	mov	r2, r3
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	fb03 f202 	mul.w	r2, r3, r2
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f80:	4413      	add	r3, r2
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b086      	sub	sp, #24
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d904      	bls.n	8007fae <get_fat+0x20>
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d302      	bcc.n	8007fb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007fae:	2301      	movs	r3, #1
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	e0ba      	b.n	800812a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	f000 8082 	beq.w	80080c8 <get_fat+0x13a>
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	f300 80a6 	bgt.w	8008116 <get_fat+0x188>
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d002      	beq.n	8007fd4 <get_fat+0x46>
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d055      	beq.n	800807e <get_fat+0xf0>
 8007fd2:	e0a0      	b.n	8008116 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	085b      	lsrs	r3, r3, #1
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	899b      	ldrh	r3, [r3, #12]
 8007fea:	4619      	mov	r1, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ff2:	4413      	add	r3, r2
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6938      	ldr	r0, [r7, #16]
 8007ff8:	f7ff ff0c 	bl	8007e14 <move_window>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 808c 	bne.w	800811c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	60fa      	str	r2, [r7, #12]
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	8992      	ldrh	r2, [r2, #12]
 800800e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008012:	fb01 f202 	mul.w	r2, r1, r2
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4413      	add	r3, r2
 800801c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008020:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	899b      	ldrh	r3, [r3, #12]
 800802a:	4619      	mov	r1, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008032:	4413      	add	r3, r2
 8008034:	4619      	mov	r1, r3
 8008036:	6938      	ldr	r0, [r7, #16]
 8008038:	f7ff feec 	bl	8007e14 <move_window>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d16e      	bne.n	8008120 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	899b      	ldrh	r3, [r3, #12]
 8008046:	461a      	mov	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	fbb3 f1f2 	udiv	r1, r3, r2
 800804e:	fb01 f202 	mul.w	r2, r1, r2
 8008052:	1a9b      	subs	r3, r3, r2
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4413      	add	r3, r2
 8008058:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	4313      	orrs	r3, r2
 8008062:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <get_fat+0xe6>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	091b      	lsrs	r3, r3, #4
 8008072:	e002      	b.n	800807a <get_fat+0xec>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800807a:	617b      	str	r3, [r7, #20]
			break;
 800807c:	e055      	b.n	800812a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	899b      	ldrh	r3, [r3, #12]
 8008086:	085b      	lsrs	r3, r3, #1
 8008088:	b29b      	uxth	r3, r3
 800808a:	4619      	mov	r1, r3
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008092:	4413      	add	r3, r2
 8008094:	4619      	mov	r1, r3
 8008096:	6938      	ldr	r0, [r7, #16]
 8008098:	f7ff febc 	bl	8007e14 <move_window>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d140      	bne.n	8008124 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	8992      	ldrh	r2, [r2, #12]
 80080b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80080b4:	fb00 f202 	mul.w	r2, r0, r2
 80080b8:	1a9b      	subs	r3, r3, r2
 80080ba:	440b      	add	r3, r1
 80080bc:	4618      	mov	r0, r3
 80080be:	f7ff fbf9 	bl	80078b4 <ld_word>
 80080c2:	4603      	mov	r3, r0
 80080c4:	617b      	str	r3, [r7, #20]
			break;
 80080c6:	e030      	b.n	800812a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	899b      	ldrh	r3, [r3, #12]
 80080d0:	089b      	lsrs	r3, r3, #2
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	4619      	mov	r1, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80080dc:	4413      	add	r3, r2
 80080de:	4619      	mov	r1, r3
 80080e0:	6938      	ldr	r0, [r7, #16]
 80080e2:	f7ff fe97 	bl	8007e14 <move_window>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d11d      	bne.n	8008128 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	8992      	ldrh	r2, [r2, #12]
 80080fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80080fe:	fb00 f202 	mul.w	r2, r0, r2
 8008102:	1a9b      	subs	r3, r3, r2
 8008104:	440b      	add	r3, r1
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff fbec 	bl	80078e4 <ld_dword>
 800810c:	4603      	mov	r3, r0
 800810e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008112:	617b      	str	r3, [r7, #20]
			break;
 8008114:	e009      	b.n	800812a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008116:	2301      	movs	r3, #1
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	e006      	b.n	800812a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800811c:	bf00      	nop
 800811e:	e004      	b.n	800812a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008120:	bf00      	nop
 8008122:	e002      	b.n	800812a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008124:	bf00      	nop
 8008126:	e000      	b.n	800812a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008128:	bf00      	nop
		}
	}

	return val;
 800812a:	697b      	ldr	r3, [r7, #20]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008134:	b590      	push	{r4, r7, lr}
 8008136:	b089      	sub	sp, #36	@ 0x24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008140:	2302      	movs	r3, #2
 8008142:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b01      	cmp	r3, #1
 8008148:	f240 8109 	bls.w	800835e <put_fat+0x22a>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	429a      	cmp	r2, r3
 8008154:	f080 8103 	bcs.w	800835e <put_fat+0x22a>
		switch (fs->fs_type) {
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2b03      	cmp	r3, #3
 800815e:	f000 80b6 	beq.w	80082ce <put_fat+0x19a>
 8008162:	2b03      	cmp	r3, #3
 8008164:	f300 80fb 	bgt.w	800835e <put_fat+0x22a>
 8008168:	2b01      	cmp	r3, #1
 800816a:	d003      	beq.n	8008174 <put_fat+0x40>
 800816c:	2b02      	cmp	r3, #2
 800816e:	f000 8083 	beq.w	8008278 <put_fat+0x144>
 8008172:	e0f4      	b.n	800835e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	61bb      	str	r3, [r7, #24]
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	4413      	add	r3, r2
 8008180:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	899b      	ldrh	r3, [r3, #12]
 800818a:	4619      	mov	r1, r3
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008192:	4413      	add	r3, r2
 8008194:	4619      	mov	r1, r3
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff fe3c 	bl	8007e14 <move_window>
 800819c:	4603      	mov	r3, r0
 800819e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80081a0:	7ffb      	ldrb	r3, [r7, #31]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 80d4 	bne.w	8008350 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	61ba      	str	r2, [r7, #24]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	8992      	ldrh	r2, [r2, #12]
 80081b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80081bc:	fb00 f202 	mul.w	r2, r0, r2
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	440b      	add	r3, r1
 80081c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00d      	beq.n	80081ec <put_fat+0xb8>
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	b25b      	sxtb	r3, r3
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	b25a      	sxtb	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	b25b      	sxtb	r3, r3
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	e001      	b.n	80081f0 <put_fat+0xbc>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2201      	movs	r2, #1
 80081f8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	899b      	ldrh	r3, [r3, #12]
 8008202:	4619      	mov	r1, r3
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	fbb3 f3f1 	udiv	r3, r3, r1
 800820a:	4413      	add	r3, r2
 800820c:	4619      	mov	r1, r3
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7ff fe00 	bl	8007e14 <move_window>
 8008214:	4603      	mov	r3, r0
 8008216:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008218:	7ffb      	ldrb	r3, [r7, #31]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f040 809a 	bne.w	8008354 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	899b      	ldrh	r3, [r3, #12]
 800822a:	461a      	mov	r2, r3
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008232:	fb00 f202 	mul.w	r2, r0, r2
 8008236:	1a9b      	subs	r3, r3, r2
 8008238:	440b      	add	r3, r1
 800823a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <put_fat+0x11a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	091b      	lsrs	r3, r3, #4
 800824a:	b2db      	uxtb	r3, r3
 800824c:	e00e      	b.n	800826c <put_fat+0x138>
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b25b      	sxtb	r3, r3
 8008254:	f023 030f 	bic.w	r3, r3, #15
 8008258:	b25a      	sxtb	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	0a1b      	lsrs	r3, r3, #8
 800825e:	b25b      	sxtb	r3, r3
 8008260:	f003 030f 	and.w	r3, r3, #15
 8008264:	b25b      	sxtb	r3, r3
 8008266:	4313      	orrs	r3, r2
 8008268:	b25b      	sxtb	r3, r3
 800826a:	b2db      	uxtb	r3, r3
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2201      	movs	r2, #1
 8008274:	70da      	strb	r2, [r3, #3]
			break;
 8008276:	e072      	b.n	800835e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	899b      	ldrh	r3, [r3, #12]
 8008280:	085b      	lsrs	r3, r3, #1
 8008282:	b29b      	uxth	r3, r3
 8008284:	4619      	mov	r1, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	fbb3 f3f1 	udiv	r3, r3, r1
 800828c:	4413      	add	r3, r2
 800828e:	4619      	mov	r1, r3
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f7ff fdbf 	bl	8007e14 <move_window>
 8008296:	4603      	mov	r3, r0
 8008298:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800829a:	7ffb      	ldrb	r3, [r7, #31]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d15b      	bne.n	8008358 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	8992      	ldrh	r2, [r2, #12]
 80082ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80082b2:	fb00 f202 	mul.w	r2, r0, r2
 80082b6:	1a9b      	subs	r3, r3, r2
 80082b8:	440b      	add	r3, r1
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	b292      	uxth	r2, r2
 80082be:	4611      	mov	r1, r2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7ff fb32 	bl	800792a <st_word>
			fs->wflag = 1;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2201      	movs	r2, #1
 80082ca:	70da      	strb	r2, [r3, #3]
			break;
 80082cc:	e047      	b.n	800835e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	899b      	ldrh	r3, [r3, #12]
 80082d6:	089b      	lsrs	r3, r3, #2
 80082d8:	b29b      	uxth	r3, r3
 80082da:	4619      	mov	r1, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	fbb3 f3f1 	udiv	r3, r3, r1
 80082e2:	4413      	add	r3, r2
 80082e4:	4619      	mov	r1, r3
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff fd94 	bl	8007e14 <move_window>
 80082ec:	4603      	mov	r3, r0
 80082ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082f0:	7ffb      	ldrb	r3, [r7, #31]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d132      	bne.n	800835c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	8992      	ldrh	r2, [r2, #12]
 800830a:	fbb3 f0f2 	udiv	r0, r3, r2
 800830e:	fb00 f202 	mul.w	r2, r0, r2
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	440b      	add	r3, r1
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff fae4 	bl	80078e4 <ld_dword>
 800831c:	4603      	mov	r3, r0
 800831e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008322:	4323      	orrs	r3, r4
 8008324:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	8992      	ldrh	r2, [r2, #12]
 8008334:	fbb3 f0f2 	udiv	r0, r3, r2
 8008338:	fb00 f202 	mul.w	r2, r0, r2
 800833c:	1a9b      	subs	r3, r3, r2
 800833e:	440b      	add	r3, r1
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff fb0c 	bl	8007960 <st_dword>
			fs->wflag = 1;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2201      	movs	r2, #1
 800834c:	70da      	strb	r2, [r3, #3]
			break;
 800834e:	e006      	b.n	800835e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008350:	bf00      	nop
 8008352:	e004      	b.n	800835e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008354:	bf00      	nop
 8008356:	e002      	b.n	800835e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008358:	bf00      	nop
 800835a:	e000      	b.n	800835e <put_fat+0x22a>
			if (res != FR_OK) break;
 800835c:	bf00      	nop
		}
	}
	return res;
 800835e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3724      	adds	r7, #36	@ 0x24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd90      	pop	{r4, r7, pc}

08008368 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d904      	bls.n	800838e <remove_chain+0x26>
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	429a      	cmp	r2, r3
 800838c:	d301      	bcc.n	8008392 <remove_chain+0x2a>
 800838e:	2302      	movs	r3, #2
 8008390:	e04b      	b.n	800842a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00c      	beq.n	80083b2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008398:	f04f 32ff 	mov.w	r2, #4294967295
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	69b8      	ldr	r0, [r7, #24]
 80083a0:	f7ff fec8 	bl	8008134 <put_fat>
 80083a4:	4603      	mov	r3, r0
 80083a6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80083a8:	7ffb      	ldrb	r3, [r7, #31]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <remove_chain+0x4a>
 80083ae:	7ffb      	ldrb	r3, [r7, #31]
 80083b0:	e03b      	b.n	800842a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fdea 	bl	8007f8e <get_fat>
 80083ba:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d031      	beq.n	8008426 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d101      	bne.n	80083cc <remove_chain+0x64>
 80083c8:	2302      	movs	r3, #2
 80083ca:	e02e      	b.n	800842a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d2:	d101      	bne.n	80083d8 <remove_chain+0x70>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e028      	b.n	800842a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80083d8:	2200      	movs	r2, #0
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	69b8      	ldr	r0, [r7, #24]
 80083de:	f7ff fea9 	bl	8008134 <put_fat>
 80083e2:	4603      	mov	r3, r0
 80083e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80083e6:	7ffb      	ldrb	r3, [r7, #31]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <remove_chain+0x88>
 80083ec:	7ffb      	ldrb	r3, [r7, #31]
 80083ee:	e01c      	b.n	800842a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	699a      	ldr	r2, [r3, #24]
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	3b02      	subs	r3, #2
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d20b      	bcs.n	8008416 <remove_chain+0xae>
			fs->free_clst++;
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	791b      	ldrb	r3, [r3, #4]
 800840c:	f043 0301 	orr.w	r3, r3, #1
 8008410:	b2da      	uxtb	r2, r3
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	429a      	cmp	r2, r3
 8008422:	d3c6      	bcc.n	80083b2 <remove_chain+0x4a>
 8008424:	e000      	b.n	8008428 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008426:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3720      	adds	r7, #32
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b088      	sub	sp, #32
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10d      	bne.n	8008464 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <create_chain+0x2c>
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	429a      	cmp	r2, r3
 800845c:	d31b      	bcc.n	8008496 <create_chain+0x64>
 800845e:	2301      	movs	r3, #1
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	e018      	b.n	8008496 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff fd91 	bl	8007f8e <get_fat>
 800846c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d801      	bhi.n	8008478 <create_chain+0x46>
 8008474:	2301      	movs	r3, #1
 8008476:	e070      	b.n	800855a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847e:	d101      	bne.n	8008484 <create_chain+0x52>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	e06a      	b.n	800855a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	429a      	cmp	r2, r3
 800848c:	d201      	bcs.n	8008492 <create_chain+0x60>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	e063      	b.n	800855a <create_chain+0x128>
		scl = clst;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	3301      	adds	r3, #1
 800849e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d307      	bcc.n	80084ba <create_chain+0x88>
				ncl = 2;
 80084aa:	2302      	movs	r3, #2
 80084ac:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80084ae:	69fa      	ldr	r2, [r7, #28]
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d901      	bls.n	80084ba <create_chain+0x88>
 80084b6:	2300      	movs	r3, #0
 80084b8:	e04f      	b.n	800855a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80084ba:	69f9      	ldr	r1, [r7, #28]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff fd66 	bl	8007f8e <get_fat>
 80084c2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00e      	beq.n	80084e8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d003      	beq.n	80084d8 <create_chain+0xa6>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d6:	d101      	bne.n	80084dc <create_chain+0xaa>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	e03e      	b.n	800855a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80084dc:	69fa      	ldr	r2, [r7, #28]
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d1da      	bne.n	800849a <create_chain+0x68>
 80084e4:	2300      	movs	r3, #0
 80084e6:	e038      	b.n	800855a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80084e8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295
 80084ee:	69f9      	ldr	r1, [r7, #28]
 80084f0:	6938      	ldr	r0, [r7, #16]
 80084f2:	f7ff fe1f 	bl	8008134 <put_fat>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <create_chain+0xe2>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d006      	beq.n	8008514 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008506:	69fa      	ldr	r2, [r7, #28]
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6938      	ldr	r0, [r7, #16]
 800850c:	f7ff fe12 	bl	8008134 <put_fat>
 8008510:	4603      	mov	r3, r0
 8008512:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d116      	bne.n	8008548 <create_chain+0x116>
		fs->last_clst = ncl;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	69fa      	ldr	r2, [r7, #28]
 800851e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	3b02      	subs	r3, #2
 800852a:	429a      	cmp	r2, r3
 800852c:	d804      	bhi.n	8008538 <create_chain+0x106>
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	1e5a      	subs	r2, r3, #1
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	791b      	ldrb	r3, [r3, #4]
 800853c:	f043 0301 	orr.w	r3, r3, #1
 8008540:	b2da      	uxtb	r2, r3
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	711a      	strb	r2, [r3, #4]
 8008546:	e007      	b.n	8008558 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d102      	bne.n	8008554 <create_chain+0x122>
 800854e:	f04f 33ff 	mov.w	r3, #4294967295
 8008552:	e000      	b.n	8008556 <create_chain+0x124>
 8008554:	2301      	movs	r3, #1
 8008556:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008558:	69fb      	ldr	r3, [r7, #28]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3720      	adds	r7, #32
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008562:	b480      	push	{r7}
 8008564:	b087      	sub	sp, #28
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008576:	3304      	adds	r3, #4
 8008578:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	899b      	ldrh	r3, [r3, #12]
 800857e:	461a      	mov	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	fbb3 f3f2 	udiv	r3, r3, r2
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	8952      	ldrh	r2, [r2, #10]
 800858a:	fbb3 f3f2 	udiv	r3, r3, r2
 800858e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	1d1a      	adds	r2, r3, #4
 8008594:	613a      	str	r2, [r7, #16]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <clmt_clust+0x42>
 80085a0:	2300      	movs	r3, #0
 80085a2:	e010      	b.n	80085c6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d307      	bcc.n	80085bc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	3304      	adds	r3, #4
 80085b8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80085ba:	e7e9      	b.n	8008590 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80085bc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	4413      	add	r3, r2
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b086      	sub	sp, #24
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085e8:	d204      	bcs.n	80085f4 <dir_sdi+0x22>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	f003 031f 	and.w	r3, r3, #31
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80085f4:	2302      	movs	r3, #2
 80085f6:	e071      	b.n	80086dc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <dir_sdi+0x46>
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b02      	cmp	r3, #2
 8008610:	d902      	bls.n	8008618 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008616:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10c      	bne.n	8008638 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	095b      	lsrs	r3, r3, #5
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	8912      	ldrh	r2, [r2, #8]
 8008626:	4293      	cmp	r3, r2
 8008628:	d301      	bcc.n	800862e <dir_sdi+0x5c>
 800862a:	2302      	movs	r3, #2
 800862c:	e056      	b.n	80086dc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	61da      	str	r2, [r3, #28]
 8008636:	e02d      	b.n	8008694 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	895b      	ldrh	r3, [r3, #10]
 800863c:	461a      	mov	r2, r3
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	899b      	ldrh	r3, [r3, #12]
 8008642:	fb02 f303 	mul.w	r3, r2, r3
 8008646:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008648:	e019      	b.n	800867e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6979      	ldr	r1, [r7, #20]
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fc9d 	bl	8007f8e <get_fat>
 8008654:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865c:	d101      	bne.n	8008662 <dir_sdi+0x90>
 800865e:	2301      	movs	r3, #1
 8008660:	e03c      	b.n	80086dc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d904      	bls.n	8008672 <dir_sdi+0xa0>
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	429a      	cmp	r2, r3
 8008670:	d301      	bcc.n	8008676 <dir_sdi+0xa4>
 8008672:	2302      	movs	r3, #2
 8008674:	e032      	b.n	80086dc <dir_sdi+0x10a>
			ofs -= csz;
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	429a      	cmp	r2, r3
 8008684:	d2e1      	bcs.n	800864a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008686:	6979      	ldr	r1, [r7, #20]
 8008688:	6938      	ldr	r0, [r7, #16]
 800868a:	f7ff fc61 	bl	8007f50 <clust2sect>
 800868e:	4602      	mov	r2, r0
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <dir_sdi+0xd4>
 80086a2:	2302      	movs	r3, #2
 80086a4:	e01a      	b.n	80086dc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	69da      	ldr	r2, [r3, #28]
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	899b      	ldrh	r3, [r3, #12]
 80086ae:	4619      	mov	r1, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80086b6:	441a      	add	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	899b      	ldrh	r3, [r3, #12]
 80086c6:	461a      	mov	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80086ce:	fb00 f202 	mul.w	r2, r0, r2
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	18ca      	adds	r2, r1, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	3320      	adds	r3, #32
 80086fa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <dir_next+0x28>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800870a:	d301      	bcc.n	8008710 <dir_next+0x2c>
 800870c:	2304      	movs	r3, #4
 800870e:	e0bb      	b.n	8008888 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	899b      	ldrh	r3, [r3, #12]
 8008714:	461a      	mov	r2, r3
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	fbb3 f1f2 	udiv	r1, r3, r2
 800871c:	fb01 f202 	mul.w	r2, r1, r2
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	2b00      	cmp	r3, #0
 8008724:	f040 809d 	bne.w	8008862 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	8912      	ldrh	r2, [r2, #8]
 8008742:	4293      	cmp	r3, r2
 8008744:	f0c0 808d 	bcc.w	8008862 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	61da      	str	r2, [r3, #28]
 800874e:	2304      	movs	r3, #4
 8008750:	e09a      	b.n	8008888 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	899b      	ldrh	r3, [r3, #12]
 8008756:	461a      	mov	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	fbb3 f3f2 	udiv	r3, r3, r2
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	8952      	ldrh	r2, [r2, #10]
 8008762:	3a01      	subs	r2, #1
 8008764:	4013      	ands	r3, r2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d17b      	bne.n	8008862 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	4619      	mov	r1, r3
 8008772:	4610      	mov	r0, r2
 8008774:	f7ff fc0b 	bl	8007f8e <get_fat>
 8008778:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d801      	bhi.n	8008784 <dir_next+0xa0>
 8008780:	2302      	movs	r3, #2
 8008782:	e081      	b.n	8008888 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d101      	bne.n	8008790 <dir_next+0xac>
 800878c:	2301      	movs	r3, #1
 800878e:	e07b      	b.n	8008888 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	429a      	cmp	r2, r3
 8008798:	d359      	bcc.n	800884e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d104      	bne.n	80087aa <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	61da      	str	r2, [r3, #28]
 80087a6:	2304      	movs	r3, #4
 80087a8:	e06e      	b.n	8008888 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	4619      	mov	r1, r3
 80087b2:	4610      	mov	r0, r2
 80087b4:	f7ff fe3d 	bl	8008432 <create_chain>
 80087b8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <dir_next+0xe0>
 80087c0:	2307      	movs	r3, #7
 80087c2:	e061      	b.n	8008888 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <dir_next+0xea>
 80087ca:	2302      	movs	r3, #2
 80087cc:	e05c      	b.n	8008888 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d4:	d101      	bne.n	80087da <dir_next+0xf6>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e056      	b.n	8008888 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f7ff fad6 	bl	8007d8c <sync_window>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <dir_next+0x106>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e04e      	b.n	8008888 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	899b      	ldrh	r3, [r3, #12]
 80087f4:	461a      	mov	r2, r3
 80087f6:	2100      	movs	r1, #0
 80087f8:	f7ff f8ff 	bl	80079fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80087fc:	2300      	movs	r3, #0
 80087fe:	613b      	str	r3, [r7, #16]
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff fba4 	bl	8007f50 <clust2sect>
 8008808:	4602      	mov	r2, r0
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	635a      	str	r2, [r3, #52]	@ 0x34
 800880e:	e012      	b.n	8008836 <dir_next+0x152>
						fs->wflag = 1;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2201      	movs	r2, #1
 8008814:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff fab8 	bl	8007d8c <sync_window>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <dir_next+0x142>
 8008822:	2301      	movs	r3, #1
 8008824:	e030      	b.n	8008888 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	3301      	adds	r3, #1
 800882a:	613b      	str	r3, [r7, #16]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	635a      	str	r2, [r3, #52]	@ 0x34
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	895b      	ldrh	r3, [r3, #10]
 800883a:	461a      	mov	r2, r3
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	4293      	cmp	r3, r2
 8008840:	d3e6      	bcc.n	8008810 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	1ad2      	subs	r2, r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008854:	6979      	ldr	r1, [r7, #20]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f7ff fb7a 	bl	8007f50 <clust2sect>
 800885c:	4602      	mov	r2, r0
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	899b      	ldrh	r3, [r3, #12]
 8008872:	461a      	mov	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	fbb3 f0f2 	udiv	r0, r3, r2
 800887a:	fb00 f202 	mul.w	r2, r0, r2
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	18ca      	adds	r2, r1, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80088a0:	2100      	movs	r1, #0
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff fe95 	bl	80085d2 <dir_sdi>
 80088a8:	4603      	mov	r3, r0
 80088aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d12b      	bne.n	800890a <dir_alloc+0x7a>
		n = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	4619      	mov	r1, r3
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7ff faa9 	bl	8007e14 <move_window>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d11d      	bne.n	8008908 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	2be5      	cmp	r3, #229	@ 0xe5
 80088d4:	d004      	beq.n	80088e0 <dir_alloc+0x50>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d107      	bne.n	80088f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	3301      	adds	r3, #1
 80088e4:	613b      	str	r3, [r7, #16]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d102      	bne.n	80088f4 <dir_alloc+0x64>
 80088ee:	e00c      	b.n	800890a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80088f0:	2300      	movs	r3, #0
 80088f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80088f4:	2101      	movs	r1, #1
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff fef4 	bl	80086e4 <dir_next>
 80088fc:	4603      	mov	r3, r0
 80088fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0d7      	beq.n	80088b6 <dir_alloc+0x26>
 8008906:	e000      	b.n	800890a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008908:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	2b04      	cmp	r3, #4
 800890e:	d101      	bne.n	8008914 <dir_alloc+0x84>
 8008910:	2307      	movs	r3, #7
 8008912:	75fb      	strb	r3, [r7, #23]
	return res;
 8008914:	7dfb      	ldrb	r3, [r7, #23]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	331a      	adds	r3, #26
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe ffc1 	bl	80078b4 <ld_word>
 8008932:	4603      	mov	r3, r0
 8008934:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b03      	cmp	r3, #3
 800893c:	d109      	bne.n	8008952 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	3314      	adds	r3, #20
 8008942:	4618      	mov	r0, r3
 8008944:	f7fe ffb6 	bl	80078b4 <ld_word>
 8008948:	4603      	mov	r3, r0
 800894a:	041b      	lsls	r3, r3, #16
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008952:	68fb      	ldr	r3, [r7, #12]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	331a      	adds	r3, #26
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	b292      	uxth	r2, r2
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe ffd9 	bl	800792a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b03      	cmp	r3, #3
 800897e:	d109      	bne.n	8008994 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f103 0214 	add.w	r2, r3, #20
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	0c1b      	lsrs	r3, r3, #16
 800898a:	b29b      	uxth	r3, r3
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f7fe ffcb 	bl	800792a <st_word>
	}
}
 8008994:	bf00      	nop
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800899c:	b590      	push	{r4, r7, lr}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	331a      	adds	r3, #26
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe ff82 	bl	80078b4 <ld_word>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <cmp_lfn+0x1e>
 80089b6:	2300      	movs	r3, #0
 80089b8:	e059      	b.n	8008a6e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089c2:	1e5a      	subs	r2, r3, #1
 80089c4:	4613      	mov	r3, r2
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	4413      	add	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80089d0:	2301      	movs	r3, #1
 80089d2:	81fb      	strh	r3, [r7, #14]
 80089d4:	2300      	movs	r3, #0
 80089d6:	613b      	str	r3, [r7, #16]
 80089d8:	e033      	b.n	8008a42 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80089da:	4a27      	ldr	r2, [pc, #156]	@ (8008a78 <cmp_lfn+0xdc>)
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	4413      	add	r3, r2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	4413      	add	r3, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fe ff63 	bl	80078b4 <ld_word>
 80089ee:	4603      	mov	r3, r0
 80089f0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80089f2:	89fb      	ldrh	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d01a      	beq.n	8008a2e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80089fc:	d812      	bhi.n	8008a24 <cmp_lfn+0x88>
 80089fe:	89bb      	ldrh	r3, [r7, #12]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f002 f85f 	bl	800aac4 <ff_wtoupper>
 8008a06:	4603      	mov	r3, r0
 8008a08:	461c      	mov	r4, r3
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	617a      	str	r2, [r7, #20]
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f002 f853 	bl	800aac4 <ff_wtoupper>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	429c      	cmp	r4, r3
 8008a22:	d001      	beq.n	8008a28 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008a24:	2300      	movs	r3, #0
 8008a26:	e022      	b.n	8008a6e <cmp_lfn+0xd2>
			}
			wc = uc;
 8008a28:	89bb      	ldrh	r3, [r7, #12]
 8008a2a:	81fb      	strh	r3, [r7, #14]
 8008a2c:	e006      	b.n	8008a3c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008a2e:	89bb      	ldrh	r3, [r7, #12]
 8008a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d001      	beq.n	8008a3c <cmp_lfn+0xa0>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e018      	b.n	8008a6e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	613b      	str	r3, [r7, #16]
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2b0c      	cmp	r3, #12
 8008a46:	d9c8      	bls.n	80089da <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00b      	beq.n	8008a6c <cmp_lfn+0xd0>
 8008a54:	89fb      	ldrh	r3, [r7, #14]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <cmp_lfn+0xd0>
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	4413      	add	r3, r2
 8008a62:	881b      	ldrh	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <cmp_lfn+0xd0>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e000      	b.n	8008a6e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008a6c:	2301      	movs	r3, #1
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	371c      	adds	r7, #28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd90      	pop	{r4, r7, pc}
 8008a76:	bf00      	nop
 8008a78:	080111e4 	.word	0x080111e4

08008a7c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b088      	sub	sp, #32
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4611      	mov	r1, r2
 8008a88:	461a      	mov	r2, r3
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	71fb      	strb	r3, [r7, #7]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	330d      	adds	r3, #13
 8008a96:	79ba      	ldrb	r2, [r7, #6]
 8008a98:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	330b      	adds	r3, #11
 8008a9e:	220f      	movs	r2, #15
 8008aa0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	331a      	adds	r3, #26
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe ff3a 	bl	800792a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	1e5a      	subs	r2, r3, #1
 8008aba:	4613      	mov	r3, r2
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	4413      	add	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	82fb      	strh	r3, [r7, #22]
 8008aca:	2300      	movs	r3, #0
 8008acc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008ace:	8afb      	ldrh	r3, [r7, #22]
 8008ad0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d007      	beq.n	8008ae8 <put_lfn+0x6c>
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	61fa      	str	r2, [r7, #28]
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008ae8:	4a17      	ldr	r2, [pc, #92]	@ (8008b48 <put_lfn+0xcc>)
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	4413      	add	r3, r2
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	461a      	mov	r2, r3
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	4413      	add	r3, r2
 8008af6:	8afa      	ldrh	r2, [r7, #22]
 8008af8:	4611      	mov	r1, r2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe ff15 	bl	800792a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008b00:	8afb      	ldrh	r3, [r7, #22]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <put_lfn+0x90>
 8008b06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b0a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	2b0c      	cmp	r3, #12
 8008b16:	d9da      	bls.n	8008ace <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008b18:	8afb      	ldrh	r3, [r7, #22]
 8008b1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d006      	beq.n	8008b30 <put_lfn+0xb4>
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4413      	add	r3, r2
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d103      	bne.n	8008b38 <put_lfn+0xbc>
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b36:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	79fa      	ldrb	r2, [r7, #7]
 8008b3c:	701a      	strb	r2, [r3, #0]
}
 8008b3e:	bf00      	nop
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	080111e4 	.word	0x080111e4

08008b4c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08c      	sub	sp, #48	@ 0x30
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008b5a:	220b      	movs	r2, #11
 8008b5c:	68b9      	ldr	r1, [r7, #8]
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f7fe ff2a 	bl	80079b8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b05      	cmp	r3, #5
 8008b68:	d92b      	bls.n	8008bc2 <gen_numname+0x76>
		sr = seq;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008b6e:	e022      	b.n	8008bb6 <gen_numname+0x6a>
			wc = *lfn++;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	1c9a      	adds	r2, r3, #2
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b7e:	e017      	b.n	8008bb0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	005a      	lsls	r2, r3, #1
 8008b84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	4413      	add	r3, r2
 8008b8c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008b8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b90:	085b      	lsrs	r3, r3, #1
 8008b92:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <gen_numname+0x5e>
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008ba4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008ba8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	3301      	adds	r3, #1
 8008bae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	2b0f      	cmp	r3, #15
 8008bb4:	d9e4      	bls.n	8008b80 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1d8      	bne.n	8008b70 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008bc2:	2307      	movs	r3, #7
 8008bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f003 030f 	and.w	r3, r3, #15
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	3330      	adds	r3, #48	@ 0x30
 8008bd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8008bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008bda:	2b39      	cmp	r3, #57	@ 0x39
 8008bdc:	d904      	bls.n	8008be8 <gen_numname+0x9c>
 8008bde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008be2:	3307      	adds	r3, #7
 8008be4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bea:	1e5a      	subs	r2, r3, #1
 8008bec:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008bee:	3330      	adds	r3, #48	@ 0x30
 8008bf0:	443b      	add	r3, r7
 8008bf2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008bf6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	091b      	lsrs	r3, r3, #4
 8008bfe:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1df      	bne.n	8008bc6 <gen_numname+0x7a>
	ns[i] = '~';
 8008c06:	f107 0214 	add.w	r2, r7, #20
 8008c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0c:	4413      	add	r3, r2
 8008c0e:	227e      	movs	r2, #126	@ 0x7e
 8008c10:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008c12:	2300      	movs	r3, #0
 8008c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c16:	e002      	b.n	8008c1e <gen_numname+0xd2>
 8008c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d205      	bcs.n	8008c32 <gen_numname+0xe6>
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2a:	4413      	add	r3, r2
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	d1f2      	bne.n	8008c18 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c34:	2b07      	cmp	r3, #7
 8008c36:	d807      	bhi.n	8008c48 <gen_numname+0xfc>
 8008c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008c3e:	3330      	adds	r3, #48	@ 0x30
 8008c40:	443b      	add	r3, r7
 8008c42:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008c46:	e000      	b.n	8008c4a <gen_numname+0xfe>
 8008c48:	2120      	movs	r1, #32
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	460a      	mov	r2, r1
 8008c56:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5a:	2b07      	cmp	r3, #7
 8008c5c:	d9e9      	bls.n	8008c32 <gen_numname+0xe6>
}
 8008c5e:	bf00      	nop
 8008c60:	bf00      	nop
 8008c62:	3730      	adds	r7, #48	@ 0x30
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008c74:	230b      	movs	r3, #11
 8008c76:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	0852      	lsrs	r2, r2, #1
 8008c7e:	01db      	lsls	r3, r3, #7
 8008c80:	4313      	orrs	r3, r2
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	1c59      	adds	r1, r3, #1
 8008c88:	6079      	str	r1, [r7, #4]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	60bb      	str	r3, [r7, #8]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1ed      	bne.n	8008c78 <sum_sfn+0x10>
	return sum;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008cb8:	2100      	movs	r1, #0
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff fc89 	bl	80085d2 <dir_sdi>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <dir_find+0x24>
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	e0a9      	b.n	8008e22 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008cce:	23ff      	movs	r3, #255	@ 0xff
 8008cd0:	753b      	strb	r3, [r7, #20]
 8008cd2:	7d3b      	ldrb	r3, [r7, #20]
 8008cd4:	757b      	strb	r3, [r7, #21]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cdc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6938      	ldr	r0, [r7, #16]
 8008ce6:	f7ff f895 	bl	8007e14 <move_window>
 8008cea:	4603      	mov	r3, r0
 8008cec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f040 8090 	bne.w	8008e16 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008cfe:	7dbb      	ldrb	r3, [r7, #22]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d102      	bne.n	8008d0a <dir_find+0x60>
 8008d04:	2304      	movs	r3, #4
 8008d06:	75fb      	strb	r3, [r7, #23]
 8008d08:	e08a      	b.n	8008e20 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	330b      	adds	r3, #11
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d16:	73fb      	strb	r3, [r7, #15]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	7bfa      	ldrb	r2, [r7, #15]
 8008d1c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008d1e:	7dbb      	ldrb	r3, [r7, #22]
 8008d20:	2be5      	cmp	r3, #229	@ 0xe5
 8008d22:	d007      	beq.n	8008d34 <dir_find+0x8a>
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
 8008d26:	f003 0308 	and.w	r3, r3, #8
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d009      	beq.n	8008d42 <dir_find+0x98>
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	2b0f      	cmp	r3, #15
 8008d32:	d006      	beq.n	8008d42 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008d34:	23ff      	movs	r3, #255	@ 0xff
 8008d36:	757b      	strb	r3, [r7, #21]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d40:	e05e      	b.n	8008e00 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	2b0f      	cmp	r3, #15
 8008d46:	d136      	bne.n	8008db6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d154      	bne.n	8008e00 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008d56:	7dbb      	ldrb	r3, [r7, #22]
 8008d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00d      	beq.n	8008d7c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	7b5b      	ldrb	r3, [r3, #13]
 8008d66:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008d68:	7dbb      	ldrb	r3, [r7, #22]
 8008d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d6e:	75bb      	strb	r3, [r7, #22]
 8008d70:	7dbb      	ldrb	r3, [r7, #22]
 8008d72:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	695a      	ldr	r2, [r3, #20]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008d7c:	7dba      	ldrb	r2, [r7, #22]
 8008d7e:	7d7b      	ldrb	r3, [r7, #21]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d115      	bne.n	8008db0 <dir_find+0x106>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	330d      	adds	r3, #13
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	7d3a      	ldrb	r2, [r7, #20]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d10e      	bne.n	8008db0 <dir_find+0x106>
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	691a      	ldr	r2, [r3, #16]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	f7ff fdfd 	bl	800899c <cmp_lfn>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <dir_find+0x106>
 8008da8:	7d7b      	ldrb	r3, [r7, #21]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	e000      	b.n	8008db2 <dir_find+0x108>
 8008db0:	23ff      	movs	r3, #255	@ 0xff
 8008db2:	757b      	strb	r3, [r7, #21]
 8008db4:	e024      	b.n	8008e00 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008db6:	7d7b      	ldrb	r3, [r7, #21]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d109      	bne.n	8008dd0 <dir_find+0x126>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff ff51 	bl	8008c68 <sum_sfn>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	461a      	mov	r2, r3
 8008dca:	7d3b      	ldrb	r3, [r7, #20]
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d024      	beq.n	8008e1a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10a      	bne.n	8008df4 <dir_find+0x14a>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a18      	ldr	r0, [r3, #32]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3324      	adds	r3, #36	@ 0x24
 8008de6:	220b      	movs	r2, #11
 8008de8:	4619      	mov	r1, r3
 8008dea:	f7fe fe21 	bl	8007a30 <mem_cmp>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d014      	beq.n	8008e1e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008df4:	23ff      	movs	r3, #255	@ 0xff
 8008df6:	757b      	strb	r3, [r7, #21]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfe:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008e00:	2100      	movs	r1, #0
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff fc6e 	bl	80086e4 <dir_next>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f43f af65 	beq.w	8008cde <dir_find+0x34>
 8008e14:	e004      	b.n	8008e20 <dir_find+0x176>
		if (res != FR_OK) break;
 8008e16:	bf00      	nop
 8008e18:	e002      	b.n	8008e20 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008e1a:	bf00      	nop
 8008e1c:	e000      	b.n	8008e20 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008e1e:	bf00      	nop

	return res;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08c      	sub	sp, #48	@ 0x30
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008e40:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <dir_register+0x20>
 8008e48:	2306      	movs	r3, #6
 8008e4a:	e0e0      	b.n	800900e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e50:	e002      	b.n	8008e58 <dir_register+0x2c>
 8008e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e54:	3301      	adds	r3, #1
 8008e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	691a      	ldr	r2, [r3, #16]
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	4413      	add	r3, r2
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1f4      	bne.n	8008e52 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008e6e:	f107 030c 	add.w	r3, r7, #12
 8008e72:	220c      	movs	r2, #12
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe fd9f 	bl	80079b8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d032      	beq.n	8008eea <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2240      	movs	r2, #64	@ 0x40
 8008e88:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e90:	e016      	b.n	8008ec0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	f107 010c 	add.w	r1, r7, #12
 8008ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea2:	f7ff fe53 	bl	8008b4c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff feff 	bl	8008caa <dir_find>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d106      	bne.n	8008ec8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec2:	2b63      	cmp	r3, #99	@ 0x63
 8008ec4:	d9e5      	bls.n	8008e92 <dir_register+0x66>
 8008ec6:	e000      	b.n	8008eca <dir_register+0x9e>
			if (res != FR_OK) break;
 8008ec8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ecc:	2b64      	cmp	r3, #100	@ 0x64
 8008ece:	d101      	bne.n	8008ed4 <dir_register+0xa8>
 8008ed0:	2307      	movs	r3, #7
 8008ed2:	e09c      	b.n	800900e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d002      	beq.n	8008ee2 <dir_register+0xb6>
 8008edc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ee0:	e095      	b.n	800900e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008ee2:	7dfa      	ldrb	r2, [r7, #23]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <dir_register+0xd8>
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	330c      	adds	r3, #12
 8008ef8:	4a47      	ldr	r2, [pc, #284]	@ (8009018 <dir_register+0x1ec>)
 8008efa:	fba2 2303 	umull	r2, r3, r2, r3
 8008efe:	089b      	lsrs	r3, r3, #2
 8008f00:	3301      	adds	r3, #1
 8008f02:	e000      	b.n	8008f06 <dir_register+0xda>
 8008f04:	2301      	movs	r3, #1
 8008f06:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008f08:	6a39      	ldr	r1, [r7, #32]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fcc0 	bl	8008890 <dir_alloc>
 8008f10:	4603      	mov	r3, r0
 8008f12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008f16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d148      	bne.n	8008fb0 <dir_register+0x184>
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	623b      	str	r3, [r7, #32]
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d042      	beq.n	8008fb0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	695a      	ldr	r2, [r3, #20]
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	015b      	lsls	r3, r3, #5
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff fb4b 	bl	80085d2 <dir_sdi>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008f42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d132      	bne.n	8008fb0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3324      	adds	r3, #36	@ 0x24
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff fe8a 	bl	8008c68 <sum_sfn>
 8008f54:	4603      	mov	r3, r0
 8008f56:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	69f8      	ldr	r0, [r7, #28]
 8008f60:	f7fe ff58 	bl	8007e14 <move_window>
 8008f64:	4603      	mov	r3, r0
 8008f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d11d      	bne.n	8008fae <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	6918      	ldr	r0, [r3, #16]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a19      	ldr	r1, [r3, #32]
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	7efb      	ldrb	r3, [r7, #27]
 8008f80:	f7ff fd7c 	bl	8008a7c <put_lfn>
				fs->wflag = 1;
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	2201      	movs	r2, #1
 8008f88:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff fba9 	bl	80086e4 <dir_next>
 8008f92:	4603      	mov	r3, r0
 8008f94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008f98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d107      	bne.n	8008fb0 <dir_register+0x184>
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	623b      	str	r3, [r7, #32]
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1d5      	bne.n	8008f58 <dir_register+0x12c>
 8008fac:	e000      	b.n	8008fb0 <dir_register+0x184>
				if (res != FR_OK) break;
 8008fae:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d128      	bne.n	800900a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	69f8      	ldr	r0, [r7, #28]
 8008fc0:	f7fe ff28 	bl	8007e14 <move_window>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d11b      	bne.n	800900a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fe fd0d 	bl	80079fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a18      	ldr	r0, [r3, #32]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3324      	adds	r3, #36	@ 0x24
 8008fe8:	220b      	movs	r2, #11
 8008fea:	4619      	mov	r1, r3
 8008fec:	f7fe fce4 	bl	80079b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	330c      	adds	r3, #12
 8008ffc:	f002 0218 	and.w	r2, r2, #24
 8009000:	b2d2      	uxtb	r2, r2
 8009002:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	2201      	movs	r2, #1
 8009008:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800900a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800900e:	4618      	mov	r0, r3
 8009010:	3730      	adds	r7, #48	@ 0x30
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	4ec4ec4f 	.word	0x4ec4ec4f

0800901c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08a      	sub	sp, #40	@ 0x28
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	613b      	str	r3, [r7, #16]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	2300      	movs	r3, #0
 8009036:	617b      	str	r3, [r7, #20]
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	61ba      	str	r2, [r7, #24]
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	4413      	add	r3, r2
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800904a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800904c:	2b1f      	cmp	r3, #31
 800904e:	d940      	bls.n	80090d2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009052:	2b2f      	cmp	r3, #47	@ 0x2f
 8009054:	d006      	beq.n	8009064 <create_name+0x48>
 8009056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009058:	2b5c      	cmp	r3, #92	@ 0x5c
 800905a:	d110      	bne.n	800907e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800905c:	e002      	b.n	8009064 <create_name+0x48>
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	3301      	adds	r3, #1
 8009062:	61bb      	str	r3, [r7, #24]
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	4413      	add	r3, r2
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b2f      	cmp	r3, #47	@ 0x2f
 800906e:	d0f6      	beq.n	800905e <create_name+0x42>
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	4413      	add	r3, r2
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b5c      	cmp	r3, #92	@ 0x5c
 800907a:	d0f0      	beq.n	800905e <create_name+0x42>
			break;
 800907c:	e02a      	b.n	80090d4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2bfe      	cmp	r3, #254	@ 0xfe
 8009082:	d901      	bls.n	8009088 <create_name+0x6c>
 8009084:	2306      	movs	r3, #6
 8009086:	e17d      	b.n	8009384 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009088:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800908a:	b2db      	uxtb	r3, r3
 800908c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800908e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009090:	2101      	movs	r1, #1
 8009092:	4618      	mov	r0, r3
 8009094:	f001 fcda 	bl	800aa4c <ff_convert>
 8009098:	4603      	mov	r3, r0
 800909a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800909c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <create_name+0x8a>
 80090a2:	2306      	movs	r3, #6
 80090a4:	e16e      	b.n	8009384 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80090a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80090aa:	d809      	bhi.n	80090c0 <create_name+0xa4>
 80090ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090ae:	4619      	mov	r1, r3
 80090b0:	488d      	ldr	r0, [pc, #564]	@ (80092e8 <create_name+0x2cc>)
 80090b2:	f7fe fce4 	bl	8007a7e <chk_chr>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <create_name+0xa4>
 80090bc:	2306      	movs	r3, #6
 80090be:	e161      	b.n	8009384 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	617a      	str	r2, [r7, #20]
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	4413      	add	r3, r2
 80090cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80090ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80090d0:	e7b4      	b.n	800903c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80090d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	441a      	add	r2, r3
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80090de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090e0:	2b1f      	cmp	r3, #31
 80090e2:	d801      	bhi.n	80090e8 <create_name+0xcc>
 80090e4:	2304      	movs	r3, #4
 80090e6:	e000      	b.n	80090ea <create_name+0xce>
 80090e8:	2300      	movs	r3, #0
 80090ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80090ee:	e011      	b.n	8009114 <create_name+0xf8>
		w = lfn[di - 1];
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80090f6:	3b01      	subs	r3, #1
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8009102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009104:	2b20      	cmp	r3, #32
 8009106:	d002      	beq.n	800910e <create_name+0xf2>
 8009108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800910a:	2b2e      	cmp	r3, #46	@ 0x2e
 800910c:	d106      	bne.n	800911c <create_name+0x100>
		di--;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	3b01      	subs	r3, #1
 8009112:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1ea      	bne.n	80090f0 <create_name+0xd4>
 800911a:	e000      	b.n	800911e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800911c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4413      	add	r3, r2
 8009126:	2200      	movs	r2, #0
 8009128:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <create_name+0x118>
 8009130:	2306      	movs	r3, #6
 8009132:	e127      	b.n	8009384 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3324      	adds	r3, #36	@ 0x24
 8009138:	220b      	movs	r2, #11
 800913a:	2120      	movs	r1, #32
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe fc5c 	bl	80079fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009142:	2300      	movs	r3, #0
 8009144:	61bb      	str	r3, [r7, #24]
 8009146:	e002      	b.n	800914e <create_name+0x132>
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	3301      	adds	r3, #1
 800914c:	61bb      	str	r3, [r7, #24]
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	4413      	add	r3, r2
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	2b20      	cmp	r3, #32
 800915a:	d0f5      	beq.n	8009148 <create_name+0x12c>
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	2b2e      	cmp	r3, #46	@ 0x2e
 8009168:	d0ee      	beq.n	8009148 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <create_name+0x168>
 8009170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009174:	f043 0303 	orr.w	r3, r3, #3
 8009178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800917c:	e002      	b.n	8009184 <create_name+0x168>
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	3b01      	subs	r3, #1
 8009182:	617b      	str	r3, [r7, #20]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <create_name+0x182>
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009190:	3b01      	subs	r3, #1
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	2b2e      	cmp	r3, #46	@ 0x2e
 800919c:	d1ef      	bne.n	800917e <create_name+0x162>

	i = b = 0; ni = 8;
 800919e:	2300      	movs	r3, #0
 80091a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80091a4:	2300      	movs	r3, #0
 80091a6:	623b      	str	r3, [r7, #32]
 80091a8:	2308      	movs	r3, #8
 80091aa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	1c5a      	adds	r2, r3, #1
 80091b0:	61ba      	str	r2, [r7, #24]
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4413      	add	r3, r2
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80091bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8090 	beq.w	80092e4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80091c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	d006      	beq.n	80091d8 <create_name+0x1bc>
 80091ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80091ce:	d10a      	bne.n	80091e6 <create_name+0x1ca>
 80091d0:	69ba      	ldr	r2, [r7, #24]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d006      	beq.n	80091e6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80091d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091dc:	f043 0303 	orr.w	r3, r3, #3
 80091e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80091e4:	e07d      	b.n	80092e2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80091e6:	6a3a      	ldr	r2, [r7, #32]
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d203      	bcs.n	80091f6 <create_name+0x1da>
 80091ee:	69ba      	ldr	r2, [r7, #24]
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d123      	bne.n	800923e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	2b0b      	cmp	r3, #11
 80091fa:	d106      	bne.n	800920a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80091fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009200:	f043 0303 	orr.w	r3, r3, #3
 8009204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009208:	e075      	b.n	80092f6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	429a      	cmp	r2, r3
 8009210:	d005      	beq.n	800921e <create_name+0x202>
 8009212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009216:	f043 0303 	orr.w	r3, r3, #3
 800921a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800921e:	69ba      	ldr	r2, [r7, #24]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	429a      	cmp	r2, r3
 8009224:	d866      	bhi.n	80092f4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	2308      	movs	r3, #8
 800922c:	623b      	str	r3, [r7, #32]
 800922e:	230b      	movs	r3, #11
 8009230:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009232:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800923c:	e051      	b.n	80092e2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800923e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009240:	2b7f      	cmp	r3, #127	@ 0x7f
 8009242:	d914      	bls.n	800926e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009244:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009246:	2100      	movs	r1, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f001 fbff 	bl	800aa4c <ff_convert>
 800924e:	4603      	mov	r3, r0
 8009250:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009252:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	d004      	beq.n	8009262 <create_name+0x246>
 8009258:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800925a:	3b80      	subs	r3, #128	@ 0x80
 800925c:	4a23      	ldr	r2, [pc, #140]	@ (80092ec <create_name+0x2d0>)
 800925e:	5cd3      	ldrb	r3, [r2, r3]
 8009260:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009262:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009266:	f043 0302 	orr.w	r3, r3, #2
 800926a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800926e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009270:	2b00      	cmp	r3, #0
 8009272:	d007      	beq.n	8009284 <create_name+0x268>
 8009274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009276:	4619      	mov	r1, r3
 8009278:	481d      	ldr	r0, [pc, #116]	@ (80092f0 <create_name+0x2d4>)
 800927a:	f7fe fc00 	bl	8007a7e <chk_chr>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d008      	beq.n	8009296 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009284:	235f      	movs	r3, #95	@ 0x5f
 8009286:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800928c:	f043 0303 	orr.w	r3, r3, #3
 8009290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009294:	e01b      	b.n	80092ce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009296:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009298:	2b40      	cmp	r3, #64	@ 0x40
 800929a:	d909      	bls.n	80092b0 <create_name+0x294>
 800929c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800929e:	2b5a      	cmp	r3, #90	@ 0x5a
 80092a0:	d806      	bhi.n	80092b0 <create_name+0x294>
					b |= 2;
 80092a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092a6:	f043 0302 	orr.w	r3, r3, #2
 80092aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80092ae:	e00e      	b.n	80092ce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80092b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092b2:	2b60      	cmp	r3, #96	@ 0x60
 80092b4:	d90b      	bls.n	80092ce <create_name+0x2b2>
 80092b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092b8:	2b7a      	cmp	r3, #122	@ 0x7a
 80092ba:	d808      	bhi.n	80092ce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80092bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092c0:	f043 0301 	orr.w	r3, r3, #1
 80092c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80092c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092ca:	3b20      	subs	r3, #32
 80092cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	623a      	str	r2, [r7, #32]
 80092d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80092d6:	b2d1      	uxtb	r1, r2
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	4413      	add	r3, r2
 80092dc:	460a      	mov	r2, r1
 80092de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80092e2:	e763      	b.n	80091ac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80092e4:	bf00      	nop
 80092e6:	e006      	b.n	80092f6 <create_name+0x2da>
 80092e8:	08011040 	.word	0x08011040
 80092ec:	08011164 	.word	0x08011164
 80092f0:	0801104c 	.word	0x0801104c
			if (si > di) break;			/* No extension */
 80092f4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80092fc:	2be5      	cmp	r3, #229	@ 0xe5
 80092fe:	d103      	bne.n	8009308 <create_name+0x2ec>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2205      	movs	r2, #5
 8009304:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	2b08      	cmp	r3, #8
 800930c:	d104      	bne.n	8009318 <create_name+0x2fc>
 800930e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009318:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800931c:	f003 030c 	and.w	r3, r3, #12
 8009320:	2b0c      	cmp	r3, #12
 8009322:	d005      	beq.n	8009330 <create_name+0x314>
 8009324:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	2b03      	cmp	r3, #3
 800932e:	d105      	bne.n	800933c <create_name+0x320>
 8009330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009334:	f043 0302 	orr.w	r3, r3, #2
 8009338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800933c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d117      	bne.n	8009378 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009348:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800934c:	f003 0303 	and.w	r3, r3, #3
 8009350:	2b01      	cmp	r3, #1
 8009352:	d105      	bne.n	8009360 <create_name+0x344>
 8009354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009358:	f043 0310 	orr.w	r3, r3, #16
 800935c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009360:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009364:	f003 030c 	and.w	r3, r3, #12
 8009368:	2b04      	cmp	r3, #4
 800936a:	d105      	bne.n	8009378 <create_name+0x35c>
 800936c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009370:	f043 0308 	orr.w	r3, r3, #8
 8009374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800937e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8009382:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009384:	4618      	mov	r0, r3
 8009386:	3728      	adds	r7, #40	@ 0x28
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80093a0:	e002      	b.n	80093a8 <follow_path+0x1c>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	3301      	adds	r3, #1
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80093ae:	d0f8      	beq.n	80093a2 <follow_path+0x16>
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80093b6:	d0f4      	beq.n	80093a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2200      	movs	r2, #0
 80093bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b1f      	cmp	r3, #31
 80093c4:	d80a      	bhi.n	80093dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2280      	movs	r2, #128	@ 0x80
 80093ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80093ce:	2100      	movs	r1, #0
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7ff f8fe 	bl	80085d2 <dir_sdi>
 80093d6:	4603      	mov	r3, r0
 80093d8:	75fb      	strb	r3, [r7, #23]
 80093da:	e048      	b.n	800946e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80093dc:	463b      	mov	r3, r7
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff fe1b 	bl	800901c <create_name>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d139      	bne.n	8009464 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7ff fc5a 	bl	8008caa <dir_find>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009400:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00a      	beq.n	800941e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	2b04      	cmp	r3, #4
 800940c:	d12c      	bne.n	8009468 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800940e:	7afb      	ldrb	r3, [r7, #11]
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	d127      	bne.n	8009468 <follow_path+0xdc>
 8009418:	2305      	movs	r3, #5
 800941a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800941c:	e024      	b.n	8009468 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b00      	cmp	r3, #0
 8009426:	d121      	bne.n	800946c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	799b      	ldrb	r3, [r3, #6]
 800942c:	f003 0310 	and.w	r3, r3, #16
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009434:	2305      	movs	r3, #5
 8009436:	75fb      	strb	r3, [r7, #23]
 8009438:	e019      	b.n	800946e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	8992      	ldrh	r2, [r2, #12]
 8009448:	fbb3 f0f2 	udiv	r0, r3, r2
 800944c:	fb00 f202 	mul.w	r2, r0, r2
 8009450:	1a9b      	subs	r3, r3, r2
 8009452:	440b      	add	r3, r1
 8009454:	4619      	mov	r1, r3
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7ff fa61 	bl	800891e <ld_clust>
 800945c:	4602      	mov	r2, r0
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009462:	e7bb      	b.n	80093dc <follow_path+0x50>
			if (res != FR_OK) break;
 8009464:	bf00      	nop
 8009466:	e002      	b.n	800946e <follow_path+0xe2>
				break;
 8009468:	bf00      	nop
 800946a:	e000      	b.n	800946e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800946c:	bf00      	nop
			}
		}
	}

	return res;
 800946e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3718      	adds	r7, #24
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009480:	f04f 33ff 	mov.w	r3, #4294967295
 8009484:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d031      	beq.n	80094f2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	617b      	str	r3, [r7, #20]
 8009494:	e002      	b.n	800949c <get_ldnumber+0x24>
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	3301      	adds	r3, #1
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	2b1f      	cmp	r3, #31
 80094a2:	d903      	bls.n	80094ac <get_ldnumber+0x34>
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80094aa:	d1f4      	bne.n	8009496 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80094b2:	d11c      	bne.n	80094ee <get_ldnumber+0x76>
			tp = *path;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	60fa      	str	r2, [r7, #12]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	3b30      	subs	r3, #48	@ 0x30
 80094c4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2b09      	cmp	r3, #9
 80094ca:	d80e      	bhi.n	80094ea <get_ldnumber+0x72>
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d10a      	bne.n	80094ea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d107      	bne.n	80094ea <get_ldnumber+0x72>
					vol = (int)i;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	3301      	adds	r3, #1
 80094e2:	617b      	str	r3, [r7, #20]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	e002      	b.n	80094f4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80094ee:	2300      	movs	r3, #0
 80094f0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80094f2:	693b      	ldr	r3, [r7, #16]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	70da      	strb	r2, [r3, #3]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f04f 32ff 	mov.w	r2, #4294967295
 8009516:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7fe fc7a 	bl	8007e14 <move_window>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <check_fs+0x2a>
 8009526:	2304      	movs	r3, #4
 8009528:	e038      	b.n	800959c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3338      	adds	r3, #56	@ 0x38
 800952e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe f9be 	bl	80078b4 <ld_word>
 8009538:	4603      	mov	r3, r0
 800953a:	461a      	mov	r2, r3
 800953c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009540:	429a      	cmp	r2, r3
 8009542:	d001      	beq.n	8009548 <check_fs+0x48>
 8009544:	2303      	movs	r3, #3
 8009546:	e029      	b.n	800959c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800954e:	2be9      	cmp	r3, #233	@ 0xe9
 8009550:	d009      	beq.n	8009566 <check_fs+0x66>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009558:	2beb      	cmp	r3, #235	@ 0xeb
 800955a:	d11e      	bne.n	800959a <check_fs+0x9a>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009562:	2b90      	cmp	r3, #144	@ 0x90
 8009564:	d119      	bne.n	800959a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3338      	adds	r3, #56	@ 0x38
 800956a:	3336      	adds	r3, #54	@ 0x36
 800956c:	4618      	mov	r0, r3
 800956e:	f7fe f9b9 	bl	80078e4 <ld_dword>
 8009572:	4603      	mov	r3, r0
 8009574:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009578:	4a0a      	ldr	r2, [pc, #40]	@ (80095a4 <check_fs+0xa4>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d101      	bne.n	8009582 <check_fs+0x82>
 800957e:	2300      	movs	r3, #0
 8009580:	e00c      	b.n	800959c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3338      	adds	r3, #56	@ 0x38
 8009586:	3352      	adds	r3, #82	@ 0x52
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe f9ab 	bl	80078e4 <ld_dword>
 800958e:	4603      	mov	r3, r0
 8009590:	4a05      	ldr	r2, [pc, #20]	@ (80095a8 <check_fs+0xa8>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d101      	bne.n	800959a <check_fs+0x9a>
 8009596:	2300      	movs	r3, #0
 8009598:	e000      	b.n	800959c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800959a:	2302      	movs	r3, #2
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	00544146 	.word	0x00544146
 80095a8:	33544146 	.word	0x33544146

080095ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b096      	sub	sp, #88	@ 0x58
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	4613      	mov	r3, r2
 80095b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff ff59 	bl	8009478 <get_ldnumber>
 80095c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80095c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	da01      	bge.n	80095d2 <find_volume+0x26>
 80095ce:	230b      	movs	r3, #11
 80095d0:	e265      	b.n	8009a9e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80095d2:	4a9f      	ldr	r2, [pc, #636]	@ (8009850 <find_volume+0x2a4>)
 80095d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095da:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <find_volume+0x3a>
 80095e2:	230c      	movs	r3, #12
 80095e4:	e25b      	b.n	8009a9e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	f023 0301 	bic.w	r3, r3, #1
 80095f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80095f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d01a      	beq.n	8009632 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80095fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fe:	785b      	ldrb	r3, [r3, #1]
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe f8b7 	bl	8007774 <disk_status>
 8009606:	4603      	mov	r3, r0
 8009608:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800960c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10c      	bne.n	8009632 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d007      	beq.n	800962e <find_volume+0x82>
 800961e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009622:	f003 0304 	and.w	r3, r3, #4
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800962a:	230a      	movs	r3, #10
 800962c:	e237      	b.n	8009a9e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800962e:	2300      	movs	r3, #0
 8009630:	e235      	b.n	8009a9e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009634:	2200      	movs	r2, #0
 8009636:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800963a:	b2da      	uxtb	r2, r3
 800963c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	4618      	mov	r0, r3
 8009646:	f7fe f8af 	bl	80077a8 <disk_initialize>
 800964a:	4603      	mov	r3, r0
 800964c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009650:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800965c:	2303      	movs	r3, #3
 800965e:	e21e      	b.n	8009a9e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009660:	79fb      	ldrb	r3, [r7, #7]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d007      	beq.n	8009676 <find_volume+0xca>
 8009666:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800966a:	f003 0304 	and.w	r3, r3, #4
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009672:	230a      	movs	r3, #10
 8009674:	e213      	b.n	8009a9e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009678:	7858      	ldrb	r0, [r3, #1]
 800967a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967c:	330c      	adds	r3, #12
 800967e:	461a      	mov	r2, r3
 8009680:	2102      	movs	r1, #2
 8009682:	f7fe f8f9 	bl	8007878 <disk_ioctl>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <find_volume+0xe4>
 800968c:	2301      	movs	r3, #1
 800968e:	e206      	b.n	8009a9e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	899b      	ldrh	r3, [r3, #12]
 8009694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009698:	d80d      	bhi.n	80096b6 <find_volume+0x10a>
 800969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969c:	899b      	ldrh	r3, [r3, #12]
 800969e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096a2:	d308      	bcc.n	80096b6 <find_volume+0x10a>
 80096a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a6:	899b      	ldrh	r3, [r3, #12]
 80096a8:	461a      	mov	r2, r3
 80096aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ac:	899b      	ldrh	r3, [r3, #12]
 80096ae:	3b01      	subs	r3, #1
 80096b0:	4013      	ands	r3, r2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <find_volume+0x10e>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e1f1      	b.n	8009a9e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80096be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096c2:	f7ff ff1d 	bl	8009500 <check_fs>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80096cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d149      	bne.n	8009768 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80096d4:	2300      	movs	r3, #0
 80096d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80096d8:	e01e      	b.n	8009718 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80096da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096dc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80096e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096e2:	011b      	lsls	r3, r3, #4
 80096e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80096e8:	4413      	add	r3, r2
 80096ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80096ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ee:	3304      	adds	r3, #4
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d006      	beq.n	8009704 <find_volume+0x158>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f8:	3308      	adds	r3, #8
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe f8f2 	bl	80078e4 <ld_dword>
 8009700:	4602      	mov	r2, r0
 8009702:	e000      	b.n	8009706 <find_volume+0x15a>
 8009704:	2200      	movs	r2, #0
 8009706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	3358      	adds	r3, #88	@ 0x58
 800970c:	443b      	add	r3, r7
 800970e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009714:	3301      	adds	r3, #1
 8009716:	643b      	str	r3, [r7, #64]	@ 0x40
 8009718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800971a:	2b03      	cmp	r3, #3
 800971c:	d9dd      	bls.n	80096da <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800971e:	2300      	movs	r3, #0
 8009720:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009724:	2b00      	cmp	r3, #0
 8009726:	d002      	beq.n	800972e <find_volume+0x182>
 8009728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800972a:	3b01      	subs	r3, #1
 800972c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800972e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	3358      	adds	r3, #88	@ 0x58
 8009734:	443b      	add	r3, r7
 8009736:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800973a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800973c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <find_volume+0x1a2>
 8009742:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009744:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009746:	f7ff fedb 	bl	8009500 <check_fs>
 800974a:	4603      	mov	r3, r0
 800974c:	e000      	b.n	8009750 <find_volume+0x1a4>
 800974e:	2303      	movs	r3, #3
 8009750:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009754:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009758:	2b01      	cmp	r3, #1
 800975a:	d905      	bls.n	8009768 <find_volume+0x1bc>
 800975c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800975e:	3301      	adds	r3, #1
 8009760:	643b      	str	r3, [r7, #64]	@ 0x40
 8009762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009764:	2b03      	cmp	r3, #3
 8009766:	d9e2      	bls.n	800972e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009768:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800976c:	2b04      	cmp	r3, #4
 800976e:	d101      	bne.n	8009774 <find_volume+0x1c8>
 8009770:	2301      	movs	r3, #1
 8009772:	e194      	b.n	8009a9e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009774:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009778:	2b01      	cmp	r3, #1
 800977a:	d901      	bls.n	8009780 <find_volume+0x1d4>
 800977c:	230d      	movs	r3, #13
 800977e:	e18e      	b.n	8009a9e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009782:	3338      	adds	r3, #56	@ 0x38
 8009784:	330b      	adds	r3, #11
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe f894 	bl	80078b4 <ld_word>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009792:	899b      	ldrh	r3, [r3, #12]
 8009794:	429a      	cmp	r2, r3
 8009796:	d001      	beq.n	800979c <find_volume+0x1f0>
 8009798:	230d      	movs	r3, #13
 800979a:	e180      	b.n	8009a9e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800979c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979e:	3338      	adds	r3, #56	@ 0x38
 80097a0:	3316      	adds	r3, #22
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe f886 	bl	80078b4 <ld_word>
 80097a8:	4603      	mov	r3, r0
 80097aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80097ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d106      	bne.n	80097c0 <find_volume+0x214>
 80097b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b4:	3338      	adds	r3, #56	@ 0x38
 80097b6:	3324      	adds	r3, #36	@ 0x24
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe f893 	bl	80078e4 <ld_dword>
 80097be:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80097c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097c4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80097c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80097cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80097d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d2:	789b      	ldrb	r3, [r3, #2]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d005      	beq.n	80097e4 <find_volume+0x238>
 80097d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097da:	789b      	ldrb	r3, [r3, #2]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d001      	beq.n	80097e4 <find_volume+0x238>
 80097e0:	230d      	movs	r3, #13
 80097e2:	e15c      	b.n	8009a9e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80097e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e6:	789b      	ldrb	r3, [r3, #2]
 80097e8:	461a      	mov	r2, r3
 80097ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ec:	fb02 f303 	mul.w	r3, r2, r3
 80097f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80097f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097f8:	461a      	mov	r2, r3
 80097fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80097fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009800:	895b      	ldrh	r3, [r3, #10]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d008      	beq.n	8009818 <find_volume+0x26c>
 8009806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009808:	895b      	ldrh	r3, [r3, #10]
 800980a:	461a      	mov	r2, r3
 800980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980e:	895b      	ldrh	r3, [r3, #10]
 8009810:	3b01      	subs	r3, #1
 8009812:	4013      	ands	r3, r2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <find_volume+0x270>
 8009818:	230d      	movs	r3, #13
 800981a:	e140      	b.n	8009a9e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800981c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981e:	3338      	adds	r3, #56	@ 0x38
 8009820:	3311      	adds	r3, #17
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe f846 	bl	80078b4 <ld_word>
 8009828:	4603      	mov	r3, r0
 800982a:	461a      	mov	r2, r3
 800982c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009832:	891b      	ldrh	r3, [r3, #8]
 8009834:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009836:	8992      	ldrh	r2, [r2, #12]
 8009838:	0952      	lsrs	r2, r2, #5
 800983a:	b292      	uxth	r2, r2
 800983c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009840:	fb01 f202 	mul.w	r2, r1, r2
 8009844:	1a9b      	subs	r3, r3, r2
 8009846:	b29b      	uxth	r3, r3
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <find_volume+0x2a8>
 800984c:	230d      	movs	r3, #13
 800984e:	e126      	b.n	8009a9e <find_volume+0x4f2>
 8009850:	20000b60 	.word	0x20000b60

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009856:	3338      	adds	r3, #56	@ 0x38
 8009858:	3313      	adds	r3, #19
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe f82a 	bl	80078b4 <ld_word>
 8009860:	4603      	mov	r3, r0
 8009862:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <find_volume+0x2cc>
 800986a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986c:	3338      	adds	r3, #56	@ 0x38
 800986e:	3320      	adds	r3, #32
 8009870:	4618      	mov	r0, r3
 8009872:	f7fe f837 	bl	80078e4 <ld_dword>
 8009876:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987a:	3338      	adds	r3, #56	@ 0x38
 800987c:	330e      	adds	r3, #14
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe f818 	bl	80078b4 <ld_word>
 8009884:	4603      	mov	r3, r0
 8009886:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009888:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <find_volume+0x2e6>
 800988e:	230d      	movs	r3, #13
 8009890:	e105      	b.n	8009a9e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009892:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009896:	4413      	add	r3, r2
 8009898:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800989a:	8911      	ldrh	r1, [r2, #8]
 800989c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800989e:	8992      	ldrh	r2, [r2, #12]
 80098a0:	0952      	lsrs	r2, r2, #5
 80098a2:	b292      	uxth	r2, r2
 80098a4:	fbb1 f2f2 	udiv	r2, r1, r2
 80098a8:	b292      	uxth	r2, r2
 80098aa:	4413      	add	r3, r2
 80098ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80098ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d201      	bcs.n	80098ba <find_volume+0x30e>
 80098b6:	230d      	movs	r3, #13
 80098b8:	e0f1      	b.n	8009a9e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80098ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098c2:	8952      	ldrh	r2, [r2, #10]
 80098c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80098c8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80098ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <find_volume+0x328>
 80098d0:	230d      	movs	r3, #13
 80098d2:	e0e4      	b.n	8009a9e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80098d4:	2303      	movs	r3, #3
 80098d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80098da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098dc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d802      	bhi.n	80098ea <find_volume+0x33e>
 80098e4:	2302      	movs	r3, #2
 80098e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80098ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ec:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d802      	bhi.n	80098fa <find_volume+0x34e>
 80098f4:	2301      	movs	r3, #1
 80098f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80098fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fc:	1c9a      	adds	r2, r3, #2
 80098fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009900:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009904:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009906:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009908:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800990a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800990c:	441a      	add	r2, r3
 800990e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009910:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009912:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009916:	441a      	add	r2, r3
 8009918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800991c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009920:	2b03      	cmp	r3, #3
 8009922:	d11e      	bne.n	8009962 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009926:	3338      	adds	r3, #56	@ 0x38
 8009928:	332a      	adds	r3, #42	@ 0x2a
 800992a:	4618      	mov	r0, r3
 800992c:	f7fd ffc2 	bl	80078b4 <ld_word>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d001      	beq.n	800993a <find_volume+0x38e>
 8009936:	230d      	movs	r3, #13
 8009938:	e0b1      	b.n	8009a9e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800993a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993c:	891b      	ldrh	r3, [r3, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <find_volume+0x39a>
 8009942:	230d      	movs	r3, #13
 8009944:	e0ab      	b.n	8009a9e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009948:	3338      	adds	r3, #56	@ 0x38
 800994a:	332c      	adds	r3, #44	@ 0x2c
 800994c:	4618      	mov	r0, r3
 800994e:	f7fd ffc9 	bl	80078e4 <ld_dword>
 8009952:	4602      	mov	r2, r0
 8009954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009956:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009960:	e01f      	b.n	80099a2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009964:	891b      	ldrh	r3, [r3, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <find_volume+0x3c2>
 800996a:	230d      	movs	r3, #13
 800996c:	e097      	b.n	8009a9e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800996e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009974:	441a      	add	r2, r3
 8009976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009978:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800997a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800997e:	2b02      	cmp	r3, #2
 8009980:	d103      	bne.n	800998a <find_volume+0x3de>
 8009982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	e00a      	b.n	80099a0 <find_volume+0x3f4>
 800998a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998c:	69da      	ldr	r2, [r3, #28]
 800998e:	4613      	mov	r3, r2
 8009990:	005b      	lsls	r3, r3, #1
 8009992:	4413      	add	r3, r2
 8009994:	085a      	lsrs	r2, r3, #1
 8009996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009998:	69db      	ldr	r3, [r3, #28]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80099a0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80099a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a4:	6a1a      	ldr	r2, [r3, #32]
 80099a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a8:	899b      	ldrh	r3, [r3, #12]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ae:	440b      	add	r3, r1
 80099b0:	3b01      	subs	r3, #1
 80099b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80099b4:	8989      	ldrh	r1, [r1, #12]
 80099b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d201      	bcs.n	80099c2 <find_volume+0x416>
 80099be:	230d      	movs	r3, #13
 80099c0:	e06d      	b.n	8009a9e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80099c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c4:	f04f 32ff 	mov.w	r2, #4294967295
 80099c8:	619a      	str	r2, [r3, #24]
 80099ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099cc:	699a      	ldr	r2, [r3, #24]
 80099ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80099d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d4:	2280      	movs	r2, #128	@ 0x80
 80099d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80099d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d149      	bne.n	8009a74 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80099e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e2:	3338      	adds	r3, #56	@ 0x38
 80099e4:	3330      	adds	r3, #48	@ 0x30
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fd ff64 	bl	80078b4 <ld_word>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d140      	bne.n	8009a74 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80099f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099f4:	3301      	adds	r3, #1
 80099f6:	4619      	mov	r1, r3
 80099f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80099fa:	f7fe fa0b 	bl	8007e14 <move_window>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d137      	bne.n	8009a74 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a06:	2200      	movs	r2, #0
 8009a08:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0c:	3338      	adds	r3, #56	@ 0x38
 8009a0e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fd ff4e 	bl	80078b4 <ld_word>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d127      	bne.n	8009a74 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a26:	3338      	adds	r3, #56	@ 0x38
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fd ff5b 	bl	80078e4 <ld_dword>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	4a1d      	ldr	r2, [pc, #116]	@ (8009aa8 <find_volume+0x4fc>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d11e      	bne.n	8009a74 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a38:	3338      	adds	r3, #56	@ 0x38
 8009a3a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fd ff50 	bl	80078e4 <ld_dword>
 8009a44:	4603      	mov	r3, r0
 8009a46:	4a19      	ldr	r2, [pc, #100]	@ (8009aac <find_volume+0x500>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d113      	bne.n	8009a74 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4e:	3338      	adds	r3, #56	@ 0x38
 8009a50:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fd ff45 	bl	80078e4 <ld_dword>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a62:	3338      	adds	r3, #56	@ 0x38
 8009a64:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fd ff3b 	bl	80078e4 <ld_dword>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a72:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a76:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009a7a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ab0 <find_volume+0x504>)
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	3301      	adds	r3, #1
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab0 <find_volume+0x504>)
 8009a86:	801a      	strh	r2, [r3, #0]
 8009a88:	4b09      	ldr	r3, [pc, #36]	@ (8009ab0 <find_volume+0x504>)
 8009a8a:	881a      	ldrh	r2, [r3, #0]
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a92:	4a08      	ldr	r2, [pc, #32]	@ (8009ab4 <find_volume+0x508>)
 8009a94:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009a96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009a98:	f7fe f954 	bl	8007d44 <clear_lock>
#endif
	return FR_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3758      	adds	r7, #88	@ 0x58
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	41615252 	.word	0x41615252
 8009aac:	61417272 	.word	0x61417272
 8009ab0:	20000b64 	.word	0x20000b64
 8009ab4:	20000b88 	.word	0x20000b88

08009ab8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009ac2:	2309      	movs	r3, #9
 8009ac4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01c      	beq.n	8009b06 <validate+0x4e>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d018      	beq.n	8009b06 <validate+0x4e>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d013      	beq.n	8009b06 <validate+0x4e>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	889a      	ldrh	r2, [r3, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	88db      	ldrh	r3, [r3, #6]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d10c      	bne.n	8009b06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	785b      	ldrb	r3, [r3, #1]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fd fe3e 	bl	8007774 <disk_status>
 8009af8:	4603      	mov	r3, r0
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <validate+0x4e>
			res = FR_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d102      	bne.n	8009b12 <validate+0x5a>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	e000      	b.n	8009b14 <validate+0x5c>
 8009b12:	2300      	movs	r3, #0
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	6013      	str	r3, [r2, #0]
	return res;
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009b36:	f107 0310 	add.w	r3, r7, #16
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff fc9c 	bl	8009478 <get_ldnumber>
 8009b40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	da01      	bge.n	8009b4c <f_mount+0x28>
 8009b48:	230b      	movs	r3, #11
 8009b4a:	e02b      	b.n	8009ba4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009b4c:	4a17      	ldr	r2, [pc, #92]	@ (8009bac <f_mount+0x88>)
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009b5c:	69b8      	ldr	r0, [r7, #24]
 8009b5e:	f7fe f8f1 	bl	8007d44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	2200      	movs	r2, #0
 8009b66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	490d      	ldr	r1, [pc, #52]	@ (8009bac <f_mount+0x88>)
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <f_mount+0x66>
 8009b84:	79fb      	ldrb	r3, [r7, #7]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d001      	beq.n	8009b8e <f_mount+0x6a>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e00a      	b.n	8009ba4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009b8e:	f107 010c 	add.w	r1, r7, #12
 8009b92:	f107 0308 	add.w	r3, r7, #8
 8009b96:	2200      	movs	r2, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7ff fd07 	bl	80095ac <find_volume>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20000b60 	.word	0x20000b60

08009bb0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b09a      	sub	sp, #104	@ 0x68
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <f_open+0x18>
 8009bc4:	2309      	movs	r3, #9
 8009bc6:	e1b7      	b.n	8009f38 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009bc8:	79fb      	ldrb	r3, [r7, #7]
 8009bca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009bd0:	79fa      	ldrb	r2, [r7, #7]
 8009bd2:	f107 0114 	add.w	r1, r7, #20
 8009bd6:	f107 0308 	add.w	r3, r7, #8
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7ff fce6 	bl	80095ac <find_volume>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8009be6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f040 819b 	bne.w	8009f26 <f_open+0x376>
		dj.obj.fs = fs;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	f107 0318 	add.w	r3, r7, #24
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7ff fbc5 	bl	800938c <follow_path>
 8009c02:	4603      	mov	r3, r0
 8009c04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009c08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d118      	bne.n	8009c42 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009c10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009c14:	b25b      	sxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	da03      	bge.n	8009c22 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009c1a:	2306      	movs	r3, #6
 8009c1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009c20:	e00f      	b.n	8009c42 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c22:	79fb      	ldrb	r3, [r7, #7]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	bf8c      	ite	hi
 8009c28:	2301      	movhi	r3, #1
 8009c2a:	2300      	movls	r3, #0
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f107 0318 	add.w	r3, r7, #24
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fd ff3c 	bl	8007ab4 <chk_lock>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c42:	79fb      	ldrb	r3, [r7, #7]
 8009c44:	f003 031c 	and.w	r3, r3, #28
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d07f      	beq.n	8009d4c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d017      	beq.n	8009c84 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009c54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d10e      	bne.n	8009c7a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c5c:	f7fd ff86 	bl	8007b6c <enq_lock>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d006      	beq.n	8009c74 <f_open+0xc4>
 8009c66:	f107 0318 	add.w	r3, r7, #24
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff f8de 	bl	8008e2c <dir_register>
 8009c70:	4603      	mov	r3, r0
 8009c72:	e000      	b.n	8009c76 <f_open+0xc6>
 8009c74:	2312      	movs	r3, #18
 8009c76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	f043 0308 	orr.w	r3, r3, #8
 8009c80:	71fb      	strb	r3, [r7, #7]
 8009c82:	e010      	b.n	8009ca6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009c84:	7fbb      	ldrb	r3, [r7, #30]
 8009c86:	f003 0311 	and.w	r3, r3, #17
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <f_open+0xe6>
					res = FR_DENIED;
 8009c8e:	2307      	movs	r3, #7
 8009c90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009c94:	e007      	b.n	8009ca6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	f003 0304 	and.w	r3, r3, #4
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <f_open+0xf6>
 8009ca0:	2308      	movs	r3, #8
 8009ca2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009ca6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d168      	bne.n	8009d80 <f_open+0x1d0>
 8009cae:	79fb      	ldrb	r3, [r7, #7]
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d063      	beq.n	8009d80 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009cb8:	f7fd fcfe 	bl	80076b8 <get_fattime>
 8009cbc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc0:	330e      	adds	r3, #14
 8009cc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fd fe4b 	bl	8007960 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ccc:	3316      	adds	r3, #22
 8009cce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fd fe45 	bl	8007960 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd8:	330b      	adds	r3, #11
 8009cda:	2220      	movs	r2, #32
 8009cdc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fe fe1a 	bl	800891e <ld_clust>
 8009cea:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fe32 	bl	800895c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfa:	331c      	adds	r3, #28
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fd fe2e 	bl	8007960 <st_dword>
					fs->wflag = 1;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2201      	movs	r2, #1
 8009d08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d037      	beq.n	8009d80 <f_open+0x1d0>
						dw = fs->winsect;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d14:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009d16:	f107 0318 	add.w	r3, r7, #24
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fb22 	bl	8008368 <remove_chain>
 8009d24:	4603      	mov	r3, r0
 8009d26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8009d2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d126      	bne.n	8009d80 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe f86c 	bl	8007e14 <move_window>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d46:	3a01      	subs	r2, #1
 8009d48:	615a      	str	r2, [r3, #20]
 8009d4a:	e019      	b.n	8009d80 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009d4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d115      	bne.n	8009d80 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009d54:	7fbb      	ldrb	r3, [r7, #30]
 8009d56:	f003 0310 	and.w	r3, r3, #16
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <f_open+0x1b6>
					res = FR_NO_FILE;
 8009d5e:	2304      	movs	r3, #4
 8009d60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009d64:	e00c      	b.n	8009d80 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009d66:	79fb      	ldrb	r3, [r7, #7]
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d007      	beq.n	8009d80 <f_open+0x1d0>
 8009d70:	7fbb      	ldrb	r3, [r7, #30]
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <f_open+0x1d0>
						res = FR_DENIED;
 8009d7a:	2307      	movs	r3, #7
 8009d7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009d80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d126      	bne.n	8009dd6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	f003 0308 	and.w	r3, r3, #8
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009da2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	bf8c      	ite	hi
 8009dae:	2301      	movhi	r3, #1
 8009db0:	2300      	movls	r3, #0
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	461a      	mov	r2, r3
 8009db6:	f107 0318 	add.w	r3, r7, #24
 8009dba:	4611      	mov	r1, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fd fef7 	bl	8007bb0 <inc_lock>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d102      	bne.n	8009dd6 <f_open+0x226>
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009dd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f040 80a3 	bne.w	8009f26 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009de4:	4611      	mov	r1, r2
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe fd99 	bl	800891e <ld_clust>
 8009dec:	4602      	mov	r2, r0
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df4:	331c      	adds	r3, #28
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fd fd74 	bl	80078e4 <ld_dword>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	88da      	ldrh	r2, [r3, #6]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	79fa      	ldrb	r2, [r7, #7]
 8009e1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	3330      	adds	r3, #48	@ 0x30
 8009e32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009e36:	2100      	movs	r1, #0
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fd fdde 	bl	80079fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009e3e:	79fb      	ldrb	r3, [r7, #7]
 8009e40:	f003 0320 	and.w	r3, r3, #32
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d06e      	beq.n	8009f26 <f_open+0x376>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d06a      	beq.n	8009f26 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	895b      	ldrh	r3, [r3, #10]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	899b      	ldrh	r3, [r3, #12]
 8009e62:	fb02 f303 	mul.w	r3, r2, r3
 8009e66:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e74:	e016      	b.n	8009ea4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe f887 	bl	8007f8e <get_fat>
 8009e80:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009e82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d802      	bhi.n	8009e8e <f_open+0x2de>
 8009e88:	2302      	movs	r3, #2
 8009e8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009e8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e94:	d102      	bne.n	8009e9c <f_open+0x2ec>
 8009e96:	2301      	movs	r3, #1
 8009e98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ea4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d103      	bne.n	8009eb4 <f_open+0x304>
 8009eac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d8e0      	bhi.n	8009e76 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009eb8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009eba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d131      	bne.n	8009f26 <f_open+0x376>
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	899b      	ldrh	r3, [r3, #12]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009eca:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ece:	fb01 f202 	mul.w	r2, r1, r2
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d026      	beq.n	8009f26 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe f837 	bl	8007f50 <clust2sect>
 8009ee2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8009ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d103      	bne.n	8009ef2 <f_open+0x342>
						res = FR_INT_ERR;
 8009eea:	2302      	movs	r3, #2
 8009eec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009ef0:	e019      	b.n	8009f26 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	899b      	ldrh	r3, [r3, #12]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009efa:	fbb3 f2f2 	udiv	r2, r3, r2
 8009efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f00:	441a      	add	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	7858      	ldrb	r0, [r3, #1]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6a1a      	ldr	r2, [r3, #32]
 8009f14:	2301      	movs	r3, #1
 8009f16:	f7fd fc6f 	bl	80077f8 <disk_read>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <f_open+0x376>
 8009f20:	2301      	movs	r3, #1
 8009f22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009f26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d002      	beq.n	8009f34 <f_open+0x384>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009f34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3768      	adds	r7, #104	@ 0x68
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08e      	sub	sp, #56	@ 0x38
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f107 0214 	add.w	r2, r7, #20
 8009f5e:	4611      	mov	r1, r2
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7ff fda9 	bl	8009ab8 <validate>
 8009f66:	4603      	mov	r3, r0
 8009f68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d107      	bne.n	8009f84 <f_read+0x44>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	7d5b      	ldrb	r3, [r3, #21]
 8009f78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <f_read+0x4a>
 8009f84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f88:	e135      	b.n	800a1f6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	7d1b      	ldrb	r3, [r3, #20]
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <f_read+0x5a>
 8009f96:	2307      	movs	r3, #7
 8009f98:	e12d      	b.n	800a1f6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	f240 811e 	bls.w	800a1ec <f_read+0x2ac>
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009fb4:	e11a      	b.n	800a1ec <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	8992      	ldrh	r2, [r2, #12]
 8009fbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fc2:	fb01 f202 	mul.w	r2, r1, r2
 8009fc6:	1a9b      	subs	r3, r3, r2
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f040 80d5 	bne.w	800a178 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	8992      	ldrh	r2, [r2, #12]
 8009fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	8952      	ldrh	r2, [r2, #10]
 8009fde:	3a01      	subs	r2, #1
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d12f      	bne.n	800a04a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	699b      	ldr	r3, [r3, #24]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d103      	bne.n	8009ffa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ff8:	e013      	b.n	800a022 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d007      	beq.n	800a012 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	4619      	mov	r1, r3
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f7fe faaa 	bl	8008562 <clmt_clust>
 800a00e:	6338      	str	r0, [r7, #48]	@ 0x30
 800a010:	e007      	b.n	800a022 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	4619      	mov	r1, r3
 800a01a:	4610      	mov	r0, r2
 800a01c:	f7fd ffb7 	bl	8007f8e <get_fat>
 800a020:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	2b01      	cmp	r3, #1
 800a026:	d804      	bhi.n	800a032 <f_read+0xf2>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2202      	movs	r2, #2
 800a02c:	755a      	strb	r2, [r3, #21]
 800a02e:	2302      	movs	r3, #2
 800a030:	e0e1      	b.n	800a1f6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a038:	d104      	bne.n	800a044 <f_read+0x104>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	755a      	strb	r2, [r3, #21]
 800a040:	2301      	movs	r3, #1
 800a042:	e0d8      	b.n	800a1f6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a048:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	69db      	ldr	r3, [r3, #28]
 800a050:	4619      	mov	r1, r3
 800a052:	4610      	mov	r0, r2
 800a054:	f7fd ff7c 	bl	8007f50 <clust2sect>
 800a058:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d104      	bne.n	800a06a <f_read+0x12a>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2202      	movs	r2, #2
 800a064:	755a      	strb	r2, [r3, #21]
 800a066:	2302      	movs	r3, #2
 800a068:	e0c5      	b.n	800a1f6 <f_read+0x2b6>
			sect += csect;
 800a06a:	69ba      	ldr	r2, [r7, #24]
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	4413      	add	r3, r2
 800a070:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	899b      	ldrh	r3, [r3, #12]
 800a076:	461a      	mov	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a07e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a082:	2b00      	cmp	r3, #0
 800a084:	d041      	beq.n	800a10a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a086:	69fa      	ldr	r2, [r7, #28]
 800a088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08a:	4413      	add	r3, r2
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	8952      	ldrh	r2, [r2, #10]
 800a090:	4293      	cmp	r3, r2
 800a092:	d905      	bls.n	800a0a0 <f_read+0x160>
					cc = fs->csize - csect;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	895b      	ldrh	r3, [r3, #10]
 800a098:	461a      	mov	r2, r3
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	7858      	ldrb	r0, [r3, #1]
 800a0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a6:	69ba      	ldr	r2, [r7, #24]
 800a0a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a0aa:	f7fd fba5 	bl	80077f8 <disk_read>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d004      	beq.n	800a0be <f_read+0x17e>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	755a      	strb	r2, [r3, #21]
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e09b      	b.n	800a1f6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	7d1b      	ldrb	r3, [r3, #20]
 800a0c2:	b25b      	sxtb	r3, r3
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	da18      	bge.n	800a0fa <f_read+0x1ba>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6a1a      	ldr	r2, [r3, #32]
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d911      	bls.n	800a0fa <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6a1a      	ldr	r2, [r3, #32]
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	8992      	ldrh	r2, [r2, #12]
 800a0e2:	fb02 f303 	mul.w	r3, r2, r3
 800a0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e8:	18d0      	adds	r0, r2, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	899b      	ldrh	r3, [r3, #12]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	f7fd fc5f 	bl	80079b8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	899b      	ldrh	r3, [r3, #12]
 800a0fe:	461a      	mov	r2, r3
 800a100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a102:	fb02 f303 	mul.w	r3, r2, r3
 800a106:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a108:	e05c      	b.n	800a1c4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6a1b      	ldr	r3, [r3, #32]
 800a10e:	69ba      	ldr	r2, [r7, #24]
 800a110:	429a      	cmp	r2, r3
 800a112:	d02e      	beq.n	800a172 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	7d1b      	ldrb	r3, [r3, #20]
 800a118:	b25b      	sxtb	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	da18      	bge.n	800a150 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	7858      	ldrb	r0, [r3, #1]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6a1a      	ldr	r2, [r3, #32]
 800a12c:	2301      	movs	r3, #1
 800a12e:	f7fd fb83 	bl	8007838 <disk_write>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d004      	beq.n	800a142 <f_read+0x202>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2201      	movs	r2, #1
 800a13c:	755a      	strb	r2, [r3, #21]
 800a13e:	2301      	movs	r3, #1
 800a140:	e059      	b.n	800a1f6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	7d1b      	ldrb	r3, [r3, #20]
 800a146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	7858      	ldrb	r0, [r3, #1]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a15a:	2301      	movs	r3, #1
 800a15c:	69ba      	ldr	r2, [r7, #24]
 800a15e:	f7fd fb4b 	bl	80077f8 <disk_read>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d004      	beq.n	800a172 <f_read+0x232>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2201      	movs	r2, #1
 800a16c:	755a      	strb	r2, [r3, #21]
 800a16e:	2301      	movs	r3, #1
 800a170:	e041      	b.n	800a1f6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	69ba      	ldr	r2, [r7, #24]
 800a176:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	899b      	ldrh	r3, [r3, #12]
 800a17c:	4618      	mov	r0, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	8992      	ldrh	r2, [r2, #12]
 800a186:	fbb3 f1f2 	udiv	r1, r3, r2
 800a18a:	fb01 f202 	mul.w	r2, r1, r2
 800a18e:	1a9b      	subs	r3, r3, r2
 800a190:	1ac3      	subs	r3, r0, r3
 800a192:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d901      	bls.n	800a1a0 <f_read+0x260>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	8992      	ldrh	r2, [r2, #12]
 800a1ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1b2:	fb00 f202 	mul.w	r2, r0, r2
 800a1b6:	1a9b      	subs	r3, r3, r2
 800a1b8:	440b      	add	r3, r1
 800a1ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1c0:	f7fd fbfa 	bl	80079b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c8:	4413      	add	r3, r2
 800a1ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	699a      	ldr	r2, [r3, #24]
 800a1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d2:	441a      	add	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	619a      	str	r2, [r3, #24]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1de:	441a      	add	r2, r3
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	601a      	str	r2, [r3, #0]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f47f aee1 	bne.w	8009fb6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3738      	adds	r7, #56	@ 0x38
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b08c      	sub	sp, #48	@ 0x30
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	607a      	str	r2, [r7, #4]
 800a20a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f107 0210 	add.w	r2, r7, #16
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f7ff fc4a 	bl	8009ab8 <validate>
 800a224:	4603      	mov	r3, r0
 800a226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a22a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d107      	bne.n	800a242 <f_write+0x44>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	7d5b      	ldrb	r3, [r3, #21]
 800a236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a23a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d002      	beq.n	800a248 <f_write+0x4a>
 800a242:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a246:	e16a      	b.n	800a51e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	7d1b      	ldrb	r3, [r3, #20]
 800a24c:	f003 0302 	and.w	r3, r3, #2
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <f_write+0x5a>
 800a254:	2307      	movs	r3, #7
 800a256:	e162      	b.n	800a51e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	699a      	ldr	r2, [r3, #24]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	441a      	add	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	429a      	cmp	r2, r3
 800a266:	f080 814c 	bcs.w	800a502 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	43db      	mvns	r3, r3
 800a270:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a272:	e146      	b.n	800a502 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	8992      	ldrh	r2, [r2, #12]
 800a27c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a280:	fb01 f202 	mul.w	r2, r1, r2
 800a284:	1a9b      	subs	r3, r3, r2
 800a286:	2b00      	cmp	r3, #0
 800a288:	f040 80f1 	bne.w	800a46e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	8992      	ldrh	r2, [r2, #12]
 800a294:	fbb3 f3f2 	udiv	r3, r3, r2
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	8952      	ldrh	r2, [r2, #10]
 800a29c:	3a01      	subs	r2, #1
 800a29e:	4013      	ands	r3, r2
 800a2a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d143      	bne.n	800a330 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10c      	bne.n	800a2ca <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d11a      	bne.n	800a2f2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2100      	movs	r1, #0
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe f8b6 	bl	8008432 <create_chain>
 800a2c6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a2c8:	e013      	b.n	800a2f2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d007      	beq.n	800a2e2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	699b      	ldr	r3, [r3, #24]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f7fe f942 	bl	8008562 <clmt_clust>
 800a2de:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a2e0:	e007      	b.n	800a2f2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	f7fe f8a1 	bl	8008432 <create_chain>
 800a2f0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 8109 	beq.w	800a50c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d104      	bne.n	800a30a <f_write+0x10c>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2202      	movs	r2, #2
 800a304:	755a      	strb	r2, [r3, #21]
 800a306:	2302      	movs	r3, #2
 800a308:	e109      	b.n	800a51e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a310:	d104      	bne.n	800a31c <f_write+0x11e>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2201      	movs	r2, #1
 800a316:	755a      	strb	r2, [r3, #21]
 800a318:	2301      	movs	r3, #1
 800a31a:	e100      	b.n	800a51e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a320:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d102      	bne.n	800a330 <f_write+0x132>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a32e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	7d1b      	ldrb	r3, [r3, #20]
 800a334:	b25b      	sxtb	r3, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	da18      	bge.n	800a36c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	7858      	ldrb	r0, [r3, #1]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6a1a      	ldr	r2, [r3, #32]
 800a348:	2301      	movs	r3, #1
 800a34a:	f7fd fa75 	bl	8007838 <disk_write>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d004      	beq.n	800a35e <f_write+0x160>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2201      	movs	r2, #1
 800a358:	755a      	strb	r2, [r3, #21]
 800a35a:	2301      	movs	r3, #1
 800a35c:	e0df      	b.n	800a51e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	7d1b      	ldrb	r3, [r3, #20]
 800a362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a366:	b2da      	uxtb	r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	4619      	mov	r1, r3
 800a374:	4610      	mov	r0, r2
 800a376:	f7fd fdeb 	bl	8007f50 <clust2sect>
 800a37a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d104      	bne.n	800a38c <f_write+0x18e>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2202      	movs	r2, #2
 800a386:	755a      	strb	r2, [r3, #21]
 800a388:	2302      	movs	r3, #2
 800a38a:	e0c8      	b.n	800a51e <f_write+0x320>
			sect += csect;
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	4413      	add	r3, r2
 800a392:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	899b      	ldrh	r3, [r3, #12]
 800a398:	461a      	mov	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d043      	beq.n	800a430 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	8952      	ldrh	r2, [r2, #10]
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d905      	bls.n	800a3c2 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	895b      	ldrh	r3, [r3, #10]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	7858      	ldrb	r0, [r3, #1]
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	69f9      	ldr	r1, [r7, #28]
 800a3cc:	f7fd fa34 	bl	8007838 <disk_write>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d004      	beq.n	800a3e0 <f_write+0x1e2>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	755a      	strb	r2, [r3, #21]
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e09e      	b.n	800a51e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6a1a      	ldr	r2, [r3, #32]
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	6a3a      	ldr	r2, [r7, #32]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d918      	bls.n	800a420 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a1a      	ldr	r2, [r3, #32]
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	8992      	ldrh	r2, [r2, #12]
 800a400:	fb02 f303 	mul.w	r3, r2, r3
 800a404:	69fa      	ldr	r2, [r7, #28]
 800a406:	18d1      	adds	r1, r2, r3
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	899b      	ldrh	r3, [r3, #12]
 800a40c:	461a      	mov	r2, r3
 800a40e:	f7fd fad3 	bl	80079b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	7d1b      	ldrb	r3, [r3, #20]
 800a416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	899b      	ldrh	r3, [r3, #12]
 800a424:	461a      	mov	r2, r3
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	fb02 f303 	mul.w	r3, r2, r3
 800a42c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a42e:	e04b      	b.n	800a4c8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	429a      	cmp	r2, r3
 800a438:	d016      	beq.n	800a468 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	699a      	ldr	r2, [r3, #24]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a442:	429a      	cmp	r2, r3
 800a444:	d210      	bcs.n	800a468 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	7858      	ldrb	r0, [r3, #1]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a450:	2301      	movs	r3, #1
 800a452:	697a      	ldr	r2, [r7, #20]
 800a454:	f7fd f9d0 	bl	80077f8 <disk_read>
 800a458:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d004      	beq.n	800a468 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	755a      	strb	r2, [r3, #21]
 800a464:	2301      	movs	r3, #1
 800a466:	e05a      	b.n	800a51e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	899b      	ldrh	r3, [r3, #12]
 800a472:	4618      	mov	r0, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	8992      	ldrh	r2, [r2, #12]
 800a47c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a480:	fb01 f202 	mul.w	r2, r1, r2
 800a484:	1a9b      	subs	r3, r3, r2
 800a486:	1ac3      	subs	r3, r0, r3
 800a488:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a48a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d901      	bls.n	800a496 <f_write+0x298>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	8992      	ldrh	r2, [r2, #12]
 800a4a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4a8:	fb00 f202 	mul.w	r2, r0, r2
 800a4ac:	1a9b      	subs	r3, r3, r2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4b2:	69f9      	ldr	r1, [r7, #28]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fd fa7f 	bl	80079b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	7d1b      	ldrb	r3, [r3, #20]
 800a4be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a4c2:	b2da      	uxtb	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a4c8:	69fa      	ldr	r2, [r7, #28]
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	4413      	add	r3, r2
 800a4ce:	61fb      	str	r3, [r7, #28]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	699a      	ldr	r2, [r3, #24]
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d6:	441a      	add	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	619a      	str	r2, [r3, #24]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	68da      	ldr	r2, [r3, #12]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	bf38      	it	cc
 800a4e8:	461a      	movcc	r2, r3
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	60da      	str	r2, [r3, #12]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	441a      	add	r2, r3
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	601a      	str	r2, [r3, #0]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	f47f aeb5 	bne.w	800a274 <f_write+0x76>
 800a50a:	e000      	b.n	800a50e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a50c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	7d1b      	ldrb	r3, [r3, #20]
 800a512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a516:	b2da      	uxtb	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3730      	adds	r7, #48	@ 0x30
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b086      	sub	sp, #24
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f107 0208 	add.w	r2, r7, #8
 800a534:	4611      	mov	r1, r2
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff fabe 	bl	8009ab8 <validate>
 800a53c:	4603      	mov	r3, r0
 800a53e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a540:	7dfb      	ldrb	r3, [r7, #23]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d168      	bne.n	800a618 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	7d1b      	ldrb	r3, [r3, #20]
 800a54a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d062      	beq.n	800a618 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	7d1b      	ldrb	r3, [r3, #20]
 800a556:	b25b      	sxtb	r3, r3
 800a558:	2b00      	cmp	r3, #0
 800a55a:	da15      	bge.n	800a588 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	7858      	ldrb	r0, [r3, #1]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a1a      	ldr	r2, [r3, #32]
 800a56a:	2301      	movs	r3, #1
 800a56c:	f7fd f964 	bl	8007838 <disk_write>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <f_sync+0x54>
 800a576:	2301      	movs	r3, #1
 800a578:	e04f      	b.n	800a61a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	7d1b      	ldrb	r3, [r3, #20]
 800a57e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a582:	b2da      	uxtb	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a588:	f7fd f896 	bl	80076b8 <get_fattime>
 800a58c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a594:	4619      	mov	r1, r3
 800a596:	4610      	mov	r0, r2
 800a598:	f7fd fc3c 	bl	8007e14 <move_window>
 800a59c:	4603      	mov	r3, r0
 800a59e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a5a0:	7dfb      	ldrb	r3, [r7, #23]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d138      	bne.n	800a618 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5aa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	330b      	adds	r3, #11
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	330b      	adds	r3, #11
 800a5b6:	f042 0220 	orr.w	r2, r2, #32
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6818      	ldr	r0, [r3, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	68f9      	ldr	r1, [r7, #12]
 800a5ca:	f7fe f9c7 	bl	800895c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f103 021c 	add.w	r2, r3, #28
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4610      	mov	r0, r2
 800a5dc:	f7fd f9c0 	bl	8007960 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3316      	adds	r3, #22
 800a5e4:	6939      	ldr	r1, [r7, #16]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fd f9ba 	bl	8007960 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	3312      	adds	r3, #18
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fd f999 	bl	800792a <st_word>
					fs->wflag = 1;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	4618      	mov	r0, r3
 800a602:	f7fd fc35 	bl	8007e70 <sync_fs>
 800a606:	4603      	mov	r3, r0
 800a608:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	7d1b      	ldrb	r3, [r3, #20]
 800a60e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a612:	b2da      	uxtb	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a618:	7dfb      	ldrb	r3, [r7, #23]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3718      	adds	r7, #24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff ff7b 	bl	800a526 <f_sync>
 800a630:	4603      	mov	r3, r0
 800a632:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d118      	bne.n	800a66c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f107 0208 	add.w	r2, r7, #8
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fa38 	bl	8009ab8 <validate>
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10c      	bne.n	800a66c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	4618      	mov	r0, r3
 800a658:	f7fd fb38 	bl	8007ccc <dec_lock>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b092      	sub	sp, #72	@ 0x48
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a682:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a686:	f107 030c 	add.w	r3, r7, #12
 800a68a:	2200      	movs	r2, #0
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe ff8d 	bl	80095ac <find_volume>
 800a692:	4603      	mov	r3, r0
 800a694:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800a698:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f040 8099 	bne.w	800a7d4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a6a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6aa:	699a      	ldr	r2, [r3, #24]
 800a6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	3b02      	subs	r3, #2
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d804      	bhi.n	800a6c0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b8:	699a      	ldr	r2, [r3, #24]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	e089      	b.n	800a7d4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d128      	bne.n	800a71e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a6d4:	f107 0314 	add.w	r3, r7, #20
 800a6d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fd fc57 	bl	8007f8e <get_fat>
 800a6e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e8:	d103      	bne.n	800a6f2 <f_getfree+0x7c>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a6f0:	e063      	b.n	800a7ba <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d103      	bne.n	800a700 <f_getfree+0x8a>
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a6fe:	e05c      	b.n	800a7ba <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a702:	2b00      	cmp	r3, #0
 800a704:	d102      	bne.n	800a70c <f_getfree+0x96>
 800a706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a708:	3301      	adds	r3, #1
 800a70a:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800a70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a70e:	3301      	adds	r3, #1
 800a710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a718:	429a      	cmp	r2, r3
 800a71a:	d3db      	bcc.n	800a6d4 <f_getfree+0x5e>
 800a71c:	e04d      	b.n	800a7ba <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a728:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a72e:	2300      	movs	r3, #0
 800a730:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800a732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a734:	2b00      	cmp	r3, #0
 800a736:	d113      	bne.n	800a760 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a740:	4619      	mov	r1, r3
 800a742:	f7fd fb67 	bl	8007e14 <move_window>
 800a746:	4603      	mov	r3, r0
 800a748:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800a74c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a750:	2b00      	cmp	r3, #0
 800a752:	d131      	bne.n	800a7b8 <f_getfree+0x142>
							p = fs->win;
 800a754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a756:	3338      	adds	r3, #56	@ 0x38
 800a758:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75c:	899b      	ldrh	r3, [r3, #12]
 800a75e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b02      	cmp	r3, #2
 800a766:	d10f      	bne.n	800a788 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a76a:	f7fd f8a3 	bl	80078b4 <ld_word>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d102      	bne.n	800a77a <f_getfree+0x104>
 800a774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a776:	3301      	adds	r3, #1
 800a778:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800a77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77c:	3302      	adds	r3, #2
 800a77e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a782:	3b02      	subs	r3, #2
 800a784:	637b      	str	r3, [r7, #52]	@ 0x34
 800a786:	e010      	b.n	800a7aa <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a78a:	f7fd f8ab 	bl	80078e4 <ld_dword>
 800a78e:	4603      	mov	r3, r0
 800a790:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <f_getfree+0x128>
 800a798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a79a:	3301      	adds	r3, #1
 800a79c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a6:	3b04      	subs	r3, #4
 800a7a8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800a7aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1bd      	bne.n	800a732 <f_getfree+0xbc>
 800a7b6:	e000      	b.n	800a7ba <f_getfree+0x144>
							if (res != FR_OK) break;
 800a7b8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7be:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7c4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c8:	791a      	ldrb	r2, [r3, #4]
 800a7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7cc:	f042 0201 	orr.w	r2, r2, #1
 800a7d0:	b2d2      	uxtb	r2, r2
 800a7d2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a7d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3748      	adds	r7, #72	@ 0x48
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a7f4:	e01c      	b.n	800a830 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a7f6:	f107 0310 	add.w	r3, r7, #16
 800a7fa:	f107 0114 	add.w	r1, r7, #20
 800a7fe:	2201      	movs	r2, #1
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7ff fb9d 	bl	8009f40 <f_read>
		if (rc != 1) break;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d117      	bne.n	800a83c <f_gets+0x5c>
		c = s[0];
 800a80c:	7d3b      	ldrb	r3, [r7, #20]
 800a80e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a810:	7dfb      	ldrb	r3, [r7, #23]
 800a812:	2b0d      	cmp	r3, #13
 800a814:	d00b      	beq.n	800a82e <f_gets+0x4e>
		*p++ = c;
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	61ba      	str	r2, [r7, #24]
 800a81c:	7dfa      	ldrb	r2, [r7, #23]
 800a81e:	701a      	strb	r2, [r3, #0]
		n++;
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	3301      	adds	r3, #1
 800a824:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	2b0a      	cmp	r3, #10
 800a82a:	d009      	beq.n	800a840 <f_gets+0x60>
 800a82c:	e000      	b.n	800a830 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a82e:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	3b01      	subs	r3, #1
 800a834:	69fa      	ldr	r2, [r7, #28]
 800a836:	429a      	cmp	r2, r3
 800a838:	dbdd      	blt.n	800a7f6 <f_gets+0x16>
 800a83a:	e002      	b.n	800a842 <f_gets+0x62>
		if (rc != 1) break;
 800a83c:	bf00      	nop
 800a83e:	e000      	b.n	800a842 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800a840:	bf00      	nop
	}
	*p = 0;
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	2200      	movs	r2, #0
 800a846:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <f_gets+0x72>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	e000      	b.n	800a854 <f_gets+0x74>
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3720      	adds	r7, #32
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a868:	78fb      	ldrb	r3, [r7, #3]
 800a86a:	2b0a      	cmp	r3, #10
 800a86c:	d103      	bne.n	800a876 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a86e:	210d      	movs	r1, #13
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff fff3 	bl	800a85c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	db25      	blt.n	800a8ce <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	60fa      	str	r2, [r7, #12]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	4413      	add	r3, r2
 800a88c:	78fa      	ldrb	r2, [r7, #3]
 800a88e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2b3c      	cmp	r3, #60	@ 0x3c
 800a894:	dd12      	ble.n	800a8bc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f103 010c 	add.w	r1, r3, #12
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	f107 0308 	add.w	r3, r7, #8
 800a8a6:	f7ff fcaa 	bl	800a1fe <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d101      	bne.n	800a8b6 <putc_bfd+0x5a>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e001      	b.n	800a8ba <putc_bfd+0x5e>
 800a8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ba:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	609a      	str	r2, [r3, #8]
 800a8cc:	e000      	b.n	800a8d0 <putc_bfd+0x74>
	if (i < 0) return;
 800a8ce:	bf00      	nop
}
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	db16      	blt.n	800a914 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6818      	ldr	r0, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f103 010c 	add.w	r1, r3, #12
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f107 030c 	add.w	r3, r7, #12
 800a8fa:	f7ff fc80 	bl	800a1fe <f_write>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d107      	bne.n	800a914 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d102      	bne.n	800a914 <putc_flush+0x3e>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	e001      	b.n	800a918 <putc_flush+0x42>
	return EOF;
 800a914:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	605a      	str	r2, [r3, #4]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	609a      	str	r2, [r3, #8]
}
 800a93e:	bf00      	nop
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b096      	sub	sp, #88	@ 0x58
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a954:	f107 030c 	add.w	r3, r7, #12
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff ffe0 	bl	800a920 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a960:	e009      	b.n	800a976 <f_puts+0x2c>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	781a      	ldrb	r2, [r3, #0]
 800a96a:	f107 030c 	add.w	r3, r7, #12
 800a96e:	4611      	mov	r1, r2
 800a970:	4618      	mov	r0, r3
 800a972:	f7ff ff73 	bl	800a85c <putc_bfd>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1f1      	bne.n	800a962 <f_puts+0x18>
	return putc_flush(&pb);
 800a97e:	f107 030c 	add.w	r3, r7, #12
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff ffa7 	bl	800a8d6 <putc_flush>
 800a988:	4603      	mov	r3, r0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3758      	adds	r7, #88	@ 0x58
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a994:	b480      	push	{r7}
 800a996:	b087      	sub	sp, #28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a9aa:	4b1f      	ldr	r3, [pc, #124]	@ (800aa28 <FATFS_LinkDriverEx+0x94>)
 800a9ac:	7a5b      	ldrb	r3, [r3, #9]
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d131      	bne.n	800aa18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a9b4:	4b1c      	ldr	r3, [pc, #112]	@ (800aa28 <FATFS_LinkDriverEx+0x94>)
 800a9b6:	7a5b      	ldrb	r3, [r3, #9]
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	4b1a      	ldr	r3, [pc, #104]	@ (800aa28 <FATFS_LinkDriverEx+0x94>)
 800a9be:	2100      	movs	r1, #0
 800a9c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a9c2:	4b19      	ldr	r3, [pc, #100]	@ (800aa28 <FATFS_LinkDriverEx+0x94>)
 800a9c4:	7a5b      	ldrb	r3, [r3, #9]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	4a17      	ldr	r2, [pc, #92]	@ (800aa28 <FATFS_LinkDriverEx+0x94>)
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4413      	add	r3, r2
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a9d2:	4b15      	ldr	r3, [pc, #84]	@ (800aa28 <FATFS_LinkDriverEx+0x94>)
 800a9d4:	7a5b      	ldrb	r3, [r3, #9]
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	461a      	mov	r2, r3
 800a9da:	4b13      	ldr	r3, [pc, #76]	@ (800aa28 <FATFS_LinkDriverEx+0x94>)
 800a9dc:	4413      	add	r3, r2
 800a9de:	79fa      	ldrb	r2, [r7, #7]
 800a9e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a9e2:	4b11      	ldr	r3, [pc, #68]	@ (800aa28 <FATFS_LinkDriverEx+0x94>)
 800a9e4:	7a5b      	ldrb	r3, [r3, #9]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	b2d1      	uxtb	r1, r2
 800a9ec:	4a0e      	ldr	r2, [pc, #56]	@ (800aa28 <FATFS_LinkDriverEx+0x94>)
 800a9ee:	7251      	strb	r1, [r2, #9]
 800a9f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a9f2:	7dbb      	ldrb	r3, [r7, #22]
 800a9f4:	3330      	adds	r3, #48	@ 0x30
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	223a      	movs	r2, #58	@ 0x3a
 800aa02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	3302      	adds	r3, #2
 800aa08:	222f      	movs	r2, #47	@ 0x2f
 800aa0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	3303      	adds	r3, #3
 800aa10:	2200      	movs	r2, #0
 800aa12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aa18:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	371c      	adds	r7, #28
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	20000d88 	.word	0x20000d88

0800aa2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aa36:	2200      	movs	r2, #0
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff ffaa 	bl	800a994 <FATFS_LinkDriverEx>
 800aa40:	4603      	mov	r3, r0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	6039      	str	r1, [r7, #0]
 800aa56:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800aa58:	88fb      	ldrh	r3, [r7, #6]
 800aa5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa5c:	d802      	bhi.n	800aa64 <ff_convert+0x18>
		c = chr;
 800aa5e:	88fb      	ldrh	r3, [r7, #6]
 800aa60:	81fb      	strh	r3, [r7, #14]
 800aa62:	e025      	b.n	800aab0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00b      	beq.n	800aa82 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800aa6a:	88fb      	ldrh	r3, [r7, #6]
 800aa6c:	2bff      	cmp	r3, #255	@ 0xff
 800aa6e:	d805      	bhi.n	800aa7c <ff_convert+0x30>
 800aa70:	88fb      	ldrh	r3, [r7, #6]
 800aa72:	3b80      	subs	r3, #128	@ 0x80
 800aa74:	4a12      	ldr	r2, [pc, #72]	@ (800aac0 <ff_convert+0x74>)
 800aa76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa7a:	e000      	b.n	800aa7e <ff_convert+0x32>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	81fb      	strh	r3, [r7, #14]
 800aa80:	e016      	b.n	800aab0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800aa82:	2300      	movs	r3, #0
 800aa84:	81fb      	strh	r3, [r7, #14]
 800aa86:	e009      	b.n	800aa9c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800aa88:	89fb      	ldrh	r3, [r7, #14]
 800aa8a:	4a0d      	ldr	r2, [pc, #52]	@ (800aac0 <ff_convert+0x74>)
 800aa8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa90:	88fa      	ldrh	r2, [r7, #6]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d006      	beq.n	800aaa4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800aa96:	89fb      	ldrh	r3, [r7, #14]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	81fb      	strh	r3, [r7, #14]
 800aa9c:	89fb      	ldrh	r3, [r7, #14]
 800aa9e:	2b7f      	cmp	r3, #127	@ 0x7f
 800aaa0:	d9f2      	bls.n	800aa88 <ff_convert+0x3c>
 800aaa2:	e000      	b.n	800aaa6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800aaa4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800aaa6:	89fb      	ldrh	r3, [r7, #14]
 800aaa8:	3380      	adds	r3, #128	@ 0x80
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800aab0:	89fb      	ldrh	r3, [r7, #14]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	080111f4 	.word	0x080111f4

0800aac4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b087      	sub	sp, #28
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	4603      	mov	r3, r0
 800aacc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800aace:	88fb      	ldrh	r3, [r7, #6]
 800aad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aad4:	d201      	bcs.n	800aada <ff_wtoupper+0x16>
 800aad6:	4b3e      	ldr	r3, [pc, #248]	@ (800abd0 <ff_wtoupper+0x10c>)
 800aad8:	e000      	b.n	800aadc <ff_wtoupper+0x18>
 800aada:	4b3e      	ldr	r3, [pc, #248]	@ (800abd4 <ff_wtoupper+0x110>)
 800aadc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	1c9a      	adds	r2, r3, #2
 800aae2:	617a      	str	r2, [r7, #20]
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800aae8:	8a7b      	ldrh	r3, [r7, #18]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d068      	beq.n	800abc0 <ff_wtoupper+0xfc>
 800aaee:	88fa      	ldrh	r2, [r7, #6]
 800aaf0:	8a7b      	ldrh	r3, [r7, #18]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d364      	bcc.n	800abc0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	1c9a      	adds	r2, r3, #2
 800aafa:	617a      	str	r2, [r7, #20]
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	823b      	strh	r3, [r7, #16]
 800ab00:	8a3b      	ldrh	r3, [r7, #16]
 800ab02:	0a1b      	lsrs	r3, r3, #8
 800ab04:	81fb      	strh	r3, [r7, #14]
 800ab06:	8a3b      	ldrh	r3, [r7, #16]
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ab0c:	88fa      	ldrh	r2, [r7, #6]
 800ab0e:	8a79      	ldrh	r1, [r7, #18]
 800ab10:	8a3b      	ldrh	r3, [r7, #16]
 800ab12:	440b      	add	r3, r1
 800ab14:	429a      	cmp	r2, r3
 800ab16:	da49      	bge.n	800abac <ff_wtoupper+0xe8>
			switch (cmd) {
 800ab18:	89fb      	ldrh	r3, [r7, #14]
 800ab1a:	2b08      	cmp	r3, #8
 800ab1c:	d84f      	bhi.n	800abbe <ff_wtoupper+0xfa>
 800ab1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab24 <ff_wtoupper+0x60>)
 800ab20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab24:	0800ab49 	.word	0x0800ab49
 800ab28:	0800ab5b 	.word	0x0800ab5b
 800ab2c:	0800ab71 	.word	0x0800ab71
 800ab30:	0800ab79 	.word	0x0800ab79
 800ab34:	0800ab81 	.word	0x0800ab81
 800ab38:	0800ab89 	.word	0x0800ab89
 800ab3c:	0800ab91 	.word	0x0800ab91
 800ab40:	0800ab99 	.word	0x0800ab99
 800ab44:	0800aba1 	.word	0x0800aba1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ab48:	88fa      	ldrh	r2, [r7, #6]
 800ab4a:	8a7b      	ldrh	r3, [r7, #18]
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	005b      	lsls	r3, r3, #1
 800ab50:	697a      	ldr	r2, [r7, #20]
 800ab52:	4413      	add	r3, r2
 800ab54:	881b      	ldrh	r3, [r3, #0]
 800ab56:	80fb      	strh	r3, [r7, #6]
 800ab58:	e027      	b.n	800abaa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ab5a:	88fa      	ldrh	r2, [r7, #6]
 800ab5c:	8a7b      	ldrh	r3, [r7, #18]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	f003 0301 	and.w	r3, r3, #1
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	88fa      	ldrh	r2, [r7, #6]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	80fb      	strh	r3, [r7, #6]
 800ab6e:	e01c      	b.n	800abaa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ab70:	88fb      	ldrh	r3, [r7, #6]
 800ab72:	3b10      	subs	r3, #16
 800ab74:	80fb      	strh	r3, [r7, #6]
 800ab76:	e018      	b.n	800abaa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ab78:	88fb      	ldrh	r3, [r7, #6]
 800ab7a:	3b20      	subs	r3, #32
 800ab7c:	80fb      	strh	r3, [r7, #6]
 800ab7e:	e014      	b.n	800abaa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ab80:	88fb      	ldrh	r3, [r7, #6]
 800ab82:	3b30      	subs	r3, #48	@ 0x30
 800ab84:	80fb      	strh	r3, [r7, #6]
 800ab86:	e010      	b.n	800abaa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ab88:	88fb      	ldrh	r3, [r7, #6]
 800ab8a:	3b1a      	subs	r3, #26
 800ab8c:	80fb      	strh	r3, [r7, #6]
 800ab8e:	e00c      	b.n	800abaa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ab90:	88fb      	ldrh	r3, [r7, #6]
 800ab92:	3308      	adds	r3, #8
 800ab94:	80fb      	strh	r3, [r7, #6]
 800ab96:	e008      	b.n	800abaa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ab98:	88fb      	ldrh	r3, [r7, #6]
 800ab9a:	3b50      	subs	r3, #80	@ 0x50
 800ab9c:	80fb      	strh	r3, [r7, #6]
 800ab9e:	e004      	b.n	800abaa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800aba0:	88fb      	ldrh	r3, [r7, #6]
 800aba2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800aba6:	80fb      	strh	r3, [r7, #6]
 800aba8:	bf00      	nop
			}
			break;
 800abaa:	e008      	b.n	800abbe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800abac:	89fb      	ldrh	r3, [r7, #14]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d195      	bne.n	800aade <ff_wtoupper+0x1a>
 800abb2:	8a3b      	ldrh	r3, [r7, #16]
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	4413      	add	r3, r2
 800abba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800abbc:	e78f      	b.n	800aade <ff_wtoupper+0x1a>
			break;
 800abbe:	bf00      	nop
	}

	return chr;
 800abc0:	88fb      	ldrh	r3, [r7, #6]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	080112f4 	.word	0x080112f4
 800abd4:	080114e8 	.word	0x080114e8

0800abd8 <atoi>:
 800abd8:	220a      	movs	r2, #10
 800abda:	2100      	movs	r1, #0
 800abdc:	f000 b87c 	b.w	800acd8 <strtol>

0800abe0 <_strtol_l.constprop.0>:
 800abe0:	2b24      	cmp	r3, #36	@ 0x24
 800abe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe6:	4686      	mov	lr, r0
 800abe8:	4690      	mov	r8, r2
 800abea:	d801      	bhi.n	800abf0 <_strtol_l.constprop.0+0x10>
 800abec:	2b01      	cmp	r3, #1
 800abee:	d106      	bne.n	800abfe <_strtol_l.constprop.0+0x1e>
 800abf0:	f001 f998 	bl	800bf24 <__errno>
 800abf4:	2316      	movs	r3, #22
 800abf6:	6003      	str	r3, [r0, #0]
 800abf8:	2000      	movs	r0, #0
 800abfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfe:	4834      	ldr	r0, [pc, #208]	@ (800acd0 <_strtol_l.constprop.0+0xf0>)
 800ac00:	460d      	mov	r5, r1
 800ac02:	462a      	mov	r2, r5
 800ac04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac08:	5d06      	ldrb	r6, [r0, r4]
 800ac0a:	f016 0608 	ands.w	r6, r6, #8
 800ac0e:	d1f8      	bne.n	800ac02 <_strtol_l.constprop.0+0x22>
 800ac10:	2c2d      	cmp	r4, #45	@ 0x2d
 800ac12:	d12d      	bne.n	800ac70 <_strtol_l.constprop.0+0x90>
 800ac14:	782c      	ldrb	r4, [r5, #0]
 800ac16:	2601      	movs	r6, #1
 800ac18:	1c95      	adds	r5, r2, #2
 800ac1a:	f033 0210 	bics.w	r2, r3, #16
 800ac1e:	d109      	bne.n	800ac34 <_strtol_l.constprop.0+0x54>
 800ac20:	2c30      	cmp	r4, #48	@ 0x30
 800ac22:	d12a      	bne.n	800ac7a <_strtol_l.constprop.0+0x9a>
 800ac24:	782a      	ldrb	r2, [r5, #0]
 800ac26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac2a:	2a58      	cmp	r2, #88	@ 0x58
 800ac2c:	d125      	bne.n	800ac7a <_strtol_l.constprop.0+0x9a>
 800ac2e:	786c      	ldrb	r4, [r5, #1]
 800ac30:	2310      	movs	r3, #16
 800ac32:	3502      	adds	r5, #2
 800ac34:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ac38:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	fbbc f9f3 	udiv	r9, ip, r3
 800ac42:	4610      	mov	r0, r2
 800ac44:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac48:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ac4c:	2f09      	cmp	r7, #9
 800ac4e:	d81b      	bhi.n	800ac88 <_strtol_l.constprop.0+0xa8>
 800ac50:	463c      	mov	r4, r7
 800ac52:	42a3      	cmp	r3, r4
 800ac54:	dd27      	ble.n	800aca6 <_strtol_l.constprop.0+0xc6>
 800ac56:	1c57      	adds	r7, r2, #1
 800ac58:	d007      	beq.n	800ac6a <_strtol_l.constprop.0+0x8a>
 800ac5a:	4581      	cmp	r9, r0
 800ac5c:	d320      	bcc.n	800aca0 <_strtol_l.constprop.0+0xc0>
 800ac5e:	d101      	bne.n	800ac64 <_strtol_l.constprop.0+0x84>
 800ac60:	45a2      	cmp	sl, r4
 800ac62:	db1d      	blt.n	800aca0 <_strtol_l.constprop.0+0xc0>
 800ac64:	fb00 4003 	mla	r0, r0, r3, r4
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac6e:	e7eb      	b.n	800ac48 <_strtol_l.constprop.0+0x68>
 800ac70:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac72:	bf04      	itt	eq
 800ac74:	782c      	ldrbeq	r4, [r5, #0]
 800ac76:	1c95      	addeq	r5, r2, #2
 800ac78:	e7cf      	b.n	800ac1a <_strtol_l.constprop.0+0x3a>
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1da      	bne.n	800ac34 <_strtol_l.constprop.0+0x54>
 800ac7e:	2c30      	cmp	r4, #48	@ 0x30
 800ac80:	bf0c      	ite	eq
 800ac82:	2308      	moveq	r3, #8
 800ac84:	230a      	movne	r3, #10
 800ac86:	e7d5      	b.n	800ac34 <_strtol_l.constprop.0+0x54>
 800ac88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ac8c:	2f19      	cmp	r7, #25
 800ac8e:	d801      	bhi.n	800ac94 <_strtol_l.constprop.0+0xb4>
 800ac90:	3c37      	subs	r4, #55	@ 0x37
 800ac92:	e7de      	b.n	800ac52 <_strtol_l.constprop.0+0x72>
 800ac94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ac98:	2f19      	cmp	r7, #25
 800ac9a:	d804      	bhi.n	800aca6 <_strtol_l.constprop.0+0xc6>
 800ac9c:	3c57      	subs	r4, #87	@ 0x57
 800ac9e:	e7d8      	b.n	800ac52 <_strtol_l.constprop.0+0x72>
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295
 800aca4:	e7e1      	b.n	800ac6a <_strtol_l.constprop.0+0x8a>
 800aca6:	1c53      	adds	r3, r2, #1
 800aca8:	d108      	bne.n	800acbc <_strtol_l.constprop.0+0xdc>
 800acaa:	2322      	movs	r3, #34	@ 0x22
 800acac:	f8ce 3000 	str.w	r3, [lr]
 800acb0:	4660      	mov	r0, ip
 800acb2:	f1b8 0f00 	cmp.w	r8, #0
 800acb6:	d0a0      	beq.n	800abfa <_strtol_l.constprop.0+0x1a>
 800acb8:	1e69      	subs	r1, r5, #1
 800acba:	e006      	b.n	800acca <_strtol_l.constprop.0+0xea>
 800acbc:	b106      	cbz	r6, 800acc0 <_strtol_l.constprop.0+0xe0>
 800acbe:	4240      	negs	r0, r0
 800acc0:	f1b8 0f00 	cmp.w	r8, #0
 800acc4:	d099      	beq.n	800abfa <_strtol_l.constprop.0+0x1a>
 800acc6:	2a00      	cmp	r2, #0
 800acc8:	d1f6      	bne.n	800acb8 <_strtol_l.constprop.0+0xd8>
 800acca:	f8c8 1000 	str.w	r1, [r8]
 800acce:	e794      	b.n	800abfa <_strtol_l.constprop.0+0x1a>
 800acd0:	080115a5 	.word	0x080115a5

0800acd4 <_strtol_r>:
 800acd4:	f7ff bf84 	b.w	800abe0 <_strtol_l.constprop.0>

0800acd8 <strtol>:
 800acd8:	4613      	mov	r3, r2
 800acda:	460a      	mov	r2, r1
 800acdc:	4601      	mov	r1, r0
 800acde:	4802      	ldr	r0, [pc, #8]	@ (800ace8 <strtol+0x10>)
 800ace0:	6800      	ldr	r0, [r0, #0]
 800ace2:	f7ff bf7d 	b.w	800abe0 <_strtol_l.constprop.0>
 800ace6:	bf00      	nop
 800ace8:	20000038 	.word	0x20000038

0800acec <__cvt>:
 800acec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acf0:	ec57 6b10 	vmov	r6, r7, d0
 800acf4:	2f00      	cmp	r7, #0
 800acf6:	460c      	mov	r4, r1
 800acf8:	4619      	mov	r1, r3
 800acfa:	463b      	mov	r3, r7
 800acfc:	bfbb      	ittet	lt
 800acfe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad02:	461f      	movlt	r7, r3
 800ad04:	2300      	movge	r3, #0
 800ad06:	232d      	movlt	r3, #45	@ 0x2d
 800ad08:	700b      	strb	r3, [r1, #0]
 800ad0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad10:	4691      	mov	r9, r2
 800ad12:	f023 0820 	bic.w	r8, r3, #32
 800ad16:	bfbc      	itt	lt
 800ad18:	4632      	movlt	r2, r6
 800ad1a:	4616      	movlt	r6, r2
 800ad1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad20:	d005      	beq.n	800ad2e <__cvt+0x42>
 800ad22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad26:	d100      	bne.n	800ad2a <__cvt+0x3e>
 800ad28:	3401      	adds	r4, #1
 800ad2a:	2102      	movs	r1, #2
 800ad2c:	e000      	b.n	800ad30 <__cvt+0x44>
 800ad2e:	2103      	movs	r1, #3
 800ad30:	ab03      	add	r3, sp, #12
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	ab02      	add	r3, sp, #8
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	ec47 6b10 	vmov	d0, r6, r7
 800ad3c:	4653      	mov	r3, sl
 800ad3e:	4622      	mov	r2, r4
 800ad40:	f001 f9ae 	bl	800c0a0 <_dtoa_r>
 800ad44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad48:	4605      	mov	r5, r0
 800ad4a:	d119      	bne.n	800ad80 <__cvt+0x94>
 800ad4c:	f019 0f01 	tst.w	r9, #1
 800ad50:	d00e      	beq.n	800ad70 <__cvt+0x84>
 800ad52:	eb00 0904 	add.w	r9, r0, r4
 800ad56:	2200      	movs	r2, #0
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	f7f5 fecb 	bl	8000af8 <__aeabi_dcmpeq>
 800ad62:	b108      	cbz	r0, 800ad68 <__cvt+0x7c>
 800ad64:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad68:	2230      	movs	r2, #48	@ 0x30
 800ad6a:	9b03      	ldr	r3, [sp, #12]
 800ad6c:	454b      	cmp	r3, r9
 800ad6e:	d31e      	bcc.n	800adae <__cvt+0xc2>
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad74:	1b5b      	subs	r3, r3, r5
 800ad76:	4628      	mov	r0, r5
 800ad78:	6013      	str	r3, [r2, #0]
 800ad7a:	b004      	add	sp, #16
 800ad7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad84:	eb00 0904 	add.w	r9, r0, r4
 800ad88:	d1e5      	bne.n	800ad56 <__cvt+0x6a>
 800ad8a:	7803      	ldrb	r3, [r0, #0]
 800ad8c:	2b30      	cmp	r3, #48	@ 0x30
 800ad8e:	d10a      	bne.n	800ada6 <__cvt+0xba>
 800ad90:	2200      	movs	r2, #0
 800ad92:	2300      	movs	r3, #0
 800ad94:	4630      	mov	r0, r6
 800ad96:	4639      	mov	r1, r7
 800ad98:	f7f5 feae 	bl	8000af8 <__aeabi_dcmpeq>
 800ad9c:	b918      	cbnz	r0, 800ada6 <__cvt+0xba>
 800ad9e:	f1c4 0401 	rsb	r4, r4, #1
 800ada2:	f8ca 4000 	str.w	r4, [sl]
 800ada6:	f8da 3000 	ldr.w	r3, [sl]
 800adaa:	4499      	add	r9, r3
 800adac:	e7d3      	b.n	800ad56 <__cvt+0x6a>
 800adae:	1c59      	adds	r1, r3, #1
 800adb0:	9103      	str	r1, [sp, #12]
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	e7d9      	b.n	800ad6a <__cvt+0x7e>

0800adb6 <__exponent>:
 800adb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adb8:	2900      	cmp	r1, #0
 800adba:	bfba      	itte	lt
 800adbc:	4249      	neglt	r1, r1
 800adbe:	232d      	movlt	r3, #45	@ 0x2d
 800adc0:	232b      	movge	r3, #43	@ 0x2b
 800adc2:	2909      	cmp	r1, #9
 800adc4:	7002      	strb	r2, [r0, #0]
 800adc6:	7043      	strb	r3, [r0, #1]
 800adc8:	dd29      	ble.n	800ae1e <__exponent+0x68>
 800adca:	f10d 0307 	add.w	r3, sp, #7
 800adce:	461d      	mov	r5, r3
 800add0:	270a      	movs	r7, #10
 800add2:	461a      	mov	r2, r3
 800add4:	fbb1 f6f7 	udiv	r6, r1, r7
 800add8:	fb07 1416 	mls	r4, r7, r6, r1
 800addc:	3430      	adds	r4, #48	@ 0x30
 800adde:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ade2:	460c      	mov	r4, r1
 800ade4:	2c63      	cmp	r4, #99	@ 0x63
 800ade6:	f103 33ff 	add.w	r3, r3, #4294967295
 800adea:	4631      	mov	r1, r6
 800adec:	dcf1      	bgt.n	800add2 <__exponent+0x1c>
 800adee:	3130      	adds	r1, #48	@ 0x30
 800adf0:	1e94      	subs	r4, r2, #2
 800adf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800adf6:	1c41      	adds	r1, r0, #1
 800adf8:	4623      	mov	r3, r4
 800adfa:	42ab      	cmp	r3, r5
 800adfc:	d30a      	bcc.n	800ae14 <__exponent+0x5e>
 800adfe:	f10d 0309 	add.w	r3, sp, #9
 800ae02:	1a9b      	subs	r3, r3, r2
 800ae04:	42ac      	cmp	r4, r5
 800ae06:	bf88      	it	hi
 800ae08:	2300      	movhi	r3, #0
 800ae0a:	3302      	adds	r3, #2
 800ae0c:	4403      	add	r3, r0
 800ae0e:	1a18      	subs	r0, r3, r0
 800ae10:	b003      	add	sp, #12
 800ae12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae14:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae18:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae1c:	e7ed      	b.n	800adfa <__exponent+0x44>
 800ae1e:	2330      	movs	r3, #48	@ 0x30
 800ae20:	3130      	adds	r1, #48	@ 0x30
 800ae22:	7083      	strb	r3, [r0, #2]
 800ae24:	70c1      	strb	r1, [r0, #3]
 800ae26:	1d03      	adds	r3, r0, #4
 800ae28:	e7f1      	b.n	800ae0e <__exponent+0x58>
	...

0800ae2c <_printf_float>:
 800ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae30:	b08d      	sub	sp, #52	@ 0x34
 800ae32:	460c      	mov	r4, r1
 800ae34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae38:	4616      	mov	r6, r2
 800ae3a:	461f      	mov	r7, r3
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	f001 f827 	bl	800be90 <_localeconv_r>
 800ae42:	6803      	ldr	r3, [r0, #0]
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7f5 fa2a 	bl	80002a0 <strlen>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae50:	f8d8 3000 	ldr.w	r3, [r8]
 800ae54:	9005      	str	r0, [sp, #20]
 800ae56:	3307      	adds	r3, #7
 800ae58:	f023 0307 	bic.w	r3, r3, #7
 800ae5c:	f103 0208 	add.w	r2, r3, #8
 800ae60:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae64:	f8d4 b000 	ldr.w	fp, [r4]
 800ae68:	f8c8 2000 	str.w	r2, [r8]
 800ae6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae74:	9307      	str	r3, [sp, #28]
 800ae76:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae82:	4b9c      	ldr	r3, [pc, #624]	@ (800b0f4 <_printf_float+0x2c8>)
 800ae84:	f04f 32ff 	mov.w	r2, #4294967295
 800ae88:	f7f5 fe68 	bl	8000b5c <__aeabi_dcmpun>
 800ae8c:	bb70      	cbnz	r0, 800aeec <_printf_float+0xc0>
 800ae8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae92:	4b98      	ldr	r3, [pc, #608]	@ (800b0f4 <_printf_float+0x2c8>)
 800ae94:	f04f 32ff 	mov.w	r2, #4294967295
 800ae98:	f7f5 fe42 	bl	8000b20 <__aeabi_dcmple>
 800ae9c:	bb30      	cbnz	r0, 800aeec <_printf_float+0xc0>
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2300      	movs	r3, #0
 800aea2:	4640      	mov	r0, r8
 800aea4:	4649      	mov	r1, r9
 800aea6:	f7f5 fe31 	bl	8000b0c <__aeabi_dcmplt>
 800aeaa:	b110      	cbz	r0, 800aeb2 <_printf_float+0x86>
 800aeac:	232d      	movs	r3, #45	@ 0x2d
 800aeae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aeb2:	4a91      	ldr	r2, [pc, #580]	@ (800b0f8 <_printf_float+0x2cc>)
 800aeb4:	4b91      	ldr	r3, [pc, #580]	@ (800b0fc <_printf_float+0x2d0>)
 800aeb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aeba:	bf94      	ite	ls
 800aebc:	4690      	movls	r8, r2
 800aebe:	4698      	movhi	r8, r3
 800aec0:	2303      	movs	r3, #3
 800aec2:	6123      	str	r3, [r4, #16]
 800aec4:	f02b 0304 	bic.w	r3, fp, #4
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	f04f 0900 	mov.w	r9, #0
 800aece:	9700      	str	r7, [sp, #0]
 800aed0:	4633      	mov	r3, r6
 800aed2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aed4:	4621      	mov	r1, r4
 800aed6:	4628      	mov	r0, r5
 800aed8:	f000 f9d2 	bl	800b280 <_printf_common>
 800aedc:	3001      	adds	r0, #1
 800aede:	f040 808d 	bne.w	800affc <_printf_float+0x1d0>
 800aee2:	f04f 30ff 	mov.w	r0, #4294967295
 800aee6:	b00d      	add	sp, #52	@ 0x34
 800aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeec:	4642      	mov	r2, r8
 800aeee:	464b      	mov	r3, r9
 800aef0:	4640      	mov	r0, r8
 800aef2:	4649      	mov	r1, r9
 800aef4:	f7f5 fe32 	bl	8000b5c <__aeabi_dcmpun>
 800aef8:	b140      	cbz	r0, 800af0c <_printf_float+0xe0>
 800aefa:	464b      	mov	r3, r9
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	bfbc      	itt	lt
 800af00:	232d      	movlt	r3, #45	@ 0x2d
 800af02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af06:	4a7e      	ldr	r2, [pc, #504]	@ (800b100 <_printf_float+0x2d4>)
 800af08:	4b7e      	ldr	r3, [pc, #504]	@ (800b104 <_printf_float+0x2d8>)
 800af0a:	e7d4      	b.n	800aeb6 <_printf_float+0x8a>
 800af0c:	6863      	ldr	r3, [r4, #4]
 800af0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af12:	9206      	str	r2, [sp, #24]
 800af14:	1c5a      	adds	r2, r3, #1
 800af16:	d13b      	bne.n	800af90 <_printf_float+0x164>
 800af18:	2306      	movs	r3, #6
 800af1a:	6063      	str	r3, [r4, #4]
 800af1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af20:	2300      	movs	r3, #0
 800af22:	6022      	str	r2, [r4, #0]
 800af24:	9303      	str	r3, [sp, #12]
 800af26:	ab0a      	add	r3, sp, #40	@ 0x28
 800af28:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af2c:	ab09      	add	r3, sp, #36	@ 0x24
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	6861      	ldr	r1, [r4, #4]
 800af32:	ec49 8b10 	vmov	d0, r8, r9
 800af36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af3a:	4628      	mov	r0, r5
 800af3c:	f7ff fed6 	bl	800acec <__cvt>
 800af40:	9b06      	ldr	r3, [sp, #24]
 800af42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af44:	2b47      	cmp	r3, #71	@ 0x47
 800af46:	4680      	mov	r8, r0
 800af48:	d129      	bne.n	800af9e <_printf_float+0x172>
 800af4a:	1cc8      	adds	r0, r1, #3
 800af4c:	db02      	blt.n	800af54 <_printf_float+0x128>
 800af4e:	6863      	ldr	r3, [r4, #4]
 800af50:	4299      	cmp	r1, r3
 800af52:	dd41      	ble.n	800afd8 <_printf_float+0x1ac>
 800af54:	f1aa 0a02 	sub.w	sl, sl, #2
 800af58:	fa5f fa8a 	uxtb.w	sl, sl
 800af5c:	3901      	subs	r1, #1
 800af5e:	4652      	mov	r2, sl
 800af60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af64:	9109      	str	r1, [sp, #36]	@ 0x24
 800af66:	f7ff ff26 	bl	800adb6 <__exponent>
 800af6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af6c:	1813      	adds	r3, r2, r0
 800af6e:	2a01      	cmp	r2, #1
 800af70:	4681      	mov	r9, r0
 800af72:	6123      	str	r3, [r4, #16]
 800af74:	dc02      	bgt.n	800af7c <_printf_float+0x150>
 800af76:	6822      	ldr	r2, [r4, #0]
 800af78:	07d2      	lsls	r2, r2, #31
 800af7a:	d501      	bpl.n	800af80 <_printf_float+0x154>
 800af7c:	3301      	adds	r3, #1
 800af7e:	6123      	str	r3, [r4, #16]
 800af80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af84:	2b00      	cmp	r3, #0
 800af86:	d0a2      	beq.n	800aece <_printf_float+0xa2>
 800af88:	232d      	movs	r3, #45	@ 0x2d
 800af8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af8e:	e79e      	b.n	800aece <_printf_float+0xa2>
 800af90:	9a06      	ldr	r2, [sp, #24]
 800af92:	2a47      	cmp	r2, #71	@ 0x47
 800af94:	d1c2      	bne.n	800af1c <_printf_float+0xf0>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1c0      	bne.n	800af1c <_printf_float+0xf0>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e7bd      	b.n	800af1a <_printf_float+0xee>
 800af9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afa2:	d9db      	bls.n	800af5c <_printf_float+0x130>
 800afa4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800afa8:	d118      	bne.n	800afdc <_printf_float+0x1b0>
 800afaa:	2900      	cmp	r1, #0
 800afac:	6863      	ldr	r3, [r4, #4]
 800afae:	dd0b      	ble.n	800afc8 <_printf_float+0x19c>
 800afb0:	6121      	str	r1, [r4, #16]
 800afb2:	b913      	cbnz	r3, 800afba <_printf_float+0x18e>
 800afb4:	6822      	ldr	r2, [r4, #0]
 800afb6:	07d0      	lsls	r0, r2, #31
 800afb8:	d502      	bpl.n	800afc0 <_printf_float+0x194>
 800afba:	3301      	adds	r3, #1
 800afbc:	440b      	add	r3, r1
 800afbe:	6123      	str	r3, [r4, #16]
 800afc0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800afc2:	f04f 0900 	mov.w	r9, #0
 800afc6:	e7db      	b.n	800af80 <_printf_float+0x154>
 800afc8:	b913      	cbnz	r3, 800afd0 <_printf_float+0x1a4>
 800afca:	6822      	ldr	r2, [r4, #0]
 800afcc:	07d2      	lsls	r2, r2, #31
 800afce:	d501      	bpl.n	800afd4 <_printf_float+0x1a8>
 800afd0:	3302      	adds	r3, #2
 800afd2:	e7f4      	b.n	800afbe <_printf_float+0x192>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e7f2      	b.n	800afbe <_printf_float+0x192>
 800afd8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800afdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afde:	4299      	cmp	r1, r3
 800afe0:	db05      	blt.n	800afee <_printf_float+0x1c2>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	6121      	str	r1, [r4, #16]
 800afe6:	07d8      	lsls	r0, r3, #31
 800afe8:	d5ea      	bpl.n	800afc0 <_printf_float+0x194>
 800afea:	1c4b      	adds	r3, r1, #1
 800afec:	e7e7      	b.n	800afbe <_printf_float+0x192>
 800afee:	2900      	cmp	r1, #0
 800aff0:	bfd4      	ite	le
 800aff2:	f1c1 0202 	rsble	r2, r1, #2
 800aff6:	2201      	movgt	r2, #1
 800aff8:	4413      	add	r3, r2
 800affa:	e7e0      	b.n	800afbe <_printf_float+0x192>
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	055a      	lsls	r2, r3, #21
 800b000:	d407      	bmi.n	800b012 <_printf_float+0x1e6>
 800b002:	6923      	ldr	r3, [r4, #16]
 800b004:	4642      	mov	r2, r8
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	d12b      	bne.n	800b068 <_printf_float+0x23c>
 800b010:	e767      	b.n	800aee2 <_printf_float+0xb6>
 800b012:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b016:	f240 80dd 	bls.w	800b1d4 <_printf_float+0x3a8>
 800b01a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b01e:	2200      	movs	r2, #0
 800b020:	2300      	movs	r3, #0
 800b022:	f7f5 fd69 	bl	8000af8 <__aeabi_dcmpeq>
 800b026:	2800      	cmp	r0, #0
 800b028:	d033      	beq.n	800b092 <_printf_float+0x266>
 800b02a:	4a37      	ldr	r2, [pc, #220]	@ (800b108 <_printf_float+0x2dc>)
 800b02c:	2301      	movs	r3, #1
 800b02e:	4631      	mov	r1, r6
 800b030:	4628      	mov	r0, r5
 800b032:	47b8      	blx	r7
 800b034:	3001      	adds	r0, #1
 800b036:	f43f af54 	beq.w	800aee2 <_printf_float+0xb6>
 800b03a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b03e:	4543      	cmp	r3, r8
 800b040:	db02      	blt.n	800b048 <_printf_float+0x21c>
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	07d8      	lsls	r0, r3, #31
 800b046:	d50f      	bpl.n	800b068 <_printf_float+0x23c>
 800b048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b04c:	4631      	mov	r1, r6
 800b04e:	4628      	mov	r0, r5
 800b050:	47b8      	blx	r7
 800b052:	3001      	adds	r0, #1
 800b054:	f43f af45 	beq.w	800aee2 <_printf_float+0xb6>
 800b058:	f04f 0900 	mov.w	r9, #0
 800b05c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b060:	f104 0a1a 	add.w	sl, r4, #26
 800b064:	45c8      	cmp	r8, r9
 800b066:	dc09      	bgt.n	800b07c <_printf_float+0x250>
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	079b      	lsls	r3, r3, #30
 800b06c:	f100 8103 	bmi.w	800b276 <_printf_float+0x44a>
 800b070:	68e0      	ldr	r0, [r4, #12]
 800b072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b074:	4298      	cmp	r0, r3
 800b076:	bfb8      	it	lt
 800b078:	4618      	movlt	r0, r3
 800b07a:	e734      	b.n	800aee6 <_printf_float+0xba>
 800b07c:	2301      	movs	r3, #1
 800b07e:	4652      	mov	r2, sl
 800b080:	4631      	mov	r1, r6
 800b082:	4628      	mov	r0, r5
 800b084:	47b8      	blx	r7
 800b086:	3001      	adds	r0, #1
 800b088:	f43f af2b 	beq.w	800aee2 <_printf_float+0xb6>
 800b08c:	f109 0901 	add.w	r9, r9, #1
 800b090:	e7e8      	b.n	800b064 <_printf_float+0x238>
 800b092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b094:	2b00      	cmp	r3, #0
 800b096:	dc39      	bgt.n	800b10c <_printf_float+0x2e0>
 800b098:	4a1b      	ldr	r2, [pc, #108]	@ (800b108 <_printf_float+0x2dc>)
 800b09a:	2301      	movs	r3, #1
 800b09c:	4631      	mov	r1, r6
 800b09e:	4628      	mov	r0, r5
 800b0a0:	47b8      	blx	r7
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	f43f af1d 	beq.w	800aee2 <_printf_float+0xb6>
 800b0a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b0ac:	ea59 0303 	orrs.w	r3, r9, r3
 800b0b0:	d102      	bne.n	800b0b8 <_printf_float+0x28c>
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	07d9      	lsls	r1, r3, #31
 800b0b6:	d5d7      	bpl.n	800b068 <_printf_float+0x23c>
 800b0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4628      	mov	r0, r5
 800b0c0:	47b8      	blx	r7
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	f43f af0d 	beq.w	800aee2 <_printf_float+0xb6>
 800b0c8:	f04f 0a00 	mov.w	sl, #0
 800b0cc:	f104 0b1a 	add.w	fp, r4, #26
 800b0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d2:	425b      	negs	r3, r3
 800b0d4:	4553      	cmp	r3, sl
 800b0d6:	dc01      	bgt.n	800b0dc <_printf_float+0x2b0>
 800b0d8:	464b      	mov	r3, r9
 800b0da:	e793      	b.n	800b004 <_printf_float+0x1d8>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	465a      	mov	r2, fp
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	47b8      	blx	r7
 800b0e6:	3001      	adds	r0, #1
 800b0e8:	f43f aefb 	beq.w	800aee2 <_printf_float+0xb6>
 800b0ec:	f10a 0a01 	add.w	sl, sl, #1
 800b0f0:	e7ee      	b.n	800b0d0 <_printf_float+0x2a4>
 800b0f2:	bf00      	nop
 800b0f4:	7fefffff 	.word	0x7fefffff
 800b0f8:	080116a5 	.word	0x080116a5
 800b0fc:	080116a9 	.word	0x080116a9
 800b100:	080116ad 	.word	0x080116ad
 800b104:	080116b1 	.word	0x080116b1
 800b108:	0801193f 	.word	0x0801193f
 800b10c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b10e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b112:	4553      	cmp	r3, sl
 800b114:	bfa8      	it	ge
 800b116:	4653      	movge	r3, sl
 800b118:	2b00      	cmp	r3, #0
 800b11a:	4699      	mov	r9, r3
 800b11c:	dc36      	bgt.n	800b18c <_printf_float+0x360>
 800b11e:	f04f 0b00 	mov.w	fp, #0
 800b122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b126:	f104 021a 	add.w	r2, r4, #26
 800b12a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b12c:	9306      	str	r3, [sp, #24]
 800b12e:	eba3 0309 	sub.w	r3, r3, r9
 800b132:	455b      	cmp	r3, fp
 800b134:	dc31      	bgt.n	800b19a <_printf_float+0x36e>
 800b136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b138:	459a      	cmp	sl, r3
 800b13a:	dc3a      	bgt.n	800b1b2 <_printf_float+0x386>
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	07da      	lsls	r2, r3, #31
 800b140:	d437      	bmi.n	800b1b2 <_printf_float+0x386>
 800b142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b144:	ebaa 0903 	sub.w	r9, sl, r3
 800b148:	9b06      	ldr	r3, [sp, #24]
 800b14a:	ebaa 0303 	sub.w	r3, sl, r3
 800b14e:	4599      	cmp	r9, r3
 800b150:	bfa8      	it	ge
 800b152:	4699      	movge	r9, r3
 800b154:	f1b9 0f00 	cmp.w	r9, #0
 800b158:	dc33      	bgt.n	800b1c2 <_printf_float+0x396>
 800b15a:	f04f 0800 	mov.w	r8, #0
 800b15e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b162:	f104 0b1a 	add.w	fp, r4, #26
 800b166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b168:	ebaa 0303 	sub.w	r3, sl, r3
 800b16c:	eba3 0309 	sub.w	r3, r3, r9
 800b170:	4543      	cmp	r3, r8
 800b172:	f77f af79 	ble.w	800b068 <_printf_float+0x23c>
 800b176:	2301      	movs	r3, #1
 800b178:	465a      	mov	r2, fp
 800b17a:	4631      	mov	r1, r6
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b8      	blx	r7
 800b180:	3001      	adds	r0, #1
 800b182:	f43f aeae 	beq.w	800aee2 <_printf_float+0xb6>
 800b186:	f108 0801 	add.w	r8, r8, #1
 800b18a:	e7ec      	b.n	800b166 <_printf_float+0x33a>
 800b18c:	4642      	mov	r2, r8
 800b18e:	4631      	mov	r1, r6
 800b190:	4628      	mov	r0, r5
 800b192:	47b8      	blx	r7
 800b194:	3001      	adds	r0, #1
 800b196:	d1c2      	bne.n	800b11e <_printf_float+0x2f2>
 800b198:	e6a3      	b.n	800aee2 <_printf_float+0xb6>
 800b19a:	2301      	movs	r3, #1
 800b19c:	4631      	mov	r1, r6
 800b19e:	4628      	mov	r0, r5
 800b1a0:	9206      	str	r2, [sp, #24]
 800b1a2:	47b8      	blx	r7
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	f43f ae9c 	beq.w	800aee2 <_printf_float+0xb6>
 800b1aa:	9a06      	ldr	r2, [sp, #24]
 800b1ac:	f10b 0b01 	add.w	fp, fp, #1
 800b1b0:	e7bb      	b.n	800b12a <_printf_float+0x2fe>
 800b1b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b8      	blx	r7
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d1c0      	bne.n	800b142 <_printf_float+0x316>
 800b1c0:	e68f      	b.n	800aee2 <_printf_float+0xb6>
 800b1c2:	9a06      	ldr	r2, [sp, #24]
 800b1c4:	464b      	mov	r3, r9
 800b1c6:	4442      	add	r2, r8
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	47b8      	blx	r7
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d1c3      	bne.n	800b15a <_printf_float+0x32e>
 800b1d2:	e686      	b.n	800aee2 <_printf_float+0xb6>
 800b1d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1d8:	f1ba 0f01 	cmp.w	sl, #1
 800b1dc:	dc01      	bgt.n	800b1e2 <_printf_float+0x3b6>
 800b1de:	07db      	lsls	r3, r3, #31
 800b1e0:	d536      	bpl.n	800b250 <_printf_float+0x424>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	f43f ae78 	beq.w	800aee2 <_printf_float+0xb6>
 800b1f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f ae70 	beq.w	800aee2 <_printf_float+0xb6>
 800b202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b206:	2200      	movs	r2, #0
 800b208:	2300      	movs	r3, #0
 800b20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b20e:	f7f5 fc73 	bl	8000af8 <__aeabi_dcmpeq>
 800b212:	b9c0      	cbnz	r0, 800b246 <_printf_float+0x41a>
 800b214:	4653      	mov	r3, sl
 800b216:	f108 0201 	add.w	r2, r8, #1
 800b21a:	4631      	mov	r1, r6
 800b21c:	4628      	mov	r0, r5
 800b21e:	47b8      	blx	r7
 800b220:	3001      	adds	r0, #1
 800b222:	d10c      	bne.n	800b23e <_printf_float+0x412>
 800b224:	e65d      	b.n	800aee2 <_printf_float+0xb6>
 800b226:	2301      	movs	r3, #1
 800b228:	465a      	mov	r2, fp
 800b22a:	4631      	mov	r1, r6
 800b22c:	4628      	mov	r0, r5
 800b22e:	47b8      	blx	r7
 800b230:	3001      	adds	r0, #1
 800b232:	f43f ae56 	beq.w	800aee2 <_printf_float+0xb6>
 800b236:	f108 0801 	add.w	r8, r8, #1
 800b23a:	45d0      	cmp	r8, sl
 800b23c:	dbf3      	blt.n	800b226 <_printf_float+0x3fa>
 800b23e:	464b      	mov	r3, r9
 800b240:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b244:	e6df      	b.n	800b006 <_printf_float+0x1da>
 800b246:	f04f 0800 	mov.w	r8, #0
 800b24a:	f104 0b1a 	add.w	fp, r4, #26
 800b24e:	e7f4      	b.n	800b23a <_printf_float+0x40e>
 800b250:	2301      	movs	r3, #1
 800b252:	4642      	mov	r2, r8
 800b254:	e7e1      	b.n	800b21a <_printf_float+0x3ee>
 800b256:	2301      	movs	r3, #1
 800b258:	464a      	mov	r2, r9
 800b25a:	4631      	mov	r1, r6
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b8      	blx	r7
 800b260:	3001      	adds	r0, #1
 800b262:	f43f ae3e 	beq.w	800aee2 <_printf_float+0xb6>
 800b266:	f108 0801 	add.w	r8, r8, #1
 800b26a:	68e3      	ldr	r3, [r4, #12]
 800b26c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b26e:	1a5b      	subs	r3, r3, r1
 800b270:	4543      	cmp	r3, r8
 800b272:	dcf0      	bgt.n	800b256 <_printf_float+0x42a>
 800b274:	e6fc      	b.n	800b070 <_printf_float+0x244>
 800b276:	f04f 0800 	mov.w	r8, #0
 800b27a:	f104 0919 	add.w	r9, r4, #25
 800b27e:	e7f4      	b.n	800b26a <_printf_float+0x43e>

0800b280 <_printf_common>:
 800b280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b284:	4616      	mov	r6, r2
 800b286:	4698      	mov	r8, r3
 800b288:	688a      	ldr	r2, [r1, #8]
 800b28a:	690b      	ldr	r3, [r1, #16]
 800b28c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b290:	4293      	cmp	r3, r2
 800b292:	bfb8      	it	lt
 800b294:	4613      	movlt	r3, r2
 800b296:	6033      	str	r3, [r6, #0]
 800b298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b29c:	4607      	mov	r7, r0
 800b29e:	460c      	mov	r4, r1
 800b2a0:	b10a      	cbz	r2, 800b2a6 <_printf_common+0x26>
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	6033      	str	r3, [r6, #0]
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	0699      	lsls	r1, r3, #26
 800b2aa:	bf42      	ittt	mi
 800b2ac:	6833      	ldrmi	r3, [r6, #0]
 800b2ae:	3302      	addmi	r3, #2
 800b2b0:	6033      	strmi	r3, [r6, #0]
 800b2b2:	6825      	ldr	r5, [r4, #0]
 800b2b4:	f015 0506 	ands.w	r5, r5, #6
 800b2b8:	d106      	bne.n	800b2c8 <_printf_common+0x48>
 800b2ba:	f104 0a19 	add.w	sl, r4, #25
 800b2be:	68e3      	ldr	r3, [r4, #12]
 800b2c0:	6832      	ldr	r2, [r6, #0]
 800b2c2:	1a9b      	subs	r3, r3, r2
 800b2c4:	42ab      	cmp	r3, r5
 800b2c6:	dc26      	bgt.n	800b316 <_printf_common+0x96>
 800b2c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2cc:	6822      	ldr	r2, [r4, #0]
 800b2ce:	3b00      	subs	r3, #0
 800b2d0:	bf18      	it	ne
 800b2d2:	2301      	movne	r3, #1
 800b2d4:	0692      	lsls	r2, r2, #26
 800b2d6:	d42b      	bmi.n	800b330 <_printf_common+0xb0>
 800b2d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2dc:	4641      	mov	r1, r8
 800b2de:	4638      	mov	r0, r7
 800b2e0:	47c8      	blx	r9
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d01e      	beq.n	800b324 <_printf_common+0xa4>
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	6922      	ldr	r2, [r4, #16]
 800b2ea:	f003 0306 	and.w	r3, r3, #6
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	bf02      	ittt	eq
 800b2f2:	68e5      	ldreq	r5, [r4, #12]
 800b2f4:	6833      	ldreq	r3, [r6, #0]
 800b2f6:	1aed      	subeq	r5, r5, r3
 800b2f8:	68a3      	ldr	r3, [r4, #8]
 800b2fa:	bf0c      	ite	eq
 800b2fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b300:	2500      	movne	r5, #0
 800b302:	4293      	cmp	r3, r2
 800b304:	bfc4      	itt	gt
 800b306:	1a9b      	subgt	r3, r3, r2
 800b308:	18ed      	addgt	r5, r5, r3
 800b30a:	2600      	movs	r6, #0
 800b30c:	341a      	adds	r4, #26
 800b30e:	42b5      	cmp	r5, r6
 800b310:	d11a      	bne.n	800b348 <_printf_common+0xc8>
 800b312:	2000      	movs	r0, #0
 800b314:	e008      	b.n	800b328 <_printf_common+0xa8>
 800b316:	2301      	movs	r3, #1
 800b318:	4652      	mov	r2, sl
 800b31a:	4641      	mov	r1, r8
 800b31c:	4638      	mov	r0, r7
 800b31e:	47c8      	blx	r9
 800b320:	3001      	adds	r0, #1
 800b322:	d103      	bne.n	800b32c <_printf_common+0xac>
 800b324:	f04f 30ff 	mov.w	r0, #4294967295
 800b328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b32c:	3501      	adds	r5, #1
 800b32e:	e7c6      	b.n	800b2be <_printf_common+0x3e>
 800b330:	18e1      	adds	r1, r4, r3
 800b332:	1c5a      	adds	r2, r3, #1
 800b334:	2030      	movs	r0, #48	@ 0x30
 800b336:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b33a:	4422      	add	r2, r4
 800b33c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b344:	3302      	adds	r3, #2
 800b346:	e7c7      	b.n	800b2d8 <_printf_common+0x58>
 800b348:	2301      	movs	r3, #1
 800b34a:	4622      	mov	r2, r4
 800b34c:	4641      	mov	r1, r8
 800b34e:	4638      	mov	r0, r7
 800b350:	47c8      	blx	r9
 800b352:	3001      	adds	r0, #1
 800b354:	d0e6      	beq.n	800b324 <_printf_common+0xa4>
 800b356:	3601      	adds	r6, #1
 800b358:	e7d9      	b.n	800b30e <_printf_common+0x8e>
	...

0800b35c <_printf_i>:
 800b35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	7e0f      	ldrb	r7, [r1, #24]
 800b362:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b364:	2f78      	cmp	r7, #120	@ 0x78
 800b366:	4691      	mov	r9, r2
 800b368:	4680      	mov	r8, r0
 800b36a:	460c      	mov	r4, r1
 800b36c:	469a      	mov	sl, r3
 800b36e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b372:	d807      	bhi.n	800b384 <_printf_i+0x28>
 800b374:	2f62      	cmp	r7, #98	@ 0x62
 800b376:	d80a      	bhi.n	800b38e <_printf_i+0x32>
 800b378:	2f00      	cmp	r7, #0
 800b37a:	f000 80d2 	beq.w	800b522 <_printf_i+0x1c6>
 800b37e:	2f58      	cmp	r7, #88	@ 0x58
 800b380:	f000 80b9 	beq.w	800b4f6 <_printf_i+0x19a>
 800b384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b388:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b38c:	e03a      	b.n	800b404 <_printf_i+0xa8>
 800b38e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b392:	2b15      	cmp	r3, #21
 800b394:	d8f6      	bhi.n	800b384 <_printf_i+0x28>
 800b396:	a101      	add	r1, pc, #4	@ (adr r1, 800b39c <_printf_i+0x40>)
 800b398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b39c:	0800b3f5 	.word	0x0800b3f5
 800b3a0:	0800b409 	.word	0x0800b409
 800b3a4:	0800b385 	.word	0x0800b385
 800b3a8:	0800b385 	.word	0x0800b385
 800b3ac:	0800b385 	.word	0x0800b385
 800b3b0:	0800b385 	.word	0x0800b385
 800b3b4:	0800b409 	.word	0x0800b409
 800b3b8:	0800b385 	.word	0x0800b385
 800b3bc:	0800b385 	.word	0x0800b385
 800b3c0:	0800b385 	.word	0x0800b385
 800b3c4:	0800b385 	.word	0x0800b385
 800b3c8:	0800b509 	.word	0x0800b509
 800b3cc:	0800b433 	.word	0x0800b433
 800b3d0:	0800b4c3 	.word	0x0800b4c3
 800b3d4:	0800b385 	.word	0x0800b385
 800b3d8:	0800b385 	.word	0x0800b385
 800b3dc:	0800b52b 	.word	0x0800b52b
 800b3e0:	0800b385 	.word	0x0800b385
 800b3e4:	0800b433 	.word	0x0800b433
 800b3e8:	0800b385 	.word	0x0800b385
 800b3ec:	0800b385 	.word	0x0800b385
 800b3f0:	0800b4cb 	.word	0x0800b4cb
 800b3f4:	6833      	ldr	r3, [r6, #0]
 800b3f6:	1d1a      	adds	r2, r3, #4
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6032      	str	r2, [r6, #0]
 800b3fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b400:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b404:	2301      	movs	r3, #1
 800b406:	e09d      	b.n	800b544 <_printf_i+0x1e8>
 800b408:	6833      	ldr	r3, [r6, #0]
 800b40a:	6820      	ldr	r0, [r4, #0]
 800b40c:	1d19      	adds	r1, r3, #4
 800b40e:	6031      	str	r1, [r6, #0]
 800b410:	0606      	lsls	r6, r0, #24
 800b412:	d501      	bpl.n	800b418 <_printf_i+0xbc>
 800b414:	681d      	ldr	r5, [r3, #0]
 800b416:	e003      	b.n	800b420 <_printf_i+0xc4>
 800b418:	0645      	lsls	r5, r0, #25
 800b41a:	d5fb      	bpl.n	800b414 <_printf_i+0xb8>
 800b41c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b420:	2d00      	cmp	r5, #0
 800b422:	da03      	bge.n	800b42c <_printf_i+0xd0>
 800b424:	232d      	movs	r3, #45	@ 0x2d
 800b426:	426d      	negs	r5, r5
 800b428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b42c:	4859      	ldr	r0, [pc, #356]	@ (800b594 <_printf_i+0x238>)
 800b42e:	230a      	movs	r3, #10
 800b430:	e011      	b.n	800b456 <_printf_i+0xfa>
 800b432:	6821      	ldr	r1, [r4, #0]
 800b434:	6833      	ldr	r3, [r6, #0]
 800b436:	0608      	lsls	r0, r1, #24
 800b438:	f853 5b04 	ldr.w	r5, [r3], #4
 800b43c:	d402      	bmi.n	800b444 <_printf_i+0xe8>
 800b43e:	0649      	lsls	r1, r1, #25
 800b440:	bf48      	it	mi
 800b442:	b2ad      	uxthmi	r5, r5
 800b444:	2f6f      	cmp	r7, #111	@ 0x6f
 800b446:	4853      	ldr	r0, [pc, #332]	@ (800b594 <_printf_i+0x238>)
 800b448:	6033      	str	r3, [r6, #0]
 800b44a:	bf14      	ite	ne
 800b44c:	230a      	movne	r3, #10
 800b44e:	2308      	moveq	r3, #8
 800b450:	2100      	movs	r1, #0
 800b452:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b456:	6866      	ldr	r6, [r4, #4]
 800b458:	60a6      	str	r6, [r4, #8]
 800b45a:	2e00      	cmp	r6, #0
 800b45c:	bfa2      	ittt	ge
 800b45e:	6821      	ldrge	r1, [r4, #0]
 800b460:	f021 0104 	bicge.w	r1, r1, #4
 800b464:	6021      	strge	r1, [r4, #0]
 800b466:	b90d      	cbnz	r5, 800b46c <_printf_i+0x110>
 800b468:	2e00      	cmp	r6, #0
 800b46a:	d04b      	beq.n	800b504 <_printf_i+0x1a8>
 800b46c:	4616      	mov	r6, r2
 800b46e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b472:	fb03 5711 	mls	r7, r3, r1, r5
 800b476:	5dc7      	ldrb	r7, [r0, r7]
 800b478:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b47c:	462f      	mov	r7, r5
 800b47e:	42bb      	cmp	r3, r7
 800b480:	460d      	mov	r5, r1
 800b482:	d9f4      	bls.n	800b46e <_printf_i+0x112>
 800b484:	2b08      	cmp	r3, #8
 800b486:	d10b      	bne.n	800b4a0 <_printf_i+0x144>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	07df      	lsls	r7, r3, #31
 800b48c:	d508      	bpl.n	800b4a0 <_printf_i+0x144>
 800b48e:	6923      	ldr	r3, [r4, #16]
 800b490:	6861      	ldr	r1, [r4, #4]
 800b492:	4299      	cmp	r1, r3
 800b494:	bfde      	ittt	le
 800b496:	2330      	movle	r3, #48	@ 0x30
 800b498:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b49c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4a0:	1b92      	subs	r2, r2, r6
 800b4a2:	6122      	str	r2, [r4, #16]
 800b4a4:	f8cd a000 	str.w	sl, [sp]
 800b4a8:	464b      	mov	r3, r9
 800b4aa:	aa03      	add	r2, sp, #12
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	f7ff fee6 	bl	800b280 <_printf_common>
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	d14a      	bne.n	800b54e <_printf_i+0x1f2>
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4bc:	b004      	add	sp, #16
 800b4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	f043 0320 	orr.w	r3, r3, #32
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	4833      	ldr	r0, [pc, #204]	@ (800b598 <_printf_i+0x23c>)
 800b4cc:	2778      	movs	r7, #120	@ 0x78
 800b4ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	6831      	ldr	r1, [r6, #0]
 800b4d6:	061f      	lsls	r7, r3, #24
 800b4d8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4dc:	d402      	bmi.n	800b4e4 <_printf_i+0x188>
 800b4de:	065f      	lsls	r7, r3, #25
 800b4e0:	bf48      	it	mi
 800b4e2:	b2ad      	uxthmi	r5, r5
 800b4e4:	6031      	str	r1, [r6, #0]
 800b4e6:	07d9      	lsls	r1, r3, #31
 800b4e8:	bf44      	itt	mi
 800b4ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b4ee:	6023      	strmi	r3, [r4, #0]
 800b4f0:	b11d      	cbz	r5, 800b4fa <_printf_i+0x19e>
 800b4f2:	2310      	movs	r3, #16
 800b4f4:	e7ac      	b.n	800b450 <_printf_i+0xf4>
 800b4f6:	4827      	ldr	r0, [pc, #156]	@ (800b594 <_printf_i+0x238>)
 800b4f8:	e7e9      	b.n	800b4ce <_printf_i+0x172>
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	f023 0320 	bic.w	r3, r3, #32
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	e7f6      	b.n	800b4f2 <_printf_i+0x196>
 800b504:	4616      	mov	r6, r2
 800b506:	e7bd      	b.n	800b484 <_printf_i+0x128>
 800b508:	6833      	ldr	r3, [r6, #0]
 800b50a:	6825      	ldr	r5, [r4, #0]
 800b50c:	6961      	ldr	r1, [r4, #20]
 800b50e:	1d18      	adds	r0, r3, #4
 800b510:	6030      	str	r0, [r6, #0]
 800b512:	062e      	lsls	r6, r5, #24
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	d501      	bpl.n	800b51c <_printf_i+0x1c0>
 800b518:	6019      	str	r1, [r3, #0]
 800b51a:	e002      	b.n	800b522 <_printf_i+0x1c6>
 800b51c:	0668      	lsls	r0, r5, #25
 800b51e:	d5fb      	bpl.n	800b518 <_printf_i+0x1bc>
 800b520:	8019      	strh	r1, [r3, #0]
 800b522:	2300      	movs	r3, #0
 800b524:	6123      	str	r3, [r4, #16]
 800b526:	4616      	mov	r6, r2
 800b528:	e7bc      	b.n	800b4a4 <_printf_i+0x148>
 800b52a:	6833      	ldr	r3, [r6, #0]
 800b52c:	1d1a      	adds	r2, r3, #4
 800b52e:	6032      	str	r2, [r6, #0]
 800b530:	681e      	ldr	r6, [r3, #0]
 800b532:	6862      	ldr	r2, [r4, #4]
 800b534:	2100      	movs	r1, #0
 800b536:	4630      	mov	r0, r6
 800b538:	f7f4 fe62 	bl	8000200 <memchr>
 800b53c:	b108      	cbz	r0, 800b542 <_printf_i+0x1e6>
 800b53e:	1b80      	subs	r0, r0, r6
 800b540:	6060      	str	r0, [r4, #4]
 800b542:	6863      	ldr	r3, [r4, #4]
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	2300      	movs	r3, #0
 800b548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b54c:	e7aa      	b.n	800b4a4 <_printf_i+0x148>
 800b54e:	6923      	ldr	r3, [r4, #16]
 800b550:	4632      	mov	r2, r6
 800b552:	4649      	mov	r1, r9
 800b554:	4640      	mov	r0, r8
 800b556:	47d0      	blx	sl
 800b558:	3001      	adds	r0, #1
 800b55a:	d0ad      	beq.n	800b4b8 <_printf_i+0x15c>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	079b      	lsls	r3, r3, #30
 800b560:	d413      	bmi.n	800b58a <_printf_i+0x22e>
 800b562:	68e0      	ldr	r0, [r4, #12]
 800b564:	9b03      	ldr	r3, [sp, #12]
 800b566:	4298      	cmp	r0, r3
 800b568:	bfb8      	it	lt
 800b56a:	4618      	movlt	r0, r3
 800b56c:	e7a6      	b.n	800b4bc <_printf_i+0x160>
 800b56e:	2301      	movs	r3, #1
 800b570:	4632      	mov	r2, r6
 800b572:	4649      	mov	r1, r9
 800b574:	4640      	mov	r0, r8
 800b576:	47d0      	blx	sl
 800b578:	3001      	adds	r0, #1
 800b57a:	d09d      	beq.n	800b4b8 <_printf_i+0x15c>
 800b57c:	3501      	adds	r5, #1
 800b57e:	68e3      	ldr	r3, [r4, #12]
 800b580:	9903      	ldr	r1, [sp, #12]
 800b582:	1a5b      	subs	r3, r3, r1
 800b584:	42ab      	cmp	r3, r5
 800b586:	dcf2      	bgt.n	800b56e <_printf_i+0x212>
 800b588:	e7eb      	b.n	800b562 <_printf_i+0x206>
 800b58a:	2500      	movs	r5, #0
 800b58c:	f104 0619 	add.w	r6, r4, #25
 800b590:	e7f5      	b.n	800b57e <_printf_i+0x222>
 800b592:	bf00      	nop
 800b594:	080116b5 	.word	0x080116b5
 800b598:	080116c6 	.word	0x080116c6

0800b59c <_scanf_float>:
 800b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	b087      	sub	sp, #28
 800b5a2:	4617      	mov	r7, r2
 800b5a4:	9303      	str	r3, [sp, #12]
 800b5a6:	688b      	ldr	r3, [r1, #8]
 800b5a8:	1e5a      	subs	r2, r3, #1
 800b5aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b5ae:	bf81      	itttt	hi
 800b5b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b5b4:	eb03 0b05 	addhi.w	fp, r3, r5
 800b5b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b5bc:	608b      	strhi	r3, [r1, #8]
 800b5be:	680b      	ldr	r3, [r1, #0]
 800b5c0:	460a      	mov	r2, r1
 800b5c2:	f04f 0500 	mov.w	r5, #0
 800b5c6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b5ca:	f842 3b1c 	str.w	r3, [r2], #28
 800b5ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b5d2:	4680      	mov	r8, r0
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	bf98      	it	ls
 800b5d8:	f04f 0b00 	movls.w	fp, #0
 800b5dc:	9201      	str	r2, [sp, #4]
 800b5de:	4616      	mov	r6, r2
 800b5e0:	46aa      	mov	sl, r5
 800b5e2:	46a9      	mov	r9, r5
 800b5e4:	9502      	str	r5, [sp, #8]
 800b5e6:	68a2      	ldr	r2, [r4, #8]
 800b5e8:	b152      	cbz	r2, 800b600 <_scanf_float+0x64>
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	2b4e      	cmp	r3, #78	@ 0x4e
 800b5f0:	d864      	bhi.n	800b6bc <_scanf_float+0x120>
 800b5f2:	2b40      	cmp	r3, #64	@ 0x40
 800b5f4:	d83c      	bhi.n	800b670 <_scanf_float+0xd4>
 800b5f6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b5fa:	b2c8      	uxtb	r0, r1
 800b5fc:	280e      	cmp	r0, #14
 800b5fe:	d93a      	bls.n	800b676 <_scanf_float+0xda>
 800b600:	f1b9 0f00 	cmp.w	r9, #0
 800b604:	d003      	beq.n	800b60e <_scanf_float+0x72>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b612:	f1ba 0f01 	cmp.w	sl, #1
 800b616:	f200 8117 	bhi.w	800b848 <_scanf_float+0x2ac>
 800b61a:	9b01      	ldr	r3, [sp, #4]
 800b61c:	429e      	cmp	r6, r3
 800b61e:	f200 8108 	bhi.w	800b832 <_scanf_float+0x296>
 800b622:	2001      	movs	r0, #1
 800b624:	b007      	add	sp, #28
 800b626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b62e:	2a0d      	cmp	r2, #13
 800b630:	d8e6      	bhi.n	800b600 <_scanf_float+0x64>
 800b632:	a101      	add	r1, pc, #4	@ (adr r1, 800b638 <_scanf_float+0x9c>)
 800b634:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b638:	0800b77f 	.word	0x0800b77f
 800b63c:	0800b601 	.word	0x0800b601
 800b640:	0800b601 	.word	0x0800b601
 800b644:	0800b601 	.word	0x0800b601
 800b648:	0800b7df 	.word	0x0800b7df
 800b64c:	0800b7b7 	.word	0x0800b7b7
 800b650:	0800b601 	.word	0x0800b601
 800b654:	0800b601 	.word	0x0800b601
 800b658:	0800b78d 	.word	0x0800b78d
 800b65c:	0800b601 	.word	0x0800b601
 800b660:	0800b601 	.word	0x0800b601
 800b664:	0800b601 	.word	0x0800b601
 800b668:	0800b601 	.word	0x0800b601
 800b66c:	0800b745 	.word	0x0800b745
 800b670:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b674:	e7db      	b.n	800b62e <_scanf_float+0x92>
 800b676:	290e      	cmp	r1, #14
 800b678:	d8c2      	bhi.n	800b600 <_scanf_float+0x64>
 800b67a:	a001      	add	r0, pc, #4	@ (adr r0, 800b680 <_scanf_float+0xe4>)
 800b67c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b680:	0800b735 	.word	0x0800b735
 800b684:	0800b601 	.word	0x0800b601
 800b688:	0800b735 	.word	0x0800b735
 800b68c:	0800b7cb 	.word	0x0800b7cb
 800b690:	0800b601 	.word	0x0800b601
 800b694:	0800b6dd 	.word	0x0800b6dd
 800b698:	0800b71b 	.word	0x0800b71b
 800b69c:	0800b71b 	.word	0x0800b71b
 800b6a0:	0800b71b 	.word	0x0800b71b
 800b6a4:	0800b71b 	.word	0x0800b71b
 800b6a8:	0800b71b 	.word	0x0800b71b
 800b6ac:	0800b71b 	.word	0x0800b71b
 800b6b0:	0800b71b 	.word	0x0800b71b
 800b6b4:	0800b71b 	.word	0x0800b71b
 800b6b8:	0800b71b 	.word	0x0800b71b
 800b6bc:	2b6e      	cmp	r3, #110	@ 0x6e
 800b6be:	d809      	bhi.n	800b6d4 <_scanf_float+0x138>
 800b6c0:	2b60      	cmp	r3, #96	@ 0x60
 800b6c2:	d8b2      	bhi.n	800b62a <_scanf_float+0x8e>
 800b6c4:	2b54      	cmp	r3, #84	@ 0x54
 800b6c6:	d07b      	beq.n	800b7c0 <_scanf_float+0x224>
 800b6c8:	2b59      	cmp	r3, #89	@ 0x59
 800b6ca:	d199      	bne.n	800b600 <_scanf_float+0x64>
 800b6cc:	2d07      	cmp	r5, #7
 800b6ce:	d197      	bne.n	800b600 <_scanf_float+0x64>
 800b6d0:	2508      	movs	r5, #8
 800b6d2:	e02c      	b.n	800b72e <_scanf_float+0x192>
 800b6d4:	2b74      	cmp	r3, #116	@ 0x74
 800b6d6:	d073      	beq.n	800b7c0 <_scanf_float+0x224>
 800b6d8:	2b79      	cmp	r3, #121	@ 0x79
 800b6da:	e7f6      	b.n	800b6ca <_scanf_float+0x12e>
 800b6dc:	6821      	ldr	r1, [r4, #0]
 800b6de:	05c8      	lsls	r0, r1, #23
 800b6e0:	d51b      	bpl.n	800b71a <_scanf_float+0x17e>
 800b6e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b6e6:	6021      	str	r1, [r4, #0]
 800b6e8:	f109 0901 	add.w	r9, r9, #1
 800b6ec:	f1bb 0f00 	cmp.w	fp, #0
 800b6f0:	d003      	beq.n	800b6fa <_scanf_float+0x15e>
 800b6f2:	3201      	adds	r2, #1
 800b6f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6f8:	60a2      	str	r2, [r4, #8]
 800b6fa:	68a3      	ldr	r3, [r4, #8]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	60a3      	str	r3, [r4, #8]
 800b700:	6923      	ldr	r3, [r4, #16]
 800b702:	3301      	adds	r3, #1
 800b704:	6123      	str	r3, [r4, #16]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	3b01      	subs	r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	607b      	str	r3, [r7, #4]
 800b70e:	f340 8087 	ble.w	800b820 <_scanf_float+0x284>
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	3301      	adds	r3, #1
 800b716:	603b      	str	r3, [r7, #0]
 800b718:	e765      	b.n	800b5e6 <_scanf_float+0x4a>
 800b71a:	eb1a 0105 	adds.w	r1, sl, r5
 800b71e:	f47f af6f 	bne.w	800b600 <_scanf_float+0x64>
 800b722:	6822      	ldr	r2, [r4, #0]
 800b724:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b728:	6022      	str	r2, [r4, #0]
 800b72a:	460d      	mov	r5, r1
 800b72c:	468a      	mov	sl, r1
 800b72e:	f806 3b01 	strb.w	r3, [r6], #1
 800b732:	e7e2      	b.n	800b6fa <_scanf_float+0x15e>
 800b734:	6822      	ldr	r2, [r4, #0]
 800b736:	0610      	lsls	r0, r2, #24
 800b738:	f57f af62 	bpl.w	800b600 <_scanf_float+0x64>
 800b73c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b740:	6022      	str	r2, [r4, #0]
 800b742:	e7f4      	b.n	800b72e <_scanf_float+0x192>
 800b744:	f1ba 0f00 	cmp.w	sl, #0
 800b748:	d10e      	bne.n	800b768 <_scanf_float+0x1cc>
 800b74a:	f1b9 0f00 	cmp.w	r9, #0
 800b74e:	d10e      	bne.n	800b76e <_scanf_float+0x1d2>
 800b750:	6822      	ldr	r2, [r4, #0]
 800b752:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b756:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b75a:	d108      	bne.n	800b76e <_scanf_float+0x1d2>
 800b75c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b760:	6022      	str	r2, [r4, #0]
 800b762:	f04f 0a01 	mov.w	sl, #1
 800b766:	e7e2      	b.n	800b72e <_scanf_float+0x192>
 800b768:	f1ba 0f02 	cmp.w	sl, #2
 800b76c:	d055      	beq.n	800b81a <_scanf_float+0x27e>
 800b76e:	2d01      	cmp	r5, #1
 800b770:	d002      	beq.n	800b778 <_scanf_float+0x1dc>
 800b772:	2d04      	cmp	r5, #4
 800b774:	f47f af44 	bne.w	800b600 <_scanf_float+0x64>
 800b778:	3501      	adds	r5, #1
 800b77a:	b2ed      	uxtb	r5, r5
 800b77c:	e7d7      	b.n	800b72e <_scanf_float+0x192>
 800b77e:	f1ba 0f01 	cmp.w	sl, #1
 800b782:	f47f af3d 	bne.w	800b600 <_scanf_float+0x64>
 800b786:	f04f 0a02 	mov.w	sl, #2
 800b78a:	e7d0      	b.n	800b72e <_scanf_float+0x192>
 800b78c:	b97d      	cbnz	r5, 800b7ae <_scanf_float+0x212>
 800b78e:	f1b9 0f00 	cmp.w	r9, #0
 800b792:	f47f af38 	bne.w	800b606 <_scanf_float+0x6a>
 800b796:	6822      	ldr	r2, [r4, #0]
 800b798:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b79c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b7a0:	f040 8108 	bne.w	800b9b4 <_scanf_float+0x418>
 800b7a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b7a8:	6022      	str	r2, [r4, #0]
 800b7aa:	2501      	movs	r5, #1
 800b7ac:	e7bf      	b.n	800b72e <_scanf_float+0x192>
 800b7ae:	2d03      	cmp	r5, #3
 800b7b0:	d0e2      	beq.n	800b778 <_scanf_float+0x1dc>
 800b7b2:	2d05      	cmp	r5, #5
 800b7b4:	e7de      	b.n	800b774 <_scanf_float+0x1d8>
 800b7b6:	2d02      	cmp	r5, #2
 800b7b8:	f47f af22 	bne.w	800b600 <_scanf_float+0x64>
 800b7bc:	2503      	movs	r5, #3
 800b7be:	e7b6      	b.n	800b72e <_scanf_float+0x192>
 800b7c0:	2d06      	cmp	r5, #6
 800b7c2:	f47f af1d 	bne.w	800b600 <_scanf_float+0x64>
 800b7c6:	2507      	movs	r5, #7
 800b7c8:	e7b1      	b.n	800b72e <_scanf_float+0x192>
 800b7ca:	6822      	ldr	r2, [r4, #0]
 800b7cc:	0591      	lsls	r1, r2, #22
 800b7ce:	f57f af17 	bpl.w	800b600 <_scanf_float+0x64>
 800b7d2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b7d6:	6022      	str	r2, [r4, #0]
 800b7d8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b7dc:	e7a7      	b.n	800b72e <_scanf_float+0x192>
 800b7de:	6822      	ldr	r2, [r4, #0]
 800b7e0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b7e4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b7e8:	d006      	beq.n	800b7f8 <_scanf_float+0x25c>
 800b7ea:	0550      	lsls	r0, r2, #21
 800b7ec:	f57f af08 	bpl.w	800b600 <_scanf_float+0x64>
 800b7f0:	f1b9 0f00 	cmp.w	r9, #0
 800b7f4:	f000 80de 	beq.w	800b9b4 <_scanf_float+0x418>
 800b7f8:	0591      	lsls	r1, r2, #22
 800b7fa:	bf58      	it	pl
 800b7fc:	9902      	ldrpl	r1, [sp, #8]
 800b7fe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b802:	bf58      	it	pl
 800b804:	eba9 0101 	subpl.w	r1, r9, r1
 800b808:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b80c:	bf58      	it	pl
 800b80e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b812:	6022      	str	r2, [r4, #0]
 800b814:	f04f 0900 	mov.w	r9, #0
 800b818:	e789      	b.n	800b72e <_scanf_float+0x192>
 800b81a:	f04f 0a03 	mov.w	sl, #3
 800b81e:	e786      	b.n	800b72e <_scanf_float+0x192>
 800b820:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b824:	4639      	mov	r1, r7
 800b826:	4640      	mov	r0, r8
 800b828:	4798      	blx	r3
 800b82a:	2800      	cmp	r0, #0
 800b82c:	f43f aedb 	beq.w	800b5e6 <_scanf_float+0x4a>
 800b830:	e6e6      	b.n	800b600 <_scanf_float+0x64>
 800b832:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b836:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b83a:	463a      	mov	r2, r7
 800b83c:	4640      	mov	r0, r8
 800b83e:	4798      	blx	r3
 800b840:	6923      	ldr	r3, [r4, #16]
 800b842:	3b01      	subs	r3, #1
 800b844:	6123      	str	r3, [r4, #16]
 800b846:	e6e8      	b.n	800b61a <_scanf_float+0x7e>
 800b848:	1e6b      	subs	r3, r5, #1
 800b84a:	2b06      	cmp	r3, #6
 800b84c:	d824      	bhi.n	800b898 <_scanf_float+0x2fc>
 800b84e:	2d02      	cmp	r5, #2
 800b850:	d836      	bhi.n	800b8c0 <_scanf_float+0x324>
 800b852:	9b01      	ldr	r3, [sp, #4]
 800b854:	429e      	cmp	r6, r3
 800b856:	f67f aee4 	bls.w	800b622 <_scanf_float+0x86>
 800b85a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b85e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b862:	463a      	mov	r2, r7
 800b864:	4640      	mov	r0, r8
 800b866:	4798      	blx	r3
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	6123      	str	r3, [r4, #16]
 800b86e:	e7f0      	b.n	800b852 <_scanf_float+0x2b6>
 800b870:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b874:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b878:	463a      	mov	r2, r7
 800b87a:	4640      	mov	r0, r8
 800b87c:	4798      	blx	r3
 800b87e:	6923      	ldr	r3, [r4, #16]
 800b880:	3b01      	subs	r3, #1
 800b882:	6123      	str	r3, [r4, #16]
 800b884:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b888:	fa5f fa8a 	uxtb.w	sl, sl
 800b88c:	f1ba 0f02 	cmp.w	sl, #2
 800b890:	d1ee      	bne.n	800b870 <_scanf_float+0x2d4>
 800b892:	3d03      	subs	r5, #3
 800b894:	b2ed      	uxtb	r5, r5
 800b896:	1b76      	subs	r6, r6, r5
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	05da      	lsls	r2, r3, #23
 800b89c:	d530      	bpl.n	800b900 <_scanf_float+0x364>
 800b89e:	055b      	lsls	r3, r3, #21
 800b8a0:	d511      	bpl.n	800b8c6 <_scanf_float+0x32a>
 800b8a2:	9b01      	ldr	r3, [sp, #4]
 800b8a4:	429e      	cmp	r6, r3
 800b8a6:	f67f aebc 	bls.w	800b622 <_scanf_float+0x86>
 800b8aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8b2:	463a      	mov	r2, r7
 800b8b4:	4640      	mov	r0, r8
 800b8b6:	4798      	blx	r3
 800b8b8:	6923      	ldr	r3, [r4, #16]
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	6123      	str	r3, [r4, #16]
 800b8be:	e7f0      	b.n	800b8a2 <_scanf_float+0x306>
 800b8c0:	46aa      	mov	sl, r5
 800b8c2:	46b3      	mov	fp, r6
 800b8c4:	e7de      	b.n	800b884 <_scanf_float+0x2e8>
 800b8c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	2965      	cmp	r1, #101	@ 0x65
 800b8ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8d2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b8d6:	6123      	str	r3, [r4, #16]
 800b8d8:	d00c      	beq.n	800b8f4 <_scanf_float+0x358>
 800b8da:	2945      	cmp	r1, #69	@ 0x45
 800b8dc:	d00a      	beq.n	800b8f4 <_scanf_float+0x358>
 800b8de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8e2:	463a      	mov	r2, r7
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	4798      	blx	r3
 800b8e8:	6923      	ldr	r3, [r4, #16]
 800b8ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	1eb5      	subs	r5, r6, #2
 800b8f2:	6123      	str	r3, [r4, #16]
 800b8f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8f8:	463a      	mov	r2, r7
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	4798      	blx	r3
 800b8fe:	462e      	mov	r6, r5
 800b900:	6822      	ldr	r2, [r4, #0]
 800b902:	f012 0210 	ands.w	r2, r2, #16
 800b906:	d001      	beq.n	800b90c <_scanf_float+0x370>
 800b908:	2000      	movs	r0, #0
 800b90a:	e68b      	b.n	800b624 <_scanf_float+0x88>
 800b90c:	7032      	strb	r2, [r6, #0]
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b918:	d11c      	bne.n	800b954 <_scanf_float+0x3b8>
 800b91a:	9b02      	ldr	r3, [sp, #8]
 800b91c:	454b      	cmp	r3, r9
 800b91e:	eba3 0209 	sub.w	r2, r3, r9
 800b922:	d123      	bne.n	800b96c <_scanf_float+0x3d0>
 800b924:	9901      	ldr	r1, [sp, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	4640      	mov	r0, r8
 800b92a:	f002 fd31 	bl	800e390 <_strtod_r>
 800b92e:	9b03      	ldr	r3, [sp, #12]
 800b930:	6821      	ldr	r1, [r4, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f011 0f02 	tst.w	r1, #2
 800b938:	ec57 6b10 	vmov	r6, r7, d0
 800b93c:	f103 0204 	add.w	r2, r3, #4
 800b940:	d01f      	beq.n	800b982 <_scanf_float+0x3e6>
 800b942:	9903      	ldr	r1, [sp, #12]
 800b944:	600a      	str	r2, [r1, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	e9c3 6700 	strd	r6, r7, [r3]
 800b94c:	68e3      	ldr	r3, [r4, #12]
 800b94e:	3301      	adds	r3, #1
 800b950:	60e3      	str	r3, [r4, #12]
 800b952:	e7d9      	b.n	800b908 <_scanf_float+0x36c>
 800b954:	9b04      	ldr	r3, [sp, #16]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d0e4      	beq.n	800b924 <_scanf_float+0x388>
 800b95a:	9905      	ldr	r1, [sp, #20]
 800b95c:	230a      	movs	r3, #10
 800b95e:	3101      	adds	r1, #1
 800b960:	4640      	mov	r0, r8
 800b962:	f7ff f9b7 	bl	800acd4 <_strtol_r>
 800b966:	9b04      	ldr	r3, [sp, #16]
 800b968:	9e05      	ldr	r6, [sp, #20]
 800b96a:	1ac2      	subs	r2, r0, r3
 800b96c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b970:	429e      	cmp	r6, r3
 800b972:	bf28      	it	cs
 800b974:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b978:	4910      	ldr	r1, [pc, #64]	@ (800b9bc <_scanf_float+0x420>)
 800b97a:	4630      	mov	r0, r6
 800b97c:	f000 f95c 	bl	800bc38 <siprintf>
 800b980:	e7d0      	b.n	800b924 <_scanf_float+0x388>
 800b982:	f011 0f04 	tst.w	r1, #4
 800b986:	9903      	ldr	r1, [sp, #12]
 800b988:	600a      	str	r2, [r1, #0]
 800b98a:	d1dc      	bne.n	800b946 <_scanf_float+0x3aa>
 800b98c:	681d      	ldr	r5, [r3, #0]
 800b98e:	4632      	mov	r2, r6
 800b990:	463b      	mov	r3, r7
 800b992:	4630      	mov	r0, r6
 800b994:	4639      	mov	r1, r7
 800b996:	f7f5 f8e1 	bl	8000b5c <__aeabi_dcmpun>
 800b99a:	b128      	cbz	r0, 800b9a8 <_scanf_float+0x40c>
 800b99c:	4808      	ldr	r0, [pc, #32]	@ (800b9c0 <_scanf_float+0x424>)
 800b99e:	f000 faef 	bl	800bf80 <nanf>
 800b9a2:	ed85 0a00 	vstr	s0, [r5]
 800b9a6:	e7d1      	b.n	800b94c <_scanf_float+0x3b0>
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	f7f5 f934 	bl	8000c18 <__aeabi_d2f>
 800b9b0:	6028      	str	r0, [r5, #0]
 800b9b2:	e7cb      	b.n	800b94c <_scanf_float+0x3b0>
 800b9b4:	f04f 0900 	mov.w	r9, #0
 800b9b8:	e629      	b.n	800b60e <_scanf_float+0x72>
 800b9ba:	bf00      	nop
 800b9bc:	080116d7 	.word	0x080116d7
 800b9c0:	08011987 	.word	0x08011987

0800b9c4 <std>:
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	b510      	push	{r4, lr}
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b9ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9d2:	6083      	str	r3, [r0, #8]
 800b9d4:	8181      	strh	r1, [r0, #12]
 800b9d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b9d8:	81c2      	strh	r2, [r0, #14]
 800b9da:	6183      	str	r3, [r0, #24]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	2208      	movs	r2, #8
 800b9e0:	305c      	adds	r0, #92	@ 0x5c
 800b9e2:	f000 fa4d 	bl	800be80 <memset>
 800b9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba1c <std+0x58>)
 800b9e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800ba20 <std+0x5c>)
 800b9ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800ba24 <std+0x60>)
 800b9f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800ba28 <std+0x64>)
 800b9f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba2c <std+0x68>)
 800b9f8:	6224      	str	r4, [r4, #32]
 800b9fa:	429c      	cmp	r4, r3
 800b9fc:	d006      	beq.n	800ba0c <std+0x48>
 800b9fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba02:	4294      	cmp	r4, r2
 800ba04:	d002      	beq.n	800ba0c <std+0x48>
 800ba06:	33d0      	adds	r3, #208	@ 0xd0
 800ba08:	429c      	cmp	r4, r3
 800ba0a:	d105      	bne.n	800ba18 <std+0x54>
 800ba0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba14:	f000 bab0 	b.w	800bf78 <__retarget_lock_init_recursive>
 800ba18:	bd10      	pop	{r4, pc}
 800ba1a:	bf00      	nop
 800ba1c:	0800bccd 	.word	0x0800bccd
 800ba20:	0800bcf3 	.word	0x0800bcf3
 800ba24:	0800bd2b 	.word	0x0800bd2b
 800ba28:	0800bd4f 	.word	0x0800bd4f
 800ba2c:	20000d94 	.word	0x20000d94

0800ba30 <stdio_exit_handler>:
 800ba30:	4a02      	ldr	r2, [pc, #8]	@ (800ba3c <stdio_exit_handler+0xc>)
 800ba32:	4903      	ldr	r1, [pc, #12]	@ (800ba40 <stdio_exit_handler+0x10>)
 800ba34:	4803      	ldr	r0, [pc, #12]	@ (800ba44 <stdio_exit_handler+0x14>)
 800ba36:	f000 b869 	b.w	800bb0c <_fwalk_sglue>
 800ba3a:	bf00      	nop
 800ba3c:	2000002c 	.word	0x2000002c
 800ba40:	0800f00d 	.word	0x0800f00d
 800ba44:	2000003c 	.word	0x2000003c

0800ba48 <cleanup_stdio>:
 800ba48:	6841      	ldr	r1, [r0, #4]
 800ba4a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba7c <cleanup_stdio+0x34>)
 800ba4c:	4299      	cmp	r1, r3
 800ba4e:	b510      	push	{r4, lr}
 800ba50:	4604      	mov	r4, r0
 800ba52:	d001      	beq.n	800ba58 <cleanup_stdio+0x10>
 800ba54:	f003 fada 	bl	800f00c <_fflush_r>
 800ba58:	68a1      	ldr	r1, [r4, #8]
 800ba5a:	4b09      	ldr	r3, [pc, #36]	@ (800ba80 <cleanup_stdio+0x38>)
 800ba5c:	4299      	cmp	r1, r3
 800ba5e:	d002      	beq.n	800ba66 <cleanup_stdio+0x1e>
 800ba60:	4620      	mov	r0, r4
 800ba62:	f003 fad3 	bl	800f00c <_fflush_r>
 800ba66:	68e1      	ldr	r1, [r4, #12]
 800ba68:	4b06      	ldr	r3, [pc, #24]	@ (800ba84 <cleanup_stdio+0x3c>)
 800ba6a:	4299      	cmp	r1, r3
 800ba6c:	d004      	beq.n	800ba78 <cleanup_stdio+0x30>
 800ba6e:	4620      	mov	r0, r4
 800ba70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba74:	f003 baca 	b.w	800f00c <_fflush_r>
 800ba78:	bd10      	pop	{r4, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20000d94 	.word	0x20000d94
 800ba80:	20000dfc 	.word	0x20000dfc
 800ba84:	20000e64 	.word	0x20000e64

0800ba88 <global_stdio_init.part.0>:
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	4b0b      	ldr	r3, [pc, #44]	@ (800bab8 <global_stdio_init.part.0+0x30>)
 800ba8c:	4c0b      	ldr	r4, [pc, #44]	@ (800babc <global_stdio_init.part.0+0x34>)
 800ba8e:	4a0c      	ldr	r2, [pc, #48]	@ (800bac0 <global_stdio_init.part.0+0x38>)
 800ba90:	601a      	str	r2, [r3, #0]
 800ba92:	4620      	mov	r0, r4
 800ba94:	2200      	movs	r2, #0
 800ba96:	2104      	movs	r1, #4
 800ba98:	f7ff ff94 	bl	800b9c4 <std>
 800ba9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800baa0:	2201      	movs	r2, #1
 800baa2:	2109      	movs	r1, #9
 800baa4:	f7ff ff8e 	bl	800b9c4 <std>
 800baa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800baac:	2202      	movs	r2, #2
 800baae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bab2:	2112      	movs	r1, #18
 800bab4:	f7ff bf86 	b.w	800b9c4 <std>
 800bab8:	20000ecc 	.word	0x20000ecc
 800babc:	20000d94 	.word	0x20000d94
 800bac0:	0800ba31 	.word	0x0800ba31

0800bac4 <__sfp_lock_acquire>:
 800bac4:	4801      	ldr	r0, [pc, #4]	@ (800bacc <__sfp_lock_acquire+0x8>)
 800bac6:	f000 ba58 	b.w	800bf7a <__retarget_lock_acquire_recursive>
 800baca:	bf00      	nop
 800bacc:	20000ed5 	.word	0x20000ed5

0800bad0 <__sfp_lock_release>:
 800bad0:	4801      	ldr	r0, [pc, #4]	@ (800bad8 <__sfp_lock_release+0x8>)
 800bad2:	f000 ba53 	b.w	800bf7c <__retarget_lock_release_recursive>
 800bad6:	bf00      	nop
 800bad8:	20000ed5 	.word	0x20000ed5

0800badc <__sinit>:
 800badc:	b510      	push	{r4, lr}
 800bade:	4604      	mov	r4, r0
 800bae0:	f7ff fff0 	bl	800bac4 <__sfp_lock_acquire>
 800bae4:	6a23      	ldr	r3, [r4, #32]
 800bae6:	b11b      	cbz	r3, 800baf0 <__sinit+0x14>
 800bae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baec:	f7ff bff0 	b.w	800bad0 <__sfp_lock_release>
 800baf0:	4b04      	ldr	r3, [pc, #16]	@ (800bb04 <__sinit+0x28>)
 800baf2:	6223      	str	r3, [r4, #32]
 800baf4:	4b04      	ldr	r3, [pc, #16]	@ (800bb08 <__sinit+0x2c>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1f5      	bne.n	800bae8 <__sinit+0xc>
 800bafc:	f7ff ffc4 	bl	800ba88 <global_stdio_init.part.0>
 800bb00:	e7f2      	b.n	800bae8 <__sinit+0xc>
 800bb02:	bf00      	nop
 800bb04:	0800ba49 	.word	0x0800ba49
 800bb08:	20000ecc 	.word	0x20000ecc

0800bb0c <_fwalk_sglue>:
 800bb0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb10:	4607      	mov	r7, r0
 800bb12:	4688      	mov	r8, r1
 800bb14:	4614      	mov	r4, r2
 800bb16:	2600      	movs	r6, #0
 800bb18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb1c:	f1b9 0901 	subs.w	r9, r9, #1
 800bb20:	d505      	bpl.n	800bb2e <_fwalk_sglue+0x22>
 800bb22:	6824      	ldr	r4, [r4, #0]
 800bb24:	2c00      	cmp	r4, #0
 800bb26:	d1f7      	bne.n	800bb18 <_fwalk_sglue+0xc>
 800bb28:	4630      	mov	r0, r6
 800bb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb2e:	89ab      	ldrh	r3, [r5, #12]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d907      	bls.n	800bb44 <_fwalk_sglue+0x38>
 800bb34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	d003      	beq.n	800bb44 <_fwalk_sglue+0x38>
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	4638      	mov	r0, r7
 800bb40:	47c0      	blx	r8
 800bb42:	4306      	orrs	r6, r0
 800bb44:	3568      	adds	r5, #104	@ 0x68
 800bb46:	e7e9      	b.n	800bb1c <_fwalk_sglue+0x10>

0800bb48 <iprintf>:
 800bb48:	b40f      	push	{r0, r1, r2, r3}
 800bb4a:	b507      	push	{r0, r1, r2, lr}
 800bb4c:	4906      	ldr	r1, [pc, #24]	@ (800bb68 <iprintf+0x20>)
 800bb4e:	ab04      	add	r3, sp, #16
 800bb50:	6808      	ldr	r0, [r1, #0]
 800bb52:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb56:	6881      	ldr	r1, [r0, #8]
 800bb58:	9301      	str	r3, [sp, #4]
 800bb5a:	f002 ff6d 	bl	800ea38 <_vfiprintf_r>
 800bb5e:	b003      	add	sp, #12
 800bb60:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb64:	b004      	add	sp, #16
 800bb66:	4770      	bx	lr
 800bb68:	20000038 	.word	0x20000038

0800bb6c <putchar>:
 800bb6c:	4b02      	ldr	r3, [pc, #8]	@ (800bb78 <putchar+0xc>)
 800bb6e:	4601      	mov	r1, r0
 800bb70:	6818      	ldr	r0, [r3, #0]
 800bb72:	6882      	ldr	r2, [r0, #8]
 800bb74:	f003 bad4 	b.w	800f120 <_putc_r>
 800bb78:	20000038 	.word	0x20000038

0800bb7c <_puts_r>:
 800bb7c:	6a03      	ldr	r3, [r0, #32]
 800bb7e:	b570      	push	{r4, r5, r6, lr}
 800bb80:	6884      	ldr	r4, [r0, #8]
 800bb82:	4605      	mov	r5, r0
 800bb84:	460e      	mov	r6, r1
 800bb86:	b90b      	cbnz	r3, 800bb8c <_puts_r+0x10>
 800bb88:	f7ff ffa8 	bl	800badc <__sinit>
 800bb8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb8e:	07db      	lsls	r3, r3, #31
 800bb90:	d405      	bmi.n	800bb9e <_puts_r+0x22>
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	0598      	lsls	r0, r3, #22
 800bb96:	d402      	bmi.n	800bb9e <_puts_r+0x22>
 800bb98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb9a:	f000 f9ee 	bl	800bf7a <__retarget_lock_acquire_recursive>
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	0719      	lsls	r1, r3, #28
 800bba2:	d502      	bpl.n	800bbaa <_puts_r+0x2e>
 800bba4:	6923      	ldr	r3, [r4, #16]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d135      	bne.n	800bc16 <_puts_r+0x9a>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 f911 	bl	800bdd4 <__swsetup_r>
 800bbb2:	b380      	cbz	r0, 800bc16 <_puts_r+0x9a>
 800bbb4:	f04f 35ff 	mov.w	r5, #4294967295
 800bbb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbba:	07da      	lsls	r2, r3, #31
 800bbbc:	d405      	bmi.n	800bbca <_puts_r+0x4e>
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	059b      	lsls	r3, r3, #22
 800bbc2:	d402      	bmi.n	800bbca <_puts_r+0x4e>
 800bbc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbc6:	f000 f9d9 	bl	800bf7c <__retarget_lock_release_recursive>
 800bbca:	4628      	mov	r0, r5
 800bbcc:	bd70      	pop	{r4, r5, r6, pc}
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	da04      	bge.n	800bbdc <_puts_r+0x60>
 800bbd2:	69a2      	ldr	r2, [r4, #24]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	dc17      	bgt.n	800bc08 <_puts_r+0x8c>
 800bbd8:	290a      	cmp	r1, #10
 800bbda:	d015      	beq.n	800bc08 <_puts_r+0x8c>
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	1c5a      	adds	r2, r3, #1
 800bbe0:	6022      	str	r2, [r4, #0]
 800bbe2:	7019      	strb	r1, [r3, #0]
 800bbe4:	68a3      	ldr	r3, [r4, #8]
 800bbe6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bbea:	3b01      	subs	r3, #1
 800bbec:	60a3      	str	r3, [r4, #8]
 800bbee:	2900      	cmp	r1, #0
 800bbf0:	d1ed      	bne.n	800bbce <_puts_r+0x52>
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	da11      	bge.n	800bc1a <_puts_r+0x9e>
 800bbf6:	4622      	mov	r2, r4
 800bbf8:	210a      	movs	r1, #10
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	f000 f8ab 	bl	800bd56 <__swbuf_r>
 800bc00:	3001      	adds	r0, #1
 800bc02:	d0d7      	beq.n	800bbb4 <_puts_r+0x38>
 800bc04:	250a      	movs	r5, #10
 800bc06:	e7d7      	b.n	800bbb8 <_puts_r+0x3c>
 800bc08:	4622      	mov	r2, r4
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f000 f8a3 	bl	800bd56 <__swbuf_r>
 800bc10:	3001      	adds	r0, #1
 800bc12:	d1e7      	bne.n	800bbe4 <_puts_r+0x68>
 800bc14:	e7ce      	b.n	800bbb4 <_puts_r+0x38>
 800bc16:	3e01      	subs	r6, #1
 800bc18:	e7e4      	b.n	800bbe4 <_puts_r+0x68>
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	6022      	str	r2, [r4, #0]
 800bc20:	220a      	movs	r2, #10
 800bc22:	701a      	strb	r2, [r3, #0]
 800bc24:	e7ee      	b.n	800bc04 <_puts_r+0x88>
	...

0800bc28 <puts>:
 800bc28:	4b02      	ldr	r3, [pc, #8]	@ (800bc34 <puts+0xc>)
 800bc2a:	4601      	mov	r1, r0
 800bc2c:	6818      	ldr	r0, [r3, #0]
 800bc2e:	f7ff bfa5 	b.w	800bb7c <_puts_r>
 800bc32:	bf00      	nop
 800bc34:	20000038 	.word	0x20000038

0800bc38 <siprintf>:
 800bc38:	b40e      	push	{r1, r2, r3}
 800bc3a:	b500      	push	{lr}
 800bc3c:	b09c      	sub	sp, #112	@ 0x70
 800bc3e:	ab1d      	add	r3, sp, #116	@ 0x74
 800bc40:	9002      	str	r0, [sp, #8]
 800bc42:	9006      	str	r0, [sp, #24]
 800bc44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc48:	4809      	ldr	r0, [pc, #36]	@ (800bc70 <siprintf+0x38>)
 800bc4a:	9107      	str	r1, [sp, #28]
 800bc4c:	9104      	str	r1, [sp, #16]
 800bc4e:	4909      	ldr	r1, [pc, #36]	@ (800bc74 <siprintf+0x3c>)
 800bc50:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc54:	9105      	str	r1, [sp, #20]
 800bc56:	6800      	ldr	r0, [r0, #0]
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	a902      	add	r1, sp, #8
 800bc5c:	f002 fbfa 	bl	800e454 <_svfiprintf_r>
 800bc60:	9b02      	ldr	r3, [sp, #8]
 800bc62:	2200      	movs	r2, #0
 800bc64:	701a      	strb	r2, [r3, #0]
 800bc66:	b01c      	add	sp, #112	@ 0x70
 800bc68:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc6c:	b003      	add	sp, #12
 800bc6e:	4770      	bx	lr
 800bc70:	20000038 	.word	0x20000038
 800bc74:	ffff0208 	.word	0xffff0208

0800bc78 <siscanf>:
 800bc78:	b40e      	push	{r1, r2, r3}
 800bc7a:	b530      	push	{r4, r5, lr}
 800bc7c:	b09c      	sub	sp, #112	@ 0x70
 800bc7e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800bc80:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bc84:	f854 5b04 	ldr.w	r5, [r4], #4
 800bc88:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bc8c:	9002      	str	r0, [sp, #8]
 800bc8e:	9006      	str	r0, [sp, #24]
 800bc90:	f7f4 fb06 	bl	80002a0 <strlen>
 800bc94:	4b0b      	ldr	r3, [pc, #44]	@ (800bcc4 <siscanf+0x4c>)
 800bc96:	9003      	str	r0, [sp, #12]
 800bc98:	9007      	str	r0, [sp, #28]
 800bc9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc9c:	480a      	ldr	r0, [pc, #40]	@ (800bcc8 <siscanf+0x50>)
 800bc9e:	9401      	str	r4, [sp, #4]
 800bca0:	2300      	movs	r3, #0
 800bca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bca4:	9314      	str	r3, [sp, #80]	@ 0x50
 800bca6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bcaa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bcae:	462a      	mov	r2, r5
 800bcb0:	4623      	mov	r3, r4
 800bcb2:	a902      	add	r1, sp, #8
 800bcb4:	6800      	ldr	r0, [r0, #0]
 800bcb6:	f002 fd21 	bl	800e6fc <__ssvfiscanf_r>
 800bcba:	b01c      	add	sp, #112	@ 0x70
 800bcbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcc0:	b003      	add	sp, #12
 800bcc2:	4770      	bx	lr
 800bcc4:	0800bcef 	.word	0x0800bcef
 800bcc8:	20000038 	.word	0x20000038

0800bccc <__sread>:
 800bccc:	b510      	push	{r4, lr}
 800bcce:	460c      	mov	r4, r1
 800bcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd4:	f000 f902 	bl	800bedc <_read_r>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	bfab      	itete	ge
 800bcdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bcde:	89a3      	ldrhlt	r3, [r4, #12]
 800bce0:	181b      	addge	r3, r3, r0
 800bce2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bce6:	bfac      	ite	ge
 800bce8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bcea:	81a3      	strhlt	r3, [r4, #12]
 800bcec:	bd10      	pop	{r4, pc}

0800bcee <__seofread>:
 800bcee:	2000      	movs	r0, #0
 800bcf0:	4770      	bx	lr

0800bcf2 <__swrite>:
 800bcf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf6:	461f      	mov	r7, r3
 800bcf8:	898b      	ldrh	r3, [r1, #12]
 800bcfa:	05db      	lsls	r3, r3, #23
 800bcfc:	4605      	mov	r5, r0
 800bcfe:	460c      	mov	r4, r1
 800bd00:	4616      	mov	r6, r2
 800bd02:	d505      	bpl.n	800bd10 <__swrite+0x1e>
 800bd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd08:	2302      	movs	r3, #2
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f000 f8d4 	bl	800beb8 <_lseek_r>
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd1a:	81a3      	strh	r3, [r4, #12]
 800bd1c:	4632      	mov	r2, r6
 800bd1e:	463b      	mov	r3, r7
 800bd20:	4628      	mov	r0, r5
 800bd22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd26:	f000 b8eb 	b.w	800bf00 <_write_r>

0800bd2a <__sseek>:
 800bd2a:	b510      	push	{r4, lr}
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd32:	f000 f8c1 	bl	800beb8 <_lseek_r>
 800bd36:	1c43      	adds	r3, r0, #1
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	bf15      	itete	ne
 800bd3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd46:	81a3      	strheq	r3, [r4, #12]
 800bd48:	bf18      	it	ne
 800bd4a:	81a3      	strhne	r3, [r4, #12]
 800bd4c:	bd10      	pop	{r4, pc}

0800bd4e <__sclose>:
 800bd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd52:	f000 b8a1 	b.w	800be98 <_close_r>

0800bd56 <__swbuf_r>:
 800bd56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd58:	460e      	mov	r6, r1
 800bd5a:	4614      	mov	r4, r2
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	b118      	cbz	r0, 800bd68 <__swbuf_r+0x12>
 800bd60:	6a03      	ldr	r3, [r0, #32]
 800bd62:	b90b      	cbnz	r3, 800bd68 <__swbuf_r+0x12>
 800bd64:	f7ff feba 	bl	800badc <__sinit>
 800bd68:	69a3      	ldr	r3, [r4, #24]
 800bd6a:	60a3      	str	r3, [r4, #8]
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	071a      	lsls	r2, r3, #28
 800bd70:	d501      	bpl.n	800bd76 <__swbuf_r+0x20>
 800bd72:	6923      	ldr	r3, [r4, #16]
 800bd74:	b943      	cbnz	r3, 800bd88 <__swbuf_r+0x32>
 800bd76:	4621      	mov	r1, r4
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f000 f82b 	bl	800bdd4 <__swsetup_r>
 800bd7e:	b118      	cbz	r0, 800bd88 <__swbuf_r+0x32>
 800bd80:	f04f 37ff 	mov.w	r7, #4294967295
 800bd84:	4638      	mov	r0, r7
 800bd86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	6922      	ldr	r2, [r4, #16]
 800bd8c:	1a98      	subs	r0, r3, r2
 800bd8e:	6963      	ldr	r3, [r4, #20]
 800bd90:	b2f6      	uxtb	r6, r6
 800bd92:	4283      	cmp	r3, r0
 800bd94:	4637      	mov	r7, r6
 800bd96:	dc05      	bgt.n	800bda4 <__swbuf_r+0x4e>
 800bd98:	4621      	mov	r1, r4
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f003 f936 	bl	800f00c <_fflush_r>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d1ed      	bne.n	800bd80 <__swbuf_r+0x2a>
 800bda4:	68a3      	ldr	r3, [r4, #8]
 800bda6:	3b01      	subs	r3, #1
 800bda8:	60a3      	str	r3, [r4, #8]
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	1c5a      	adds	r2, r3, #1
 800bdae:	6022      	str	r2, [r4, #0]
 800bdb0:	701e      	strb	r6, [r3, #0]
 800bdb2:	6962      	ldr	r2, [r4, #20]
 800bdb4:	1c43      	adds	r3, r0, #1
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d004      	beq.n	800bdc4 <__swbuf_r+0x6e>
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	07db      	lsls	r3, r3, #31
 800bdbe:	d5e1      	bpl.n	800bd84 <__swbuf_r+0x2e>
 800bdc0:	2e0a      	cmp	r6, #10
 800bdc2:	d1df      	bne.n	800bd84 <__swbuf_r+0x2e>
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	f003 f920 	bl	800f00c <_fflush_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d0d9      	beq.n	800bd84 <__swbuf_r+0x2e>
 800bdd0:	e7d6      	b.n	800bd80 <__swbuf_r+0x2a>
	...

0800bdd4 <__swsetup_r>:
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	4b29      	ldr	r3, [pc, #164]	@ (800be7c <__swsetup_r+0xa8>)
 800bdd8:	4605      	mov	r5, r0
 800bdda:	6818      	ldr	r0, [r3, #0]
 800bddc:	460c      	mov	r4, r1
 800bdde:	b118      	cbz	r0, 800bde8 <__swsetup_r+0x14>
 800bde0:	6a03      	ldr	r3, [r0, #32]
 800bde2:	b90b      	cbnz	r3, 800bde8 <__swsetup_r+0x14>
 800bde4:	f7ff fe7a 	bl	800badc <__sinit>
 800bde8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdec:	0719      	lsls	r1, r3, #28
 800bdee:	d422      	bmi.n	800be36 <__swsetup_r+0x62>
 800bdf0:	06da      	lsls	r2, r3, #27
 800bdf2:	d407      	bmi.n	800be04 <__swsetup_r+0x30>
 800bdf4:	2209      	movs	r2, #9
 800bdf6:	602a      	str	r2, [r5, #0]
 800bdf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdfc:	81a3      	strh	r3, [r4, #12]
 800bdfe:	f04f 30ff 	mov.w	r0, #4294967295
 800be02:	e033      	b.n	800be6c <__swsetup_r+0x98>
 800be04:	0758      	lsls	r0, r3, #29
 800be06:	d512      	bpl.n	800be2e <__swsetup_r+0x5a>
 800be08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be0a:	b141      	cbz	r1, 800be1e <__swsetup_r+0x4a>
 800be0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be10:	4299      	cmp	r1, r3
 800be12:	d002      	beq.n	800be1a <__swsetup_r+0x46>
 800be14:	4628      	mov	r0, r5
 800be16:	f000 ff07 	bl	800cc28 <_free_r>
 800be1a:	2300      	movs	r3, #0
 800be1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be24:	81a3      	strh	r3, [r4, #12]
 800be26:	2300      	movs	r3, #0
 800be28:	6063      	str	r3, [r4, #4]
 800be2a:	6923      	ldr	r3, [r4, #16]
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	89a3      	ldrh	r3, [r4, #12]
 800be30:	f043 0308 	orr.w	r3, r3, #8
 800be34:	81a3      	strh	r3, [r4, #12]
 800be36:	6923      	ldr	r3, [r4, #16]
 800be38:	b94b      	cbnz	r3, 800be4e <__swsetup_r+0x7a>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be44:	d003      	beq.n	800be4e <__swsetup_r+0x7a>
 800be46:	4621      	mov	r1, r4
 800be48:	4628      	mov	r0, r5
 800be4a:	f003 f92d 	bl	800f0a8 <__smakebuf_r>
 800be4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be52:	f013 0201 	ands.w	r2, r3, #1
 800be56:	d00a      	beq.n	800be6e <__swsetup_r+0x9a>
 800be58:	2200      	movs	r2, #0
 800be5a:	60a2      	str	r2, [r4, #8]
 800be5c:	6962      	ldr	r2, [r4, #20]
 800be5e:	4252      	negs	r2, r2
 800be60:	61a2      	str	r2, [r4, #24]
 800be62:	6922      	ldr	r2, [r4, #16]
 800be64:	b942      	cbnz	r2, 800be78 <__swsetup_r+0xa4>
 800be66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be6a:	d1c5      	bne.n	800bdf8 <__swsetup_r+0x24>
 800be6c:	bd38      	pop	{r3, r4, r5, pc}
 800be6e:	0799      	lsls	r1, r3, #30
 800be70:	bf58      	it	pl
 800be72:	6962      	ldrpl	r2, [r4, #20]
 800be74:	60a2      	str	r2, [r4, #8]
 800be76:	e7f4      	b.n	800be62 <__swsetup_r+0x8e>
 800be78:	2000      	movs	r0, #0
 800be7a:	e7f7      	b.n	800be6c <__swsetup_r+0x98>
 800be7c:	20000038 	.word	0x20000038

0800be80 <memset>:
 800be80:	4402      	add	r2, r0
 800be82:	4603      	mov	r3, r0
 800be84:	4293      	cmp	r3, r2
 800be86:	d100      	bne.n	800be8a <memset+0xa>
 800be88:	4770      	bx	lr
 800be8a:	f803 1b01 	strb.w	r1, [r3], #1
 800be8e:	e7f9      	b.n	800be84 <memset+0x4>

0800be90 <_localeconv_r>:
 800be90:	4800      	ldr	r0, [pc, #0]	@ (800be94 <_localeconv_r+0x4>)
 800be92:	4770      	bx	lr
 800be94:	20000178 	.word	0x20000178

0800be98 <_close_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	4d06      	ldr	r5, [pc, #24]	@ (800beb4 <_close_r+0x1c>)
 800be9c:	2300      	movs	r3, #0
 800be9e:	4604      	mov	r4, r0
 800bea0:	4608      	mov	r0, r1
 800bea2:	602b      	str	r3, [r5, #0]
 800bea4:	f7f8 fd12 	bl	80048cc <_close>
 800bea8:	1c43      	adds	r3, r0, #1
 800beaa:	d102      	bne.n	800beb2 <_close_r+0x1a>
 800beac:	682b      	ldr	r3, [r5, #0]
 800beae:	b103      	cbz	r3, 800beb2 <_close_r+0x1a>
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	bd38      	pop	{r3, r4, r5, pc}
 800beb4:	20000ed0 	.word	0x20000ed0

0800beb8 <_lseek_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4d07      	ldr	r5, [pc, #28]	@ (800bed8 <_lseek_r+0x20>)
 800bebc:	4604      	mov	r4, r0
 800bebe:	4608      	mov	r0, r1
 800bec0:	4611      	mov	r1, r2
 800bec2:	2200      	movs	r2, #0
 800bec4:	602a      	str	r2, [r5, #0]
 800bec6:	461a      	mov	r2, r3
 800bec8:	f7f8 fd27 	bl	800491a <_lseek>
 800becc:	1c43      	adds	r3, r0, #1
 800bece:	d102      	bne.n	800bed6 <_lseek_r+0x1e>
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	b103      	cbz	r3, 800bed6 <_lseek_r+0x1e>
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	bd38      	pop	{r3, r4, r5, pc}
 800bed8:	20000ed0 	.word	0x20000ed0

0800bedc <_read_r>:
 800bedc:	b538      	push	{r3, r4, r5, lr}
 800bede:	4d07      	ldr	r5, [pc, #28]	@ (800befc <_read_r+0x20>)
 800bee0:	4604      	mov	r4, r0
 800bee2:	4608      	mov	r0, r1
 800bee4:	4611      	mov	r1, r2
 800bee6:	2200      	movs	r2, #0
 800bee8:	602a      	str	r2, [r5, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	f7f8 fcb5 	bl	800485a <_read>
 800bef0:	1c43      	adds	r3, r0, #1
 800bef2:	d102      	bne.n	800befa <_read_r+0x1e>
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	b103      	cbz	r3, 800befa <_read_r+0x1e>
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	bd38      	pop	{r3, r4, r5, pc}
 800befc:	20000ed0 	.word	0x20000ed0

0800bf00 <_write_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	4d07      	ldr	r5, [pc, #28]	@ (800bf20 <_write_r+0x20>)
 800bf04:	4604      	mov	r4, r0
 800bf06:	4608      	mov	r0, r1
 800bf08:	4611      	mov	r1, r2
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	602a      	str	r2, [r5, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	f7f8 fcc0 	bl	8004894 <_write>
 800bf14:	1c43      	adds	r3, r0, #1
 800bf16:	d102      	bne.n	800bf1e <_write_r+0x1e>
 800bf18:	682b      	ldr	r3, [r5, #0]
 800bf1a:	b103      	cbz	r3, 800bf1e <_write_r+0x1e>
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	bd38      	pop	{r3, r4, r5, pc}
 800bf20:	20000ed0 	.word	0x20000ed0

0800bf24 <__errno>:
 800bf24:	4b01      	ldr	r3, [pc, #4]	@ (800bf2c <__errno+0x8>)
 800bf26:	6818      	ldr	r0, [r3, #0]
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	20000038 	.word	0x20000038

0800bf30 <__libc_init_array>:
 800bf30:	b570      	push	{r4, r5, r6, lr}
 800bf32:	4d0d      	ldr	r5, [pc, #52]	@ (800bf68 <__libc_init_array+0x38>)
 800bf34:	4c0d      	ldr	r4, [pc, #52]	@ (800bf6c <__libc_init_array+0x3c>)
 800bf36:	1b64      	subs	r4, r4, r5
 800bf38:	10a4      	asrs	r4, r4, #2
 800bf3a:	2600      	movs	r6, #0
 800bf3c:	42a6      	cmp	r6, r4
 800bf3e:	d109      	bne.n	800bf54 <__libc_init_array+0x24>
 800bf40:	4d0b      	ldr	r5, [pc, #44]	@ (800bf70 <__libc_init_array+0x40>)
 800bf42:	4c0c      	ldr	r4, [pc, #48]	@ (800bf74 <__libc_init_array+0x44>)
 800bf44:	f004 fdf6 	bl	8010b34 <_init>
 800bf48:	1b64      	subs	r4, r4, r5
 800bf4a:	10a4      	asrs	r4, r4, #2
 800bf4c:	2600      	movs	r6, #0
 800bf4e:	42a6      	cmp	r6, r4
 800bf50:	d105      	bne.n	800bf5e <__libc_init_array+0x2e>
 800bf52:	bd70      	pop	{r4, r5, r6, pc}
 800bf54:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf58:	4798      	blx	r3
 800bf5a:	3601      	adds	r6, #1
 800bf5c:	e7ee      	b.n	800bf3c <__libc_init_array+0xc>
 800bf5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf62:	4798      	blx	r3
 800bf64:	3601      	adds	r6, #1
 800bf66:	e7f2      	b.n	800bf4e <__libc_init_array+0x1e>
 800bf68:	08011a20 	.word	0x08011a20
 800bf6c:	08011a20 	.word	0x08011a20
 800bf70:	08011a20 	.word	0x08011a20
 800bf74:	08011a24 	.word	0x08011a24

0800bf78 <__retarget_lock_init_recursive>:
 800bf78:	4770      	bx	lr

0800bf7a <__retarget_lock_acquire_recursive>:
 800bf7a:	4770      	bx	lr

0800bf7c <__retarget_lock_release_recursive>:
 800bf7c:	4770      	bx	lr
	...

0800bf80 <nanf>:
 800bf80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bf88 <nanf+0x8>
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	7fc00000 	.word	0x7fc00000

0800bf8c <quorem>:
 800bf8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf90:	6903      	ldr	r3, [r0, #16]
 800bf92:	690c      	ldr	r4, [r1, #16]
 800bf94:	42a3      	cmp	r3, r4
 800bf96:	4607      	mov	r7, r0
 800bf98:	db7e      	blt.n	800c098 <quorem+0x10c>
 800bf9a:	3c01      	subs	r4, #1
 800bf9c:	f101 0814 	add.w	r8, r1, #20
 800bfa0:	00a3      	lsls	r3, r4, #2
 800bfa2:	f100 0514 	add.w	r5, r0, #20
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bfbe:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfc2:	d32e      	bcc.n	800c022 <quorem+0x96>
 800bfc4:	f04f 0a00 	mov.w	sl, #0
 800bfc8:	46c4      	mov	ip, r8
 800bfca:	46ae      	mov	lr, r5
 800bfcc:	46d3      	mov	fp, sl
 800bfce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bfd2:	b298      	uxth	r0, r3
 800bfd4:	fb06 a000 	mla	r0, r6, r0, sl
 800bfd8:	0c02      	lsrs	r2, r0, #16
 800bfda:	0c1b      	lsrs	r3, r3, #16
 800bfdc:	fb06 2303 	mla	r3, r6, r3, r2
 800bfe0:	f8de 2000 	ldr.w	r2, [lr]
 800bfe4:	b280      	uxth	r0, r0
 800bfe6:	b292      	uxth	r2, r2
 800bfe8:	1a12      	subs	r2, r2, r0
 800bfea:	445a      	add	r2, fp
 800bfec:	f8de 0000 	ldr.w	r0, [lr]
 800bff0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bffa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bffe:	b292      	uxth	r2, r2
 800c000:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c004:	45e1      	cmp	r9, ip
 800c006:	f84e 2b04 	str.w	r2, [lr], #4
 800c00a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c00e:	d2de      	bcs.n	800bfce <quorem+0x42>
 800c010:	9b00      	ldr	r3, [sp, #0]
 800c012:	58eb      	ldr	r3, [r5, r3]
 800c014:	b92b      	cbnz	r3, 800c022 <quorem+0x96>
 800c016:	9b01      	ldr	r3, [sp, #4]
 800c018:	3b04      	subs	r3, #4
 800c01a:	429d      	cmp	r5, r3
 800c01c:	461a      	mov	r2, r3
 800c01e:	d32f      	bcc.n	800c080 <quorem+0xf4>
 800c020:	613c      	str	r4, [r7, #16]
 800c022:	4638      	mov	r0, r7
 800c024:	f001 f9c4 	bl	800d3b0 <__mcmp>
 800c028:	2800      	cmp	r0, #0
 800c02a:	db25      	blt.n	800c078 <quorem+0xec>
 800c02c:	4629      	mov	r1, r5
 800c02e:	2000      	movs	r0, #0
 800c030:	f858 2b04 	ldr.w	r2, [r8], #4
 800c034:	f8d1 c000 	ldr.w	ip, [r1]
 800c038:	fa1f fe82 	uxth.w	lr, r2
 800c03c:	fa1f f38c 	uxth.w	r3, ip
 800c040:	eba3 030e 	sub.w	r3, r3, lr
 800c044:	4403      	add	r3, r0
 800c046:	0c12      	lsrs	r2, r2, #16
 800c048:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c04c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c050:	b29b      	uxth	r3, r3
 800c052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c056:	45c1      	cmp	r9, r8
 800c058:	f841 3b04 	str.w	r3, [r1], #4
 800c05c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c060:	d2e6      	bcs.n	800c030 <quorem+0xa4>
 800c062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c06a:	b922      	cbnz	r2, 800c076 <quorem+0xea>
 800c06c:	3b04      	subs	r3, #4
 800c06e:	429d      	cmp	r5, r3
 800c070:	461a      	mov	r2, r3
 800c072:	d30b      	bcc.n	800c08c <quorem+0x100>
 800c074:	613c      	str	r4, [r7, #16]
 800c076:	3601      	adds	r6, #1
 800c078:	4630      	mov	r0, r6
 800c07a:	b003      	add	sp, #12
 800c07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c080:	6812      	ldr	r2, [r2, #0]
 800c082:	3b04      	subs	r3, #4
 800c084:	2a00      	cmp	r2, #0
 800c086:	d1cb      	bne.n	800c020 <quorem+0x94>
 800c088:	3c01      	subs	r4, #1
 800c08a:	e7c6      	b.n	800c01a <quorem+0x8e>
 800c08c:	6812      	ldr	r2, [r2, #0]
 800c08e:	3b04      	subs	r3, #4
 800c090:	2a00      	cmp	r2, #0
 800c092:	d1ef      	bne.n	800c074 <quorem+0xe8>
 800c094:	3c01      	subs	r4, #1
 800c096:	e7ea      	b.n	800c06e <quorem+0xe2>
 800c098:	2000      	movs	r0, #0
 800c09a:	e7ee      	b.n	800c07a <quorem+0xee>
 800c09c:	0000      	movs	r0, r0
	...

0800c0a0 <_dtoa_r>:
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	69c7      	ldr	r7, [r0, #28]
 800c0a6:	b099      	sub	sp, #100	@ 0x64
 800c0a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c0ac:	ec55 4b10 	vmov	r4, r5, d0
 800c0b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c0b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0b4:	4683      	mov	fp, r0
 800c0b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0ba:	b97f      	cbnz	r7, 800c0dc <_dtoa_r+0x3c>
 800c0bc:	2010      	movs	r0, #16
 800c0be:	f000 fdfd 	bl	800ccbc <malloc>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c0c8:	b920      	cbnz	r0, 800c0d4 <_dtoa_r+0x34>
 800c0ca:	4ba7      	ldr	r3, [pc, #668]	@ (800c368 <_dtoa_r+0x2c8>)
 800c0cc:	21ef      	movs	r1, #239	@ 0xef
 800c0ce:	48a7      	ldr	r0, [pc, #668]	@ (800c36c <_dtoa_r+0x2cc>)
 800c0d0:	f003 f942 	bl	800f358 <__assert_func>
 800c0d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c0d8:	6007      	str	r7, [r0, #0]
 800c0da:	60c7      	str	r7, [r0, #12]
 800c0dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0e0:	6819      	ldr	r1, [r3, #0]
 800c0e2:	b159      	cbz	r1, 800c0fc <_dtoa_r+0x5c>
 800c0e4:	685a      	ldr	r2, [r3, #4]
 800c0e6:	604a      	str	r2, [r1, #4]
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	4093      	lsls	r3, r2
 800c0ec:	608b      	str	r3, [r1, #8]
 800c0ee:	4658      	mov	r0, fp
 800c0f0:	f000 feda 	bl	800cea8 <_Bfree>
 800c0f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	1e2b      	subs	r3, r5, #0
 800c0fe:	bfb9      	ittee	lt
 800c100:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c104:	9303      	strlt	r3, [sp, #12]
 800c106:	2300      	movge	r3, #0
 800c108:	6033      	strge	r3, [r6, #0]
 800c10a:	9f03      	ldr	r7, [sp, #12]
 800c10c:	4b98      	ldr	r3, [pc, #608]	@ (800c370 <_dtoa_r+0x2d0>)
 800c10e:	bfbc      	itt	lt
 800c110:	2201      	movlt	r2, #1
 800c112:	6032      	strlt	r2, [r6, #0]
 800c114:	43bb      	bics	r3, r7
 800c116:	d112      	bne.n	800c13e <_dtoa_r+0x9e>
 800c118:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c11a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c124:	4323      	orrs	r3, r4
 800c126:	f000 854d 	beq.w	800cbc4 <_dtoa_r+0xb24>
 800c12a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c12c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c384 <_dtoa_r+0x2e4>
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 854f 	beq.w	800cbd4 <_dtoa_r+0xb34>
 800c136:	f10a 0303 	add.w	r3, sl, #3
 800c13a:	f000 bd49 	b.w	800cbd0 <_dtoa_r+0xb30>
 800c13e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c142:	2200      	movs	r2, #0
 800c144:	ec51 0b17 	vmov	r0, r1, d7
 800c148:	2300      	movs	r3, #0
 800c14a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c14e:	f7f4 fcd3 	bl	8000af8 <__aeabi_dcmpeq>
 800c152:	4680      	mov	r8, r0
 800c154:	b158      	cbz	r0, 800c16e <_dtoa_r+0xce>
 800c156:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c158:	2301      	movs	r3, #1
 800c15a:	6013      	str	r3, [r2, #0]
 800c15c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c15e:	b113      	cbz	r3, 800c166 <_dtoa_r+0xc6>
 800c160:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c162:	4b84      	ldr	r3, [pc, #528]	@ (800c374 <_dtoa_r+0x2d4>)
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c388 <_dtoa_r+0x2e8>
 800c16a:	f000 bd33 	b.w	800cbd4 <_dtoa_r+0xb34>
 800c16e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c172:	aa16      	add	r2, sp, #88	@ 0x58
 800c174:	a917      	add	r1, sp, #92	@ 0x5c
 800c176:	4658      	mov	r0, fp
 800c178:	f001 fa3a 	bl	800d5f0 <__d2b>
 800c17c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c180:	4681      	mov	r9, r0
 800c182:	2e00      	cmp	r6, #0
 800c184:	d077      	beq.n	800c276 <_dtoa_r+0x1d6>
 800c186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c188:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c18c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c194:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c198:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c19c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	4b74      	ldr	r3, [pc, #464]	@ (800c378 <_dtoa_r+0x2d8>)
 800c1a6:	f7f4 f887 	bl	80002b8 <__aeabi_dsub>
 800c1aa:	a369      	add	r3, pc, #420	@ (adr r3, 800c350 <_dtoa_r+0x2b0>)
 800c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b0:	f7f4 fa3a 	bl	8000628 <__aeabi_dmul>
 800c1b4:	a368      	add	r3, pc, #416	@ (adr r3, 800c358 <_dtoa_r+0x2b8>)
 800c1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ba:	f7f4 f87f 	bl	80002bc <__adddf3>
 800c1be:	4604      	mov	r4, r0
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	460d      	mov	r5, r1
 800c1c4:	f7f4 f9c6 	bl	8000554 <__aeabi_i2d>
 800c1c8:	a365      	add	r3, pc, #404	@ (adr r3, 800c360 <_dtoa_r+0x2c0>)
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	f7f4 fa2b 	bl	8000628 <__aeabi_dmul>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	4629      	mov	r1, r5
 800c1da:	f7f4 f86f 	bl	80002bc <__adddf3>
 800c1de:	4604      	mov	r4, r0
 800c1e0:	460d      	mov	r5, r1
 800c1e2:	f7f4 fcd1 	bl	8000b88 <__aeabi_d2iz>
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	4607      	mov	r7, r0
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	f7f4 fc8c 	bl	8000b0c <__aeabi_dcmplt>
 800c1f4:	b140      	cbz	r0, 800c208 <_dtoa_r+0x168>
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	f7f4 f9ac 	bl	8000554 <__aeabi_i2d>
 800c1fc:	4622      	mov	r2, r4
 800c1fe:	462b      	mov	r3, r5
 800c200:	f7f4 fc7a 	bl	8000af8 <__aeabi_dcmpeq>
 800c204:	b900      	cbnz	r0, 800c208 <_dtoa_r+0x168>
 800c206:	3f01      	subs	r7, #1
 800c208:	2f16      	cmp	r7, #22
 800c20a:	d851      	bhi.n	800c2b0 <_dtoa_r+0x210>
 800c20c:	4b5b      	ldr	r3, [pc, #364]	@ (800c37c <_dtoa_r+0x2dc>)
 800c20e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c21a:	f7f4 fc77 	bl	8000b0c <__aeabi_dcmplt>
 800c21e:	2800      	cmp	r0, #0
 800c220:	d048      	beq.n	800c2b4 <_dtoa_r+0x214>
 800c222:	3f01      	subs	r7, #1
 800c224:	2300      	movs	r3, #0
 800c226:	9312      	str	r3, [sp, #72]	@ 0x48
 800c228:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c22a:	1b9b      	subs	r3, r3, r6
 800c22c:	1e5a      	subs	r2, r3, #1
 800c22e:	bf44      	itt	mi
 800c230:	f1c3 0801 	rsbmi	r8, r3, #1
 800c234:	2300      	movmi	r3, #0
 800c236:	9208      	str	r2, [sp, #32]
 800c238:	bf54      	ite	pl
 800c23a:	f04f 0800 	movpl.w	r8, #0
 800c23e:	9308      	strmi	r3, [sp, #32]
 800c240:	2f00      	cmp	r7, #0
 800c242:	db39      	blt.n	800c2b8 <_dtoa_r+0x218>
 800c244:	9b08      	ldr	r3, [sp, #32]
 800c246:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c248:	443b      	add	r3, r7
 800c24a:	9308      	str	r3, [sp, #32]
 800c24c:	2300      	movs	r3, #0
 800c24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c252:	2b09      	cmp	r3, #9
 800c254:	d864      	bhi.n	800c320 <_dtoa_r+0x280>
 800c256:	2b05      	cmp	r3, #5
 800c258:	bfc4      	itt	gt
 800c25a:	3b04      	subgt	r3, #4
 800c25c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c260:	f1a3 0302 	sub.w	r3, r3, #2
 800c264:	bfcc      	ite	gt
 800c266:	2400      	movgt	r4, #0
 800c268:	2401      	movle	r4, #1
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d863      	bhi.n	800c336 <_dtoa_r+0x296>
 800c26e:	e8df f003 	tbb	[pc, r3]
 800c272:	372a      	.short	0x372a
 800c274:	5535      	.short	0x5535
 800c276:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c27a:	441e      	add	r6, r3
 800c27c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c280:	2b20      	cmp	r3, #32
 800c282:	bfc1      	itttt	gt
 800c284:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c288:	409f      	lslgt	r7, r3
 800c28a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c28e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c292:	bfd6      	itet	le
 800c294:	f1c3 0320 	rsble	r3, r3, #32
 800c298:	ea47 0003 	orrgt.w	r0, r7, r3
 800c29c:	fa04 f003 	lslle.w	r0, r4, r3
 800c2a0:	f7f4 f948 	bl	8000534 <__aeabi_ui2d>
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c2aa:	3e01      	subs	r6, #1
 800c2ac:	9214      	str	r2, [sp, #80]	@ 0x50
 800c2ae:	e777      	b.n	800c1a0 <_dtoa_r+0x100>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e7b8      	b.n	800c226 <_dtoa_r+0x186>
 800c2b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c2b6:	e7b7      	b.n	800c228 <_dtoa_r+0x188>
 800c2b8:	427b      	negs	r3, r7
 800c2ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2bc:	2300      	movs	r3, #0
 800c2be:	eba8 0807 	sub.w	r8, r8, r7
 800c2c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c2c4:	e7c4      	b.n	800c250 <_dtoa_r+0x1b0>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	dc35      	bgt.n	800c33c <_dtoa_r+0x29c>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	9307      	str	r3, [sp, #28]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2da:	e00b      	b.n	800c2f4 <_dtoa_r+0x254>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e7f3      	b.n	800c2c8 <_dtoa_r+0x228>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2e6:	18fb      	adds	r3, r7, r3
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	9307      	str	r3, [sp, #28]
 800c2f0:	bfb8      	it	lt
 800c2f2:	2301      	movlt	r3, #1
 800c2f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	2204      	movs	r2, #4
 800c2fc:	f102 0514 	add.w	r5, r2, #20
 800c300:	429d      	cmp	r5, r3
 800c302:	d91f      	bls.n	800c344 <_dtoa_r+0x2a4>
 800c304:	6041      	str	r1, [r0, #4]
 800c306:	4658      	mov	r0, fp
 800c308:	f000 fd8e 	bl	800ce28 <_Balloc>
 800c30c:	4682      	mov	sl, r0
 800c30e:	2800      	cmp	r0, #0
 800c310:	d13c      	bne.n	800c38c <_dtoa_r+0x2ec>
 800c312:	4b1b      	ldr	r3, [pc, #108]	@ (800c380 <_dtoa_r+0x2e0>)
 800c314:	4602      	mov	r2, r0
 800c316:	f240 11af 	movw	r1, #431	@ 0x1af
 800c31a:	e6d8      	b.n	800c0ce <_dtoa_r+0x2e>
 800c31c:	2301      	movs	r3, #1
 800c31e:	e7e0      	b.n	800c2e2 <_dtoa_r+0x242>
 800c320:	2401      	movs	r4, #1
 800c322:	2300      	movs	r3, #0
 800c324:	9309      	str	r3, [sp, #36]	@ 0x24
 800c326:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c328:	f04f 33ff 	mov.w	r3, #4294967295
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	9307      	str	r3, [sp, #28]
 800c330:	2200      	movs	r2, #0
 800c332:	2312      	movs	r3, #18
 800c334:	e7d0      	b.n	800c2d8 <_dtoa_r+0x238>
 800c336:	2301      	movs	r3, #1
 800c338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c33a:	e7f5      	b.n	800c328 <_dtoa_r+0x288>
 800c33c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	9307      	str	r3, [sp, #28]
 800c342:	e7d7      	b.n	800c2f4 <_dtoa_r+0x254>
 800c344:	3101      	adds	r1, #1
 800c346:	0052      	lsls	r2, r2, #1
 800c348:	e7d8      	b.n	800c2fc <_dtoa_r+0x25c>
 800c34a:	bf00      	nop
 800c34c:	f3af 8000 	nop.w
 800c350:	636f4361 	.word	0x636f4361
 800c354:	3fd287a7 	.word	0x3fd287a7
 800c358:	8b60c8b3 	.word	0x8b60c8b3
 800c35c:	3fc68a28 	.word	0x3fc68a28
 800c360:	509f79fb 	.word	0x509f79fb
 800c364:	3fd34413 	.word	0x3fd34413
 800c368:	080116e9 	.word	0x080116e9
 800c36c:	08011700 	.word	0x08011700
 800c370:	7ff00000 	.word	0x7ff00000
 800c374:	08011940 	.word	0x08011940
 800c378:	3ff80000 	.word	0x3ff80000
 800c37c:	080117f8 	.word	0x080117f8
 800c380:	08011758 	.word	0x08011758
 800c384:	080116e5 	.word	0x080116e5
 800c388:	0801193f 	.word	0x0801193f
 800c38c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c390:	6018      	str	r0, [r3, #0]
 800c392:	9b07      	ldr	r3, [sp, #28]
 800c394:	2b0e      	cmp	r3, #14
 800c396:	f200 80a4 	bhi.w	800c4e2 <_dtoa_r+0x442>
 800c39a:	2c00      	cmp	r4, #0
 800c39c:	f000 80a1 	beq.w	800c4e2 <_dtoa_r+0x442>
 800c3a0:	2f00      	cmp	r7, #0
 800c3a2:	dd33      	ble.n	800c40c <_dtoa_r+0x36c>
 800c3a4:	4bad      	ldr	r3, [pc, #692]	@ (800c65c <_dtoa_r+0x5bc>)
 800c3a6:	f007 020f 	and.w	r2, r7, #15
 800c3aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3ae:	ed93 7b00 	vldr	d7, [r3]
 800c3b2:	05f8      	lsls	r0, r7, #23
 800c3b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c3b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c3bc:	d516      	bpl.n	800c3ec <_dtoa_r+0x34c>
 800c3be:	4ba8      	ldr	r3, [pc, #672]	@ (800c660 <_dtoa_r+0x5c0>)
 800c3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3c8:	f7f4 fa58 	bl	800087c <__aeabi_ddiv>
 800c3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3d0:	f004 040f 	and.w	r4, r4, #15
 800c3d4:	2603      	movs	r6, #3
 800c3d6:	4da2      	ldr	r5, [pc, #648]	@ (800c660 <_dtoa_r+0x5c0>)
 800c3d8:	b954      	cbnz	r4, 800c3f0 <_dtoa_r+0x350>
 800c3da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3e2:	f7f4 fa4b 	bl	800087c <__aeabi_ddiv>
 800c3e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3ea:	e028      	b.n	800c43e <_dtoa_r+0x39e>
 800c3ec:	2602      	movs	r6, #2
 800c3ee:	e7f2      	b.n	800c3d6 <_dtoa_r+0x336>
 800c3f0:	07e1      	lsls	r1, r4, #31
 800c3f2:	d508      	bpl.n	800c406 <_dtoa_r+0x366>
 800c3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3fc:	f7f4 f914 	bl	8000628 <__aeabi_dmul>
 800c400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c404:	3601      	adds	r6, #1
 800c406:	1064      	asrs	r4, r4, #1
 800c408:	3508      	adds	r5, #8
 800c40a:	e7e5      	b.n	800c3d8 <_dtoa_r+0x338>
 800c40c:	f000 80d2 	beq.w	800c5b4 <_dtoa_r+0x514>
 800c410:	427c      	negs	r4, r7
 800c412:	4b92      	ldr	r3, [pc, #584]	@ (800c65c <_dtoa_r+0x5bc>)
 800c414:	4d92      	ldr	r5, [pc, #584]	@ (800c660 <_dtoa_r+0x5c0>)
 800c416:	f004 020f 	and.w	r2, r4, #15
 800c41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c422:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c426:	f7f4 f8ff 	bl	8000628 <__aeabi_dmul>
 800c42a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c42e:	1124      	asrs	r4, r4, #4
 800c430:	2300      	movs	r3, #0
 800c432:	2602      	movs	r6, #2
 800c434:	2c00      	cmp	r4, #0
 800c436:	f040 80b2 	bne.w	800c59e <_dtoa_r+0x4fe>
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1d3      	bne.n	800c3e6 <_dtoa_r+0x346>
 800c43e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c440:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c444:	2b00      	cmp	r3, #0
 800c446:	f000 80b7 	beq.w	800c5b8 <_dtoa_r+0x518>
 800c44a:	4b86      	ldr	r3, [pc, #536]	@ (800c664 <_dtoa_r+0x5c4>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	4620      	mov	r0, r4
 800c450:	4629      	mov	r1, r5
 800c452:	f7f4 fb5b 	bl	8000b0c <__aeabi_dcmplt>
 800c456:	2800      	cmp	r0, #0
 800c458:	f000 80ae 	beq.w	800c5b8 <_dtoa_r+0x518>
 800c45c:	9b07      	ldr	r3, [sp, #28]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 80aa 	beq.w	800c5b8 <_dtoa_r+0x518>
 800c464:	9b00      	ldr	r3, [sp, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	dd37      	ble.n	800c4da <_dtoa_r+0x43a>
 800c46a:	1e7b      	subs	r3, r7, #1
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	4620      	mov	r0, r4
 800c470:	4b7d      	ldr	r3, [pc, #500]	@ (800c668 <_dtoa_r+0x5c8>)
 800c472:	2200      	movs	r2, #0
 800c474:	4629      	mov	r1, r5
 800c476:	f7f4 f8d7 	bl	8000628 <__aeabi_dmul>
 800c47a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c47e:	9c00      	ldr	r4, [sp, #0]
 800c480:	3601      	adds	r6, #1
 800c482:	4630      	mov	r0, r6
 800c484:	f7f4 f866 	bl	8000554 <__aeabi_i2d>
 800c488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c48c:	f7f4 f8cc 	bl	8000628 <__aeabi_dmul>
 800c490:	4b76      	ldr	r3, [pc, #472]	@ (800c66c <_dtoa_r+0x5cc>)
 800c492:	2200      	movs	r2, #0
 800c494:	f7f3 ff12 	bl	80002bc <__adddf3>
 800c498:	4605      	mov	r5, r0
 800c49a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c49e:	2c00      	cmp	r4, #0
 800c4a0:	f040 808d 	bne.w	800c5be <_dtoa_r+0x51e>
 800c4a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4a8:	4b71      	ldr	r3, [pc, #452]	@ (800c670 <_dtoa_r+0x5d0>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f7f3 ff04 	bl	80002b8 <__aeabi_dsub>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4b8:	462a      	mov	r2, r5
 800c4ba:	4633      	mov	r3, r6
 800c4bc:	f7f4 fb44 	bl	8000b48 <__aeabi_dcmpgt>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	f040 828b 	bne.w	800c9dc <_dtoa_r+0x93c>
 800c4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4ca:	462a      	mov	r2, r5
 800c4cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c4d0:	f7f4 fb1c 	bl	8000b0c <__aeabi_dcmplt>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	f040 8128 	bne.w	800c72a <_dtoa_r+0x68a>
 800c4da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c4de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c4e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f2c0 815a 	blt.w	800c79e <_dtoa_r+0x6fe>
 800c4ea:	2f0e      	cmp	r7, #14
 800c4ec:	f300 8157 	bgt.w	800c79e <_dtoa_r+0x6fe>
 800c4f0:	4b5a      	ldr	r3, [pc, #360]	@ (800c65c <_dtoa_r+0x5bc>)
 800c4f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c4f6:	ed93 7b00 	vldr	d7, [r3]
 800c4fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	ed8d 7b00 	vstr	d7, [sp]
 800c502:	da03      	bge.n	800c50c <_dtoa_r+0x46c>
 800c504:	9b07      	ldr	r3, [sp, #28]
 800c506:	2b00      	cmp	r3, #0
 800c508:	f340 8101 	ble.w	800c70e <_dtoa_r+0x66e>
 800c50c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c510:	4656      	mov	r6, sl
 800c512:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c516:	4620      	mov	r0, r4
 800c518:	4629      	mov	r1, r5
 800c51a:	f7f4 f9af 	bl	800087c <__aeabi_ddiv>
 800c51e:	f7f4 fb33 	bl	8000b88 <__aeabi_d2iz>
 800c522:	4680      	mov	r8, r0
 800c524:	f7f4 f816 	bl	8000554 <__aeabi_i2d>
 800c528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c52c:	f7f4 f87c 	bl	8000628 <__aeabi_dmul>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	4620      	mov	r0, r4
 800c536:	4629      	mov	r1, r5
 800c538:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c53c:	f7f3 febc 	bl	80002b8 <__aeabi_dsub>
 800c540:	f806 4b01 	strb.w	r4, [r6], #1
 800c544:	9d07      	ldr	r5, [sp, #28]
 800c546:	eba6 040a 	sub.w	r4, r6, sl
 800c54a:	42a5      	cmp	r5, r4
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	f040 8117 	bne.w	800c782 <_dtoa_r+0x6e2>
 800c554:	f7f3 feb2 	bl	80002bc <__adddf3>
 800c558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c55c:	4604      	mov	r4, r0
 800c55e:	460d      	mov	r5, r1
 800c560:	f7f4 faf2 	bl	8000b48 <__aeabi_dcmpgt>
 800c564:	2800      	cmp	r0, #0
 800c566:	f040 80f9 	bne.w	800c75c <_dtoa_r+0x6bc>
 800c56a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c56e:	4620      	mov	r0, r4
 800c570:	4629      	mov	r1, r5
 800c572:	f7f4 fac1 	bl	8000af8 <__aeabi_dcmpeq>
 800c576:	b118      	cbz	r0, 800c580 <_dtoa_r+0x4e0>
 800c578:	f018 0f01 	tst.w	r8, #1
 800c57c:	f040 80ee 	bne.w	800c75c <_dtoa_r+0x6bc>
 800c580:	4649      	mov	r1, r9
 800c582:	4658      	mov	r0, fp
 800c584:	f000 fc90 	bl	800cea8 <_Bfree>
 800c588:	2300      	movs	r3, #0
 800c58a:	7033      	strb	r3, [r6, #0]
 800c58c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c58e:	3701      	adds	r7, #1
 800c590:	601f      	str	r7, [r3, #0]
 800c592:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c594:	2b00      	cmp	r3, #0
 800c596:	f000 831d 	beq.w	800cbd4 <_dtoa_r+0xb34>
 800c59a:	601e      	str	r6, [r3, #0]
 800c59c:	e31a      	b.n	800cbd4 <_dtoa_r+0xb34>
 800c59e:	07e2      	lsls	r2, r4, #31
 800c5a0:	d505      	bpl.n	800c5ae <_dtoa_r+0x50e>
 800c5a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5a6:	f7f4 f83f 	bl	8000628 <__aeabi_dmul>
 800c5aa:	3601      	adds	r6, #1
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	1064      	asrs	r4, r4, #1
 800c5b0:	3508      	adds	r5, #8
 800c5b2:	e73f      	b.n	800c434 <_dtoa_r+0x394>
 800c5b4:	2602      	movs	r6, #2
 800c5b6:	e742      	b.n	800c43e <_dtoa_r+0x39e>
 800c5b8:	9c07      	ldr	r4, [sp, #28]
 800c5ba:	9704      	str	r7, [sp, #16]
 800c5bc:	e761      	b.n	800c482 <_dtoa_r+0x3e2>
 800c5be:	4b27      	ldr	r3, [pc, #156]	@ (800c65c <_dtoa_r+0x5bc>)
 800c5c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5ca:	4454      	add	r4, sl
 800c5cc:	2900      	cmp	r1, #0
 800c5ce:	d053      	beq.n	800c678 <_dtoa_r+0x5d8>
 800c5d0:	4928      	ldr	r1, [pc, #160]	@ (800c674 <_dtoa_r+0x5d4>)
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	f7f4 f952 	bl	800087c <__aeabi_ddiv>
 800c5d8:	4633      	mov	r3, r6
 800c5da:	462a      	mov	r2, r5
 800c5dc:	f7f3 fe6c 	bl	80002b8 <__aeabi_dsub>
 800c5e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5e4:	4656      	mov	r6, sl
 800c5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ea:	f7f4 facd 	bl	8000b88 <__aeabi_d2iz>
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	f7f3 ffb0 	bl	8000554 <__aeabi_i2d>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5fc:	f7f3 fe5c 	bl	80002b8 <__aeabi_dsub>
 800c600:	3530      	adds	r5, #48	@ 0x30
 800c602:	4602      	mov	r2, r0
 800c604:	460b      	mov	r3, r1
 800c606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c60a:	f806 5b01 	strb.w	r5, [r6], #1
 800c60e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c612:	f7f4 fa7b 	bl	8000b0c <__aeabi_dcmplt>
 800c616:	2800      	cmp	r0, #0
 800c618:	d171      	bne.n	800c6fe <_dtoa_r+0x65e>
 800c61a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c61e:	4911      	ldr	r1, [pc, #68]	@ (800c664 <_dtoa_r+0x5c4>)
 800c620:	2000      	movs	r0, #0
 800c622:	f7f3 fe49 	bl	80002b8 <__aeabi_dsub>
 800c626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c62a:	f7f4 fa6f 	bl	8000b0c <__aeabi_dcmplt>
 800c62e:	2800      	cmp	r0, #0
 800c630:	f040 8095 	bne.w	800c75e <_dtoa_r+0x6be>
 800c634:	42a6      	cmp	r6, r4
 800c636:	f43f af50 	beq.w	800c4da <_dtoa_r+0x43a>
 800c63a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c63e:	4b0a      	ldr	r3, [pc, #40]	@ (800c668 <_dtoa_r+0x5c8>)
 800c640:	2200      	movs	r2, #0
 800c642:	f7f3 fff1 	bl	8000628 <__aeabi_dmul>
 800c646:	4b08      	ldr	r3, [pc, #32]	@ (800c668 <_dtoa_r+0x5c8>)
 800c648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c64c:	2200      	movs	r2, #0
 800c64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c652:	f7f3 ffe9 	bl	8000628 <__aeabi_dmul>
 800c656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c65a:	e7c4      	b.n	800c5e6 <_dtoa_r+0x546>
 800c65c:	080117f8 	.word	0x080117f8
 800c660:	080117d0 	.word	0x080117d0
 800c664:	3ff00000 	.word	0x3ff00000
 800c668:	40240000 	.word	0x40240000
 800c66c:	401c0000 	.word	0x401c0000
 800c670:	40140000 	.word	0x40140000
 800c674:	3fe00000 	.word	0x3fe00000
 800c678:	4631      	mov	r1, r6
 800c67a:	4628      	mov	r0, r5
 800c67c:	f7f3 ffd4 	bl	8000628 <__aeabi_dmul>
 800c680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c684:	9415      	str	r4, [sp, #84]	@ 0x54
 800c686:	4656      	mov	r6, sl
 800c688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c68c:	f7f4 fa7c 	bl	8000b88 <__aeabi_d2iz>
 800c690:	4605      	mov	r5, r0
 800c692:	f7f3 ff5f 	bl	8000554 <__aeabi_i2d>
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c69e:	f7f3 fe0b 	bl	80002b8 <__aeabi_dsub>
 800c6a2:	3530      	adds	r5, #48	@ 0x30
 800c6a4:	f806 5b01 	strb.w	r5, [r6], #1
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	42a6      	cmp	r6, r4
 800c6ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6b2:	f04f 0200 	mov.w	r2, #0
 800c6b6:	d124      	bne.n	800c702 <_dtoa_r+0x662>
 800c6b8:	4bac      	ldr	r3, [pc, #688]	@ (800c96c <_dtoa_r+0x8cc>)
 800c6ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6be:	f7f3 fdfd 	bl	80002bc <__adddf3>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ca:	f7f4 fa3d 	bl	8000b48 <__aeabi_dcmpgt>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d145      	bne.n	800c75e <_dtoa_r+0x6be>
 800c6d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6d6:	49a5      	ldr	r1, [pc, #660]	@ (800c96c <_dtoa_r+0x8cc>)
 800c6d8:	2000      	movs	r0, #0
 800c6da:	f7f3 fded 	bl	80002b8 <__aeabi_dsub>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6e6:	f7f4 fa11 	bl	8000b0c <__aeabi_dcmplt>
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	f43f aef5 	beq.w	800c4da <_dtoa_r+0x43a>
 800c6f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c6f2:	1e73      	subs	r3, r6, #1
 800c6f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c6f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6fa:	2b30      	cmp	r3, #48	@ 0x30
 800c6fc:	d0f8      	beq.n	800c6f0 <_dtoa_r+0x650>
 800c6fe:	9f04      	ldr	r7, [sp, #16]
 800c700:	e73e      	b.n	800c580 <_dtoa_r+0x4e0>
 800c702:	4b9b      	ldr	r3, [pc, #620]	@ (800c970 <_dtoa_r+0x8d0>)
 800c704:	f7f3 ff90 	bl	8000628 <__aeabi_dmul>
 800c708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c70c:	e7bc      	b.n	800c688 <_dtoa_r+0x5e8>
 800c70e:	d10c      	bne.n	800c72a <_dtoa_r+0x68a>
 800c710:	4b98      	ldr	r3, [pc, #608]	@ (800c974 <_dtoa_r+0x8d4>)
 800c712:	2200      	movs	r2, #0
 800c714:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c718:	f7f3 ff86 	bl	8000628 <__aeabi_dmul>
 800c71c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c720:	f7f4 fa08 	bl	8000b34 <__aeabi_dcmpge>
 800c724:	2800      	cmp	r0, #0
 800c726:	f000 8157 	beq.w	800c9d8 <_dtoa_r+0x938>
 800c72a:	2400      	movs	r4, #0
 800c72c:	4625      	mov	r5, r4
 800c72e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c730:	43db      	mvns	r3, r3
 800c732:	9304      	str	r3, [sp, #16]
 800c734:	4656      	mov	r6, sl
 800c736:	2700      	movs	r7, #0
 800c738:	4621      	mov	r1, r4
 800c73a:	4658      	mov	r0, fp
 800c73c:	f000 fbb4 	bl	800cea8 <_Bfree>
 800c740:	2d00      	cmp	r5, #0
 800c742:	d0dc      	beq.n	800c6fe <_dtoa_r+0x65e>
 800c744:	b12f      	cbz	r7, 800c752 <_dtoa_r+0x6b2>
 800c746:	42af      	cmp	r7, r5
 800c748:	d003      	beq.n	800c752 <_dtoa_r+0x6b2>
 800c74a:	4639      	mov	r1, r7
 800c74c:	4658      	mov	r0, fp
 800c74e:	f000 fbab 	bl	800cea8 <_Bfree>
 800c752:	4629      	mov	r1, r5
 800c754:	4658      	mov	r0, fp
 800c756:	f000 fba7 	bl	800cea8 <_Bfree>
 800c75a:	e7d0      	b.n	800c6fe <_dtoa_r+0x65e>
 800c75c:	9704      	str	r7, [sp, #16]
 800c75e:	4633      	mov	r3, r6
 800c760:	461e      	mov	r6, r3
 800c762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c766:	2a39      	cmp	r2, #57	@ 0x39
 800c768:	d107      	bne.n	800c77a <_dtoa_r+0x6da>
 800c76a:	459a      	cmp	sl, r3
 800c76c:	d1f8      	bne.n	800c760 <_dtoa_r+0x6c0>
 800c76e:	9a04      	ldr	r2, [sp, #16]
 800c770:	3201      	adds	r2, #1
 800c772:	9204      	str	r2, [sp, #16]
 800c774:	2230      	movs	r2, #48	@ 0x30
 800c776:	f88a 2000 	strb.w	r2, [sl]
 800c77a:	781a      	ldrb	r2, [r3, #0]
 800c77c:	3201      	adds	r2, #1
 800c77e:	701a      	strb	r2, [r3, #0]
 800c780:	e7bd      	b.n	800c6fe <_dtoa_r+0x65e>
 800c782:	4b7b      	ldr	r3, [pc, #492]	@ (800c970 <_dtoa_r+0x8d0>)
 800c784:	2200      	movs	r2, #0
 800c786:	f7f3 ff4f 	bl	8000628 <__aeabi_dmul>
 800c78a:	2200      	movs	r2, #0
 800c78c:	2300      	movs	r3, #0
 800c78e:	4604      	mov	r4, r0
 800c790:	460d      	mov	r5, r1
 800c792:	f7f4 f9b1 	bl	8000af8 <__aeabi_dcmpeq>
 800c796:	2800      	cmp	r0, #0
 800c798:	f43f aebb 	beq.w	800c512 <_dtoa_r+0x472>
 800c79c:	e6f0      	b.n	800c580 <_dtoa_r+0x4e0>
 800c79e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	f000 80db 	beq.w	800c95c <_dtoa_r+0x8bc>
 800c7a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7a8:	2a01      	cmp	r2, #1
 800c7aa:	f300 80bf 	bgt.w	800c92c <_dtoa_r+0x88c>
 800c7ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c7b0:	2a00      	cmp	r2, #0
 800c7b2:	f000 80b7 	beq.w	800c924 <_dtoa_r+0x884>
 800c7b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c7ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c7bc:	4646      	mov	r6, r8
 800c7be:	9a08      	ldr	r2, [sp, #32]
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	441a      	add	r2, r3
 800c7c4:	4658      	mov	r0, fp
 800c7c6:	4498      	add	r8, r3
 800c7c8:	9208      	str	r2, [sp, #32]
 800c7ca:	f000 fc6b 	bl	800d0a4 <__i2b>
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	b15e      	cbz	r6, 800c7ea <_dtoa_r+0x74a>
 800c7d2:	9b08      	ldr	r3, [sp, #32]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	dd08      	ble.n	800c7ea <_dtoa_r+0x74a>
 800c7d8:	42b3      	cmp	r3, r6
 800c7da:	9a08      	ldr	r2, [sp, #32]
 800c7dc:	bfa8      	it	ge
 800c7de:	4633      	movge	r3, r6
 800c7e0:	eba8 0803 	sub.w	r8, r8, r3
 800c7e4:	1af6      	subs	r6, r6, r3
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	9308      	str	r3, [sp, #32]
 800c7ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7ec:	b1f3      	cbz	r3, 800c82c <_dtoa_r+0x78c>
 800c7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 80b7 	beq.w	800c964 <_dtoa_r+0x8c4>
 800c7f6:	b18c      	cbz	r4, 800c81c <_dtoa_r+0x77c>
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	4658      	mov	r0, fp
 800c7fe:	f000 fd11 	bl	800d224 <__pow5mult>
 800c802:	464a      	mov	r2, r9
 800c804:	4601      	mov	r1, r0
 800c806:	4605      	mov	r5, r0
 800c808:	4658      	mov	r0, fp
 800c80a:	f000 fc61 	bl	800d0d0 <__multiply>
 800c80e:	4649      	mov	r1, r9
 800c810:	9004      	str	r0, [sp, #16]
 800c812:	4658      	mov	r0, fp
 800c814:	f000 fb48 	bl	800cea8 <_Bfree>
 800c818:	9b04      	ldr	r3, [sp, #16]
 800c81a:	4699      	mov	r9, r3
 800c81c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c81e:	1b1a      	subs	r2, r3, r4
 800c820:	d004      	beq.n	800c82c <_dtoa_r+0x78c>
 800c822:	4649      	mov	r1, r9
 800c824:	4658      	mov	r0, fp
 800c826:	f000 fcfd 	bl	800d224 <__pow5mult>
 800c82a:	4681      	mov	r9, r0
 800c82c:	2101      	movs	r1, #1
 800c82e:	4658      	mov	r0, fp
 800c830:	f000 fc38 	bl	800d0a4 <__i2b>
 800c834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c836:	4604      	mov	r4, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 81cf 	beq.w	800cbdc <_dtoa_r+0xb3c>
 800c83e:	461a      	mov	r2, r3
 800c840:	4601      	mov	r1, r0
 800c842:	4658      	mov	r0, fp
 800c844:	f000 fcee 	bl	800d224 <__pow5mult>
 800c848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	4604      	mov	r4, r0
 800c84e:	f300 8095 	bgt.w	800c97c <_dtoa_r+0x8dc>
 800c852:	9b02      	ldr	r3, [sp, #8]
 800c854:	2b00      	cmp	r3, #0
 800c856:	f040 8087 	bne.w	800c968 <_dtoa_r+0x8c8>
 800c85a:	9b03      	ldr	r3, [sp, #12]
 800c85c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c860:	2b00      	cmp	r3, #0
 800c862:	f040 8089 	bne.w	800c978 <_dtoa_r+0x8d8>
 800c866:	9b03      	ldr	r3, [sp, #12]
 800c868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c86c:	0d1b      	lsrs	r3, r3, #20
 800c86e:	051b      	lsls	r3, r3, #20
 800c870:	b12b      	cbz	r3, 800c87e <_dtoa_r+0x7de>
 800c872:	9b08      	ldr	r3, [sp, #32]
 800c874:	3301      	adds	r3, #1
 800c876:	9308      	str	r3, [sp, #32]
 800c878:	f108 0801 	add.w	r8, r8, #1
 800c87c:	2301      	movs	r3, #1
 800c87e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 81b0 	beq.w	800cbe8 <_dtoa_r+0xb48>
 800c888:	6923      	ldr	r3, [r4, #16]
 800c88a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c88e:	6918      	ldr	r0, [r3, #16]
 800c890:	f000 fbbc 	bl	800d00c <__hi0bits>
 800c894:	f1c0 0020 	rsb	r0, r0, #32
 800c898:	9b08      	ldr	r3, [sp, #32]
 800c89a:	4418      	add	r0, r3
 800c89c:	f010 001f 	ands.w	r0, r0, #31
 800c8a0:	d077      	beq.n	800c992 <_dtoa_r+0x8f2>
 800c8a2:	f1c0 0320 	rsb	r3, r0, #32
 800c8a6:	2b04      	cmp	r3, #4
 800c8a8:	dd6b      	ble.n	800c982 <_dtoa_r+0x8e2>
 800c8aa:	9b08      	ldr	r3, [sp, #32]
 800c8ac:	f1c0 001c 	rsb	r0, r0, #28
 800c8b0:	4403      	add	r3, r0
 800c8b2:	4480      	add	r8, r0
 800c8b4:	4406      	add	r6, r0
 800c8b6:	9308      	str	r3, [sp, #32]
 800c8b8:	f1b8 0f00 	cmp.w	r8, #0
 800c8bc:	dd05      	ble.n	800c8ca <_dtoa_r+0x82a>
 800c8be:	4649      	mov	r1, r9
 800c8c0:	4642      	mov	r2, r8
 800c8c2:	4658      	mov	r0, fp
 800c8c4:	f000 fd08 	bl	800d2d8 <__lshift>
 800c8c8:	4681      	mov	r9, r0
 800c8ca:	9b08      	ldr	r3, [sp, #32]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	dd05      	ble.n	800c8dc <_dtoa_r+0x83c>
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	4658      	mov	r0, fp
 800c8d6:	f000 fcff 	bl	800d2d8 <__lshift>
 800c8da:	4604      	mov	r4, r0
 800c8dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d059      	beq.n	800c996 <_dtoa_r+0x8f6>
 800c8e2:	4621      	mov	r1, r4
 800c8e4:	4648      	mov	r0, r9
 800c8e6:	f000 fd63 	bl	800d3b0 <__mcmp>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	da53      	bge.n	800c996 <_dtoa_r+0x8f6>
 800c8ee:	1e7b      	subs	r3, r7, #1
 800c8f0:	9304      	str	r3, [sp, #16]
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	220a      	movs	r2, #10
 800c8f8:	4658      	mov	r0, fp
 800c8fa:	f000 faf7 	bl	800ceec <__multadd>
 800c8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c900:	4681      	mov	r9, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 8172 	beq.w	800cbec <_dtoa_r+0xb4c>
 800c908:	2300      	movs	r3, #0
 800c90a:	4629      	mov	r1, r5
 800c90c:	220a      	movs	r2, #10
 800c90e:	4658      	mov	r0, fp
 800c910:	f000 faec 	bl	800ceec <__multadd>
 800c914:	9b00      	ldr	r3, [sp, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	4605      	mov	r5, r0
 800c91a:	dc67      	bgt.n	800c9ec <_dtoa_r+0x94c>
 800c91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c91e:	2b02      	cmp	r3, #2
 800c920:	dc41      	bgt.n	800c9a6 <_dtoa_r+0x906>
 800c922:	e063      	b.n	800c9ec <_dtoa_r+0x94c>
 800c924:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c926:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c92a:	e746      	b.n	800c7ba <_dtoa_r+0x71a>
 800c92c:	9b07      	ldr	r3, [sp, #28]
 800c92e:	1e5c      	subs	r4, r3, #1
 800c930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c932:	42a3      	cmp	r3, r4
 800c934:	bfbf      	itttt	lt
 800c936:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c938:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c93a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c93c:	1ae3      	sublt	r3, r4, r3
 800c93e:	bfb4      	ite	lt
 800c940:	18d2      	addlt	r2, r2, r3
 800c942:	1b1c      	subge	r4, r3, r4
 800c944:	9b07      	ldr	r3, [sp, #28]
 800c946:	bfbc      	itt	lt
 800c948:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c94a:	2400      	movlt	r4, #0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	bfb5      	itete	lt
 800c950:	eba8 0603 	sublt.w	r6, r8, r3
 800c954:	9b07      	ldrge	r3, [sp, #28]
 800c956:	2300      	movlt	r3, #0
 800c958:	4646      	movge	r6, r8
 800c95a:	e730      	b.n	800c7be <_dtoa_r+0x71e>
 800c95c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c95e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c960:	4646      	mov	r6, r8
 800c962:	e735      	b.n	800c7d0 <_dtoa_r+0x730>
 800c964:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c966:	e75c      	b.n	800c822 <_dtoa_r+0x782>
 800c968:	2300      	movs	r3, #0
 800c96a:	e788      	b.n	800c87e <_dtoa_r+0x7de>
 800c96c:	3fe00000 	.word	0x3fe00000
 800c970:	40240000 	.word	0x40240000
 800c974:	40140000 	.word	0x40140000
 800c978:	9b02      	ldr	r3, [sp, #8]
 800c97a:	e780      	b.n	800c87e <_dtoa_r+0x7de>
 800c97c:	2300      	movs	r3, #0
 800c97e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c980:	e782      	b.n	800c888 <_dtoa_r+0x7e8>
 800c982:	d099      	beq.n	800c8b8 <_dtoa_r+0x818>
 800c984:	9a08      	ldr	r2, [sp, #32]
 800c986:	331c      	adds	r3, #28
 800c988:	441a      	add	r2, r3
 800c98a:	4498      	add	r8, r3
 800c98c:	441e      	add	r6, r3
 800c98e:	9208      	str	r2, [sp, #32]
 800c990:	e792      	b.n	800c8b8 <_dtoa_r+0x818>
 800c992:	4603      	mov	r3, r0
 800c994:	e7f6      	b.n	800c984 <_dtoa_r+0x8e4>
 800c996:	9b07      	ldr	r3, [sp, #28]
 800c998:	9704      	str	r7, [sp, #16]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	dc20      	bgt.n	800c9e0 <_dtoa_r+0x940>
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	dd1e      	ble.n	800c9e4 <_dtoa_r+0x944>
 800c9a6:	9b00      	ldr	r3, [sp, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f47f aec0 	bne.w	800c72e <_dtoa_r+0x68e>
 800c9ae:	4621      	mov	r1, r4
 800c9b0:	2205      	movs	r2, #5
 800c9b2:	4658      	mov	r0, fp
 800c9b4:	f000 fa9a 	bl	800ceec <__multadd>
 800c9b8:	4601      	mov	r1, r0
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	4648      	mov	r0, r9
 800c9be:	f000 fcf7 	bl	800d3b0 <__mcmp>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	f77f aeb3 	ble.w	800c72e <_dtoa_r+0x68e>
 800c9c8:	4656      	mov	r6, sl
 800c9ca:	2331      	movs	r3, #49	@ 0x31
 800c9cc:	f806 3b01 	strb.w	r3, [r6], #1
 800c9d0:	9b04      	ldr	r3, [sp, #16]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	9304      	str	r3, [sp, #16]
 800c9d6:	e6ae      	b.n	800c736 <_dtoa_r+0x696>
 800c9d8:	9c07      	ldr	r4, [sp, #28]
 800c9da:	9704      	str	r7, [sp, #16]
 800c9dc:	4625      	mov	r5, r4
 800c9de:	e7f3      	b.n	800c9c8 <_dtoa_r+0x928>
 800c9e0:	9b07      	ldr	r3, [sp, #28]
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f000 8104 	beq.w	800cbf4 <_dtoa_r+0xb54>
 800c9ec:	2e00      	cmp	r6, #0
 800c9ee:	dd05      	ble.n	800c9fc <_dtoa_r+0x95c>
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	4632      	mov	r2, r6
 800c9f4:	4658      	mov	r0, fp
 800c9f6:	f000 fc6f 	bl	800d2d8 <__lshift>
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d05a      	beq.n	800cab8 <_dtoa_r+0xa18>
 800ca02:	6869      	ldr	r1, [r5, #4]
 800ca04:	4658      	mov	r0, fp
 800ca06:	f000 fa0f 	bl	800ce28 <_Balloc>
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	b928      	cbnz	r0, 800ca1a <_dtoa_r+0x97a>
 800ca0e:	4b84      	ldr	r3, [pc, #528]	@ (800cc20 <_dtoa_r+0xb80>)
 800ca10:	4602      	mov	r2, r0
 800ca12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca16:	f7ff bb5a 	b.w	800c0ce <_dtoa_r+0x2e>
 800ca1a:	692a      	ldr	r2, [r5, #16]
 800ca1c:	3202      	adds	r2, #2
 800ca1e:	0092      	lsls	r2, r2, #2
 800ca20:	f105 010c 	add.w	r1, r5, #12
 800ca24:	300c      	adds	r0, #12
 800ca26:	f002 fc81 	bl	800f32c <memcpy>
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	4658      	mov	r0, fp
 800ca30:	f000 fc52 	bl	800d2d8 <__lshift>
 800ca34:	f10a 0301 	add.w	r3, sl, #1
 800ca38:	9307      	str	r3, [sp, #28]
 800ca3a:	9b00      	ldr	r3, [sp, #0]
 800ca3c:	4453      	add	r3, sl
 800ca3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca40:	9b02      	ldr	r3, [sp, #8]
 800ca42:	f003 0301 	and.w	r3, r3, #1
 800ca46:	462f      	mov	r7, r5
 800ca48:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	9b07      	ldr	r3, [sp, #28]
 800ca4e:	4621      	mov	r1, r4
 800ca50:	3b01      	subs	r3, #1
 800ca52:	4648      	mov	r0, r9
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	f7ff fa99 	bl	800bf8c <quorem>
 800ca5a:	4639      	mov	r1, r7
 800ca5c:	9002      	str	r0, [sp, #8]
 800ca5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca62:	4648      	mov	r0, r9
 800ca64:	f000 fca4 	bl	800d3b0 <__mcmp>
 800ca68:	462a      	mov	r2, r5
 800ca6a:	9008      	str	r0, [sp, #32]
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	4658      	mov	r0, fp
 800ca70:	f000 fcba 	bl	800d3e8 <__mdiff>
 800ca74:	68c2      	ldr	r2, [r0, #12]
 800ca76:	4606      	mov	r6, r0
 800ca78:	bb02      	cbnz	r2, 800cabc <_dtoa_r+0xa1c>
 800ca7a:	4601      	mov	r1, r0
 800ca7c:	4648      	mov	r0, r9
 800ca7e:	f000 fc97 	bl	800d3b0 <__mcmp>
 800ca82:	4602      	mov	r2, r0
 800ca84:	4631      	mov	r1, r6
 800ca86:	4658      	mov	r0, fp
 800ca88:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca8a:	f000 fa0d 	bl	800cea8 <_Bfree>
 800ca8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca92:	9e07      	ldr	r6, [sp, #28]
 800ca94:	ea43 0102 	orr.w	r1, r3, r2
 800ca98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca9a:	4319      	orrs	r1, r3
 800ca9c:	d110      	bne.n	800cac0 <_dtoa_r+0xa20>
 800ca9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800caa2:	d029      	beq.n	800caf8 <_dtoa_r+0xa58>
 800caa4:	9b08      	ldr	r3, [sp, #32]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	dd02      	ble.n	800cab0 <_dtoa_r+0xa10>
 800caaa:	9b02      	ldr	r3, [sp, #8]
 800caac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cab0:	9b00      	ldr	r3, [sp, #0]
 800cab2:	f883 8000 	strb.w	r8, [r3]
 800cab6:	e63f      	b.n	800c738 <_dtoa_r+0x698>
 800cab8:	4628      	mov	r0, r5
 800caba:	e7bb      	b.n	800ca34 <_dtoa_r+0x994>
 800cabc:	2201      	movs	r2, #1
 800cabe:	e7e1      	b.n	800ca84 <_dtoa_r+0x9e4>
 800cac0:	9b08      	ldr	r3, [sp, #32]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	db04      	blt.n	800cad0 <_dtoa_r+0xa30>
 800cac6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cac8:	430b      	orrs	r3, r1
 800caca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cacc:	430b      	orrs	r3, r1
 800cace:	d120      	bne.n	800cb12 <_dtoa_r+0xa72>
 800cad0:	2a00      	cmp	r2, #0
 800cad2:	dded      	ble.n	800cab0 <_dtoa_r+0xa10>
 800cad4:	4649      	mov	r1, r9
 800cad6:	2201      	movs	r2, #1
 800cad8:	4658      	mov	r0, fp
 800cada:	f000 fbfd 	bl	800d2d8 <__lshift>
 800cade:	4621      	mov	r1, r4
 800cae0:	4681      	mov	r9, r0
 800cae2:	f000 fc65 	bl	800d3b0 <__mcmp>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	dc03      	bgt.n	800caf2 <_dtoa_r+0xa52>
 800caea:	d1e1      	bne.n	800cab0 <_dtoa_r+0xa10>
 800caec:	f018 0f01 	tst.w	r8, #1
 800caf0:	d0de      	beq.n	800cab0 <_dtoa_r+0xa10>
 800caf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800caf6:	d1d8      	bne.n	800caaa <_dtoa_r+0xa0a>
 800caf8:	9a00      	ldr	r2, [sp, #0]
 800cafa:	2339      	movs	r3, #57	@ 0x39
 800cafc:	7013      	strb	r3, [r2, #0]
 800cafe:	4633      	mov	r3, r6
 800cb00:	461e      	mov	r6, r3
 800cb02:	3b01      	subs	r3, #1
 800cb04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb08:	2a39      	cmp	r2, #57	@ 0x39
 800cb0a:	d052      	beq.n	800cbb2 <_dtoa_r+0xb12>
 800cb0c:	3201      	adds	r2, #1
 800cb0e:	701a      	strb	r2, [r3, #0]
 800cb10:	e612      	b.n	800c738 <_dtoa_r+0x698>
 800cb12:	2a00      	cmp	r2, #0
 800cb14:	dd07      	ble.n	800cb26 <_dtoa_r+0xa86>
 800cb16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb1a:	d0ed      	beq.n	800caf8 <_dtoa_r+0xa58>
 800cb1c:	9a00      	ldr	r2, [sp, #0]
 800cb1e:	f108 0301 	add.w	r3, r8, #1
 800cb22:	7013      	strb	r3, [r2, #0]
 800cb24:	e608      	b.n	800c738 <_dtoa_r+0x698>
 800cb26:	9b07      	ldr	r3, [sp, #28]
 800cb28:	9a07      	ldr	r2, [sp, #28]
 800cb2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cb2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d028      	beq.n	800cb86 <_dtoa_r+0xae6>
 800cb34:	4649      	mov	r1, r9
 800cb36:	2300      	movs	r3, #0
 800cb38:	220a      	movs	r2, #10
 800cb3a:	4658      	mov	r0, fp
 800cb3c:	f000 f9d6 	bl	800ceec <__multadd>
 800cb40:	42af      	cmp	r7, r5
 800cb42:	4681      	mov	r9, r0
 800cb44:	f04f 0300 	mov.w	r3, #0
 800cb48:	f04f 020a 	mov.w	r2, #10
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	4658      	mov	r0, fp
 800cb50:	d107      	bne.n	800cb62 <_dtoa_r+0xac2>
 800cb52:	f000 f9cb 	bl	800ceec <__multadd>
 800cb56:	4607      	mov	r7, r0
 800cb58:	4605      	mov	r5, r0
 800cb5a:	9b07      	ldr	r3, [sp, #28]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	9307      	str	r3, [sp, #28]
 800cb60:	e774      	b.n	800ca4c <_dtoa_r+0x9ac>
 800cb62:	f000 f9c3 	bl	800ceec <__multadd>
 800cb66:	4629      	mov	r1, r5
 800cb68:	4607      	mov	r7, r0
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	220a      	movs	r2, #10
 800cb6e:	4658      	mov	r0, fp
 800cb70:	f000 f9bc 	bl	800ceec <__multadd>
 800cb74:	4605      	mov	r5, r0
 800cb76:	e7f0      	b.n	800cb5a <_dtoa_r+0xaba>
 800cb78:	9b00      	ldr	r3, [sp, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	bfcc      	ite	gt
 800cb7e:	461e      	movgt	r6, r3
 800cb80:	2601      	movle	r6, #1
 800cb82:	4456      	add	r6, sl
 800cb84:	2700      	movs	r7, #0
 800cb86:	4649      	mov	r1, r9
 800cb88:	2201      	movs	r2, #1
 800cb8a:	4658      	mov	r0, fp
 800cb8c:	f000 fba4 	bl	800d2d8 <__lshift>
 800cb90:	4621      	mov	r1, r4
 800cb92:	4681      	mov	r9, r0
 800cb94:	f000 fc0c 	bl	800d3b0 <__mcmp>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	dcb0      	bgt.n	800cafe <_dtoa_r+0xa5e>
 800cb9c:	d102      	bne.n	800cba4 <_dtoa_r+0xb04>
 800cb9e:	f018 0f01 	tst.w	r8, #1
 800cba2:	d1ac      	bne.n	800cafe <_dtoa_r+0xa5e>
 800cba4:	4633      	mov	r3, r6
 800cba6:	461e      	mov	r6, r3
 800cba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbac:	2a30      	cmp	r2, #48	@ 0x30
 800cbae:	d0fa      	beq.n	800cba6 <_dtoa_r+0xb06>
 800cbb0:	e5c2      	b.n	800c738 <_dtoa_r+0x698>
 800cbb2:	459a      	cmp	sl, r3
 800cbb4:	d1a4      	bne.n	800cb00 <_dtoa_r+0xa60>
 800cbb6:	9b04      	ldr	r3, [sp, #16]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	9304      	str	r3, [sp, #16]
 800cbbc:	2331      	movs	r3, #49	@ 0x31
 800cbbe:	f88a 3000 	strb.w	r3, [sl]
 800cbc2:	e5b9      	b.n	800c738 <_dtoa_r+0x698>
 800cbc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cc24 <_dtoa_r+0xb84>
 800cbca:	b11b      	cbz	r3, 800cbd4 <_dtoa_r+0xb34>
 800cbcc:	f10a 0308 	add.w	r3, sl, #8
 800cbd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cbd2:	6013      	str	r3, [r2, #0]
 800cbd4:	4650      	mov	r0, sl
 800cbd6:	b019      	add	sp, #100	@ 0x64
 800cbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	f77f ae37 	ble.w	800c852 <_dtoa_r+0x7b2>
 800cbe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbe8:	2001      	movs	r0, #1
 800cbea:	e655      	b.n	800c898 <_dtoa_r+0x7f8>
 800cbec:	9b00      	ldr	r3, [sp, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f77f aed6 	ble.w	800c9a0 <_dtoa_r+0x900>
 800cbf4:	4656      	mov	r6, sl
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	4648      	mov	r0, r9
 800cbfa:	f7ff f9c7 	bl	800bf8c <quorem>
 800cbfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cc02:	f806 8b01 	strb.w	r8, [r6], #1
 800cc06:	9b00      	ldr	r3, [sp, #0]
 800cc08:	eba6 020a 	sub.w	r2, r6, sl
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	ddb3      	ble.n	800cb78 <_dtoa_r+0xad8>
 800cc10:	4649      	mov	r1, r9
 800cc12:	2300      	movs	r3, #0
 800cc14:	220a      	movs	r2, #10
 800cc16:	4658      	mov	r0, fp
 800cc18:	f000 f968 	bl	800ceec <__multadd>
 800cc1c:	4681      	mov	r9, r0
 800cc1e:	e7ea      	b.n	800cbf6 <_dtoa_r+0xb56>
 800cc20:	08011758 	.word	0x08011758
 800cc24:	080116dc 	.word	0x080116dc

0800cc28 <_free_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	2900      	cmp	r1, #0
 800cc2e:	d041      	beq.n	800ccb4 <_free_r+0x8c>
 800cc30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc34:	1f0c      	subs	r4, r1, #4
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	bfb8      	it	lt
 800cc3a:	18e4      	addlt	r4, r4, r3
 800cc3c:	f000 f8e8 	bl	800ce10 <__malloc_lock>
 800cc40:	4a1d      	ldr	r2, [pc, #116]	@ (800ccb8 <_free_r+0x90>)
 800cc42:	6813      	ldr	r3, [r2, #0]
 800cc44:	b933      	cbnz	r3, 800cc54 <_free_r+0x2c>
 800cc46:	6063      	str	r3, [r4, #4]
 800cc48:	6014      	str	r4, [r2, #0]
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc50:	f000 b8e4 	b.w	800ce1c <__malloc_unlock>
 800cc54:	42a3      	cmp	r3, r4
 800cc56:	d908      	bls.n	800cc6a <_free_r+0x42>
 800cc58:	6820      	ldr	r0, [r4, #0]
 800cc5a:	1821      	adds	r1, r4, r0
 800cc5c:	428b      	cmp	r3, r1
 800cc5e:	bf01      	itttt	eq
 800cc60:	6819      	ldreq	r1, [r3, #0]
 800cc62:	685b      	ldreq	r3, [r3, #4]
 800cc64:	1809      	addeq	r1, r1, r0
 800cc66:	6021      	streq	r1, [r4, #0]
 800cc68:	e7ed      	b.n	800cc46 <_free_r+0x1e>
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	b10b      	cbz	r3, 800cc74 <_free_r+0x4c>
 800cc70:	42a3      	cmp	r3, r4
 800cc72:	d9fa      	bls.n	800cc6a <_free_r+0x42>
 800cc74:	6811      	ldr	r1, [r2, #0]
 800cc76:	1850      	adds	r0, r2, r1
 800cc78:	42a0      	cmp	r0, r4
 800cc7a:	d10b      	bne.n	800cc94 <_free_r+0x6c>
 800cc7c:	6820      	ldr	r0, [r4, #0]
 800cc7e:	4401      	add	r1, r0
 800cc80:	1850      	adds	r0, r2, r1
 800cc82:	4283      	cmp	r3, r0
 800cc84:	6011      	str	r1, [r2, #0]
 800cc86:	d1e0      	bne.n	800cc4a <_free_r+0x22>
 800cc88:	6818      	ldr	r0, [r3, #0]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	6053      	str	r3, [r2, #4]
 800cc8e:	4408      	add	r0, r1
 800cc90:	6010      	str	r0, [r2, #0]
 800cc92:	e7da      	b.n	800cc4a <_free_r+0x22>
 800cc94:	d902      	bls.n	800cc9c <_free_r+0x74>
 800cc96:	230c      	movs	r3, #12
 800cc98:	602b      	str	r3, [r5, #0]
 800cc9a:	e7d6      	b.n	800cc4a <_free_r+0x22>
 800cc9c:	6820      	ldr	r0, [r4, #0]
 800cc9e:	1821      	adds	r1, r4, r0
 800cca0:	428b      	cmp	r3, r1
 800cca2:	bf04      	itt	eq
 800cca4:	6819      	ldreq	r1, [r3, #0]
 800cca6:	685b      	ldreq	r3, [r3, #4]
 800cca8:	6063      	str	r3, [r4, #4]
 800ccaa:	bf04      	itt	eq
 800ccac:	1809      	addeq	r1, r1, r0
 800ccae:	6021      	streq	r1, [r4, #0]
 800ccb0:	6054      	str	r4, [r2, #4]
 800ccb2:	e7ca      	b.n	800cc4a <_free_r+0x22>
 800ccb4:	bd38      	pop	{r3, r4, r5, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20000edc 	.word	0x20000edc

0800ccbc <malloc>:
 800ccbc:	4b02      	ldr	r3, [pc, #8]	@ (800ccc8 <malloc+0xc>)
 800ccbe:	4601      	mov	r1, r0
 800ccc0:	6818      	ldr	r0, [r3, #0]
 800ccc2:	f000 b825 	b.w	800cd10 <_malloc_r>
 800ccc6:	bf00      	nop
 800ccc8:	20000038 	.word	0x20000038

0800cccc <sbrk_aligned>:
 800cccc:	b570      	push	{r4, r5, r6, lr}
 800ccce:	4e0f      	ldr	r6, [pc, #60]	@ (800cd0c <sbrk_aligned+0x40>)
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	6831      	ldr	r1, [r6, #0]
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	b911      	cbnz	r1, 800ccde <sbrk_aligned+0x12>
 800ccd8:	f002 fb18 	bl	800f30c <_sbrk_r>
 800ccdc:	6030      	str	r0, [r6, #0]
 800ccde:	4621      	mov	r1, r4
 800cce0:	4628      	mov	r0, r5
 800cce2:	f002 fb13 	bl	800f30c <_sbrk_r>
 800cce6:	1c43      	adds	r3, r0, #1
 800cce8:	d103      	bne.n	800ccf2 <sbrk_aligned+0x26>
 800ccea:	f04f 34ff 	mov.w	r4, #4294967295
 800ccee:	4620      	mov	r0, r4
 800ccf0:	bd70      	pop	{r4, r5, r6, pc}
 800ccf2:	1cc4      	adds	r4, r0, #3
 800ccf4:	f024 0403 	bic.w	r4, r4, #3
 800ccf8:	42a0      	cmp	r0, r4
 800ccfa:	d0f8      	beq.n	800ccee <sbrk_aligned+0x22>
 800ccfc:	1a21      	subs	r1, r4, r0
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f002 fb04 	bl	800f30c <_sbrk_r>
 800cd04:	3001      	adds	r0, #1
 800cd06:	d1f2      	bne.n	800ccee <sbrk_aligned+0x22>
 800cd08:	e7ef      	b.n	800ccea <sbrk_aligned+0x1e>
 800cd0a:	bf00      	nop
 800cd0c:	20000ed8 	.word	0x20000ed8

0800cd10 <_malloc_r>:
 800cd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd14:	1ccd      	adds	r5, r1, #3
 800cd16:	f025 0503 	bic.w	r5, r5, #3
 800cd1a:	3508      	adds	r5, #8
 800cd1c:	2d0c      	cmp	r5, #12
 800cd1e:	bf38      	it	cc
 800cd20:	250c      	movcc	r5, #12
 800cd22:	2d00      	cmp	r5, #0
 800cd24:	4606      	mov	r6, r0
 800cd26:	db01      	blt.n	800cd2c <_malloc_r+0x1c>
 800cd28:	42a9      	cmp	r1, r5
 800cd2a:	d904      	bls.n	800cd36 <_malloc_r+0x26>
 800cd2c:	230c      	movs	r3, #12
 800cd2e:	6033      	str	r3, [r6, #0]
 800cd30:	2000      	movs	r0, #0
 800cd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce0c <_malloc_r+0xfc>
 800cd3a:	f000 f869 	bl	800ce10 <__malloc_lock>
 800cd3e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd42:	461c      	mov	r4, r3
 800cd44:	bb44      	cbnz	r4, 800cd98 <_malloc_r+0x88>
 800cd46:	4629      	mov	r1, r5
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f7ff ffbf 	bl	800cccc <sbrk_aligned>
 800cd4e:	1c43      	adds	r3, r0, #1
 800cd50:	4604      	mov	r4, r0
 800cd52:	d158      	bne.n	800ce06 <_malloc_r+0xf6>
 800cd54:	f8d8 4000 	ldr.w	r4, [r8]
 800cd58:	4627      	mov	r7, r4
 800cd5a:	2f00      	cmp	r7, #0
 800cd5c:	d143      	bne.n	800cde6 <_malloc_r+0xd6>
 800cd5e:	2c00      	cmp	r4, #0
 800cd60:	d04b      	beq.n	800cdfa <_malloc_r+0xea>
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	4639      	mov	r1, r7
 800cd66:	4630      	mov	r0, r6
 800cd68:	eb04 0903 	add.w	r9, r4, r3
 800cd6c:	f002 face 	bl	800f30c <_sbrk_r>
 800cd70:	4581      	cmp	r9, r0
 800cd72:	d142      	bne.n	800cdfa <_malloc_r+0xea>
 800cd74:	6821      	ldr	r1, [r4, #0]
 800cd76:	1a6d      	subs	r5, r5, r1
 800cd78:	4629      	mov	r1, r5
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f7ff ffa6 	bl	800cccc <sbrk_aligned>
 800cd80:	3001      	adds	r0, #1
 800cd82:	d03a      	beq.n	800cdfa <_malloc_r+0xea>
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	442b      	add	r3, r5
 800cd88:	6023      	str	r3, [r4, #0]
 800cd8a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd8e:	685a      	ldr	r2, [r3, #4]
 800cd90:	bb62      	cbnz	r2, 800cdec <_malloc_r+0xdc>
 800cd92:	f8c8 7000 	str.w	r7, [r8]
 800cd96:	e00f      	b.n	800cdb8 <_malloc_r+0xa8>
 800cd98:	6822      	ldr	r2, [r4, #0]
 800cd9a:	1b52      	subs	r2, r2, r5
 800cd9c:	d420      	bmi.n	800cde0 <_malloc_r+0xd0>
 800cd9e:	2a0b      	cmp	r2, #11
 800cda0:	d917      	bls.n	800cdd2 <_malloc_r+0xc2>
 800cda2:	1961      	adds	r1, r4, r5
 800cda4:	42a3      	cmp	r3, r4
 800cda6:	6025      	str	r5, [r4, #0]
 800cda8:	bf18      	it	ne
 800cdaa:	6059      	strne	r1, [r3, #4]
 800cdac:	6863      	ldr	r3, [r4, #4]
 800cdae:	bf08      	it	eq
 800cdb0:	f8c8 1000 	streq.w	r1, [r8]
 800cdb4:	5162      	str	r2, [r4, r5]
 800cdb6:	604b      	str	r3, [r1, #4]
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f000 f82f 	bl	800ce1c <__malloc_unlock>
 800cdbe:	f104 000b 	add.w	r0, r4, #11
 800cdc2:	1d23      	adds	r3, r4, #4
 800cdc4:	f020 0007 	bic.w	r0, r0, #7
 800cdc8:	1ac2      	subs	r2, r0, r3
 800cdca:	bf1c      	itt	ne
 800cdcc:	1a1b      	subne	r3, r3, r0
 800cdce:	50a3      	strne	r3, [r4, r2]
 800cdd0:	e7af      	b.n	800cd32 <_malloc_r+0x22>
 800cdd2:	6862      	ldr	r2, [r4, #4]
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	bf0c      	ite	eq
 800cdd8:	f8c8 2000 	streq.w	r2, [r8]
 800cddc:	605a      	strne	r2, [r3, #4]
 800cdde:	e7eb      	b.n	800cdb8 <_malloc_r+0xa8>
 800cde0:	4623      	mov	r3, r4
 800cde2:	6864      	ldr	r4, [r4, #4]
 800cde4:	e7ae      	b.n	800cd44 <_malloc_r+0x34>
 800cde6:	463c      	mov	r4, r7
 800cde8:	687f      	ldr	r7, [r7, #4]
 800cdea:	e7b6      	b.n	800cd5a <_malloc_r+0x4a>
 800cdec:	461a      	mov	r2, r3
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	42a3      	cmp	r3, r4
 800cdf2:	d1fb      	bne.n	800cdec <_malloc_r+0xdc>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	6053      	str	r3, [r2, #4]
 800cdf8:	e7de      	b.n	800cdb8 <_malloc_r+0xa8>
 800cdfa:	230c      	movs	r3, #12
 800cdfc:	6033      	str	r3, [r6, #0]
 800cdfe:	4630      	mov	r0, r6
 800ce00:	f000 f80c 	bl	800ce1c <__malloc_unlock>
 800ce04:	e794      	b.n	800cd30 <_malloc_r+0x20>
 800ce06:	6005      	str	r5, [r0, #0]
 800ce08:	e7d6      	b.n	800cdb8 <_malloc_r+0xa8>
 800ce0a:	bf00      	nop
 800ce0c:	20000edc 	.word	0x20000edc

0800ce10 <__malloc_lock>:
 800ce10:	4801      	ldr	r0, [pc, #4]	@ (800ce18 <__malloc_lock+0x8>)
 800ce12:	f7ff b8b2 	b.w	800bf7a <__retarget_lock_acquire_recursive>
 800ce16:	bf00      	nop
 800ce18:	20000ed4 	.word	0x20000ed4

0800ce1c <__malloc_unlock>:
 800ce1c:	4801      	ldr	r0, [pc, #4]	@ (800ce24 <__malloc_unlock+0x8>)
 800ce1e:	f7ff b8ad 	b.w	800bf7c <__retarget_lock_release_recursive>
 800ce22:	bf00      	nop
 800ce24:	20000ed4 	.word	0x20000ed4

0800ce28 <_Balloc>:
 800ce28:	b570      	push	{r4, r5, r6, lr}
 800ce2a:	69c6      	ldr	r6, [r0, #28]
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	460d      	mov	r5, r1
 800ce30:	b976      	cbnz	r6, 800ce50 <_Balloc+0x28>
 800ce32:	2010      	movs	r0, #16
 800ce34:	f7ff ff42 	bl	800ccbc <malloc>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	61e0      	str	r0, [r4, #28]
 800ce3c:	b920      	cbnz	r0, 800ce48 <_Balloc+0x20>
 800ce3e:	4b18      	ldr	r3, [pc, #96]	@ (800cea0 <_Balloc+0x78>)
 800ce40:	4818      	ldr	r0, [pc, #96]	@ (800cea4 <_Balloc+0x7c>)
 800ce42:	216b      	movs	r1, #107	@ 0x6b
 800ce44:	f002 fa88 	bl	800f358 <__assert_func>
 800ce48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce4c:	6006      	str	r6, [r0, #0]
 800ce4e:	60c6      	str	r6, [r0, #12]
 800ce50:	69e6      	ldr	r6, [r4, #28]
 800ce52:	68f3      	ldr	r3, [r6, #12]
 800ce54:	b183      	cbz	r3, 800ce78 <_Balloc+0x50>
 800ce56:	69e3      	ldr	r3, [r4, #28]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce5e:	b9b8      	cbnz	r0, 800ce90 <_Balloc+0x68>
 800ce60:	2101      	movs	r1, #1
 800ce62:	fa01 f605 	lsl.w	r6, r1, r5
 800ce66:	1d72      	adds	r2, r6, #5
 800ce68:	0092      	lsls	r2, r2, #2
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f002 fa92 	bl	800f394 <_calloc_r>
 800ce70:	b160      	cbz	r0, 800ce8c <_Balloc+0x64>
 800ce72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce76:	e00e      	b.n	800ce96 <_Balloc+0x6e>
 800ce78:	2221      	movs	r2, #33	@ 0x21
 800ce7a:	2104      	movs	r1, #4
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f002 fa89 	bl	800f394 <_calloc_r>
 800ce82:	69e3      	ldr	r3, [r4, #28]
 800ce84:	60f0      	str	r0, [r6, #12]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1e4      	bne.n	800ce56 <_Balloc+0x2e>
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}
 800ce90:	6802      	ldr	r2, [r0, #0]
 800ce92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce96:	2300      	movs	r3, #0
 800ce98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce9c:	e7f7      	b.n	800ce8e <_Balloc+0x66>
 800ce9e:	bf00      	nop
 800cea0:	080116e9 	.word	0x080116e9
 800cea4:	08011769 	.word	0x08011769

0800cea8 <_Bfree>:
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	69c6      	ldr	r6, [r0, #28]
 800ceac:	4605      	mov	r5, r0
 800ceae:	460c      	mov	r4, r1
 800ceb0:	b976      	cbnz	r6, 800ced0 <_Bfree+0x28>
 800ceb2:	2010      	movs	r0, #16
 800ceb4:	f7ff ff02 	bl	800ccbc <malloc>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	61e8      	str	r0, [r5, #28]
 800cebc:	b920      	cbnz	r0, 800cec8 <_Bfree+0x20>
 800cebe:	4b09      	ldr	r3, [pc, #36]	@ (800cee4 <_Bfree+0x3c>)
 800cec0:	4809      	ldr	r0, [pc, #36]	@ (800cee8 <_Bfree+0x40>)
 800cec2:	218f      	movs	r1, #143	@ 0x8f
 800cec4:	f002 fa48 	bl	800f358 <__assert_func>
 800cec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cecc:	6006      	str	r6, [r0, #0]
 800cece:	60c6      	str	r6, [r0, #12]
 800ced0:	b13c      	cbz	r4, 800cee2 <_Bfree+0x3a>
 800ced2:	69eb      	ldr	r3, [r5, #28]
 800ced4:	6862      	ldr	r2, [r4, #4]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cedc:	6021      	str	r1, [r4, #0]
 800cede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cee2:	bd70      	pop	{r4, r5, r6, pc}
 800cee4:	080116e9 	.word	0x080116e9
 800cee8:	08011769 	.word	0x08011769

0800ceec <__multadd>:
 800ceec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef0:	690d      	ldr	r5, [r1, #16]
 800cef2:	4607      	mov	r7, r0
 800cef4:	460c      	mov	r4, r1
 800cef6:	461e      	mov	r6, r3
 800cef8:	f101 0c14 	add.w	ip, r1, #20
 800cefc:	2000      	movs	r0, #0
 800cefe:	f8dc 3000 	ldr.w	r3, [ip]
 800cf02:	b299      	uxth	r1, r3
 800cf04:	fb02 6101 	mla	r1, r2, r1, r6
 800cf08:	0c1e      	lsrs	r6, r3, #16
 800cf0a:	0c0b      	lsrs	r3, r1, #16
 800cf0c:	fb02 3306 	mla	r3, r2, r6, r3
 800cf10:	b289      	uxth	r1, r1
 800cf12:	3001      	adds	r0, #1
 800cf14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf18:	4285      	cmp	r5, r0
 800cf1a:	f84c 1b04 	str.w	r1, [ip], #4
 800cf1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf22:	dcec      	bgt.n	800cefe <__multadd+0x12>
 800cf24:	b30e      	cbz	r6, 800cf6a <__multadd+0x7e>
 800cf26:	68a3      	ldr	r3, [r4, #8]
 800cf28:	42ab      	cmp	r3, r5
 800cf2a:	dc19      	bgt.n	800cf60 <__multadd+0x74>
 800cf2c:	6861      	ldr	r1, [r4, #4]
 800cf2e:	4638      	mov	r0, r7
 800cf30:	3101      	adds	r1, #1
 800cf32:	f7ff ff79 	bl	800ce28 <_Balloc>
 800cf36:	4680      	mov	r8, r0
 800cf38:	b928      	cbnz	r0, 800cf46 <__multadd+0x5a>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	4b0c      	ldr	r3, [pc, #48]	@ (800cf70 <__multadd+0x84>)
 800cf3e:	480d      	ldr	r0, [pc, #52]	@ (800cf74 <__multadd+0x88>)
 800cf40:	21ba      	movs	r1, #186	@ 0xba
 800cf42:	f002 fa09 	bl	800f358 <__assert_func>
 800cf46:	6922      	ldr	r2, [r4, #16]
 800cf48:	3202      	adds	r2, #2
 800cf4a:	f104 010c 	add.w	r1, r4, #12
 800cf4e:	0092      	lsls	r2, r2, #2
 800cf50:	300c      	adds	r0, #12
 800cf52:	f002 f9eb 	bl	800f32c <memcpy>
 800cf56:	4621      	mov	r1, r4
 800cf58:	4638      	mov	r0, r7
 800cf5a:	f7ff ffa5 	bl	800cea8 <_Bfree>
 800cf5e:	4644      	mov	r4, r8
 800cf60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf64:	3501      	adds	r5, #1
 800cf66:	615e      	str	r6, [r3, #20]
 800cf68:	6125      	str	r5, [r4, #16]
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf70:	08011758 	.word	0x08011758
 800cf74:	08011769 	.word	0x08011769

0800cf78 <__s2b>:
 800cf78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	4615      	mov	r5, r2
 800cf80:	461f      	mov	r7, r3
 800cf82:	2209      	movs	r2, #9
 800cf84:	3308      	adds	r3, #8
 800cf86:	4606      	mov	r6, r0
 800cf88:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf8c:	2100      	movs	r1, #0
 800cf8e:	2201      	movs	r2, #1
 800cf90:	429a      	cmp	r2, r3
 800cf92:	db09      	blt.n	800cfa8 <__s2b+0x30>
 800cf94:	4630      	mov	r0, r6
 800cf96:	f7ff ff47 	bl	800ce28 <_Balloc>
 800cf9a:	b940      	cbnz	r0, 800cfae <__s2b+0x36>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	4b19      	ldr	r3, [pc, #100]	@ (800d004 <__s2b+0x8c>)
 800cfa0:	4819      	ldr	r0, [pc, #100]	@ (800d008 <__s2b+0x90>)
 800cfa2:	21d3      	movs	r1, #211	@ 0xd3
 800cfa4:	f002 f9d8 	bl	800f358 <__assert_func>
 800cfa8:	0052      	lsls	r2, r2, #1
 800cfaa:	3101      	adds	r1, #1
 800cfac:	e7f0      	b.n	800cf90 <__s2b+0x18>
 800cfae:	9b08      	ldr	r3, [sp, #32]
 800cfb0:	6143      	str	r3, [r0, #20]
 800cfb2:	2d09      	cmp	r5, #9
 800cfb4:	f04f 0301 	mov.w	r3, #1
 800cfb8:	6103      	str	r3, [r0, #16]
 800cfba:	dd16      	ble.n	800cfea <__s2b+0x72>
 800cfbc:	f104 0909 	add.w	r9, r4, #9
 800cfc0:	46c8      	mov	r8, r9
 800cfc2:	442c      	add	r4, r5
 800cfc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cfc8:	4601      	mov	r1, r0
 800cfca:	3b30      	subs	r3, #48	@ 0x30
 800cfcc:	220a      	movs	r2, #10
 800cfce:	4630      	mov	r0, r6
 800cfd0:	f7ff ff8c 	bl	800ceec <__multadd>
 800cfd4:	45a0      	cmp	r8, r4
 800cfd6:	d1f5      	bne.n	800cfc4 <__s2b+0x4c>
 800cfd8:	f1a5 0408 	sub.w	r4, r5, #8
 800cfdc:	444c      	add	r4, r9
 800cfde:	1b2d      	subs	r5, r5, r4
 800cfe0:	1963      	adds	r3, r4, r5
 800cfe2:	42bb      	cmp	r3, r7
 800cfe4:	db04      	blt.n	800cff0 <__s2b+0x78>
 800cfe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfea:	340a      	adds	r4, #10
 800cfec:	2509      	movs	r5, #9
 800cfee:	e7f6      	b.n	800cfde <__s2b+0x66>
 800cff0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cff4:	4601      	mov	r1, r0
 800cff6:	3b30      	subs	r3, #48	@ 0x30
 800cff8:	220a      	movs	r2, #10
 800cffa:	4630      	mov	r0, r6
 800cffc:	f7ff ff76 	bl	800ceec <__multadd>
 800d000:	e7ee      	b.n	800cfe0 <__s2b+0x68>
 800d002:	bf00      	nop
 800d004:	08011758 	.word	0x08011758
 800d008:	08011769 	.word	0x08011769

0800d00c <__hi0bits>:
 800d00c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d010:	4603      	mov	r3, r0
 800d012:	bf36      	itet	cc
 800d014:	0403      	lslcc	r3, r0, #16
 800d016:	2000      	movcs	r0, #0
 800d018:	2010      	movcc	r0, #16
 800d01a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d01e:	bf3c      	itt	cc
 800d020:	021b      	lslcc	r3, r3, #8
 800d022:	3008      	addcc	r0, #8
 800d024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d028:	bf3c      	itt	cc
 800d02a:	011b      	lslcc	r3, r3, #4
 800d02c:	3004      	addcc	r0, #4
 800d02e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d032:	bf3c      	itt	cc
 800d034:	009b      	lslcc	r3, r3, #2
 800d036:	3002      	addcc	r0, #2
 800d038:	2b00      	cmp	r3, #0
 800d03a:	db05      	blt.n	800d048 <__hi0bits+0x3c>
 800d03c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d040:	f100 0001 	add.w	r0, r0, #1
 800d044:	bf08      	it	eq
 800d046:	2020      	moveq	r0, #32
 800d048:	4770      	bx	lr

0800d04a <__lo0bits>:
 800d04a:	6803      	ldr	r3, [r0, #0]
 800d04c:	4602      	mov	r2, r0
 800d04e:	f013 0007 	ands.w	r0, r3, #7
 800d052:	d00b      	beq.n	800d06c <__lo0bits+0x22>
 800d054:	07d9      	lsls	r1, r3, #31
 800d056:	d421      	bmi.n	800d09c <__lo0bits+0x52>
 800d058:	0798      	lsls	r0, r3, #30
 800d05a:	bf49      	itett	mi
 800d05c:	085b      	lsrmi	r3, r3, #1
 800d05e:	089b      	lsrpl	r3, r3, #2
 800d060:	2001      	movmi	r0, #1
 800d062:	6013      	strmi	r3, [r2, #0]
 800d064:	bf5c      	itt	pl
 800d066:	6013      	strpl	r3, [r2, #0]
 800d068:	2002      	movpl	r0, #2
 800d06a:	4770      	bx	lr
 800d06c:	b299      	uxth	r1, r3
 800d06e:	b909      	cbnz	r1, 800d074 <__lo0bits+0x2a>
 800d070:	0c1b      	lsrs	r3, r3, #16
 800d072:	2010      	movs	r0, #16
 800d074:	b2d9      	uxtb	r1, r3
 800d076:	b909      	cbnz	r1, 800d07c <__lo0bits+0x32>
 800d078:	3008      	adds	r0, #8
 800d07a:	0a1b      	lsrs	r3, r3, #8
 800d07c:	0719      	lsls	r1, r3, #28
 800d07e:	bf04      	itt	eq
 800d080:	091b      	lsreq	r3, r3, #4
 800d082:	3004      	addeq	r0, #4
 800d084:	0799      	lsls	r1, r3, #30
 800d086:	bf04      	itt	eq
 800d088:	089b      	lsreq	r3, r3, #2
 800d08a:	3002      	addeq	r0, #2
 800d08c:	07d9      	lsls	r1, r3, #31
 800d08e:	d403      	bmi.n	800d098 <__lo0bits+0x4e>
 800d090:	085b      	lsrs	r3, r3, #1
 800d092:	f100 0001 	add.w	r0, r0, #1
 800d096:	d003      	beq.n	800d0a0 <__lo0bits+0x56>
 800d098:	6013      	str	r3, [r2, #0]
 800d09a:	4770      	bx	lr
 800d09c:	2000      	movs	r0, #0
 800d09e:	4770      	bx	lr
 800d0a0:	2020      	movs	r0, #32
 800d0a2:	4770      	bx	lr

0800d0a4 <__i2b>:
 800d0a4:	b510      	push	{r4, lr}
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	2101      	movs	r1, #1
 800d0aa:	f7ff febd 	bl	800ce28 <_Balloc>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	b928      	cbnz	r0, 800d0be <__i2b+0x1a>
 800d0b2:	4b05      	ldr	r3, [pc, #20]	@ (800d0c8 <__i2b+0x24>)
 800d0b4:	4805      	ldr	r0, [pc, #20]	@ (800d0cc <__i2b+0x28>)
 800d0b6:	f240 1145 	movw	r1, #325	@ 0x145
 800d0ba:	f002 f94d 	bl	800f358 <__assert_func>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	6144      	str	r4, [r0, #20]
 800d0c2:	6103      	str	r3, [r0, #16]
 800d0c4:	bd10      	pop	{r4, pc}
 800d0c6:	bf00      	nop
 800d0c8:	08011758 	.word	0x08011758
 800d0cc:	08011769 	.word	0x08011769

0800d0d0 <__multiply>:
 800d0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d4:	4614      	mov	r4, r2
 800d0d6:	690a      	ldr	r2, [r1, #16]
 800d0d8:	6923      	ldr	r3, [r4, #16]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	bfa8      	it	ge
 800d0de:	4623      	movge	r3, r4
 800d0e0:	460f      	mov	r7, r1
 800d0e2:	bfa4      	itt	ge
 800d0e4:	460c      	movge	r4, r1
 800d0e6:	461f      	movge	r7, r3
 800d0e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d0ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d0f0:	68a3      	ldr	r3, [r4, #8]
 800d0f2:	6861      	ldr	r1, [r4, #4]
 800d0f4:	eb0a 0609 	add.w	r6, sl, r9
 800d0f8:	42b3      	cmp	r3, r6
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	bfb8      	it	lt
 800d0fe:	3101      	addlt	r1, #1
 800d100:	f7ff fe92 	bl	800ce28 <_Balloc>
 800d104:	b930      	cbnz	r0, 800d114 <__multiply+0x44>
 800d106:	4602      	mov	r2, r0
 800d108:	4b44      	ldr	r3, [pc, #272]	@ (800d21c <__multiply+0x14c>)
 800d10a:	4845      	ldr	r0, [pc, #276]	@ (800d220 <__multiply+0x150>)
 800d10c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d110:	f002 f922 	bl	800f358 <__assert_func>
 800d114:	f100 0514 	add.w	r5, r0, #20
 800d118:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d11c:	462b      	mov	r3, r5
 800d11e:	2200      	movs	r2, #0
 800d120:	4543      	cmp	r3, r8
 800d122:	d321      	bcc.n	800d168 <__multiply+0x98>
 800d124:	f107 0114 	add.w	r1, r7, #20
 800d128:	f104 0214 	add.w	r2, r4, #20
 800d12c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d130:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d134:	9302      	str	r3, [sp, #8]
 800d136:	1b13      	subs	r3, r2, r4
 800d138:	3b15      	subs	r3, #21
 800d13a:	f023 0303 	bic.w	r3, r3, #3
 800d13e:	3304      	adds	r3, #4
 800d140:	f104 0715 	add.w	r7, r4, #21
 800d144:	42ba      	cmp	r2, r7
 800d146:	bf38      	it	cc
 800d148:	2304      	movcc	r3, #4
 800d14a:	9301      	str	r3, [sp, #4]
 800d14c:	9b02      	ldr	r3, [sp, #8]
 800d14e:	9103      	str	r1, [sp, #12]
 800d150:	428b      	cmp	r3, r1
 800d152:	d80c      	bhi.n	800d16e <__multiply+0x9e>
 800d154:	2e00      	cmp	r6, #0
 800d156:	dd03      	ble.n	800d160 <__multiply+0x90>
 800d158:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d05b      	beq.n	800d218 <__multiply+0x148>
 800d160:	6106      	str	r6, [r0, #16]
 800d162:	b005      	add	sp, #20
 800d164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d168:	f843 2b04 	str.w	r2, [r3], #4
 800d16c:	e7d8      	b.n	800d120 <__multiply+0x50>
 800d16e:	f8b1 a000 	ldrh.w	sl, [r1]
 800d172:	f1ba 0f00 	cmp.w	sl, #0
 800d176:	d024      	beq.n	800d1c2 <__multiply+0xf2>
 800d178:	f104 0e14 	add.w	lr, r4, #20
 800d17c:	46a9      	mov	r9, r5
 800d17e:	f04f 0c00 	mov.w	ip, #0
 800d182:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d186:	f8d9 3000 	ldr.w	r3, [r9]
 800d18a:	fa1f fb87 	uxth.w	fp, r7
 800d18e:	b29b      	uxth	r3, r3
 800d190:	fb0a 330b 	mla	r3, sl, fp, r3
 800d194:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d198:	f8d9 7000 	ldr.w	r7, [r9]
 800d19c:	4463      	add	r3, ip
 800d19e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d1a2:	fb0a c70b 	mla	r7, sl, fp, ip
 800d1a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d1b0:	4572      	cmp	r2, lr
 800d1b2:	f849 3b04 	str.w	r3, [r9], #4
 800d1b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d1ba:	d8e2      	bhi.n	800d182 <__multiply+0xb2>
 800d1bc:	9b01      	ldr	r3, [sp, #4]
 800d1be:	f845 c003 	str.w	ip, [r5, r3]
 800d1c2:	9b03      	ldr	r3, [sp, #12]
 800d1c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d1c8:	3104      	adds	r1, #4
 800d1ca:	f1b9 0f00 	cmp.w	r9, #0
 800d1ce:	d021      	beq.n	800d214 <__multiply+0x144>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	f104 0c14 	add.w	ip, r4, #20
 800d1d6:	46ae      	mov	lr, r5
 800d1d8:	f04f 0a00 	mov.w	sl, #0
 800d1dc:	f8bc b000 	ldrh.w	fp, [ip]
 800d1e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d1e4:	fb09 770b 	mla	r7, r9, fp, r7
 800d1e8:	4457      	add	r7, sl
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d1f0:	f84e 3b04 	str.w	r3, [lr], #4
 800d1f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d1f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1fc:	f8be 3000 	ldrh.w	r3, [lr]
 800d200:	fb09 330a 	mla	r3, r9, sl, r3
 800d204:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d208:	4562      	cmp	r2, ip
 800d20a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d20e:	d8e5      	bhi.n	800d1dc <__multiply+0x10c>
 800d210:	9f01      	ldr	r7, [sp, #4]
 800d212:	51eb      	str	r3, [r5, r7]
 800d214:	3504      	adds	r5, #4
 800d216:	e799      	b.n	800d14c <__multiply+0x7c>
 800d218:	3e01      	subs	r6, #1
 800d21a:	e79b      	b.n	800d154 <__multiply+0x84>
 800d21c:	08011758 	.word	0x08011758
 800d220:	08011769 	.word	0x08011769

0800d224 <__pow5mult>:
 800d224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d228:	4615      	mov	r5, r2
 800d22a:	f012 0203 	ands.w	r2, r2, #3
 800d22e:	4607      	mov	r7, r0
 800d230:	460e      	mov	r6, r1
 800d232:	d007      	beq.n	800d244 <__pow5mult+0x20>
 800d234:	4c25      	ldr	r4, [pc, #148]	@ (800d2cc <__pow5mult+0xa8>)
 800d236:	3a01      	subs	r2, #1
 800d238:	2300      	movs	r3, #0
 800d23a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d23e:	f7ff fe55 	bl	800ceec <__multadd>
 800d242:	4606      	mov	r6, r0
 800d244:	10ad      	asrs	r5, r5, #2
 800d246:	d03d      	beq.n	800d2c4 <__pow5mult+0xa0>
 800d248:	69fc      	ldr	r4, [r7, #28]
 800d24a:	b97c      	cbnz	r4, 800d26c <__pow5mult+0x48>
 800d24c:	2010      	movs	r0, #16
 800d24e:	f7ff fd35 	bl	800ccbc <malloc>
 800d252:	4602      	mov	r2, r0
 800d254:	61f8      	str	r0, [r7, #28]
 800d256:	b928      	cbnz	r0, 800d264 <__pow5mult+0x40>
 800d258:	4b1d      	ldr	r3, [pc, #116]	@ (800d2d0 <__pow5mult+0xac>)
 800d25a:	481e      	ldr	r0, [pc, #120]	@ (800d2d4 <__pow5mult+0xb0>)
 800d25c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d260:	f002 f87a 	bl	800f358 <__assert_func>
 800d264:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d268:	6004      	str	r4, [r0, #0]
 800d26a:	60c4      	str	r4, [r0, #12]
 800d26c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d270:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d274:	b94c      	cbnz	r4, 800d28a <__pow5mult+0x66>
 800d276:	f240 2171 	movw	r1, #625	@ 0x271
 800d27a:	4638      	mov	r0, r7
 800d27c:	f7ff ff12 	bl	800d0a4 <__i2b>
 800d280:	2300      	movs	r3, #0
 800d282:	f8c8 0008 	str.w	r0, [r8, #8]
 800d286:	4604      	mov	r4, r0
 800d288:	6003      	str	r3, [r0, #0]
 800d28a:	f04f 0900 	mov.w	r9, #0
 800d28e:	07eb      	lsls	r3, r5, #31
 800d290:	d50a      	bpl.n	800d2a8 <__pow5mult+0x84>
 800d292:	4631      	mov	r1, r6
 800d294:	4622      	mov	r2, r4
 800d296:	4638      	mov	r0, r7
 800d298:	f7ff ff1a 	bl	800d0d0 <__multiply>
 800d29c:	4631      	mov	r1, r6
 800d29e:	4680      	mov	r8, r0
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	f7ff fe01 	bl	800cea8 <_Bfree>
 800d2a6:	4646      	mov	r6, r8
 800d2a8:	106d      	asrs	r5, r5, #1
 800d2aa:	d00b      	beq.n	800d2c4 <__pow5mult+0xa0>
 800d2ac:	6820      	ldr	r0, [r4, #0]
 800d2ae:	b938      	cbnz	r0, 800d2c0 <__pow5mult+0x9c>
 800d2b0:	4622      	mov	r2, r4
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	4638      	mov	r0, r7
 800d2b6:	f7ff ff0b 	bl	800d0d0 <__multiply>
 800d2ba:	6020      	str	r0, [r4, #0]
 800d2bc:	f8c0 9000 	str.w	r9, [r0]
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	e7e4      	b.n	800d28e <__pow5mult+0x6a>
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2ca:	bf00      	nop
 800d2cc:	080117c4 	.word	0x080117c4
 800d2d0:	080116e9 	.word	0x080116e9
 800d2d4:	08011769 	.word	0x08011769

0800d2d8 <__lshift>:
 800d2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2dc:	460c      	mov	r4, r1
 800d2de:	6849      	ldr	r1, [r1, #4]
 800d2e0:	6923      	ldr	r3, [r4, #16]
 800d2e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2e6:	68a3      	ldr	r3, [r4, #8]
 800d2e8:	4607      	mov	r7, r0
 800d2ea:	4691      	mov	r9, r2
 800d2ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2f0:	f108 0601 	add.w	r6, r8, #1
 800d2f4:	42b3      	cmp	r3, r6
 800d2f6:	db0b      	blt.n	800d310 <__lshift+0x38>
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	f7ff fd95 	bl	800ce28 <_Balloc>
 800d2fe:	4605      	mov	r5, r0
 800d300:	b948      	cbnz	r0, 800d316 <__lshift+0x3e>
 800d302:	4602      	mov	r2, r0
 800d304:	4b28      	ldr	r3, [pc, #160]	@ (800d3a8 <__lshift+0xd0>)
 800d306:	4829      	ldr	r0, [pc, #164]	@ (800d3ac <__lshift+0xd4>)
 800d308:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d30c:	f002 f824 	bl	800f358 <__assert_func>
 800d310:	3101      	adds	r1, #1
 800d312:	005b      	lsls	r3, r3, #1
 800d314:	e7ee      	b.n	800d2f4 <__lshift+0x1c>
 800d316:	2300      	movs	r3, #0
 800d318:	f100 0114 	add.w	r1, r0, #20
 800d31c:	f100 0210 	add.w	r2, r0, #16
 800d320:	4618      	mov	r0, r3
 800d322:	4553      	cmp	r3, sl
 800d324:	db33      	blt.n	800d38e <__lshift+0xb6>
 800d326:	6920      	ldr	r0, [r4, #16]
 800d328:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d32c:	f104 0314 	add.w	r3, r4, #20
 800d330:	f019 091f 	ands.w	r9, r9, #31
 800d334:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d338:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d33c:	d02b      	beq.n	800d396 <__lshift+0xbe>
 800d33e:	f1c9 0e20 	rsb	lr, r9, #32
 800d342:	468a      	mov	sl, r1
 800d344:	2200      	movs	r2, #0
 800d346:	6818      	ldr	r0, [r3, #0]
 800d348:	fa00 f009 	lsl.w	r0, r0, r9
 800d34c:	4310      	orrs	r0, r2
 800d34e:	f84a 0b04 	str.w	r0, [sl], #4
 800d352:	f853 2b04 	ldr.w	r2, [r3], #4
 800d356:	459c      	cmp	ip, r3
 800d358:	fa22 f20e 	lsr.w	r2, r2, lr
 800d35c:	d8f3      	bhi.n	800d346 <__lshift+0x6e>
 800d35e:	ebac 0304 	sub.w	r3, ip, r4
 800d362:	3b15      	subs	r3, #21
 800d364:	f023 0303 	bic.w	r3, r3, #3
 800d368:	3304      	adds	r3, #4
 800d36a:	f104 0015 	add.w	r0, r4, #21
 800d36e:	4584      	cmp	ip, r0
 800d370:	bf38      	it	cc
 800d372:	2304      	movcc	r3, #4
 800d374:	50ca      	str	r2, [r1, r3]
 800d376:	b10a      	cbz	r2, 800d37c <__lshift+0xa4>
 800d378:	f108 0602 	add.w	r6, r8, #2
 800d37c:	3e01      	subs	r6, #1
 800d37e:	4638      	mov	r0, r7
 800d380:	612e      	str	r6, [r5, #16]
 800d382:	4621      	mov	r1, r4
 800d384:	f7ff fd90 	bl	800cea8 <_Bfree>
 800d388:	4628      	mov	r0, r5
 800d38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d38e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d392:	3301      	adds	r3, #1
 800d394:	e7c5      	b.n	800d322 <__lshift+0x4a>
 800d396:	3904      	subs	r1, #4
 800d398:	f853 2b04 	ldr.w	r2, [r3], #4
 800d39c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3a0:	459c      	cmp	ip, r3
 800d3a2:	d8f9      	bhi.n	800d398 <__lshift+0xc0>
 800d3a4:	e7ea      	b.n	800d37c <__lshift+0xa4>
 800d3a6:	bf00      	nop
 800d3a8:	08011758 	.word	0x08011758
 800d3ac:	08011769 	.word	0x08011769

0800d3b0 <__mcmp>:
 800d3b0:	690a      	ldr	r2, [r1, #16]
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	6900      	ldr	r0, [r0, #16]
 800d3b6:	1a80      	subs	r0, r0, r2
 800d3b8:	b530      	push	{r4, r5, lr}
 800d3ba:	d10e      	bne.n	800d3da <__mcmp+0x2a>
 800d3bc:	3314      	adds	r3, #20
 800d3be:	3114      	adds	r1, #20
 800d3c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3d0:	4295      	cmp	r5, r2
 800d3d2:	d003      	beq.n	800d3dc <__mcmp+0x2c>
 800d3d4:	d205      	bcs.n	800d3e2 <__mcmp+0x32>
 800d3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3da:	bd30      	pop	{r4, r5, pc}
 800d3dc:	42a3      	cmp	r3, r4
 800d3de:	d3f3      	bcc.n	800d3c8 <__mcmp+0x18>
 800d3e0:	e7fb      	b.n	800d3da <__mcmp+0x2a>
 800d3e2:	2001      	movs	r0, #1
 800d3e4:	e7f9      	b.n	800d3da <__mcmp+0x2a>
	...

0800d3e8 <__mdiff>:
 800d3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ec:	4689      	mov	r9, r1
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	4648      	mov	r0, r9
 800d3f4:	4614      	mov	r4, r2
 800d3f6:	f7ff ffdb 	bl	800d3b0 <__mcmp>
 800d3fa:	1e05      	subs	r5, r0, #0
 800d3fc:	d112      	bne.n	800d424 <__mdiff+0x3c>
 800d3fe:	4629      	mov	r1, r5
 800d400:	4630      	mov	r0, r6
 800d402:	f7ff fd11 	bl	800ce28 <_Balloc>
 800d406:	4602      	mov	r2, r0
 800d408:	b928      	cbnz	r0, 800d416 <__mdiff+0x2e>
 800d40a:	4b3f      	ldr	r3, [pc, #252]	@ (800d508 <__mdiff+0x120>)
 800d40c:	f240 2137 	movw	r1, #567	@ 0x237
 800d410:	483e      	ldr	r0, [pc, #248]	@ (800d50c <__mdiff+0x124>)
 800d412:	f001 ffa1 	bl	800f358 <__assert_func>
 800d416:	2301      	movs	r3, #1
 800d418:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d41c:	4610      	mov	r0, r2
 800d41e:	b003      	add	sp, #12
 800d420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d424:	bfbc      	itt	lt
 800d426:	464b      	movlt	r3, r9
 800d428:	46a1      	movlt	r9, r4
 800d42a:	4630      	mov	r0, r6
 800d42c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d430:	bfba      	itte	lt
 800d432:	461c      	movlt	r4, r3
 800d434:	2501      	movlt	r5, #1
 800d436:	2500      	movge	r5, #0
 800d438:	f7ff fcf6 	bl	800ce28 <_Balloc>
 800d43c:	4602      	mov	r2, r0
 800d43e:	b918      	cbnz	r0, 800d448 <__mdiff+0x60>
 800d440:	4b31      	ldr	r3, [pc, #196]	@ (800d508 <__mdiff+0x120>)
 800d442:	f240 2145 	movw	r1, #581	@ 0x245
 800d446:	e7e3      	b.n	800d410 <__mdiff+0x28>
 800d448:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d44c:	6926      	ldr	r6, [r4, #16]
 800d44e:	60c5      	str	r5, [r0, #12]
 800d450:	f109 0310 	add.w	r3, r9, #16
 800d454:	f109 0514 	add.w	r5, r9, #20
 800d458:	f104 0e14 	add.w	lr, r4, #20
 800d45c:	f100 0b14 	add.w	fp, r0, #20
 800d460:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d464:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d468:	9301      	str	r3, [sp, #4]
 800d46a:	46d9      	mov	r9, fp
 800d46c:	f04f 0c00 	mov.w	ip, #0
 800d470:	9b01      	ldr	r3, [sp, #4]
 800d472:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d476:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	fa1f f38a 	uxth.w	r3, sl
 800d480:	4619      	mov	r1, r3
 800d482:	b283      	uxth	r3, r0
 800d484:	1acb      	subs	r3, r1, r3
 800d486:	0c00      	lsrs	r0, r0, #16
 800d488:	4463      	add	r3, ip
 800d48a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d48e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d492:	b29b      	uxth	r3, r3
 800d494:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d498:	4576      	cmp	r6, lr
 800d49a:	f849 3b04 	str.w	r3, [r9], #4
 800d49e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4a2:	d8e5      	bhi.n	800d470 <__mdiff+0x88>
 800d4a4:	1b33      	subs	r3, r6, r4
 800d4a6:	3b15      	subs	r3, #21
 800d4a8:	f023 0303 	bic.w	r3, r3, #3
 800d4ac:	3415      	adds	r4, #21
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	42a6      	cmp	r6, r4
 800d4b2:	bf38      	it	cc
 800d4b4:	2304      	movcc	r3, #4
 800d4b6:	441d      	add	r5, r3
 800d4b8:	445b      	add	r3, fp
 800d4ba:	461e      	mov	r6, r3
 800d4bc:	462c      	mov	r4, r5
 800d4be:	4544      	cmp	r4, r8
 800d4c0:	d30e      	bcc.n	800d4e0 <__mdiff+0xf8>
 800d4c2:	f108 0103 	add.w	r1, r8, #3
 800d4c6:	1b49      	subs	r1, r1, r5
 800d4c8:	f021 0103 	bic.w	r1, r1, #3
 800d4cc:	3d03      	subs	r5, #3
 800d4ce:	45a8      	cmp	r8, r5
 800d4d0:	bf38      	it	cc
 800d4d2:	2100      	movcc	r1, #0
 800d4d4:	440b      	add	r3, r1
 800d4d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4da:	b191      	cbz	r1, 800d502 <__mdiff+0x11a>
 800d4dc:	6117      	str	r7, [r2, #16]
 800d4de:	e79d      	b.n	800d41c <__mdiff+0x34>
 800d4e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d4e4:	46e6      	mov	lr, ip
 800d4e6:	0c08      	lsrs	r0, r1, #16
 800d4e8:	fa1c fc81 	uxtah	ip, ip, r1
 800d4ec:	4471      	add	r1, lr
 800d4ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d4f2:	b289      	uxth	r1, r1
 800d4f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d4f8:	f846 1b04 	str.w	r1, [r6], #4
 800d4fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d500:	e7dd      	b.n	800d4be <__mdiff+0xd6>
 800d502:	3f01      	subs	r7, #1
 800d504:	e7e7      	b.n	800d4d6 <__mdiff+0xee>
 800d506:	bf00      	nop
 800d508:	08011758 	.word	0x08011758
 800d50c:	08011769 	.word	0x08011769

0800d510 <__ulp>:
 800d510:	b082      	sub	sp, #8
 800d512:	ed8d 0b00 	vstr	d0, [sp]
 800d516:	9a01      	ldr	r2, [sp, #4]
 800d518:	4b0f      	ldr	r3, [pc, #60]	@ (800d558 <__ulp+0x48>)
 800d51a:	4013      	ands	r3, r2
 800d51c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d520:	2b00      	cmp	r3, #0
 800d522:	dc08      	bgt.n	800d536 <__ulp+0x26>
 800d524:	425b      	negs	r3, r3
 800d526:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d52a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d52e:	da04      	bge.n	800d53a <__ulp+0x2a>
 800d530:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d534:	4113      	asrs	r3, r2
 800d536:	2200      	movs	r2, #0
 800d538:	e008      	b.n	800d54c <__ulp+0x3c>
 800d53a:	f1a2 0314 	sub.w	r3, r2, #20
 800d53e:	2b1e      	cmp	r3, #30
 800d540:	bfda      	itte	le
 800d542:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d546:	40da      	lsrle	r2, r3
 800d548:	2201      	movgt	r2, #1
 800d54a:	2300      	movs	r3, #0
 800d54c:	4619      	mov	r1, r3
 800d54e:	4610      	mov	r0, r2
 800d550:	ec41 0b10 	vmov	d0, r0, r1
 800d554:	b002      	add	sp, #8
 800d556:	4770      	bx	lr
 800d558:	7ff00000 	.word	0x7ff00000

0800d55c <__b2d>:
 800d55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d560:	6906      	ldr	r6, [r0, #16]
 800d562:	f100 0814 	add.w	r8, r0, #20
 800d566:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d56a:	1f37      	subs	r7, r6, #4
 800d56c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d570:	4610      	mov	r0, r2
 800d572:	f7ff fd4b 	bl	800d00c <__hi0bits>
 800d576:	f1c0 0320 	rsb	r3, r0, #32
 800d57a:	280a      	cmp	r0, #10
 800d57c:	600b      	str	r3, [r1, #0]
 800d57e:	491b      	ldr	r1, [pc, #108]	@ (800d5ec <__b2d+0x90>)
 800d580:	dc15      	bgt.n	800d5ae <__b2d+0x52>
 800d582:	f1c0 0c0b 	rsb	ip, r0, #11
 800d586:	fa22 f30c 	lsr.w	r3, r2, ip
 800d58a:	45b8      	cmp	r8, r7
 800d58c:	ea43 0501 	orr.w	r5, r3, r1
 800d590:	bf34      	ite	cc
 800d592:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d596:	2300      	movcs	r3, #0
 800d598:	3015      	adds	r0, #21
 800d59a:	fa02 f000 	lsl.w	r0, r2, r0
 800d59e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d5a2:	4303      	orrs	r3, r0
 800d5a4:	461c      	mov	r4, r3
 800d5a6:	ec45 4b10 	vmov	d0, r4, r5
 800d5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ae:	45b8      	cmp	r8, r7
 800d5b0:	bf3a      	itte	cc
 800d5b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d5b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800d5ba:	2300      	movcs	r3, #0
 800d5bc:	380b      	subs	r0, #11
 800d5be:	d012      	beq.n	800d5e6 <__b2d+0x8a>
 800d5c0:	f1c0 0120 	rsb	r1, r0, #32
 800d5c4:	fa23 f401 	lsr.w	r4, r3, r1
 800d5c8:	4082      	lsls	r2, r0
 800d5ca:	4322      	orrs	r2, r4
 800d5cc:	4547      	cmp	r7, r8
 800d5ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d5d2:	bf8c      	ite	hi
 800d5d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d5d8:	2200      	movls	r2, #0
 800d5da:	4083      	lsls	r3, r0
 800d5dc:	40ca      	lsrs	r2, r1
 800d5de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	e7de      	b.n	800d5a4 <__b2d+0x48>
 800d5e6:	ea42 0501 	orr.w	r5, r2, r1
 800d5ea:	e7db      	b.n	800d5a4 <__b2d+0x48>
 800d5ec:	3ff00000 	.word	0x3ff00000

0800d5f0 <__d2b>:
 800d5f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5f4:	460f      	mov	r7, r1
 800d5f6:	2101      	movs	r1, #1
 800d5f8:	ec59 8b10 	vmov	r8, r9, d0
 800d5fc:	4616      	mov	r6, r2
 800d5fe:	f7ff fc13 	bl	800ce28 <_Balloc>
 800d602:	4604      	mov	r4, r0
 800d604:	b930      	cbnz	r0, 800d614 <__d2b+0x24>
 800d606:	4602      	mov	r2, r0
 800d608:	4b23      	ldr	r3, [pc, #140]	@ (800d698 <__d2b+0xa8>)
 800d60a:	4824      	ldr	r0, [pc, #144]	@ (800d69c <__d2b+0xac>)
 800d60c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d610:	f001 fea2 	bl	800f358 <__assert_func>
 800d614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d61c:	b10d      	cbz	r5, 800d622 <__d2b+0x32>
 800d61e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d622:	9301      	str	r3, [sp, #4]
 800d624:	f1b8 0300 	subs.w	r3, r8, #0
 800d628:	d023      	beq.n	800d672 <__d2b+0x82>
 800d62a:	4668      	mov	r0, sp
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	f7ff fd0c 	bl	800d04a <__lo0bits>
 800d632:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d636:	b1d0      	cbz	r0, 800d66e <__d2b+0x7e>
 800d638:	f1c0 0320 	rsb	r3, r0, #32
 800d63c:	fa02 f303 	lsl.w	r3, r2, r3
 800d640:	430b      	orrs	r3, r1
 800d642:	40c2      	lsrs	r2, r0
 800d644:	6163      	str	r3, [r4, #20]
 800d646:	9201      	str	r2, [sp, #4]
 800d648:	9b01      	ldr	r3, [sp, #4]
 800d64a:	61a3      	str	r3, [r4, #24]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	bf0c      	ite	eq
 800d650:	2201      	moveq	r2, #1
 800d652:	2202      	movne	r2, #2
 800d654:	6122      	str	r2, [r4, #16]
 800d656:	b1a5      	cbz	r5, 800d682 <__d2b+0x92>
 800d658:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d65c:	4405      	add	r5, r0
 800d65e:	603d      	str	r5, [r7, #0]
 800d660:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d664:	6030      	str	r0, [r6, #0]
 800d666:	4620      	mov	r0, r4
 800d668:	b003      	add	sp, #12
 800d66a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d66e:	6161      	str	r1, [r4, #20]
 800d670:	e7ea      	b.n	800d648 <__d2b+0x58>
 800d672:	a801      	add	r0, sp, #4
 800d674:	f7ff fce9 	bl	800d04a <__lo0bits>
 800d678:	9b01      	ldr	r3, [sp, #4]
 800d67a:	6163      	str	r3, [r4, #20]
 800d67c:	3020      	adds	r0, #32
 800d67e:	2201      	movs	r2, #1
 800d680:	e7e8      	b.n	800d654 <__d2b+0x64>
 800d682:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d686:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d68a:	6038      	str	r0, [r7, #0]
 800d68c:	6918      	ldr	r0, [r3, #16]
 800d68e:	f7ff fcbd 	bl	800d00c <__hi0bits>
 800d692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d696:	e7e5      	b.n	800d664 <__d2b+0x74>
 800d698:	08011758 	.word	0x08011758
 800d69c:	08011769 	.word	0x08011769

0800d6a0 <__ratio>:
 800d6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a4:	b085      	sub	sp, #20
 800d6a6:	e9cd 1000 	strd	r1, r0, [sp]
 800d6aa:	a902      	add	r1, sp, #8
 800d6ac:	f7ff ff56 	bl	800d55c <__b2d>
 800d6b0:	9800      	ldr	r0, [sp, #0]
 800d6b2:	a903      	add	r1, sp, #12
 800d6b4:	ec55 4b10 	vmov	r4, r5, d0
 800d6b8:	f7ff ff50 	bl	800d55c <__b2d>
 800d6bc:	9b01      	ldr	r3, [sp, #4]
 800d6be:	6919      	ldr	r1, [r3, #16]
 800d6c0:	9b00      	ldr	r3, [sp, #0]
 800d6c2:	691b      	ldr	r3, [r3, #16]
 800d6c4:	1ac9      	subs	r1, r1, r3
 800d6c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d6ca:	1a9b      	subs	r3, r3, r2
 800d6cc:	ec5b ab10 	vmov	sl, fp, d0
 800d6d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	bfce      	itee	gt
 800d6d8:	462a      	movgt	r2, r5
 800d6da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d6de:	465a      	movle	r2, fp
 800d6e0:	462f      	mov	r7, r5
 800d6e2:	46d9      	mov	r9, fp
 800d6e4:	bfcc      	ite	gt
 800d6e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d6ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d6ee:	464b      	mov	r3, r9
 800d6f0:	4652      	mov	r2, sl
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	4639      	mov	r1, r7
 800d6f6:	f7f3 f8c1 	bl	800087c <__aeabi_ddiv>
 800d6fa:	ec41 0b10 	vmov	d0, r0, r1
 800d6fe:	b005      	add	sp, #20
 800d700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d704 <__copybits>:
 800d704:	3901      	subs	r1, #1
 800d706:	b570      	push	{r4, r5, r6, lr}
 800d708:	1149      	asrs	r1, r1, #5
 800d70a:	6914      	ldr	r4, [r2, #16]
 800d70c:	3101      	adds	r1, #1
 800d70e:	f102 0314 	add.w	r3, r2, #20
 800d712:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d716:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d71a:	1f05      	subs	r5, r0, #4
 800d71c:	42a3      	cmp	r3, r4
 800d71e:	d30c      	bcc.n	800d73a <__copybits+0x36>
 800d720:	1aa3      	subs	r3, r4, r2
 800d722:	3b11      	subs	r3, #17
 800d724:	f023 0303 	bic.w	r3, r3, #3
 800d728:	3211      	adds	r2, #17
 800d72a:	42a2      	cmp	r2, r4
 800d72c:	bf88      	it	hi
 800d72e:	2300      	movhi	r3, #0
 800d730:	4418      	add	r0, r3
 800d732:	2300      	movs	r3, #0
 800d734:	4288      	cmp	r0, r1
 800d736:	d305      	bcc.n	800d744 <__copybits+0x40>
 800d738:	bd70      	pop	{r4, r5, r6, pc}
 800d73a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d73e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d742:	e7eb      	b.n	800d71c <__copybits+0x18>
 800d744:	f840 3b04 	str.w	r3, [r0], #4
 800d748:	e7f4      	b.n	800d734 <__copybits+0x30>

0800d74a <__any_on>:
 800d74a:	f100 0214 	add.w	r2, r0, #20
 800d74e:	6900      	ldr	r0, [r0, #16]
 800d750:	114b      	asrs	r3, r1, #5
 800d752:	4298      	cmp	r0, r3
 800d754:	b510      	push	{r4, lr}
 800d756:	db11      	blt.n	800d77c <__any_on+0x32>
 800d758:	dd0a      	ble.n	800d770 <__any_on+0x26>
 800d75a:	f011 011f 	ands.w	r1, r1, #31
 800d75e:	d007      	beq.n	800d770 <__any_on+0x26>
 800d760:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d764:	fa24 f001 	lsr.w	r0, r4, r1
 800d768:	fa00 f101 	lsl.w	r1, r0, r1
 800d76c:	428c      	cmp	r4, r1
 800d76e:	d10b      	bne.n	800d788 <__any_on+0x3e>
 800d770:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d774:	4293      	cmp	r3, r2
 800d776:	d803      	bhi.n	800d780 <__any_on+0x36>
 800d778:	2000      	movs	r0, #0
 800d77a:	bd10      	pop	{r4, pc}
 800d77c:	4603      	mov	r3, r0
 800d77e:	e7f7      	b.n	800d770 <__any_on+0x26>
 800d780:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d784:	2900      	cmp	r1, #0
 800d786:	d0f5      	beq.n	800d774 <__any_on+0x2a>
 800d788:	2001      	movs	r0, #1
 800d78a:	e7f6      	b.n	800d77a <__any_on+0x30>

0800d78c <sulp>:
 800d78c:	b570      	push	{r4, r5, r6, lr}
 800d78e:	4604      	mov	r4, r0
 800d790:	460d      	mov	r5, r1
 800d792:	ec45 4b10 	vmov	d0, r4, r5
 800d796:	4616      	mov	r6, r2
 800d798:	f7ff feba 	bl	800d510 <__ulp>
 800d79c:	ec51 0b10 	vmov	r0, r1, d0
 800d7a0:	b17e      	cbz	r6, 800d7c2 <sulp+0x36>
 800d7a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d7a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	dd09      	ble.n	800d7c2 <sulp+0x36>
 800d7ae:	051b      	lsls	r3, r3, #20
 800d7b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d7b4:	2400      	movs	r4, #0
 800d7b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d7ba:	4622      	mov	r2, r4
 800d7bc:	462b      	mov	r3, r5
 800d7be:	f7f2 ff33 	bl	8000628 <__aeabi_dmul>
 800d7c2:	ec41 0b10 	vmov	d0, r0, r1
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}

0800d7c8 <_strtod_l>:
 800d7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7cc:	b09f      	sub	sp, #124	@ 0x7c
 800d7ce:	460c      	mov	r4, r1
 800d7d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	921a      	str	r2, [sp, #104]	@ 0x68
 800d7d6:	9005      	str	r0, [sp, #20]
 800d7d8:	f04f 0a00 	mov.w	sl, #0
 800d7dc:	f04f 0b00 	mov.w	fp, #0
 800d7e0:	460a      	mov	r2, r1
 800d7e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7e4:	7811      	ldrb	r1, [r2, #0]
 800d7e6:	292b      	cmp	r1, #43	@ 0x2b
 800d7e8:	d04a      	beq.n	800d880 <_strtod_l+0xb8>
 800d7ea:	d838      	bhi.n	800d85e <_strtod_l+0x96>
 800d7ec:	290d      	cmp	r1, #13
 800d7ee:	d832      	bhi.n	800d856 <_strtod_l+0x8e>
 800d7f0:	2908      	cmp	r1, #8
 800d7f2:	d832      	bhi.n	800d85a <_strtod_l+0x92>
 800d7f4:	2900      	cmp	r1, #0
 800d7f6:	d03b      	beq.n	800d870 <_strtod_l+0xa8>
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d7fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d7fe:	782a      	ldrb	r2, [r5, #0]
 800d800:	2a30      	cmp	r2, #48	@ 0x30
 800d802:	f040 80b3 	bne.w	800d96c <_strtod_l+0x1a4>
 800d806:	786a      	ldrb	r2, [r5, #1]
 800d808:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d80c:	2a58      	cmp	r2, #88	@ 0x58
 800d80e:	d16e      	bne.n	800d8ee <_strtod_l+0x126>
 800d810:	9302      	str	r3, [sp, #8]
 800d812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d814:	9301      	str	r3, [sp, #4]
 800d816:	ab1a      	add	r3, sp, #104	@ 0x68
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	4a8e      	ldr	r2, [pc, #568]	@ (800da54 <_strtod_l+0x28c>)
 800d81c:	9805      	ldr	r0, [sp, #20]
 800d81e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d820:	a919      	add	r1, sp, #100	@ 0x64
 800d822:	f001 fe33 	bl	800f48c <__gethex>
 800d826:	f010 060f 	ands.w	r6, r0, #15
 800d82a:	4604      	mov	r4, r0
 800d82c:	d005      	beq.n	800d83a <_strtod_l+0x72>
 800d82e:	2e06      	cmp	r6, #6
 800d830:	d128      	bne.n	800d884 <_strtod_l+0xbc>
 800d832:	3501      	adds	r5, #1
 800d834:	2300      	movs	r3, #0
 800d836:	9519      	str	r5, [sp, #100]	@ 0x64
 800d838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d83a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f040 858e 	bne.w	800e35e <_strtod_l+0xb96>
 800d842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d844:	b1cb      	cbz	r3, 800d87a <_strtod_l+0xb2>
 800d846:	4652      	mov	r2, sl
 800d848:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d84c:	ec43 2b10 	vmov	d0, r2, r3
 800d850:	b01f      	add	sp, #124	@ 0x7c
 800d852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d856:	2920      	cmp	r1, #32
 800d858:	d1ce      	bne.n	800d7f8 <_strtod_l+0x30>
 800d85a:	3201      	adds	r2, #1
 800d85c:	e7c1      	b.n	800d7e2 <_strtod_l+0x1a>
 800d85e:	292d      	cmp	r1, #45	@ 0x2d
 800d860:	d1ca      	bne.n	800d7f8 <_strtod_l+0x30>
 800d862:	2101      	movs	r1, #1
 800d864:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d866:	1c51      	adds	r1, r2, #1
 800d868:	9119      	str	r1, [sp, #100]	@ 0x64
 800d86a:	7852      	ldrb	r2, [r2, #1]
 800d86c:	2a00      	cmp	r2, #0
 800d86e:	d1c5      	bne.n	800d7fc <_strtod_l+0x34>
 800d870:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d872:	9419      	str	r4, [sp, #100]	@ 0x64
 800d874:	2b00      	cmp	r3, #0
 800d876:	f040 8570 	bne.w	800e35a <_strtod_l+0xb92>
 800d87a:	4652      	mov	r2, sl
 800d87c:	465b      	mov	r3, fp
 800d87e:	e7e5      	b.n	800d84c <_strtod_l+0x84>
 800d880:	2100      	movs	r1, #0
 800d882:	e7ef      	b.n	800d864 <_strtod_l+0x9c>
 800d884:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d886:	b13a      	cbz	r2, 800d898 <_strtod_l+0xd0>
 800d888:	2135      	movs	r1, #53	@ 0x35
 800d88a:	a81c      	add	r0, sp, #112	@ 0x70
 800d88c:	f7ff ff3a 	bl	800d704 <__copybits>
 800d890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d892:	9805      	ldr	r0, [sp, #20]
 800d894:	f7ff fb08 	bl	800cea8 <_Bfree>
 800d898:	3e01      	subs	r6, #1
 800d89a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d89c:	2e04      	cmp	r6, #4
 800d89e:	d806      	bhi.n	800d8ae <_strtod_l+0xe6>
 800d8a0:	e8df f006 	tbb	[pc, r6]
 800d8a4:	201d0314 	.word	0x201d0314
 800d8a8:	14          	.byte	0x14
 800d8a9:	00          	.byte	0x00
 800d8aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d8ae:	05e1      	lsls	r1, r4, #23
 800d8b0:	bf48      	it	mi
 800d8b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d8b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8ba:	0d1b      	lsrs	r3, r3, #20
 800d8bc:	051b      	lsls	r3, r3, #20
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d1bb      	bne.n	800d83a <_strtod_l+0x72>
 800d8c2:	f7fe fb2f 	bl	800bf24 <__errno>
 800d8c6:	2322      	movs	r3, #34	@ 0x22
 800d8c8:	6003      	str	r3, [r0, #0]
 800d8ca:	e7b6      	b.n	800d83a <_strtod_l+0x72>
 800d8cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d8d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d8d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d8d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d8dc:	e7e7      	b.n	800d8ae <_strtod_l+0xe6>
 800d8de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800da5c <_strtod_l+0x294>
 800d8e2:	e7e4      	b.n	800d8ae <_strtod_l+0xe6>
 800d8e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d8e8:	f04f 3aff 	mov.w	sl, #4294967295
 800d8ec:	e7df      	b.n	800d8ae <_strtod_l+0xe6>
 800d8ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8f4:	785b      	ldrb	r3, [r3, #1]
 800d8f6:	2b30      	cmp	r3, #48	@ 0x30
 800d8f8:	d0f9      	beq.n	800d8ee <_strtod_l+0x126>
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d09d      	beq.n	800d83a <_strtod_l+0x72>
 800d8fe:	2301      	movs	r3, #1
 800d900:	9309      	str	r3, [sp, #36]	@ 0x24
 800d902:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d904:	930c      	str	r3, [sp, #48]	@ 0x30
 800d906:	2300      	movs	r3, #0
 800d908:	9308      	str	r3, [sp, #32]
 800d90a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d90c:	461f      	mov	r7, r3
 800d90e:	220a      	movs	r2, #10
 800d910:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d912:	7805      	ldrb	r5, [r0, #0]
 800d914:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d918:	b2d9      	uxtb	r1, r3
 800d91a:	2909      	cmp	r1, #9
 800d91c:	d928      	bls.n	800d970 <_strtod_l+0x1a8>
 800d91e:	494e      	ldr	r1, [pc, #312]	@ (800da58 <_strtod_l+0x290>)
 800d920:	2201      	movs	r2, #1
 800d922:	f001 fcbe 	bl	800f2a2 <strncmp>
 800d926:	2800      	cmp	r0, #0
 800d928:	d032      	beq.n	800d990 <_strtod_l+0x1c8>
 800d92a:	2000      	movs	r0, #0
 800d92c:	462a      	mov	r2, r5
 800d92e:	4681      	mov	r9, r0
 800d930:	463d      	mov	r5, r7
 800d932:	4603      	mov	r3, r0
 800d934:	2a65      	cmp	r2, #101	@ 0x65
 800d936:	d001      	beq.n	800d93c <_strtod_l+0x174>
 800d938:	2a45      	cmp	r2, #69	@ 0x45
 800d93a:	d114      	bne.n	800d966 <_strtod_l+0x19e>
 800d93c:	b91d      	cbnz	r5, 800d946 <_strtod_l+0x17e>
 800d93e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d940:	4302      	orrs	r2, r0
 800d942:	d095      	beq.n	800d870 <_strtod_l+0xa8>
 800d944:	2500      	movs	r5, #0
 800d946:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d948:	1c62      	adds	r2, r4, #1
 800d94a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d94c:	7862      	ldrb	r2, [r4, #1]
 800d94e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d950:	d077      	beq.n	800da42 <_strtod_l+0x27a>
 800d952:	2a2d      	cmp	r2, #45	@ 0x2d
 800d954:	d07b      	beq.n	800da4e <_strtod_l+0x286>
 800d956:	f04f 0c00 	mov.w	ip, #0
 800d95a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d95e:	2909      	cmp	r1, #9
 800d960:	f240 8082 	bls.w	800da68 <_strtod_l+0x2a0>
 800d964:	9419      	str	r4, [sp, #100]	@ 0x64
 800d966:	f04f 0800 	mov.w	r8, #0
 800d96a:	e0a2      	b.n	800dab2 <_strtod_l+0x2ea>
 800d96c:	2300      	movs	r3, #0
 800d96e:	e7c7      	b.n	800d900 <_strtod_l+0x138>
 800d970:	2f08      	cmp	r7, #8
 800d972:	bfd5      	itete	le
 800d974:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d976:	9908      	ldrgt	r1, [sp, #32]
 800d978:	fb02 3301 	mlale	r3, r2, r1, r3
 800d97c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d980:	f100 0001 	add.w	r0, r0, #1
 800d984:	bfd4      	ite	le
 800d986:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d988:	9308      	strgt	r3, [sp, #32]
 800d98a:	3701      	adds	r7, #1
 800d98c:	9019      	str	r0, [sp, #100]	@ 0x64
 800d98e:	e7bf      	b.n	800d910 <_strtod_l+0x148>
 800d990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	9219      	str	r2, [sp, #100]	@ 0x64
 800d996:	785a      	ldrb	r2, [r3, #1]
 800d998:	b37f      	cbz	r7, 800d9fa <_strtod_l+0x232>
 800d99a:	4681      	mov	r9, r0
 800d99c:	463d      	mov	r5, r7
 800d99e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d9a2:	2b09      	cmp	r3, #9
 800d9a4:	d912      	bls.n	800d9cc <_strtod_l+0x204>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e7c4      	b.n	800d934 <_strtod_l+0x16c>
 800d9aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9ac:	1c5a      	adds	r2, r3, #1
 800d9ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9b0:	785a      	ldrb	r2, [r3, #1]
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	2a30      	cmp	r2, #48	@ 0x30
 800d9b6:	d0f8      	beq.n	800d9aa <_strtod_l+0x1e2>
 800d9b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d9bc:	2b08      	cmp	r3, #8
 800d9be:	f200 84d3 	bhi.w	800e368 <_strtod_l+0xba0>
 800d9c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d9c6:	4681      	mov	r9, r0
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	4605      	mov	r5, r0
 800d9cc:	3a30      	subs	r2, #48	@ 0x30
 800d9ce:	f100 0301 	add.w	r3, r0, #1
 800d9d2:	d02a      	beq.n	800da2a <_strtod_l+0x262>
 800d9d4:	4499      	add	r9, r3
 800d9d6:	eb00 0c05 	add.w	ip, r0, r5
 800d9da:	462b      	mov	r3, r5
 800d9dc:	210a      	movs	r1, #10
 800d9de:	4563      	cmp	r3, ip
 800d9e0:	d10d      	bne.n	800d9fe <_strtod_l+0x236>
 800d9e2:	1c69      	adds	r1, r5, #1
 800d9e4:	4401      	add	r1, r0
 800d9e6:	4428      	add	r0, r5
 800d9e8:	2808      	cmp	r0, #8
 800d9ea:	dc16      	bgt.n	800da1a <_strtod_l+0x252>
 800d9ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d9ee:	230a      	movs	r3, #10
 800d9f0:	fb03 2300 	mla	r3, r3, r0, r2
 800d9f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e018      	b.n	800da2c <_strtod_l+0x264>
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	e7da      	b.n	800d9b4 <_strtod_l+0x1ec>
 800d9fe:	2b08      	cmp	r3, #8
 800da00:	f103 0301 	add.w	r3, r3, #1
 800da04:	dc03      	bgt.n	800da0e <_strtod_l+0x246>
 800da06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800da08:	434e      	muls	r6, r1
 800da0a:	960a      	str	r6, [sp, #40]	@ 0x28
 800da0c:	e7e7      	b.n	800d9de <_strtod_l+0x216>
 800da0e:	2b10      	cmp	r3, #16
 800da10:	bfde      	ittt	le
 800da12:	9e08      	ldrle	r6, [sp, #32]
 800da14:	434e      	mulle	r6, r1
 800da16:	9608      	strle	r6, [sp, #32]
 800da18:	e7e1      	b.n	800d9de <_strtod_l+0x216>
 800da1a:	280f      	cmp	r0, #15
 800da1c:	dceb      	bgt.n	800d9f6 <_strtod_l+0x22e>
 800da1e:	9808      	ldr	r0, [sp, #32]
 800da20:	230a      	movs	r3, #10
 800da22:	fb03 2300 	mla	r3, r3, r0, r2
 800da26:	9308      	str	r3, [sp, #32]
 800da28:	e7e5      	b.n	800d9f6 <_strtod_l+0x22e>
 800da2a:	4629      	mov	r1, r5
 800da2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da2e:	1c50      	adds	r0, r2, #1
 800da30:	9019      	str	r0, [sp, #100]	@ 0x64
 800da32:	7852      	ldrb	r2, [r2, #1]
 800da34:	4618      	mov	r0, r3
 800da36:	460d      	mov	r5, r1
 800da38:	e7b1      	b.n	800d99e <_strtod_l+0x1d6>
 800da3a:	f04f 0900 	mov.w	r9, #0
 800da3e:	2301      	movs	r3, #1
 800da40:	e77d      	b.n	800d93e <_strtod_l+0x176>
 800da42:	f04f 0c00 	mov.w	ip, #0
 800da46:	1ca2      	adds	r2, r4, #2
 800da48:	9219      	str	r2, [sp, #100]	@ 0x64
 800da4a:	78a2      	ldrb	r2, [r4, #2]
 800da4c:	e785      	b.n	800d95a <_strtod_l+0x192>
 800da4e:	f04f 0c01 	mov.w	ip, #1
 800da52:	e7f8      	b.n	800da46 <_strtod_l+0x27e>
 800da54:	080118d8 	.word	0x080118d8
 800da58:	080118c0 	.word	0x080118c0
 800da5c:	7ff00000 	.word	0x7ff00000
 800da60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da62:	1c51      	adds	r1, r2, #1
 800da64:	9119      	str	r1, [sp, #100]	@ 0x64
 800da66:	7852      	ldrb	r2, [r2, #1]
 800da68:	2a30      	cmp	r2, #48	@ 0x30
 800da6a:	d0f9      	beq.n	800da60 <_strtod_l+0x298>
 800da6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800da70:	2908      	cmp	r1, #8
 800da72:	f63f af78 	bhi.w	800d966 <_strtod_l+0x19e>
 800da76:	3a30      	subs	r2, #48	@ 0x30
 800da78:	920e      	str	r2, [sp, #56]	@ 0x38
 800da7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800da7e:	f04f 080a 	mov.w	r8, #10
 800da82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da84:	1c56      	adds	r6, r2, #1
 800da86:	9619      	str	r6, [sp, #100]	@ 0x64
 800da88:	7852      	ldrb	r2, [r2, #1]
 800da8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800da8e:	f1be 0f09 	cmp.w	lr, #9
 800da92:	d939      	bls.n	800db08 <_strtod_l+0x340>
 800da94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800da96:	1a76      	subs	r6, r6, r1
 800da98:	2e08      	cmp	r6, #8
 800da9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800da9e:	dc03      	bgt.n	800daa8 <_strtod_l+0x2e0>
 800daa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800daa2:	4588      	cmp	r8, r1
 800daa4:	bfa8      	it	ge
 800daa6:	4688      	movge	r8, r1
 800daa8:	f1bc 0f00 	cmp.w	ip, #0
 800daac:	d001      	beq.n	800dab2 <_strtod_l+0x2ea>
 800daae:	f1c8 0800 	rsb	r8, r8, #0
 800dab2:	2d00      	cmp	r5, #0
 800dab4:	d14e      	bne.n	800db54 <_strtod_l+0x38c>
 800dab6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dab8:	4308      	orrs	r0, r1
 800daba:	f47f aebe 	bne.w	800d83a <_strtod_l+0x72>
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f47f aed6 	bne.w	800d870 <_strtod_l+0xa8>
 800dac4:	2a69      	cmp	r2, #105	@ 0x69
 800dac6:	d028      	beq.n	800db1a <_strtod_l+0x352>
 800dac8:	dc25      	bgt.n	800db16 <_strtod_l+0x34e>
 800daca:	2a49      	cmp	r2, #73	@ 0x49
 800dacc:	d025      	beq.n	800db1a <_strtod_l+0x352>
 800dace:	2a4e      	cmp	r2, #78	@ 0x4e
 800dad0:	f47f aece 	bne.w	800d870 <_strtod_l+0xa8>
 800dad4:	499b      	ldr	r1, [pc, #620]	@ (800dd44 <_strtod_l+0x57c>)
 800dad6:	a819      	add	r0, sp, #100	@ 0x64
 800dad8:	f001 fefa 	bl	800f8d0 <__match>
 800dadc:	2800      	cmp	r0, #0
 800dade:	f43f aec7 	beq.w	800d870 <_strtod_l+0xa8>
 800dae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	2b28      	cmp	r3, #40	@ 0x28
 800dae8:	d12e      	bne.n	800db48 <_strtod_l+0x380>
 800daea:	4997      	ldr	r1, [pc, #604]	@ (800dd48 <_strtod_l+0x580>)
 800daec:	aa1c      	add	r2, sp, #112	@ 0x70
 800daee:	a819      	add	r0, sp, #100	@ 0x64
 800daf0:	f001 ff02 	bl	800f8f8 <__hexnan>
 800daf4:	2805      	cmp	r0, #5
 800daf6:	d127      	bne.n	800db48 <_strtod_l+0x380>
 800daf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dafa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dafe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800db02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800db06:	e698      	b.n	800d83a <_strtod_l+0x72>
 800db08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db0a:	fb08 2101 	mla	r1, r8, r1, r2
 800db0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800db12:	920e      	str	r2, [sp, #56]	@ 0x38
 800db14:	e7b5      	b.n	800da82 <_strtod_l+0x2ba>
 800db16:	2a6e      	cmp	r2, #110	@ 0x6e
 800db18:	e7da      	b.n	800dad0 <_strtod_l+0x308>
 800db1a:	498c      	ldr	r1, [pc, #560]	@ (800dd4c <_strtod_l+0x584>)
 800db1c:	a819      	add	r0, sp, #100	@ 0x64
 800db1e:	f001 fed7 	bl	800f8d0 <__match>
 800db22:	2800      	cmp	r0, #0
 800db24:	f43f aea4 	beq.w	800d870 <_strtod_l+0xa8>
 800db28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db2a:	4989      	ldr	r1, [pc, #548]	@ (800dd50 <_strtod_l+0x588>)
 800db2c:	3b01      	subs	r3, #1
 800db2e:	a819      	add	r0, sp, #100	@ 0x64
 800db30:	9319      	str	r3, [sp, #100]	@ 0x64
 800db32:	f001 fecd 	bl	800f8d0 <__match>
 800db36:	b910      	cbnz	r0, 800db3e <_strtod_l+0x376>
 800db38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db3a:	3301      	adds	r3, #1
 800db3c:	9319      	str	r3, [sp, #100]	@ 0x64
 800db3e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800dd60 <_strtod_l+0x598>
 800db42:	f04f 0a00 	mov.w	sl, #0
 800db46:	e678      	b.n	800d83a <_strtod_l+0x72>
 800db48:	4882      	ldr	r0, [pc, #520]	@ (800dd54 <_strtod_l+0x58c>)
 800db4a:	f001 fbfd 	bl	800f348 <nan>
 800db4e:	ec5b ab10 	vmov	sl, fp, d0
 800db52:	e672      	b.n	800d83a <_strtod_l+0x72>
 800db54:	eba8 0309 	sub.w	r3, r8, r9
 800db58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800db5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800db5c:	2f00      	cmp	r7, #0
 800db5e:	bf08      	it	eq
 800db60:	462f      	moveq	r7, r5
 800db62:	2d10      	cmp	r5, #16
 800db64:	462c      	mov	r4, r5
 800db66:	bfa8      	it	ge
 800db68:	2410      	movge	r4, #16
 800db6a:	f7f2 fce3 	bl	8000534 <__aeabi_ui2d>
 800db6e:	2d09      	cmp	r5, #9
 800db70:	4682      	mov	sl, r0
 800db72:	468b      	mov	fp, r1
 800db74:	dc13      	bgt.n	800db9e <_strtod_l+0x3d6>
 800db76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f43f ae5e 	beq.w	800d83a <_strtod_l+0x72>
 800db7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db80:	dd78      	ble.n	800dc74 <_strtod_l+0x4ac>
 800db82:	2b16      	cmp	r3, #22
 800db84:	dc5f      	bgt.n	800dc46 <_strtod_l+0x47e>
 800db86:	4974      	ldr	r1, [pc, #464]	@ (800dd58 <_strtod_l+0x590>)
 800db88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db90:	4652      	mov	r2, sl
 800db92:	465b      	mov	r3, fp
 800db94:	f7f2 fd48 	bl	8000628 <__aeabi_dmul>
 800db98:	4682      	mov	sl, r0
 800db9a:	468b      	mov	fp, r1
 800db9c:	e64d      	b.n	800d83a <_strtod_l+0x72>
 800db9e:	4b6e      	ldr	r3, [pc, #440]	@ (800dd58 <_strtod_l+0x590>)
 800dba0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dba4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dba8:	f7f2 fd3e 	bl	8000628 <__aeabi_dmul>
 800dbac:	4682      	mov	sl, r0
 800dbae:	9808      	ldr	r0, [sp, #32]
 800dbb0:	468b      	mov	fp, r1
 800dbb2:	f7f2 fcbf 	bl	8000534 <__aeabi_ui2d>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	460b      	mov	r3, r1
 800dbba:	4650      	mov	r0, sl
 800dbbc:	4659      	mov	r1, fp
 800dbbe:	f7f2 fb7d 	bl	80002bc <__adddf3>
 800dbc2:	2d0f      	cmp	r5, #15
 800dbc4:	4682      	mov	sl, r0
 800dbc6:	468b      	mov	fp, r1
 800dbc8:	ddd5      	ble.n	800db76 <_strtod_l+0x3ae>
 800dbca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbcc:	1b2c      	subs	r4, r5, r4
 800dbce:	441c      	add	r4, r3
 800dbd0:	2c00      	cmp	r4, #0
 800dbd2:	f340 8096 	ble.w	800dd02 <_strtod_l+0x53a>
 800dbd6:	f014 030f 	ands.w	r3, r4, #15
 800dbda:	d00a      	beq.n	800dbf2 <_strtod_l+0x42a>
 800dbdc:	495e      	ldr	r1, [pc, #376]	@ (800dd58 <_strtod_l+0x590>)
 800dbde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dbe2:	4652      	mov	r2, sl
 800dbe4:	465b      	mov	r3, fp
 800dbe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbea:	f7f2 fd1d 	bl	8000628 <__aeabi_dmul>
 800dbee:	4682      	mov	sl, r0
 800dbf0:	468b      	mov	fp, r1
 800dbf2:	f034 040f 	bics.w	r4, r4, #15
 800dbf6:	d073      	beq.n	800dce0 <_strtod_l+0x518>
 800dbf8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dbfc:	dd48      	ble.n	800dc90 <_strtod_l+0x4c8>
 800dbfe:	2400      	movs	r4, #0
 800dc00:	46a0      	mov	r8, r4
 800dc02:	940a      	str	r4, [sp, #40]	@ 0x28
 800dc04:	46a1      	mov	r9, r4
 800dc06:	9a05      	ldr	r2, [sp, #20]
 800dc08:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dd60 <_strtod_l+0x598>
 800dc0c:	2322      	movs	r3, #34	@ 0x22
 800dc0e:	6013      	str	r3, [r2, #0]
 800dc10:	f04f 0a00 	mov.w	sl, #0
 800dc14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f43f ae0f 	beq.w	800d83a <_strtod_l+0x72>
 800dc1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc1e:	9805      	ldr	r0, [sp, #20]
 800dc20:	f7ff f942 	bl	800cea8 <_Bfree>
 800dc24:	9805      	ldr	r0, [sp, #20]
 800dc26:	4649      	mov	r1, r9
 800dc28:	f7ff f93e 	bl	800cea8 <_Bfree>
 800dc2c:	9805      	ldr	r0, [sp, #20]
 800dc2e:	4641      	mov	r1, r8
 800dc30:	f7ff f93a 	bl	800cea8 <_Bfree>
 800dc34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc36:	9805      	ldr	r0, [sp, #20]
 800dc38:	f7ff f936 	bl	800cea8 <_Bfree>
 800dc3c:	9805      	ldr	r0, [sp, #20]
 800dc3e:	4621      	mov	r1, r4
 800dc40:	f7ff f932 	bl	800cea8 <_Bfree>
 800dc44:	e5f9      	b.n	800d83a <_strtod_l+0x72>
 800dc46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	dbbc      	blt.n	800dbca <_strtod_l+0x402>
 800dc50:	4c41      	ldr	r4, [pc, #260]	@ (800dd58 <_strtod_l+0x590>)
 800dc52:	f1c5 050f 	rsb	r5, r5, #15
 800dc56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dc5a:	4652      	mov	r2, sl
 800dc5c:	465b      	mov	r3, fp
 800dc5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc62:	f7f2 fce1 	bl	8000628 <__aeabi_dmul>
 800dc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc68:	1b5d      	subs	r5, r3, r5
 800dc6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dc6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dc72:	e78f      	b.n	800db94 <_strtod_l+0x3cc>
 800dc74:	3316      	adds	r3, #22
 800dc76:	dba8      	blt.n	800dbca <_strtod_l+0x402>
 800dc78:	4b37      	ldr	r3, [pc, #220]	@ (800dd58 <_strtod_l+0x590>)
 800dc7a:	eba9 0808 	sub.w	r8, r9, r8
 800dc7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dc82:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dc86:	4650      	mov	r0, sl
 800dc88:	4659      	mov	r1, fp
 800dc8a:	f7f2 fdf7 	bl	800087c <__aeabi_ddiv>
 800dc8e:	e783      	b.n	800db98 <_strtod_l+0x3d0>
 800dc90:	4b32      	ldr	r3, [pc, #200]	@ (800dd5c <_strtod_l+0x594>)
 800dc92:	9308      	str	r3, [sp, #32]
 800dc94:	2300      	movs	r3, #0
 800dc96:	1124      	asrs	r4, r4, #4
 800dc98:	4650      	mov	r0, sl
 800dc9a:	4659      	mov	r1, fp
 800dc9c:	461e      	mov	r6, r3
 800dc9e:	2c01      	cmp	r4, #1
 800dca0:	dc21      	bgt.n	800dce6 <_strtod_l+0x51e>
 800dca2:	b10b      	cbz	r3, 800dca8 <_strtod_l+0x4e0>
 800dca4:	4682      	mov	sl, r0
 800dca6:	468b      	mov	fp, r1
 800dca8:	492c      	ldr	r1, [pc, #176]	@ (800dd5c <_strtod_l+0x594>)
 800dcaa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dcae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dcb2:	4652      	mov	r2, sl
 800dcb4:	465b      	mov	r3, fp
 800dcb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcba:	f7f2 fcb5 	bl	8000628 <__aeabi_dmul>
 800dcbe:	4b28      	ldr	r3, [pc, #160]	@ (800dd60 <_strtod_l+0x598>)
 800dcc0:	460a      	mov	r2, r1
 800dcc2:	400b      	ands	r3, r1
 800dcc4:	4927      	ldr	r1, [pc, #156]	@ (800dd64 <_strtod_l+0x59c>)
 800dcc6:	428b      	cmp	r3, r1
 800dcc8:	4682      	mov	sl, r0
 800dcca:	d898      	bhi.n	800dbfe <_strtod_l+0x436>
 800dccc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dcd0:	428b      	cmp	r3, r1
 800dcd2:	bf86      	itte	hi
 800dcd4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800dd68 <_strtod_l+0x5a0>
 800dcd8:	f04f 3aff 	movhi.w	sl, #4294967295
 800dcdc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dce0:	2300      	movs	r3, #0
 800dce2:	9308      	str	r3, [sp, #32]
 800dce4:	e07a      	b.n	800dddc <_strtod_l+0x614>
 800dce6:	07e2      	lsls	r2, r4, #31
 800dce8:	d505      	bpl.n	800dcf6 <_strtod_l+0x52e>
 800dcea:	9b08      	ldr	r3, [sp, #32]
 800dcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf0:	f7f2 fc9a 	bl	8000628 <__aeabi_dmul>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	9a08      	ldr	r2, [sp, #32]
 800dcf8:	3208      	adds	r2, #8
 800dcfa:	3601      	adds	r6, #1
 800dcfc:	1064      	asrs	r4, r4, #1
 800dcfe:	9208      	str	r2, [sp, #32]
 800dd00:	e7cd      	b.n	800dc9e <_strtod_l+0x4d6>
 800dd02:	d0ed      	beq.n	800dce0 <_strtod_l+0x518>
 800dd04:	4264      	negs	r4, r4
 800dd06:	f014 020f 	ands.w	r2, r4, #15
 800dd0a:	d00a      	beq.n	800dd22 <_strtod_l+0x55a>
 800dd0c:	4b12      	ldr	r3, [pc, #72]	@ (800dd58 <_strtod_l+0x590>)
 800dd0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd12:	4650      	mov	r0, sl
 800dd14:	4659      	mov	r1, fp
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	f7f2 fdaf 	bl	800087c <__aeabi_ddiv>
 800dd1e:	4682      	mov	sl, r0
 800dd20:	468b      	mov	fp, r1
 800dd22:	1124      	asrs	r4, r4, #4
 800dd24:	d0dc      	beq.n	800dce0 <_strtod_l+0x518>
 800dd26:	2c1f      	cmp	r4, #31
 800dd28:	dd20      	ble.n	800dd6c <_strtod_l+0x5a4>
 800dd2a:	2400      	movs	r4, #0
 800dd2c:	46a0      	mov	r8, r4
 800dd2e:	940a      	str	r4, [sp, #40]	@ 0x28
 800dd30:	46a1      	mov	r9, r4
 800dd32:	9a05      	ldr	r2, [sp, #20]
 800dd34:	2322      	movs	r3, #34	@ 0x22
 800dd36:	f04f 0a00 	mov.w	sl, #0
 800dd3a:	f04f 0b00 	mov.w	fp, #0
 800dd3e:	6013      	str	r3, [r2, #0]
 800dd40:	e768      	b.n	800dc14 <_strtod_l+0x44c>
 800dd42:	bf00      	nop
 800dd44:	080116b2 	.word	0x080116b2
 800dd48:	080118c4 	.word	0x080118c4
 800dd4c:	080116aa 	.word	0x080116aa
 800dd50:	080116df 	.word	0x080116df
 800dd54:	08011987 	.word	0x08011987
 800dd58:	080117f8 	.word	0x080117f8
 800dd5c:	080117d0 	.word	0x080117d0
 800dd60:	7ff00000 	.word	0x7ff00000
 800dd64:	7ca00000 	.word	0x7ca00000
 800dd68:	7fefffff 	.word	0x7fefffff
 800dd6c:	f014 0310 	ands.w	r3, r4, #16
 800dd70:	bf18      	it	ne
 800dd72:	236a      	movne	r3, #106	@ 0x6a
 800dd74:	4ea9      	ldr	r6, [pc, #676]	@ (800e01c <_strtod_l+0x854>)
 800dd76:	9308      	str	r3, [sp, #32]
 800dd78:	4650      	mov	r0, sl
 800dd7a:	4659      	mov	r1, fp
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	07e2      	lsls	r2, r4, #31
 800dd80:	d504      	bpl.n	800dd8c <_strtod_l+0x5c4>
 800dd82:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dd86:	f7f2 fc4f 	bl	8000628 <__aeabi_dmul>
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	1064      	asrs	r4, r4, #1
 800dd8e:	f106 0608 	add.w	r6, r6, #8
 800dd92:	d1f4      	bne.n	800dd7e <_strtod_l+0x5b6>
 800dd94:	b10b      	cbz	r3, 800dd9a <_strtod_l+0x5d2>
 800dd96:	4682      	mov	sl, r0
 800dd98:	468b      	mov	fp, r1
 800dd9a:	9b08      	ldr	r3, [sp, #32]
 800dd9c:	b1b3      	cbz	r3, 800ddcc <_strtod_l+0x604>
 800dd9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dda2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	4659      	mov	r1, fp
 800ddaa:	dd0f      	ble.n	800ddcc <_strtod_l+0x604>
 800ddac:	2b1f      	cmp	r3, #31
 800ddae:	dd55      	ble.n	800de5c <_strtod_l+0x694>
 800ddb0:	2b34      	cmp	r3, #52	@ 0x34
 800ddb2:	bfde      	ittt	le
 800ddb4:	f04f 33ff 	movle.w	r3, #4294967295
 800ddb8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ddbc:	4093      	lslle	r3, r2
 800ddbe:	f04f 0a00 	mov.w	sl, #0
 800ddc2:	bfcc      	ite	gt
 800ddc4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ddc8:	ea03 0b01 	andle.w	fp, r3, r1
 800ddcc:	2200      	movs	r2, #0
 800ddce:	2300      	movs	r3, #0
 800ddd0:	4650      	mov	r0, sl
 800ddd2:	4659      	mov	r1, fp
 800ddd4:	f7f2 fe90 	bl	8000af8 <__aeabi_dcmpeq>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d1a6      	bne.n	800dd2a <_strtod_l+0x562>
 800dddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dde2:	9805      	ldr	r0, [sp, #20]
 800dde4:	462b      	mov	r3, r5
 800dde6:	463a      	mov	r2, r7
 800dde8:	f7ff f8c6 	bl	800cf78 <__s2b>
 800ddec:	900a      	str	r0, [sp, #40]	@ 0x28
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	f43f af05 	beq.w	800dbfe <_strtod_l+0x436>
 800ddf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddf6:	2a00      	cmp	r2, #0
 800ddf8:	eba9 0308 	sub.w	r3, r9, r8
 800ddfc:	bfa8      	it	ge
 800ddfe:	2300      	movge	r3, #0
 800de00:	9312      	str	r3, [sp, #72]	@ 0x48
 800de02:	2400      	movs	r4, #0
 800de04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800de08:	9316      	str	r3, [sp, #88]	@ 0x58
 800de0a:	46a0      	mov	r8, r4
 800de0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de0e:	9805      	ldr	r0, [sp, #20]
 800de10:	6859      	ldr	r1, [r3, #4]
 800de12:	f7ff f809 	bl	800ce28 <_Balloc>
 800de16:	4681      	mov	r9, r0
 800de18:	2800      	cmp	r0, #0
 800de1a:	f43f aef4 	beq.w	800dc06 <_strtod_l+0x43e>
 800de1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de20:	691a      	ldr	r2, [r3, #16]
 800de22:	3202      	adds	r2, #2
 800de24:	f103 010c 	add.w	r1, r3, #12
 800de28:	0092      	lsls	r2, r2, #2
 800de2a:	300c      	adds	r0, #12
 800de2c:	f001 fa7e 	bl	800f32c <memcpy>
 800de30:	ec4b ab10 	vmov	d0, sl, fp
 800de34:	9805      	ldr	r0, [sp, #20]
 800de36:	aa1c      	add	r2, sp, #112	@ 0x70
 800de38:	a91b      	add	r1, sp, #108	@ 0x6c
 800de3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800de3e:	f7ff fbd7 	bl	800d5f0 <__d2b>
 800de42:	901a      	str	r0, [sp, #104]	@ 0x68
 800de44:	2800      	cmp	r0, #0
 800de46:	f43f aede 	beq.w	800dc06 <_strtod_l+0x43e>
 800de4a:	9805      	ldr	r0, [sp, #20]
 800de4c:	2101      	movs	r1, #1
 800de4e:	f7ff f929 	bl	800d0a4 <__i2b>
 800de52:	4680      	mov	r8, r0
 800de54:	b948      	cbnz	r0, 800de6a <_strtod_l+0x6a2>
 800de56:	f04f 0800 	mov.w	r8, #0
 800de5a:	e6d4      	b.n	800dc06 <_strtod_l+0x43e>
 800de5c:	f04f 32ff 	mov.w	r2, #4294967295
 800de60:	fa02 f303 	lsl.w	r3, r2, r3
 800de64:	ea03 0a0a 	and.w	sl, r3, sl
 800de68:	e7b0      	b.n	800ddcc <_strtod_l+0x604>
 800de6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800de6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800de6e:	2d00      	cmp	r5, #0
 800de70:	bfab      	itete	ge
 800de72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800de74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800de76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800de78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800de7a:	bfac      	ite	ge
 800de7c:	18ef      	addge	r7, r5, r3
 800de7e:	1b5e      	sublt	r6, r3, r5
 800de80:	9b08      	ldr	r3, [sp, #32]
 800de82:	1aed      	subs	r5, r5, r3
 800de84:	4415      	add	r5, r2
 800de86:	4b66      	ldr	r3, [pc, #408]	@ (800e020 <_strtod_l+0x858>)
 800de88:	3d01      	subs	r5, #1
 800de8a:	429d      	cmp	r5, r3
 800de8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800de90:	da50      	bge.n	800df34 <_strtod_l+0x76c>
 800de92:	1b5b      	subs	r3, r3, r5
 800de94:	2b1f      	cmp	r3, #31
 800de96:	eba2 0203 	sub.w	r2, r2, r3
 800de9a:	f04f 0101 	mov.w	r1, #1
 800de9e:	dc3d      	bgt.n	800df1c <_strtod_l+0x754>
 800dea0:	fa01 f303 	lsl.w	r3, r1, r3
 800dea4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dea6:	2300      	movs	r3, #0
 800dea8:	9310      	str	r3, [sp, #64]	@ 0x40
 800deaa:	18bd      	adds	r5, r7, r2
 800deac:	9b08      	ldr	r3, [sp, #32]
 800deae:	42af      	cmp	r7, r5
 800deb0:	4416      	add	r6, r2
 800deb2:	441e      	add	r6, r3
 800deb4:	463b      	mov	r3, r7
 800deb6:	bfa8      	it	ge
 800deb8:	462b      	movge	r3, r5
 800deba:	42b3      	cmp	r3, r6
 800debc:	bfa8      	it	ge
 800debe:	4633      	movge	r3, r6
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	bfc2      	ittt	gt
 800dec4:	1aed      	subgt	r5, r5, r3
 800dec6:	1af6      	subgt	r6, r6, r3
 800dec8:	1aff      	subgt	r7, r7, r3
 800deca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800decc:	2b00      	cmp	r3, #0
 800dece:	dd16      	ble.n	800defe <_strtod_l+0x736>
 800ded0:	4641      	mov	r1, r8
 800ded2:	9805      	ldr	r0, [sp, #20]
 800ded4:	461a      	mov	r2, r3
 800ded6:	f7ff f9a5 	bl	800d224 <__pow5mult>
 800deda:	4680      	mov	r8, r0
 800dedc:	2800      	cmp	r0, #0
 800dede:	d0ba      	beq.n	800de56 <_strtod_l+0x68e>
 800dee0:	4601      	mov	r1, r0
 800dee2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dee4:	9805      	ldr	r0, [sp, #20]
 800dee6:	f7ff f8f3 	bl	800d0d0 <__multiply>
 800deea:	900e      	str	r0, [sp, #56]	@ 0x38
 800deec:	2800      	cmp	r0, #0
 800deee:	f43f ae8a 	beq.w	800dc06 <_strtod_l+0x43e>
 800def2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800def4:	9805      	ldr	r0, [sp, #20]
 800def6:	f7fe ffd7 	bl	800cea8 <_Bfree>
 800defa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800defc:	931a      	str	r3, [sp, #104]	@ 0x68
 800defe:	2d00      	cmp	r5, #0
 800df00:	dc1d      	bgt.n	800df3e <_strtod_l+0x776>
 800df02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df04:	2b00      	cmp	r3, #0
 800df06:	dd23      	ble.n	800df50 <_strtod_l+0x788>
 800df08:	4649      	mov	r1, r9
 800df0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800df0c:	9805      	ldr	r0, [sp, #20]
 800df0e:	f7ff f989 	bl	800d224 <__pow5mult>
 800df12:	4681      	mov	r9, r0
 800df14:	b9e0      	cbnz	r0, 800df50 <_strtod_l+0x788>
 800df16:	f04f 0900 	mov.w	r9, #0
 800df1a:	e674      	b.n	800dc06 <_strtod_l+0x43e>
 800df1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800df20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800df24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800df28:	35e2      	adds	r5, #226	@ 0xe2
 800df2a:	fa01 f305 	lsl.w	r3, r1, r5
 800df2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800df30:	9113      	str	r1, [sp, #76]	@ 0x4c
 800df32:	e7ba      	b.n	800deaa <_strtod_l+0x6e2>
 800df34:	2300      	movs	r3, #0
 800df36:	9310      	str	r3, [sp, #64]	@ 0x40
 800df38:	2301      	movs	r3, #1
 800df3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df3c:	e7b5      	b.n	800deaa <_strtod_l+0x6e2>
 800df3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df40:	9805      	ldr	r0, [sp, #20]
 800df42:	462a      	mov	r2, r5
 800df44:	f7ff f9c8 	bl	800d2d8 <__lshift>
 800df48:	901a      	str	r0, [sp, #104]	@ 0x68
 800df4a:	2800      	cmp	r0, #0
 800df4c:	d1d9      	bne.n	800df02 <_strtod_l+0x73a>
 800df4e:	e65a      	b.n	800dc06 <_strtod_l+0x43e>
 800df50:	2e00      	cmp	r6, #0
 800df52:	dd07      	ble.n	800df64 <_strtod_l+0x79c>
 800df54:	4649      	mov	r1, r9
 800df56:	9805      	ldr	r0, [sp, #20]
 800df58:	4632      	mov	r2, r6
 800df5a:	f7ff f9bd 	bl	800d2d8 <__lshift>
 800df5e:	4681      	mov	r9, r0
 800df60:	2800      	cmp	r0, #0
 800df62:	d0d8      	beq.n	800df16 <_strtod_l+0x74e>
 800df64:	2f00      	cmp	r7, #0
 800df66:	dd08      	ble.n	800df7a <_strtod_l+0x7b2>
 800df68:	4641      	mov	r1, r8
 800df6a:	9805      	ldr	r0, [sp, #20]
 800df6c:	463a      	mov	r2, r7
 800df6e:	f7ff f9b3 	bl	800d2d8 <__lshift>
 800df72:	4680      	mov	r8, r0
 800df74:	2800      	cmp	r0, #0
 800df76:	f43f ae46 	beq.w	800dc06 <_strtod_l+0x43e>
 800df7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df7c:	9805      	ldr	r0, [sp, #20]
 800df7e:	464a      	mov	r2, r9
 800df80:	f7ff fa32 	bl	800d3e8 <__mdiff>
 800df84:	4604      	mov	r4, r0
 800df86:	2800      	cmp	r0, #0
 800df88:	f43f ae3d 	beq.w	800dc06 <_strtod_l+0x43e>
 800df8c:	68c3      	ldr	r3, [r0, #12]
 800df8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df90:	2300      	movs	r3, #0
 800df92:	60c3      	str	r3, [r0, #12]
 800df94:	4641      	mov	r1, r8
 800df96:	f7ff fa0b 	bl	800d3b0 <__mcmp>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	da46      	bge.n	800e02c <_strtod_l+0x864>
 800df9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfa0:	ea53 030a 	orrs.w	r3, r3, sl
 800dfa4:	d16c      	bne.n	800e080 <_strtod_l+0x8b8>
 800dfa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d168      	bne.n	800e080 <_strtod_l+0x8b8>
 800dfae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dfb2:	0d1b      	lsrs	r3, r3, #20
 800dfb4:	051b      	lsls	r3, r3, #20
 800dfb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dfba:	d961      	bls.n	800e080 <_strtod_l+0x8b8>
 800dfbc:	6963      	ldr	r3, [r4, #20]
 800dfbe:	b913      	cbnz	r3, 800dfc6 <_strtod_l+0x7fe>
 800dfc0:	6923      	ldr	r3, [r4, #16]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	dd5c      	ble.n	800e080 <_strtod_l+0x8b8>
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	2201      	movs	r2, #1
 800dfca:	9805      	ldr	r0, [sp, #20]
 800dfcc:	f7ff f984 	bl	800d2d8 <__lshift>
 800dfd0:	4641      	mov	r1, r8
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	f7ff f9ec 	bl	800d3b0 <__mcmp>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	dd51      	ble.n	800e080 <_strtod_l+0x8b8>
 800dfdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dfe0:	9a08      	ldr	r2, [sp, #32]
 800dfe2:	0d1b      	lsrs	r3, r3, #20
 800dfe4:	051b      	lsls	r3, r3, #20
 800dfe6:	2a00      	cmp	r2, #0
 800dfe8:	d06b      	beq.n	800e0c2 <_strtod_l+0x8fa>
 800dfea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dfee:	d868      	bhi.n	800e0c2 <_strtod_l+0x8fa>
 800dff0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dff4:	f67f ae9d 	bls.w	800dd32 <_strtod_l+0x56a>
 800dff8:	4b0a      	ldr	r3, [pc, #40]	@ (800e024 <_strtod_l+0x85c>)
 800dffa:	4650      	mov	r0, sl
 800dffc:	4659      	mov	r1, fp
 800dffe:	2200      	movs	r2, #0
 800e000:	f7f2 fb12 	bl	8000628 <__aeabi_dmul>
 800e004:	4b08      	ldr	r3, [pc, #32]	@ (800e028 <_strtod_l+0x860>)
 800e006:	400b      	ands	r3, r1
 800e008:	4682      	mov	sl, r0
 800e00a:	468b      	mov	fp, r1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f47f ae05 	bne.w	800dc1c <_strtod_l+0x454>
 800e012:	9a05      	ldr	r2, [sp, #20]
 800e014:	2322      	movs	r3, #34	@ 0x22
 800e016:	6013      	str	r3, [r2, #0]
 800e018:	e600      	b.n	800dc1c <_strtod_l+0x454>
 800e01a:	bf00      	nop
 800e01c:	080118f0 	.word	0x080118f0
 800e020:	fffffc02 	.word	0xfffffc02
 800e024:	39500000 	.word	0x39500000
 800e028:	7ff00000 	.word	0x7ff00000
 800e02c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e030:	d165      	bne.n	800e0fe <_strtod_l+0x936>
 800e032:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e038:	b35a      	cbz	r2, 800e092 <_strtod_l+0x8ca>
 800e03a:	4a9f      	ldr	r2, [pc, #636]	@ (800e2b8 <_strtod_l+0xaf0>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d12b      	bne.n	800e098 <_strtod_l+0x8d0>
 800e040:	9b08      	ldr	r3, [sp, #32]
 800e042:	4651      	mov	r1, sl
 800e044:	b303      	cbz	r3, 800e088 <_strtod_l+0x8c0>
 800e046:	4b9d      	ldr	r3, [pc, #628]	@ (800e2bc <_strtod_l+0xaf4>)
 800e048:	465a      	mov	r2, fp
 800e04a:	4013      	ands	r3, r2
 800e04c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e050:	f04f 32ff 	mov.w	r2, #4294967295
 800e054:	d81b      	bhi.n	800e08e <_strtod_l+0x8c6>
 800e056:	0d1b      	lsrs	r3, r3, #20
 800e058:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e05c:	fa02 f303 	lsl.w	r3, r2, r3
 800e060:	4299      	cmp	r1, r3
 800e062:	d119      	bne.n	800e098 <_strtod_l+0x8d0>
 800e064:	4b96      	ldr	r3, [pc, #600]	@ (800e2c0 <_strtod_l+0xaf8>)
 800e066:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e068:	429a      	cmp	r2, r3
 800e06a:	d102      	bne.n	800e072 <_strtod_l+0x8aa>
 800e06c:	3101      	adds	r1, #1
 800e06e:	f43f adca 	beq.w	800dc06 <_strtod_l+0x43e>
 800e072:	4b92      	ldr	r3, [pc, #584]	@ (800e2bc <_strtod_l+0xaf4>)
 800e074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e076:	401a      	ands	r2, r3
 800e078:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e07c:	f04f 0a00 	mov.w	sl, #0
 800e080:	9b08      	ldr	r3, [sp, #32]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d1b8      	bne.n	800dff8 <_strtod_l+0x830>
 800e086:	e5c9      	b.n	800dc1c <_strtod_l+0x454>
 800e088:	f04f 33ff 	mov.w	r3, #4294967295
 800e08c:	e7e8      	b.n	800e060 <_strtod_l+0x898>
 800e08e:	4613      	mov	r3, r2
 800e090:	e7e6      	b.n	800e060 <_strtod_l+0x898>
 800e092:	ea53 030a 	orrs.w	r3, r3, sl
 800e096:	d0a1      	beq.n	800dfdc <_strtod_l+0x814>
 800e098:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e09a:	b1db      	cbz	r3, 800e0d4 <_strtod_l+0x90c>
 800e09c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e09e:	4213      	tst	r3, r2
 800e0a0:	d0ee      	beq.n	800e080 <_strtod_l+0x8b8>
 800e0a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0a4:	9a08      	ldr	r2, [sp, #32]
 800e0a6:	4650      	mov	r0, sl
 800e0a8:	4659      	mov	r1, fp
 800e0aa:	b1bb      	cbz	r3, 800e0dc <_strtod_l+0x914>
 800e0ac:	f7ff fb6e 	bl	800d78c <sulp>
 800e0b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0b4:	ec53 2b10 	vmov	r2, r3, d0
 800e0b8:	f7f2 f900 	bl	80002bc <__adddf3>
 800e0bc:	4682      	mov	sl, r0
 800e0be:	468b      	mov	fp, r1
 800e0c0:	e7de      	b.n	800e080 <_strtod_l+0x8b8>
 800e0c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e0c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e0ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e0ce:	f04f 3aff 	mov.w	sl, #4294967295
 800e0d2:	e7d5      	b.n	800e080 <_strtod_l+0x8b8>
 800e0d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e0d6:	ea13 0f0a 	tst.w	r3, sl
 800e0da:	e7e1      	b.n	800e0a0 <_strtod_l+0x8d8>
 800e0dc:	f7ff fb56 	bl	800d78c <sulp>
 800e0e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0e4:	ec53 2b10 	vmov	r2, r3, d0
 800e0e8:	f7f2 f8e6 	bl	80002b8 <__aeabi_dsub>
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	4682      	mov	sl, r0
 800e0f2:	468b      	mov	fp, r1
 800e0f4:	f7f2 fd00 	bl	8000af8 <__aeabi_dcmpeq>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d0c1      	beq.n	800e080 <_strtod_l+0x8b8>
 800e0fc:	e619      	b.n	800dd32 <_strtod_l+0x56a>
 800e0fe:	4641      	mov	r1, r8
 800e100:	4620      	mov	r0, r4
 800e102:	f7ff facd 	bl	800d6a0 <__ratio>
 800e106:	ec57 6b10 	vmov	r6, r7, d0
 800e10a:	2200      	movs	r2, #0
 800e10c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e110:	4630      	mov	r0, r6
 800e112:	4639      	mov	r1, r7
 800e114:	f7f2 fd04 	bl	8000b20 <__aeabi_dcmple>
 800e118:	2800      	cmp	r0, #0
 800e11a:	d06f      	beq.n	800e1fc <_strtod_l+0xa34>
 800e11c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d17a      	bne.n	800e218 <_strtod_l+0xa50>
 800e122:	f1ba 0f00 	cmp.w	sl, #0
 800e126:	d158      	bne.n	800e1da <_strtod_l+0xa12>
 800e128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e12a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d15a      	bne.n	800e1e8 <_strtod_l+0xa20>
 800e132:	4b64      	ldr	r3, [pc, #400]	@ (800e2c4 <_strtod_l+0xafc>)
 800e134:	2200      	movs	r2, #0
 800e136:	4630      	mov	r0, r6
 800e138:	4639      	mov	r1, r7
 800e13a:	f7f2 fce7 	bl	8000b0c <__aeabi_dcmplt>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d159      	bne.n	800e1f6 <_strtod_l+0xa2e>
 800e142:	4630      	mov	r0, r6
 800e144:	4639      	mov	r1, r7
 800e146:	4b60      	ldr	r3, [pc, #384]	@ (800e2c8 <_strtod_l+0xb00>)
 800e148:	2200      	movs	r2, #0
 800e14a:	f7f2 fa6d 	bl	8000628 <__aeabi_dmul>
 800e14e:	4606      	mov	r6, r0
 800e150:	460f      	mov	r7, r1
 800e152:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e156:	9606      	str	r6, [sp, #24]
 800e158:	9307      	str	r3, [sp, #28]
 800e15a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e15e:	4d57      	ldr	r5, [pc, #348]	@ (800e2bc <_strtod_l+0xaf4>)
 800e160:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e164:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e166:	401d      	ands	r5, r3
 800e168:	4b58      	ldr	r3, [pc, #352]	@ (800e2cc <_strtod_l+0xb04>)
 800e16a:	429d      	cmp	r5, r3
 800e16c:	f040 80b2 	bne.w	800e2d4 <_strtod_l+0xb0c>
 800e170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e172:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e176:	ec4b ab10 	vmov	d0, sl, fp
 800e17a:	f7ff f9c9 	bl	800d510 <__ulp>
 800e17e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e182:	ec51 0b10 	vmov	r0, r1, d0
 800e186:	f7f2 fa4f 	bl	8000628 <__aeabi_dmul>
 800e18a:	4652      	mov	r2, sl
 800e18c:	465b      	mov	r3, fp
 800e18e:	f7f2 f895 	bl	80002bc <__adddf3>
 800e192:	460b      	mov	r3, r1
 800e194:	4949      	ldr	r1, [pc, #292]	@ (800e2bc <_strtod_l+0xaf4>)
 800e196:	4a4e      	ldr	r2, [pc, #312]	@ (800e2d0 <_strtod_l+0xb08>)
 800e198:	4019      	ands	r1, r3
 800e19a:	4291      	cmp	r1, r2
 800e19c:	4682      	mov	sl, r0
 800e19e:	d942      	bls.n	800e226 <_strtod_l+0xa5e>
 800e1a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1a2:	4b47      	ldr	r3, [pc, #284]	@ (800e2c0 <_strtod_l+0xaf8>)
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d103      	bne.n	800e1b0 <_strtod_l+0x9e8>
 800e1a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	f43f ad2b 	beq.w	800dc06 <_strtod_l+0x43e>
 800e1b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e2c0 <_strtod_l+0xaf8>
 800e1b4:	f04f 3aff 	mov.w	sl, #4294967295
 800e1b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1ba:	9805      	ldr	r0, [sp, #20]
 800e1bc:	f7fe fe74 	bl	800cea8 <_Bfree>
 800e1c0:	9805      	ldr	r0, [sp, #20]
 800e1c2:	4649      	mov	r1, r9
 800e1c4:	f7fe fe70 	bl	800cea8 <_Bfree>
 800e1c8:	9805      	ldr	r0, [sp, #20]
 800e1ca:	4641      	mov	r1, r8
 800e1cc:	f7fe fe6c 	bl	800cea8 <_Bfree>
 800e1d0:	9805      	ldr	r0, [sp, #20]
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	f7fe fe68 	bl	800cea8 <_Bfree>
 800e1d8:	e618      	b.n	800de0c <_strtod_l+0x644>
 800e1da:	f1ba 0f01 	cmp.w	sl, #1
 800e1de:	d103      	bne.n	800e1e8 <_strtod_l+0xa20>
 800e1e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	f43f ada5 	beq.w	800dd32 <_strtod_l+0x56a>
 800e1e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e298 <_strtod_l+0xad0>
 800e1ec:	4f35      	ldr	r7, [pc, #212]	@ (800e2c4 <_strtod_l+0xafc>)
 800e1ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e1f2:	2600      	movs	r6, #0
 800e1f4:	e7b1      	b.n	800e15a <_strtod_l+0x992>
 800e1f6:	4f34      	ldr	r7, [pc, #208]	@ (800e2c8 <_strtod_l+0xb00>)
 800e1f8:	2600      	movs	r6, #0
 800e1fa:	e7aa      	b.n	800e152 <_strtod_l+0x98a>
 800e1fc:	4b32      	ldr	r3, [pc, #200]	@ (800e2c8 <_strtod_l+0xb00>)
 800e1fe:	4630      	mov	r0, r6
 800e200:	4639      	mov	r1, r7
 800e202:	2200      	movs	r2, #0
 800e204:	f7f2 fa10 	bl	8000628 <__aeabi_dmul>
 800e208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e20a:	4606      	mov	r6, r0
 800e20c:	460f      	mov	r7, r1
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d09f      	beq.n	800e152 <_strtod_l+0x98a>
 800e212:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e216:	e7a0      	b.n	800e15a <_strtod_l+0x992>
 800e218:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e2a0 <_strtod_l+0xad8>
 800e21c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e220:	ec57 6b17 	vmov	r6, r7, d7
 800e224:	e799      	b.n	800e15a <_strtod_l+0x992>
 800e226:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e22a:	9b08      	ldr	r3, [sp, #32]
 800e22c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1c1      	bne.n	800e1b8 <_strtod_l+0x9f0>
 800e234:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e238:	0d1b      	lsrs	r3, r3, #20
 800e23a:	051b      	lsls	r3, r3, #20
 800e23c:	429d      	cmp	r5, r3
 800e23e:	d1bb      	bne.n	800e1b8 <_strtod_l+0x9f0>
 800e240:	4630      	mov	r0, r6
 800e242:	4639      	mov	r1, r7
 800e244:	f7f2 fd50 	bl	8000ce8 <__aeabi_d2lz>
 800e248:	f7f2 f9c0 	bl	80005cc <__aeabi_l2d>
 800e24c:	4602      	mov	r2, r0
 800e24e:	460b      	mov	r3, r1
 800e250:	4630      	mov	r0, r6
 800e252:	4639      	mov	r1, r7
 800e254:	f7f2 f830 	bl	80002b8 <__aeabi_dsub>
 800e258:	460b      	mov	r3, r1
 800e25a:	4602      	mov	r2, r0
 800e25c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e260:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e266:	ea46 060a 	orr.w	r6, r6, sl
 800e26a:	431e      	orrs	r6, r3
 800e26c:	d06f      	beq.n	800e34e <_strtod_l+0xb86>
 800e26e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e2a8 <_strtod_l+0xae0>)
 800e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e274:	f7f2 fc4a 	bl	8000b0c <__aeabi_dcmplt>
 800e278:	2800      	cmp	r0, #0
 800e27a:	f47f accf 	bne.w	800dc1c <_strtod_l+0x454>
 800e27e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e2b0 <_strtod_l+0xae8>)
 800e280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e288:	f7f2 fc5e 	bl	8000b48 <__aeabi_dcmpgt>
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d093      	beq.n	800e1b8 <_strtod_l+0x9f0>
 800e290:	e4c4      	b.n	800dc1c <_strtod_l+0x454>
 800e292:	bf00      	nop
 800e294:	f3af 8000 	nop.w
 800e298:	00000000 	.word	0x00000000
 800e29c:	bff00000 	.word	0xbff00000
 800e2a0:	00000000 	.word	0x00000000
 800e2a4:	3ff00000 	.word	0x3ff00000
 800e2a8:	94a03595 	.word	0x94a03595
 800e2ac:	3fdfffff 	.word	0x3fdfffff
 800e2b0:	35afe535 	.word	0x35afe535
 800e2b4:	3fe00000 	.word	0x3fe00000
 800e2b8:	000fffff 	.word	0x000fffff
 800e2bc:	7ff00000 	.word	0x7ff00000
 800e2c0:	7fefffff 	.word	0x7fefffff
 800e2c4:	3ff00000 	.word	0x3ff00000
 800e2c8:	3fe00000 	.word	0x3fe00000
 800e2cc:	7fe00000 	.word	0x7fe00000
 800e2d0:	7c9fffff 	.word	0x7c9fffff
 800e2d4:	9b08      	ldr	r3, [sp, #32]
 800e2d6:	b323      	cbz	r3, 800e322 <_strtod_l+0xb5a>
 800e2d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e2dc:	d821      	bhi.n	800e322 <_strtod_l+0xb5a>
 800e2de:	a328      	add	r3, pc, #160	@ (adr r3, 800e380 <_strtod_l+0xbb8>)
 800e2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	4639      	mov	r1, r7
 800e2e8:	f7f2 fc1a 	bl	8000b20 <__aeabi_dcmple>
 800e2ec:	b1a0      	cbz	r0, 800e318 <_strtod_l+0xb50>
 800e2ee:	4639      	mov	r1, r7
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	f7f2 fc71 	bl	8000bd8 <__aeabi_d2uiz>
 800e2f6:	2801      	cmp	r0, #1
 800e2f8:	bf38      	it	cc
 800e2fa:	2001      	movcc	r0, #1
 800e2fc:	f7f2 f91a 	bl	8000534 <__aeabi_ui2d>
 800e300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e302:	4606      	mov	r6, r0
 800e304:	460f      	mov	r7, r1
 800e306:	b9fb      	cbnz	r3, 800e348 <_strtod_l+0xb80>
 800e308:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e30c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e30e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e310:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e314:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e318:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e31a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e31e:	1b5b      	subs	r3, r3, r5
 800e320:	9311      	str	r3, [sp, #68]	@ 0x44
 800e322:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e326:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e32a:	f7ff f8f1 	bl	800d510 <__ulp>
 800e32e:	4650      	mov	r0, sl
 800e330:	ec53 2b10 	vmov	r2, r3, d0
 800e334:	4659      	mov	r1, fp
 800e336:	f7f2 f977 	bl	8000628 <__aeabi_dmul>
 800e33a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e33e:	f7f1 ffbd 	bl	80002bc <__adddf3>
 800e342:	4682      	mov	sl, r0
 800e344:	468b      	mov	fp, r1
 800e346:	e770      	b.n	800e22a <_strtod_l+0xa62>
 800e348:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e34c:	e7e0      	b.n	800e310 <_strtod_l+0xb48>
 800e34e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e388 <_strtod_l+0xbc0>)
 800e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e354:	f7f2 fbda 	bl	8000b0c <__aeabi_dcmplt>
 800e358:	e798      	b.n	800e28c <_strtod_l+0xac4>
 800e35a:	2300      	movs	r3, #0
 800e35c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e35e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e362:	6013      	str	r3, [r2, #0]
 800e364:	f7ff ba6d 	b.w	800d842 <_strtod_l+0x7a>
 800e368:	2a65      	cmp	r2, #101	@ 0x65
 800e36a:	f43f ab66 	beq.w	800da3a <_strtod_l+0x272>
 800e36e:	2a45      	cmp	r2, #69	@ 0x45
 800e370:	f43f ab63 	beq.w	800da3a <_strtod_l+0x272>
 800e374:	2301      	movs	r3, #1
 800e376:	f7ff bb9e 	b.w	800dab6 <_strtod_l+0x2ee>
 800e37a:	bf00      	nop
 800e37c:	f3af 8000 	nop.w
 800e380:	ffc00000 	.word	0xffc00000
 800e384:	41dfffff 	.word	0x41dfffff
 800e388:	94a03595 	.word	0x94a03595
 800e38c:	3fcfffff 	.word	0x3fcfffff

0800e390 <_strtod_r>:
 800e390:	4b01      	ldr	r3, [pc, #4]	@ (800e398 <_strtod_r+0x8>)
 800e392:	f7ff ba19 	b.w	800d7c8 <_strtod_l>
 800e396:	bf00      	nop
 800e398:	20000088 	.word	0x20000088

0800e39c <__ssputs_r>:
 800e39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a0:	688e      	ldr	r6, [r1, #8]
 800e3a2:	461f      	mov	r7, r3
 800e3a4:	42be      	cmp	r6, r7
 800e3a6:	680b      	ldr	r3, [r1, #0]
 800e3a8:	4682      	mov	sl, r0
 800e3aa:	460c      	mov	r4, r1
 800e3ac:	4690      	mov	r8, r2
 800e3ae:	d82d      	bhi.n	800e40c <__ssputs_r+0x70>
 800e3b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3b8:	d026      	beq.n	800e408 <__ssputs_r+0x6c>
 800e3ba:	6965      	ldr	r5, [r4, #20]
 800e3bc:	6909      	ldr	r1, [r1, #16]
 800e3be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3c2:	eba3 0901 	sub.w	r9, r3, r1
 800e3c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3ca:	1c7b      	adds	r3, r7, #1
 800e3cc:	444b      	add	r3, r9
 800e3ce:	106d      	asrs	r5, r5, #1
 800e3d0:	429d      	cmp	r5, r3
 800e3d2:	bf38      	it	cc
 800e3d4:	461d      	movcc	r5, r3
 800e3d6:	0553      	lsls	r3, r2, #21
 800e3d8:	d527      	bpl.n	800e42a <__ssputs_r+0x8e>
 800e3da:	4629      	mov	r1, r5
 800e3dc:	f7fe fc98 	bl	800cd10 <_malloc_r>
 800e3e0:	4606      	mov	r6, r0
 800e3e2:	b360      	cbz	r0, 800e43e <__ssputs_r+0xa2>
 800e3e4:	6921      	ldr	r1, [r4, #16]
 800e3e6:	464a      	mov	r2, r9
 800e3e8:	f000 ffa0 	bl	800f32c <memcpy>
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e3f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3f6:	81a3      	strh	r3, [r4, #12]
 800e3f8:	6126      	str	r6, [r4, #16]
 800e3fa:	6165      	str	r5, [r4, #20]
 800e3fc:	444e      	add	r6, r9
 800e3fe:	eba5 0509 	sub.w	r5, r5, r9
 800e402:	6026      	str	r6, [r4, #0]
 800e404:	60a5      	str	r5, [r4, #8]
 800e406:	463e      	mov	r6, r7
 800e408:	42be      	cmp	r6, r7
 800e40a:	d900      	bls.n	800e40e <__ssputs_r+0x72>
 800e40c:	463e      	mov	r6, r7
 800e40e:	6820      	ldr	r0, [r4, #0]
 800e410:	4632      	mov	r2, r6
 800e412:	4641      	mov	r1, r8
 800e414:	f000 ff2b 	bl	800f26e <memmove>
 800e418:	68a3      	ldr	r3, [r4, #8]
 800e41a:	1b9b      	subs	r3, r3, r6
 800e41c:	60a3      	str	r3, [r4, #8]
 800e41e:	6823      	ldr	r3, [r4, #0]
 800e420:	4433      	add	r3, r6
 800e422:	6023      	str	r3, [r4, #0]
 800e424:	2000      	movs	r0, #0
 800e426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42a:	462a      	mov	r2, r5
 800e42c:	f001 fb11 	bl	800fa52 <_realloc_r>
 800e430:	4606      	mov	r6, r0
 800e432:	2800      	cmp	r0, #0
 800e434:	d1e0      	bne.n	800e3f8 <__ssputs_r+0x5c>
 800e436:	6921      	ldr	r1, [r4, #16]
 800e438:	4650      	mov	r0, sl
 800e43a:	f7fe fbf5 	bl	800cc28 <_free_r>
 800e43e:	230c      	movs	r3, #12
 800e440:	f8ca 3000 	str.w	r3, [sl]
 800e444:	89a3      	ldrh	r3, [r4, #12]
 800e446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e44a:	81a3      	strh	r3, [r4, #12]
 800e44c:	f04f 30ff 	mov.w	r0, #4294967295
 800e450:	e7e9      	b.n	800e426 <__ssputs_r+0x8a>
	...

0800e454 <_svfiprintf_r>:
 800e454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e458:	4698      	mov	r8, r3
 800e45a:	898b      	ldrh	r3, [r1, #12]
 800e45c:	061b      	lsls	r3, r3, #24
 800e45e:	b09d      	sub	sp, #116	@ 0x74
 800e460:	4607      	mov	r7, r0
 800e462:	460d      	mov	r5, r1
 800e464:	4614      	mov	r4, r2
 800e466:	d510      	bpl.n	800e48a <_svfiprintf_r+0x36>
 800e468:	690b      	ldr	r3, [r1, #16]
 800e46a:	b973      	cbnz	r3, 800e48a <_svfiprintf_r+0x36>
 800e46c:	2140      	movs	r1, #64	@ 0x40
 800e46e:	f7fe fc4f 	bl	800cd10 <_malloc_r>
 800e472:	6028      	str	r0, [r5, #0]
 800e474:	6128      	str	r0, [r5, #16]
 800e476:	b930      	cbnz	r0, 800e486 <_svfiprintf_r+0x32>
 800e478:	230c      	movs	r3, #12
 800e47a:	603b      	str	r3, [r7, #0]
 800e47c:	f04f 30ff 	mov.w	r0, #4294967295
 800e480:	b01d      	add	sp, #116	@ 0x74
 800e482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e486:	2340      	movs	r3, #64	@ 0x40
 800e488:	616b      	str	r3, [r5, #20]
 800e48a:	2300      	movs	r3, #0
 800e48c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e48e:	2320      	movs	r3, #32
 800e490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e494:	f8cd 800c 	str.w	r8, [sp, #12]
 800e498:	2330      	movs	r3, #48	@ 0x30
 800e49a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e638 <_svfiprintf_r+0x1e4>
 800e49e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4a2:	f04f 0901 	mov.w	r9, #1
 800e4a6:	4623      	mov	r3, r4
 800e4a8:	469a      	mov	sl, r3
 800e4aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ae:	b10a      	cbz	r2, 800e4b4 <_svfiprintf_r+0x60>
 800e4b0:	2a25      	cmp	r2, #37	@ 0x25
 800e4b2:	d1f9      	bne.n	800e4a8 <_svfiprintf_r+0x54>
 800e4b4:	ebba 0b04 	subs.w	fp, sl, r4
 800e4b8:	d00b      	beq.n	800e4d2 <_svfiprintf_r+0x7e>
 800e4ba:	465b      	mov	r3, fp
 800e4bc:	4622      	mov	r2, r4
 800e4be:	4629      	mov	r1, r5
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	f7ff ff6b 	bl	800e39c <__ssputs_r>
 800e4c6:	3001      	adds	r0, #1
 800e4c8:	f000 80a7 	beq.w	800e61a <_svfiprintf_r+0x1c6>
 800e4cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4ce:	445a      	add	r2, fp
 800e4d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	f000 809f 	beq.w	800e61a <_svfiprintf_r+0x1c6>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f04f 32ff 	mov.w	r2, #4294967295
 800e4e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4e6:	f10a 0a01 	add.w	sl, sl, #1
 800e4ea:	9304      	str	r3, [sp, #16]
 800e4ec:	9307      	str	r3, [sp, #28]
 800e4ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4f4:	4654      	mov	r4, sl
 800e4f6:	2205      	movs	r2, #5
 800e4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4fc:	484e      	ldr	r0, [pc, #312]	@ (800e638 <_svfiprintf_r+0x1e4>)
 800e4fe:	f7f1 fe7f 	bl	8000200 <memchr>
 800e502:	9a04      	ldr	r2, [sp, #16]
 800e504:	b9d8      	cbnz	r0, 800e53e <_svfiprintf_r+0xea>
 800e506:	06d0      	lsls	r0, r2, #27
 800e508:	bf44      	itt	mi
 800e50a:	2320      	movmi	r3, #32
 800e50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e510:	0711      	lsls	r1, r2, #28
 800e512:	bf44      	itt	mi
 800e514:	232b      	movmi	r3, #43	@ 0x2b
 800e516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e51a:	f89a 3000 	ldrb.w	r3, [sl]
 800e51e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e520:	d015      	beq.n	800e54e <_svfiprintf_r+0xfa>
 800e522:	9a07      	ldr	r2, [sp, #28]
 800e524:	4654      	mov	r4, sl
 800e526:	2000      	movs	r0, #0
 800e528:	f04f 0c0a 	mov.w	ip, #10
 800e52c:	4621      	mov	r1, r4
 800e52e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e532:	3b30      	subs	r3, #48	@ 0x30
 800e534:	2b09      	cmp	r3, #9
 800e536:	d94b      	bls.n	800e5d0 <_svfiprintf_r+0x17c>
 800e538:	b1b0      	cbz	r0, 800e568 <_svfiprintf_r+0x114>
 800e53a:	9207      	str	r2, [sp, #28]
 800e53c:	e014      	b.n	800e568 <_svfiprintf_r+0x114>
 800e53e:	eba0 0308 	sub.w	r3, r0, r8
 800e542:	fa09 f303 	lsl.w	r3, r9, r3
 800e546:	4313      	orrs	r3, r2
 800e548:	9304      	str	r3, [sp, #16]
 800e54a:	46a2      	mov	sl, r4
 800e54c:	e7d2      	b.n	800e4f4 <_svfiprintf_r+0xa0>
 800e54e:	9b03      	ldr	r3, [sp, #12]
 800e550:	1d19      	adds	r1, r3, #4
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	9103      	str	r1, [sp, #12]
 800e556:	2b00      	cmp	r3, #0
 800e558:	bfbb      	ittet	lt
 800e55a:	425b      	neglt	r3, r3
 800e55c:	f042 0202 	orrlt.w	r2, r2, #2
 800e560:	9307      	strge	r3, [sp, #28]
 800e562:	9307      	strlt	r3, [sp, #28]
 800e564:	bfb8      	it	lt
 800e566:	9204      	strlt	r2, [sp, #16]
 800e568:	7823      	ldrb	r3, [r4, #0]
 800e56a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e56c:	d10a      	bne.n	800e584 <_svfiprintf_r+0x130>
 800e56e:	7863      	ldrb	r3, [r4, #1]
 800e570:	2b2a      	cmp	r3, #42	@ 0x2a
 800e572:	d132      	bne.n	800e5da <_svfiprintf_r+0x186>
 800e574:	9b03      	ldr	r3, [sp, #12]
 800e576:	1d1a      	adds	r2, r3, #4
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	9203      	str	r2, [sp, #12]
 800e57c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e580:	3402      	adds	r4, #2
 800e582:	9305      	str	r3, [sp, #20]
 800e584:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e648 <_svfiprintf_r+0x1f4>
 800e588:	7821      	ldrb	r1, [r4, #0]
 800e58a:	2203      	movs	r2, #3
 800e58c:	4650      	mov	r0, sl
 800e58e:	f7f1 fe37 	bl	8000200 <memchr>
 800e592:	b138      	cbz	r0, 800e5a4 <_svfiprintf_r+0x150>
 800e594:	9b04      	ldr	r3, [sp, #16]
 800e596:	eba0 000a 	sub.w	r0, r0, sl
 800e59a:	2240      	movs	r2, #64	@ 0x40
 800e59c:	4082      	lsls	r2, r0
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	3401      	adds	r4, #1
 800e5a2:	9304      	str	r3, [sp, #16]
 800e5a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5a8:	4824      	ldr	r0, [pc, #144]	@ (800e63c <_svfiprintf_r+0x1e8>)
 800e5aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5ae:	2206      	movs	r2, #6
 800e5b0:	f7f1 fe26 	bl	8000200 <memchr>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	d036      	beq.n	800e626 <_svfiprintf_r+0x1d2>
 800e5b8:	4b21      	ldr	r3, [pc, #132]	@ (800e640 <_svfiprintf_r+0x1ec>)
 800e5ba:	bb1b      	cbnz	r3, 800e604 <_svfiprintf_r+0x1b0>
 800e5bc:	9b03      	ldr	r3, [sp, #12]
 800e5be:	3307      	adds	r3, #7
 800e5c0:	f023 0307 	bic.w	r3, r3, #7
 800e5c4:	3308      	adds	r3, #8
 800e5c6:	9303      	str	r3, [sp, #12]
 800e5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ca:	4433      	add	r3, r6
 800e5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5ce:	e76a      	b.n	800e4a6 <_svfiprintf_r+0x52>
 800e5d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	2001      	movs	r0, #1
 800e5d8:	e7a8      	b.n	800e52c <_svfiprintf_r+0xd8>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	3401      	adds	r4, #1
 800e5de:	9305      	str	r3, [sp, #20]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	f04f 0c0a 	mov.w	ip, #10
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5ec:	3a30      	subs	r2, #48	@ 0x30
 800e5ee:	2a09      	cmp	r2, #9
 800e5f0:	d903      	bls.n	800e5fa <_svfiprintf_r+0x1a6>
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d0c6      	beq.n	800e584 <_svfiprintf_r+0x130>
 800e5f6:	9105      	str	r1, [sp, #20]
 800e5f8:	e7c4      	b.n	800e584 <_svfiprintf_r+0x130>
 800e5fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5fe:	4604      	mov	r4, r0
 800e600:	2301      	movs	r3, #1
 800e602:	e7f0      	b.n	800e5e6 <_svfiprintf_r+0x192>
 800e604:	ab03      	add	r3, sp, #12
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	462a      	mov	r2, r5
 800e60a:	4b0e      	ldr	r3, [pc, #56]	@ (800e644 <_svfiprintf_r+0x1f0>)
 800e60c:	a904      	add	r1, sp, #16
 800e60e:	4638      	mov	r0, r7
 800e610:	f7fc fc0c 	bl	800ae2c <_printf_float>
 800e614:	1c42      	adds	r2, r0, #1
 800e616:	4606      	mov	r6, r0
 800e618:	d1d6      	bne.n	800e5c8 <_svfiprintf_r+0x174>
 800e61a:	89ab      	ldrh	r3, [r5, #12]
 800e61c:	065b      	lsls	r3, r3, #25
 800e61e:	f53f af2d 	bmi.w	800e47c <_svfiprintf_r+0x28>
 800e622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e624:	e72c      	b.n	800e480 <_svfiprintf_r+0x2c>
 800e626:	ab03      	add	r3, sp, #12
 800e628:	9300      	str	r3, [sp, #0]
 800e62a:	462a      	mov	r2, r5
 800e62c:	4b05      	ldr	r3, [pc, #20]	@ (800e644 <_svfiprintf_r+0x1f0>)
 800e62e:	a904      	add	r1, sp, #16
 800e630:	4638      	mov	r0, r7
 800e632:	f7fc fe93 	bl	800b35c <_printf_i>
 800e636:	e7ed      	b.n	800e614 <_svfiprintf_r+0x1c0>
 800e638:	08011918 	.word	0x08011918
 800e63c:	08011922 	.word	0x08011922
 800e640:	0800ae2d 	.word	0x0800ae2d
 800e644:	0800e39d 	.word	0x0800e39d
 800e648:	0801191e 	.word	0x0801191e

0800e64c <_sungetc_r>:
 800e64c:	b538      	push	{r3, r4, r5, lr}
 800e64e:	1c4b      	adds	r3, r1, #1
 800e650:	4614      	mov	r4, r2
 800e652:	d103      	bne.n	800e65c <_sungetc_r+0x10>
 800e654:	f04f 35ff 	mov.w	r5, #4294967295
 800e658:	4628      	mov	r0, r5
 800e65a:	bd38      	pop	{r3, r4, r5, pc}
 800e65c:	8993      	ldrh	r3, [r2, #12]
 800e65e:	f023 0320 	bic.w	r3, r3, #32
 800e662:	8193      	strh	r3, [r2, #12]
 800e664:	6853      	ldr	r3, [r2, #4]
 800e666:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e668:	b2cd      	uxtb	r5, r1
 800e66a:	b18a      	cbz	r2, 800e690 <_sungetc_r+0x44>
 800e66c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e66e:	429a      	cmp	r2, r3
 800e670:	dd08      	ble.n	800e684 <_sungetc_r+0x38>
 800e672:	6823      	ldr	r3, [r4, #0]
 800e674:	1e5a      	subs	r2, r3, #1
 800e676:	6022      	str	r2, [r4, #0]
 800e678:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e67c:	6863      	ldr	r3, [r4, #4]
 800e67e:	3301      	adds	r3, #1
 800e680:	6063      	str	r3, [r4, #4]
 800e682:	e7e9      	b.n	800e658 <_sungetc_r+0xc>
 800e684:	4621      	mov	r1, r4
 800e686:	f000 fdb8 	bl	800f1fa <__submore>
 800e68a:	2800      	cmp	r0, #0
 800e68c:	d0f1      	beq.n	800e672 <_sungetc_r+0x26>
 800e68e:	e7e1      	b.n	800e654 <_sungetc_r+0x8>
 800e690:	6921      	ldr	r1, [r4, #16]
 800e692:	6822      	ldr	r2, [r4, #0]
 800e694:	b141      	cbz	r1, 800e6a8 <_sungetc_r+0x5c>
 800e696:	4291      	cmp	r1, r2
 800e698:	d206      	bcs.n	800e6a8 <_sungetc_r+0x5c>
 800e69a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e69e:	42a9      	cmp	r1, r5
 800e6a0:	d102      	bne.n	800e6a8 <_sungetc_r+0x5c>
 800e6a2:	3a01      	subs	r2, #1
 800e6a4:	6022      	str	r2, [r4, #0]
 800e6a6:	e7ea      	b.n	800e67e <_sungetc_r+0x32>
 800e6a8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e6ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6b2:	2303      	movs	r3, #3
 800e6b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e6b6:	4623      	mov	r3, r4
 800e6b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e7de      	b.n	800e680 <_sungetc_r+0x34>

0800e6c2 <__ssrefill_r>:
 800e6c2:	b510      	push	{r4, lr}
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e6c8:	b169      	cbz	r1, 800e6e6 <__ssrefill_r+0x24>
 800e6ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6ce:	4299      	cmp	r1, r3
 800e6d0:	d001      	beq.n	800e6d6 <__ssrefill_r+0x14>
 800e6d2:	f7fe faa9 	bl	800cc28 <_free_r>
 800e6d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e6d8:	6063      	str	r3, [r4, #4]
 800e6da:	2000      	movs	r0, #0
 800e6dc:	6360      	str	r0, [r4, #52]	@ 0x34
 800e6de:	b113      	cbz	r3, 800e6e6 <__ssrefill_r+0x24>
 800e6e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e6e2:	6023      	str	r3, [r4, #0]
 800e6e4:	bd10      	pop	{r4, pc}
 800e6e6:	6923      	ldr	r3, [r4, #16]
 800e6e8:	6023      	str	r3, [r4, #0]
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	6063      	str	r3, [r4, #4]
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	f043 0320 	orr.w	r3, r3, #32
 800e6f4:	81a3      	strh	r3, [r4, #12]
 800e6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6fa:	e7f3      	b.n	800e6e4 <__ssrefill_r+0x22>

0800e6fc <__ssvfiscanf_r>:
 800e6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e700:	460c      	mov	r4, r1
 800e702:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e706:	2100      	movs	r1, #0
 800e708:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e70c:	49a5      	ldr	r1, [pc, #660]	@ (800e9a4 <__ssvfiscanf_r+0x2a8>)
 800e70e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e710:	f10d 0804 	add.w	r8, sp, #4
 800e714:	49a4      	ldr	r1, [pc, #656]	@ (800e9a8 <__ssvfiscanf_r+0x2ac>)
 800e716:	4fa5      	ldr	r7, [pc, #660]	@ (800e9ac <__ssvfiscanf_r+0x2b0>)
 800e718:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e71c:	4606      	mov	r6, r0
 800e71e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	7813      	ldrb	r3, [r2, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	f000 8158 	beq.w	800e9da <__ssvfiscanf_r+0x2de>
 800e72a:	5cf9      	ldrb	r1, [r7, r3]
 800e72c:	f011 0108 	ands.w	r1, r1, #8
 800e730:	f102 0501 	add.w	r5, r2, #1
 800e734:	d019      	beq.n	800e76a <__ssvfiscanf_r+0x6e>
 800e736:	6863      	ldr	r3, [r4, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	dd0f      	ble.n	800e75c <__ssvfiscanf_r+0x60>
 800e73c:	6823      	ldr	r3, [r4, #0]
 800e73e:	781a      	ldrb	r2, [r3, #0]
 800e740:	5cba      	ldrb	r2, [r7, r2]
 800e742:	0712      	lsls	r2, r2, #28
 800e744:	d401      	bmi.n	800e74a <__ssvfiscanf_r+0x4e>
 800e746:	462a      	mov	r2, r5
 800e748:	e7eb      	b.n	800e722 <__ssvfiscanf_r+0x26>
 800e74a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e74c:	3201      	adds	r2, #1
 800e74e:	9245      	str	r2, [sp, #276]	@ 0x114
 800e750:	6862      	ldr	r2, [r4, #4]
 800e752:	3301      	adds	r3, #1
 800e754:	3a01      	subs	r2, #1
 800e756:	6062      	str	r2, [r4, #4]
 800e758:	6023      	str	r3, [r4, #0]
 800e75a:	e7ec      	b.n	800e736 <__ssvfiscanf_r+0x3a>
 800e75c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e75e:	4621      	mov	r1, r4
 800e760:	4630      	mov	r0, r6
 800e762:	4798      	blx	r3
 800e764:	2800      	cmp	r0, #0
 800e766:	d0e9      	beq.n	800e73c <__ssvfiscanf_r+0x40>
 800e768:	e7ed      	b.n	800e746 <__ssvfiscanf_r+0x4a>
 800e76a:	2b25      	cmp	r3, #37	@ 0x25
 800e76c:	d012      	beq.n	800e794 <__ssvfiscanf_r+0x98>
 800e76e:	4699      	mov	r9, r3
 800e770:	6863      	ldr	r3, [r4, #4]
 800e772:	2b00      	cmp	r3, #0
 800e774:	f340 8093 	ble.w	800e89e <__ssvfiscanf_r+0x1a2>
 800e778:	6822      	ldr	r2, [r4, #0]
 800e77a:	7813      	ldrb	r3, [r2, #0]
 800e77c:	454b      	cmp	r3, r9
 800e77e:	f040 812c 	bne.w	800e9da <__ssvfiscanf_r+0x2de>
 800e782:	6863      	ldr	r3, [r4, #4]
 800e784:	3b01      	subs	r3, #1
 800e786:	6063      	str	r3, [r4, #4]
 800e788:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e78a:	3201      	adds	r2, #1
 800e78c:	3301      	adds	r3, #1
 800e78e:	6022      	str	r2, [r4, #0]
 800e790:	9345      	str	r3, [sp, #276]	@ 0x114
 800e792:	e7d8      	b.n	800e746 <__ssvfiscanf_r+0x4a>
 800e794:	9141      	str	r1, [sp, #260]	@ 0x104
 800e796:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e798:	7853      	ldrb	r3, [r2, #1]
 800e79a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e79c:	bf02      	ittt	eq
 800e79e:	2310      	moveq	r3, #16
 800e7a0:	1c95      	addeq	r5, r2, #2
 800e7a2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e7a4:	220a      	movs	r2, #10
 800e7a6:	46a9      	mov	r9, r5
 800e7a8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e7ac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e7b0:	2b09      	cmp	r3, #9
 800e7b2:	d91e      	bls.n	800e7f2 <__ssvfiscanf_r+0xf6>
 800e7b4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e9b0 <__ssvfiscanf_r+0x2b4>
 800e7b8:	2203      	movs	r2, #3
 800e7ba:	4650      	mov	r0, sl
 800e7bc:	f7f1 fd20 	bl	8000200 <memchr>
 800e7c0:	b138      	cbz	r0, 800e7d2 <__ssvfiscanf_r+0xd6>
 800e7c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e7c4:	eba0 000a 	sub.w	r0, r0, sl
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	4083      	lsls	r3, r0
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	9341      	str	r3, [sp, #260]	@ 0x104
 800e7d0:	464d      	mov	r5, r9
 800e7d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e7d6:	2b78      	cmp	r3, #120	@ 0x78
 800e7d8:	d806      	bhi.n	800e7e8 <__ssvfiscanf_r+0xec>
 800e7da:	2b57      	cmp	r3, #87	@ 0x57
 800e7dc:	d810      	bhi.n	800e800 <__ssvfiscanf_r+0x104>
 800e7de:	2b25      	cmp	r3, #37	@ 0x25
 800e7e0:	d0c5      	beq.n	800e76e <__ssvfiscanf_r+0x72>
 800e7e2:	d857      	bhi.n	800e894 <__ssvfiscanf_r+0x198>
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d065      	beq.n	800e8b4 <__ssvfiscanf_r+0x1b8>
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e7ec:	230a      	movs	r3, #10
 800e7ee:	9342      	str	r3, [sp, #264]	@ 0x108
 800e7f0:	e078      	b.n	800e8e4 <__ssvfiscanf_r+0x1e8>
 800e7f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e7f4:	fb02 1103 	mla	r1, r2, r3, r1
 800e7f8:	3930      	subs	r1, #48	@ 0x30
 800e7fa:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e7fc:	464d      	mov	r5, r9
 800e7fe:	e7d2      	b.n	800e7a6 <__ssvfiscanf_r+0xaa>
 800e800:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e804:	2a20      	cmp	r2, #32
 800e806:	d8ef      	bhi.n	800e7e8 <__ssvfiscanf_r+0xec>
 800e808:	a101      	add	r1, pc, #4	@ (adr r1, 800e810 <__ssvfiscanf_r+0x114>)
 800e80a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e80e:	bf00      	nop
 800e810:	0800e8c3 	.word	0x0800e8c3
 800e814:	0800e7e9 	.word	0x0800e7e9
 800e818:	0800e7e9 	.word	0x0800e7e9
 800e81c:	0800e91d 	.word	0x0800e91d
 800e820:	0800e7e9 	.word	0x0800e7e9
 800e824:	0800e7e9 	.word	0x0800e7e9
 800e828:	0800e7e9 	.word	0x0800e7e9
 800e82c:	0800e7e9 	.word	0x0800e7e9
 800e830:	0800e7e9 	.word	0x0800e7e9
 800e834:	0800e7e9 	.word	0x0800e7e9
 800e838:	0800e7e9 	.word	0x0800e7e9
 800e83c:	0800e933 	.word	0x0800e933
 800e840:	0800e919 	.word	0x0800e919
 800e844:	0800e89b 	.word	0x0800e89b
 800e848:	0800e89b 	.word	0x0800e89b
 800e84c:	0800e89b 	.word	0x0800e89b
 800e850:	0800e7e9 	.word	0x0800e7e9
 800e854:	0800e8d5 	.word	0x0800e8d5
 800e858:	0800e7e9 	.word	0x0800e7e9
 800e85c:	0800e7e9 	.word	0x0800e7e9
 800e860:	0800e7e9 	.word	0x0800e7e9
 800e864:	0800e7e9 	.word	0x0800e7e9
 800e868:	0800e943 	.word	0x0800e943
 800e86c:	0800e8dd 	.word	0x0800e8dd
 800e870:	0800e8bb 	.word	0x0800e8bb
 800e874:	0800e7e9 	.word	0x0800e7e9
 800e878:	0800e7e9 	.word	0x0800e7e9
 800e87c:	0800e93f 	.word	0x0800e93f
 800e880:	0800e7e9 	.word	0x0800e7e9
 800e884:	0800e919 	.word	0x0800e919
 800e888:	0800e7e9 	.word	0x0800e7e9
 800e88c:	0800e7e9 	.word	0x0800e7e9
 800e890:	0800e8c3 	.word	0x0800e8c3
 800e894:	3b45      	subs	r3, #69	@ 0x45
 800e896:	2b02      	cmp	r3, #2
 800e898:	d8a6      	bhi.n	800e7e8 <__ssvfiscanf_r+0xec>
 800e89a:	2305      	movs	r3, #5
 800e89c:	e021      	b.n	800e8e2 <__ssvfiscanf_r+0x1e6>
 800e89e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	4798      	blx	r3
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	f43f af66 	beq.w	800e778 <__ssvfiscanf_r+0x7c>
 800e8ac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	f040 808b 	bne.w	800e9ca <__ssvfiscanf_r+0x2ce>
 800e8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b8:	e08b      	b.n	800e9d2 <__ssvfiscanf_r+0x2d6>
 800e8ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e8bc:	f042 0220 	orr.w	r2, r2, #32
 800e8c0:	9241      	str	r2, [sp, #260]	@ 0x104
 800e8c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e8c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e8c8:	9241      	str	r2, [sp, #260]	@ 0x104
 800e8ca:	2210      	movs	r2, #16
 800e8cc:	2b6e      	cmp	r3, #110	@ 0x6e
 800e8ce:	9242      	str	r2, [sp, #264]	@ 0x108
 800e8d0:	d902      	bls.n	800e8d8 <__ssvfiscanf_r+0x1dc>
 800e8d2:	e005      	b.n	800e8e0 <__ssvfiscanf_r+0x1e4>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	9342      	str	r3, [sp, #264]	@ 0x108
 800e8d8:	2303      	movs	r3, #3
 800e8da:	e002      	b.n	800e8e2 <__ssvfiscanf_r+0x1e6>
 800e8dc:	2308      	movs	r3, #8
 800e8de:	9342      	str	r3, [sp, #264]	@ 0x108
 800e8e0:	2304      	movs	r3, #4
 800e8e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e8e4:	6863      	ldr	r3, [r4, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	dd39      	ble.n	800e95e <__ssvfiscanf_r+0x262>
 800e8ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e8ec:	0659      	lsls	r1, r3, #25
 800e8ee:	d404      	bmi.n	800e8fa <__ssvfiscanf_r+0x1fe>
 800e8f0:	6823      	ldr	r3, [r4, #0]
 800e8f2:	781a      	ldrb	r2, [r3, #0]
 800e8f4:	5cba      	ldrb	r2, [r7, r2]
 800e8f6:	0712      	lsls	r2, r2, #28
 800e8f8:	d438      	bmi.n	800e96c <__ssvfiscanf_r+0x270>
 800e8fa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e8fc:	2b02      	cmp	r3, #2
 800e8fe:	dc47      	bgt.n	800e990 <__ssvfiscanf_r+0x294>
 800e900:	466b      	mov	r3, sp
 800e902:	4622      	mov	r2, r4
 800e904:	a941      	add	r1, sp, #260	@ 0x104
 800e906:	4630      	mov	r0, r6
 800e908:	f000 f9ae 	bl	800ec68 <_scanf_chars>
 800e90c:	2801      	cmp	r0, #1
 800e90e:	d064      	beq.n	800e9da <__ssvfiscanf_r+0x2de>
 800e910:	2802      	cmp	r0, #2
 800e912:	f47f af18 	bne.w	800e746 <__ssvfiscanf_r+0x4a>
 800e916:	e7c9      	b.n	800e8ac <__ssvfiscanf_r+0x1b0>
 800e918:	220a      	movs	r2, #10
 800e91a:	e7d7      	b.n	800e8cc <__ssvfiscanf_r+0x1d0>
 800e91c:	4629      	mov	r1, r5
 800e91e:	4640      	mov	r0, r8
 800e920:	f000 fc32 	bl	800f188 <__sccl>
 800e924:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e92a:	9341      	str	r3, [sp, #260]	@ 0x104
 800e92c:	4605      	mov	r5, r0
 800e92e:	2301      	movs	r3, #1
 800e930:	e7d7      	b.n	800e8e2 <__ssvfiscanf_r+0x1e6>
 800e932:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e938:	9341      	str	r3, [sp, #260]	@ 0x104
 800e93a:	2300      	movs	r3, #0
 800e93c:	e7d1      	b.n	800e8e2 <__ssvfiscanf_r+0x1e6>
 800e93e:	2302      	movs	r3, #2
 800e940:	e7cf      	b.n	800e8e2 <__ssvfiscanf_r+0x1e6>
 800e942:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e944:	06c3      	lsls	r3, r0, #27
 800e946:	f53f aefe 	bmi.w	800e746 <__ssvfiscanf_r+0x4a>
 800e94a:	9b00      	ldr	r3, [sp, #0]
 800e94c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e94e:	1d19      	adds	r1, r3, #4
 800e950:	9100      	str	r1, [sp, #0]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	07c0      	lsls	r0, r0, #31
 800e956:	bf4c      	ite	mi
 800e958:	801a      	strhmi	r2, [r3, #0]
 800e95a:	601a      	strpl	r2, [r3, #0]
 800e95c:	e6f3      	b.n	800e746 <__ssvfiscanf_r+0x4a>
 800e95e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e960:	4621      	mov	r1, r4
 800e962:	4630      	mov	r0, r6
 800e964:	4798      	blx	r3
 800e966:	2800      	cmp	r0, #0
 800e968:	d0bf      	beq.n	800e8ea <__ssvfiscanf_r+0x1ee>
 800e96a:	e79f      	b.n	800e8ac <__ssvfiscanf_r+0x1b0>
 800e96c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e96e:	3201      	adds	r2, #1
 800e970:	9245      	str	r2, [sp, #276]	@ 0x114
 800e972:	6862      	ldr	r2, [r4, #4]
 800e974:	3a01      	subs	r2, #1
 800e976:	2a00      	cmp	r2, #0
 800e978:	6062      	str	r2, [r4, #4]
 800e97a:	dd02      	ble.n	800e982 <__ssvfiscanf_r+0x286>
 800e97c:	3301      	adds	r3, #1
 800e97e:	6023      	str	r3, [r4, #0]
 800e980:	e7b6      	b.n	800e8f0 <__ssvfiscanf_r+0x1f4>
 800e982:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e984:	4621      	mov	r1, r4
 800e986:	4630      	mov	r0, r6
 800e988:	4798      	blx	r3
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d0b0      	beq.n	800e8f0 <__ssvfiscanf_r+0x1f4>
 800e98e:	e78d      	b.n	800e8ac <__ssvfiscanf_r+0x1b0>
 800e990:	2b04      	cmp	r3, #4
 800e992:	dc0f      	bgt.n	800e9b4 <__ssvfiscanf_r+0x2b8>
 800e994:	466b      	mov	r3, sp
 800e996:	4622      	mov	r2, r4
 800e998:	a941      	add	r1, sp, #260	@ 0x104
 800e99a:	4630      	mov	r0, r6
 800e99c:	f000 f9be 	bl	800ed1c <_scanf_i>
 800e9a0:	e7b4      	b.n	800e90c <__ssvfiscanf_r+0x210>
 800e9a2:	bf00      	nop
 800e9a4:	0800e64d 	.word	0x0800e64d
 800e9a8:	0800e6c3 	.word	0x0800e6c3
 800e9ac:	080115a5 	.word	0x080115a5
 800e9b0:	0801191e 	.word	0x0801191e
 800e9b4:	4b0a      	ldr	r3, [pc, #40]	@ (800e9e0 <__ssvfiscanf_r+0x2e4>)
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f43f aec5 	beq.w	800e746 <__ssvfiscanf_r+0x4a>
 800e9bc:	466b      	mov	r3, sp
 800e9be:	4622      	mov	r2, r4
 800e9c0:	a941      	add	r1, sp, #260	@ 0x104
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	f7fc fdea 	bl	800b59c <_scanf_float>
 800e9c8:	e7a0      	b.n	800e90c <__ssvfiscanf_r+0x210>
 800e9ca:	89a3      	ldrh	r3, [r4, #12]
 800e9cc:	065b      	lsls	r3, r3, #25
 800e9ce:	f53f af71 	bmi.w	800e8b4 <__ssvfiscanf_r+0x1b8>
 800e9d2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9da:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e9dc:	e7f9      	b.n	800e9d2 <__ssvfiscanf_r+0x2d6>
 800e9de:	bf00      	nop
 800e9e0:	0800b59d 	.word	0x0800b59d

0800e9e4 <__sfputc_r>:
 800e9e4:	6893      	ldr	r3, [r2, #8]
 800e9e6:	3b01      	subs	r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	b410      	push	{r4}
 800e9ec:	6093      	str	r3, [r2, #8]
 800e9ee:	da08      	bge.n	800ea02 <__sfputc_r+0x1e>
 800e9f0:	6994      	ldr	r4, [r2, #24]
 800e9f2:	42a3      	cmp	r3, r4
 800e9f4:	db01      	blt.n	800e9fa <__sfputc_r+0x16>
 800e9f6:	290a      	cmp	r1, #10
 800e9f8:	d103      	bne.n	800ea02 <__sfputc_r+0x1e>
 800e9fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9fe:	f7fd b9aa 	b.w	800bd56 <__swbuf_r>
 800ea02:	6813      	ldr	r3, [r2, #0]
 800ea04:	1c58      	adds	r0, r3, #1
 800ea06:	6010      	str	r0, [r2, #0]
 800ea08:	7019      	strb	r1, [r3, #0]
 800ea0a:	4608      	mov	r0, r1
 800ea0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <__sfputs_r>:
 800ea12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea14:	4606      	mov	r6, r0
 800ea16:	460f      	mov	r7, r1
 800ea18:	4614      	mov	r4, r2
 800ea1a:	18d5      	adds	r5, r2, r3
 800ea1c:	42ac      	cmp	r4, r5
 800ea1e:	d101      	bne.n	800ea24 <__sfputs_r+0x12>
 800ea20:	2000      	movs	r0, #0
 800ea22:	e007      	b.n	800ea34 <__sfputs_r+0x22>
 800ea24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea28:	463a      	mov	r2, r7
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	f7ff ffda 	bl	800e9e4 <__sfputc_r>
 800ea30:	1c43      	adds	r3, r0, #1
 800ea32:	d1f3      	bne.n	800ea1c <__sfputs_r+0xa>
 800ea34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea38 <_vfiprintf_r>:
 800ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	460d      	mov	r5, r1
 800ea3e:	b09d      	sub	sp, #116	@ 0x74
 800ea40:	4614      	mov	r4, r2
 800ea42:	4698      	mov	r8, r3
 800ea44:	4606      	mov	r6, r0
 800ea46:	b118      	cbz	r0, 800ea50 <_vfiprintf_r+0x18>
 800ea48:	6a03      	ldr	r3, [r0, #32]
 800ea4a:	b90b      	cbnz	r3, 800ea50 <_vfiprintf_r+0x18>
 800ea4c:	f7fd f846 	bl	800badc <__sinit>
 800ea50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea52:	07d9      	lsls	r1, r3, #31
 800ea54:	d405      	bmi.n	800ea62 <_vfiprintf_r+0x2a>
 800ea56:	89ab      	ldrh	r3, [r5, #12]
 800ea58:	059a      	lsls	r2, r3, #22
 800ea5a:	d402      	bmi.n	800ea62 <_vfiprintf_r+0x2a>
 800ea5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea5e:	f7fd fa8c 	bl	800bf7a <__retarget_lock_acquire_recursive>
 800ea62:	89ab      	ldrh	r3, [r5, #12]
 800ea64:	071b      	lsls	r3, r3, #28
 800ea66:	d501      	bpl.n	800ea6c <_vfiprintf_r+0x34>
 800ea68:	692b      	ldr	r3, [r5, #16]
 800ea6a:	b99b      	cbnz	r3, 800ea94 <_vfiprintf_r+0x5c>
 800ea6c:	4629      	mov	r1, r5
 800ea6e:	4630      	mov	r0, r6
 800ea70:	f7fd f9b0 	bl	800bdd4 <__swsetup_r>
 800ea74:	b170      	cbz	r0, 800ea94 <_vfiprintf_r+0x5c>
 800ea76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea78:	07dc      	lsls	r4, r3, #31
 800ea7a:	d504      	bpl.n	800ea86 <_vfiprintf_r+0x4e>
 800ea7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea80:	b01d      	add	sp, #116	@ 0x74
 800ea82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea86:	89ab      	ldrh	r3, [r5, #12]
 800ea88:	0598      	lsls	r0, r3, #22
 800ea8a:	d4f7      	bmi.n	800ea7c <_vfiprintf_r+0x44>
 800ea8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea8e:	f7fd fa75 	bl	800bf7c <__retarget_lock_release_recursive>
 800ea92:	e7f3      	b.n	800ea7c <_vfiprintf_r+0x44>
 800ea94:	2300      	movs	r3, #0
 800ea96:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea98:	2320      	movs	r3, #32
 800ea9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800eaa2:	2330      	movs	r3, #48	@ 0x30
 800eaa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ec54 <_vfiprintf_r+0x21c>
 800eaa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eaac:	f04f 0901 	mov.w	r9, #1
 800eab0:	4623      	mov	r3, r4
 800eab2:	469a      	mov	sl, r3
 800eab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eab8:	b10a      	cbz	r2, 800eabe <_vfiprintf_r+0x86>
 800eaba:	2a25      	cmp	r2, #37	@ 0x25
 800eabc:	d1f9      	bne.n	800eab2 <_vfiprintf_r+0x7a>
 800eabe:	ebba 0b04 	subs.w	fp, sl, r4
 800eac2:	d00b      	beq.n	800eadc <_vfiprintf_r+0xa4>
 800eac4:	465b      	mov	r3, fp
 800eac6:	4622      	mov	r2, r4
 800eac8:	4629      	mov	r1, r5
 800eaca:	4630      	mov	r0, r6
 800eacc:	f7ff ffa1 	bl	800ea12 <__sfputs_r>
 800ead0:	3001      	adds	r0, #1
 800ead2:	f000 80a7 	beq.w	800ec24 <_vfiprintf_r+0x1ec>
 800ead6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ead8:	445a      	add	r2, fp
 800eada:	9209      	str	r2, [sp, #36]	@ 0x24
 800eadc:	f89a 3000 	ldrb.w	r3, [sl]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f000 809f 	beq.w	800ec24 <_vfiprintf_r+0x1ec>
 800eae6:	2300      	movs	r3, #0
 800eae8:	f04f 32ff 	mov.w	r2, #4294967295
 800eaec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaf0:	f10a 0a01 	add.w	sl, sl, #1
 800eaf4:	9304      	str	r3, [sp, #16]
 800eaf6:	9307      	str	r3, [sp, #28]
 800eaf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eafc:	931a      	str	r3, [sp, #104]	@ 0x68
 800eafe:	4654      	mov	r4, sl
 800eb00:	2205      	movs	r2, #5
 800eb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb06:	4853      	ldr	r0, [pc, #332]	@ (800ec54 <_vfiprintf_r+0x21c>)
 800eb08:	f7f1 fb7a 	bl	8000200 <memchr>
 800eb0c:	9a04      	ldr	r2, [sp, #16]
 800eb0e:	b9d8      	cbnz	r0, 800eb48 <_vfiprintf_r+0x110>
 800eb10:	06d1      	lsls	r1, r2, #27
 800eb12:	bf44      	itt	mi
 800eb14:	2320      	movmi	r3, #32
 800eb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb1a:	0713      	lsls	r3, r2, #28
 800eb1c:	bf44      	itt	mi
 800eb1e:	232b      	movmi	r3, #43	@ 0x2b
 800eb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb24:	f89a 3000 	ldrb.w	r3, [sl]
 800eb28:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb2a:	d015      	beq.n	800eb58 <_vfiprintf_r+0x120>
 800eb2c:	9a07      	ldr	r2, [sp, #28]
 800eb2e:	4654      	mov	r4, sl
 800eb30:	2000      	movs	r0, #0
 800eb32:	f04f 0c0a 	mov.w	ip, #10
 800eb36:	4621      	mov	r1, r4
 800eb38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb3c:	3b30      	subs	r3, #48	@ 0x30
 800eb3e:	2b09      	cmp	r3, #9
 800eb40:	d94b      	bls.n	800ebda <_vfiprintf_r+0x1a2>
 800eb42:	b1b0      	cbz	r0, 800eb72 <_vfiprintf_r+0x13a>
 800eb44:	9207      	str	r2, [sp, #28]
 800eb46:	e014      	b.n	800eb72 <_vfiprintf_r+0x13a>
 800eb48:	eba0 0308 	sub.w	r3, r0, r8
 800eb4c:	fa09 f303 	lsl.w	r3, r9, r3
 800eb50:	4313      	orrs	r3, r2
 800eb52:	9304      	str	r3, [sp, #16]
 800eb54:	46a2      	mov	sl, r4
 800eb56:	e7d2      	b.n	800eafe <_vfiprintf_r+0xc6>
 800eb58:	9b03      	ldr	r3, [sp, #12]
 800eb5a:	1d19      	adds	r1, r3, #4
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	9103      	str	r1, [sp, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	bfbb      	ittet	lt
 800eb64:	425b      	neglt	r3, r3
 800eb66:	f042 0202 	orrlt.w	r2, r2, #2
 800eb6a:	9307      	strge	r3, [sp, #28]
 800eb6c:	9307      	strlt	r3, [sp, #28]
 800eb6e:	bfb8      	it	lt
 800eb70:	9204      	strlt	r2, [sp, #16]
 800eb72:	7823      	ldrb	r3, [r4, #0]
 800eb74:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb76:	d10a      	bne.n	800eb8e <_vfiprintf_r+0x156>
 800eb78:	7863      	ldrb	r3, [r4, #1]
 800eb7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb7c:	d132      	bne.n	800ebe4 <_vfiprintf_r+0x1ac>
 800eb7e:	9b03      	ldr	r3, [sp, #12]
 800eb80:	1d1a      	adds	r2, r3, #4
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	9203      	str	r2, [sp, #12]
 800eb86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb8a:	3402      	adds	r4, #2
 800eb8c:	9305      	str	r3, [sp, #20]
 800eb8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ec64 <_vfiprintf_r+0x22c>
 800eb92:	7821      	ldrb	r1, [r4, #0]
 800eb94:	2203      	movs	r2, #3
 800eb96:	4650      	mov	r0, sl
 800eb98:	f7f1 fb32 	bl	8000200 <memchr>
 800eb9c:	b138      	cbz	r0, 800ebae <_vfiprintf_r+0x176>
 800eb9e:	9b04      	ldr	r3, [sp, #16]
 800eba0:	eba0 000a 	sub.w	r0, r0, sl
 800eba4:	2240      	movs	r2, #64	@ 0x40
 800eba6:	4082      	lsls	r2, r0
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	3401      	adds	r4, #1
 800ebac:	9304      	str	r3, [sp, #16]
 800ebae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebb2:	4829      	ldr	r0, [pc, #164]	@ (800ec58 <_vfiprintf_r+0x220>)
 800ebb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebb8:	2206      	movs	r2, #6
 800ebba:	f7f1 fb21 	bl	8000200 <memchr>
 800ebbe:	2800      	cmp	r0, #0
 800ebc0:	d03f      	beq.n	800ec42 <_vfiprintf_r+0x20a>
 800ebc2:	4b26      	ldr	r3, [pc, #152]	@ (800ec5c <_vfiprintf_r+0x224>)
 800ebc4:	bb1b      	cbnz	r3, 800ec0e <_vfiprintf_r+0x1d6>
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	3307      	adds	r3, #7
 800ebca:	f023 0307 	bic.w	r3, r3, #7
 800ebce:	3308      	adds	r3, #8
 800ebd0:	9303      	str	r3, [sp, #12]
 800ebd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebd4:	443b      	add	r3, r7
 800ebd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebd8:	e76a      	b.n	800eab0 <_vfiprintf_r+0x78>
 800ebda:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebde:	460c      	mov	r4, r1
 800ebe0:	2001      	movs	r0, #1
 800ebe2:	e7a8      	b.n	800eb36 <_vfiprintf_r+0xfe>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	3401      	adds	r4, #1
 800ebe8:	9305      	str	r3, [sp, #20]
 800ebea:	4619      	mov	r1, r3
 800ebec:	f04f 0c0a 	mov.w	ip, #10
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebf6:	3a30      	subs	r2, #48	@ 0x30
 800ebf8:	2a09      	cmp	r2, #9
 800ebfa:	d903      	bls.n	800ec04 <_vfiprintf_r+0x1cc>
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d0c6      	beq.n	800eb8e <_vfiprintf_r+0x156>
 800ec00:	9105      	str	r1, [sp, #20]
 800ec02:	e7c4      	b.n	800eb8e <_vfiprintf_r+0x156>
 800ec04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec08:	4604      	mov	r4, r0
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e7f0      	b.n	800ebf0 <_vfiprintf_r+0x1b8>
 800ec0e:	ab03      	add	r3, sp, #12
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	462a      	mov	r2, r5
 800ec14:	4b12      	ldr	r3, [pc, #72]	@ (800ec60 <_vfiprintf_r+0x228>)
 800ec16:	a904      	add	r1, sp, #16
 800ec18:	4630      	mov	r0, r6
 800ec1a:	f7fc f907 	bl	800ae2c <_printf_float>
 800ec1e:	4607      	mov	r7, r0
 800ec20:	1c78      	adds	r0, r7, #1
 800ec22:	d1d6      	bne.n	800ebd2 <_vfiprintf_r+0x19a>
 800ec24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec26:	07d9      	lsls	r1, r3, #31
 800ec28:	d405      	bmi.n	800ec36 <_vfiprintf_r+0x1fe>
 800ec2a:	89ab      	ldrh	r3, [r5, #12]
 800ec2c:	059a      	lsls	r2, r3, #22
 800ec2e:	d402      	bmi.n	800ec36 <_vfiprintf_r+0x1fe>
 800ec30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec32:	f7fd f9a3 	bl	800bf7c <__retarget_lock_release_recursive>
 800ec36:	89ab      	ldrh	r3, [r5, #12]
 800ec38:	065b      	lsls	r3, r3, #25
 800ec3a:	f53f af1f 	bmi.w	800ea7c <_vfiprintf_r+0x44>
 800ec3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec40:	e71e      	b.n	800ea80 <_vfiprintf_r+0x48>
 800ec42:	ab03      	add	r3, sp, #12
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	462a      	mov	r2, r5
 800ec48:	4b05      	ldr	r3, [pc, #20]	@ (800ec60 <_vfiprintf_r+0x228>)
 800ec4a:	a904      	add	r1, sp, #16
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	f7fc fb85 	bl	800b35c <_printf_i>
 800ec52:	e7e4      	b.n	800ec1e <_vfiprintf_r+0x1e6>
 800ec54:	08011918 	.word	0x08011918
 800ec58:	08011922 	.word	0x08011922
 800ec5c:	0800ae2d 	.word	0x0800ae2d
 800ec60:	0800ea13 	.word	0x0800ea13
 800ec64:	0801191e 	.word	0x0801191e

0800ec68 <_scanf_chars>:
 800ec68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec6c:	4615      	mov	r5, r2
 800ec6e:	688a      	ldr	r2, [r1, #8]
 800ec70:	4680      	mov	r8, r0
 800ec72:	460c      	mov	r4, r1
 800ec74:	b932      	cbnz	r2, 800ec84 <_scanf_chars+0x1c>
 800ec76:	698a      	ldr	r2, [r1, #24]
 800ec78:	2a00      	cmp	r2, #0
 800ec7a:	bf14      	ite	ne
 800ec7c:	f04f 32ff 	movne.w	r2, #4294967295
 800ec80:	2201      	moveq	r2, #1
 800ec82:	608a      	str	r2, [r1, #8]
 800ec84:	6822      	ldr	r2, [r4, #0]
 800ec86:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ed18 <_scanf_chars+0xb0>
 800ec8a:	06d1      	lsls	r1, r2, #27
 800ec8c:	bf5f      	itttt	pl
 800ec8e:	681a      	ldrpl	r2, [r3, #0]
 800ec90:	1d11      	addpl	r1, r2, #4
 800ec92:	6019      	strpl	r1, [r3, #0]
 800ec94:	6816      	ldrpl	r6, [r2, #0]
 800ec96:	2700      	movs	r7, #0
 800ec98:	69a0      	ldr	r0, [r4, #24]
 800ec9a:	b188      	cbz	r0, 800ecc0 <_scanf_chars+0x58>
 800ec9c:	2801      	cmp	r0, #1
 800ec9e:	d107      	bne.n	800ecb0 <_scanf_chars+0x48>
 800eca0:	682b      	ldr	r3, [r5, #0]
 800eca2:	781a      	ldrb	r2, [r3, #0]
 800eca4:	6963      	ldr	r3, [r4, #20]
 800eca6:	5c9b      	ldrb	r3, [r3, r2]
 800eca8:	b953      	cbnz	r3, 800ecc0 <_scanf_chars+0x58>
 800ecaa:	2f00      	cmp	r7, #0
 800ecac:	d031      	beq.n	800ed12 <_scanf_chars+0xaa>
 800ecae:	e022      	b.n	800ecf6 <_scanf_chars+0x8e>
 800ecb0:	2802      	cmp	r0, #2
 800ecb2:	d120      	bne.n	800ecf6 <_scanf_chars+0x8e>
 800ecb4:	682b      	ldr	r3, [r5, #0]
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ecbc:	071b      	lsls	r3, r3, #28
 800ecbe:	d41a      	bmi.n	800ecf6 <_scanf_chars+0x8e>
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	06da      	lsls	r2, r3, #27
 800ecc4:	bf5e      	ittt	pl
 800ecc6:	682b      	ldrpl	r3, [r5, #0]
 800ecc8:	781b      	ldrbpl	r3, [r3, #0]
 800ecca:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ecce:	682a      	ldr	r2, [r5, #0]
 800ecd0:	686b      	ldr	r3, [r5, #4]
 800ecd2:	3201      	adds	r2, #1
 800ecd4:	602a      	str	r2, [r5, #0]
 800ecd6:	68a2      	ldr	r2, [r4, #8]
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	3a01      	subs	r2, #1
 800ecdc:	606b      	str	r3, [r5, #4]
 800ecde:	3701      	adds	r7, #1
 800ece0:	60a2      	str	r2, [r4, #8]
 800ece2:	b142      	cbz	r2, 800ecf6 <_scanf_chars+0x8e>
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	dcd7      	bgt.n	800ec98 <_scanf_chars+0x30>
 800ece8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ecec:	4629      	mov	r1, r5
 800ecee:	4640      	mov	r0, r8
 800ecf0:	4798      	blx	r3
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d0d0      	beq.n	800ec98 <_scanf_chars+0x30>
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	f013 0310 	ands.w	r3, r3, #16
 800ecfc:	d105      	bne.n	800ed0a <_scanf_chars+0xa2>
 800ecfe:	68e2      	ldr	r2, [r4, #12]
 800ed00:	3201      	adds	r2, #1
 800ed02:	60e2      	str	r2, [r4, #12]
 800ed04:	69a2      	ldr	r2, [r4, #24]
 800ed06:	b102      	cbz	r2, 800ed0a <_scanf_chars+0xa2>
 800ed08:	7033      	strb	r3, [r6, #0]
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	443b      	add	r3, r7
 800ed0e:	6123      	str	r3, [r4, #16]
 800ed10:	2000      	movs	r0, #0
 800ed12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed16:	bf00      	nop
 800ed18:	080115a5 	.word	0x080115a5

0800ed1c <_scanf_i>:
 800ed1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed20:	4698      	mov	r8, r3
 800ed22:	4b74      	ldr	r3, [pc, #464]	@ (800eef4 <_scanf_i+0x1d8>)
 800ed24:	460c      	mov	r4, r1
 800ed26:	4682      	mov	sl, r0
 800ed28:	4616      	mov	r6, r2
 800ed2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed2e:	b087      	sub	sp, #28
 800ed30:	ab03      	add	r3, sp, #12
 800ed32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ed36:	4b70      	ldr	r3, [pc, #448]	@ (800eef8 <_scanf_i+0x1dc>)
 800ed38:	69a1      	ldr	r1, [r4, #24]
 800ed3a:	4a70      	ldr	r2, [pc, #448]	@ (800eefc <_scanf_i+0x1e0>)
 800ed3c:	2903      	cmp	r1, #3
 800ed3e:	bf08      	it	eq
 800ed40:	461a      	moveq	r2, r3
 800ed42:	68a3      	ldr	r3, [r4, #8]
 800ed44:	9201      	str	r2, [sp, #4]
 800ed46:	1e5a      	subs	r2, r3, #1
 800ed48:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ed4c:	bf88      	it	hi
 800ed4e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ed52:	4627      	mov	r7, r4
 800ed54:	bf82      	ittt	hi
 800ed56:	eb03 0905 	addhi.w	r9, r3, r5
 800ed5a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ed5e:	60a3      	strhi	r3, [r4, #8]
 800ed60:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ed64:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ed68:	bf98      	it	ls
 800ed6a:	f04f 0900 	movls.w	r9, #0
 800ed6e:	6023      	str	r3, [r4, #0]
 800ed70:	463d      	mov	r5, r7
 800ed72:	f04f 0b00 	mov.w	fp, #0
 800ed76:	6831      	ldr	r1, [r6, #0]
 800ed78:	ab03      	add	r3, sp, #12
 800ed7a:	7809      	ldrb	r1, [r1, #0]
 800ed7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ed80:	2202      	movs	r2, #2
 800ed82:	f7f1 fa3d 	bl	8000200 <memchr>
 800ed86:	b328      	cbz	r0, 800edd4 <_scanf_i+0xb8>
 800ed88:	f1bb 0f01 	cmp.w	fp, #1
 800ed8c:	d159      	bne.n	800ee42 <_scanf_i+0x126>
 800ed8e:	6862      	ldr	r2, [r4, #4]
 800ed90:	b92a      	cbnz	r2, 800ed9e <_scanf_i+0x82>
 800ed92:	6822      	ldr	r2, [r4, #0]
 800ed94:	2108      	movs	r1, #8
 800ed96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ed9a:	6061      	str	r1, [r4, #4]
 800ed9c:	6022      	str	r2, [r4, #0]
 800ed9e:	6822      	ldr	r2, [r4, #0]
 800eda0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800eda4:	6022      	str	r2, [r4, #0]
 800eda6:	68a2      	ldr	r2, [r4, #8]
 800eda8:	1e51      	subs	r1, r2, #1
 800edaa:	60a1      	str	r1, [r4, #8]
 800edac:	b192      	cbz	r2, 800edd4 <_scanf_i+0xb8>
 800edae:	6832      	ldr	r2, [r6, #0]
 800edb0:	1c51      	adds	r1, r2, #1
 800edb2:	6031      	str	r1, [r6, #0]
 800edb4:	7812      	ldrb	r2, [r2, #0]
 800edb6:	f805 2b01 	strb.w	r2, [r5], #1
 800edba:	6872      	ldr	r2, [r6, #4]
 800edbc:	3a01      	subs	r2, #1
 800edbe:	2a00      	cmp	r2, #0
 800edc0:	6072      	str	r2, [r6, #4]
 800edc2:	dc07      	bgt.n	800edd4 <_scanf_i+0xb8>
 800edc4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800edc8:	4631      	mov	r1, r6
 800edca:	4650      	mov	r0, sl
 800edcc:	4790      	blx	r2
 800edce:	2800      	cmp	r0, #0
 800edd0:	f040 8085 	bne.w	800eede <_scanf_i+0x1c2>
 800edd4:	f10b 0b01 	add.w	fp, fp, #1
 800edd8:	f1bb 0f03 	cmp.w	fp, #3
 800eddc:	d1cb      	bne.n	800ed76 <_scanf_i+0x5a>
 800edde:	6863      	ldr	r3, [r4, #4]
 800ede0:	b90b      	cbnz	r3, 800ede6 <_scanf_i+0xca>
 800ede2:	230a      	movs	r3, #10
 800ede4:	6063      	str	r3, [r4, #4]
 800ede6:	6863      	ldr	r3, [r4, #4]
 800ede8:	4945      	ldr	r1, [pc, #276]	@ (800ef00 <_scanf_i+0x1e4>)
 800edea:	6960      	ldr	r0, [r4, #20]
 800edec:	1ac9      	subs	r1, r1, r3
 800edee:	f000 f9cb 	bl	800f188 <__sccl>
 800edf2:	f04f 0b00 	mov.w	fp, #0
 800edf6:	68a3      	ldr	r3, [r4, #8]
 800edf8:	6822      	ldr	r2, [r4, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d03d      	beq.n	800ee7a <_scanf_i+0x15e>
 800edfe:	6831      	ldr	r1, [r6, #0]
 800ee00:	6960      	ldr	r0, [r4, #20]
 800ee02:	f891 c000 	ldrb.w	ip, [r1]
 800ee06:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d035      	beq.n	800ee7a <_scanf_i+0x15e>
 800ee0e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ee12:	d124      	bne.n	800ee5e <_scanf_i+0x142>
 800ee14:	0510      	lsls	r0, r2, #20
 800ee16:	d522      	bpl.n	800ee5e <_scanf_i+0x142>
 800ee18:	f10b 0b01 	add.w	fp, fp, #1
 800ee1c:	f1b9 0f00 	cmp.w	r9, #0
 800ee20:	d003      	beq.n	800ee2a <_scanf_i+0x10e>
 800ee22:	3301      	adds	r3, #1
 800ee24:	f109 39ff 	add.w	r9, r9, #4294967295
 800ee28:	60a3      	str	r3, [r4, #8]
 800ee2a:	6873      	ldr	r3, [r6, #4]
 800ee2c:	3b01      	subs	r3, #1
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	6073      	str	r3, [r6, #4]
 800ee32:	dd1b      	ble.n	800ee6c <_scanf_i+0x150>
 800ee34:	6833      	ldr	r3, [r6, #0]
 800ee36:	3301      	adds	r3, #1
 800ee38:	6033      	str	r3, [r6, #0]
 800ee3a:	68a3      	ldr	r3, [r4, #8]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	60a3      	str	r3, [r4, #8]
 800ee40:	e7d9      	b.n	800edf6 <_scanf_i+0xda>
 800ee42:	f1bb 0f02 	cmp.w	fp, #2
 800ee46:	d1ae      	bne.n	800eda6 <_scanf_i+0x8a>
 800ee48:	6822      	ldr	r2, [r4, #0]
 800ee4a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ee4e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ee52:	d1bf      	bne.n	800edd4 <_scanf_i+0xb8>
 800ee54:	2110      	movs	r1, #16
 800ee56:	6061      	str	r1, [r4, #4]
 800ee58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ee5c:	e7a2      	b.n	800eda4 <_scanf_i+0x88>
 800ee5e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ee62:	6022      	str	r2, [r4, #0]
 800ee64:	780b      	ldrb	r3, [r1, #0]
 800ee66:	f805 3b01 	strb.w	r3, [r5], #1
 800ee6a:	e7de      	b.n	800ee2a <_scanf_i+0x10e>
 800ee6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ee70:	4631      	mov	r1, r6
 800ee72:	4650      	mov	r0, sl
 800ee74:	4798      	blx	r3
 800ee76:	2800      	cmp	r0, #0
 800ee78:	d0df      	beq.n	800ee3a <_scanf_i+0x11e>
 800ee7a:	6823      	ldr	r3, [r4, #0]
 800ee7c:	05d9      	lsls	r1, r3, #23
 800ee7e:	d50d      	bpl.n	800ee9c <_scanf_i+0x180>
 800ee80:	42bd      	cmp	r5, r7
 800ee82:	d909      	bls.n	800ee98 <_scanf_i+0x17c>
 800ee84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ee88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	4650      	mov	r0, sl
 800ee90:	4798      	blx	r3
 800ee92:	f105 39ff 	add.w	r9, r5, #4294967295
 800ee96:	464d      	mov	r5, r9
 800ee98:	42bd      	cmp	r5, r7
 800ee9a:	d028      	beq.n	800eeee <_scanf_i+0x1d2>
 800ee9c:	6822      	ldr	r2, [r4, #0]
 800ee9e:	f012 0210 	ands.w	r2, r2, #16
 800eea2:	d113      	bne.n	800eecc <_scanf_i+0x1b0>
 800eea4:	702a      	strb	r2, [r5, #0]
 800eea6:	6863      	ldr	r3, [r4, #4]
 800eea8:	9e01      	ldr	r6, [sp, #4]
 800eeaa:	4639      	mov	r1, r7
 800eeac:	4650      	mov	r0, sl
 800eeae:	47b0      	blx	r6
 800eeb0:	f8d8 3000 	ldr.w	r3, [r8]
 800eeb4:	6821      	ldr	r1, [r4, #0]
 800eeb6:	1d1a      	adds	r2, r3, #4
 800eeb8:	f8c8 2000 	str.w	r2, [r8]
 800eebc:	f011 0f20 	tst.w	r1, #32
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	d00f      	beq.n	800eee4 <_scanf_i+0x1c8>
 800eec4:	6018      	str	r0, [r3, #0]
 800eec6:	68e3      	ldr	r3, [r4, #12]
 800eec8:	3301      	adds	r3, #1
 800eeca:	60e3      	str	r3, [r4, #12]
 800eecc:	6923      	ldr	r3, [r4, #16]
 800eece:	1bed      	subs	r5, r5, r7
 800eed0:	445d      	add	r5, fp
 800eed2:	442b      	add	r3, r5
 800eed4:	6123      	str	r3, [r4, #16]
 800eed6:	2000      	movs	r0, #0
 800eed8:	b007      	add	sp, #28
 800eeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eede:	f04f 0b00 	mov.w	fp, #0
 800eee2:	e7ca      	b.n	800ee7a <_scanf_i+0x15e>
 800eee4:	07ca      	lsls	r2, r1, #31
 800eee6:	bf4c      	ite	mi
 800eee8:	8018      	strhmi	r0, [r3, #0]
 800eeea:	6018      	strpl	r0, [r3, #0]
 800eeec:	e7eb      	b.n	800eec6 <_scanf_i+0x1aa>
 800eeee:	2001      	movs	r0, #1
 800eef0:	e7f2      	b.n	800eed8 <_scanf_i+0x1bc>
 800eef2:	bf00      	nop
 800eef4:	08011088 	.word	0x08011088
 800eef8:	0800acd5 	.word	0x0800acd5
 800eefc:	0800fb8d 	.word	0x0800fb8d
 800ef00:	08011939 	.word	0x08011939

0800ef04 <__sflush_r>:
 800ef04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef0c:	0716      	lsls	r6, r2, #28
 800ef0e:	4605      	mov	r5, r0
 800ef10:	460c      	mov	r4, r1
 800ef12:	d454      	bmi.n	800efbe <__sflush_r+0xba>
 800ef14:	684b      	ldr	r3, [r1, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	dc02      	bgt.n	800ef20 <__sflush_r+0x1c>
 800ef1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	dd48      	ble.n	800efb2 <__sflush_r+0xae>
 800ef20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef22:	2e00      	cmp	r6, #0
 800ef24:	d045      	beq.n	800efb2 <__sflush_r+0xae>
 800ef26:	2300      	movs	r3, #0
 800ef28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef2c:	682f      	ldr	r7, [r5, #0]
 800ef2e:	6a21      	ldr	r1, [r4, #32]
 800ef30:	602b      	str	r3, [r5, #0]
 800ef32:	d030      	beq.n	800ef96 <__sflush_r+0x92>
 800ef34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef36:	89a3      	ldrh	r3, [r4, #12]
 800ef38:	0759      	lsls	r1, r3, #29
 800ef3a:	d505      	bpl.n	800ef48 <__sflush_r+0x44>
 800ef3c:	6863      	ldr	r3, [r4, #4]
 800ef3e:	1ad2      	subs	r2, r2, r3
 800ef40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef42:	b10b      	cbz	r3, 800ef48 <__sflush_r+0x44>
 800ef44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef46:	1ad2      	subs	r2, r2, r3
 800ef48:	2300      	movs	r3, #0
 800ef4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef4c:	6a21      	ldr	r1, [r4, #32]
 800ef4e:	4628      	mov	r0, r5
 800ef50:	47b0      	blx	r6
 800ef52:	1c43      	adds	r3, r0, #1
 800ef54:	89a3      	ldrh	r3, [r4, #12]
 800ef56:	d106      	bne.n	800ef66 <__sflush_r+0x62>
 800ef58:	6829      	ldr	r1, [r5, #0]
 800ef5a:	291d      	cmp	r1, #29
 800ef5c:	d82b      	bhi.n	800efb6 <__sflush_r+0xb2>
 800ef5e:	4a2a      	ldr	r2, [pc, #168]	@ (800f008 <__sflush_r+0x104>)
 800ef60:	410a      	asrs	r2, r1
 800ef62:	07d6      	lsls	r6, r2, #31
 800ef64:	d427      	bmi.n	800efb6 <__sflush_r+0xb2>
 800ef66:	2200      	movs	r2, #0
 800ef68:	6062      	str	r2, [r4, #4]
 800ef6a:	04d9      	lsls	r1, r3, #19
 800ef6c:	6922      	ldr	r2, [r4, #16]
 800ef6e:	6022      	str	r2, [r4, #0]
 800ef70:	d504      	bpl.n	800ef7c <__sflush_r+0x78>
 800ef72:	1c42      	adds	r2, r0, #1
 800ef74:	d101      	bne.n	800ef7a <__sflush_r+0x76>
 800ef76:	682b      	ldr	r3, [r5, #0]
 800ef78:	b903      	cbnz	r3, 800ef7c <__sflush_r+0x78>
 800ef7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef7e:	602f      	str	r7, [r5, #0]
 800ef80:	b1b9      	cbz	r1, 800efb2 <__sflush_r+0xae>
 800ef82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef86:	4299      	cmp	r1, r3
 800ef88:	d002      	beq.n	800ef90 <__sflush_r+0x8c>
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	f7fd fe4c 	bl	800cc28 <_free_r>
 800ef90:	2300      	movs	r3, #0
 800ef92:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef94:	e00d      	b.n	800efb2 <__sflush_r+0xae>
 800ef96:	2301      	movs	r3, #1
 800ef98:	4628      	mov	r0, r5
 800ef9a:	47b0      	blx	r6
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	1c50      	adds	r0, r2, #1
 800efa0:	d1c9      	bne.n	800ef36 <__sflush_r+0x32>
 800efa2:	682b      	ldr	r3, [r5, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d0c6      	beq.n	800ef36 <__sflush_r+0x32>
 800efa8:	2b1d      	cmp	r3, #29
 800efaa:	d001      	beq.n	800efb0 <__sflush_r+0xac>
 800efac:	2b16      	cmp	r3, #22
 800efae:	d11e      	bne.n	800efee <__sflush_r+0xea>
 800efb0:	602f      	str	r7, [r5, #0]
 800efb2:	2000      	movs	r0, #0
 800efb4:	e022      	b.n	800effc <__sflush_r+0xf8>
 800efb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efba:	b21b      	sxth	r3, r3
 800efbc:	e01b      	b.n	800eff6 <__sflush_r+0xf2>
 800efbe:	690f      	ldr	r7, [r1, #16]
 800efc0:	2f00      	cmp	r7, #0
 800efc2:	d0f6      	beq.n	800efb2 <__sflush_r+0xae>
 800efc4:	0793      	lsls	r3, r2, #30
 800efc6:	680e      	ldr	r6, [r1, #0]
 800efc8:	bf08      	it	eq
 800efca:	694b      	ldreq	r3, [r1, #20]
 800efcc:	600f      	str	r7, [r1, #0]
 800efce:	bf18      	it	ne
 800efd0:	2300      	movne	r3, #0
 800efd2:	eba6 0807 	sub.w	r8, r6, r7
 800efd6:	608b      	str	r3, [r1, #8]
 800efd8:	f1b8 0f00 	cmp.w	r8, #0
 800efdc:	dde9      	ble.n	800efb2 <__sflush_r+0xae>
 800efde:	6a21      	ldr	r1, [r4, #32]
 800efe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800efe2:	4643      	mov	r3, r8
 800efe4:	463a      	mov	r2, r7
 800efe6:	4628      	mov	r0, r5
 800efe8:	47b0      	blx	r6
 800efea:	2800      	cmp	r0, #0
 800efec:	dc08      	bgt.n	800f000 <__sflush_r+0xfc>
 800efee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eff6:	81a3      	strh	r3, [r4, #12]
 800eff8:	f04f 30ff 	mov.w	r0, #4294967295
 800effc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f000:	4407      	add	r7, r0
 800f002:	eba8 0800 	sub.w	r8, r8, r0
 800f006:	e7e7      	b.n	800efd8 <__sflush_r+0xd4>
 800f008:	dfbffffe 	.word	0xdfbffffe

0800f00c <_fflush_r>:
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	690b      	ldr	r3, [r1, #16]
 800f010:	4605      	mov	r5, r0
 800f012:	460c      	mov	r4, r1
 800f014:	b913      	cbnz	r3, 800f01c <_fflush_r+0x10>
 800f016:	2500      	movs	r5, #0
 800f018:	4628      	mov	r0, r5
 800f01a:	bd38      	pop	{r3, r4, r5, pc}
 800f01c:	b118      	cbz	r0, 800f026 <_fflush_r+0x1a>
 800f01e:	6a03      	ldr	r3, [r0, #32]
 800f020:	b90b      	cbnz	r3, 800f026 <_fflush_r+0x1a>
 800f022:	f7fc fd5b 	bl	800badc <__sinit>
 800f026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d0f3      	beq.n	800f016 <_fflush_r+0xa>
 800f02e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f030:	07d0      	lsls	r0, r2, #31
 800f032:	d404      	bmi.n	800f03e <_fflush_r+0x32>
 800f034:	0599      	lsls	r1, r3, #22
 800f036:	d402      	bmi.n	800f03e <_fflush_r+0x32>
 800f038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f03a:	f7fc ff9e 	bl	800bf7a <__retarget_lock_acquire_recursive>
 800f03e:	4628      	mov	r0, r5
 800f040:	4621      	mov	r1, r4
 800f042:	f7ff ff5f 	bl	800ef04 <__sflush_r>
 800f046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f048:	07da      	lsls	r2, r3, #31
 800f04a:	4605      	mov	r5, r0
 800f04c:	d4e4      	bmi.n	800f018 <_fflush_r+0xc>
 800f04e:	89a3      	ldrh	r3, [r4, #12]
 800f050:	059b      	lsls	r3, r3, #22
 800f052:	d4e1      	bmi.n	800f018 <_fflush_r+0xc>
 800f054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f056:	f7fc ff91 	bl	800bf7c <__retarget_lock_release_recursive>
 800f05a:	e7dd      	b.n	800f018 <_fflush_r+0xc>

0800f05c <__swhatbuf_r>:
 800f05c:	b570      	push	{r4, r5, r6, lr}
 800f05e:	460c      	mov	r4, r1
 800f060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f064:	2900      	cmp	r1, #0
 800f066:	b096      	sub	sp, #88	@ 0x58
 800f068:	4615      	mov	r5, r2
 800f06a:	461e      	mov	r6, r3
 800f06c:	da0d      	bge.n	800f08a <__swhatbuf_r+0x2e>
 800f06e:	89a3      	ldrh	r3, [r4, #12]
 800f070:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f074:	f04f 0100 	mov.w	r1, #0
 800f078:	bf14      	ite	ne
 800f07a:	2340      	movne	r3, #64	@ 0x40
 800f07c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f080:	2000      	movs	r0, #0
 800f082:	6031      	str	r1, [r6, #0]
 800f084:	602b      	str	r3, [r5, #0]
 800f086:	b016      	add	sp, #88	@ 0x58
 800f088:	bd70      	pop	{r4, r5, r6, pc}
 800f08a:	466a      	mov	r2, sp
 800f08c:	f000 f91c 	bl	800f2c8 <_fstat_r>
 800f090:	2800      	cmp	r0, #0
 800f092:	dbec      	blt.n	800f06e <__swhatbuf_r+0x12>
 800f094:	9901      	ldr	r1, [sp, #4]
 800f096:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f09a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f09e:	4259      	negs	r1, r3
 800f0a0:	4159      	adcs	r1, r3
 800f0a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0a6:	e7eb      	b.n	800f080 <__swhatbuf_r+0x24>

0800f0a8 <__smakebuf_r>:
 800f0a8:	898b      	ldrh	r3, [r1, #12]
 800f0aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0ac:	079d      	lsls	r5, r3, #30
 800f0ae:	4606      	mov	r6, r0
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	d507      	bpl.n	800f0c4 <__smakebuf_r+0x1c>
 800f0b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	6123      	str	r3, [r4, #16]
 800f0bc:	2301      	movs	r3, #1
 800f0be:	6163      	str	r3, [r4, #20]
 800f0c0:	b003      	add	sp, #12
 800f0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0c4:	ab01      	add	r3, sp, #4
 800f0c6:	466a      	mov	r2, sp
 800f0c8:	f7ff ffc8 	bl	800f05c <__swhatbuf_r>
 800f0cc:	9f00      	ldr	r7, [sp, #0]
 800f0ce:	4605      	mov	r5, r0
 800f0d0:	4639      	mov	r1, r7
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	f7fd fe1c 	bl	800cd10 <_malloc_r>
 800f0d8:	b948      	cbnz	r0, 800f0ee <__smakebuf_r+0x46>
 800f0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0de:	059a      	lsls	r2, r3, #22
 800f0e0:	d4ee      	bmi.n	800f0c0 <__smakebuf_r+0x18>
 800f0e2:	f023 0303 	bic.w	r3, r3, #3
 800f0e6:	f043 0302 	orr.w	r3, r3, #2
 800f0ea:	81a3      	strh	r3, [r4, #12]
 800f0ec:	e7e2      	b.n	800f0b4 <__smakebuf_r+0xc>
 800f0ee:	89a3      	ldrh	r3, [r4, #12]
 800f0f0:	6020      	str	r0, [r4, #0]
 800f0f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0f6:	81a3      	strh	r3, [r4, #12]
 800f0f8:	9b01      	ldr	r3, [sp, #4]
 800f0fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0fe:	b15b      	cbz	r3, 800f118 <__smakebuf_r+0x70>
 800f100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f104:	4630      	mov	r0, r6
 800f106:	f000 f8f1 	bl	800f2ec <_isatty_r>
 800f10a:	b128      	cbz	r0, 800f118 <__smakebuf_r+0x70>
 800f10c:	89a3      	ldrh	r3, [r4, #12]
 800f10e:	f023 0303 	bic.w	r3, r3, #3
 800f112:	f043 0301 	orr.w	r3, r3, #1
 800f116:	81a3      	strh	r3, [r4, #12]
 800f118:	89a3      	ldrh	r3, [r4, #12]
 800f11a:	431d      	orrs	r5, r3
 800f11c:	81a5      	strh	r5, [r4, #12]
 800f11e:	e7cf      	b.n	800f0c0 <__smakebuf_r+0x18>

0800f120 <_putc_r>:
 800f120:	b570      	push	{r4, r5, r6, lr}
 800f122:	460d      	mov	r5, r1
 800f124:	4614      	mov	r4, r2
 800f126:	4606      	mov	r6, r0
 800f128:	b118      	cbz	r0, 800f132 <_putc_r+0x12>
 800f12a:	6a03      	ldr	r3, [r0, #32]
 800f12c:	b90b      	cbnz	r3, 800f132 <_putc_r+0x12>
 800f12e:	f7fc fcd5 	bl	800badc <__sinit>
 800f132:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f134:	07d8      	lsls	r0, r3, #31
 800f136:	d405      	bmi.n	800f144 <_putc_r+0x24>
 800f138:	89a3      	ldrh	r3, [r4, #12]
 800f13a:	0599      	lsls	r1, r3, #22
 800f13c:	d402      	bmi.n	800f144 <_putc_r+0x24>
 800f13e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f140:	f7fc ff1b 	bl	800bf7a <__retarget_lock_acquire_recursive>
 800f144:	68a3      	ldr	r3, [r4, #8]
 800f146:	3b01      	subs	r3, #1
 800f148:	2b00      	cmp	r3, #0
 800f14a:	60a3      	str	r3, [r4, #8]
 800f14c:	da05      	bge.n	800f15a <_putc_r+0x3a>
 800f14e:	69a2      	ldr	r2, [r4, #24]
 800f150:	4293      	cmp	r3, r2
 800f152:	db12      	blt.n	800f17a <_putc_r+0x5a>
 800f154:	b2eb      	uxtb	r3, r5
 800f156:	2b0a      	cmp	r3, #10
 800f158:	d00f      	beq.n	800f17a <_putc_r+0x5a>
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	1c5a      	adds	r2, r3, #1
 800f15e:	6022      	str	r2, [r4, #0]
 800f160:	701d      	strb	r5, [r3, #0]
 800f162:	b2ed      	uxtb	r5, r5
 800f164:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f166:	07da      	lsls	r2, r3, #31
 800f168:	d405      	bmi.n	800f176 <_putc_r+0x56>
 800f16a:	89a3      	ldrh	r3, [r4, #12]
 800f16c:	059b      	lsls	r3, r3, #22
 800f16e:	d402      	bmi.n	800f176 <_putc_r+0x56>
 800f170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f172:	f7fc ff03 	bl	800bf7c <__retarget_lock_release_recursive>
 800f176:	4628      	mov	r0, r5
 800f178:	bd70      	pop	{r4, r5, r6, pc}
 800f17a:	4629      	mov	r1, r5
 800f17c:	4622      	mov	r2, r4
 800f17e:	4630      	mov	r0, r6
 800f180:	f7fc fde9 	bl	800bd56 <__swbuf_r>
 800f184:	4605      	mov	r5, r0
 800f186:	e7ed      	b.n	800f164 <_putc_r+0x44>

0800f188 <__sccl>:
 800f188:	b570      	push	{r4, r5, r6, lr}
 800f18a:	780b      	ldrb	r3, [r1, #0]
 800f18c:	4604      	mov	r4, r0
 800f18e:	2b5e      	cmp	r3, #94	@ 0x5e
 800f190:	bf0b      	itete	eq
 800f192:	784b      	ldrbeq	r3, [r1, #1]
 800f194:	1c4a      	addne	r2, r1, #1
 800f196:	1c8a      	addeq	r2, r1, #2
 800f198:	2100      	movne	r1, #0
 800f19a:	bf08      	it	eq
 800f19c:	2101      	moveq	r1, #1
 800f19e:	3801      	subs	r0, #1
 800f1a0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f1a4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f1a8:	42a8      	cmp	r0, r5
 800f1aa:	d1fb      	bne.n	800f1a4 <__sccl+0x1c>
 800f1ac:	b90b      	cbnz	r3, 800f1b2 <__sccl+0x2a>
 800f1ae:	1e50      	subs	r0, r2, #1
 800f1b0:	bd70      	pop	{r4, r5, r6, pc}
 800f1b2:	f081 0101 	eor.w	r1, r1, #1
 800f1b6:	54e1      	strb	r1, [r4, r3]
 800f1b8:	4610      	mov	r0, r2
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f1c0:	2d2d      	cmp	r5, #45	@ 0x2d
 800f1c2:	d005      	beq.n	800f1d0 <__sccl+0x48>
 800f1c4:	2d5d      	cmp	r5, #93	@ 0x5d
 800f1c6:	d016      	beq.n	800f1f6 <__sccl+0x6e>
 800f1c8:	2d00      	cmp	r5, #0
 800f1ca:	d0f1      	beq.n	800f1b0 <__sccl+0x28>
 800f1cc:	462b      	mov	r3, r5
 800f1ce:	e7f2      	b.n	800f1b6 <__sccl+0x2e>
 800f1d0:	7846      	ldrb	r6, [r0, #1]
 800f1d2:	2e5d      	cmp	r6, #93	@ 0x5d
 800f1d4:	d0fa      	beq.n	800f1cc <__sccl+0x44>
 800f1d6:	42b3      	cmp	r3, r6
 800f1d8:	dcf8      	bgt.n	800f1cc <__sccl+0x44>
 800f1da:	3002      	adds	r0, #2
 800f1dc:	461a      	mov	r2, r3
 800f1de:	3201      	adds	r2, #1
 800f1e0:	4296      	cmp	r6, r2
 800f1e2:	54a1      	strb	r1, [r4, r2]
 800f1e4:	dcfb      	bgt.n	800f1de <__sccl+0x56>
 800f1e6:	1af2      	subs	r2, r6, r3
 800f1e8:	3a01      	subs	r2, #1
 800f1ea:	1c5d      	adds	r5, r3, #1
 800f1ec:	42b3      	cmp	r3, r6
 800f1ee:	bfa8      	it	ge
 800f1f0:	2200      	movge	r2, #0
 800f1f2:	18ab      	adds	r3, r5, r2
 800f1f4:	e7e1      	b.n	800f1ba <__sccl+0x32>
 800f1f6:	4610      	mov	r0, r2
 800f1f8:	e7da      	b.n	800f1b0 <__sccl+0x28>

0800f1fa <__submore>:
 800f1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1fe:	460c      	mov	r4, r1
 800f200:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f206:	4299      	cmp	r1, r3
 800f208:	d11d      	bne.n	800f246 <__submore+0x4c>
 800f20a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f20e:	f7fd fd7f 	bl	800cd10 <_malloc_r>
 800f212:	b918      	cbnz	r0, 800f21c <__submore+0x22>
 800f214:	f04f 30ff 	mov.w	r0, #4294967295
 800f218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f21c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f220:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f222:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f226:	6360      	str	r0, [r4, #52]	@ 0x34
 800f228:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f22c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f230:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f234:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f238:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f23c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f240:	6020      	str	r0, [r4, #0]
 800f242:	2000      	movs	r0, #0
 800f244:	e7e8      	b.n	800f218 <__submore+0x1e>
 800f246:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f248:	0077      	lsls	r7, r6, #1
 800f24a:	463a      	mov	r2, r7
 800f24c:	f000 fc01 	bl	800fa52 <_realloc_r>
 800f250:	4605      	mov	r5, r0
 800f252:	2800      	cmp	r0, #0
 800f254:	d0de      	beq.n	800f214 <__submore+0x1a>
 800f256:	eb00 0806 	add.w	r8, r0, r6
 800f25a:	4601      	mov	r1, r0
 800f25c:	4632      	mov	r2, r6
 800f25e:	4640      	mov	r0, r8
 800f260:	f000 f864 	bl	800f32c <memcpy>
 800f264:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f268:	f8c4 8000 	str.w	r8, [r4]
 800f26c:	e7e9      	b.n	800f242 <__submore+0x48>

0800f26e <memmove>:
 800f26e:	4288      	cmp	r0, r1
 800f270:	b510      	push	{r4, lr}
 800f272:	eb01 0402 	add.w	r4, r1, r2
 800f276:	d902      	bls.n	800f27e <memmove+0x10>
 800f278:	4284      	cmp	r4, r0
 800f27a:	4623      	mov	r3, r4
 800f27c:	d807      	bhi.n	800f28e <memmove+0x20>
 800f27e:	1e43      	subs	r3, r0, #1
 800f280:	42a1      	cmp	r1, r4
 800f282:	d008      	beq.n	800f296 <memmove+0x28>
 800f284:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f288:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f28c:	e7f8      	b.n	800f280 <memmove+0x12>
 800f28e:	4402      	add	r2, r0
 800f290:	4601      	mov	r1, r0
 800f292:	428a      	cmp	r2, r1
 800f294:	d100      	bne.n	800f298 <memmove+0x2a>
 800f296:	bd10      	pop	{r4, pc}
 800f298:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f29c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2a0:	e7f7      	b.n	800f292 <memmove+0x24>

0800f2a2 <strncmp>:
 800f2a2:	b510      	push	{r4, lr}
 800f2a4:	b16a      	cbz	r2, 800f2c2 <strncmp+0x20>
 800f2a6:	3901      	subs	r1, #1
 800f2a8:	1884      	adds	r4, r0, r2
 800f2aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d103      	bne.n	800f2be <strncmp+0x1c>
 800f2b6:	42a0      	cmp	r0, r4
 800f2b8:	d001      	beq.n	800f2be <strncmp+0x1c>
 800f2ba:	2a00      	cmp	r2, #0
 800f2bc:	d1f5      	bne.n	800f2aa <strncmp+0x8>
 800f2be:	1ad0      	subs	r0, r2, r3
 800f2c0:	bd10      	pop	{r4, pc}
 800f2c2:	4610      	mov	r0, r2
 800f2c4:	e7fc      	b.n	800f2c0 <strncmp+0x1e>
	...

0800f2c8 <_fstat_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	4d07      	ldr	r5, [pc, #28]	@ (800f2e8 <_fstat_r+0x20>)
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	4608      	mov	r0, r1
 800f2d2:	4611      	mov	r1, r2
 800f2d4:	602b      	str	r3, [r5, #0]
 800f2d6:	f7f5 fb05 	bl	80048e4 <_fstat>
 800f2da:	1c43      	adds	r3, r0, #1
 800f2dc:	d102      	bne.n	800f2e4 <_fstat_r+0x1c>
 800f2de:	682b      	ldr	r3, [r5, #0]
 800f2e0:	b103      	cbz	r3, 800f2e4 <_fstat_r+0x1c>
 800f2e2:	6023      	str	r3, [r4, #0]
 800f2e4:	bd38      	pop	{r3, r4, r5, pc}
 800f2e6:	bf00      	nop
 800f2e8:	20000ed0 	.word	0x20000ed0

0800f2ec <_isatty_r>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4d06      	ldr	r5, [pc, #24]	@ (800f308 <_isatty_r+0x1c>)
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	4608      	mov	r0, r1
 800f2f6:	602b      	str	r3, [r5, #0]
 800f2f8:	f7f5 fb04 	bl	8004904 <_isatty>
 800f2fc:	1c43      	adds	r3, r0, #1
 800f2fe:	d102      	bne.n	800f306 <_isatty_r+0x1a>
 800f300:	682b      	ldr	r3, [r5, #0]
 800f302:	b103      	cbz	r3, 800f306 <_isatty_r+0x1a>
 800f304:	6023      	str	r3, [r4, #0]
 800f306:	bd38      	pop	{r3, r4, r5, pc}
 800f308:	20000ed0 	.word	0x20000ed0

0800f30c <_sbrk_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4d06      	ldr	r5, [pc, #24]	@ (800f328 <_sbrk_r+0x1c>)
 800f310:	2300      	movs	r3, #0
 800f312:	4604      	mov	r4, r0
 800f314:	4608      	mov	r0, r1
 800f316:	602b      	str	r3, [r5, #0]
 800f318:	f7f5 fb0c 	bl	8004934 <_sbrk>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d102      	bne.n	800f326 <_sbrk_r+0x1a>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	b103      	cbz	r3, 800f326 <_sbrk_r+0x1a>
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	20000ed0 	.word	0x20000ed0

0800f32c <memcpy>:
 800f32c:	440a      	add	r2, r1
 800f32e:	4291      	cmp	r1, r2
 800f330:	f100 33ff 	add.w	r3, r0, #4294967295
 800f334:	d100      	bne.n	800f338 <memcpy+0xc>
 800f336:	4770      	bx	lr
 800f338:	b510      	push	{r4, lr}
 800f33a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f33e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f342:	4291      	cmp	r1, r2
 800f344:	d1f9      	bne.n	800f33a <memcpy+0xe>
 800f346:	bd10      	pop	{r4, pc}

0800f348 <nan>:
 800f348:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f350 <nan+0x8>
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	00000000 	.word	0x00000000
 800f354:	7ff80000 	.word	0x7ff80000

0800f358 <__assert_func>:
 800f358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f35a:	4614      	mov	r4, r2
 800f35c:	461a      	mov	r2, r3
 800f35e:	4b09      	ldr	r3, [pc, #36]	@ (800f384 <__assert_func+0x2c>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	4605      	mov	r5, r0
 800f364:	68d8      	ldr	r0, [r3, #12]
 800f366:	b954      	cbnz	r4, 800f37e <__assert_func+0x26>
 800f368:	4b07      	ldr	r3, [pc, #28]	@ (800f388 <__assert_func+0x30>)
 800f36a:	461c      	mov	r4, r3
 800f36c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f370:	9100      	str	r1, [sp, #0]
 800f372:	462b      	mov	r3, r5
 800f374:	4905      	ldr	r1, [pc, #20]	@ (800f38c <__assert_func+0x34>)
 800f376:	f000 fc19 	bl	800fbac <fiprintf>
 800f37a:	f000 fc29 	bl	800fbd0 <abort>
 800f37e:	4b04      	ldr	r3, [pc, #16]	@ (800f390 <__assert_func+0x38>)
 800f380:	e7f4      	b.n	800f36c <__assert_func+0x14>
 800f382:	bf00      	nop
 800f384:	20000038 	.word	0x20000038
 800f388:	08011987 	.word	0x08011987
 800f38c:	08011959 	.word	0x08011959
 800f390:	0801194c 	.word	0x0801194c

0800f394 <_calloc_r>:
 800f394:	b570      	push	{r4, r5, r6, lr}
 800f396:	fba1 5402 	umull	r5, r4, r1, r2
 800f39a:	b93c      	cbnz	r4, 800f3ac <_calloc_r+0x18>
 800f39c:	4629      	mov	r1, r5
 800f39e:	f7fd fcb7 	bl	800cd10 <_malloc_r>
 800f3a2:	4606      	mov	r6, r0
 800f3a4:	b928      	cbnz	r0, 800f3b2 <_calloc_r+0x1e>
 800f3a6:	2600      	movs	r6, #0
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	bd70      	pop	{r4, r5, r6, pc}
 800f3ac:	220c      	movs	r2, #12
 800f3ae:	6002      	str	r2, [r0, #0]
 800f3b0:	e7f9      	b.n	800f3a6 <_calloc_r+0x12>
 800f3b2:	462a      	mov	r2, r5
 800f3b4:	4621      	mov	r1, r4
 800f3b6:	f7fc fd63 	bl	800be80 <memset>
 800f3ba:	e7f5      	b.n	800f3a8 <_calloc_r+0x14>

0800f3bc <rshift>:
 800f3bc:	6903      	ldr	r3, [r0, #16]
 800f3be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f3c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f3ca:	f100 0414 	add.w	r4, r0, #20
 800f3ce:	dd45      	ble.n	800f45c <rshift+0xa0>
 800f3d0:	f011 011f 	ands.w	r1, r1, #31
 800f3d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f3d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f3dc:	d10c      	bne.n	800f3f8 <rshift+0x3c>
 800f3de:	f100 0710 	add.w	r7, r0, #16
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	42b1      	cmp	r1, r6
 800f3e6:	d334      	bcc.n	800f452 <rshift+0x96>
 800f3e8:	1a9b      	subs	r3, r3, r2
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	1eea      	subs	r2, r5, #3
 800f3ee:	4296      	cmp	r6, r2
 800f3f0:	bf38      	it	cc
 800f3f2:	2300      	movcc	r3, #0
 800f3f4:	4423      	add	r3, r4
 800f3f6:	e015      	b.n	800f424 <rshift+0x68>
 800f3f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f3fc:	f1c1 0820 	rsb	r8, r1, #32
 800f400:	40cf      	lsrs	r7, r1
 800f402:	f105 0e04 	add.w	lr, r5, #4
 800f406:	46a1      	mov	r9, r4
 800f408:	4576      	cmp	r6, lr
 800f40a:	46f4      	mov	ip, lr
 800f40c:	d815      	bhi.n	800f43a <rshift+0x7e>
 800f40e:	1a9a      	subs	r2, r3, r2
 800f410:	0092      	lsls	r2, r2, #2
 800f412:	3a04      	subs	r2, #4
 800f414:	3501      	adds	r5, #1
 800f416:	42ae      	cmp	r6, r5
 800f418:	bf38      	it	cc
 800f41a:	2200      	movcc	r2, #0
 800f41c:	18a3      	adds	r3, r4, r2
 800f41e:	50a7      	str	r7, [r4, r2]
 800f420:	b107      	cbz	r7, 800f424 <rshift+0x68>
 800f422:	3304      	adds	r3, #4
 800f424:	1b1a      	subs	r2, r3, r4
 800f426:	42a3      	cmp	r3, r4
 800f428:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f42c:	bf08      	it	eq
 800f42e:	2300      	moveq	r3, #0
 800f430:	6102      	str	r2, [r0, #16]
 800f432:	bf08      	it	eq
 800f434:	6143      	streq	r3, [r0, #20]
 800f436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f43a:	f8dc c000 	ldr.w	ip, [ip]
 800f43e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f442:	ea4c 0707 	orr.w	r7, ip, r7
 800f446:	f849 7b04 	str.w	r7, [r9], #4
 800f44a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f44e:	40cf      	lsrs	r7, r1
 800f450:	e7da      	b.n	800f408 <rshift+0x4c>
 800f452:	f851 cb04 	ldr.w	ip, [r1], #4
 800f456:	f847 cf04 	str.w	ip, [r7, #4]!
 800f45a:	e7c3      	b.n	800f3e4 <rshift+0x28>
 800f45c:	4623      	mov	r3, r4
 800f45e:	e7e1      	b.n	800f424 <rshift+0x68>

0800f460 <__hexdig_fun>:
 800f460:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f464:	2b09      	cmp	r3, #9
 800f466:	d802      	bhi.n	800f46e <__hexdig_fun+0xe>
 800f468:	3820      	subs	r0, #32
 800f46a:	b2c0      	uxtb	r0, r0
 800f46c:	4770      	bx	lr
 800f46e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f472:	2b05      	cmp	r3, #5
 800f474:	d801      	bhi.n	800f47a <__hexdig_fun+0x1a>
 800f476:	3847      	subs	r0, #71	@ 0x47
 800f478:	e7f7      	b.n	800f46a <__hexdig_fun+0xa>
 800f47a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f47e:	2b05      	cmp	r3, #5
 800f480:	d801      	bhi.n	800f486 <__hexdig_fun+0x26>
 800f482:	3827      	subs	r0, #39	@ 0x27
 800f484:	e7f1      	b.n	800f46a <__hexdig_fun+0xa>
 800f486:	2000      	movs	r0, #0
 800f488:	4770      	bx	lr
	...

0800f48c <__gethex>:
 800f48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f490:	b085      	sub	sp, #20
 800f492:	468a      	mov	sl, r1
 800f494:	9302      	str	r3, [sp, #8]
 800f496:	680b      	ldr	r3, [r1, #0]
 800f498:	9001      	str	r0, [sp, #4]
 800f49a:	4690      	mov	r8, r2
 800f49c:	1c9c      	adds	r4, r3, #2
 800f49e:	46a1      	mov	r9, r4
 800f4a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f4a4:	2830      	cmp	r0, #48	@ 0x30
 800f4a6:	d0fa      	beq.n	800f49e <__gethex+0x12>
 800f4a8:	eba9 0303 	sub.w	r3, r9, r3
 800f4ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800f4b0:	f7ff ffd6 	bl	800f460 <__hexdig_fun>
 800f4b4:	4605      	mov	r5, r0
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d168      	bne.n	800f58c <__gethex+0x100>
 800f4ba:	49a0      	ldr	r1, [pc, #640]	@ (800f73c <__gethex+0x2b0>)
 800f4bc:	2201      	movs	r2, #1
 800f4be:	4648      	mov	r0, r9
 800f4c0:	f7ff feef 	bl	800f2a2 <strncmp>
 800f4c4:	4607      	mov	r7, r0
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d167      	bne.n	800f59a <__gethex+0x10e>
 800f4ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f4ce:	4626      	mov	r6, r4
 800f4d0:	f7ff ffc6 	bl	800f460 <__hexdig_fun>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d062      	beq.n	800f59e <__gethex+0x112>
 800f4d8:	4623      	mov	r3, r4
 800f4da:	7818      	ldrb	r0, [r3, #0]
 800f4dc:	2830      	cmp	r0, #48	@ 0x30
 800f4de:	4699      	mov	r9, r3
 800f4e0:	f103 0301 	add.w	r3, r3, #1
 800f4e4:	d0f9      	beq.n	800f4da <__gethex+0x4e>
 800f4e6:	f7ff ffbb 	bl	800f460 <__hexdig_fun>
 800f4ea:	fab0 f580 	clz	r5, r0
 800f4ee:	096d      	lsrs	r5, r5, #5
 800f4f0:	f04f 0b01 	mov.w	fp, #1
 800f4f4:	464a      	mov	r2, r9
 800f4f6:	4616      	mov	r6, r2
 800f4f8:	3201      	adds	r2, #1
 800f4fa:	7830      	ldrb	r0, [r6, #0]
 800f4fc:	f7ff ffb0 	bl	800f460 <__hexdig_fun>
 800f500:	2800      	cmp	r0, #0
 800f502:	d1f8      	bne.n	800f4f6 <__gethex+0x6a>
 800f504:	498d      	ldr	r1, [pc, #564]	@ (800f73c <__gethex+0x2b0>)
 800f506:	2201      	movs	r2, #1
 800f508:	4630      	mov	r0, r6
 800f50a:	f7ff feca 	bl	800f2a2 <strncmp>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d13f      	bne.n	800f592 <__gethex+0x106>
 800f512:	b944      	cbnz	r4, 800f526 <__gethex+0x9a>
 800f514:	1c74      	adds	r4, r6, #1
 800f516:	4622      	mov	r2, r4
 800f518:	4616      	mov	r6, r2
 800f51a:	3201      	adds	r2, #1
 800f51c:	7830      	ldrb	r0, [r6, #0]
 800f51e:	f7ff ff9f 	bl	800f460 <__hexdig_fun>
 800f522:	2800      	cmp	r0, #0
 800f524:	d1f8      	bne.n	800f518 <__gethex+0x8c>
 800f526:	1ba4      	subs	r4, r4, r6
 800f528:	00a7      	lsls	r7, r4, #2
 800f52a:	7833      	ldrb	r3, [r6, #0]
 800f52c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f530:	2b50      	cmp	r3, #80	@ 0x50
 800f532:	d13e      	bne.n	800f5b2 <__gethex+0x126>
 800f534:	7873      	ldrb	r3, [r6, #1]
 800f536:	2b2b      	cmp	r3, #43	@ 0x2b
 800f538:	d033      	beq.n	800f5a2 <__gethex+0x116>
 800f53a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f53c:	d034      	beq.n	800f5a8 <__gethex+0x11c>
 800f53e:	1c71      	adds	r1, r6, #1
 800f540:	2400      	movs	r4, #0
 800f542:	7808      	ldrb	r0, [r1, #0]
 800f544:	f7ff ff8c 	bl	800f460 <__hexdig_fun>
 800f548:	1e43      	subs	r3, r0, #1
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	2b18      	cmp	r3, #24
 800f54e:	d830      	bhi.n	800f5b2 <__gethex+0x126>
 800f550:	f1a0 0210 	sub.w	r2, r0, #16
 800f554:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f558:	f7ff ff82 	bl	800f460 <__hexdig_fun>
 800f55c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f560:	fa5f fc8c 	uxtb.w	ip, ip
 800f564:	f1bc 0f18 	cmp.w	ip, #24
 800f568:	f04f 030a 	mov.w	r3, #10
 800f56c:	d91e      	bls.n	800f5ac <__gethex+0x120>
 800f56e:	b104      	cbz	r4, 800f572 <__gethex+0xe6>
 800f570:	4252      	negs	r2, r2
 800f572:	4417      	add	r7, r2
 800f574:	f8ca 1000 	str.w	r1, [sl]
 800f578:	b1ed      	cbz	r5, 800f5b6 <__gethex+0x12a>
 800f57a:	f1bb 0f00 	cmp.w	fp, #0
 800f57e:	bf0c      	ite	eq
 800f580:	2506      	moveq	r5, #6
 800f582:	2500      	movne	r5, #0
 800f584:	4628      	mov	r0, r5
 800f586:	b005      	add	sp, #20
 800f588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f58c:	2500      	movs	r5, #0
 800f58e:	462c      	mov	r4, r5
 800f590:	e7b0      	b.n	800f4f4 <__gethex+0x68>
 800f592:	2c00      	cmp	r4, #0
 800f594:	d1c7      	bne.n	800f526 <__gethex+0x9a>
 800f596:	4627      	mov	r7, r4
 800f598:	e7c7      	b.n	800f52a <__gethex+0x9e>
 800f59a:	464e      	mov	r6, r9
 800f59c:	462f      	mov	r7, r5
 800f59e:	2501      	movs	r5, #1
 800f5a0:	e7c3      	b.n	800f52a <__gethex+0x9e>
 800f5a2:	2400      	movs	r4, #0
 800f5a4:	1cb1      	adds	r1, r6, #2
 800f5a6:	e7cc      	b.n	800f542 <__gethex+0xb6>
 800f5a8:	2401      	movs	r4, #1
 800f5aa:	e7fb      	b.n	800f5a4 <__gethex+0x118>
 800f5ac:	fb03 0002 	mla	r0, r3, r2, r0
 800f5b0:	e7ce      	b.n	800f550 <__gethex+0xc4>
 800f5b2:	4631      	mov	r1, r6
 800f5b4:	e7de      	b.n	800f574 <__gethex+0xe8>
 800f5b6:	eba6 0309 	sub.w	r3, r6, r9
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	4629      	mov	r1, r5
 800f5be:	2b07      	cmp	r3, #7
 800f5c0:	dc0a      	bgt.n	800f5d8 <__gethex+0x14c>
 800f5c2:	9801      	ldr	r0, [sp, #4]
 800f5c4:	f7fd fc30 	bl	800ce28 <_Balloc>
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	b940      	cbnz	r0, 800f5de <__gethex+0x152>
 800f5cc:	4b5c      	ldr	r3, [pc, #368]	@ (800f740 <__gethex+0x2b4>)
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	21e4      	movs	r1, #228	@ 0xe4
 800f5d2:	485c      	ldr	r0, [pc, #368]	@ (800f744 <__gethex+0x2b8>)
 800f5d4:	f7ff fec0 	bl	800f358 <__assert_func>
 800f5d8:	3101      	adds	r1, #1
 800f5da:	105b      	asrs	r3, r3, #1
 800f5dc:	e7ef      	b.n	800f5be <__gethex+0x132>
 800f5de:	f100 0a14 	add.w	sl, r0, #20
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	4655      	mov	r5, sl
 800f5e6:	469b      	mov	fp, r3
 800f5e8:	45b1      	cmp	r9, r6
 800f5ea:	d337      	bcc.n	800f65c <__gethex+0x1d0>
 800f5ec:	f845 bb04 	str.w	fp, [r5], #4
 800f5f0:	eba5 050a 	sub.w	r5, r5, sl
 800f5f4:	10ad      	asrs	r5, r5, #2
 800f5f6:	6125      	str	r5, [r4, #16]
 800f5f8:	4658      	mov	r0, fp
 800f5fa:	f7fd fd07 	bl	800d00c <__hi0bits>
 800f5fe:	016d      	lsls	r5, r5, #5
 800f600:	f8d8 6000 	ldr.w	r6, [r8]
 800f604:	1a2d      	subs	r5, r5, r0
 800f606:	42b5      	cmp	r5, r6
 800f608:	dd54      	ble.n	800f6b4 <__gethex+0x228>
 800f60a:	1bad      	subs	r5, r5, r6
 800f60c:	4629      	mov	r1, r5
 800f60e:	4620      	mov	r0, r4
 800f610:	f7fe f89b 	bl	800d74a <__any_on>
 800f614:	4681      	mov	r9, r0
 800f616:	b178      	cbz	r0, 800f638 <__gethex+0x1ac>
 800f618:	1e6b      	subs	r3, r5, #1
 800f61a:	1159      	asrs	r1, r3, #5
 800f61c:	f003 021f 	and.w	r2, r3, #31
 800f620:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f624:	f04f 0901 	mov.w	r9, #1
 800f628:	fa09 f202 	lsl.w	r2, r9, r2
 800f62c:	420a      	tst	r2, r1
 800f62e:	d003      	beq.n	800f638 <__gethex+0x1ac>
 800f630:	454b      	cmp	r3, r9
 800f632:	dc36      	bgt.n	800f6a2 <__gethex+0x216>
 800f634:	f04f 0902 	mov.w	r9, #2
 800f638:	4629      	mov	r1, r5
 800f63a:	4620      	mov	r0, r4
 800f63c:	f7ff febe 	bl	800f3bc <rshift>
 800f640:	442f      	add	r7, r5
 800f642:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f646:	42bb      	cmp	r3, r7
 800f648:	da42      	bge.n	800f6d0 <__gethex+0x244>
 800f64a:	9801      	ldr	r0, [sp, #4]
 800f64c:	4621      	mov	r1, r4
 800f64e:	f7fd fc2b 	bl	800cea8 <_Bfree>
 800f652:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f654:	2300      	movs	r3, #0
 800f656:	6013      	str	r3, [r2, #0]
 800f658:	25a3      	movs	r5, #163	@ 0xa3
 800f65a:	e793      	b.n	800f584 <__gethex+0xf8>
 800f65c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f660:	2a2e      	cmp	r2, #46	@ 0x2e
 800f662:	d012      	beq.n	800f68a <__gethex+0x1fe>
 800f664:	2b20      	cmp	r3, #32
 800f666:	d104      	bne.n	800f672 <__gethex+0x1e6>
 800f668:	f845 bb04 	str.w	fp, [r5], #4
 800f66c:	f04f 0b00 	mov.w	fp, #0
 800f670:	465b      	mov	r3, fp
 800f672:	7830      	ldrb	r0, [r6, #0]
 800f674:	9303      	str	r3, [sp, #12]
 800f676:	f7ff fef3 	bl	800f460 <__hexdig_fun>
 800f67a:	9b03      	ldr	r3, [sp, #12]
 800f67c:	f000 000f 	and.w	r0, r0, #15
 800f680:	4098      	lsls	r0, r3
 800f682:	ea4b 0b00 	orr.w	fp, fp, r0
 800f686:	3304      	adds	r3, #4
 800f688:	e7ae      	b.n	800f5e8 <__gethex+0x15c>
 800f68a:	45b1      	cmp	r9, r6
 800f68c:	d8ea      	bhi.n	800f664 <__gethex+0x1d8>
 800f68e:	492b      	ldr	r1, [pc, #172]	@ (800f73c <__gethex+0x2b0>)
 800f690:	9303      	str	r3, [sp, #12]
 800f692:	2201      	movs	r2, #1
 800f694:	4630      	mov	r0, r6
 800f696:	f7ff fe04 	bl	800f2a2 <strncmp>
 800f69a:	9b03      	ldr	r3, [sp, #12]
 800f69c:	2800      	cmp	r0, #0
 800f69e:	d1e1      	bne.n	800f664 <__gethex+0x1d8>
 800f6a0:	e7a2      	b.n	800f5e8 <__gethex+0x15c>
 800f6a2:	1ea9      	subs	r1, r5, #2
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f7fe f850 	bl	800d74a <__any_on>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	d0c2      	beq.n	800f634 <__gethex+0x1a8>
 800f6ae:	f04f 0903 	mov.w	r9, #3
 800f6b2:	e7c1      	b.n	800f638 <__gethex+0x1ac>
 800f6b4:	da09      	bge.n	800f6ca <__gethex+0x23e>
 800f6b6:	1b75      	subs	r5, r6, r5
 800f6b8:	4621      	mov	r1, r4
 800f6ba:	9801      	ldr	r0, [sp, #4]
 800f6bc:	462a      	mov	r2, r5
 800f6be:	f7fd fe0b 	bl	800d2d8 <__lshift>
 800f6c2:	1b7f      	subs	r7, r7, r5
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	f100 0a14 	add.w	sl, r0, #20
 800f6ca:	f04f 0900 	mov.w	r9, #0
 800f6ce:	e7b8      	b.n	800f642 <__gethex+0x1b6>
 800f6d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f6d4:	42bd      	cmp	r5, r7
 800f6d6:	dd6f      	ble.n	800f7b8 <__gethex+0x32c>
 800f6d8:	1bed      	subs	r5, r5, r7
 800f6da:	42ae      	cmp	r6, r5
 800f6dc:	dc34      	bgt.n	800f748 <__gethex+0x2bc>
 800f6de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6e2:	2b02      	cmp	r3, #2
 800f6e4:	d022      	beq.n	800f72c <__gethex+0x2a0>
 800f6e6:	2b03      	cmp	r3, #3
 800f6e8:	d024      	beq.n	800f734 <__gethex+0x2a8>
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d115      	bne.n	800f71a <__gethex+0x28e>
 800f6ee:	42ae      	cmp	r6, r5
 800f6f0:	d113      	bne.n	800f71a <__gethex+0x28e>
 800f6f2:	2e01      	cmp	r6, #1
 800f6f4:	d10b      	bne.n	800f70e <__gethex+0x282>
 800f6f6:	9a02      	ldr	r2, [sp, #8]
 800f6f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f6fc:	6013      	str	r3, [r2, #0]
 800f6fe:	2301      	movs	r3, #1
 800f700:	6123      	str	r3, [r4, #16]
 800f702:	f8ca 3000 	str.w	r3, [sl]
 800f706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f708:	2562      	movs	r5, #98	@ 0x62
 800f70a:	601c      	str	r4, [r3, #0]
 800f70c:	e73a      	b.n	800f584 <__gethex+0xf8>
 800f70e:	1e71      	subs	r1, r6, #1
 800f710:	4620      	mov	r0, r4
 800f712:	f7fe f81a 	bl	800d74a <__any_on>
 800f716:	2800      	cmp	r0, #0
 800f718:	d1ed      	bne.n	800f6f6 <__gethex+0x26a>
 800f71a:	9801      	ldr	r0, [sp, #4]
 800f71c:	4621      	mov	r1, r4
 800f71e:	f7fd fbc3 	bl	800cea8 <_Bfree>
 800f722:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f724:	2300      	movs	r3, #0
 800f726:	6013      	str	r3, [r2, #0]
 800f728:	2550      	movs	r5, #80	@ 0x50
 800f72a:	e72b      	b.n	800f584 <__gethex+0xf8>
 800f72c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1f3      	bne.n	800f71a <__gethex+0x28e>
 800f732:	e7e0      	b.n	800f6f6 <__gethex+0x26a>
 800f734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f736:	2b00      	cmp	r3, #0
 800f738:	d1dd      	bne.n	800f6f6 <__gethex+0x26a>
 800f73a:	e7ee      	b.n	800f71a <__gethex+0x28e>
 800f73c:	080118c0 	.word	0x080118c0
 800f740:	08011758 	.word	0x08011758
 800f744:	08011988 	.word	0x08011988
 800f748:	1e6f      	subs	r7, r5, #1
 800f74a:	f1b9 0f00 	cmp.w	r9, #0
 800f74e:	d130      	bne.n	800f7b2 <__gethex+0x326>
 800f750:	b127      	cbz	r7, 800f75c <__gethex+0x2d0>
 800f752:	4639      	mov	r1, r7
 800f754:	4620      	mov	r0, r4
 800f756:	f7fd fff8 	bl	800d74a <__any_on>
 800f75a:	4681      	mov	r9, r0
 800f75c:	117a      	asrs	r2, r7, #5
 800f75e:	2301      	movs	r3, #1
 800f760:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f764:	f007 071f 	and.w	r7, r7, #31
 800f768:	40bb      	lsls	r3, r7
 800f76a:	4213      	tst	r3, r2
 800f76c:	4629      	mov	r1, r5
 800f76e:	4620      	mov	r0, r4
 800f770:	bf18      	it	ne
 800f772:	f049 0902 	orrne.w	r9, r9, #2
 800f776:	f7ff fe21 	bl	800f3bc <rshift>
 800f77a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f77e:	1b76      	subs	r6, r6, r5
 800f780:	2502      	movs	r5, #2
 800f782:	f1b9 0f00 	cmp.w	r9, #0
 800f786:	d047      	beq.n	800f818 <__gethex+0x38c>
 800f788:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f78c:	2b02      	cmp	r3, #2
 800f78e:	d015      	beq.n	800f7bc <__gethex+0x330>
 800f790:	2b03      	cmp	r3, #3
 800f792:	d017      	beq.n	800f7c4 <__gethex+0x338>
 800f794:	2b01      	cmp	r3, #1
 800f796:	d109      	bne.n	800f7ac <__gethex+0x320>
 800f798:	f019 0f02 	tst.w	r9, #2
 800f79c:	d006      	beq.n	800f7ac <__gethex+0x320>
 800f79e:	f8da 3000 	ldr.w	r3, [sl]
 800f7a2:	ea49 0903 	orr.w	r9, r9, r3
 800f7a6:	f019 0f01 	tst.w	r9, #1
 800f7aa:	d10e      	bne.n	800f7ca <__gethex+0x33e>
 800f7ac:	f045 0510 	orr.w	r5, r5, #16
 800f7b0:	e032      	b.n	800f818 <__gethex+0x38c>
 800f7b2:	f04f 0901 	mov.w	r9, #1
 800f7b6:	e7d1      	b.n	800f75c <__gethex+0x2d0>
 800f7b8:	2501      	movs	r5, #1
 800f7ba:	e7e2      	b.n	800f782 <__gethex+0x2f6>
 800f7bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7be:	f1c3 0301 	rsb	r3, r3, #1
 800f7c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d0f0      	beq.n	800f7ac <__gethex+0x320>
 800f7ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f7ce:	f104 0314 	add.w	r3, r4, #20
 800f7d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f7d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f7da:	f04f 0c00 	mov.w	ip, #0
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f7e8:	d01b      	beq.n	800f822 <__gethex+0x396>
 800f7ea:	3201      	adds	r2, #1
 800f7ec:	6002      	str	r2, [r0, #0]
 800f7ee:	2d02      	cmp	r5, #2
 800f7f0:	f104 0314 	add.w	r3, r4, #20
 800f7f4:	d13c      	bne.n	800f870 <__gethex+0x3e4>
 800f7f6:	f8d8 2000 	ldr.w	r2, [r8]
 800f7fa:	3a01      	subs	r2, #1
 800f7fc:	42b2      	cmp	r2, r6
 800f7fe:	d109      	bne.n	800f814 <__gethex+0x388>
 800f800:	1171      	asrs	r1, r6, #5
 800f802:	2201      	movs	r2, #1
 800f804:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f808:	f006 061f 	and.w	r6, r6, #31
 800f80c:	fa02 f606 	lsl.w	r6, r2, r6
 800f810:	421e      	tst	r6, r3
 800f812:	d13a      	bne.n	800f88a <__gethex+0x3fe>
 800f814:	f045 0520 	orr.w	r5, r5, #32
 800f818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f81a:	601c      	str	r4, [r3, #0]
 800f81c:	9b02      	ldr	r3, [sp, #8]
 800f81e:	601f      	str	r7, [r3, #0]
 800f820:	e6b0      	b.n	800f584 <__gethex+0xf8>
 800f822:	4299      	cmp	r1, r3
 800f824:	f843 cc04 	str.w	ip, [r3, #-4]
 800f828:	d8d9      	bhi.n	800f7de <__gethex+0x352>
 800f82a:	68a3      	ldr	r3, [r4, #8]
 800f82c:	459b      	cmp	fp, r3
 800f82e:	db17      	blt.n	800f860 <__gethex+0x3d4>
 800f830:	6861      	ldr	r1, [r4, #4]
 800f832:	9801      	ldr	r0, [sp, #4]
 800f834:	3101      	adds	r1, #1
 800f836:	f7fd faf7 	bl	800ce28 <_Balloc>
 800f83a:	4681      	mov	r9, r0
 800f83c:	b918      	cbnz	r0, 800f846 <__gethex+0x3ba>
 800f83e:	4b1a      	ldr	r3, [pc, #104]	@ (800f8a8 <__gethex+0x41c>)
 800f840:	4602      	mov	r2, r0
 800f842:	2184      	movs	r1, #132	@ 0x84
 800f844:	e6c5      	b.n	800f5d2 <__gethex+0x146>
 800f846:	6922      	ldr	r2, [r4, #16]
 800f848:	3202      	adds	r2, #2
 800f84a:	f104 010c 	add.w	r1, r4, #12
 800f84e:	0092      	lsls	r2, r2, #2
 800f850:	300c      	adds	r0, #12
 800f852:	f7ff fd6b 	bl	800f32c <memcpy>
 800f856:	4621      	mov	r1, r4
 800f858:	9801      	ldr	r0, [sp, #4]
 800f85a:	f7fd fb25 	bl	800cea8 <_Bfree>
 800f85e:	464c      	mov	r4, r9
 800f860:	6923      	ldr	r3, [r4, #16]
 800f862:	1c5a      	adds	r2, r3, #1
 800f864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f868:	6122      	str	r2, [r4, #16]
 800f86a:	2201      	movs	r2, #1
 800f86c:	615a      	str	r2, [r3, #20]
 800f86e:	e7be      	b.n	800f7ee <__gethex+0x362>
 800f870:	6922      	ldr	r2, [r4, #16]
 800f872:	455a      	cmp	r2, fp
 800f874:	dd0b      	ble.n	800f88e <__gethex+0x402>
 800f876:	2101      	movs	r1, #1
 800f878:	4620      	mov	r0, r4
 800f87a:	f7ff fd9f 	bl	800f3bc <rshift>
 800f87e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f882:	3701      	adds	r7, #1
 800f884:	42bb      	cmp	r3, r7
 800f886:	f6ff aee0 	blt.w	800f64a <__gethex+0x1be>
 800f88a:	2501      	movs	r5, #1
 800f88c:	e7c2      	b.n	800f814 <__gethex+0x388>
 800f88e:	f016 061f 	ands.w	r6, r6, #31
 800f892:	d0fa      	beq.n	800f88a <__gethex+0x3fe>
 800f894:	4453      	add	r3, sl
 800f896:	f1c6 0620 	rsb	r6, r6, #32
 800f89a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f89e:	f7fd fbb5 	bl	800d00c <__hi0bits>
 800f8a2:	42b0      	cmp	r0, r6
 800f8a4:	dbe7      	blt.n	800f876 <__gethex+0x3ea>
 800f8a6:	e7f0      	b.n	800f88a <__gethex+0x3fe>
 800f8a8:	08011758 	.word	0x08011758

0800f8ac <L_shift>:
 800f8ac:	f1c2 0208 	rsb	r2, r2, #8
 800f8b0:	0092      	lsls	r2, r2, #2
 800f8b2:	b570      	push	{r4, r5, r6, lr}
 800f8b4:	f1c2 0620 	rsb	r6, r2, #32
 800f8b8:	6843      	ldr	r3, [r0, #4]
 800f8ba:	6804      	ldr	r4, [r0, #0]
 800f8bc:	fa03 f506 	lsl.w	r5, r3, r6
 800f8c0:	432c      	orrs	r4, r5
 800f8c2:	40d3      	lsrs	r3, r2
 800f8c4:	6004      	str	r4, [r0, #0]
 800f8c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f8ca:	4288      	cmp	r0, r1
 800f8cc:	d3f4      	bcc.n	800f8b8 <L_shift+0xc>
 800f8ce:	bd70      	pop	{r4, r5, r6, pc}

0800f8d0 <__match>:
 800f8d0:	b530      	push	{r4, r5, lr}
 800f8d2:	6803      	ldr	r3, [r0, #0]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8da:	b914      	cbnz	r4, 800f8e2 <__match+0x12>
 800f8dc:	6003      	str	r3, [r0, #0]
 800f8de:	2001      	movs	r0, #1
 800f8e0:	bd30      	pop	{r4, r5, pc}
 800f8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f8ea:	2d19      	cmp	r5, #25
 800f8ec:	bf98      	it	ls
 800f8ee:	3220      	addls	r2, #32
 800f8f0:	42a2      	cmp	r2, r4
 800f8f2:	d0f0      	beq.n	800f8d6 <__match+0x6>
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	e7f3      	b.n	800f8e0 <__match+0x10>

0800f8f8 <__hexnan>:
 800f8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fc:	680b      	ldr	r3, [r1, #0]
 800f8fe:	6801      	ldr	r1, [r0, #0]
 800f900:	115e      	asrs	r6, r3, #5
 800f902:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f906:	f013 031f 	ands.w	r3, r3, #31
 800f90a:	b087      	sub	sp, #28
 800f90c:	bf18      	it	ne
 800f90e:	3604      	addne	r6, #4
 800f910:	2500      	movs	r5, #0
 800f912:	1f37      	subs	r7, r6, #4
 800f914:	4682      	mov	sl, r0
 800f916:	4690      	mov	r8, r2
 800f918:	9301      	str	r3, [sp, #4]
 800f91a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f91e:	46b9      	mov	r9, r7
 800f920:	463c      	mov	r4, r7
 800f922:	9502      	str	r5, [sp, #8]
 800f924:	46ab      	mov	fp, r5
 800f926:	784a      	ldrb	r2, [r1, #1]
 800f928:	1c4b      	adds	r3, r1, #1
 800f92a:	9303      	str	r3, [sp, #12]
 800f92c:	b342      	cbz	r2, 800f980 <__hexnan+0x88>
 800f92e:	4610      	mov	r0, r2
 800f930:	9105      	str	r1, [sp, #20]
 800f932:	9204      	str	r2, [sp, #16]
 800f934:	f7ff fd94 	bl	800f460 <__hexdig_fun>
 800f938:	2800      	cmp	r0, #0
 800f93a:	d151      	bne.n	800f9e0 <__hexnan+0xe8>
 800f93c:	9a04      	ldr	r2, [sp, #16]
 800f93e:	9905      	ldr	r1, [sp, #20]
 800f940:	2a20      	cmp	r2, #32
 800f942:	d818      	bhi.n	800f976 <__hexnan+0x7e>
 800f944:	9b02      	ldr	r3, [sp, #8]
 800f946:	459b      	cmp	fp, r3
 800f948:	dd13      	ble.n	800f972 <__hexnan+0x7a>
 800f94a:	454c      	cmp	r4, r9
 800f94c:	d206      	bcs.n	800f95c <__hexnan+0x64>
 800f94e:	2d07      	cmp	r5, #7
 800f950:	dc04      	bgt.n	800f95c <__hexnan+0x64>
 800f952:	462a      	mov	r2, r5
 800f954:	4649      	mov	r1, r9
 800f956:	4620      	mov	r0, r4
 800f958:	f7ff ffa8 	bl	800f8ac <L_shift>
 800f95c:	4544      	cmp	r4, r8
 800f95e:	d952      	bls.n	800fa06 <__hexnan+0x10e>
 800f960:	2300      	movs	r3, #0
 800f962:	f1a4 0904 	sub.w	r9, r4, #4
 800f966:	f844 3c04 	str.w	r3, [r4, #-4]
 800f96a:	f8cd b008 	str.w	fp, [sp, #8]
 800f96e:	464c      	mov	r4, r9
 800f970:	461d      	mov	r5, r3
 800f972:	9903      	ldr	r1, [sp, #12]
 800f974:	e7d7      	b.n	800f926 <__hexnan+0x2e>
 800f976:	2a29      	cmp	r2, #41	@ 0x29
 800f978:	d157      	bne.n	800fa2a <__hexnan+0x132>
 800f97a:	3102      	adds	r1, #2
 800f97c:	f8ca 1000 	str.w	r1, [sl]
 800f980:	f1bb 0f00 	cmp.w	fp, #0
 800f984:	d051      	beq.n	800fa2a <__hexnan+0x132>
 800f986:	454c      	cmp	r4, r9
 800f988:	d206      	bcs.n	800f998 <__hexnan+0xa0>
 800f98a:	2d07      	cmp	r5, #7
 800f98c:	dc04      	bgt.n	800f998 <__hexnan+0xa0>
 800f98e:	462a      	mov	r2, r5
 800f990:	4649      	mov	r1, r9
 800f992:	4620      	mov	r0, r4
 800f994:	f7ff ff8a 	bl	800f8ac <L_shift>
 800f998:	4544      	cmp	r4, r8
 800f99a:	d936      	bls.n	800fa0a <__hexnan+0x112>
 800f99c:	f1a8 0204 	sub.w	r2, r8, #4
 800f9a0:	4623      	mov	r3, r4
 800f9a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f9a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f9aa:	429f      	cmp	r7, r3
 800f9ac:	d2f9      	bcs.n	800f9a2 <__hexnan+0xaa>
 800f9ae:	1b3b      	subs	r3, r7, r4
 800f9b0:	f023 0303 	bic.w	r3, r3, #3
 800f9b4:	3304      	adds	r3, #4
 800f9b6:	3401      	adds	r4, #1
 800f9b8:	3e03      	subs	r6, #3
 800f9ba:	42b4      	cmp	r4, r6
 800f9bc:	bf88      	it	hi
 800f9be:	2304      	movhi	r3, #4
 800f9c0:	4443      	add	r3, r8
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f843 2b04 	str.w	r2, [r3], #4
 800f9c8:	429f      	cmp	r7, r3
 800f9ca:	d2fb      	bcs.n	800f9c4 <__hexnan+0xcc>
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	b91b      	cbnz	r3, 800f9d8 <__hexnan+0xe0>
 800f9d0:	4547      	cmp	r7, r8
 800f9d2:	d128      	bne.n	800fa26 <__hexnan+0x12e>
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	603b      	str	r3, [r7, #0]
 800f9d8:	2005      	movs	r0, #5
 800f9da:	b007      	add	sp, #28
 800f9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e0:	3501      	adds	r5, #1
 800f9e2:	2d08      	cmp	r5, #8
 800f9e4:	f10b 0b01 	add.w	fp, fp, #1
 800f9e8:	dd06      	ble.n	800f9f8 <__hexnan+0x100>
 800f9ea:	4544      	cmp	r4, r8
 800f9ec:	d9c1      	bls.n	800f972 <__hexnan+0x7a>
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9f4:	2501      	movs	r5, #1
 800f9f6:	3c04      	subs	r4, #4
 800f9f8:	6822      	ldr	r2, [r4, #0]
 800f9fa:	f000 000f 	and.w	r0, r0, #15
 800f9fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fa02:	6020      	str	r0, [r4, #0]
 800fa04:	e7b5      	b.n	800f972 <__hexnan+0x7a>
 800fa06:	2508      	movs	r5, #8
 800fa08:	e7b3      	b.n	800f972 <__hexnan+0x7a>
 800fa0a:	9b01      	ldr	r3, [sp, #4]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d0dd      	beq.n	800f9cc <__hexnan+0xd4>
 800fa10:	f1c3 0320 	rsb	r3, r3, #32
 800fa14:	f04f 32ff 	mov.w	r2, #4294967295
 800fa18:	40da      	lsrs	r2, r3
 800fa1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fa1e:	4013      	ands	r3, r2
 800fa20:	f846 3c04 	str.w	r3, [r6, #-4]
 800fa24:	e7d2      	b.n	800f9cc <__hexnan+0xd4>
 800fa26:	3f04      	subs	r7, #4
 800fa28:	e7d0      	b.n	800f9cc <__hexnan+0xd4>
 800fa2a:	2004      	movs	r0, #4
 800fa2c:	e7d5      	b.n	800f9da <__hexnan+0xe2>

0800fa2e <__ascii_mbtowc>:
 800fa2e:	b082      	sub	sp, #8
 800fa30:	b901      	cbnz	r1, 800fa34 <__ascii_mbtowc+0x6>
 800fa32:	a901      	add	r1, sp, #4
 800fa34:	b142      	cbz	r2, 800fa48 <__ascii_mbtowc+0x1a>
 800fa36:	b14b      	cbz	r3, 800fa4c <__ascii_mbtowc+0x1e>
 800fa38:	7813      	ldrb	r3, [r2, #0]
 800fa3a:	600b      	str	r3, [r1, #0]
 800fa3c:	7812      	ldrb	r2, [r2, #0]
 800fa3e:	1e10      	subs	r0, r2, #0
 800fa40:	bf18      	it	ne
 800fa42:	2001      	movne	r0, #1
 800fa44:	b002      	add	sp, #8
 800fa46:	4770      	bx	lr
 800fa48:	4610      	mov	r0, r2
 800fa4a:	e7fb      	b.n	800fa44 <__ascii_mbtowc+0x16>
 800fa4c:	f06f 0001 	mvn.w	r0, #1
 800fa50:	e7f8      	b.n	800fa44 <__ascii_mbtowc+0x16>

0800fa52 <_realloc_r>:
 800fa52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa56:	4680      	mov	r8, r0
 800fa58:	4615      	mov	r5, r2
 800fa5a:	460c      	mov	r4, r1
 800fa5c:	b921      	cbnz	r1, 800fa68 <_realloc_r+0x16>
 800fa5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa62:	4611      	mov	r1, r2
 800fa64:	f7fd b954 	b.w	800cd10 <_malloc_r>
 800fa68:	b92a      	cbnz	r2, 800fa76 <_realloc_r+0x24>
 800fa6a:	f7fd f8dd 	bl	800cc28 <_free_r>
 800fa6e:	2400      	movs	r4, #0
 800fa70:	4620      	mov	r0, r4
 800fa72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa76:	f000 f8b2 	bl	800fbde <_malloc_usable_size_r>
 800fa7a:	4285      	cmp	r5, r0
 800fa7c:	4606      	mov	r6, r0
 800fa7e:	d802      	bhi.n	800fa86 <_realloc_r+0x34>
 800fa80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fa84:	d8f4      	bhi.n	800fa70 <_realloc_r+0x1e>
 800fa86:	4629      	mov	r1, r5
 800fa88:	4640      	mov	r0, r8
 800fa8a:	f7fd f941 	bl	800cd10 <_malloc_r>
 800fa8e:	4607      	mov	r7, r0
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d0ec      	beq.n	800fa6e <_realloc_r+0x1c>
 800fa94:	42b5      	cmp	r5, r6
 800fa96:	462a      	mov	r2, r5
 800fa98:	4621      	mov	r1, r4
 800fa9a:	bf28      	it	cs
 800fa9c:	4632      	movcs	r2, r6
 800fa9e:	f7ff fc45 	bl	800f32c <memcpy>
 800faa2:	4621      	mov	r1, r4
 800faa4:	4640      	mov	r0, r8
 800faa6:	f7fd f8bf 	bl	800cc28 <_free_r>
 800faaa:	463c      	mov	r4, r7
 800faac:	e7e0      	b.n	800fa70 <_realloc_r+0x1e>
	...

0800fab0 <_strtoul_l.constprop.0>:
 800fab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fab4:	4e34      	ldr	r6, [pc, #208]	@ (800fb88 <_strtoul_l.constprop.0+0xd8>)
 800fab6:	4686      	mov	lr, r0
 800fab8:	460d      	mov	r5, r1
 800faba:	4628      	mov	r0, r5
 800fabc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fac0:	5d37      	ldrb	r7, [r6, r4]
 800fac2:	f017 0708 	ands.w	r7, r7, #8
 800fac6:	d1f8      	bne.n	800faba <_strtoul_l.constprop.0+0xa>
 800fac8:	2c2d      	cmp	r4, #45	@ 0x2d
 800faca:	d12f      	bne.n	800fb2c <_strtoul_l.constprop.0+0x7c>
 800facc:	782c      	ldrb	r4, [r5, #0]
 800face:	2701      	movs	r7, #1
 800fad0:	1c85      	adds	r5, r0, #2
 800fad2:	f033 0010 	bics.w	r0, r3, #16
 800fad6:	d109      	bne.n	800faec <_strtoul_l.constprop.0+0x3c>
 800fad8:	2c30      	cmp	r4, #48	@ 0x30
 800fada:	d12c      	bne.n	800fb36 <_strtoul_l.constprop.0+0x86>
 800fadc:	7828      	ldrb	r0, [r5, #0]
 800fade:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800fae2:	2858      	cmp	r0, #88	@ 0x58
 800fae4:	d127      	bne.n	800fb36 <_strtoul_l.constprop.0+0x86>
 800fae6:	786c      	ldrb	r4, [r5, #1]
 800fae8:	2310      	movs	r3, #16
 800faea:	3502      	adds	r5, #2
 800faec:	f04f 38ff 	mov.w	r8, #4294967295
 800faf0:	2600      	movs	r6, #0
 800faf2:	fbb8 f8f3 	udiv	r8, r8, r3
 800faf6:	fb03 f908 	mul.w	r9, r3, r8
 800fafa:	ea6f 0909 	mvn.w	r9, r9
 800fafe:	4630      	mov	r0, r6
 800fb00:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fb04:	f1bc 0f09 	cmp.w	ip, #9
 800fb08:	d81c      	bhi.n	800fb44 <_strtoul_l.constprop.0+0x94>
 800fb0a:	4664      	mov	r4, ip
 800fb0c:	42a3      	cmp	r3, r4
 800fb0e:	dd2a      	ble.n	800fb66 <_strtoul_l.constprop.0+0xb6>
 800fb10:	f1b6 3fff 	cmp.w	r6, #4294967295
 800fb14:	d007      	beq.n	800fb26 <_strtoul_l.constprop.0+0x76>
 800fb16:	4580      	cmp	r8, r0
 800fb18:	d322      	bcc.n	800fb60 <_strtoul_l.constprop.0+0xb0>
 800fb1a:	d101      	bne.n	800fb20 <_strtoul_l.constprop.0+0x70>
 800fb1c:	45a1      	cmp	r9, r4
 800fb1e:	db1f      	blt.n	800fb60 <_strtoul_l.constprop.0+0xb0>
 800fb20:	fb00 4003 	mla	r0, r0, r3, r4
 800fb24:	2601      	movs	r6, #1
 800fb26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb2a:	e7e9      	b.n	800fb00 <_strtoul_l.constprop.0+0x50>
 800fb2c:	2c2b      	cmp	r4, #43	@ 0x2b
 800fb2e:	bf04      	itt	eq
 800fb30:	782c      	ldrbeq	r4, [r5, #0]
 800fb32:	1c85      	addeq	r5, r0, #2
 800fb34:	e7cd      	b.n	800fad2 <_strtoul_l.constprop.0+0x22>
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d1d8      	bne.n	800faec <_strtoul_l.constprop.0+0x3c>
 800fb3a:	2c30      	cmp	r4, #48	@ 0x30
 800fb3c:	bf0c      	ite	eq
 800fb3e:	2308      	moveq	r3, #8
 800fb40:	230a      	movne	r3, #10
 800fb42:	e7d3      	b.n	800faec <_strtoul_l.constprop.0+0x3c>
 800fb44:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800fb48:	f1bc 0f19 	cmp.w	ip, #25
 800fb4c:	d801      	bhi.n	800fb52 <_strtoul_l.constprop.0+0xa2>
 800fb4e:	3c37      	subs	r4, #55	@ 0x37
 800fb50:	e7dc      	b.n	800fb0c <_strtoul_l.constprop.0+0x5c>
 800fb52:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800fb56:	f1bc 0f19 	cmp.w	ip, #25
 800fb5a:	d804      	bhi.n	800fb66 <_strtoul_l.constprop.0+0xb6>
 800fb5c:	3c57      	subs	r4, #87	@ 0x57
 800fb5e:	e7d5      	b.n	800fb0c <_strtoul_l.constprop.0+0x5c>
 800fb60:	f04f 36ff 	mov.w	r6, #4294967295
 800fb64:	e7df      	b.n	800fb26 <_strtoul_l.constprop.0+0x76>
 800fb66:	1c73      	adds	r3, r6, #1
 800fb68:	d106      	bne.n	800fb78 <_strtoul_l.constprop.0+0xc8>
 800fb6a:	2322      	movs	r3, #34	@ 0x22
 800fb6c:	f8ce 3000 	str.w	r3, [lr]
 800fb70:	4630      	mov	r0, r6
 800fb72:	b932      	cbnz	r2, 800fb82 <_strtoul_l.constprop.0+0xd2>
 800fb74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb78:	b107      	cbz	r7, 800fb7c <_strtoul_l.constprop.0+0xcc>
 800fb7a:	4240      	negs	r0, r0
 800fb7c:	2a00      	cmp	r2, #0
 800fb7e:	d0f9      	beq.n	800fb74 <_strtoul_l.constprop.0+0xc4>
 800fb80:	b106      	cbz	r6, 800fb84 <_strtoul_l.constprop.0+0xd4>
 800fb82:	1e69      	subs	r1, r5, #1
 800fb84:	6011      	str	r1, [r2, #0]
 800fb86:	e7f5      	b.n	800fb74 <_strtoul_l.constprop.0+0xc4>
 800fb88:	080115a5 	.word	0x080115a5

0800fb8c <_strtoul_r>:
 800fb8c:	f7ff bf90 	b.w	800fab0 <_strtoul_l.constprop.0>

0800fb90 <__ascii_wctomb>:
 800fb90:	4603      	mov	r3, r0
 800fb92:	4608      	mov	r0, r1
 800fb94:	b141      	cbz	r1, 800fba8 <__ascii_wctomb+0x18>
 800fb96:	2aff      	cmp	r2, #255	@ 0xff
 800fb98:	d904      	bls.n	800fba4 <__ascii_wctomb+0x14>
 800fb9a:	228a      	movs	r2, #138	@ 0x8a
 800fb9c:	601a      	str	r2, [r3, #0]
 800fb9e:	f04f 30ff 	mov.w	r0, #4294967295
 800fba2:	4770      	bx	lr
 800fba4:	700a      	strb	r2, [r1, #0]
 800fba6:	2001      	movs	r0, #1
 800fba8:	4770      	bx	lr
	...

0800fbac <fiprintf>:
 800fbac:	b40e      	push	{r1, r2, r3}
 800fbae:	b503      	push	{r0, r1, lr}
 800fbb0:	4601      	mov	r1, r0
 800fbb2:	ab03      	add	r3, sp, #12
 800fbb4:	4805      	ldr	r0, [pc, #20]	@ (800fbcc <fiprintf+0x20>)
 800fbb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbba:	6800      	ldr	r0, [r0, #0]
 800fbbc:	9301      	str	r3, [sp, #4]
 800fbbe:	f7fe ff3b 	bl	800ea38 <_vfiprintf_r>
 800fbc2:	b002      	add	sp, #8
 800fbc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbc8:	b003      	add	sp, #12
 800fbca:	4770      	bx	lr
 800fbcc:	20000038 	.word	0x20000038

0800fbd0 <abort>:
 800fbd0:	b508      	push	{r3, lr}
 800fbd2:	2006      	movs	r0, #6
 800fbd4:	f000 f834 	bl	800fc40 <raise>
 800fbd8:	2001      	movs	r0, #1
 800fbda:	f7f4 fe33 	bl	8004844 <_exit>

0800fbde <_malloc_usable_size_r>:
 800fbde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbe2:	1f18      	subs	r0, r3, #4
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	bfbc      	itt	lt
 800fbe8:	580b      	ldrlt	r3, [r1, r0]
 800fbea:	18c0      	addlt	r0, r0, r3
 800fbec:	4770      	bx	lr

0800fbee <_raise_r>:
 800fbee:	291f      	cmp	r1, #31
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	4605      	mov	r5, r0
 800fbf4:	460c      	mov	r4, r1
 800fbf6:	d904      	bls.n	800fc02 <_raise_r+0x14>
 800fbf8:	2316      	movs	r3, #22
 800fbfa:	6003      	str	r3, [r0, #0]
 800fbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800fc00:	bd38      	pop	{r3, r4, r5, pc}
 800fc02:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc04:	b112      	cbz	r2, 800fc0c <_raise_r+0x1e>
 800fc06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc0a:	b94b      	cbnz	r3, 800fc20 <_raise_r+0x32>
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	f000 f831 	bl	800fc74 <_getpid_r>
 800fc12:	4622      	mov	r2, r4
 800fc14:	4601      	mov	r1, r0
 800fc16:	4628      	mov	r0, r5
 800fc18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc1c:	f000 b818 	b.w	800fc50 <_kill_r>
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d00a      	beq.n	800fc3a <_raise_r+0x4c>
 800fc24:	1c59      	adds	r1, r3, #1
 800fc26:	d103      	bne.n	800fc30 <_raise_r+0x42>
 800fc28:	2316      	movs	r3, #22
 800fc2a:	6003      	str	r3, [r0, #0]
 800fc2c:	2001      	movs	r0, #1
 800fc2e:	e7e7      	b.n	800fc00 <_raise_r+0x12>
 800fc30:	2100      	movs	r1, #0
 800fc32:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fc36:	4620      	mov	r0, r4
 800fc38:	4798      	blx	r3
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	e7e0      	b.n	800fc00 <_raise_r+0x12>
	...

0800fc40 <raise>:
 800fc40:	4b02      	ldr	r3, [pc, #8]	@ (800fc4c <raise+0xc>)
 800fc42:	4601      	mov	r1, r0
 800fc44:	6818      	ldr	r0, [r3, #0]
 800fc46:	f7ff bfd2 	b.w	800fbee <_raise_r>
 800fc4a:	bf00      	nop
 800fc4c:	20000038 	.word	0x20000038

0800fc50 <_kill_r>:
 800fc50:	b538      	push	{r3, r4, r5, lr}
 800fc52:	4d07      	ldr	r5, [pc, #28]	@ (800fc70 <_kill_r+0x20>)
 800fc54:	2300      	movs	r3, #0
 800fc56:	4604      	mov	r4, r0
 800fc58:	4608      	mov	r0, r1
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	602b      	str	r3, [r5, #0]
 800fc5e:	f7f4 fde1 	bl	8004824 <_kill>
 800fc62:	1c43      	adds	r3, r0, #1
 800fc64:	d102      	bne.n	800fc6c <_kill_r+0x1c>
 800fc66:	682b      	ldr	r3, [r5, #0]
 800fc68:	b103      	cbz	r3, 800fc6c <_kill_r+0x1c>
 800fc6a:	6023      	str	r3, [r4, #0]
 800fc6c:	bd38      	pop	{r3, r4, r5, pc}
 800fc6e:	bf00      	nop
 800fc70:	20000ed0 	.word	0x20000ed0

0800fc74 <_getpid_r>:
 800fc74:	f7f4 bdce 	b.w	8004814 <_getpid>

0800fc78 <pow>:
 800fc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7a:	ed2d 8b02 	vpush	{d8}
 800fc7e:	eeb0 8a40 	vmov.f32	s16, s0
 800fc82:	eef0 8a60 	vmov.f32	s17, s1
 800fc86:	ec55 4b11 	vmov	r4, r5, d1
 800fc8a:	f000 f871 	bl	800fd70 <__ieee754_pow>
 800fc8e:	4622      	mov	r2, r4
 800fc90:	462b      	mov	r3, r5
 800fc92:	4620      	mov	r0, r4
 800fc94:	4629      	mov	r1, r5
 800fc96:	ec57 6b10 	vmov	r6, r7, d0
 800fc9a:	f7f0 ff5f 	bl	8000b5c <__aeabi_dcmpun>
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d13b      	bne.n	800fd1a <pow+0xa2>
 800fca2:	ec51 0b18 	vmov	r0, r1, d8
 800fca6:	2200      	movs	r2, #0
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f7f0 ff25 	bl	8000af8 <__aeabi_dcmpeq>
 800fcae:	b1b8      	cbz	r0, 800fce0 <pow+0x68>
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	4629      	mov	r1, r5
 800fcb8:	f7f0 ff1e 	bl	8000af8 <__aeabi_dcmpeq>
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	d146      	bne.n	800fd4e <pow+0xd6>
 800fcc0:	ec45 4b10 	vmov	d0, r4, r5
 800fcc4:	f000 f848 	bl	800fd58 <finite>
 800fcc8:	b338      	cbz	r0, 800fd1a <pow+0xa2>
 800fcca:	2200      	movs	r2, #0
 800fccc:	2300      	movs	r3, #0
 800fcce:	4620      	mov	r0, r4
 800fcd0:	4629      	mov	r1, r5
 800fcd2:	f7f0 ff1b 	bl	8000b0c <__aeabi_dcmplt>
 800fcd6:	b300      	cbz	r0, 800fd1a <pow+0xa2>
 800fcd8:	f7fc f924 	bl	800bf24 <__errno>
 800fcdc:	2322      	movs	r3, #34	@ 0x22
 800fcde:	e01b      	b.n	800fd18 <pow+0xa0>
 800fce0:	ec47 6b10 	vmov	d0, r6, r7
 800fce4:	f000 f838 	bl	800fd58 <finite>
 800fce8:	b9e0      	cbnz	r0, 800fd24 <pow+0xac>
 800fcea:	eeb0 0a48 	vmov.f32	s0, s16
 800fcee:	eef0 0a68 	vmov.f32	s1, s17
 800fcf2:	f000 f831 	bl	800fd58 <finite>
 800fcf6:	b1a8      	cbz	r0, 800fd24 <pow+0xac>
 800fcf8:	ec45 4b10 	vmov	d0, r4, r5
 800fcfc:	f000 f82c 	bl	800fd58 <finite>
 800fd00:	b180      	cbz	r0, 800fd24 <pow+0xac>
 800fd02:	4632      	mov	r2, r6
 800fd04:	463b      	mov	r3, r7
 800fd06:	4630      	mov	r0, r6
 800fd08:	4639      	mov	r1, r7
 800fd0a:	f7f0 ff27 	bl	8000b5c <__aeabi_dcmpun>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	d0e2      	beq.n	800fcd8 <pow+0x60>
 800fd12:	f7fc f907 	bl	800bf24 <__errno>
 800fd16:	2321      	movs	r3, #33	@ 0x21
 800fd18:	6003      	str	r3, [r0, #0]
 800fd1a:	ecbd 8b02 	vpop	{d8}
 800fd1e:	ec47 6b10 	vmov	d0, r6, r7
 800fd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd24:	2200      	movs	r2, #0
 800fd26:	2300      	movs	r3, #0
 800fd28:	4630      	mov	r0, r6
 800fd2a:	4639      	mov	r1, r7
 800fd2c:	f7f0 fee4 	bl	8000af8 <__aeabi_dcmpeq>
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d0f2      	beq.n	800fd1a <pow+0xa2>
 800fd34:	eeb0 0a48 	vmov.f32	s0, s16
 800fd38:	eef0 0a68 	vmov.f32	s1, s17
 800fd3c:	f000 f80c 	bl	800fd58 <finite>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	d0ea      	beq.n	800fd1a <pow+0xa2>
 800fd44:	ec45 4b10 	vmov	d0, r4, r5
 800fd48:	f000 f806 	bl	800fd58 <finite>
 800fd4c:	e7c3      	b.n	800fcd6 <pow+0x5e>
 800fd4e:	4f01      	ldr	r7, [pc, #4]	@ (800fd54 <pow+0xdc>)
 800fd50:	2600      	movs	r6, #0
 800fd52:	e7e2      	b.n	800fd1a <pow+0xa2>
 800fd54:	3ff00000 	.word	0x3ff00000

0800fd58 <finite>:
 800fd58:	b082      	sub	sp, #8
 800fd5a:	ed8d 0b00 	vstr	d0, [sp]
 800fd5e:	9801      	ldr	r0, [sp, #4]
 800fd60:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fd64:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800fd68:	0fc0      	lsrs	r0, r0, #31
 800fd6a:	b002      	add	sp, #8
 800fd6c:	4770      	bx	lr
	...

0800fd70 <__ieee754_pow>:
 800fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	b091      	sub	sp, #68	@ 0x44
 800fd76:	ed8d 1b00 	vstr	d1, [sp]
 800fd7a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fd7e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fd82:	ea5a 0001 	orrs.w	r0, sl, r1
 800fd86:	ec57 6b10 	vmov	r6, r7, d0
 800fd8a:	d113      	bne.n	800fdb4 <__ieee754_pow+0x44>
 800fd8c:	19b3      	adds	r3, r6, r6
 800fd8e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fd92:	4152      	adcs	r2, r2
 800fd94:	4298      	cmp	r0, r3
 800fd96:	4b98      	ldr	r3, [pc, #608]	@ (800fff8 <__ieee754_pow+0x288>)
 800fd98:	4193      	sbcs	r3, r2
 800fd9a:	f080 84ea 	bcs.w	8010772 <__ieee754_pow+0xa02>
 800fd9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fda2:	4630      	mov	r0, r6
 800fda4:	4639      	mov	r1, r7
 800fda6:	f7f0 fa89 	bl	80002bc <__adddf3>
 800fdaa:	ec41 0b10 	vmov	d0, r0, r1
 800fdae:	b011      	add	sp, #68	@ 0x44
 800fdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb4:	4a91      	ldr	r2, [pc, #580]	@ (800fffc <__ieee754_pow+0x28c>)
 800fdb6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fdba:	4590      	cmp	r8, r2
 800fdbc:	463d      	mov	r5, r7
 800fdbe:	4633      	mov	r3, r6
 800fdc0:	d806      	bhi.n	800fdd0 <__ieee754_pow+0x60>
 800fdc2:	d101      	bne.n	800fdc8 <__ieee754_pow+0x58>
 800fdc4:	2e00      	cmp	r6, #0
 800fdc6:	d1ea      	bne.n	800fd9e <__ieee754_pow+0x2e>
 800fdc8:	4592      	cmp	sl, r2
 800fdca:	d801      	bhi.n	800fdd0 <__ieee754_pow+0x60>
 800fdcc:	d10e      	bne.n	800fdec <__ieee754_pow+0x7c>
 800fdce:	b169      	cbz	r1, 800fdec <__ieee754_pow+0x7c>
 800fdd0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fdd4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fdd8:	431d      	orrs	r5, r3
 800fdda:	d1e0      	bne.n	800fd9e <__ieee754_pow+0x2e>
 800fddc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fde0:	18db      	adds	r3, r3, r3
 800fde2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fde6:	4152      	adcs	r2, r2
 800fde8:	429d      	cmp	r5, r3
 800fdea:	e7d4      	b.n	800fd96 <__ieee754_pow+0x26>
 800fdec:	2d00      	cmp	r5, #0
 800fdee:	46c3      	mov	fp, r8
 800fdf0:	da3a      	bge.n	800fe68 <__ieee754_pow+0xf8>
 800fdf2:	4a83      	ldr	r2, [pc, #524]	@ (8010000 <__ieee754_pow+0x290>)
 800fdf4:	4592      	cmp	sl, r2
 800fdf6:	d84d      	bhi.n	800fe94 <__ieee754_pow+0x124>
 800fdf8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fdfc:	4592      	cmp	sl, r2
 800fdfe:	f240 84c7 	bls.w	8010790 <__ieee754_pow+0xa20>
 800fe02:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fe06:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fe0a:	2a14      	cmp	r2, #20
 800fe0c:	dd0f      	ble.n	800fe2e <__ieee754_pow+0xbe>
 800fe0e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fe12:	fa21 f402 	lsr.w	r4, r1, r2
 800fe16:	fa04 f202 	lsl.w	r2, r4, r2
 800fe1a:	428a      	cmp	r2, r1
 800fe1c:	f040 84b8 	bne.w	8010790 <__ieee754_pow+0xa20>
 800fe20:	f004 0401 	and.w	r4, r4, #1
 800fe24:	f1c4 0402 	rsb	r4, r4, #2
 800fe28:	2900      	cmp	r1, #0
 800fe2a:	d158      	bne.n	800fede <__ieee754_pow+0x16e>
 800fe2c:	e00e      	b.n	800fe4c <__ieee754_pow+0xdc>
 800fe2e:	2900      	cmp	r1, #0
 800fe30:	d154      	bne.n	800fedc <__ieee754_pow+0x16c>
 800fe32:	f1c2 0214 	rsb	r2, r2, #20
 800fe36:	fa4a f402 	asr.w	r4, sl, r2
 800fe3a:	fa04 f202 	lsl.w	r2, r4, r2
 800fe3e:	4552      	cmp	r2, sl
 800fe40:	f040 84a3 	bne.w	801078a <__ieee754_pow+0xa1a>
 800fe44:	f004 0401 	and.w	r4, r4, #1
 800fe48:	f1c4 0402 	rsb	r4, r4, #2
 800fe4c:	4a6d      	ldr	r2, [pc, #436]	@ (8010004 <__ieee754_pow+0x294>)
 800fe4e:	4592      	cmp	sl, r2
 800fe50:	d12e      	bne.n	800feb0 <__ieee754_pow+0x140>
 800fe52:	f1b9 0f00 	cmp.w	r9, #0
 800fe56:	f280 8494 	bge.w	8010782 <__ieee754_pow+0xa12>
 800fe5a:	496a      	ldr	r1, [pc, #424]	@ (8010004 <__ieee754_pow+0x294>)
 800fe5c:	4632      	mov	r2, r6
 800fe5e:	463b      	mov	r3, r7
 800fe60:	2000      	movs	r0, #0
 800fe62:	f7f0 fd0b 	bl	800087c <__aeabi_ddiv>
 800fe66:	e7a0      	b.n	800fdaa <__ieee754_pow+0x3a>
 800fe68:	2400      	movs	r4, #0
 800fe6a:	bbc1      	cbnz	r1, 800fede <__ieee754_pow+0x16e>
 800fe6c:	4a63      	ldr	r2, [pc, #396]	@ (800fffc <__ieee754_pow+0x28c>)
 800fe6e:	4592      	cmp	sl, r2
 800fe70:	d1ec      	bne.n	800fe4c <__ieee754_pow+0xdc>
 800fe72:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800fe76:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fe7a:	431a      	orrs	r2, r3
 800fe7c:	f000 8479 	beq.w	8010772 <__ieee754_pow+0xa02>
 800fe80:	4b61      	ldr	r3, [pc, #388]	@ (8010008 <__ieee754_pow+0x298>)
 800fe82:	4598      	cmp	r8, r3
 800fe84:	d908      	bls.n	800fe98 <__ieee754_pow+0x128>
 800fe86:	f1b9 0f00 	cmp.w	r9, #0
 800fe8a:	f2c0 8476 	blt.w	801077a <__ieee754_pow+0xa0a>
 800fe8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe92:	e78a      	b.n	800fdaa <__ieee754_pow+0x3a>
 800fe94:	2402      	movs	r4, #2
 800fe96:	e7e8      	b.n	800fe6a <__ieee754_pow+0xfa>
 800fe98:	f1b9 0f00 	cmp.w	r9, #0
 800fe9c:	f04f 0000 	mov.w	r0, #0
 800fea0:	f04f 0100 	mov.w	r1, #0
 800fea4:	da81      	bge.n	800fdaa <__ieee754_pow+0x3a>
 800fea6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800feaa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800feae:	e77c      	b.n	800fdaa <__ieee754_pow+0x3a>
 800feb0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800feb4:	d106      	bne.n	800fec4 <__ieee754_pow+0x154>
 800feb6:	4632      	mov	r2, r6
 800feb8:	463b      	mov	r3, r7
 800feba:	4630      	mov	r0, r6
 800febc:	4639      	mov	r1, r7
 800febe:	f7f0 fbb3 	bl	8000628 <__aeabi_dmul>
 800fec2:	e772      	b.n	800fdaa <__ieee754_pow+0x3a>
 800fec4:	4a51      	ldr	r2, [pc, #324]	@ (801000c <__ieee754_pow+0x29c>)
 800fec6:	4591      	cmp	r9, r2
 800fec8:	d109      	bne.n	800fede <__ieee754_pow+0x16e>
 800feca:	2d00      	cmp	r5, #0
 800fecc:	db07      	blt.n	800fede <__ieee754_pow+0x16e>
 800fece:	ec47 6b10 	vmov	d0, r6, r7
 800fed2:	b011      	add	sp, #68	@ 0x44
 800fed4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed8:	f000 bd52 	b.w	8010980 <__ieee754_sqrt>
 800fedc:	2400      	movs	r4, #0
 800fede:	ec47 6b10 	vmov	d0, r6, r7
 800fee2:	9302      	str	r3, [sp, #8]
 800fee4:	f000 fc88 	bl	80107f8 <fabs>
 800fee8:	9b02      	ldr	r3, [sp, #8]
 800feea:	ec51 0b10 	vmov	r0, r1, d0
 800feee:	bb53      	cbnz	r3, 800ff46 <__ieee754_pow+0x1d6>
 800fef0:	4b44      	ldr	r3, [pc, #272]	@ (8010004 <__ieee754_pow+0x294>)
 800fef2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d002      	beq.n	800ff00 <__ieee754_pow+0x190>
 800fefa:	f1b8 0f00 	cmp.w	r8, #0
 800fefe:	d122      	bne.n	800ff46 <__ieee754_pow+0x1d6>
 800ff00:	f1b9 0f00 	cmp.w	r9, #0
 800ff04:	da05      	bge.n	800ff12 <__ieee754_pow+0x1a2>
 800ff06:	4602      	mov	r2, r0
 800ff08:	460b      	mov	r3, r1
 800ff0a:	2000      	movs	r0, #0
 800ff0c:	493d      	ldr	r1, [pc, #244]	@ (8010004 <__ieee754_pow+0x294>)
 800ff0e:	f7f0 fcb5 	bl	800087c <__aeabi_ddiv>
 800ff12:	2d00      	cmp	r5, #0
 800ff14:	f6bf af49 	bge.w	800fdaa <__ieee754_pow+0x3a>
 800ff18:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ff1c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ff20:	ea58 0804 	orrs.w	r8, r8, r4
 800ff24:	d108      	bne.n	800ff38 <__ieee754_pow+0x1c8>
 800ff26:	4602      	mov	r2, r0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	4610      	mov	r0, r2
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	f7f0 f9c3 	bl	80002b8 <__aeabi_dsub>
 800ff32:	4602      	mov	r2, r0
 800ff34:	460b      	mov	r3, r1
 800ff36:	e794      	b.n	800fe62 <__ieee754_pow+0xf2>
 800ff38:	2c01      	cmp	r4, #1
 800ff3a:	f47f af36 	bne.w	800fdaa <__ieee754_pow+0x3a>
 800ff3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff42:	4619      	mov	r1, r3
 800ff44:	e731      	b.n	800fdaa <__ieee754_pow+0x3a>
 800ff46:	0feb      	lsrs	r3, r5, #31
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	ea53 0204 	orrs.w	r2, r3, r4
 800ff4e:	d102      	bne.n	800ff56 <__ieee754_pow+0x1e6>
 800ff50:	4632      	mov	r2, r6
 800ff52:	463b      	mov	r3, r7
 800ff54:	e7e9      	b.n	800ff2a <__ieee754_pow+0x1ba>
 800ff56:	3c01      	subs	r4, #1
 800ff58:	431c      	orrs	r4, r3
 800ff5a:	d016      	beq.n	800ff8a <__ieee754_pow+0x21a>
 800ff5c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ffe8 <__ieee754_pow+0x278>
 800ff60:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ff64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff68:	f240 8112 	bls.w	8010190 <__ieee754_pow+0x420>
 800ff6c:	4b28      	ldr	r3, [pc, #160]	@ (8010010 <__ieee754_pow+0x2a0>)
 800ff6e:	459a      	cmp	sl, r3
 800ff70:	4b25      	ldr	r3, [pc, #148]	@ (8010008 <__ieee754_pow+0x298>)
 800ff72:	d916      	bls.n	800ffa2 <__ieee754_pow+0x232>
 800ff74:	4598      	cmp	r8, r3
 800ff76:	d80b      	bhi.n	800ff90 <__ieee754_pow+0x220>
 800ff78:	f1b9 0f00 	cmp.w	r9, #0
 800ff7c:	da0b      	bge.n	800ff96 <__ieee754_pow+0x226>
 800ff7e:	2000      	movs	r0, #0
 800ff80:	b011      	add	sp, #68	@ 0x44
 800ff82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff86:	f000 bcf3 	b.w	8010970 <__math_oflow>
 800ff8a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800fff0 <__ieee754_pow+0x280>
 800ff8e:	e7e7      	b.n	800ff60 <__ieee754_pow+0x1f0>
 800ff90:	f1b9 0f00 	cmp.w	r9, #0
 800ff94:	dcf3      	bgt.n	800ff7e <__ieee754_pow+0x20e>
 800ff96:	2000      	movs	r0, #0
 800ff98:	b011      	add	sp, #68	@ 0x44
 800ff9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff9e:	f000 bcdf 	b.w	8010960 <__math_uflow>
 800ffa2:	4598      	cmp	r8, r3
 800ffa4:	d20c      	bcs.n	800ffc0 <__ieee754_pow+0x250>
 800ffa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	2300      	movs	r3, #0
 800ffae:	f7f0 fdad 	bl	8000b0c <__aeabi_dcmplt>
 800ffb2:	3800      	subs	r0, #0
 800ffb4:	bf18      	it	ne
 800ffb6:	2001      	movne	r0, #1
 800ffb8:	f1b9 0f00 	cmp.w	r9, #0
 800ffbc:	daec      	bge.n	800ff98 <__ieee754_pow+0x228>
 800ffbe:	e7df      	b.n	800ff80 <__ieee754_pow+0x210>
 800ffc0:	4b10      	ldr	r3, [pc, #64]	@ (8010004 <__ieee754_pow+0x294>)
 800ffc2:	4598      	cmp	r8, r3
 800ffc4:	f04f 0200 	mov.w	r2, #0
 800ffc8:	d924      	bls.n	8010014 <__ieee754_pow+0x2a4>
 800ffca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffce:	2300      	movs	r3, #0
 800ffd0:	f7f0 fd9c 	bl	8000b0c <__aeabi_dcmplt>
 800ffd4:	3800      	subs	r0, #0
 800ffd6:	bf18      	it	ne
 800ffd8:	2001      	movne	r0, #1
 800ffda:	f1b9 0f00 	cmp.w	r9, #0
 800ffde:	dccf      	bgt.n	800ff80 <__ieee754_pow+0x210>
 800ffe0:	e7da      	b.n	800ff98 <__ieee754_pow+0x228>
 800ffe2:	bf00      	nop
 800ffe4:	f3af 8000 	nop.w
 800ffe8:	00000000 	.word	0x00000000
 800ffec:	3ff00000 	.word	0x3ff00000
 800fff0:	00000000 	.word	0x00000000
 800fff4:	bff00000 	.word	0xbff00000
 800fff8:	fff00000 	.word	0xfff00000
 800fffc:	7ff00000 	.word	0x7ff00000
 8010000:	433fffff 	.word	0x433fffff
 8010004:	3ff00000 	.word	0x3ff00000
 8010008:	3fefffff 	.word	0x3fefffff
 801000c:	3fe00000 	.word	0x3fe00000
 8010010:	43f00000 	.word	0x43f00000
 8010014:	4b5a      	ldr	r3, [pc, #360]	@ (8010180 <__ieee754_pow+0x410>)
 8010016:	f7f0 f94f 	bl	80002b8 <__aeabi_dsub>
 801001a:	a351      	add	r3, pc, #324	@ (adr r3, 8010160 <__ieee754_pow+0x3f0>)
 801001c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010020:	4604      	mov	r4, r0
 8010022:	460d      	mov	r5, r1
 8010024:	f7f0 fb00 	bl	8000628 <__aeabi_dmul>
 8010028:	a34f      	add	r3, pc, #316	@ (adr r3, 8010168 <__ieee754_pow+0x3f8>)
 801002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002e:	4606      	mov	r6, r0
 8010030:	460f      	mov	r7, r1
 8010032:	4620      	mov	r0, r4
 8010034:	4629      	mov	r1, r5
 8010036:	f7f0 faf7 	bl	8000628 <__aeabi_dmul>
 801003a:	4b52      	ldr	r3, [pc, #328]	@ (8010184 <__ieee754_pow+0x414>)
 801003c:	4682      	mov	sl, r0
 801003e:	468b      	mov	fp, r1
 8010040:	2200      	movs	r2, #0
 8010042:	4620      	mov	r0, r4
 8010044:	4629      	mov	r1, r5
 8010046:	f7f0 faef 	bl	8000628 <__aeabi_dmul>
 801004a:	4602      	mov	r2, r0
 801004c:	460b      	mov	r3, r1
 801004e:	a148      	add	r1, pc, #288	@ (adr r1, 8010170 <__ieee754_pow+0x400>)
 8010050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010054:	f7f0 f930 	bl	80002b8 <__aeabi_dsub>
 8010058:	4622      	mov	r2, r4
 801005a:	462b      	mov	r3, r5
 801005c:	f7f0 fae4 	bl	8000628 <__aeabi_dmul>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	2000      	movs	r0, #0
 8010066:	4948      	ldr	r1, [pc, #288]	@ (8010188 <__ieee754_pow+0x418>)
 8010068:	f7f0 f926 	bl	80002b8 <__aeabi_dsub>
 801006c:	4622      	mov	r2, r4
 801006e:	4680      	mov	r8, r0
 8010070:	4689      	mov	r9, r1
 8010072:	462b      	mov	r3, r5
 8010074:	4620      	mov	r0, r4
 8010076:	4629      	mov	r1, r5
 8010078:	f7f0 fad6 	bl	8000628 <__aeabi_dmul>
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	4640      	mov	r0, r8
 8010082:	4649      	mov	r1, r9
 8010084:	f7f0 fad0 	bl	8000628 <__aeabi_dmul>
 8010088:	a33b      	add	r3, pc, #236	@ (adr r3, 8010178 <__ieee754_pow+0x408>)
 801008a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008e:	f7f0 facb 	bl	8000628 <__aeabi_dmul>
 8010092:	4602      	mov	r2, r0
 8010094:	460b      	mov	r3, r1
 8010096:	4650      	mov	r0, sl
 8010098:	4659      	mov	r1, fp
 801009a:	f7f0 f90d 	bl	80002b8 <__aeabi_dsub>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	4680      	mov	r8, r0
 80100a4:	4689      	mov	r9, r1
 80100a6:	4630      	mov	r0, r6
 80100a8:	4639      	mov	r1, r7
 80100aa:	f7f0 f907 	bl	80002bc <__adddf3>
 80100ae:	2400      	movs	r4, #0
 80100b0:	4632      	mov	r2, r6
 80100b2:	463b      	mov	r3, r7
 80100b4:	4620      	mov	r0, r4
 80100b6:	460d      	mov	r5, r1
 80100b8:	f7f0 f8fe 	bl	80002b8 <__aeabi_dsub>
 80100bc:	4602      	mov	r2, r0
 80100be:	460b      	mov	r3, r1
 80100c0:	4640      	mov	r0, r8
 80100c2:	4649      	mov	r1, r9
 80100c4:	f7f0 f8f8 	bl	80002b8 <__aeabi_dsub>
 80100c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80100d0:	2300      	movs	r3, #0
 80100d2:	9304      	str	r3, [sp, #16]
 80100d4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80100d8:	4606      	mov	r6, r0
 80100da:	460f      	mov	r7, r1
 80100dc:	4652      	mov	r2, sl
 80100de:	465b      	mov	r3, fp
 80100e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100e4:	f7f0 f8e8 	bl	80002b8 <__aeabi_dsub>
 80100e8:	4622      	mov	r2, r4
 80100ea:	462b      	mov	r3, r5
 80100ec:	f7f0 fa9c 	bl	8000628 <__aeabi_dmul>
 80100f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100f4:	4680      	mov	r8, r0
 80100f6:	4689      	mov	r9, r1
 80100f8:	4630      	mov	r0, r6
 80100fa:	4639      	mov	r1, r7
 80100fc:	f7f0 fa94 	bl	8000628 <__aeabi_dmul>
 8010100:	4602      	mov	r2, r0
 8010102:	460b      	mov	r3, r1
 8010104:	4640      	mov	r0, r8
 8010106:	4649      	mov	r1, r9
 8010108:	f7f0 f8d8 	bl	80002bc <__adddf3>
 801010c:	4652      	mov	r2, sl
 801010e:	465b      	mov	r3, fp
 8010110:	4606      	mov	r6, r0
 8010112:	460f      	mov	r7, r1
 8010114:	4620      	mov	r0, r4
 8010116:	4629      	mov	r1, r5
 8010118:	f7f0 fa86 	bl	8000628 <__aeabi_dmul>
 801011c:	460b      	mov	r3, r1
 801011e:	4602      	mov	r2, r0
 8010120:	4680      	mov	r8, r0
 8010122:	4689      	mov	r9, r1
 8010124:	4630      	mov	r0, r6
 8010126:	4639      	mov	r1, r7
 8010128:	f7f0 f8c8 	bl	80002bc <__adddf3>
 801012c:	4b17      	ldr	r3, [pc, #92]	@ (801018c <__ieee754_pow+0x41c>)
 801012e:	4299      	cmp	r1, r3
 8010130:	4604      	mov	r4, r0
 8010132:	460d      	mov	r5, r1
 8010134:	468a      	mov	sl, r1
 8010136:	468b      	mov	fp, r1
 8010138:	f340 82ef 	ble.w	801071a <__ieee754_pow+0x9aa>
 801013c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010140:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010144:	4303      	orrs	r3, r0
 8010146:	f000 81e8 	beq.w	801051a <__ieee754_pow+0x7aa>
 801014a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801014e:	2200      	movs	r2, #0
 8010150:	2300      	movs	r3, #0
 8010152:	f7f0 fcdb 	bl	8000b0c <__aeabi_dcmplt>
 8010156:	3800      	subs	r0, #0
 8010158:	bf18      	it	ne
 801015a:	2001      	movne	r0, #1
 801015c:	e710      	b.n	800ff80 <__ieee754_pow+0x210>
 801015e:	bf00      	nop
 8010160:	60000000 	.word	0x60000000
 8010164:	3ff71547 	.word	0x3ff71547
 8010168:	f85ddf44 	.word	0xf85ddf44
 801016c:	3e54ae0b 	.word	0x3e54ae0b
 8010170:	55555555 	.word	0x55555555
 8010174:	3fd55555 	.word	0x3fd55555
 8010178:	652b82fe 	.word	0x652b82fe
 801017c:	3ff71547 	.word	0x3ff71547
 8010180:	3ff00000 	.word	0x3ff00000
 8010184:	3fd00000 	.word	0x3fd00000
 8010188:	3fe00000 	.word	0x3fe00000
 801018c:	408fffff 	.word	0x408fffff
 8010190:	4bd5      	ldr	r3, [pc, #852]	@ (80104e8 <__ieee754_pow+0x778>)
 8010192:	402b      	ands	r3, r5
 8010194:	2200      	movs	r2, #0
 8010196:	b92b      	cbnz	r3, 80101a4 <__ieee754_pow+0x434>
 8010198:	4bd4      	ldr	r3, [pc, #848]	@ (80104ec <__ieee754_pow+0x77c>)
 801019a:	f7f0 fa45 	bl	8000628 <__aeabi_dmul>
 801019e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80101a2:	468b      	mov	fp, r1
 80101a4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80101a8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80101ac:	4413      	add	r3, r2
 80101ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80101b0:	4bcf      	ldr	r3, [pc, #828]	@ (80104f0 <__ieee754_pow+0x780>)
 80101b2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80101b6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80101ba:	459b      	cmp	fp, r3
 80101bc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80101c0:	dd08      	ble.n	80101d4 <__ieee754_pow+0x464>
 80101c2:	4bcc      	ldr	r3, [pc, #816]	@ (80104f4 <__ieee754_pow+0x784>)
 80101c4:	459b      	cmp	fp, r3
 80101c6:	f340 81a5 	ble.w	8010514 <__ieee754_pow+0x7a4>
 80101ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101cc:	3301      	adds	r3, #1
 80101ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80101d0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80101d4:	f04f 0a00 	mov.w	sl, #0
 80101d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80101dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101de:	4bc6      	ldr	r3, [pc, #792]	@ (80104f8 <__ieee754_pow+0x788>)
 80101e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80101e4:	ed93 7b00 	vldr	d7, [r3]
 80101e8:	4629      	mov	r1, r5
 80101ea:	ec53 2b17 	vmov	r2, r3, d7
 80101ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80101f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80101f6:	f7f0 f85f 	bl	80002b8 <__aeabi_dsub>
 80101fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80101fe:	4606      	mov	r6, r0
 8010200:	460f      	mov	r7, r1
 8010202:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010206:	f7f0 f859 	bl	80002bc <__adddf3>
 801020a:	4602      	mov	r2, r0
 801020c:	460b      	mov	r3, r1
 801020e:	2000      	movs	r0, #0
 8010210:	49ba      	ldr	r1, [pc, #744]	@ (80104fc <__ieee754_pow+0x78c>)
 8010212:	f7f0 fb33 	bl	800087c <__aeabi_ddiv>
 8010216:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	4630      	mov	r0, r6
 8010220:	4639      	mov	r1, r7
 8010222:	f7f0 fa01 	bl	8000628 <__aeabi_dmul>
 8010226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801022a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801022e:	106d      	asrs	r5, r5, #1
 8010230:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010234:	f04f 0b00 	mov.w	fp, #0
 8010238:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801023c:	4661      	mov	r1, ip
 801023e:	2200      	movs	r2, #0
 8010240:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010244:	4658      	mov	r0, fp
 8010246:	46e1      	mov	r9, ip
 8010248:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801024c:	4614      	mov	r4, r2
 801024e:	461d      	mov	r5, r3
 8010250:	f7f0 f9ea 	bl	8000628 <__aeabi_dmul>
 8010254:	4602      	mov	r2, r0
 8010256:	460b      	mov	r3, r1
 8010258:	4630      	mov	r0, r6
 801025a:	4639      	mov	r1, r7
 801025c:	f7f0 f82c 	bl	80002b8 <__aeabi_dsub>
 8010260:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010264:	4606      	mov	r6, r0
 8010266:	460f      	mov	r7, r1
 8010268:	4620      	mov	r0, r4
 801026a:	4629      	mov	r1, r5
 801026c:	f7f0 f824 	bl	80002b8 <__aeabi_dsub>
 8010270:	4602      	mov	r2, r0
 8010272:	460b      	mov	r3, r1
 8010274:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010278:	f7f0 f81e 	bl	80002b8 <__aeabi_dsub>
 801027c:	465a      	mov	r2, fp
 801027e:	464b      	mov	r3, r9
 8010280:	f7f0 f9d2 	bl	8000628 <__aeabi_dmul>
 8010284:	4602      	mov	r2, r0
 8010286:	460b      	mov	r3, r1
 8010288:	4630      	mov	r0, r6
 801028a:	4639      	mov	r1, r7
 801028c:	f7f0 f814 	bl	80002b8 <__aeabi_dsub>
 8010290:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010294:	f7f0 f9c8 	bl	8000628 <__aeabi_dmul>
 8010298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801029c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80102a0:	4610      	mov	r0, r2
 80102a2:	4619      	mov	r1, r3
 80102a4:	f7f0 f9c0 	bl	8000628 <__aeabi_dmul>
 80102a8:	a37d      	add	r3, pc, #500	@ (adr r3, 80104a0 <__ieee754_pow+0x730>)
 80102aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ae:	4604      	mov	r4, r0
 80102b0:	460d      	mov	r5, r1
 80102b2:	f7f0 f9b9 	bl	8000628 <__aeabi_dmul>
 80102b6:	a37c      	add	r3, pc, #496	@ (adr r3, 80104a8 <__ieee754_pow+0x738>)
 80102b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102bc:	f7ef fffe 	bl	80002bc <__adddf3>
 80102c0:	4622      	mov	r2, r4
 80102c2:	462b      	mov	r3, r5
 80102c4:	f7f0 f9b0 	bl	8000628 <__aeabi_dmul>
 80102c8:	a379      	add	r3, pc, #484	@ (adr r3, 80104b0 <__ieee754_pow+0x740>)
 80102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ce:	f7ef fff5 	bl	80002bc <__adddf3>
 80102d2:	4622      	mov	r2, r4
 80102d4:	462b      	mov	r3, r5
 80102d6:	f7f0 f9a7 	bl	8000628 <__aeabi_dmul>
 80102da:	a377      	add	r3, pc, #476	@ (adr r3, 80104b8 <__ieee754_pow+0x748>)
 80102dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e0:	f7ef ffec 	bl	80002bc <__adddf3>
 80102e4:	4622      	mov	r2, r4
 80102e6:	462b      	mov	r3, r5
 80102e8:	f7f0 f99e 	bl	8000628 <__aeabi_dmul>
 80102ec:	a374      	add	r3, pc, #464	@ (adr r3, 80104c0 <__ieee754_pow+0x750>)
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	f7ef ffe3 	bl	80002bc <__adddf3>
 80102f6:	4622      	mov	r2, r4
 80102f8:	462b      	mov	r3, r5
 80102fa:	f7f0 f995 	bl	8000628 <__aeabi_dmul>
 80102fe:	a372      	add	r3, pc, #456	@ (adr r3, 80104c8 <__ieee754_pow+0x758>)
 8010300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010304:	f7ef ffda 	bl	80002bc <__adddf3>
 8010308:	4622      	mov	r2, r4
 801030a:	4606      	mov	r6, r0
 801030c:	460f      	mov	r7, r1
 801030e:	462b      	mov	r3, r5
 8010310:	4620      	mov	r0, r4
 8010312:	4629      	mov	r1, r5
 8010314:	f7f0 f988 	bl	8000628 <__aeabi_dmul>
 8010318:	4602      	mov	r2, r0
 801031a:	460b      	mov	r3, r1
 801031c:	4630      	mov	r0, r6
 801031e:	4639      	mov	r1, r7
 8010320:	f7f0 f982 	bl	8000628 <__aeabi_dmul>
 8010324:	465a      	mov	r2, fp
 8010326:	4604      	mov	r4, r0
 8010328:	460d      	mov	r5, r1
 801032a:	464b      	mov	r3, r9
 801032c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010330:	f7ef ffc4 	bl	80002bc <__adddf3>
 8010334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010338:	f7f0 f976 	bl	8000628 <__aeabi_dmul>
 801033c:	4622      	mov	r2, r4
 801033e:	462b      	mov	r3, r5
 8010340:	f7ef ffbc 	bl	80002bc <__adddf3>
 8010344:	465a      	mov	r2, fp
 8010346:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801034a:	464b      	mov	r3, r9
 801034c:	4658      	mov	r0, fp
 801034e:	4649      	mov	r1, r9
 8010350:	f7f0 f96a 	bl	8000628 <__aeabi_dmul>
 8010354:	4b6a      	ldr	r3, [pc, #424]	@ (8010500 <__ieee754_pow+0x790>)
 8010356:	2200      	movs	r2, #0
 8010358:	4606      	mov	r6, r0
 801035a:	460f      	mov	r7, r1
 801035c:	f7ef ffae 	bl	80002bc <__adddf3>
 8010360:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010364:	f7ef ffaa 	bl	80002bc <__adddf3>
 8010368:	46d8      	mov	r8, fp
 801036a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801036e:	460d      	mov	r5, r1
 8010370:	465a      	mov	r2, fp
 8010372:	460b      	mov	r3, r1
 8010374:	4640      	mov	r0, r8
 8010376:	4649      	mov	r1, r9
 8010378:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801037c:	f7f0 f954 	bl	8000628 <__aeabi_dmul>
 8010380:	465c      	mov	r4, fp
 8010382:	4680      	mov	r8, r0
 8010384:	4689      	mov	r9, r1
 8010386:	4b5e      	ldr	r3, [pc, #376]	@ (8010500 <__ieee754_pow+0x790>)
 8010388:	2200      	movs	r2, #0
 801038a:	4620      	mov	r0, r4
 801038c:	4629      	mov	r1, r5
 801038e:	f7ef ff93 	bl	80002b8 <__aeabi_dsub>
 8010392:	4632      	mov	r2, r6
 8010394:	463b      	mov	r3, r7
 8010396:	f7ef ff8f 	bl	80002b8 <__aeabi_dsub>
 801039a:	4602      	mov	r2, r0
 801039c:	460b      	mov	r3, r1
 801039e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80103a2:	f7ef ff89 	bl	80002b8 <__aeabi_dsub>
 80103a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103aa:	f7f0 f93d 	bl	8000628 <__aeabi_dmul>
 80103ae:	4622      	mov	r2, r4
 80103b0:	4606      	mov	r6, r0
 80103b2:	460f      	mov	r7, r1
 80103b4:	462b      	mov	r3, r5
 80103b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80103ba:	f7f0 f935 	bl	8000628 <__aeabi_dmul>
 80103be:	4602      	mov	r2, r0
 80103c0:	460b      	mov	r3, r1
 80103c2:	4630      	mov	r0, r6
 80103c4:	4639      	mov	r1, r7
 80103c6:	f7ef ff79 	bl	80002bc <__adddf3>
 80103ca:	4606      	mov	r6, r0
 80103cc:	460f      	mov	r7, r1
 80103ce:	4602      	mov	r2, r0
 80103d0:	460b      	mov	r3, r1
 80103d2:	4640      	mov	r0, r8
 80103d4:	4649      	mov	r1, r9
 80103d6:	f7ef ff71 	bl	80002bc <__adddf3>
 80103da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80103de:	a33c      	add	r3, pc, #240	@ (adr r3, 80104d0 <__ieee754_pow+0x760>)
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	4658      	mov	r0, fp
 80103e6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80103ea:	460d      	mov	r5, r1
 80103ec:	f7f0 f91c 	bl	8000628 <__aeabi_dmul>
 80103f0:	465c      	mov	r4, fp
 80103f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103f6:	4642      	mov	r2, r8
 80103f8:	464b      	mov	r3, r9
 80103fa:	4620      	mov	r0, r4
 80103fc:	4629      	mov	r1, r5
 80103fe:	f7ef ff5b 	bl	80002b8 <__aeabi_dsub>
 8010402:	4602      	mov	r2, r0
 8010404:	460b      	mov	r3, r1
 8010406:	4630      	mov	r0, r6
 8010408:	4639      	mov	r1, r7
 801040a:	f7ef ff55 	bl	80002b8 <__aeabi_dsub>
 801040e:	a332      	add	r3, pc, #200	@ (adr r3, 80104d8 <__ieee754_pow+0x768>)
 8010410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010414:	f7f0 f908 	bl	8000628 <__aeabi_dmul>
 8010418:	a331      	add	r3, pc, #196	@ (adr r3, 80104e0 <__ieee754_pow+0x770>)
 801041a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041e:	4606      	mov	r6, r0
 8010420:	460f      	mov	r7, r1
 8010422:	4620      	mov	r0, r4
 8010424:	4629      	mov	r1, r5
 8010426:	f7f0 f8ff 	bl	8000628 <__aeabi_dmul>
 801042a:	4602      	mov	r2, r0
 801042c:	460b      	mov	r3, r1
 801042e:	4630      	mov	r0, r6
 8010430:	4639      	mov	r1, r7
 8010432:	f7ef ff43 	bl	80002bc <__adddf3>
 8010436:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010438:	4b32      	ldr	r3, [pc, #200]	@ (8010504 <__ieee754_pow+0x794>)
 801043a:	4413      	add	r3, r2
 801043c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010440:	f7ef ff3c 	bl	80002bc <__adddf3>
 8010444:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010448:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801044a:	f7f0 f883 	bl	8000554 <__aeabi_i2d>
 801044e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010450:	4b2d      	ldr	r3, [pc, #180]	@ (8010508 <__ieee754_pow+0x798>)
 8010452:	4413      	add	r3, r2
 8010454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010458:	4606      	mov	r6, r0
 801045a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801045e:	460f      	mov	r7, r1
 8010460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010464:	f7ef ff2a 	bl	80002bc <__adddf3>
 8010468:	4642      	mov	r2, r8
 801046a:	464b      	mov	r3, r9
 801046c:	f7ef ff26 	bl	80002bc <__adddf3>
 8010470:	4632      	mov	r2, r6
 8010472:	463b      	mov	r3, r7
 8010474:	f7ef ff22 	bl	80002bc <__adddf3>
 8010478:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801047c:	4632      	mov	r2, r6
 801047e:	463b      	mov	r3, r7
 8010480:	4658      	mov	r0, fp
 8010482:	460d      	mov	r5, r1
 8010484:	f7ef ff18 	bl	80002b8 <__aeabi_dsub>
 8010488:	4642      	mov	r2, r8
 801048a:	464b      	mov	r3, r9
 801048c:	f7ef ff14 	bl	80002b8 <__aeabi_dsub>
 8010490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010494:	f7ef ff10 	bl	80002b8 <__aeabi_dsub>
 8010498:	465c      	mov	r4, fp
 801049a:	4602      	mov	r2, r0
 801049c:	e036      	b.n	801050c <__ieee754_pow+0x79c>
 801049e:	bf00      	nop
 80104a0:	4a454eef 	.word	0x4a454eef
 80104a4:	3fca7e28 	.word	0x3fca7e28
 80104a8:	93c9db65 	.word	0x93c9db65
 80104ac:	3fcd864a 	.word	0x3fcd864a
 80104b0:	a91d4101 	.word	0xa91d4101
 80104b4:	3fd17460 	.word	0x3fd17460
 80104b8:	518f264d 	.word	0x518f264d
 80104bc:	3fd55555 	.word	0x3fd55555
 80104c0:	db6fabff 	.word	0xdb6fabff
 80104c4:	3fdb6db6 	.word	0x3fdb6db6
 80104c8:	33333303 	.word	0x33333303
 80104cc:	3fe33333 	.word	0x3fe33333
 80104d0:	e0000000 	.word	0xe0000000
 80104d4:	3feec709 	.word	0x3feec709
 80104d8:	dc3a03fd 	.word	0xdc3a03fd
 80104dc:	3feec709 	.word	0x3feec709
 80104e0:	145b01f5 	.word	0x145b01f5
 80104e4:	be3e2fe0 	.word	0xbe3e2fe0
 80104e8:	7ff00000 	.word	0x7ff00000
 80104ec:	43400000 	.word	0x43400000
 80104f0:	0003988e 	.word	0x0003988e
 80104f4:	000bb679 	.word	0x000bb679
 80104f8:	08011a08 	.word	0x08011a08
 80104fc:	3ff00000 	.word	0x3ff00000
 8010500:	40080000 	.word	0x40080000
 8010504:	080119e8 	.word	0x080119e8
 8010508:	080119f8 	.word	0x080119f8
 801050c:	460b      	mov	r3, r1
 801050e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010512:	e5d7      	b.n	80100c4 <__ieee754_pow+0x354>
 8010514:	f04f 0a01 	mov.w	sl, #1
 8010518:	e65e      	b.n	80101d8 <__ieee754_pow+0x468>
 801051a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80107ec <__ieee754_pow+0xa7c>)
 801051c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010520:	4630      	mov	r0, r6
 8010522:	4639      	mov	r1, r7
 8010524:	f7ef feca 	bl	80002bc <__adddf3>
 8010528:	4642      	mov	r2, r8
 801052a:	e9cd 0100 	strd	r0, r1, [sp]
 801052e:	464b      	mov	r3, r9
 8010530:	4620      	mov	r0, r4
 8010532:	4629      	mov	r1, r5
 8010534:	f7ef fec0 	bl	80002b8 <__aeabi_dsub>
 8010538:	4602      	mov	r2, r0
 801053a:	460b      	mov	r3, r1
 801053c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010540:	f7f0 fb02 	bl	8000b48 <__aeabi_dcmpgt>
 8010544:	2800      	cmp	r0, #0
 8010546:	f47f ae00 	bne.w	801014a <__ieee754_pow+0x3da>
 801054a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801054e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010552:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8010556:	fa43 fa0a 	asr.w	sl, r3, sl
 801055a:	44da      	add	sl, fp
 801055c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010560:	489d      	ldr	r0, [pc, #628]	@ (80107d8 <__ieee754_pow+0xa68>)
 8010562:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010566:	4108      	asrs	r0, r1
 8010568:	ea00 030a 	and.w	r3, r0, sl
 801056c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010570:	f1c1 0114 	rsb	r1, r1, #20
 8010574:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010578:	fa4a fa01 	asr.w	sl, sl, r1
 801057c:	f1bb 0f00 	cmp.w	fp, #0
 8010580:	4640      	mov	r0, r8
 8010582:	4649      	mov	r1, r9
 8010584:	f04f 0200 	mov.w	r2, #0
 8010588:	bfb8      	it	lt
 801058a:	f1ca 0a00 	rsblt	sl, sl, #0
 801058e:	f7ef fe93 	bl	80002b8 <__aeabi_dsub>
 8010592:	4680      	mov	r8, r0
 8010594:	4689      	mov	r9, r1
 8010596:	4632      	mov	r2, r6
 8010598:	463b      	mov	r3, r7
 801059a:	4640      	mov	r0, r8
 801059c:	4649      	mov	r1, r9
 801059e:	f7ef fe8d 	bl	80002bc <__adddf3>
 80105a2:	2400      	movs	r4, #0
 80105a4:	a37c      	add	r3, pc, #496	@ (adr r3, 8010798 <__ieee754_pow+0xa28>)
 80105a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105aa:	4620      	mov	r0, r4
 80105ac:	460d      	mov	r5, r1
 80105ae:	f7f0 f83b 	bl	8000628 <__aeabi_dmul>
 80105b2:	4642      	mov	r2, r8
 80105b4:	e9cd 0100 	strd	r0, r1, [sp]
 80105b8:	464b      	mov	r3, r9
 80105ba:	4620      	mov	r0, r4
 80105bc:	4629      	mov	r1, r5
 80105be:	f7ef fe7b 	bl	80002b8 <__aeabi_dsub>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	4630      	mov	r0, r6
 80105c8:	4639      	mov	r1, r7
 80105ca:	f7ef fe75 	bl	80002b8 <__aeabi_dsub>
 80105ce:	a374      	add	r3, pc, #464	@ (adr r3, 80107a0 <__ieee754_pow+0xa30>)
 80105d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d4:	f7f0 f828 	bl	8000628 <__aeabi_dmul>
 80105d8:	a373      	add	r3, pc, #460	@ (adr r3, 80107a8 <__ieee754_pow+0xa38>)
 80105da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105de:	4680      	mov	r8, r0
 80105e0:	4689      	mov	r9, r1
 80105e2:	4620      	mov	r0, r4
 80105e4:	4629      	mov	r1, r5
 80105e6:	f7f0 f81f 	bl	8000628 <__aeabi_dmul>
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	4640      	mov	r0, r8
 80105f0:	4649      	mov	r1, r9
 80105f2:	f7ef fe63 	bl	80002bc <__adddf3>
 80105f6:	4604      	mov	r4, r0
 80105f8:	460d      	mov	r5, r1
 80105fa:	4602      	mov	r2, r0
 80105fc:	460b      	mov	r3, r1
 80105fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010602:	f7ef fe5b 	bl	80002bc <__adddf3>
 8010606:	e9dd 2300 	ldrd	r2, r3, [sp]
 801060a:	4680      	mov	r8, r0
 801060c:	4689      	mov	r9, r1
 801060e:	f7ef fe53 	bl	80002b8 <__aeabi_dsub>
 8010612:	4602      	mov	r2, r0
 8010614:	460b      	mov	r3, r1
 8010616:	4620      	mov	r0, r4
 8010618:	4629      	mov	r1, r5
 801061a:	f7ef fe4d 	bl	80002b8 <__aeabi_dsub>
 801061e:	4642      	mov	r2, r8
 8010620:	4606      	mov	r6, r0
 8010622:	460f      	mov	r7, r1
 8010624:	464b      	mov	r3, r9
 8010626:	4640      	mov	r0, r8
 8010628:	4649      	mov	r1, r9
 801062a:	f7ef fffd 	bl	8000628 <__aeabi_dmul>
 801062e:	a360      	add	r3, pc, #384	@ (adr r3, 80107b0 <__ieee754_pow+0xa40>)
 8010630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010634:	4604      	mov	r4, r0
 8010636:	460d      	mov	r5, r1
 8010638:	f7ef fff6 	bl	8000628 <__aeabi_dmul>
 801063c:	a35e      	add	r3, pc, #376	@ (adr r3, 80107b8 <__ieee754_pow+0xa48>)
 801063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010642:	f7ef fe39 	bl	80002b8 <__aeabi_dsub>
 8010646:	4622      	mov	r2, r4
 8010648:	462b      	mov	r3, r5
 801064a:	f7ef ffed 	bl	8000628 <__aeabi_dmul>
 801064e:	a35c      	add	r3, pc, #368	@ (adr r3, 80107c0 <__ieee754_pow+0xa50>)
 8010650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010654:	f7ef fe32 	bl	80002bc <__adddf3>
 8010658:	4622      	mov	r2, r4
 801065a:	462b      	mov	r3, r5
 801065c:	f7ef ffe4 	bl	8000628 <__aeabi_dmul>
 8010660:	a359      	add	r3, pc, #356	@ (adr r3, 80107c8 <__ieee754_pow+0xa58>)
 8010662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010666:	f7ef fe27 	bl	80002b8 <__aeabi_dsub>
 801066a:	4622      	mov	r2, r4
 801066c:	462b      	mov	r3, r5
 801066e:	f7ef ffdb 	bl	8000628 <__aeabi_dmul>
 8010672:	a357      	add	r3, pc, #348	@ (adr r3, 80107d0 <__ieee754_pow+0xa60>)
 8010674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010678:	f7ef fe20 	bl	80002bc <__adddf3>
 801067c:	4622      	mov	r2, r4
 801067e:	462b      	mov	r3, r5
 8010680:	f7ef ffd2 	bl	8000628 <__aeabi_dmul>
 8010684:	4602      	mov	r2, r0
 8010686:	460b      	mov	r3, r1
 8010688:	4640      	mov	r0, r8
 801068a:	4649      	mov	r1, r9
 801068c:	f7ef fe14 	bl	80002b8 <__aeabi_dsub>
 8010690:	4604      	mov	r4, r0
 8010692:	460d      	mov	r5, r1
 8010694:	4602      	mov	r2, r0
 8010696:	460b      	mov	r3, r1
 8010698:	4640      	mov	r0, r8
 801069a:	4649      	mov	r1, r9
 801069c:	f7ef ffc4 	bl	8000628 <__aeabi_dmul>
 80106a0:	2200      	movs	r2, #0
 80106a2:	e9cd 0100 	strd	r0, r1, [sp]
 80106a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80106aa:	4620      	mov	r0, r4
 80106ac:	4629      	mov	r1, r5
 80106ae:	f7ef fe03 	bl	80002b8 <__aeabi_dsub>
 80106b2:	4602      	mov	r2, r0
 80106b4:	460b      	mov	r3, r1
 80106b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106ba:	f7f0 f8df 	bl	800087c <__aeabi_ddiv>
 80106be:	4632      	mov	r2, r6
 80106c0:	4604      	mov	r4, r0
 80106c2:	460d      	mov	r5, r1
 80106c4:	463b      	mov	r3, r7
 80106c6:	4640      	mov	r0, r8
 80106c8:	4649      	mov	r1, r9
 80106ca:	f7ef ffad 	bl	8000628 <__aeabi_dmul>
 80106ce:	4632      	mov	r2, r6
 80106d0:	463b      	mov	r3, r7
 80106d2:	f7ef fdf3 	bl	80002bc <__adddf3>
 80106d6:	4602      	mov	r2, r0
 80106d8:	460b      	mov	r3, r1
 80106da:	4620      	mov	r0, r4
 80106dc:	4629      	mov	r1, r5
 80106de:	f7ef fdeb 	bl	80002b8 <__aeabi_dsub>
 80106e2:	4642      	mov	r2, r8
 80106e4:	464b      	mov	r3, r9
 80106e6:	f7ef fde7 	bl	80002b8 <__aeabi_dsub>
 80106ea:	460b      	mov	r3, r1
 80106ec:	4602      	mov	r2, r0
 80106ee:	493b      	ldr	r1, [pc, #236]	@ (80107dc <__ieee754_pow+0xa6c>)
 80106f0:	2000      	movs	r0, #0
 80106f2:	f7ef fde1 	bl	80002b8 <__aeabi_dsub>
 80106f6:	ec41 0b10 	vmov	d0, r0, r1
 80106fa:	ee10 3a90 	vmov	r3, s1
 80106fe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010706:	da30      	bge.n	801076a <__ieee754_pow+0x9fa>
 8010708:	4650      	mov	r0, sl
 801070a:	f000 f87d 	bl	8010808 <scalbn>
 801070e:	ec51 0b10 	vmov	r0, r1, d0
 8010712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010716:	f7ff bbd2 	b.w	800febe <__ieee754_pow+0x14e>
 801071a:	4c31      	ldr	r4, [pc, #196]	@ (80107e0 <__ieee754_pow+0xa70>)
 801071c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010720:	42a3      	cmp	r3, r4
 8010722:	d91a      	bls.n	801075a <__ieee754_pow+0x9ea>
 8010724:	4b2f      	ldr	r3, [pc, #188]	@ (80107e4 <__ieee754_pow+0xa74>)
 8010726:	440b      	add	r3, r1
 8010728:	4303      	orrs	r3, r0
 801072a:	d009      	beq.n	8010740 <__ieee754_pow+0x9d0>
 801072c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010730:	2200      	movs	r2, #0
 8010732:	2300      	movs	r3, #0
 8010734:	f7f0 f9ea 	bl	8000b0c <__aeabi_dcmplt>
 8010738:	3800      	subs	r0, #0
 801073a:	bf18      	it	ne
 801073c:	2001      	movne	r0, #1
 801073e:	e42b      	b.n	800ff98 <__ieee754_pow+0x228>
 8010740:	4642      	mov	r2, r8
 8010742:	464b      	mov	r3, r9
 8010744:	f7ef fdb8 	bl	80002b8 <__aeabi_dsub>
 8010748:	4632      	mov	r2, r6
 801074a:	463b      	mov	r3, r7
 801074c:	f7f0 f9f2 	bl	8000b34 <__aeabi_dcmpge>
 8010750:	2800      	cmp	r0, #0
 8010752:	d1eb      	bne.n	801072c <__ieee754_pow+0x9bc>
 8010754:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80107f4 <__ieee754_pow+0xa84>
 8010758:	e6f7      	b.n	801054a <__ieee754_pow+0x7da>
 801075a:	469a      	mov	sl, r3
 801075c:	4b22      	ldr	r3, [pc, #136]	@ (80107e8 <__ieee754_pow+0xa78>)
 801075e:	459a      	cmp	sl, r3
 8010760:	f63f aef3 	bhi.w	801054a <__ieee754_pow+0x7da>
 8010764:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010768:	e715      	b.n	8010596 <__ieee754_pow+0x826>
 801076a:	ec51 0b10 	vmov	r0, r1, d0
 801076e:	4619      	mov	r1, r3
 8010770:	e7cf      	b.n	8010712 <__ieee754_pow+0x9a2>
 8010772:	491a      	ldr	r1, [pc, #104]	@ (80107dc <__ieee754_pow+0xa6c>)
 8010774:	2000      	movs	r0, #0
 8010776:	f7ff bb18 	b.w	800fdaa <__ieee754_pow+0x3a>
 801077a:	2000      	movs	r0, #0
 801077c:	2100      	movs	r1, #0
 801077e:	f7ff bb14 	b.w	800fdaa <__ieee754_pow+0x3a>
 8010782:	4630      	mov	r0, r6
 8010784:	4639      	mov	r1, r7
 8010786:	f7ff bb10 	b.w	800fdaa <__ieee754_pow+0x3a>
 801078a:	460c      	mov	r4, r1
 801078c:	f7ff bb5e 	b.w	800fe4c <__ieee754_pow+0xdc>
 8010790:	2400      	movs	r4, #0
 8010792:	f7ff bb49 	b.w	800fe28 <__ieee754_pow+0xb8>
 8010796:	bf00      	nop
 8010798:	00000000 	.word	0x00000000
 801079c:	3fe62e43 	.word	0x3fe62e43
 80107a0:	fefa39ef 	.word	0xfefa39ef
 80107a4:	3fe62e42 	.word	0x3fe62e42
 80107a8:	0ca86c39 	.word	0x0ca86c39
 80107ac:	be205c61 	.word	0xbe205c61
 80107b0:	72bea4d0 	.word	0x72bea4d0
 80107b4:	3e663769 	.word	0x3e663769
 80107b8:	c5d26bf1 	.word	0xc5d26bf1
 80107bc:	3ebbbd41 	.word	0x3ebbbd41
 80107c0:	af25de2c 	.word	0xaf25de2c
 80107c4:	3f11566a 	.word	0x3f11566a
 80107c8:	16bebd93 	.word	0x16bebd93
 80107cc:	3f66c16c 	.word	0x3f66c16c
 80107d0:	5555553e 	.word	0x5555553e
 80107d4:	3fc55555 	.word	0x3fc55555
 80107d8:	fff00000 	.word	0xfff00000
 80107dc:	3ff00000 	.word	0x3ff00000
 80107e0:	4090cbff 	.word	0x4090cbff
 80107e4:	3f6f3400 	.word	0x3f6f3400
 80107e8:	3fe00000 	.word	0x3fe00000
 80107ec:	652b82fe 	.word	0x652b82fe
 80107f0:	3c971547 	.word	0x3c971547
 80107f4:	4090cc00 	.word	0x4090cc00

080107f8 <fabs>:
 80107f8:	ec51 0b10 	vmov	r0, r1, d0
 80107fc:	4602      	mov	r2, r0
 80107fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010802:	ec43 2b10 	vmov	d0, r2, r3
 8010806:	4770      	bx	lr

08010808 <scalbn>:
 8010808:	b570      	push	{r4, r5, r6, lr}
 801080a:	ec55 4b10 	vmov	r4, r5, d0
 801080e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010812:	4606      	mov	r6, r0
 8010814:	462b      	mov	r3, r5
 8010816:	b991      	cbnz	r1, 801083e <scalbn+0x36>
 8010818:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801081c:	4323      	orrs	r3, r4
 801081e:	d03d      	beq.n	801089c <scalbn+0x94>
 8010820:	4b35      	ldr	r3, [pc, #212]	@ (80108f8 <scalbn+0xf0>)
 8010822:	4620      	mov	r0, r4
 8010824:	4629      	mov	r1, r5
 8010826:	2200      	movs	r2, #0
 8010828:	f7ef fefe 	bl	8000628 <__aeabi_dmul>
 801082c:	4b33      	ldr	r3, [pc, #204]	@ (80108fc <scalbn+0xf4>)
 801082e:	429e      	cmp	r6, r3
 8010830:	4604      	mov	r4, r0
 8010832:	460d      	mov	r5, r1
 8010834:	da0f      	bge.n	8010856 <scalbn+0x4e>
 8010836:	a328      	add	r3, pc, #160	@ (adr r3, 80108d8 <scalbn+0xd0>)
 8010838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083c:	e01e      	b.n	801087c <scalbn+0x74>
 801083e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010842:	4291      	cmp	r1, r2
 8010844:	d10b      	bne.n	801085e <scalbn+0x56>
 8010846:	4622      	mov	r2, r4
 8010848:	4620      	mov	r0, r4
 801084a:	4629      	mov	r1, r5
 801084c:	f7ef fd36 	bl	80002bc <__adddf3>
 8010850:	4604      	mov	r4, r0
 8010852:	460d      	mov	r5, r1
 8010854:	e022      	b.n	801089c <scalbn+0x94>
 8010856:	460b      	mov	r3, r1
 8010858:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801085c:	3936      	subs	r1, #54	@ 0x36
 801085e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010862:	4296      	cmp	r6, r2
 8010864:	dd0d      	ble.n	8010882 <scalbn+0x7a>
 8010866:	2d00      	cmp	r5, #0
 8010868:	a11d      	add	r1, pc, #116	@ (adr r1, 80108e0 <scalbn+0xd8>)
 801086a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801086e:	da02      	bge.n	8010876 <scalbn+0x6e>
 8010870:	a11d      	add	r1, pc, #116	@ (adr r1, 80108e8 <scalbn+0xe0>)
 8010872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010876:	a31a      	add	r3, pc, #104	@ (adr r3, 80108e0 <scalbn+0xd8>)
 8010878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087c:	f7ef fed4 	bl	8000628 <__aeabi_dmul>
 8010880:	e7e6      	b.n	8010850 <scalbn+0x48>
 8010882:	1872      	adds	r2, r6, r1
 8010884:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010888:	428a      	cmp	r2, r1
 801088a:	dcec      	bgt.n	8010866 <scalbn+0x5e>
 801088c:	2a00      	cmp	r2, #0
 801088e:	dd08      	ble.n	80108a2 <scalbn+0x9a>
 8010890:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010894:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010898:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801089c:	ec45 4b10 	vmov	d0, r4, r5
 80108a0:	bd70      	pop	{r4, r5, r6, pc}
 80108a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80108a6:	da08      	bge.n	80108ba <scalbn+0xb2>
 80108a8:	2d00      	cmp	r5, #0
 80108aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80108d8 <scalbn+0xd0>)
 80108ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108b0:	dac1      	bge.n	8010836 <scalbn+0x2e>
 80108b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80108f0 <scalbn+0xe8>)
 80108b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108b8:	e7bd      	b.n	8010836 <scalbn+0x2e>
 80108ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80108be:	3236      	adds	r2, #54	@ 0x36
 80108c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80108c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80108c8:	4620      	mov	r0, r4
 80108ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010900 <scalbn+0xf8>)
 80108cc:	4629      	mov	r1, r5
 80108ce:	2200      	movs	r2, #0
 80108d0:	e7d4      	b.n	801087c <scalbn+0x74>
 80108d2:	bf00      	nop
 80108d4:	f3af 8000 	nop.w
 80108d8:	c2f8f359 	.word	0xc2f8f359
 80108dc:	01a56e1f 	.word	0x01a56e1f
 80108e0:	8800759c 	.word	0x8800759c
 80108e4:	7e37e43c 	.word	0x7e37e43c
 80108e8:	8800759c 	.word	0x8800759c
 80108ec:	fe37e43c 	.word	0xfe37e43c
 80108f0:	c2f8f359 	.word	0xc2f8f359
 80108f4:	81a56e1f 	.word	0x81a56e1f
 80108f8:	43500000 	.word	0x43500000
 80108fc:	ffff3cb0 	.word	0xffff3cb0
 8010900:	3c900000 	.word	0x3c900000

08010904 <with_errno>:
 8010904:	b510      	push	{r4, lr}
 8010906:	ed2d 8b02 	vpush	{d8}
 801090a:	eeb0 8a40 	vmov.f32	s16, s0
 801090e:	eef0 8a60 	vmov.f32	s17, s1
 8010912:	4604      	mov	r4, r0
 8010914:	f7fb fb06 	bl	800bf24 <__errno>
 8010918:	eeb0 0a48 	vmov.f32	s0, s16
 801091c:	eef0 0a68 	vmov.f32	s1, s17
 8010920:	ecbd 8b02 	vpop	{d8}
 8010924:	6004      	str	r4, [r0, #0]
 8010926:	bd10      	pop	{r4, pc}

08010928 <xflow>:
 8010928:	4603      	mov	r3, r0
 801092a:	b507      	push	{r0, r1, r2, lr}
 801092c:	ec51 0b10 	vmov	r0, r1, d0
 8010930:	b183      	cbz	r3, 8010954 <xflow+0x2c>
 8010932:	4602      	mov	r2, r0
 8010934:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010938:	e9cd 2300 	strd	r2, r3, [sp]
 801093c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010940:	f7ef fe72 	bl	8000628 <__aeabi_dmul>
 8010944:	ec41 0b10 	vmov	d0, r0, r1
 8010948:	2022      	movs	r0, #34	@ 0x22
 801094a:	b003      	add	sp, #12
 801094c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010950:	f7ff bfd8 	b.w	8010904 <with_errno>
 8010954:	4602      	mov	r2, r0
 8010956:	460b      	mov	r3, r1
 8010958:	e7ee      	b.n	8010938 <xflow+0x10>
 801095a:	0000      	movs	r0, r0
 801095c:	0000      	movs	r0, r0
	...

08010960 <__math_uflow>:
 8010960:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010968 <__math_uflow+0x8>
 8010964:	f7ff bfe0 	b.w	8010928 <xflow>
 8010968:	00000000 	.word	0x00000000
 801096c:	10000000 	.word	0x10000000

08010970 <__math_oflow>:
 8010970:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010978 <__math_oflow+0x8>
 8010974:	f7ff bfd8 	b.w	8010928 <xflow>
 8010978:	00000000 	.word	0x00000000
 801097c:	70000000 	.word	0x70000000

08010980 <__ieee754_sqrt>:
 8010980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010984:	4a68      	ldr	r2, [pc, #416]	@ (8010b28 <__ieee754_sqrt+0x1a8>)
 8010986:	ec55 4b10 	vmov	r4, r5, d0
 801098a:	43aa      	bics	r2, r5
 801098c:	462b      	mov	r3, r5
 801098e:	4621      	mov	r1, r4
 8010990:	d110      	bne.n	80109b4 <__ieee754_sqrt+0x34>
 8010992:	4622      	mov	r2, r4
 8010994:	4620      	mov	r0, r4
 8010996:	4629      	mov	r1, r5
 8010998:	f7ef fe46 	bl	8000628 <__aeabi_dmul>
 801099c:	4602      	mov	r2, r0
 801099e:	460b      	mov	r3, r1
 80109a0:	4620      	mov	r0, r4
 80109a2:	4629      	mov	r1, r5
 80109a4:	f7ef fc8a 	bl	80002bc <__adddf3>
 80109a8:	4604      	mov	r4, r0
 80109aa:	460d      	mov	r5, r1
 80109ac:	ec45 4b10 	vmov	d0, r4, r5
 80109b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109b4:	2d00      	cmp	r5, #0
 80109b6:	dc0e      	bgt.n	80109d6 <__ieee754_sqrt+0x56>
 80109b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80109bc:	4322      	orrs	r2, r4
 80109be:	d0f5      	beq.n	80109ac <__ieee754_sqrt+0x2c>
 80109c0:	b19d      	cbz	r5, 80109ea <__ieee754_sqrt+0x6a>
 80109c2:	4622      	mov	r2, r4
 80109c4:	4620      	mov	r0, r4
 80109c6:	4629      	mov	r1, r5
 80109c8:	f7ef fc76 	bl	80002b8 <__aeabi_dsub>
 80109cc:	4602      	mov	r2, r0
 80109ce:	460b      	mov	r3, r1
 80109d0:	f7ef ff54 	bl	800087c <__aeabi_ddiv>
 80109d4:	e7e8      	b.n	80109a8 <__ieee754_sqrt+0x28>
 80109d6:	152a      	asrs	r2, r5, #20
 80109d8:	d115      	bne.n	8010a06 <__ieee754_sqrt+0x86>
 80109da:	2000      	movs	r0, #0
 80109dc:	e009      	b.n	80109f2 <__ieee754_sqrt+0x72>
 80109de:	0acb      	lsrs	r3, r1, #11
 80109e0:	3a15      	subs	r2, #21
 80109e2:	0549      	lsls	r1, r1, #21
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d0fa      	beq.n	80109de <__ieee754_sqrt+0x5e>
 80109e8:	e7f7      	b.n	80109da <__ieee754_sqrt+0x5a>
 80109ea:	462a      	mov	r2, r5
 80109ec:	e7fa      	b.n	80109e4 <__ieee754_sqrt+0x64>
 80109ee:	005b      	lsls	r3, r3, #1
 80109f0:	3001      	adds	r0, #1
 80109f2:	02dc      	lsls	r4, r3, #11
 80109f4:	d5fb      	bpl.n	80109ee <__ieee754_sqrt+0x6e>
 80109f6:	1e44      	subs	r4, r0, #1
 80109f8:	1b12      	subs	r2, r2, r4
 80109fa:	f1c0 0420 	rsb	r4, r0, #32
 80109fe:	fa21 f404 	lsr.w	r4, r1, r4
 8010a02:	4323      	orrs	r3, r4
 8010a04:	4081      	lsls	r1, r0
 8010a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a0a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a12:	07d2      	lsls	r2, r2, #31
 8010a14:	bf5c      	itt	pl
 8010a16:	005b      	lslpl	r3, r3, #1
 8010a18:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010a1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010a20:	bf58      	it	pl
 8010a22:	0049      	lslpl	r1, r1, #1
 8010a24:	2600      	movs	r6, #0
 8010a26:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010a2a:	106d      	asrs	r5, r5, #1
 8010a2c:	0049      	lsls	r1, r1, #1
 8010a2e:	2016      	movs	r0, #22
 8010a30:	4632      	mov	r2, r6
 8010a32:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010a36:	1917      	adds	r7, r2, r4
 8010a38:	429f      	cmp	r7, r3
 8010a3a:	bfde      	ittt	le
 8010a3c:	193a      	addle	r2, r7, r4
 8010a3e:	1bdb      	suble	r3, r3, r7
 8010a40:	1936      	addle	r6, r6, r4
 8010a42:	0fcf      	lsrs	r7, r1, #31
 8010a44:	3801      	subs	r0, #1
 8010a46:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010a4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010a4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010a52:	d1f0      	bne.n	8010a36 <__ieee754_sqrt+0xb6>
 8010a54:	4604      	mov	r4, r0
 8010a56:	2720      	movs	r7, #32
 8010a58:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	eb00 0e0c 	add.w	lr, r0, ip
 8010a62:	db02      	blt.n	8010a6a <__ieee754_sqrt+0xea>
 8010a64:	d113      	bne.n	8010a8e <__ieee754_sqrt+0x10e>
 8010a66:	458e      	cmp	lr, r1
 8010a68:	d811      	bhi.n	8010a8e <__ieee754_sqrt+0x10e>
 8010a6a:	f1be 0f00 	cmp.w	lr, #0
 8010a6e:	eb0e 000c 	add.w	r0, lr, ip
 8010a72:	da42      	bge.n	8010afa <__ieee754_sqrt+0x17a>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	db40      	blt.n	8010afa <__ieee754_sqrt+0x17a>
 8010a78:	f102 0801 	add.w	r8, r2, #1
 8010a7c:	1a9b      	subs	r3, r3, r2
 8010a7e:	458e      	cmp	lr, r1
 8010a80:	bf88      	it	hi
 8010a82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010a86:	eba1 010e 	sub.w	r1, r1, lr
 8010a8a:	4464      	add	r4, ip
 8010a8c:	4642      	mov	r2, r8
 8010a8e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010a92:	3f01      	subs	r7, #1
 8010a94:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010a98:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010a9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010aa0:	d1dc      	bne.n	8010a5c <__ieee754_sqrt+0xdc>
 8010aa2:	4319      	orrs	r1, r3
 8010aa4:	d01b      	beq.n	8010ade <__ieee754_sqrt+0x15e>
 8010aa6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010b2c <__ieee754_sqrt+0x1ac>
 8010aaa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010b30 <__ieee754_sqrt+0x1b0>
 8010aae:	e9da 0100 	ldrd	r0, r1, [sl]
 8010ab2:	e9db 2300 	ldrd	r2, r3, [fp]
 8010ab6:	f7ef fbff 	bl	80002b8 <__aeabi_dsub>
 8010aba:	e9da 8900 	ldrd	r8, r9, [sl]
 8010abe:	4602      	mov	r2, r0
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	4640      	mov	r0, r8
 8010ac4:	4649      	mov	r1, r9
 8010ac6:	f7f0 f82b 	bl	8000b20 <__aeabi_dcmple>
 8010aca:	b140      	cbz	r0, 8010ade <__ieee754_sqrt+0x15e>
 8010acc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010ad0:	e9da 0100 	ldrd	r0, r1, [sl]
 8010ad4:	e9db 2300 	ldrd	r2, r3, [fp]
 8010ad8:	d111      	bne.n	8010afe <__ieee754_sqrt+0x17e>
 8010ada:	3601      	adds	r6, #1
 8010adc:	463c      	mov	r4, r7
 8010ade:	1072      	asrs	r2, r6, #1
 8010ae0:	0863      	lsrs	r3, r4, #1
 8010ae2:	07f1      	lsls	r1, r6, #31
 8010ae4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010ae8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010aec:	bf48      	it	mi
 8010aee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010af2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010af6:	4618      	mov	r0, r3
 8010af8:	e756      	b.n	80109a8 <__ieee754_sqrt+0x28>
 8010afa:	4690      	mov	r8, r2
 8010afc:	e7be      	b.n	8010a7c <__ieee754_sqrt+0xfc>
 8010afe:	f7ef fbdd 	bl	80002bc <__adddf3>
 8010b02:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b06:	4602      	mov	r2, r0
 8010b08:	460b      	mov	r3, r1
 8010b0a:	4640      	mov	r0, r8
 8010b0c:	4649      	mov	r1, r9
 8010b0e:	f7ef fffd 	bl	8000b0c <__aeabi_dcmplt>
 8010b12:	b120      	cbz	r0, 8010b1e <__ieee754_sqrt+0x19e>
 8010b14:	1ca0      	adds	r0, r4, #2
 8010b16:	bf08      	it	eq
 8010b18:	3601      	addeq	r6, #1
 8010b1a:	3402      	adds	r4, #2
 8010b1c:	e7df      	b.n	8010ade <__ieee754_sqrt+0x15e>
 8010b1e:	1c63      	adds	r3, r4, #1
 8010b20:	f023 0401 	bic.w	r4, r3, #1
 8010b24:	e7db      	b.n	8010ade <__ieee754_sqrt+0x15e>
 8010b26:	bf00      	nop
 8010b28:	7ff00000 	.word	0x7ff00000
 8010b2c:	20000200 	.word	0x20000200
 8010b30:	200001f8 	.word	0x200001f8

08010b34 <_init>:
 8010b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b36:	bf00      	nop
 8010b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b3a:	bc08      	pop	{r3}
 8010b3c:	469e      	mov	lr, r3
 8010b3e:	4770      	bx	lr

08010b40 <_fini>:
 8010b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b42:	bf00      	nop
 8010b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b46:	bc08      	pop	{r3}
 8010b48:	469e      	mov	lr, r3
 8010b4a:	4770      	bx	lr
