
heart_rate_I2C_combined_NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000815c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08008300  08008300  00009300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab0  08008ab0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008ab0  08008ab0  00009ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab8  08008ab8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab8  08008ab8  00009ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008abc  08008abc  00009abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008ac0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  200001d8  08008c94  0000a1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08008c94  0000a698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d75  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6e  00000000  00000000  0000ff79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  00011ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000507  00000000  00000000  000121f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c8c  00000000  00000000  000126f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e55  00000000  00000000  00029383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086267  00000000  00000000  000321d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b843f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f10  00000000  00000000  000b8484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000bb394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080082e4 	.word	0x080082e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080082e4 	.word	0x080082e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <millis>:
}



uint64_t millis()
	{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffa:	b672      	cpsid	i
}
 8000ffc:	bf00      	nop
	__disable_irq();
	uint64_t ml=mil;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <millis+0x2c>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001008:	b662      	cpsie	i
}
 800100a:	bf00      	nop
	__enable_irq();
	return ml;
 800100c:	e9d7 2300 	ldrd	r2, r3, [r7]
	}
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200001f8 	.word	0x200001f8

08001024 <delay>:



void delay(uint32_t time)
	{
 8001024:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]

	uint64_t start=millis();
 800102e:	f7ff ffe1 	bl	8000ff4 <millis>
 8001032:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while((millis() - start) < time);
 8001036:	bf00      	nop
 8001038:	f7ff ffdc 	bl	8000ff4 <millis>
 800103c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001040:	1a84      	subs	r4, r0, r2
 8001042:	eb61 0503 	sbc.w	r5, r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	4698      	mov	r8, r3
 800104c:	4691      	mov	r9, r2
 800104e:	4544      	cmp	r4, r8
 8001050:	eb75 0309 	sbcs.w	r3, r5, r9
 8001054:	d3f0      	bcc.n	8001038 <delay+0x14>

	}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001064 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	mil++;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <SysTick_Handler+0x20>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	1c50      	adds	r0, r2, #1
 8001070:	f143 0100 	adc.w	r1, r3, #0
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <SysTick_Handler+0x20>)
 8001076:	e9c3 0100 	strd	r0, r1, [r3]
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	200001f8 	.word	0x200001f8

08001088 <I2C_init_config>:
 */

#include <I2C_driver.h>
#include"delay.h"

void I2C_init_config(){
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800108c:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <I2C_init_config+0xdc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	4a34      	ldr	r2, [pc, #208]	@ (8001164 <I2C_init_config+0xdc>)
 8001092:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001096:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; //send clock for I2C1 and port B
 8001098:	4b32      	ldr	r3, [pc, #200]	@ (8001164 <I2C_init_config+0xdc>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	4a31      	ldr	r2, [pc, #196]	@ (8001164 <I2C_init_config+0xdc>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	6313      	str	r3, [r2, #48]	@ 0x30

	//declare as alternate func
	MODIFY_FIELD(GPIOB->MODER,GPIO_MODER_MODER8,ESF_GPIO_MODER_ALT_FUNC);
 80010a4:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <I2C_init_config+0xe0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80010ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001168 <I2C_init_config+0xe0>)
 80010ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b2:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER,GPIO_MODER_MODER9,ESF_GPIO_MODER_ALT_FUNC);
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <I2C_init_config+0xe0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80010bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001168 <I2C_init_config+0xe0>)
 80010be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010c2:	6013      	str	r3, [r2, #0]

	//PB8 scl PB9 sda
	MODIFY_FIELD(GPIOB->AFR[1], GPIO_AFRH_AFSEL8, 4);
 80010c4:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <I2C_init_config+0xe0>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c8:	f023 030f 	bic.w	r3, r3, #15
 80010cc:	4a26      	ldr	r2, [pc, #152]	@ (8001168 <I2C_init_config+0xe0>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6253      	str	r3, [r2, #36]	@ 0x24
	MODIFY_FIELD(GPIOB->AFR[1], GPIO_AFRH_AFSEL9, 4);
 80010d4:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <I2C_init_config+0xe0>)
 80010d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80010dc:	4a22      	ldr	r2, [pc, #136]	@ (8001168 <I2C_init_config+0xe0>)
 80010de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010e2:	6253      	str	r3, [r2, #36]	@ 0x24

	//configure as outout open drain
	MODIFY_FIELD(GPIOB->OTYPER,GPIO_OTYPER_OT8,1);
 80010e4:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <I2C_init_config+0xe0>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001168 <I2C_init_config+0xe0>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ee:	6053      	str	r3, [r2, #4]
	MODIFY_FIELD(GPIOB->OTYPER,GPIO_OTYPER_OT9,1);
 80010f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <I2C_init_config+0xe0>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001168 <I2C_init_config+0xe0>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fa:	6053      	str	r3, [r2, #4]

	//set speed
	GPIOB->OSPEEDR|=(3<<16)|(3<<18);
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <I2C_init_config+0xe0>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a19      	ldr	r2, [pc, #100]	@ (8001168 <I2C_init_config+0xe0>)
 8001102:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8001106:	6093      	str	r3, [r2, #8]

	//select pull up
	GPIOB->PUPDR|=(1<<16)|(1<<18);
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <I2C_init_config+0xe0>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a16      	ldr	r2, [pc, #88]	@ (8001168 <I2C_init_config+0xe0>)
 800110e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8001112:	60d3      	str	r3, [r2, #12]

	//i2c setup begins
	//first reset i2c
	I2C1->CR1 = I2C_CR1_SWRST;
 8001114:	4b15      	ldr	r3, [pc, #84]	@ (800116c <I2C_init_config+0xe4>)
 8001116:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800111a:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <I2C_init_config+0xe4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a12      	ldr	r2, [pc, #72]	@ (800116c <I2C_init_config+0xe4>)
 8001122:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001126:	6013      	str	r3, [r2, #0]

	//setup peripherla clock freq
	I2C1->CR2 |= 0x18<<0;// its 24 mhz hex of 24 ! see ioc file
 8001128:	4b10      	ldr	r3, [pc, #64]	@ (800116c <I2C_init_config+0xe4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4a0f      	ldr	r2, [pc, #60]	@ (800116c <I2C_init_config+0xe4>)
 800112e:	f043 0318 	orr.w	r3, r3, #24
 8001132:	6053      	str	r3, [r2, #4]

	//i2c ccrr value see thigh calc its 120 in decimal 1000+4000/(1/pckl which is 24))
	I2C1->CCR|=0x78<<0;
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <I2C_init_config+0xe4>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	4a0c      	ldr	r2, [pc, #48]	@ (800116c <I2C_init_config+0xe4>)
 800113a:	f043 0378 	orr.w	r3, r3, #120	@ 0x78
 800113e:	61d3      	str	r3, [r2, #28]

	//set trise
	I2C1->TRISE|=0x19<<0; //1000/(1pcll)+1
 8001140:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <I2C_init_config+0xe4>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4a09      	ldr	r2, [pc, #36]	@ (800116c <I2C_init_config+0xe4>)
 8001146:	f043 0319 	orr.w	r3, r3, #25
 800114a:	6213      	str	r3, [r2, #32]

	//enable i2c peripheral
	I2C1->CR1 |= I2C_CR1_PE;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <I2C_init_config+0xe4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a06      	ldr	r2, [pc, #24]	@ (800116c <I2C_init_config+0xe4>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6013      	str	r3, [r2, #0]

}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40020400 	.word	0x40020400
 800116c:	40005400 	.word	0x40005400

08001170 <I2C_START_COMS>:

void I2C_START_COMS(){
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	//start bit
	I2C1->CR1|=I2C_CR1_ACK; //enable ACK
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <I2C_START_COMS+0x34>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <I2C_START_COMS+0x34>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117e:	6013      	str	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_START;
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <I2C_START_COMS+0x34>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <I2C_START_COMS+0x34>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118a:	6013      	str	r3, [r2, #0]
	while (I2C1->CR2 & I2C_SR1_SB){}// wait for start condition to generate
 800118c:	bf00      	nop
 800118e:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <I2C_START_COMS+0x34>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f9      	bne.n	800118e <I2C_START_COMS+0x1e>
	delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff ff42 	bl	8001024 <delay>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40005400 	.word	0x40005400

080011a8 <I2C_WRITE_DATA>:

void I2C_WRITE_DATA(uint8_t data){
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 &I2C_SR1_TXE));  // wait for TXE bit to set
 80011b2:	bf00      	nop
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <I2C_WRITE_DATA+0x3c>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f9      	beq.n	80011b4 <I2C_WRITE_DATA+0xc>
	I2C1->DR = data;
 80011c0:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <I2C_WRITE_DATA+0x3c>)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 &I2C_SR1_BTF)); //wait for byte trans
 80011c6:	bf00      	nop
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <I2C_WRITE_DATA+0x3c>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f9      	beq.n	80011c8 <I2C_WRITE_DATA+0x20>
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40005400 	.word	0x40005400

080011e8 <I2C_SEND_ADDRESS>:

void I2C_SEND_ADDRESS(uint8_t address){
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]

	I2C1->DR = address;
 80011f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001224 <I2C_SEND_ADDRESS+0x3c>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	6113      	str	r3, [r2, #16]
	//delay(4);
//	printf("\n \r  1 of addr is %d \n \r",I2C1->SR1 & (1<<1));
	while (!(I2C1->SR1 & (1<<1))); //wait for address bit to be set
 80011f8:	bf00      	nop
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <I2C_SEND_ADDRESS+0x3c>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f9      	beq.n	80011fa <I2C_SEND_ADDRESS+0x12>
	//This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
//	printf("\n \r after 2 of addr is %d \n \r",I2C1->SR1 & (1<<1));
	uint8_t temp_clear=I2C1->SR1 | I2C1->SR2;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <I2C_SEND_ADDRESS+0x3c>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <I2C_SEND_ADDRESS+0x3c>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	73fb      	strb	r3, [r7, #15]
//	printf("\n \r after 3 of addr is %d \n \r",I2C1->SR1 & (1<<1));


}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40005400 	.word	0x40005400

08001228 <I2C_STOP_COMS>:

void I2C_STOP_COMS(){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	I2C1->CR1|=I2C_CR1_STOP; //stop condition
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <I2C_STOP_COMS+0x1c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <I2C_STOP_COMS+0x1c>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001236:	6013      	str	r3, [r2, #0]
   // while (I2C1->CR1 & I2C_CR1_STOP);
	delay(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff fef3 	bl	8001024 <delay>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40005400 	.word	0x40005400

08001248 <I2C_READ>:


void I2C_READ(uint8_t address_slave, uint8_t *buffer_recv,uint8_t recv_buff_size){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4613      	mov	r3, r2
 8001256:	71bb      	strb	r3, [r7, #6]
	uint8_t remaining_bytes=recv_buff_size;
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	73fb      	strb	r3, [r7, #15]
//if only 1
/*. In case a single byte has to be received, the Acknowledge disable is made during EV6
(before ADDR flag is cleared) and the STOP condition generation is made after EV6.*/
	if(recv_buff_size==1){
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d126      	bne.n	80012b0 <I2C_READ+0x68>
		I2C1->DR = address_slave;
 8001262:	4a3c      	ldr	r2, [pc, #240]	@ (8001354 <I2C_READ+0x10c>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 &I2C_SR1_ADDR)); //wait for address bit to be set
 8001268:	bf00      	nop
 800126a:	4b3a      	ldr	r3, [pc, #232]	@ (8001354 <I2C_READ+0x10c>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f9      	beq.n	800126a <I2C_READ+0x22>
		I2C1->CR1 &= ~(1<<10); //clear ack
 8001276:	4b37      	ldr	r3, [pc, #220]	@ (8001354 <I2C_READ+0x10c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a36      	ldr	r2, [pc, #216]	@ (8001354 <I2C_READ+0x10c>)
 800127c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001280:	6013      	str	r3, [r2, #0]
		uint8_t temp_clear=I2C1->SR1 | I2C1->SR2; //ev6
 8001282:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <I2C_READ+0x10c>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b32      	ldr	r3, [pc, #200]	@ (8001354 <I2C_READ+0x10c>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	73bb      	strb	r3, [r7, #14]
		I2C_STOP_COMS();
 8001292:	f7ff ffc9 	bl	8001228 <I2C_STOP_COMS>
		while (!(I2C1->SR1 &I2C_SR1_RXNE));
 8001296:	bf00      	nop
 8001298:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <I2C_READ+0x10c>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <I2C_READ+0x50>
		buffer_recv[0]= I2C1->DR;// recieve data
 80012a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <I2C_READ+0x10c>)
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	701a      	strb	r2, [r3, #0]
		return ;
 80012ae:	e04e      	b.n	800134e <I2C_READ+0x106>
must be cleared just after reading the second last data byte (after second last RxNE
event).
2. In order to generate the Stop/Restart condition, software must set the STOP/START bit
after reading the second last data byte (after the second last RxNE event). */
	else{
		I2C_SEND_ADDRESS(address_slave);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff98 	bl	80011e8 <I2C_SEND_ADDRESS>
		//keep reading and storing in loop also send acks
		while(remaining_bytes>2){
 80012b8:	e019      	b.n	80012ee <I2C_READ+0xa6>
			while (!(I2C1->SR1 &I2C_SR1_RXNE));
 80012ba:	bf00      	nop
 80012bc:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <I2C_READ+0x10c>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f9      	beq.n	80012bc <I2C_READ+0x74>
			buffer_recv[recv_buff_size-remaining_bytes]=I2C1->DR;
 80012c8:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <I2C_READ+0x10c>)
 80012ca:	6919      	ldr	r1, [r3, #16]
 80012cc:	79ba      	ldrb	r2, [r7, #6]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	461a      	mov	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	b2ca      	uxtb	r2, r1
 80012da:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= I2C_CR1_ACK; //send ack master sends this !!
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <I2C_READ+0x10c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001354 <I2C_READ+0x10c>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012e6:	6013      	str	r3, [r2, #0]
			remaining_bytes--;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
		while(remaining_bytes>2){
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d8e2      	bhi.n	80012ba <I2C_READ+0x72>
		}

		//second last byte nack condition
		while (!(I2C1->SR1 &I2C_SR1_RXNE));
 80012f4:	bf00      	nop
 80012f6:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <I2C_READ+0x10c>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f9      	beq.n	80012f6 <I2C_READ+0xae>
		buffer_recv[recv_buff_size-remaining_bytes]=I2C1->DR;
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <I2C_READ+0x10c>)
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	79ba      	ldrb	r2, [r7, #6]
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	461a      	mov	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	b2ca      	uxtb	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1<<10); //clear ack
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <I2C_READ+0x10c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a0e      	ldr	r2, [pc, #56]	@ (8001354 <I2C_READ+0x10c>)
 800131c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001320:	6013      	str	r3, [r2, #0]
		I2C_STOP_COMS();
 8001322:	f7ff ff81 	bl	8001228 <I2C_STOP_COMS>
		remaining_bytes--;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	3b01      	subs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
		//last byte
		while (!(I2C1->SR1 &I2C_SR1_RXNE));
 800132c:	bf00      	nop
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <I2C_READ+0x10c>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f9      	beq.n	800132e <I2C_READ+0xe6>
		buffer_recv[recv_buff_size-remaining_bytes]=I2C1->DR;
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <I2C_READ+0x10c>)
 800133c:	6919      	ldr	r1, [r3, #16]
 800133e:	79ba      	ldrb	r2, [r7, #6]
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	461a      	mov	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	4413      	add	r3, r2
 800134a:	b2ca      	uxtb	r2, r1
 800134c:	701a      	strb	r2, [r3, #0]
	}

}
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40005400 	.word	0x40005400

08001358 <print>:
	#include"utilities.h"
#include<stdio.h>


void print(uint8_t data[], uint32_t len)
	{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	int i=0;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
	while(data[i]){
 8001366:	e009      	b.n	800137c <print+0x24>
		putchar(data[i]);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fb3d 	bl	80049f0 <putchar>
		i++;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
	while(data[i]){
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1ef      	bne.n	8001368 <print+0x10>
	}
	printf("\n \r");
 8001388:	4803      	ldr	r0, [pc, #12]	@ (8001398 <print+0x40>)
 800138a:	f003 fb1f 	bl	80049cc <iprintf>
	}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	08008300 	.word	0x08008300

0800139c <init_CSN_CE_PINS>:

void init_CSN_CE_PINS(){
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <init_CSN_CE_PINS+0x3c>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a4:	4a0c      	ldr	r2, [pc, #48]	@ (80013d8 <init_CSN_CE_PINS+0x3c>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6313      	str	r3, [r2, #48]	@ 0x30
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER4, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <init_CSN_CE_PINS+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013b4:	4a09      	ldr	r2, [pc, #36]	@ (80013dc <init_CSN_CE_PINS+0x40>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ba:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER0, ESF_GPIO_MODER_OUTPUT); // NSS pin for now4 as outpu
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <init_CSN_CE_PINS+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 0303 	bic.w	r3, r3, #3
 80013c4:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <init_CSN_CE_PINS+0x40>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <CSN_SELECT_NRF>:


	void CSN_SELECT_NRF(){
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BR_4; //pull low to enable nrf
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <CSN_SELECT_NRF+0x1c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <CSN_SELECT_NRF+0x1c>)
 80013ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013ee:	6193      	str	r3, [r2, #24]
	}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40020000 	.word	0x40020000

08001400 <CSN_UNSELECT_NRF>:

	void CSN_UNSELECT_NRF(){
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
		  GPIOA->BSRR |= GPIO_BSRR_BS_4; //make high to disable
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <CSN_UNSELECT_NRF+0x1c>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <CSN_UNSELECT_NRF+0x1c>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6193      	str	r3, [r2, #24]
	}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40020000 	.word	0x40020000

08001420 <NRF_ENABLE>:

	void NRF_ENABLE(){
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BS_0;
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <NRF_ENABLE+0x1c>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <NRF_ENABLE+0x1c>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6193      	str	r3, [r2, #24]
	}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40020000 	.word	0x40020000

08001440 <NRF_DISABLE>:

	void NRF_DISABLE(){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
		GPIOA->BSRR |= GPIO_BSRR_BR_0;
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <NRF_DISABLE+0x1c>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a04      	ldr	r2, [pc, #16]	@ (800145c <NRF_DISABLE+0x1c>)
 800144a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144e:	6193      	str	r3, [r2, #24]
	}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40020000 	.word	0x40020000

08001460 <NRF_WRITE_REGISTER>:



	void NRF_WRITE_REGISTER(uint8_t REG_ADDRESS,uint8_t data){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	4613      	mov	r3, r2
 800146e:	71bb      	strb	r3, [r7, #6]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f043 0320 	orr.w	r3, r3, #32
 8001476:	b2db      	uxtb	r3, r3
 8001478:	733b      	strb	r3, [r7, #12]
		trans_buff[1]=data;
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	737b      	strb	r3, [r7, #13]
		CSN_SELECT_NRF();
 800147e:	f7ff ffaf 	bl	80013e0 <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,2);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2102      	movs	r1, #2
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fabd 	bl	8001a08 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 800148e:	f7ff ffb7 	bl	8001400 <CSN_UNSELECT_NRF>

	}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <NRF_WRITE_REG_MULTI_BYTES>:
	void NRF_WRITE_REG_MULTI_BYTES(uint8_t REG_ADDRESS,uint8_t* data_trans,int size_trans){
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
		uint8_t trans_buff[2];
		trans_buff[0]=REG_ADDRESS|W_REGISTER;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	f043 0320 	orr.w	r3, r3, #32
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	753b      	strb	r3, [r7, #20]
		CSN_SELECT_NRF();
 80014b2:	f7ff ff95 	bl	80013e0 <CSN_SELECT_NRF>
		SPI_TX_MULTI(trans_buff,1);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2101      	movs	r1, #1
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 faa3 	bl	8001a08 <SPI_TX_MULTI>
		SPI_TX_MULTI(data_trans,size_trans);
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f000 fa9f 	bl	8001a08 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 80014ca:	f7ff ff99 	bl	8001400 <CSN_UNSELECT_NRF>
	}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <NRF_READ_REGISTER>:

	uint8_t NRF_READ_REGISTER(uint8_t REG_ADDRESS){
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
		uint8_t data_returned=0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
		CSN_SELECT_NRF();
 80014e4:	f7ff ff7c 	bl	80013e0 <CSN_SELECT_NRF>
		SPI_TX_MULTI(&REG_ADDRESS,1);
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	2101      	movs	r1, #1
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fa8b 	bl	8001a08 <SPI_TX_MULTI>
		SPI_READ_MULTI(&data_returned,1);
 80014f2:	f107 030f 	add.w	r3, r7, #15
 80014f6:	2101      	movs	r1, #1
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fabd 	bl	8001a78 <SPI_READ_MULTI>
		CSN_UNSELECT_NRF();
 80014fe:	f7ff ff7f 	bl	8001400 <CSN_UNSELECT_NRF>
		return data_returned;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <NRF_PTX_CONFIG>:
		SPI_TX_MULTI(&REG_ADDRESS,1);
		SPI_READ_MULTI(RECV_BUFFER,RECV_BUFFER_SIZE);
		CSN_UNSELECT_NRF();
	}

	void NRF_PTX_CONFIG(uint8_t *Address, uint8_t channel){
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
		NRF_DISABLE();
 8001518:	f7ff ff92 	bl	8001440 <NRF_DISABLE>
		NRF_WRITE_REGISTER(RF_CH,channel); //select channel
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	4619      	mov	r1, r3
 8001520:	2005      	movs	r0, #5
 8001522:	f7ff ff9d 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR,Address,5); //set address
 8001526:	2205      	movs	r2, #5
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	2010      	movs	r0, #16
 800152c:	f7ff ffb5 	bl	800149a <NRF_WRITE_REG_MULTI_BYTES>

		// un comment belowo code to setup for auto ack
		uint8_t current_pipe_status=NRF_READ_REGISTER(EN_RXADDR);
 8001530:	2002      	movs	r0, #2
 8001532:	f7ff ffd0 	bl	80014d6 <NRF_READ_REGISTER>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
		current_pipe_status=current_pipe_status|(1<<0);//enable pipe 1
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
		NRF_WRITE_REGISTER(EN_RXADDR,current_pipe_status);
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	4619      	mov	r1, r3
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff ff8a 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0,Address,5); //pipe address
 800154c:	2205      	movs	r2, #5
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	200a      	movs	r0, #10
 8001552:	f7ff ffa2 	bl	800149a <NRF_WRITE_REG_MULTI_BYTES>

		NRF_WRITE_REGISTER(CONFIG,0x0a); //powwr on device and keep in tx mode
 8001556:	210a      	movs	r1, #10
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff ff81 	bl	8001460 <NRF_WRITE_REGISTER>
		delay(5);
 800155e:	2005      	movs	r0, #5
 8001560:	f7ff fd60 	bl	8001024 <delay>
		//NRF_ENABLE();
	}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <nrf24_reset>:
		NRF_WRITE_REGISTER(CONFIG,0x0b); //powwr on device and keep in tx mode
		NRF_ENABLE();
	}

	void nrf24_reset(uint8_t REG)
	{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
		if (REG == STATUS)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b07      	cmp	r3, #7
 800157a:	d104      	bne.n	8001586 <nrf24_reset+0x1a>
		{
			NRF_WRITE_REGISTER(STATUS, 0x00);
 800157c:	2100      	movs	r1, #0
 800157e:	2007      	movs	r0, #7
 8001580:	f7ff ff6e 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
		NRF_WRITE_REGISTER(DYNPD, 0);
		NRF_WRITE_REGISTER(FEATURE, 0);
		}
	}
 8001584:	e090      	b.n	80016a8 <nrf24_reset+0x13c>
		else if (REG == FIFO_STATUS)
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b17      	cmp	r3, #23
 800158a:	d104      	bne.n	8001596 <nrf24_reset+0x2a>
			NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 800158c:	2111      	movs	r1, #17
 800158e:	2017      	movs	r0, #23
 8001590:	f7ff ff66 	bl	8001460 <NRF_WRITE_REGISTER>
	}
 8001594:	e088      	b.n	80016a8 <nrf24_reset+0x13c>
		NRF_WRITE_REGISTER(CONFIG, 0x08);
 8001596:	2108      	movs	r1, #8
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff ff61 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3F);
 800159e:	213f      	movs	r1, #63	@ 0x3f
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff ff5d 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_RXADDR, 0x03);
 80015a6:	2103      	movs	r1, #3
 80015a8:	2002      	movs	r0, #2
 80015aa:	f7ff ff59 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_AW, 0x03);
 80015ae:	2103      	movs	r1, #3
 80015b0:	2003      	movs	r0, #3
 80015b2:	f7ff ff55 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0x03);
 80015b6:	2103      	movs	r1, #3
 80015b8:	2004      	movs	r0, #4
 80015ba:	f7ff ff51 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_CH, 0x02);
 80015be:	2102      	movs	r1, #2
 80015c0:	2005      	movs	r0, #5
 80015c2:	f7ff ff4d 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_SETUP, 0x0E);
 80015c6:	210e      	movs	r1, #14
 80015c8:	2006      	movs	r0, #6
 80015ca:	f7ff ff49 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(STATUS, 0x00);
 80015ce:	2100      	movs	r1, #0
 80015d0:	2007      	movs	r0, #7
 80015d2:	f7ff ff45 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(OBSERVE_TX, 0x00);
 80015d6:	2100      	movs	r1, #0
 80015d8:	2008      	movs	r0, #8
 80015da:	f7ff ff41 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(CD, 0x00);
 80015de:	2100      	movs	r1, #0
 80015e0:	2009      	movs	r0, #9
 80015e2:	f7ff ff3d 	bl	8001460 <NRF_WRITE_REGISTER>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80015e6:	4a32      	ldr	r2, [pc, #200]	@ (80016b0 <nrf24_reset+0x144>)
 80015e8:	f107 0318 	add.w	r3, r7, #24
 80015ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f0:	6018      	str	r0, [r3, #0]
 80015f2:	3304      	adds	r3, #4
 80015f4:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0, rx_addr_p0_def, 5);
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	2205      	movs	r2, #5
 80015fc:	4619      	mov	r1, r3
 80015fe:	200a      	movs	r0, #10
 8001600:	f7ff ff4b 	bl	800149a <NRF_WRITE_REG_MULTI_BYTES>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001604:	4a2b      	ldr	r2, [pc, #172]	@ (80016b4 <nrf24_reset+0x148>)
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800160e:	6018      	str	r0, [r3, #0]
 8001610:	3304      	adds	r3, #4
 8001612:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	2205      	movs	r2, #5
 800161a:	4619      	mov	r1, r3
 800161c:	200b      	movs	r0, #11
 800161e:	f7ff ff3c 	bl	800149a <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_ADDR_P2, 0xC3);
 8001622:	21c3      	movs	r1, #195	@ 0xc3
 8001624:	200c      	movs	r0, #12
 8001626:	f7ff ff1b 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P3, 0xC4);
 800162a:	21c4      	movs	r1, #196	@ 0xc4
 800162c:	200d      	movs	r0, #13
 800162e:	f7ff ff17 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P4, 0xC5);
 8001632:	21c5      	movs	r1, #197	@ 0xc5
 8001634:	200e      	movs	r0, #14
 8001636:	f7ff ff13 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_ADDR_P5, 0xC6);
 800163a:	21c6      	movs	r1, #198	@ 0xc6
 800163c:	200f      	movs	r0, #15
 800163e:	f7ff ff0f 	bl	8001460 <NRF_WRITE_REGISTER>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001642:	4a1b      	ldr	r2, [pc, #108]	@ (80016b0 <nrf24_reset+0x144>)
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800164c:	6018      	str	r0, [r3, #0]
 800164e:	3304      	adds	r3, #4
 8001650:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR, tx_addr_def, 5);
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	2205      	movs	r2, #5
 8001658:	4619      	mov	r1, r3
 800165a:	2010      	movs	r0, #16
 800165c:	f7ff ff1d 	bl	800149a <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(RX_PW_P0, 0);
 8001660:	2100      	movs	r1, #0
 8001662:	2011      	movs	r0, #17
 8001664:	f7ff fefc 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P1, 0);
 8001668:	2100      	movs	r1, #0
 800166a:	2012      	movs	r0, #18
 800166c:	f7ff fef8 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P2, 0);
 8001670:	2100      	movs	r1, #0
 8001672:	2013      	movs	r0, #19
 8001674:	f7ff fef4 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P3, 0);
 8001678:	2100      	movs	r1, #0
 800167a:	2014      	movs	r0, #20
 800167c:	f7ff fef0 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P4, 0);
 8001680:	2100      	movs	r1, #0
 8001682:	2015      	movs	r0, #21
 8001684:	f7ff feec 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RX_PW_P5, 0);
 8001688:	2100      	movs	r1, #0
 800168a:	2016      	movs	r0, #22
 800168c:	f7ff fee8 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 8001690:	2111      	movs	r1, #17
 8001692:	2017      	movs	r0, #23
 8001694:	f7ff fee4 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(DYNPD, 0);
 8001698:	2100      	movs	r1, #0
 800169a:	201c      	movs	r0, #28
 800169c:	f7ff fee0 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FEATURE, 0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	201d      	movs	r0, #29
 80016a4:	f7ff fedc 	bl	8001460 <NRF_WRITE_REGISTER>
	}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	08008304 	.word	0x08008304
 80016b4:	0800830c 	.word	0x0800830c

080016b8 <NRF_INIT>:


	void NRF_INIT(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
		SPI_INIT(); //initalize spi comms
 80016bc:	f000 f94a 	bl	8001954 <SPI_INIT>
		init_CSN_CE_PINS();
 80016c0:	f7ff fe6c 	bl	800139c <init_CSN_CE_PINS>
		NRF_DISABLE();
 80016c4:	f7ff febc 	bl	8001440 <NRF_DISABLE>
		nrf24_reset(0);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff ff4f 	bl	800156c <nrf24_reset>
		NRF_WRITE_REGISTER(CONFIG, 0);  // will be configured later
 80016ce:	2100      	movs	r1, #0
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff fec5 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x00);  // No Auto ACK
 80016d6:	2100      	movs	r1, #0
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff fec1 	bl	8001460 <NRF_WRITE_REGISTER>

		/*uncomment below code to enable auto ack stuff*/
		//NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
		//NRF_WRITE_REGISTER(SETUP_RETR, 0x03); // 15 retries, 500µs delay

		NRF_WRITE_REGISTER (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80016de:	2100      	movs	r1, #0
 80016e0:	2002      	movs	r0, #2
 80016e2:	f7ff febd 	bl	8001460 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80016e6:	2103      	movs	r1, #3
 80016e8:	2003      	movs	r0, #3
 80016ea:	f7ff feb9 	bl	8001460 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (SETUP_RETR, 0x00);   // No retransmission
 80016ee:	2100      	movs	r1, #0
 80016f0:	2004      	movs	r0, #4
 80016f2:	f7ff feb5 	bl	8001460 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_CH, 0);  // will be setup during Tx or RX
 80016f6:	2100      	movs	r1, #0
 80016f8:	2005      	movs	r0, #5
 80016fa:	f7ff feb1 	bl	8001460 <NRF_WRITE_REGISTER>

		//enable dynamic payloads on all pipes
		//for DYNP I require EN_AA and Requires EN_DPL and ENAA_P0
		NRF_WRITE_REGISTER (DYNPD, 0x3f);  // will be setup during Tx or RX
 80016fe:	213f      	movs	r1, #63	@ 0x3f
 8001700:	201c      	movs	r0, #28
 8001702:	f7ff fead 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER (FEATURE, 0x6);  // enable dynamic payload length
 8001706:	2106      	movs	r1, #6
 8001708:	201d      	movs	r0, #29
 800170a:	f7ff fea9 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3f);  // No Auto ACK
 800170e:	213f      	movs	r1, #63	@ 0x3f
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fea5 	bl	8001460 <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0xff); // 15 retries, 500µs delay
 8001716:	21ff      	movs	r1, #255	@ 0xff
 8001718:	2004      	movs	r0, #4
 800171a:	f7ff fea1 	bl	8001460 <NRF_WRITE_REGISTER>

		NRF_WRITE_REGISTER (RF_SETUP, 0x0e);   // Power= 0db, data rate = 2Mbps
 800171e:	210e      	movs	r1, #14
 8001720:	2006      	movs	r0, #6
 8001722:	f7ff fe9d 	bl	8001460 <NRF_WRITE_REGISTER>
		//NRF_ENABLE();
	}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}

0800172a <NRD_SEND_CMD>:


	void NRD_SEND_CMD (uint8_t cmd)
	{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
		// Pull the CS Pin LOW to select the device
		CSN_SELECT_NRF();
 8001734:	f7ff fe54 	bl	80013e0 <CSN_SELECT_NRF>

		SPI_TX_MULTI(&cmd, 1);
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	2101      	movs	r1, #1
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f963 	bl	8001a08 <SPI_TX_MULTI>

		// Pull the CS HIGH to release the device
		CSN_UNSELECT_NRF();
 8001742:	f7ff fe5d 	bl	8001400 <CSN_UNSELECT_NRF>
	}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <NRF_TX_DATA>:


	uint8_t NRF_TX_DATA(uint8_t *data_ptr,uint8_t sizeofdata){
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	@ 0x30
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
		uint8_t tx_fifo_stat;
		uint8_t status_reg;
		CSN_SELECT_NRF();
 800175c:	f7ff fe40 	bl	80013e0 <CSN_SELECT_NRF>
	   uint8_t cmd = W_TX_PAYLOAD;
 8001760:	23a0      	movs	r3, #160	@ 0xa0
 8001762:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	  SPI_TX_MULTI( &cmd, 1);
 8001766:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800176a:	2101      	movs	r1, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f94b 	bl	8001a08 <SPI_TX_MULTI>
		SPI_TX_MULTI(data_ptr,sizeofdata);//send payload
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f946 	bl	8001a08 <SPI_TX_MULTI>
		CSN_UNSELECT_NRF();
 800177c:	f7ff fe40 	bl	8001400 <CSN_UNSELECT_NRF>
		NRF_ENABLE();
 8001780:	f7ff fe4e 	bl	8001420 <NRF_ENABLE>
		delay(10);
 8001784:	200a      	movs	r0, #10
 8001786:	f7ff fc4d 	bl	8001024 <delay>
		NRF_DISABLE();
 800178a:	f7ff fe59 	bl	8001440 <NRF_DISABLE>
		tx_fifo_stat=NRF_READ_REGISTER(FIFO_STATUS);
 800178e:	2017      	movs	r0, #23
 8001790:	f7ff fea1 	bl	80014d6 <NRF_READ_REGISTER>
 8001794:	4603      	mov	r3, r0
 8001796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		status_reg=NRF_READ_REGISTER(STATUS);
 800179a:	2007      	movs	r0, #7
 800179c:	f7ff fe9b 	bl	80014d6 <NRF_READ_REGISTER>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		char ack_Recv[32];
		printf("tx_fifo_stat is - %d",tx_fifo_stat);
 80017a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017aa:	4619      	mov	r1, r3
 80017ac:	4841      	ldr	r0, [pc, #260]	@ (80018b4 <NRF_TX_DATA+0x164>)
 80017ae:	f003 f90d 	bl	80049cc <iprintf>
		printf("status register- %d",status_reg);
 80017b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017b6:	4619      	mov	r1, r3
 80017b8:	483f      	ldr	r0, [pc, #252]	@ (80018b8 <NRF_TX_DATA+0x168>)
 80017ba:	f003 f907 	bl	80049cc <iprintf>
		NRF_ENABLE();
 80017be:	f7ff fe2f 	bl	8001420 <NRF_ENABLE>
		delay(10);
 80017c2:	200a      	movs	r0, #10
 80017c4:	f7ff fc2e 	bl	8001024 <delay>
		if(is_data_on_pipe(0)==1){
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 f87f 	bl	80018cc <is_data_on_pipe>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10d      	bne.n	80017f0 <NRF_TX_DATA+0xa0>
			printf("maybe ack  1? \n \r");
 80017d4:	4839      	ldr	r0, [pc, #228]	@ (80018bc <NRF_TX_DATA+0x16c>)
 80017d6:	f003 f8f9 	bl	80049cc <iprintf>
			NRF_RECV_DATA(ack_Recv);
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f88e 	bl	8001900 <NRF_RECV_DATA>
			print(ack_Recv,32);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2120      	movs	r1, #32
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fdb4 	bl	8001358 <print>
		}


		if ((tx_fifo_stat&(1<<4)) && (!(tx_fifo_stat&(1<<3)))){
 80017f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d025      	beq.n	8001848 <NRF_TX_DATA+0xf8>
 80017fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d11f      	bne.n	8001848 <NRF_TX_DATA+0xf8>
			if(is_data_on_pipe(0)==1){
 8001808:	2000      	movs	r0, #0
 800180a:	f000 f85f 	bl	80018cc <is_data_on_pipe>
 800180e:	4603      	mov	r3, r0
 8001810:	2b01      	cmp	r3, #1
 8001812:	d102      	bne.n	800181a <NRF_TX_DATA+0xca>
				printf("maybe ack ? \n \r");
 8001814:	482a      	ldr	r0, [pc, #168]	@ (80018c0 <NRF_TX_DATA+0x170>)
 8001816:	f003 f8d9 	bl	80049cc <iprintf>
			}
			if(is_data_on_pipe(1)==1){
 800181a:	2001      	movs	r0, #1
 800181c:	f000 f856 	bl	80018cc <is_data_on_pipe>
 8001820:	4603      	mov	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <NRF_TX_DATA+0xdc>
				printf("maybe ack ? \n \r");
 8001826:	4826      	ldr	r0, [pc, #152]	@ (80018c0 <NRF_TX_DATA+0x170>)
 8001828:	f003 f8d0 	bl	80049cc <iprintf>
			}
			cmd=FLUSH_TX;
 800182c:	23e1      	movs	r3, #225	@ 0xe1
 800182e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			NRD_SEND_CMD(cmd);
 8001832:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff77 	bl	800172a <NRD_SEND_CMD>
			NRF_WRITE_REGISTER(FIFO_STATUS, 0x11); //reset fifo
 800183c:	2111      	movs	r1, #17
 800183e:	2017      	movs	r0, #23
 8001840:	f7ff fe0e 	bl	8001460 <NRF_WRITE_REGISTER>
			return 1;
 8001844:	2301      	movs	r3, #1
 8001846:	e030      	b.n	80018aa <NRF_TX_DATA+0x15a>
		}

		if(status_reg &(1<<4)){
 8001848:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	d029      	beq.n	80018a8 <NRF_TX_DATA+0x158>
			printf("max number of retransmission \n \r %d \n \r",status_reg);
 8001854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001858:	4619      	mov	r1, r3
 800185a:	481a      	ldr	r0, [pc, #104]	@ (80018c4 <NRF_TX_DATA+0x174>)
 800185c:	f003 f8b6 	bl	80049cc <iprintf>
			status_reg=status_reg|(1<<4)|(1<<5);
 8001860:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001864:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001868:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			NRF_WRITE_REGISTER(STATUS,status_reg);
 800186c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001870:	4619      	mov	r1, r3
 8001872:	2007      	movs	r0, #7
 8001874:	f7ff fdf4 	bl	8001460 <NRF_WRITE_REGISTER>
			status_reg=NRF_READ_REGISTER(STATUS);
 8001878:	2007      	movs	r0, #7
 800187a:	f7ff fe2c 	bl	80014d6 <NRF_READ_REGISTER>
 800187e:	4603      	mov	r3, r0
 8001880:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			printf("after clearing flag? %d \n \r",status_reg);
 8001884:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001888:	4619      	mov	r1, r3
 800188a:	480f      	ldr	r0, [pc, #60]	@ (80018c8 <NRF_TX_DATA+0x178>)
 800188c:	f003 f89e 	bl	80049cc <iprintf>
			cmd=FLUSH_TX;
 8001890:	23e1      	movs	r3, #225	@ 0xe1
 8001892:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		 NRD_SEND_CMD(cmd);
 8001896:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff45 	bl	800172a <NRD_SEND_CMD>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11); //reset fifo
 80018a0:	2111      	movs	r1, #17
 80018a2:	2017      	movs	r0, #23
 80018a4:	f7ff fddc 	bl	8001460 <NRF_WRITE_REGISTER>

		}

		return 0;
 80018a8:	2300      	movs	r3, #0

	}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3730      	adds	r7, #48	@ 0x30
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08008314 	.word	0x08008314
 80018b8:	0800832c 	.word	0x0800832c
 80018bc:	08008340 	.word	0x08008340
 80018c0:	08008354 	.word	0x08008354
 80018c4:	08008364 	.word	0x08008364
 80018c8:	0800838c 	.word	0x0800838c

080018cc <is_data_on_pipe>:

uint8_t is_data_on_pipe(uint8_t pipenum){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
uint8_t status_reg=NRF_READ_REGISTER(STATUS);
 80018d6:	2007      	movs	r0, #7
 80018d8:	f7ff fdfd 	bl	80014d6 <NRF_READ_REGISTER>
 80018dc:	4603      	mov	r3, r0
 80018de:	73fb      	strb	r3, [r7, #15]
//if 6 th bit is set and respective data pipe is set
if((status_reg & (1<<6))){
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <is_data_on_pipe+0x2a>
//clear rx_dr
	NRF_WRITE_REGISTER(STATUS,(1<<6));
 80018ea:	2140      	movs	r1, #64	@ 0x40
 80018ec:	2007      	movs	r0, #7
 80018ee:	f7ff fdb7 	bl	8001460 <NRF_WRITE_REGISTER>
	return 1; //data recieved
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <is_data_on_pipe+0x2c>
}
return 0;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <NRF_RECV_DATA>:
	return (uint8_t)(SPI1->DR);
}

//this code needs to  be modefied for dyanmic first we will send
//R_RX_PL_WID first and then R_RX_PAYLOAD
void NRF_RECV_DATA(uint8_t *data_ptr_RECV){
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	//f
	uint8_t cmd = R_RX_PL_WID;
 8001908:	2360      	movs	r3, #96	@ 0x60
 800190a:	73bb      	strb	r3, [r7, #14]
	uint8_t payLoad_width=0;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
	printf("\n ACK RECIEVED! ");
 8001910:	480f      	ldr	r0, [pc, #60]	@ (8001950 <NRF_RECV_DATA+0x50>)
 8001912:	f003 f85b 	bl	80049cc <iprintf>
	CSN_SELECT_NRF();
 8001916:	f7ff fd63 	bl	80013e0 <CSN_SELECT_NRF>
	//payLoad_width=NRF_SEND_PAYLOAD_WIDTH_READ(cmd);
	//printf("\n \r  payloadWidth %d \n \r",payLoad_width);
	//next comand to read payload
	cmd=R_RX_PAYLOAD;
 800191a:	2361      	movs	r3, #97	@ 0x61
 800191c:	73bb      	strb	r3, [r7, #14]
	SPI_TX_MULTI( &cmd, 1);
 800191e:	f107 030e 	add.w	r3, r7, #14
 8001922:	2101      	movs	r1, #1
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f86f 	bl	8001a08 <SPI_TX_MULTI>
	SPI_READ_MULTI(data_ptr_RECV,10);//recieve data
 800192a:	210a      	movs	r1, #10
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f8a3 	bl	8001a78 <SPI_READ_MULTI>
	CSN_UNSELECT_NRF();
 8001932:	f7ff fd65 	bl	8001400 <CSN_UNSELECT_NRF>
	delay(10);
 8001936:	200a      	movs	r0, #10
 8001938:	f7ff fb74 	bl	8001024 <delay>
	cmd=FLUSH_RX;
 800193c:	23e2      	movs	r3, #226	@ 0xe2
 800193e:	73bb      	strb	r3, [r7, #14]
	NRD_SEND_CMD(cmd); //flush rx fifo
 8001940:	7bbb      	ldrb	r3, [r7, #14]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fef1 	bl	800172a <NRD_SEND_CMD>

}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	080083a8 	.word	0x080083a8

08001954 <SPI_INIT>:
#include"SPI.h"
#include"stdio.h"
#define AF05  (0x05)


void SPI_INIT(){
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
	//enable clock for GPIOA
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8001958:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <SPI_INIT+0xa8>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <SPI_INIT+0xa8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA5, PA6 and PA7 to alternate function mode
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1;
 8001964:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <SPI_INIT+0xac>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a25      	ldr	r2, [pc, #148]	@ (8001a00 <SPI_INIT+0xac>)
 800196a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800196e:	6013      	str	r3, [r2, #0]
	//set which type of alternate function is
	GPIOA->AFR[0]|=(AF05<<20)|(AF05<<24)|(AF05<<28);
 8001970:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <SPI_INIT+0xac>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a22      	ldr	r2, [pc, #136]	@ (8001a00 <SPI_INIT+0xac>)
 8001976:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 800197a:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800197e:	6213      	str	r3, [r2, #32]
	//enable clock access to SPI1
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN;
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <SPI_INIT+0xa8>)
 8001982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001984:	4a1d      	ldr	r2, [pc, #116]	@ (80019fc <SPI_INIT+0xa8>)
 8001986:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800198a:	6453      	str	r3, [r2, #68]	@ 0x44
	//set software slave managment
	SPI1->CR1|=SPI_CR1_SSM|SPI_CR1_SSI;
 800198c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <SPI_INIT+0xb0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1c      	ldr	r2, [pc, #112]	@ (8001a04 <SPI_INIT+0xb0>)
 8001992:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001996:	6013      	str	r3, [r2, #0]
	//set SPI in master mode
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_MSTR, 1);
 8001998:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <SPI_INIT+0xb0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <SPI_INIT+0xb0>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_BR,  3);
 80019a4:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <SPI_INIT+0xb0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80019ac:	4a15      	ldr	r2, [pc, #84]	@ (8001a04 <SPI_INIT+0xb0>)
 80019ae:	f043 0318 	orr.w	r3, r3, #24
 80019b2:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPHA, 0);
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <SPI_INIT+0xb0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <SPI_INIT+0xb0>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPOL, 0);
 80019c0:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <SPI_INIT+0xb0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a04 <SPI_INIT+0xb0>)
 80019c6:	f023 0302 	bic.w	r3, r3, #2
 80019ca:	6013      	str	r3, [r2, #0]
	//MODIFY_FIELD(SPI1->CR1, SPI_CR1_LSBFIRST, 1);
	SPI1->CR2 |= 0x4;
 80019cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <SPI_INIT+0xb0>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a04 <SPI_INIT+0xb0>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x40; // Enabling SPI SPI periph
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <SPI_INIT+0xb0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a09      	ldr	r2, [pc, #36]	@ (8001a04 <SPI_INIT+0xb0>)
 80019de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019e2:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_SPE, 1);
 80019e4:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <SPI_INIT+0xb0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a06      	ldr	r2, [pc, #24]	@ (8001a04 <SPI_INIT+0xb0>)
 80019ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40013000 	.word	0x40013000

08001a08 <SPI_TX_MULTI>:

//send multiple bytes in case size>1
void SPI_TX_MULTI(uint8_t *data_ptr,int size){
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
int i=0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
uint8_t temp;
while(i<size){
 8001a16:	e00f      	b.n	8001a38 <SPI_TX_MULTI+0x30>
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 8001a18:	bf00      	nop
 8001a1a:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <SPI_TX_MULTI+0x6c>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f9      	beq.n	8001a1a <SPI_TX_MULTI+0x12>
	SPI1->DR = data_ptr[i];
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <SPI_TX_MULTI+0x6c>)
 8001a30:	60da      	str	r2, [r3, #12]
	i++;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3301      	adds	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
while(i<size){
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbeb      	blt.n	8001a18 <SPI_TX_MULTI+0x10>
}
/*Wait until TXE is set*/
while(!(SPI1->SR & (SPI_SR_TXE))){}
 8001a40:	bf00      	nop
 8001a42:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <SPI_TX_MULTI+0x6c>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f9      	beq.n	8001a42 <SPI_TX_MULTI+0x3a>

/*Wait for BUSY flag to reset*/
while((SPI1->SR & (SPI_SR_BSY))){}
 8001a4e:	bf00      	nop
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <SPI_TX_MULTI+0x6c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f9      	bne.n	8001a50 <SPI_TX_MULTI+0x48>

/*Clear OVR flag*/
temp = SPI1->DR;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <SPI_TX_MULTI+0x6c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	72fb      	strb	r3, [r7, #11]
temp = SPI1->SR;
 8001a62:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <SPI_TX_MULTI+0x6c>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	72fb      	strb	r3, [r7, #11]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40013000 	.word	0x40013000

08001a78 <SPI_READ_MULTI>:


void SPI_READ_MULTI(uint8_t *data_ptr,int size){
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	while(size)
 8001a82:	e013      	b.n	8001aac <SPI_READ_MULTI+0x34>
	{
		/*Send dummy data*/
		SPI1->DR =0;
 8001a84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <SPI_READ_MULTI+0x48>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]

		/*Wait for RXNE flag to be set*/
		while(!(SPI1->SR & (SPI_SR_RXNE))){}
 8001a8a:	bf00      	nop
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <SPI_READ_MULTI+0x48>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f9      	beq.n	8001a8c <SPI_READ_MULTI+0x14>

		/*Read data from data register*/
		*data_ptr++ = (SPI1->DR);
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <SPI_READ_MULTI+0x48>)
 8001a9a:	68d9      	ldr	r1, [r3, #12]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
		size--;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	603b      	str	r3, [r7, #0]
	while(size)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1e8      	bne.n	8001a84 <SPI_READ_MULTI+0xc>
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40013000 	.word	0x40013000

08001ac4 <main>:
#include<state_machine.h>


void SystemClock_Config(void);
int main(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b090      	sub	sp, #64	@ 0x40
 8001ac8:	af00      	add	r7, sp, #0

SystemClock_Config();
 8001aca:	f000 f849 	bl	8001b60 <SystemClock_Config>
usart_init();
 8001ace:	f001 fa4f 	bl	8002f70 <usart_init>

printf("trying to init max30102 \n \r");
 8001ad2:	481e      	ldr	r0, [pc, #120]	@ (8001b4c <main+0x88>)
 8001ad4:	f002 ff7a 	bl	80049cc <iprintf>
MAX30102_init();
 8001ad8:	f000 f8b2 	bl	8001c40 <MAX30102_init>
printf("after  to init max30102 \n \r");
 8001adc:	481c      	ldr	r0, [pc, #112]	@ (8001b50 <main+0x8c>)
 8001ade:	f002 ff75 	bl	80049cc <iprintf>



//nrf init code
uint8_t TxAddress[] = {0xB3,0xB4,0xB5,0xB6,0x05};
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b54 <main+0x90>)
 8001ae4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aec:	6018      	str	r0, [r3, #0]
 8001aee:	3304      	adds	r3, #4
 8001af0:	7019      	strb	r1, [r3, #0]
uint8_t channel=10;
 8001af2:	230a      	movs	r3, #10
 8001af4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

NRF_INIT();
 8001af8:	f7ff fdde 	bl	80016b8 <NRF_INIT>
NRF_PTX_CONFIG(TxAddress,channel);
 8001afc:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001b00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fd00 	bl	800150c <NRF_PTX_CONFIG>

printf(" \n \r setting up as transmit primary dynamic payload attempt \n \r ");
 8001b0c:	4812      	ldr	r0, [pc, #72]	@ (8001b58 <main+0x94>)
 8001b0e:	f002 ff5d 	bl	80049cc <iprintf>

for(int i=0;i<=0x1D;i++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b16:	e00d      	b.n	8001b34 <main+0x70>
	printf("\n \r register %x is value %x \n \r",i,NRF_READ_REGISTER(i));
 8001b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fcda 	bl	80014d6 <NRF_READ_REGISTER>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001b28:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <main+0x98>)
 8001b2a:	f002 ff4f 	bl	80049cc <iprintf>
for(int i=0;i<=0x1D;i++){
 8001b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b30:	3301      	adds	r3, #1
 8001b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b36:	2b1d      	cmp	r3, #29
 8001b38:	ddee      	ble.n	8001b18 <main+0x54>
}


StateMachine SM;
FSM_INIT(&SM);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fff3 	bl	8002b28 <FSM_INIT>
while(1){
execute_sm(&SM);
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 f813 	bl	8002b70 <execute_sm>
 8001b4a:	e7fa      	b.n	8001b42 <main+0x7e>
 8001b4c:	080083bc 	.word	0x080083bc
 8001b50:	080083d8 	.word	0x080083d8
 8001b54:	08008458 	.word	0x08008458
 8001b58:	080083f4 	.word	0x080083f4
 8001b5c:	08008438 	.word	0x08008438

08001b60 <SystemClock_Config>:
}
}

void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b094      	sub	sp, #80	@ 0x50
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 0320 	add.w	r3, r7, #32
 8001b6a:	2230      	movs	r2, #48	@ 0x30
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 ffa9 	bl	8004ac6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <SystemClock_Config+0xcc>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	4a27      	ldr	r2, [pc, #156]	@ (8001c2c <SystemClock_Config+0xcc>)
 8001b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <SystemClock_Config+0xcc>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <SystemClock_Config+0xd0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a21      	ldr	r2, [pc, #132]	@ (8001c30 <SystemClock_Config+0xd0>)
 8001baa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <SystemClock_Config+0xd0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001bd4:	23c0      	movs	r3, #192	@ 0xc0
 8001bd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 fb5f 	bl	80032a8 <HAL_RCC_OscConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bf0:	f000 f820 	bl	8001c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2103      	movs	r1, #3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 fdc0 	bl	8003798 <HAL_RCC_ClockConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c1e:	f000 f809 	bl	8001c34 <Error_Handler>
  }
}
 8001c22:	bf00      	nop
 8001c24:	3750      	adds	r7, #80	@ 0x50
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40007000 	.word	0x40007000

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <Error_Handler+0x8>

08001c40 <MAX30102_init>:
 uint8_t tail;
} sense_struct; //This is our circular buffer of readings from the sensor

sense_struct sense;

void MAX30102_init(){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	I2C_init_config(); //initalize i2c
 8001c44:	f7ff fa20 	bl	8001088 <I2C_init_config>

	    // Reset the sensor
	    MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x40); // Reset the device
 8001c48:	2140      	movs	r1, #64	@ 0x40
 8001c4a:	2009      	movs	r0, #9
 8001c4c:	f000 f81e 	bl	8001c8c <MAX30102_WRITE_REGISTER>

	    //led brightness as 60
	    MAX30102_WRITE_REGISTER(LED1_PA_REG, 0x3c); //power set as 60
 8001c50:	213c      	movs	r1, #60	@ 0x3c
 8001c52:	200c      	movs	r0, #12
 8001c54:	f000 f81a 	bl	8001c8c <MAX30102_WRITE_REGISTER>
	    MAX30102_WRITE_REGISTER(LED2_PA_REG, 0x3c); // power set as 60
 8001c58:	213c      	movs	r1, #60	@ 0x3c
 8001c5a:	200d      	movs	r0, #13
 8001c5c:	f000 f816 	bl	8001c8c <MAX30102_WRITE_REGISTER>

	    //led mode 3 both ir and red led are needed
	    MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x3); // power set as 60
 8001c60:	2103      	movs	r1, #3
 8001c62:	2009      	movs	r0, #9
 8001c64:	f000 f812 	bl	8001c8c <MAX30102_WRITE_REGISTER>

	    //sample average as 4 and enable fifo rollover 0x50 0101 0000
	    MAX30102_WRITE_REGISTER(FIFO_CONFIG_REG, 0x50); //
 8001c68:	2150      	movs	r1, #80	@ 0x50
 8001c6a:	2008      	movs	r0, #8
 8001c6c:	f000 f80e 	bl	8001c8c <MAX30102_WRITE_REGISTER>

	    //spo2 config adc range as 4096  samples as 100 led pulse as 411 0010 0111
	    MAX30102_WRITE_REGISTER(SPO2_CONFIG_REG, 0x27); //
 8001c70:	2127      	movs	r1, #39	@ 0x27
 8001c72:	200a      	movs	r0, #10
 8001c74:	f000 f80a 	bl	8001c8c <MAX30102_WRITE_REGISTER>

	    // FIFO pointers
	    MAX30102_WRITE_REGISTER(FIFO_READ_PTR, 0x00); // Reset FIFO write pointer
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2006      	movs	r0, #6
 8001c7c:	f000 f806 	bl	8001c8c <MAX30102_WRITE_REGISTER>
	    MAX30102_WRITE_REGISTER(FIFO_WR_PTR, 0x00); // Reset FIFO read pointer
 8001c80:	2100      	movs	r1, #0
 8001c82:	2004      	movs	r0, #4
 8001c84:	f000 f802 	bl	8001c8c <MAX30102_WRITE_REGISTER>
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <MAX30102_WRITE_REGISTER>:
    // FIFO Configuration
    MAX30102_WRITE_REGISTER(FIFO_CONFIG_REG, 0x02);
    // FIFO_Average: No averaging, direct samples
}

void MAX30102_WRITE_REGISTER(uint8_t register_Address, uint8_t data){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	460a      	mov	r2, r1
 8001c96:	71fb      	strb	r3, [r7, #7]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	71bb      	strb	r3, [r7, #6]
	I2C_START_COMS();
 8001c9c:	f7ff fa68 	bl	8001170 <I2C_START_COMS>
	uint8_t write_masked_address=0xAE;
 8001ca0:	23ae      	movs	r3, #174	@ 0xae
 8001ca2:	73fb      	strb	r3, [r7, #15]
	I2C_SEND_ADDRESS(write_masked_address); //same as AE
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fa9e 	bl	80011e8 <I2C_SEND_ADDRESS>
	I2C_WRITE_DATA(register_Address);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fa7a 	bl	80011a8 <I2C_WRITE_DATA>
	I2C_WRITE_DATA(data);
 8001cb4:	79bb      	ldrb	r3, [r7, #6]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fa76 	bl	80011a8 <I2C_WRITE_DATA>
	I2C_STOP_COMS();
 8001cbc:	f7ff fab4 	bl	8001228 <I2C_STOP_COMS>
}
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <MAX30102_READ_REGISTER>:


void MAX30102_READ_REGISTER(uint8_t register_Address, uint8_t *recv_buff, uint8_t recv_size){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	71bb      	strb	r3, [r7, #6]

	uint8_t write_masked_address=0xAE;
 8001cd8:	23ae      	movs	r3, #174	@ 0xae
 8001cda:	73fb      	strb	r3, [r7, #15]
	uint8_t read_masked_address=0xAF; //should be AF
 8001cdc:	23af      	movs	r3, #175	@ 0xaf
 8001cde:	73bb      	strb	r3, [r7, #14]
	I2C_START_COMS(); //start i2c
 8001ce0:	f7ff fa46 	bl	8001170 <I2C_START_COMS>
	I2C_SEND_ADDRESS(write_masked_address); //first send slave address
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fa7e 	bl	80011e8 <I2C_SEND_ADDRESS>
	I2C_WRITE_DATA(register_Address); //send register address
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fa5a 	bl	80011a8 <I2C_WRITE_DATA>
	I2C_START_COMS(); //repeated start
 8001cf4:	f7ff fa3c 	bl	8001170 <I2C_START_COMS>
	I2C_READ(read_masked_address,recv_buff,recv_size); //this should be slave with read
 8001cf8:	79ba      	ldrb	r2, [r7, #6]
 8001cfa:	7bbb      	ldrb	r3, [r7, #14]
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff faa2 	bl	8001248 <I2C_READ>
//	I2C_STOP_COMS(); this caused 2 hours of debugging
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <MAX30102_get_Read_ptr>:
    float temperature = temp_int + (temp_frac * 0.0625);
    //printf("hi one read was done but then something happened %d \n \r",temp_frac);
    return temperature;
}

uint8_t MAX30102_get_Read_ptr(){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	uint8_t read_ptr;
 MAX30102_READ_REGISTER(FIFO_READ_PTR,&read_ptr,1);
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	2201      	movs	r2, #1
 8001d16:	4619      	mov	r1, r3
 8001d18:	2006      	movs	r0, #6
 8001d1a:	f7ff ffd5 	bl	8001cc8 <MAX30102_READ_REGISTER>
	return read_ptr;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <MAX30102_get_WR_ptr>:

uint8_t MAX30102_get_WR_ptr(){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
	uint8_t wr_ptr;
    MAX30102_READ_REGISTER(FIFO_WR_PTR,&wr_ptr,1);
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	2201      	movs	r2, #1
 8001d32:	4619      	mov	r1, r3
 8001d34:	2004      	movs	r0, #4
 8001d36:	f7ff ffc7 	bl	8001cc8 <MAX30102_READ_REGISTER>
	return wr_ptr;
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <available>:

uint8_t available(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
  int8_t numberOfSamples = sense.head - sense.tail;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <available+0x38>)
 8001d4c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001d50:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <available+0x38>)
 8001d52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da03      	bge.n	8001d6c <available+0x28>
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	3304      	adds	r3, #4
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	71fb      	strb	r3, [r7, #7]

  return (numberOfSamples);
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000200 	.word	0x20000200

08001d80 <check_new_data>:




uint16_t check_new_data(){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
	uint8_t writePointer=MAX30102_get_WR_ptr();
 8001d86:	f7ff ffcf 	bl	8001d28 <MAX30102_get_WR_ptr>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	74fb      	strb	r3, [r7, #19]
	uint8_t readPointer=MAX30102_get_Read_ptr();
 8001d8e:	f7ff ffbd 	bl	8001d0c <MAX30102_get_Read_ptr>
 8001d92:	4603      	mov	r3, r0
 8001d94:	74bb      	strb	r3, [r7, #18]
	int numberOfSamples = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
	if(readPointer!=writePointer){
 8001d9a:	7cba      	ldrb	r2, [r7, #18]
 8001d9c:	7cfb      	ldrb	r3, [r7, #19]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d064      	beq.n	8001e6c <check_new_data+0xec>
		 numberOfSamples = writePointer - readPointer;
 8001da2:	7cfa      	ldrb	r2, [r7, #19]
 8001da4:	7cbb      	ldrb	r3, [r7, #18]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	61fb      	str	r3, [r7, #28]
		 if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	da02      	bge.n	8001db6 <check_new_data+0x36>
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	3320      	adds	r3, #32
 8001db4:	61fb      	str	r3, [r7, #28]
		    //We now have the number of readings, now calc bytes to read
		    //For this example we are just doing Red and IR (3 bytes each)
		    int bytesLeftToRead = numberOfSamples * 2 * 3;
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
		    while (bytesLeftToRead > 0)
 8001dc2:	e050      	b.n	8001e66 <check_new_data+0xe6>
		     {
		       int toGet = bytesLeftToRead;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	617b      	str	r3, [r7, #20]
		       if (toGet > I2C_BUFFER_LENGTH)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	dd01      	ble.n	8001dd2 <check_new_data+0x52>
		       {
		         //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
		         //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
		         //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

		         toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (2 * 3)); //Trim toGet to be a multiple of the samples we need to read
 8001dce:	231e      	movs	r3, #30
 8001dd0:	617b      	str	r3, [r7, #20]
		       }

		       bytesLeftToRead -= toGet;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	61bb      	str	r3, [r7, #24]

		       //Request toGet number of bytes from sensor

		       while (toGet > 0)
 8001dda:	e041      	b.n	8001e60 <check_new_data+0xe0>
		       {
		         sense.head++; //Advance the head of the storage struct
 8001ddc:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <check_new_data+0xf8>)
 8001dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de2:	3301      	adds	r3, #1
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <check_new_data+0xf8>)
 8001de8:	f883 2020 	strb.w	r2, [r3, #32]
		         sense.head %= STORAGE_SIZE; //Wrap condition
 8001dec:	4b22      	ldr	r3, [pc, #136]	@ (8001e78 <check_new_data+0xf8>)
 8001dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <check_new_data+0xf8>)
 8001dfa:	f883 2020 	strb.w	r2, [r3, #32]
		         uint32_t red_led,ir_led;

		         uint8_t fifo_data[6]; // To store 6 bytes of FIFO data (3 bytes for red, 3 bytes for IR)

		         // Read 6 bytes from FIFO_DATA register
		         MAX30102_READ_REGISTER(FIFO_DATA_REG, fifo_data, 6);
 8001dfe:	463b      	mov	r3, r7
 8001e00:	2206      	movs	r2, #6
 8001e02:	4619      	mov	r1, r3
 8001e04:	2007      	movs	r0, #7
 8001e06:	f7ff ff5f 	bl	8001cc8 <MAX30102_READ_REGISTER>

		         // Combine the bytes for red LED
		         red_led = ((uint32_t)fifo_data[0] << 16) | ((uint32_t)fifo_data[1] << 8) | fifo_data[2];
 8001e0a:	783b      	ldrb	r3, [r7, #0]
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	787b      	ldrb	r3, [r7, #1]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	4313      	orrs	r3, r2
 8001e14:	78ba      	ldrb	r2, [r7, #2]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
		         red_led &= 0x03FFFF; // Mask to 18 bits
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001e20:	60fb      	str	r3, [r7, #12]
		         sense.red[sense.head] = red_led;
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <check_new_data+0xf8>)
 8001e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4a13      	ldr	r2, [pc, #76]	@ (8001e78 <check_new_data+0xf8>)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		         // Combine the bytes for IR LED
		         ir_led = ((uint32_t)fifo_data[3] << 16) | ((uint32_t)fifo_data[4] << 8) | fifo_data[5];
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	041a      	lsls	r2, r3, #16
 8001e36:	793b      	ldrb	r3, [r7, #4]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	797a      	ldrb	r2, [r7, #5]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60bb      	str	r3, [r7, #8]
		         ir_led &= 0x03FFFF; // Mask to 18 bits
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001e48:	60bb      	str	r3, [r7, #8]
		         sense.IR[sense.head] = ir_led;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <check_new_data+0xf8>)
 8001e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e50:	4909      	ldr	r1, [pc, #36]	@ (8001e78 <check_new_data+0xf8>)
 8001e52:	3304      	adds	r3, #4
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		 		  sense.IR[sense.head] = tempLong;

*/

		         toGet -= 2 * 3;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3b06      	subs	r3, #6
 8001e5e:	617b      	str	r3, [r7, #20]
		       while (toGet > 0)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	dcba      	bgt.n	8001ddc <check_new_data+0x5c>
		    while (bytesLeftToRead > 0)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	dcab      	bgt.n	8001dc4 <check_new_data+0x44>

		     } //End while (bytesLeftToRead > 0)

		   } //End readPtr != writePtr

		   return (numberOfSamples); //Let the world know how much new data we found
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	b29b      	uxth	r3, r3
	}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000200 	.word	0x20000200

08001e7c <safeCheck>:


bool safeCheck(uint16_t maxTimeToCheck)
{
 8001e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	80fb      	strh	r3, [r7, #6]
  uint32_t markTime = millis();
 8001e88:	f7ff f8b4 	bl	8000ff4 <millis>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4613      	mov	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 8001e94:	f7ff f8ae 	bl	8000ff4 <millis>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	68f9      	ldr	r1, [r7, #12]
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	4688      	mov	r8, r1
 8001ea2:	4681      	mov	r9, r0
 8001ea4:	ebb2 0408 	subs.w	r4, r2, r8
 8001ea8:	eb63 0509 	sbc.w	r5, r3, r9
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	469a      	mov	sl, r3
 8001eb2:	4693      	mov	fp, r2
 8001eb4:	45a2      	cmp	sl, r4
 8001eb6:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001eba:	d201      	bcs.n	8001ec0 <safeCheck+0x44>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e00a      	b.n	8001ed6 <safeCheck+0x5a>

	if(check_new_data() == true) //We found new data!
 8001ec0:	f7ff ff5e 	bl	8001d80 <check_new_data>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <safeCheck+0x52>
	  return(true);
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e003      	b.n	8001ed6 <safeCheck+0x5a>

	delay(1);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f7ff f8a8 	bl	8001024 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
 8001ed4:	e7de      	b.n	8001e94 <safeCheck+0x18>
  }
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ee0 <getRed>:
    *ir_led &= 0x03FFFF; // Mask to 18 bits
}

//Report the most recent red value
uint32_t getRed(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  //Check the sensor for new data for 250ms
	if(safeCheck(250))
 8001ee4:	20fa      	movs	r0, #250	@ 0xfa
 8001ee6:	f7ff ffc9 	bl	8001e7c <safeCheck>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <getRed+0x20>
    return (sense.red[sense.head]);
 8001ef0:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <getRed+0x28>)
 8001ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <getRed+0x28>)
 8001efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efe:	e000      	b.n	8001f02 <getRed+0x22>
  else
    return(0); //Sensor failed to find new data
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000200 	.word	0x20000200

08001f0c <getIR>:

uint32_t getIR(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  //Check the sensor for new data for 250ms
	if(safeCheck(250))
 8001f10:	20fa      	movs	r0, #250	@ 0xfa
 8001f12:	f7ff ffb3 	bl	8001e7c <safeCheck>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <getIR+0x20>
    return (sense.IR[sense.head]);
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <getIR+0x28>)
 8001f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f22:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <getIR+0x28>)
 8001f24:	3304      	adds	r3, #4
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	e000      	b.n	8001f2e <getIR+0x22>
  else
    return(0); //Sensor failed to find new data
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000200 	.word	0x20000200

08001f38 <nextSample>:

//Advance the tail
void nextSample(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  if(available()) //Only advance the tail if new data is available
 8001f3c:	f7ff ff02 	bl	8001d44 <available>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d010      	beq.n	8001f68 <nextSample+0x30>
  {
    sense.tail++;
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <nextSample+0x34>)
 8001f48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <nextSample+0x34>)
 8001f52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    sense.tail %= STORAGE_SIZE; //Wrap condition
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <nextSample+0x34>)
 8001f58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b02      	ldr	r3, [pc, #8]	@ (8001f6c <nextSample+0x34>)
 8001f64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000200 	.word	0x20000200

08001f70 <acquire_max_30102_data>:
void acquire_max_30102_data(uint32_t num_ters,int8_t* heart_rate_status,int32_t* spo2_var,int32_t* heart_rate_var,int8_t* valid_spo2,bool *status)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	f5ad 7d53 	sub.w	sp, sp, #844	@ 0x34c
 8001f76:	af04      	add	r7, sp, #16
 8001f78:	f507 744e 	add.w	r4, r7, #824	@ 0x338
 8001f7c:	f5a4 744b 	sub.w	r4, r4, #812	@ 0x32c
 8001f80:	6020      	str	r0, [r4, #0]
 8001f82:	f507 704e 	add.w	r0, r7, #824	@ 0x338
 8001f86:	f5a0 704c 	sub.w	r0, r0, #816	@ 0x330
 8001f8a:	6001      	str	r1, [r0, #0]
 8001f8c:	f507 714e 	add.w	r1, r7, #824	@ 0x338
 8001f90:	f5a1 714d 	sub.w	r1, r1, #820	@ 0x334
 8001f94:	600a      	str	r2, [r1, #0]
 8001f96:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8001f9a:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 8001f9e:	6013      	str	r3, [r2, #0]
	uint32_t irBuffer[100]; //infrared LED sensor data
	uint32_t redBuffer[100];  //red LED sensor data
	int32_t bufferLength;


	bufferLength=100;
 8001fa0:	2364      	movs	r3, #100	@ 0x64
 8001fa2:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

	  for (uint8_t i = 0 ; i < bufferLength ; i++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 8001fac:	e023      	b.n	8001ff6 <acquire_max_30102_data+0x86>
	  {
	    while (available() == false) //do we have new data?
	    	check_new_data(); //Check the sensor for new data
 8001fae:	f7ff fee7 	bl	8001d80 <check_new_data>
	    while (available() == false) //do we have new data?
 8001fb2:	f7ff fec7 	bl	8001d44 <available>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f8      	beq.n	8001fae <acquire_max_30102_data+0x3e>

	    redBuffer[i] = getRed();
 8001fbc:	f897 4337 	ldrb.w	r4, [r7, #823]	@ 0x337
 8001fc0:	f7ff ff8e 	bl	8001ee0 <getRed>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001fca:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8001fce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	    irBuffer[i] =  getIR();
 8001fd2:	f897 4337 	ldrb.w	r4, [r7, #823]	@ 0x337
 8001fd6:	f7ff ff99 	bl	8001f0c <getIR>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001fe0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001fe4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	    nextSample(); //We're finished with this sample so move to next sample
 8001fe8:	f7ff ffa6 	bl	8001f38 <nextSample>
	  for (uint8_t i = 0 ; i < bufferLength ; i++)
 8001fec:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 8001ff6:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 8001ffa:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001ffe:	429a      	cmp	r2, r3
 8002000:	dcd7      	bgt.n	8001fb2 <acquire_max_30102_data+0x42>
	  }
	  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, spo2_var, valid_spo2, heart_rate_var, heart_rate_status);
 8002002:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002006:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 800200a:	f107 0110 	add.w	r1, r7, #16
 800200e:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8002012:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8002016:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	9202      	str	r2, [sp, #8]
 800201e:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8002022:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	9201      	str	r2, [sp, #4]
 800202a:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	460a      	mov	r2, r1
 8002034:	f8d7 1330 	ldr.w	r1, [r7, #816]	@ 0x330
 8002038:	f000 f8e8 	bl	800220c <maxim_heart_rate_and_oxygen_saturation>
	//  uint32_t start_time = millis();
	  while (--num_ters)
 800203c:	e0c3      	b.n	80021c6 <acquire_max_30102_data+0x256>
	  {
	    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
	    for (uint8_t i = 25; i < 100; i++)
 800203e:	2319      	movs	r3, #25
 8002040:	f887 3336 	strb.w	r3, [r7, #822]	@ 0x336
 8002044:	e028      	b.n	8002098 <acquire_max_30102_data+0x128>
	    {
	      redBuffer[i - 25] = redBuffer[i];
 8002046:	f897 1336 	ldrb.w	r1, [r7, #822]	@ 0x336
 800204a:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 800204e:	f1a3 0219 	sub.w	r2, r3, #25
 8002052:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002056:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800205a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800205e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002062:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8002066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	      irBuffer[i - 25] = irBuffer[i];
 800206a:	f897 1336 	ldrb.w	r1, [r7, #822]	@ 0x336
 800206e:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 8002072:	f1a3 0219 	sub.w	r2, r3, #25
 8002076:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800207a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800207e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002082:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002086:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800208a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for (uint8_t i = 25; i < 100; i++)
 800208e:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 8002092:	3301      	adds	r3, #1
 8002094:	f887 3336 	strb.w	r3, [r7, #822]	@ 0x336
 8002098:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 800209c:	2b63      	cmp	r3, #99	@ 0x63
 800209e:	d9d2      	bls.n	8002046 <acquire_max_30102_data+0xd6>
	    }

	    //take 25 sets of samples before calculating the heart rate.
	    for (uint8_t i = 75; i < 100; i++)
 80020a0:	234b      	movs	r3, #75	@ 0x4b
 80020a2:	f887 3335 	strb.w	r3, [r7, #821]	@ 0x335
 80020a6:	e06d      	b.n	8002184 <acquire_max_30102_data+0x214>
	    {
	      while (available() == false) //do we have new data?
	    	  check_new_data(); //Check the sensor for new data
 80020a8:	f7ff fe6a 	bl	8001d80 <check_new_data>
	      while (available() == false) //do we have new data?
 80020ac:	f7ff fe4a 	bl	8001d44 <available>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f8      	beq.n	80020a8 <acquire_max_30102_data+0x138>



	      redBuffer[i] = getRed();
 80020b6:	f897 4335 	ldrb.w	r4, [r7, #821]	@ 0x335
 80020ba:	f7ff ff11 	bl	8001ee0 <getRed>
 80020be:	4602      	mov	r2, r0
 80020c0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020c4:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80020c8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	      irBuffer[i] = getIR();
 80020cc:	f897 4335 	ldrb.w	r4, [r7, #821]	@ 0x335
 80020d0:	f7ff ff1c 	bl	8001f0c <getIR>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020da:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80020de:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	     nextSample(); //We're finished with this sample so move to next sample
 80020e2:	f7ff ff29 	bl	8001f38 <nextSample>

	     printf("\n \r HEARATE =%ld",*heart_rate_var);
 80020e6:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020ea:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4619      	mov	r1, r3
 80020f4:	483f      	ldr	r0, [pc, #252]	@ (80021f4 <acquire_max_30102_data+0x284>)
 80020f6:	f002 fc69 	bl	80049cc <iprintf>
	     printf(" is valid HEARATE =%d",*heart_rate_status);
 80020fa:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020fe:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f993 3000 	ldrsb.w	r3, [r3]
 8002108:	4619      	mov	r1, r3
 800210a:	483b      	ldr	r0, [pc, #236]	@ (80021f8 <acquire_max_30102_data+0x288>)
 800210c:	f002 fc5e 	bl	80049cc <iprintf>
	 	 printf(" spo2 =%ld",*spo2_var);
 8002110:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002114:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	4837      	ldr	r0, [pc, #220]	@ (80021fc <acquire_max_30102_data+0x28c>)
 8002120:	f002 fc54 	bl	80049cc <iprintf>
	     printf(" is valid spo2 =%d",*valid_spo2);
 8002124:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8002128:	f993 3000 	ldrsb.w	r3, [r3]
 800212c:	4619      	mov	r1, r3
 800212e:	4834      	ldr	r0, [pc, #208]	@ (8002200 <acquire_max_30102_data+0x290>)
 8002130:	f002 fc4c 	bl	80049cc <iprintf>
		 printf(" red =%ld",redBuffer[i]);
 8002134:	f897 2335 	ldrb.w	r2, [r7, #821]	@ 0x335
 8002138:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800213c:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8002140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002144:	4619      	mov	r1, r3
 8002146:	482f      	ldr	r0, [pc, #188]	@ (8002204 <acquire_max_30102_data+0x294>)
 8002148:	f002 fc40 	bl	80049cc <iprintf>
		 printf(" IR valid spo2 =%ld",irBuffer[i]);
 800214c:	f897 2335 	ldrb.w	r2, [r7, #821]	@ 0x335
 8002150:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002154:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215c:	4619      	mov	r1, r3
 800215e:	482a      	ldr	r0, [pc, #168]	@ (8002208 <acquire_max_30102_data+0x298>)
 8002160:	f002 fc34 	bl	80049cc <iprintf>
		    if(*valid_spo2==1){
 8002164:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8002168:	f993 3000 	ldrsb.w	r3, [r3]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d104      	bne.n	800217a <acquire_max_30102_data+0x20a>
			    	*status=true;
 8002170:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e038      	b.n	80021ec <acquire_max_30102_data+0x27c>
	    for (uint8_t i = 75; i < 100; i++)
 800217a:	f897 3335 	ldrb.w	r3, [r7, #821]	@ 0x335
 800217e:	3301      	adds	r3, #1
 8002180:	f887 3335 	strb.w	r3, [r7, #821]	@ 0x335
 8002184:	f897 3335 	ldrb.w	r3, [r7, #821]	@ 0x335
 8002188:	2b63      	cmp	r3, #99	@ 0x63
 800218a:	d98f      	bls.n	80020ac <acquire_max_30102_data+0x13c>
			    return ;
			    }
	   }
	    //After gathering 25 new samples recalculate HR and SP02

	    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, spo2_var, valid_spo2, heart_rate_var, heart_rate_status);
 800218c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002190:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8002194:	f107 0110 	add.w	r1, r7, #16
 8002198:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800219c:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80021a0:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	9202      	str	r2, [sp, #8]
 80021a8:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80021ac:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	9201      	str	r2, [sp, #4]
 80021b4:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 80021b8:	9200      	str	r2, [sp, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	460a      	mov	r2, r1
 80021be:	f8d7 1330 	ldr.w	r1, [r7, #816]	@ 0x330
 80021c2:	f000 f823 	bl	800220c <maxim_heart_rate_and_oxygen_saturation>
	  while (--num_ters)
 80021c6:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80021ca:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80021ce:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80021d2:	f5a2 724b 	sub.w	r2, r2, #812	@ 0x32c
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	3a01      	subs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80021e0:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f47f af29 	bne.w	800203e <acquire_max_30102_data+0xce>
	  }

}
 80021ec:	f507 774f 	add.w	r7, r7, #828	@ 0x33c
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	08008460 	.word	0x08008460
 80021f8:	08008474 	.word	0x08008474
 80021fc:	0800848c 	.word	0x0800848c
 8002200:	08008498 	.word	0x08008498
 8002204:	080084ac 	.word	0x080084ac
 8002208:	080084b8 	.word	0x080084b8

0800220c <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0b0      	sub	sp, #192	@ 0xc0
 8002210:	af04      	add	r7, sp, #16
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
  int32_t n_peak_interval_sum;

  int32_t n_y_ac, n_x_ac;
  int32_t n_spo2_calc;
  int32_t n_y_dc_max, n_x_dc_max;
  int32_t n_y_dc_max_idx = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int32_t n_x_dc_max_idx = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int32_t an_ratio[5], n_ratio_average;
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002232:	e00f      	b.n	8002254 <maxim_heart_rate_and_oxygen_saturation+0x48>
 8002234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002244:	4413      	add	r3, r2
 8002246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800224a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800224e:	3301      	adds	r3, #1
 8002250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002254:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	dbea      	blt.n	8002234 <maxim_heart_rate_and_oxygen_saturation+0x28>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002272:	e013      	b.n	800229c <maxim_heart_rate_and_oxygen_saturation+0x90>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ;
 8002274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4413      	add	r3, r2
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	4619      	mov	r1, r3
 8002288:	4ab4      	ldr	r2, [pc, #720]	@ (800255c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 800228a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800228e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 8002292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002296:	3301      	adds	r3, #1
 8002298:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800229c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	dbe6      	blt.n	8002274 <maxim_heart_rate_and_oxygen_saturation+0x68>

  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80022ac:	e028      	b.n	8002300 <maxim_heart_rate_and_oxygen_saturation+0xf4>
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;
 80022ae:	4aab      	ldr	r2, [pc, #684]	@ (800255c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80022b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022bc:	3301      	adds	r3, #1
 80022be:	49a7      	ldr	r1, [pc, #668]	@ (800255c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80022c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022c4:	441a      	add	r2, r3
 80022c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022ca:	3302      	adds	r3, #2
 80022cc:	49a3      	ldr	r1, [pc, #652]	@ (800255c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80022ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022d2:	441a      	add	r2, r3
 80022d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022d8:	3303      	adds	r3, #3
 80022da:	49a0      	ldr	r1, [pc, #640]	@ (800255c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80022dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022e0:	4413      	add	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da00      	bge.n	80022e8 <maxim_heart_rate_and_oxygen_saturation+0xdc>
 80022e6:	3303      	adds	r3, #3
 80022e8:	109b      	asrs	r3, r3, #2
 80022ea:	4619      	mov	r1, r3
 80022ec:	4a9b      	ldr	r2, [pc, #620]	@ (800255c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80022ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80022f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022fa:	3301      	adds	r3, #1
 80022fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002304:	2b5f      	cmp	r3, #95	@ 0x5f
 8002306:	ddd2      	ble.n	80022ae <maxim_heart_rate_and_oxygen_saturation+0xa2>
  }
  // calculate threshold
  n_th1=0;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002314:	e00e      	b.n	8002334 <maxim_heart_rate_and_oxygen_saturation+0x128>
    n_th1 +=  an_x[k];
 8002316:	4a91      	ldr	r2, [pc, #580]	@ (800255c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8002318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002324:	4413      	add	r3, r2
 8002326:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 800232a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800232e:	3301      	adds	r3, #1
 8002330:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002338:	2b63      	cmp	r3, #99	@ 0x63
 800233a:	ddec      	ble.n	8002316 <maxim_heart_rate_and_oxygen_saturation+0x10a>
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
 800233c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002340:	4a87      	ldr	r2, [pc, #540]	@ (8002560 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8002342:	fb82 1203 	smull	r1, r2, r2, r3
 8002346:	1152      	asrs	r2, r2, #5
 8002348:	17db      	asrs	r3, r3, #31
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1<30) n_th1=30; // min allowed
 8002350:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002354:	2b1d      	cmp	r3, #29
 8002356:	dc02      	bgt.n	800235e <maxim_heart_rate_and_oxygen_saturation+0x152>
 8002358:	231e      	movs	r3, #30
 800235a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1>60) n_th1=60; // max allowed
 800235e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002362:	2b3c      	cmp	r3, #60	@ 0x3c
 8002364:	dd02      	ble.n	800236c <maxim_heart_rate_and_oxygen_saturation+0x160>
 8002366:	233c      	movs	r3, #60	@ 0x3c
 8002368:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002372:	e00c      	b.n	800238e <maxim_heart_rate_and_oxygen_saturation+0x182>
 8002374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	33b0      	adds	r3, #176	@ 0xb0
 800237c:	443b      	add	r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	f843 2c88 	str.w	r2, [r3, #-136]
 8002384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002388:	3301      	adds	r3, #1
 800238a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800238e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002392:	2b0e      	cmp	r3, #14
 8002394:	ddee      	ble.n	8002374 <maxim_heart_rate_and_oxygen_saturation+0x168>
  // since we flipped signal, we use peak detector azs valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks
 8002396:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800239a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800239e:	230f      	movs	r3, #15
 80023a0:	9302      	str	r3, [sp, #8]
 80023a2:	2304      	movs	r3, #4
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2364      	movs	r3, #100	@ 0x64
 80023ae:	4a6b      	ldr	r2, [pc, #428]	@ (800255c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80023b0:	f000 fa36 	bl	8002820 <maxim_find_peaks>
  n_peak_interval_sum =0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (n_npks>=2){
 80023ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023bc:	2b01      	cmp	r3, #1
 80023be:	dd38      	ble.n	8002432 <maxim_heart_rate_and_oxygen_saturation+0x226>
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80023c6:	e019      	b.n	80023fc <maxim_heart_rate_and_oxygen_saturation+0x1f0>
 80023c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	33b0      	adds	r3, #176	@ 0xb0
 80023d0:	443b      	add	r3, r7
 80023d2:	f853 2c88 	ldr.w	r2, [r3, #-136]
 80023d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023da:	3b01      	subs	r3, #1
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	33b0      	adds	r3, #176	@ 0xb0
 80023e0:	443b      	add	r3, r7
 80023e2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80023ec:	4413      	add	r3, r2
 80023ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023f6:	3301      	adds	r3, #1
 80023f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80023fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002402:	429a      	cmp	r2, r3
 8002404:	dbe0      	blt.n	80023c8 <maxim_heart_rate_and_oxygen_saturation+0x1bc>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 8002406:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002408:	3b01      	subs	r3, #1
 800240a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800240e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002412:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 8002416:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800241a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800241e:	fb92 f2f3 	sdiv	r2, r2, r3
 8002422:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002426:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8002428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e007      	b.n	8002442 <maxim_heart_rate_and_oxygen_saturation+0x236>
  }
  else  {
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 8002432:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002436:	4a4b      	ldr	r2, [pc, #300]	@ (8002564 <maxim_heart_rate_and_oxygen_saturation+0x358>)
 8002438:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 800243a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002448:	e01c      	b.n	8002484 <maxim_heart_rate_and_oxygen_saturation+0x278>
      an_x[k] =  pun_ir_buffer[k] ;
 800244a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	4a40      	ldr	r2, [pc, #256]	@ (800255c <maxim_heart_rate_and_oxygen_saturation+0x350>)
 800245a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800245e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      an_y[k] =  pun_red_buffer[k] ;
 8002462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4619      	mov	r1, r3
 8002470:	4a3d      	ldr	r2, [pc, #244]	@ (8002568 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 8002472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002476:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 800247a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800247e:	3301      	adds	r3, #1
 8002480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002484:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	429a      	cmp	r2, r3
 800248c:	dbdd      	blt.n	800244a <maxim_heart_rate_and_oxygen_saturation+0x23e>
  }

  // find precise min near an_ir_valley_locs
  n_exact_ir_valley_locs_count =n_npks;
 800248e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002490:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  n_i_ratio_count = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for(k=0; k< 5; k++) an_ratio[k]=0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024a6:	e00c      	b.n	80024c2 <maxim_heart_rate_and_oxygen_saturation+0x2b6>
 80024a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	33b0      	adds	r3, #176	@ 0xb0
 80024b0:	443b      	add	r3, r7
 80024b2:	2200      	movs	r2, #0
 80024b4:	f843 2c9c 	str.w	r2, [r3, #-156]
 80024b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024bc:	3301      	adds	r3, #1
 80024be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	ddee      	ble.n	80024a8 <maxim_heart_rate_and_oxygen_saturation+0x29c>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80024ca:	2300      	movs	r3, #0
 80024cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024d0:	e015      	b.n	80024fe <maxim_heart_rate_and_oxygen_saturation+0x2f2>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 80024d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	33b0      	adds	r3, #176	@ 0xb0
 80024da:	443b      	add	r3, r7
 80024dc:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80024e0:	2b64      	cmp	r3, #100	@ 0x64
 80024e2:	dd07      	ble.n	80024f4 <maxim_heart_rate_and_oxygen_saturation+0x2e8>
      *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002564 <maxim_heart_rate_and_oxygen_saturation+0x358>)
 80024e8:	601a      	str	r2, [r3, #0]
      *pch_spo2_valid  = 0;
 80024ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e189      	b.n	8002808 <maxim_heart_rate_and_oxygen_saturation+0x5fc>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80024f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024f8:	3301      	adds	r3, #1
 80024fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002502:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002506:	429a      	cmp	r2, r3
 8002508:	dbe3      	blt.n	80024d2 <maxim_heart_rate_and_oxygen_saturation+0x2c6>
      return;
    }
  }
  // find max between two valley locations
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002510:	e129      	b.n	8002766 <maxim_heart_rate_and_oxygen_saturation+0x55a>
    n_y_dc_max= -16777216 ;
 8002512:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8002516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    n_x_dc_max= -16777216;
 800251a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800251e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 8002522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002526:	3301      	adds	r3, #1
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	33b0      	adds	r3, #176	@ 0xb0
 800252c:	443b      	add	r3, r7
 800252e:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8002532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	33b0      	adds	r3, #176	@ 0xb0
 800253a:	443b      	add	r3, r7
 800253c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b03      	cmp	r3, #3
 8002544:	f340 810a 	ble.w	800275c <maxim_heart_rate_and_oxygen_saturation+0x550>
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8002548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	33b0      	adds	r3, #176	@ 0xb0
 8002550:	443b      	add	r3, r7
 8002552:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800255a:	e034      	b.n	80025c6 <maxim_heart_rate_and_oxygen_saturation+0x3ba>
 800255c:	20000224 	.word	0x20000224
 8002560:	51eb851f 	.word	0x51eb851f
 8002564:	fffffc19 	.word	0xfffffc19
 8002568:	200003b4 	.word	0x200003b4
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 800256c:	4aa8      	ldr	r2, [pc, #672]	@ (8002810 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 800256e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002576:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800257a:	429a      	cmp	r2, r3
 800257c:	da0a      	bge.n	8002594 <maxim_heart_rate_and_oxygen_saturation+0x388>
 800257e:	4aa4      	ldr	r2, [pc, #656]	@ (8002810 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8002580:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800258c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 8002594:	4a9f      	ldr	r2, [pc, #636]	@ (8002814 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8002596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80025a2:	429a      	cmp	r2, r3
 80025a4:	da0a      	bge.n	80025bc <maxim_heart_rate_and_oxygen_saturation+0x3b0>
 80025a6:	4a9b      	ldr	r2, [pc, #620]	@ (8002814 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80025a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80025bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025c0:	3301      	adds	r3, #1
 80025c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025ca:	3301      	adds	r3, #1
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	33b0      	adds	r3, #176	@ 0xb0
 80025d0:	443b      	add	r3, r7
 80025d2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80025d6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80025da:	429a      	cmp	r2, r3
 80025dc:	dbc6      	blt.n	800256c <maxim_heart_rate_and_oxygen_saturation+0x360>
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 80025de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025e2:	3301      	adds	r3, #1
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	33b0      	adds	r3, #176	@ 0xb0
 80025e8:	443b      	add	r3, r7
 80025ea:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80025ee:	4a89      	ldr	r2, [pc, #548]	@ (8002814 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80025f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	33b0      	adds	r3, #176	@ 0xb0
 80025fc:	443b      	add	r3, r7
 80025fe:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002602:	4984      	ldr	r1, [pc, #528]	@ (8002814 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8002604:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002608:	1ad2      	subs	r2, r2, r3
 800260a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	33b0      	adds	r3, #176	@ 0xb0
 8002612:	443b      	add	r3, r7
 8002614:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002618:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800261c:	1acb      	subs	r3, r1, r3
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ;
 8002624:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	33b0      	adds	r3, #176	@ 0xb0
 800262c:	443b      	add	r3, r7
 800262e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002632:	4a78      	ldr	r2, [pc, #480]	@ (8002814 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8002634:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002638:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800263c:	3301      	adds	r3, #1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	33b0      	adds	r3, #176	@ 0xb0
 8002642:	443b      	add	r3, r7
 8002644:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8002648:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	33b0      	adds	r3, #176	@ 0xb0
 8002650:	443b      	add	r3, r7
 8002652:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002656:	1acb      	subs	r3, r1, r3
 8002658:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800265a:	fb91 f3f3 	sdiv	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 8002662:	4a6c      	ldr	r2, [pc, #432]	@ (8002814 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8002664:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800266c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	677b      	str	r3, [r7, #116]	@ 0x74
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 8002672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002676:	3301      	adds	r3, #1
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	33b0      	adds	r3, #176	@ 0xb0
 800267c:	443b      	add	r3, r7
 800267e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002682:	4a63      	ldr	r2, [pc, #396]	@ (8002810 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8002684:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	33b0      	adds	r3, #176	@ 0xb0
 8002690:	443b      	add	r3, r7
 8002692:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002696:	495e      	ldr	r1, [pc, #376]	@ (8002810 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8002698:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800269c:	1ad2      	subs	r2, r2, r3
 800269e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	33b0      	adds	r3, #176	@ 0xb0
 80026a6:	443b      	add	r3, r7
 80026a8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80026ac:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80026b0:	1acb      	subs	r3, r1, r3
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]);
 80026b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	33b0      	adds	r3, #176	@ 0xb0
 80026c0:	443b      	add	r3, r7
 80026c2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80026c6:	4a52      	ldr	r2, [pc, #328]	@ (8002810 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80026c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026d0:	3301      	adds	r3, #1
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	33b0      	adds	r3, #176	@ 0xb0
 80026d6:	443b      	add	r3, r7
 80026d8:	f853 1c88 	ldr.w	r1, [r3, #-136]
 80026dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	33b0      	adds	r3, #176	@ 0xb0
 80026e4:	443b      	add	r3, r7
 80026e6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80026ea:	1acb      	subs	r3, r1, r3
 80026ec:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80026ee:	fb91 f3f3 	sdiv	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 80026f6:	4a46      	ldr	r2, [pc, #280]	@ (8002810 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80026f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002700:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	673b      	str	r3, [r7, #112]	@ 0x70
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8002706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002708:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	11db      	asrs	r3, r3, #7
 8002712:	66fb      	str	r3, [r7, #108]	@ 0x6c
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8002714:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002716:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	11db      	asrs	r3, r3, #7
 8002720:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8002722:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002724:	2b00      	cmp	r3, #0
 8002726:	dd19      	ble.n	800275c <maxim_heart_rate_and_oxygen_saturation+0x550>
 8002728:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800272c:	2b04      	cmp	r3, #4
 800272e:	dc15      	bgt.n	800275c <maxim_heart_rate_and_oxygen_saturation+0x550>
 8002730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d012      	beq.n	800275c <maxim_heart_rate_and_oxygen_saturation+0x550>
      {
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8002736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002738:	2264      	movs	r2, #100	@ 0x64
 800273a:	fb03 f202 	mul.w	r2, r3, r2
 800273e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002740:	fb92 f2f3 	sdiv	r2, r2, r3
 8002744:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	33b0      	adds	r3, #176	@ 0xb0
 800274c:	443b      	add	r3, r7
 800274e:	f843 2c9c 	str.w	r2, [r3, #-156]
        n_i_ratio_count++;
 8002752:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002756:	3301      	adds	r3, #1
 8002758:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 800275c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002760:	3301      	adds	r3, #1
 8002762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002766:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800276a:	3b01      	subs	r3, #1
 800276c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002770:	429a      	cmp	r2, r3
 8002772:	f6ff aece 	blt.w	8002512 <maxim_heart_rate_and_oxygen_saturation+0x306>
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f943 	bl	8002a0a <maxim_sort_ascend>
  n_middle_idx= n_i_ratio_count/2;
 8002784:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002788:	0fda      	lsrs	r2, r3, #31
 800278a:	4413      	add	r3, r2
 800278c:	105b      	asrs	r3, r3, #1
 800278e:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (n_middle_idx >1)
 8002790:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002792:	2b01      	cmp	r3, #1
 8002794:	dd13      	ble.n	80027be <maxim_heart_rate_and_oxygen_saturation+0x5b2>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8002796:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002798:	3b01      	subs	r3, #1
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	33b0      	adds	r3, #176	@ 0xb0
 800279e:	443b      	add	r3, r7
 80027a0:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 80027a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	33b0      	adds	r3, #176	@ 0xb0
 80027aa:	443b      	add	r3, r7
 80027ac:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80027b0:	4413      	add	r3, r2
 80027b2:	0fda      	lsrs	r2, r3, #31
 80027b4:	4413      	add	r3, r2
 80027b6:	105b      	asrs	r3, r3, #1
 80027b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027bc:	e007      	b.n	80027ce <maxim_heart_rate_and_oxygen_saturation+0x5c2>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
 80027be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	33b0      	adds	r3, #176	@ 0xb0
 80027c4:	443b      	add	r3, r7
 80027c6:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80027ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  if( n_ratio_average>2 && n_ratio_average <184){
 80027ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	dd11      	ble.n	80027fa <maxim_heart_rate_and_oxygen_saturation+0x5ee>
 80027d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027da:	2bb7      	cmp	r3, #183	@ 0xb7
 80027dc:	dc0d      	bgt.n	80027fa <maxim_heart_rate_and_oxygen_saturation+0x5ee>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80027de:	4a0e      	ldr	r2, [pc, #56]	@ (8002818 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 80027e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	67bb      	str	r3, [r7, #120]	@ 0x78
    *pn_spo2 = n_spo2_calc ;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80027ee:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80027f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e006      	b.n	8002808 <maxim_heart_rate_and_oxygen_saturation+0x5fc>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	4a07      	ldr	r2, [pc, #28]	@ (800281c <maxim_heart_rate_and_oxygen_saturation+0x610>)
 80027fe:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8002800:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
  }
}
 8002808:	37b0      	adds	r7, #176	@ 0xb0
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000224 	.word	0x20000224
 8002814:	200003b4 	.word	0x200003b4
 8002818:	080085b8 	.word	0x080085b8
 800281c:	fffffc19 	.word	0xfffffc19

08002820 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f812 	bl	8002862 <maxim_peaks_above_min_height>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f880 	bl	800294a <maxim_remove_close_peaks>
  *n_npks = min( *n_npks, n_max_num );
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	429a      	cmp	r2, r3
 8002852:	bfa8      	it	ge
 8002854:	461a      	movge	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8002862:	b480      	push	{r7}
 8002864:	b087      	sub	sp, #28
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
  int32_t i = 1, n_width;
 8002870:	2301      	movs	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
  *n_npks = 0;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

  while (i < n_size-1){
 800287a:	e05a      	b.n	8002932 <maxim_peaks_above_min_height+0xd0>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a3a      	ldr	r2, [r7, #32]
 8002888:	429a      	cmp	r2, r3
 800288a:	da4f      	bge.n	800292c <maxim_peaks_above_min_height+0xca>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800289c:	3b01      	subs	r3, #1
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	440b      	add	r3, r1
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	dd40      	ble.n	800292c <maxim_peaks_above_min_height+0xca>
      n_width = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 80028ae:	e002      	b.n	80028b6 <maxim_peaks_above_min_height+0x54>
        n_width++;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	3301      	adds	r3, #1
 80028b4:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	dd0d      	ble.n	80028de <maxim_peaks_above_min_height+0x7c>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	440b      	add	r3, r1
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	440b      	add	r3, r1
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d0e8      	beq.n	80028b0 <maxim_peaks_above_min_height+0x4e>
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	6979      	ldr	r1, [r7, #20]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	440b      	add	r3, r1
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	440b      	add	r3, r1
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	dd13      	ble.n	8002922 <maxim_peaks_above_min_height+0xc0>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b0e      	cmp	r3, #14
 8002900:	dc0f      	bgt.n	8002922 <maxim_peaks_above_min_height+0xc0>
        pn_locs[(*n_npks)++] = i;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1c59      	adds	r1, r3, #1
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	6011      	str	r1, [r2, #0]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	601a      	str	r2, [r3, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	3301      	adds	r3, #1
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4413      	add	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8002920:	e007      	b.n	8002932 <maxim_peaks_above_min_height+0xd0>
      }
      else
        i += n_width;
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 800292a:	e002      	b.n	8002932 <maxim_peaks_above_min_height+0xd0>
    }
    else
      i++;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3301      	adds	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
  while (i < n_size-1){
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	3b01      	subs	r3, #1
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	db9f      	blt.n	800287c <maxim_peaks_above_min_height+0x1a>
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b088      	sub	sp, #32
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]

  int32_t i, j, n_old_npks, n_dist;

  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68f9      	ldr	r1, [r7, #12]
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f895 	bl	8002a90 <maxim_sort_indices_descend>

  for ( i = -1; i < *pn_npks; i++ ){
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	e03e      	b.n	80029ec <maxim_remove_close_peaks+0xa2>
    n_old_npks = *pn_npks;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	617b      	str	r3, [r7, #20]
    *pn_npks = i+1;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3301      	adds	r3, #1
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	e02c      	b.n	80029de <maxim_remove_close_peaks+0x94>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d005      	beq.n	80029a2 <maxim_remove_close_peaks+0x58>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	440b      	add	r3, r1
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	e001      	b.n	80029a6 <maxim_remove_close_peaks+0x5c>
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	613b      	str	r3, [r7, #16]
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	dc04      	bgt.n	80029bc <maxim_remove_close_peaks+0x72>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	425b      	negs	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	da0d      	bge.n	80029d8 <maxim_remove_close_peaks+0x8e>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	441a      	add	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1c58      	adds	r0, r3, #1
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	6008      	str	r0, [r1, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	440b      	add	r3, r1
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	3301      	adds	r3, #1
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	dbce      	blt.n	8002984 <maxim_remove_close_peaks+0x3a>
  for ( i = -1; i < *pn_npks; i++ ){
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3301      	adds	r3, #1
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	dbbb      	blt.n	800296e <maxim_remove_close_peaks+0x24>
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f804 	bl	8002a0a <maxim_sort_ascend>
}
 8002a02:	bf00      	nop
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8002a14:	2301      	movs	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e02f      	b.n	8002a7a <maxim_sort_ascend+0x70>
    n_temp = pn_x[i];
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e00f      	b.n	8002a4c <maxim_sort_ascend+0x42>
        pn_x[j] = pn_x[j-1];
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a32:	3b01      	subs	r3, #1
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	441a      	add	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	440b      	add	r3, r1
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	dd0a      	ble.n	8002a68 <maxim_sort_ascend+0x5e>
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	dbe1      	blt.n	8002a2c <maxim_sort_ascend+0x22>
    pn_x[j] = n_temp;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3301      	adds	r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	dbcb      	blt.n	8002a1a <maxim_sort_ascend+0x10>
  }
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	@ 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	e037      	b.n	8002b12 <maxim_sort_indices_descend+0x82>
    n_temp = pn_indx[i];
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	617b      	str	r3, [r7, #20]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e00f      	b.n	8002ad4 <maxim_sort_indices_descend+0x44>
      pn_indx[j] = pn_indx[j-1];
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002aba:	3b01      	subs	r3, #1
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	441a      	add	r2, r3
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	440b      	add	r3, r1
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	dd12      	ble.n	8002b00 <maxim_sort_indices_descend+0x70>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002aea:	3b01      	subs	r3, #1
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	440b      	add	r3, r1
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	440b      	add	r3, r1
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dcd9      	bgt.n	8002ab4 <maxim_sort_indices_descend+0x24>
    pn_indx[j] = n_temp;
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	4413      	add	r3, r2
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	dbc3      	blt.n	8002aa2 <maxim_sort_indices_descend+0x12>
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	3724      	adds	r7, #36	@ 0x24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <FSM_INIT>:
#include<state_machine.h>
#include"NRF_DRIVER.h"



void FSM_INIT(StateMachine *sm){
 8002b28:	b4b0      	push	{r4, r5, r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	sm->current_state=STATE_HEART_DATA_ACQUIRE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
	sm->valid_heart_rate=0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	705a      	strb	r2, [r3, #1]
	sm->spo2=0;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
	sm->heart_rate=0;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
	sm->valid_spo2=0;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	731a      	strb	r2, [r3, #12]
	strcpy(sm->nrf_payload,"default_payload");
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	330d      	adds	r3, #13
 8002b52:	4a06      	ldr	r2, [pc, #24]	@ (8002b6c <FSM_INIT+0x44>)
 8002b54:	461c      	mov	r4, r3
 8002b56:	4615      	mov	r5, r2
 8002b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b5a:	6020      	str	r0, [r4, #0]
 8002b5c:	6061      	str	r1, [r4, #4]
 8002b5e:	60a2      	str	r2, [r4, #8]
 8002b60:	60e3      	str	r3, [r4, #12]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bcb0      	pop	{r4, r5, r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	080084cc 	.word	0x080084cc

08002b70 <execute_sm>:

void execute_sm(StateMachine *sm){
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b08d      	sub	sp, #52	@ 0x34
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	6078      	str	r0, [r7, #4]
	switch(sm->current_state){
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	f000 80b7 	beq.w	8002cf0 <execute_sm+0x180>
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	f300 80d8 	bgt.w	8002d38 <execute_sm+0x1c8>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <execute_sm+0x22>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d024      	beq.n	8002bda <execute_sm+0x6a>
			}
			sm->current_state=STATE_HEART_DATA_ACQUIRE;
			break;
	}

}
 8002b90:	e0d2      	b.n	8002d38 <execute_sm+0x1c8>
			bool valid_data=false;
 8002b92:	2300      	movs	r3, #0
 8002b94:	74fb      	strb	r3, [r7, #19]
			uint32_t timeout_val=2; //try for 10 seconds to get heart rate data
 8002b96:	2302      	movs	r3, #2
 8002b98:	617b      	str	r3, [r7, #20]
			acquire_max_30102_data(timeout_val,&(sm->valid_heart_rate),&(sm->spo2),&(sm->heart_rate),&(sm->valid_spo2),&valid_data);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	1c59      	adds	r1, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	1d18      	adds	r0, r3, #4
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f103 0408 	add.w	r4, r3, #8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	330c      	adds	r3, #12
 8002bac:	f107 0213 	add.w	r2, r7, #19
 8002bb0:	9201      	str	r2, [sp, #4]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4623      	mov	r3, r4
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6978      	ldr	r0, [r7, #20]
 8002bba:	f7ff f9d9 	bl	8001f70 <acquire_max_30102_data>
			sm->current_state=STATE_PACKET_FORMATION;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
			if(!valid_data){
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	f083 0301 	eor.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80b2 	beq.w	8002d36 <execute_sm+0x1c6>
				printf("timeout! \n \r");
 8002bd2:	485b      	ldr	r0, [pc, #364]	@ (8002d40 <execute_sm+0x1d0>)
 8002bd4:	f001 fefa 	bl	80049cc <iprintf>
			break;
 8002bd8:	e0ad      	b.n	8002d36 <execute_sm+0x1c6>
			int hr=0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
			int spo2=0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
			printf("state changed to new state sending dummy packet \n \r");
 8002be2:	4858      	ldr	r0, [pc, #352]	@ (8002d44 <execute_sm+0x1d4>)
 8002be4:	f001 fef2 	bl	80049cc <iprintf>
			hr=sm->heart_rate;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
			spo2=sm->spo2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	623b      	str	r3, [r7, #32]
			int payload_idx=0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]
			sm->nrf_payload[payload_idx++]='H';
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	61fa      	str	r2, [r7, #28]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	2248      	movs	r2, #72	@ 0x48
 8002c04:	735a      	strb	r2, [r3, #13]
			if(hr==-999 ||spo2==-999){
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	4a4f      	ldr	r2, [pc, #316]	@ (8002d48 <execute_sm+0x1d8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <execute_sm+0xa6>
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	4a4d      	ldr	r2, [pc, #308]	@ (8002d48 <execute_sm+0x1d8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d106      	bne.n	8002c24 <execute_sm+0xb4>
				printf("Invalid \n \r");
 8002c16:	484d      	ldr	r0, [pc, #308]	@ (8002d4c <execute_sm+0x1dc>)
 8002c18:	f001 fed8 	bl	80049cc <iprintf>
				hr=0;spo2=0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
			printf("hr %d \n \r",hr);
 8002c24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c26:	484a      	ldr	r0, [pc, #296]	@ (8002d50 <execute_sm+0x1e0>)
 8002c28:	f001 fed0 	bl	80049cc <iprintf>
			printf("spo2 %d \n \r",spo2);
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	4849      	ldr	r0, [pc, #292]	@ (8002d54 <execute_sm+0x1e4>)
 8002c30:	f001 fecc 	bl	80049cc <iprintf>
			sprintf(temp_holder, "%d", hr);
 8002c34:	f107 0308 	add.w	r3, r7, #8
 8002c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3a:	4947      	ldr	r1, [pc, #284]	@ (8002d58 <execute_sm+0x1e8>)
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 fedf 	bl	8004a00 <siprintf>
			printf("%s \n \r",temp_holder);
 8002c42:	f107 0308 	add.w	r3, r7, #8
 8002c46:	4619      	mov	r1, r3
 8002c48:	4844      	ldr	r0, [pc, #272]	@ (8002d5c <execute_sm+0x1ec>)
 8002c4a:	f001 febf 	bl	80049cc <iprintf>
			int i=0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
			while(temp_holder[i]){
 8002c52:	e00d      	b.n	8002c70 <execute_sm+0x100>
			sm->nrf_payload[payload_idx++]=temp_holder[i++];
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	1c53      	adds	r3, r2, #1
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	1c59      	adds	r1, r3, #1
 8002c5e:	61f9      	str	r1, [r7, #28]
 8002c60:	3228      	adds	r2, #40	@ 0x28
 8002c62:	443a      	add	r2, r7
 8002c64:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	460a      	mov	r2, r1
 8002c6e:	735a      	strb	r2, [r3, #13]
			while(temp_holder[i]){
 8002c70:	f107 0208 	add.w	r2, r7, #8
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1ea      	bne.n	8002c54 <execute_sm+0xe4>
			sm->nrf_payload[payload_idx++]='O';
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	61fa      	str	r2, [r7, #28]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	224f      	movs	r2, #79	@ 0x4f
 8002c8a:	735a      	strb	r2, [r3, #13]
			i++;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	61bb      	str	r3, [r7, #24]
			sprintf(temp_holder, "%d", spo2);
 8002c92:	f107 0308 	add.w	r3, r7, #8
 8002c96:	6a3a      	ldr	r2, [r7, #32]
 8002c98:	492f      	ldr	r1, [pc, #188]	@ (8002d58 <execute_sm+0x1e8>)
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 feb0 	bl	8004a00 <siprintf>
			i=0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
			while(temp_holder[i]){
 8002ca4:	e00d      	b.n	8002cc2 <execute_sm+0x152>
			sm->nrf_payload[payload_idx++]=temp_holder[i++];
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	1c53      	adds	r3, r2, #1
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	1c59      	adds	r1, r3, #1
 8002cb0:	61f9      	str	r1, [r7, #28]
 8002cb2:	3228      	adds	r2, #40	@ 0x28
 8002cb4:	443a      	add	r2, r7
 8002cb6:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	460a      	mov	r2, r1
 8002cc0:	735a      	strb	r2, [r3, #13]
			while(temp_holder[i]){
 8002cc2:	f107 0208 	add.w	r2, r7, #8
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ea      	bne.n	8002ca6 <execute_sm+0x136>
			sm->nrf_payload[payload_idx]='\0';
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	330d      	adds	r3, #13
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
			printf("transmittes string %s",sm->nrf_payload);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	330d      	adds	r3, #13
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	481f      	ldr	r0, [pc, #124]	@ (8002d60 <execute_sm+0x1f0>)
 8002ce4:	f001 fe72 	bl	80049cc <iprintf>
			sm->current_state=STATE_TRANSMIT_NRF;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	701a      	strb	r2, [r3, #0]
			break;
 8002cee:	e023      	b.n	8002d38 <execute_sm+0x1c8>
			if(NRF_TX_DATA(sm->nrf_payload,strlen(sm->nrf_payload))==1){
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f103 040d 	add.w	r4, r3, #13
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	330d      	adds	r3, #13
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd fac0 	bl	8000280 <strlen>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	4619      	mov	r1, r3
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7fe fd22 	bl	8001750 <NRF_TX_DATA>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10a      	bne.n	8002d28 <execute_sm+0x1b8>
			printf("\n \r transmit success payload size was %d \n \r",strlen(sm->nrf_payload));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	330d      	adds	r3, #13
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fab2 	bl	8000280 <strlen>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4810      	ldr	r0, [pc, #64]	@ (8002d64 <execute_sm+0x1f4>)
 8002d22:	f001 fe53 	bl	80049cc <iprintf>
 8002d26:	e002      	b.n	8002d2e <execute_sm+0x1be>
				printf("\n \r Something went wrong ! \n \r");
 8002d28:	480f      	ldr	r0, [pc, #60]	@ (8002d68 <execute_sm+0x1f8>)
 8002d2a:	f001 fe4f 	bl	80049cc <iprintf>
			sm->current_state=STATE_HEART_DATA_ACQUIRE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
			break;
 8002d34:	e000      	b.n	8002d38 <execute_sm+0x1c8>
			break;
 8002d36:	bf00      	nop
}
 8002d38:	bf00      	nop
 8002d3a:	372c      	adds	r7, #44	@ 0x2c
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	080084dc 	.word	0x080084dc
 8002d44:	080084ec 	.word	0x080084ec
 8002d48:	fffffc19 	.word	0xfffffc19
 8002d4c:	08008520 	.word	0x08008520
 8002d50:	0800852c 	.word	0x0800852c
 8002d54:	08008538 	.word	0x08008538
 8002d58:	08008544 	.word	0x08008544
 8002d5c:	08008548 	.word	0x08008548
 8002d60:	08008550 	.word	0x08008550
 8002d64:	08008568 	.word	0x08008568
 8002d68:	08008598 	.word	0x08008598

08002d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <NMI_Handler+0x4>

08002d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d78:	bf00      	nop
 8002d7a:	e7fd      	b.n	8002d78 <HardFault_Handler+0x4>

08002d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <MemManage_Handler+0x4>

08002d84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <BusFault_Handler+0x4>

08002d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <UsageFault_Handler+0x4>

08002d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  return 1;
 8002dc2:	2301      	movs	r3, #1
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_kill>:

int _kill(int pid, int sig)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dd8:	f001 fec8 	bl	8004b6c <__errno>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2216      	movs	r2, #22
 8002de0:	601a      	str	r2, [r3, #0]
  return -1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_exit>:

void _exit (int status)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002df6:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ffe7 	bl	8002dce <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <_exit+0x12>

08002e04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e00a      	b.n	8002e2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e16:	f000 f923 	bl	8003060 <__io_getchar>
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	60ba      	str	r2, [r7, #8]
 8002e22:	b2ca      	uxtb	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	dbf0      	blt.n	8002e16 <_read+0x12>
  }

  return len;
 8002e34:	687b      	ldr	r3, [r7, #4]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b086      	sub	sp, #24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e009      	b.n	8002e64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	60ba      	str	r2, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 f8f3 	bl	8003044 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3301      	adds	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	dbf1      	blt.n	8002e50 <_write+0x12>
  }
  return len;
 8002e6c:	687b      	ldr	r3, [r7, #4]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <_close>:

int _close(int file)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e9e:	605a      	str	r2, [r3, #4]
  return 0;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <_isatty>:

int _isatty(int file)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eb6:	2301      	movs	r3, #1
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee8:	4a14      	ldr	r2, [pc, #80]	@ (8002f3c <_sbrk+0x5c>)
 8002eea:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <_sbrk+0x60>)
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef4:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <_sbrk+0x64>)
 8002efe:	4a12      	ldr	r2, [pc, #72]	@ (8002f48 <_sbrk+0x68>)
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f02:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <_sbrk+0x64>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d207      	bcs.n	8002f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f10:	f001 fe2c 	bl	8004b6c <__errno>
 8002f14:	4603      	mov	r3, r0
 8002f16:	220c      	movs	r2, #12
 8002f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1e:	e009      	b.n	8002f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f20:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <_sbrk+0x64>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f26:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	4a05      	ldr	r2, [pc, #20]	@ (8002f44 <_sbrk+0x64>)
 8002f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20020000 	.word	0x20020000
 8002f40:	00000400 	.word	0x00000400
 8002f44:	20000544 	.word	0x20000544
 8002f48:	20000698 	.word	0x20000698

08002f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <SystemInit+0x20>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f56:	4a05      	ldr	r2, [pc, #20]	@ (8002f6c <SystemInit+0x20>)
 8002f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <usart_init>:
 *  usart get and put and usart init
 */

#include "usart.h"

void usart_init() {
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 8002f74:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <usart_init+0x70>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	4a19      	ldr	r2, [pc, #100]	@ (8002fe0 <usart_init+0x70>)
 8002f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f7e:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 8002f80:	4b17      	ldr	r3, [pc, #92]	@ (8002fe0 <usart_init+0x70>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <usart_init+0x70>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 and PA3 as alternate function
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER2_Pos);
 8002f8c:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <usart_init+0x74>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a14      	ldr	r2, [pc, #80]	@ (8002fe4 <usart_init+0x74>)
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER3_Pos);
 8002f98:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <usart_init+0x74>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a11      	ldr	r2, [pc, #68]	@ (8002fe4 <usart_init+0x74>)
 8002f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fa2:	6013      	str	r3, [r2, #0]

    // Set PA2 to USART_TX and PA3 to USART_RX
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos); // TX alternate function
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe4 <usart_init+0x74>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8002fe4 <usart_init+0x74>)
 8002faa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fae:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL3_Pos); // RX alternate function
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe4 <usart_init+0x74>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8002fe4 <usart_init+0x74>)
 8002fb6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8002fba:	6213      	str	r3, [r2, #32]

    // Enable USART, transmitter, and receiver
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <usart_init+0x78>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a09      	ldr	r2, [pc, #36]	@ (8002fe8 <usart_init+0x78>)
 8002fc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fc6:	f043 030c 	orr.w	r3, r3, #12
 8002fca:	60d3      	str	r3, [r2, #12]

    // Set baud rate to 9600 (make sure BAUD_9600 is defined based on your clock setup)
    USART2->BRR = BAUD_9600;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <usart_init+0x78>)
 8002fce:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002fd2:	609a      	str	r2, [r3, #8]

    // Test character output to verify USART setup
   // USART2->DR = 'B';
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40020000 	.word	0x40020000
 8002fe8:	40004400 	.word	0x40004400

08002fec <usart_out>:

void usart_out(char ch) {
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)) {
 8002ff6:	bf00      	nop
 8002ff8:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <usart_out+0x2c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f9      	beq.n	8002ff8 <usart_out+0xc>
        // Wait until transmit buffer is empty
    }
    USART2->DR = ch;
 8003004:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <usart_out+0x2c>)
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	6053      	str	r3, [r2, #4]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40004400 	.word	0x40004400

0800301c <usart_get>:
    while (*string) {
        usart_out(*string++);
    }
}

char usart_get() {
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE)) {
 8003020:	bf00      	nop
 8003022:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <usart_get+0x24>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f9      	beq.n	8003022 <usart_get+0x6>
        // Wait until receive buffer is not empty
    }
    return USART2->DR;
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <usart_get+0x24>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	b2db      	uxtb	r3, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40004400 	.word	0x40004400

08003044 <__io_putchar>:

// Override weak symbols for printf and getchar compatibility
int __io_putchar(int ch) {
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
    usart_out((char)ch); // Send character using USART
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ffcb 	bl	8002fec <usart_out>
    return ch;           // Return the character for compatibility
 8003056:	687b      	ldr	r3, [r7, #4]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <__io_getchar>:

int __io_getchar(void) {
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
    return usart_get();  // Receive character using USART
 8003064:	f7ff ffda 	bl	800301c <usart_get>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003074:	f7ff ff6a 	bl	8002f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003078:	480c      	ldr	r0, [pc, #48]	@ (80030ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800307a:	490d      	ldr	r1, [pc, #52]	@ (80030b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800307c:	4a0d      	ldr	r2, [pc, #52]	@ (80030b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003080:	e002      	b.n	8003088 <LoopCopyDataInit>

08003082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003086:	3304      	adds	r3, #4

08003088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800308a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800308c:	d3f9      	bcc.n	8003082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800308e:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003090:	4c0a      	ldr	r4, [pc, #40]	@ (80030bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003094:	e001      	b.n	800309a <LoopFillZerobss>

08003096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003098:	3204      	adds	r2, #4

0800309a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800309a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800309c:	d3fb      	bcc.n	8003096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800309e:	f001 fd6b 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030a2:	f7fe fd0f 	bl	8001ac4 <main>
  bx  lr    
 80030a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030b0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80030b4:	08008ac0 	.word	0x08008ac0
  ldr r2, =_sbss
 80030b8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80030bc:	20000698 	.word	0x20000698

080030c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030c0:	e7fe      	b.n	80030c0 <ADC_IRQHandler>
	...

080030c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030cc:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_InitTick+0x54>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b12      	ldr	r3, [pc, #72]	@ (800311c <HAL_InitTick+0x58>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030da:	fbb3 f3f1 	udiv	r3, r3, r1
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f8d4 	bl	8003290 <HAL_SYSTICK_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00e      	b.n	8003110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d80a      	bhi.n	800310e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f8:	2200      	movs	r2, #0
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f000 f8aa 	bl	8003258 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003104:	4a06      	ldr	r2, [pc, #24]	@ (8003120 <HAL_InitTick+0x5c>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000000 	.word	0x20000000
 800311c:	20000008 	.word	0x20000008
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return uwTick;
 8003128:	4b03      	ldr	r3, [pc, #12]	@ (8003138 <HAL_GetTick+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000548 	.word	0x20000548

0800313c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003140:	4b04      	ldr	r3, [pc, #16]	@ (8003154 <__NVIC_GetPriorityGrouping+0x18>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	0a1b      	lsrs	r3, r3, #8
 8003146:	f003 0307 	and.w	r3, r3, #7
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	2b00      	cmp	r3, #0
 800316a:	db0a      	blt.n	8003182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	490c      	ldr	r1, [pc, #48]	@ (80031a4 <__NVIC_SetPriority+0x4c>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	0112      	lsls	r2, r2, #4
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	440b      	add	r3, r1
 800317c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003180:	e00a      	b.n	8003198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4908      	ldr	r1, [pc, #32]	@ (80031a8 <__NVIC_SetPriority+0x50>)
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	3b04      	subs	r3, #4
 8003190:	0112      	lsls	r2, r2, #4
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	440b      	add	r3, r1
 8003196:	761a      	strb	r2, [r3, #24]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000e100 	.word	0xe000e100
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	@ 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f1c3 0307 	rsb	r3, r3, #7
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	bf28      	it	cs
 80031ca:	2304      	movcs	r3, #4
 80031cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3304      	adds	r3, #4
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d902      	bls.n	80031dc <NVIC_EncodePriority+0x30>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3b03      	subs	r3, #3
 80031da:	e000      	b.n	80031de <NVIC_EncodePriority+0x32>
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	f04f 32ff 	mov.w	r2, #4294967295
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	401a      	ands	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f4:	f04f 31ff 	mov.w	r1, #4294967295
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43d9      	mvns	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	4313      	orrs	r3, r2
         );
}
 8003206:	4618      	mov	r0, r3
 8003208:	3724      	adds	r7, #36	@ 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f7ff ff8e 	bl	8003158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800326a:	f7ff ff67 	bl	800313c <__NVIC_GetPriorityGrouping>
 800326e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	6978      	ldr	r0, [r7, #20]
 8003276:	f7ff ff99 	bl	80031ac <NVIC_EncodePriority>
 800327a:	4602      	mov	r2, r0
 800327c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff68 	bl	8003158 <__NVIC_SetPriority>
}
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ffbb 	bl	8003214 <SysTick_Config>
 800329e:	4603      	mov	r3, r0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e267      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d075      	beq.n	80033b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032c6:	4b88      	ldr	r3, [pc, #544]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d00c      	beq.n	80032ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b85      	ldr	r3, [pc, #532]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d112      	bne.n	8003304 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032de:	4b82      	ldr	r3, [pc, #520]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ea:	d10b      	bne.n	8003304 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	4b7e      	ldr	r3, [pc, #504]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d05b      	beq.n	80033b0 <HAL_RCC_OscConfig+0x108>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d157      	bne.n	80033b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e242      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800330c:	d106      	bne.n	800331c <HAL_RCC_OscConfig+0x74>
 800330e:	4b76      	ldr	r3, [pc, #472]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a75      	ldr	r2, [pc, #468]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e01d      	b.n	8003358 <HAL_RCC_OscConfig+0xb0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x98>
 8003326:	4b70      	ldr	r3, [pc, #448]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6f      	ldr	r2, [pc, #444]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b6d      	ldr	r3, [pc, #436]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6c      	ldr	r2, [pc, #432]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0xb0>
 8003340:	4b69      	ldr	r3, [pc, #420]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a68      	ldr	r2, [pc, #416]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b66      	ldr	r3, [pc, #408]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a65      	ldr	r2, [pc, #404]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7ff fee0 	bl	8003124 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7ff fedc 	bl	8003124 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	@ 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e207      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b5b      	ldr	r3, [pc, #364]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0xc0>
 8003386:	e014      	b.n	80033b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7ff fecc 	bl	8003124 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7ff fec8 	bl	8003124 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	@ 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1f3      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	4b51      	ldr	r3, [pc, #324]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0xe8>
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d063      	beq.n	8003486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033be:	4b4a      	ldr	r3, [pc, #296]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b47      	ldr	r3, [pc, #284]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d11c      	bne.n	8003410 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d6:	4b44      	ldr	r3, [pc, #272]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	4b41      	ldr	r3, [pc, #260]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_RCC_OscConfig+0x152>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e1c7      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b3b      	ldr	r3, [pc, #236]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4937      	ldr	r1, [pc, #220]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	e03a      	b.n	8003486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b34      	ldr	r3, [pc, #208]	@ (80034ec <HAL_RCC_OscConfig+0x244>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7ff fe81 	bl	8003124 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7ff fe7d 	bl	8003124 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1a8      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	4b2b      	ldr	r3, [pc, #172]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b28      	ldr	r3, [pc, #160]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4925      	ldr	r1, [pc, #148]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	e015      	b.n	8003486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <HAL_RCC_OscConfig+0x244>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7ff fe60 	bl	8003124 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7ff fe5c 	bl	8003124 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e187      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d036      	beq.n	8003500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <HAL_RCC_OscConfig+0x248>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7ff fe40 	bl	8003124 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7ff fe3c 	bl	8003124 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e167      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	4b0b      	ldr	r3, [pc, #44]	@ (80034e8 <HAL_RCC_OscConfig+0x240>)
 80034bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x200>
 80034c6:	e01b      	b.n	8003500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c8:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <HAL_RCC_OscConfig+0x248>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ce:	f7ff fe29 	bl	8003124 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	e00e      	b.n	80034f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d6:	f7ff fe25 	bl	8003124 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d907      	bls.n	80034f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e150      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
 80034e8:	40023800 	.word	0x40023800
 80034ec:	42470000 	.word	0x42470000
 80034f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b88      	ldr	r3, [pc, #544]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80034f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ea      	bne.n	80034d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8097 	beq.w	800363c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b81      	ldr	r3, [pc, #516]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	4b7d      	ldr	r3, [pc, #500]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	4a7c      	ldr	r2, [pc, #496]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800352c:	6413      	str	r3, [r2, #64]	@ 0x40
 800352e:	4b7a      	ldr	r3, [pc, #488]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353e:	4b77      	ldr	r3, [pc, #476]	@ (800371c <HAL_RCC_OscConfig+0x474>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d118      	bne.n	800357c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354a:	4b74      	ldr	r3, [pc, #464]	@ (800371c <HAL_RCC_OscConfig+0x474>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a73      	ldr	r2, [pc, #460]	@ (800371c <HAL_RCC_OscConfig+0x474>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003556:	f7ff fde5 	bl	8003124 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355e:	f7ff fde1 	bl	8003124 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e10c      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	4b6a      	ldr	r3, [pc, #424]	@ (800371c <HAL_RCC_OscConfig+0x474>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x2ea>
 8003584:	4b64      	ldr	r3, [pc, #400]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003588:	4a63      	ldr	r2, [pc, #396]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003590:	e01c      	b.n	80035cc <HAL_RCC_OscConfig+0x324>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x30c>
 800359a:	4b5f      	ldr	r3, [pc, #380]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	4a5e      	ldr	r2, [pc, #376]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0x324>
 80035b4:	4b58      	ldr	r3, [pc, #352]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b8:	4a57      	ldr	r2, [pc, #348]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c0:	4b55      	ldr	r3, [pc, #340]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	4a54      	ldr	r2, [pc, #336]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80035c6:	f023 0304 	bic.w	r3, r3, #4
 80035ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d015      	beq.n	8003600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7ff fda6 	bl	8003124 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7ff fda2 	bl	8003124 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e0cb      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	4b49      	ldr	r3, [pc, #292]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ee      	beq.n	80035dc <HAL_RCC_OscConfig+0x334>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003600:	f7ff fd90 	bl	8003124 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7ff fd8c 	bl	8003124 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0b5      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361e:	4b3e      	ldr	r3, [pc, #248]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1ee      	bne.n	8003608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4b39      	ldr	r3, [pc, #228]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	4a38      	ldr	r2, [pc, #224]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 8003636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a1 	beq.w	8003788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003646:	4b34      	ldr	r3, [pc, #208]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b08      	cmp	r3, #8
 8003650:	d05c      	beq.n	800370c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d141      	bne.n	80036de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365a:	4b31      	ldr	r3, [pc, #196]	@ (8003720 <HAL_RCC_OscConfig+0x478>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7ff fd60 	bl	8003124 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7ff fd5c 	bl	8003124 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e087      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	4b27      	ldr	r3, [pc, #156]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	019b      	lsls	r3, r3, #6
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	491b      	ldr	r1, [pc, #108]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003720 <HAL_RCC_OscConfig+0x478>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7ff fd35 	bl	8003124 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036be:	f7ff fd31 	bl	8003124 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e05c      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d0:	4b11      	ldr	r3, [pc, #68]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x416>
 80036dc:	e054      	b.n	8003788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036de:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <HAL_RCC_OscConfig+0x478>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7ff fd1e 	bl	8003124 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7ff fd1a 	bl	8003124 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e045      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <HAL_RCC_OscConfig+0x470>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x444>
 800370a:	e03d      	b.n	8003788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d107      	bne.n	8003724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e038      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000
 8003720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003724:	4b1b      	ldr	r3, [pc, #108]	@ (8003794 <HAL_RCC_OscConfig+0x4ec>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d028      	beq.n	8003784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d121      	bne.n	8003784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d11a      	bne.n	8003784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003754:	4013      	ands	r3, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800375a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800375c:	4293      	cmp	r3, r2
 800375e:	d111      	bne.n	8003784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	3b01      	subs	r3, #1
 800376e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800

08003798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0cc      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4b68      	ldr	r3, [pc, #416]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d90c      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b65      	ldr	r3, [pc, #404]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b63      	ldr	r3, [pc, #396]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0b8      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ec:	4b59      	ldr	r3, [pc, #356]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a58      	ldr	r2, [pc, #352]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003804:	4b53      	ldr	r3, [pc, #332]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a52      	ldr	r2, [pc, #328]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800380e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b50      	ldr	r3, [pc, #320]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	494d      	ldr	r1, [pc, #308]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d044      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b47      	ldr	r3, [pc, #284]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d119      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e07f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d003      	beq.n	8003856 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003852:	2b03      	cmp	r3, #3
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b3f      	ldr	r3, [pc, #252]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003866:	4b3b      	ldr	r3, [pc, #236]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e067      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003876:	4b37      	ldr	r3, [pc, #220]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4934      	ldr	r1, [pc, #208]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003888:	f7ff fc4c 	bl	8003124 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7ff fc48 	bl	8003124 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e04f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 020c 	and.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1eb      	bne.n	8003890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b8:	4b25      	ldr	r3, [pc, #148]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d20c      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b22      	ldr	r3, [pc, #136]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b20      	ldr	r3, [pc, #128]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e032      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ec:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4916      	ldr	r1, [pc, #88]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390a:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	490e      	ldr	r1, [pc, #56]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800391e:	f000 f821 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003922:	4602      	mov	r2, r0
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	490a      	ldr	r1, [pc, #40]	@ (8003958 <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	5ccb      	ldrb	r3, [r1, r3]
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	4a09      	ldr	r2, [pc, #36]	@ (800395c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800393a:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fbc0 	bl	80030c4 <HAL_InitTick>

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023c00 	.word	0x40023c00
 8003954:	40023800 	.word	0x40023800
 8003958:	08008670 	.word	0x08008670
 800395c:	20000000 	.word	0x20000000
 8003960:	20000004 	.word	0x20000004

08003964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b094      	sub	sp, #80	@ 0x50
 800396a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800397c:	4b79      	ldr	r3, [pc, #484]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d00d      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003988:	2b08      	cmp	r3, #8
 800398a:	f200 80e1 	bhi.w	8003b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x34>
 8003992:	2b04      	cmp	r3, #4
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x3a>
 8003996:	e0db      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003998:	4b73      	ldr	r3, [pc, #460]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800399a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800399c:	e0db      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800399e:	4b73      	ldr	r3, [pc, #460]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80039a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039a2:	e0d8      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d063      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	2200      	movs	r2, #0
 80039c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ce:	2300      	movs	r3, #0
 80039d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	0159      	lsls	r1, r3, #5
 80039e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e8:	0150      	lsls	r0, r2, #5
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4621      	mov	r1, r4
 80039f0:	1a51      	subs	r1, r2, r1
 80039f2:	6139      	str	r1, [r7, #16]
 80039f4:	4629      	mov	r1, r5
 80039f6:	eb63 0301 	sbc.w	r3, r3, r1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a08:	4659      	mov	r1, fp
 8003a0a:	018b      	lsls	r3, r1, #6
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a12:	4651      	mov	r1, sl
 8003a14:	018a      	lsls	r2, r1, #6
 8003a16:	4651      	mov	r1, sl
 8003a18:	ebb2 0801 	subs.w	r8, r2, r1
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a36:	4690      	mov	r8, r2
 8003a38:	4699      	mov	r9, r3
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	eb18 0303 	adds.w	r3, r8, r3
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	462b      	mov	r3, r5
 8003a44:	eb49 0303 	adc.w	r3, r9, r3
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a56:	4629      	mov	r1, r5
 8003a58:	024b      	lsls	r3, r1, #9
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a60:	4621      	mov	r1, r4
 8003a62:	024a      	lsls	r2, r1, #9
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a74:	f7fd f910 	bl	8000c98 <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a80:	e058      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a82:	4b38      	ldr	r3, [pc, #224]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a92:	623b      	str	r3, [r7, #32]
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	f04f 0000 	mov.w	r0, #0
 8003aa4:	f04f 0100 	mov.w	r1, #0
 8003aa8:	0159      	lsls	r1, r3, #5
 8003aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aae:	0150      	lsls	r0, r2, #5
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aba:	4649      	mov	r1, r9
 8003abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	00eb      	lsls	r3, r5, #3
 8003ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aea:	00e2      	lsls	r2, r4, #3
 8003aec:	4614      	mov	r4, r2
 8003aee:	461d      	mov	r5, r3
 8003af0:	4643      	mov	r3, r8
 8003af2:	18e3      	adds	r3, r4, r3
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	464b      	mov	r3, r9
 8003af8:	eb45 0303 	adc.w	r3, r5, r3
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	028b      	lsls	r3, r1, #10
 8003b0e:	4621      	mov	r1, r4
 8003b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b14:	4621      	mov	r1, r4
 8003b16:	028a      	lsls	r2, r1, #10
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b1e:	2200      	movs	r2, #0
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	61fa      	str	r2, [r7, #28]
 8003b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b28:	f7fd f8b6 	bl	8000c98 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4613      	mov	r3, r2
 8003b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3750      	adds	r7, #80	@ 0x50
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	007a1200 	.word	0x007a1200

08003b70 <__cvt>:
 8003b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	ec57 6b10 	vmov	r6, r7, d0
 8003b78:	2f00      	cmp	r7, #0
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	463b      	mov	r3, r7
 8003b80:	bfbb      	ittet	lt
 8003b82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003b86:	461f      	movlt	r7, r3
 8003b88:	2300      	movge	r3, #0
 8003b8a:	232d      	movlt	r3, #45	@ 0x2d
 8003b8c:	700b      	strb	r3, [r1, #0]
 8003b8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003b94:	4691      	mov	r9, r2
 8003b96:	f023 0820 	bic.w	r8, r3, #32
 8003b9a:	bfbc      	itt	lt
 8003b9c:	4632      	movlt	r2, r6
 8003b9e:	4616      	movlt	r6, r2
 8003ba0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ba4:	d005      	beq.n	8003bb2 <__cvt+0x42>
 8003ba6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003baa:	d100      	bne.n	8003bae <__cvt+0x3e>
 8003bac:	3401      	adds	r4, #1
 8003bae:	2102      	movs	r1, #2
 8003bb0:	e000      	b.n	8003bb4 <__cvt+0x44>
 8003bb2:	2103      	movs	r1, #3
 8003bb4:	ab03      	add	r3, sp, #12
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	ab02      	add	r3, sp, #8
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	ec47 6b10 	vmov	d0, r6, r7
 8003bc0:	4653      	mov	r3, sl
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	f001 f890 	bl	8004ce8 <_dtoa_r>
 8003bc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003bcc:	4605      	mov	r5, r0
 8003bce:	d119      	bne.n	8003c04 <__cvt+0x94>
 8003bd0:	f019 0f01 	tst.w	r9, #1
 8003bd4:	d00e      	beq.n	8003bf4 <__cvt+0x84>
 8003bd6:	eb00 0904 	add.w	r9, r0, r4
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4630      	mov	r0, r6
 8003be0:	4639      	mov	r1, r7
 8003be2:	f7fc ff79 	bl	8000ad8 <__aeabi_dcmpeq>
 8003be6:	b108      	cbz	r0, 8003bec <__cvt+0x7c>
 8003be8:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bec:	2230      	movs	r2, #48	@ 0x30
 8003bee:	9b03      	ldr	r3, [sp, #12]
 8003bf0:	454b      	cmp	r3, r9
 8003bf2:	d31e      	bcc.n	8003c32 <__cvt+0xc2>
 8003bf4:	9b03      	ldr	r3, [sp, #12]
 8003bf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003bf8:	1b5b      	subs	r3, r3, r5
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	b004      	add	sp, #16
 8003c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c08:	eb00 0904 	add.w	r9, r0, r4
 8003c0c:	d1e5      	bne.n	8003bda <__cvt+0x6a>
 8003c0e:	7803      	ldrb	r3, [r0, #0]
 8003c10:	2b30      	cmp	r3, #48	@ 0x30
 8003c12:	d10a      	bne.n	8003c2a <__cvt+0xba>
 8003c14:	2200      	movs	r2, #0
 8003c16:	2300      	movs	r3, #0
 8003c18:	4630      	mov	r0, r6
 8003c1a:	4639      	mov	r1, r7
 8003c1c:	f7fc ff5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c20:	b918      	cbnz	r0, 8003c2a <__cvt+0xba>
 8003c22:	f1c4 0401 	rsb	r4, r4, #1
 8003c26:	f8ca 4000 	str.w	r4, [sl]
 8003c2a:	f8da 3000 	ldr.w	r3, [sl]
 8003c2e:	4499      	add	r9, r3
 8003c30:	e7d3      	b.n	8003bda <__cvt+0x6a>
 8003c32:	1c59      	adds	r1, r3, #1
 8003c34:	9103      	str	r1, [sp, #12]
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e7d9      	b.n	8003bee <__cvt+0x7e>

08003c3a <__exponent>:
 8003c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c3c:	2900      	cmp	r1, #0
 8003c3e:	bfba      	itte	lt
 8003c40:	4249      	neglt	r1, r1
 8003c42:	232d      	movlt	r3, #45	@ 0x2d
 8003c44:	232b      	movge	r3, #43	@ 0x2b
 8003c46:	2909      	cmp	r1, #9
 8003c48:	7002      	strb	r2, [r0, #0]
 8003c4a:	7043      	strb	r3, [r0, #1]
 8003c4c:	dd29      	ble.n	8003ca2 <__exponent+0x68>
 8003c4e:	f10d 0307 	add.w	r3, sp, #7
 8003c52:	461d      	mov	r5, r3
 8003c54:	270a      	movs	r7, #10
 8003c56:	461a      	mov	r2, r3
 8003c58:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c5c:	fb07 1416 	mls	r4, r7, r6, r1
 8003c60:	3430      	adds	r4, #48	@ 0x30
 8003c62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c66:	460c      	mov	r4, r1
 8003c68:	2c63      	cmp	r4, #99	@ 0x63
 8003c6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c6e:	4631      	mov	r1, r6
 8003c70:	dcf1      	bgt.n	8003c56 <__exponent+0x1c>
 8003c72:	3130      	adds	r1, #48	@ 0x30
 8003c74:	1e94      	subs	r4, r2, #2
 8003c76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c7a:	1c41      	adds	r1, r0, #1
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	42ab      	cmp	r3, r5
 8003c80:	d30a      	bcc.n	8003c98 <__exponent+0x5e>
 8003c82:	f10d 0309 	add.w	r3, sp, #9
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	42ac      	cmp	r4, r5
 8003c8a:	bf88      	it	hi
 8003c8c:	2300      	movhi	r3, #0
 8003c8e:	3302      	adds	r3, #2
 8003c90:	4403      	add	r3, r0
 8003c92:	1a18      	subs	r0, r3, r0
 8003c94:	b003      	add	sp, #12
 8003c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003c9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ca0:	e7ed      	b.n	8003c7e <__exponent+0x44>
 8003ca2:	2330      	movs	r3, #48	@ 0x30
 8003ca4:	3130      	adds	r1, #48	@ 0x30
 8003ca6:	7083      	strb	r3, [r0, #2]
 8003ca8:	70c1      	strb	r1, [r0, #3]
 8003caa:	1d03      	adds	r3, r0, #4
 8003cac:	e7f1      	b.n	8003c92 <__exponent+0x58>
	...

08003cb0 <_printf_float>:
 8003cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb4:	b08d      	sub	sp, #52	@ 0x34
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003cbc:	4616      	mov	r6, r2
 8003cbe:	461f      	mov	r7, r3
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	f000 ff09 	bl	8004ad8 <_localeconv_r>
 8003cc6:	6803      	ldr	r3, [r0, #0]
 8003cc8:	9304      	str	r3, [sp, #16]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fad8 	bl	8000280 <strlen>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cd8:	9005      	str	r0, [sp, #20]
 8003cda:	3307      	adds	r3, #7
 8003cdc:	f023 0307 	bic.w	r3, r3, #7
 8003ce0:	f103 0208 	add.w	r2, r3, #8
 8003ce4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003ce8:	f8d4 b000 	ldr.w	fp, [r4]
 8003cec:	f8c8 2000 	str.w	r2, [r8]
 8003cf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cf4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003cf8:	9307      	str	r3, [sp, #28]
 8003cfa:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003d02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d06:	4b9c      	ldr	r3, [pc, #624]	@ (8003f78 <_printf_float+0x2c8>)
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0c:	f7fc ff16 	bl	8000b3c <__aeabi_dcmpun>
 8003d10:	bb70      	cbnz	r0, 8003d70 <_printf_float+0xc0>
 8003d12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d16:	4b98      	ldr	r3, [pc, #608]	@ (8003f78 <_printf_float+0x2c8>)
 8003d18:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1c:	f7fc fef0 	bl	8000b00 <__aeabi_dcmple>
 8003d20:	bb30      	cbnz	r0, 8003d70 <_printf_float+0xc0>
 8003d22:	2200      	movs	r2, #0
 8003d24:	2300      	movs	r3, #0
 8003d26:	4640      	mov	r0, r8
 8003d28:	4649      	mov	r1, r9
 8003d2a:	f7fc fedf 	bl	8000aec <__aeabi_dcmplt>
 8003d2e:	b110      	cbz	r0, 8003d36 <_printf_float+0x86>
 8003d30:	232d      	movs	r3, #45	@ 0x2d
 8003d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d36:	4a91      	ldr	r2, [pc, #580]	@ (8003f7c <_printf_float+0x2cc>)
 8003d38:	4b91      	ldr	r3, [pc, #580]	@ (8003f80 <_printf_float+0x2d0>)
 8003d3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003d3e:	bf94      	ite	ls
 8003d40:	4690      	movls	r8, r2
 8003d42:	4698      	movhi	r8, r3
 8003d44:	2303      	movs	r3, #3
 8003d46:	6123      	str	r3, [r4, #16]
 8003d48:	f02b 0304 	bic.w	r3, fp, #4
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	f04f 0900 	mov.w	r9, #0
 8003d52:	9700      	str	r7, [sp, #0]
 8003d54:	4633      	mov	r3, r6
 8003d56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003d58:	4621      	mov	r1, r4
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f000 f9d2 	bl	8004104 <_printf_common>
 8003d60:	3001      	adds	r0, #1
 8003d62:	f040 808d 	bne.w	8003e80 <_printf_float+0x1d0>
 8003d66:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6a:	b00d      	add	sp, #52	@ 0x34
 8003d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d70:	4642      	mov	r2, r8
 8003d72:	464b      	mov	r3, r9
 8003d74:	4640      	mov	r0, r8
 8003d76:	4649      	mov	r1, r9
 8003d78:	f7fc fee0 	bl	8000b3c <__aeabi_dcmpun>
 8003d7c:	b140      	cbz	r0, 8003d90 <_printf_float+0xe0>
 8003d7e:	464b      	mov	r3, r9
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bfbc      	itt	lt
 8003d84:	232d      	movlt	r3, #45	@ 0x2d
 8003d86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f84 <_printf_float+0x2d4>)
 8003d8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f88 <_printf_float+0x2d8>)
 8003d8e:	e7d4      	b.n	8003d3a <_printf_float+0x8a>
 8003d90:	6863      	ldr	r3, [r4, #4]
 8003d92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003d96:	9206      	str	r2, [sp, #24]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	d13b      	bne.n	8003e14 <_printf_float+0x164>
 8003d9c:	2306      	movs	r3, #6
 8003d9e:	6063      	str	r3, [r4, #4]
 8003da0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003da4:	2300      	movs	r3, #0
 8003da6:	6022      	str	r2, [r4, #0]
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	ab0a      	add	r3, sp, #40	@ 0x28
 8003dac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003db0:	ab09      	add	r3, sp, #36	@ 0x24
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	6861      	ldr	r1, [r4, #4]
 8003db6:	ec49 8b10 	vmov	d0, r8, r9
 8003dba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f7ff fed6 	bl	8003b70 <__cvt>
 8003dc4:	9b06      	ldr	r3, [sp, #24]
 8003dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003dc8:	2b47      	cmp	r3, #71	@ 0x47
 8003dca:	4680      	mov	r8, r0
 8003dcc:	d129      	bne.n	8003e22 <_printf_float+0x172>
 8003dce:	1cc8      	adds	r0, r1, #3
 8003dd0:	db02      	blt.n	8003dd8 <_printf_float+0x128>
 8003dd2:	6863      	ldr	r3, [r4, #4]
 8003dd4:	4299      	cmp	r1, r3
 8003dd6:	dd41      	ble.n	8003e5c <_printf_float+0x1ac>
 8003dd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ddc:	fa5f fa8a 	uxtb.w	sl, sl
 8003de0:	3901      	subs	r1, #1
 8003de2:	4652      	mov	r2, sl
 8003de4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003de8:	9109      	str	r1, [sp, #36]	@ 0x24
 8003dea:	f7ff ff26 	bl	8003c3a <__exponent>
 8003dee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003df0:	1813      	adds	r3, r2, r0
 8003df2:	2a01      	cmp	r2, #1
 8003df4:	4681      	mov	r9, r0
 8003df6:	6123      	str	r3, [r4, #16]
 8003df8:	dc02      	bgt.n	8003e00 <_printf_float+0x150>
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	07d2      	lsls	r2, r2, #31
 8003dfe:	d501      	bpl.n	8003e04 <_printf_float+0x154>
 8003e00:	3301      	adds	r3, #1
 8003e02:	6123      	str	r3, [r4, #16]
 8003e04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0a2      	beq.n	8003d52 <_printf_float+0xa2>
 8003e0c:	232d      	movs	r3, #45	@ 0x2d
 8003e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e12:	e79e      	b.n	8003d52 <_printf_float+0xa2>
 8003e14:	9a06      	ldr	r2, [sp, #24]
 8003e16:	2a47      	cmp	r2, #71	@ 0x47
 8003e18:	d1c2      	bne.n	8003da0 <_printf_float+0xf0>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1c0      	bne.n	8003da0 <_printf_float+0xf0>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e7bd      	b.n	8003d9e <_printf_float+0xee>
 8003e22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e26:	d9db      	bls.n	8003de0 <_printf_float+0x130>
 8003e28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003e2c:	d118      	bne.n	8003e60 <_printf_float+0x1b0>
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	6863      	ldr	r3, [r4, #4]
 8003e32:	dd0b      	ble.n	8003e4c <_printf_float+0x19c>
 8003e34:	6121      	str	r1, [r4, #16]
 8003e36:	b913      	cbnz	r3, 8003e3e <_printf_float+0x18e>
 8003e38:	6822      	ldr	r2, [r4, #0]
 8003e3a:	07d0      	lsls	r0, r2, #31
 8003e3c:	d502      	bpl.n	8003e44 <_printf_float+0x194>
 8003e3e:	3301      	adds	r3, #1
 8003e40:	440b      	add	r3, r1
 8003e42:	6123      	str	r3, [r4, #16]
 8003e44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e46:	f04f 0900 	mov.w	r9, #0
 8003e4a:	e7db      	b.n	8003e04 <_printf_float+0x154>
 8003e4c:	b913      	cbnz	r3, 8003e54 <_printf_float+0x1a4>
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	07d2      	lsls	r2, r2, #31
 8003e52:	d501      	bpl.n	8003e58 <_printf_float+0x1a8>
 8003e54:	3302      	adds	r3, #2
 8003e56:	e7f4      	b.n	8003e42 <_printf_float+0x192>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e7f2      	b.n	8003e42 <_printf_float+0x192>
 8003e5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003e60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e62:	4299      	cmp	r1, r3
 8003e64:	db05      	blt.n	8003e72 <_printf_float+0x1c2>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	6121      	str	r1, [r4, #16]
 8003e6a:	07d8      	lsls	r0, r3, #31
 8003e6c:	d5ea      	bpl.n	8003e44 <_printf_float+0x194>
 8003e6e:	1c4b      	adds	r3, r1, #1
 8003e70:	e7e7      	b.n	8003e42 <_printf_float+0x192>
 8003e72:	2900      	cmp	r1, #0
 8003e74:	bfd4      	ite	le
 8003e76:	f1c1 0202 	rsble	r2, r1, #2
 8003e7a:	2201      	movgt	r2, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	e7e0      	b.n	8003e42 <_printf_float+0x192>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	055a      	lsls	r2, r3, #21
 8003e84:	d407      	bmi.n	8003e96 <_printf_float+0x1e6>
 8003e86:	6923      	ldr	r3, [r4, #16]
 8003e88:	4642      	mov	r2, r8
 8003e8a:	4631      	mov	r1, r6
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	47b8      	blx	r7
 8003e90:	3001      	adds	r0, #1
 8003e92:	d12b      	bne.n	8003eec <_printf_float+0x23c>
 8003e94:	e767      	b.n	8003d66 <_printf_float+0xb6>
 8003e96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e9a:	f240 80dd 	bls.w	8004058 <_printf_float+0x3a8>
 8003e9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f7fc fe17 	bl	8000ad8 <__aeabi_dcmpeq>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d033      	beq.n	8003f16 <_printf_float+0x266>
 8003eae:	4a37      	ldr	r2, [pc, #220]	@ (8003f8c <_printf_float+0x2dc>)
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	47b8      	blx	r7
 8003eb8:	3001      	adds	r0, #1
 8003eba:	f43f af54 	beq.w	8003d66 <_printf_float+0xb6>
 8003ebe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003ec2:	4543      	cmp	r3, r8
 8003ec4:	db02      	blt.n	8003ecc <_printf_float+0x21c>
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	07d8      	lsls	r0, r3, #31
 8003eca:	d50f      	bpl.n	8003eec <_printf_float+0x23c>
 8003ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	47b8      	blx	r7
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	f43f af45 	beq.w	8003d66 <_printf_float+0xb6>
 8003edc:	f04f 0900 	mov.w	r9, #0
 8003ee0:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ee4:	f104 0a1a 	add.w	sl, r4, #26
 8003ee8:	45c8      	cmp	r8, r9
 8003eea:	dc09      	bgt.n	8003f00 <_printf_float+0x250>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	079b      	lsls	r3, r3, #30
 8003ef0:	f100 8103 	bmi.w	80040fa <_printf_float+0x44a>
 8003ef4:	68e0      	ldr	r0, [r4, #12]
 8003ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ef8:	4298      	cmp	r0, r3
 8003efa:	bfb8      	it	lt
 8003efc:	4618      	movlt	r0, r3
 8003efe:	e734      	b.n	8003d6a <_printf_float+0xba>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4652      	mov	r2, sl
 8003f04:	4631      	mov	r1, r6
 8003f06:	4628      	mov	r0, r5
 8003f08:	47b8      	blx	r7
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	f43f af2b 	beq.w	8003d66 <_printf_float+0xb6>
 8003f10:	f109 0901 	add.w	r9, r9, #1
 8003f14:	e7e8      	b.n	8003ee8 <_printf_float+0x238>
 8003f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dc39      	bgt.n	8003f90 <_printf_float+0x2e0>
 8003f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f8c <_printf_float+0x2dc>)
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4631      	mov	r1, r6
 8003f22:	4628      	mov	r0, r5
 8003f24:	47b8      	blx	r7
 8003f26:	3001      	adds	r0, #1
 8003f28:	f43f af1d 	beq.w	8003d66 <_printf_float+0xb6>
 8003f2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003f30:	ea59 0303 	orrs.w	r3, r9, r3
 8003f34:	d102      	bne.n	8003f3c <_printf_float+0x28c>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	07d9      	lsls	r1, r3, #31
 8003f3a:	d5d7      	bpl.n	8003eec <_printf_float+0x23c>
 8003f3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f40:	4631      	mov	r1, r6
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b8      	blx	r7
 8003f46:	3001      	adds	r0, #1
 8003f48:	f43f af0d 	beq.w	8003d66 <_printf_float+0xb6>
 8003f4c:	f04f 0a00 	mov.w	sl, #0
 8003f50:	f104 0b1a 	add.w	fp, r4, #26
 8003f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f56:	425b      	negs	r3, r3
 8003f58:	4553      	cmp	r3, sl
 8003f5a:	dc01      	bgt.n	8003f60 <_printf_float+0x2b0>
 8003f5c:	464b      	mov	r3, r9
 8003f5e:	e793      	b.n	8003e88 <_printf_float+0x1d8>
 8003f60:	2301      	movs	r3, #1
 8003f62:	465a      	mov	r2, fp
 8003f64:	4631      	mov	r1, r6
 8003f66:	4628      	mov	r0, r5
 8003f68:	47b8      	blx	r7
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	f43f aefb 	beq.w	8003d66 <_printf_float+0xb6>
 8003f70:	f10a 0a01 	add.w	sl, sl, #1
 8003f74:	e7ee      	b.n	8003f54 <_printf_float+0x2a4>
 8003f76:	bf00      	nop
 8003f78:	7fefffff 	.word	0x7fefffff
 8003f7c:	08008680 	.word	0x08008680
 8003f80:	08008684 	.word	0x08008684
 8003f84:	08008688 	.word	0x08008688
 8003f88:	0800868c 	.word	0x0800868c
 8003f8c:	08008690 	.word	0x08008690
 8003f90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003f96:	4553      	cmp	r3, sl
 8003f98:	bfa8      	it	ge
 8003f9a:	4653      	movge	r3, sl
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	4699      	mov	r9, r3
 8003fa0:	dc36      	bgt.n	8004010 <_printf_float+0x360>
 8003fa2:	f04f 0b00 	mov.w	fp, #0
 8003fa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003faa:	f104 021a 	add.w	r2, r4, #26
 8003fae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fb0:	9306      	str	r3, [sp, #24]
 8003fb2:	eba3 0309 	sub.w	r3, r3, r9
 8003fb6:	455b      	cmp	r3, fp
 8003fb8:	dc31      	bgt.n	800401e <_printf_float+0x36e>
 8003fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fbc:	459a      	cmp	sl, r3
 8003fbe:	dc3a      	bgt.n	8004036 <_printf_float+0x386>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	07da      	lsls	r2, r3, #31
 8003fc4:	d437      	bmi.n	8004036 <_printf_float+0x386>
 8003fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fc8:	ebaa 0903 	sub.w	r9, sl, r3
 8003fcc:	9b06      	ldr	r3, [sp, #24]
 8003fce:	ebaa 0303 	sub.w	r3, sl, r3
 8003fd2:	4599      	cmp	r9, r3
 8003fd4:	bfa8      	it	ge
 8003fd6:	4699      	movge	r9, r3
 8003fd8:	f1b9 0f00 	cmp.w	r9, #0
 8003fdc:	dc33      	bgt.n	8004046 <_printf_float+0x396>
 8003fde:	f04f 0800 	mov.w	r8, #0
 8003fe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fe6:	f104 0b1a 	add.w	fp, r4, #26
 8003fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fec:	ebaa 0303 	sub.w	r3, sl, r3
 8003ff0:	eba3 0309 	sub.w	r3, r3, r9
 8003ff4:	4543      	cmp	r3, r8
 8003ff6:	f77f af79 	ble.w	8003eec <_printf_float+0x23c>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	465a      	mov	r2, fp
 8003ffe:	4631      	mov	r1, r6
 8004000:	4628      	mov	r0, r5
 8004002:	47b8      	blx	r7
 8004004:	3001      	adds	r0, #1
 8004006:	f43f aeae 	beq.w	8003d66 <_printf_float+0xb6>
 800400a:	f108 0801 	add.w	r8, r8, #1
 800400e:	e7ec      	b.n	8003fea <_printf_float+0x33a>
 8004010:	4642      	mov	r2, r8
 8004012:	4631      	mov	r1, r6
 8004014:	4628      	mov	r0, r5
 8004016:	47b8      	blx	r7
 8004018:	3001      	adds	r0, #1
 800401a:	d1c2      	bne.n	8003fa2 <_printf_float+0x2f2>
 800401c:	e6a3      	b.n	8003d66 <_printf_float+0xb6>
 800401e:	2301      	movs	r3, #1
 8004020:	4631      	mov	r1, r6
 8004022:	4628      	mov	r0, r5
 8004024:	9206      	str	r2, [sp, #24]
 8004026:	47b8      	blx	r7
 8004028:	3001      	adds	r0, #1
 800402a:	f43f ae9c 	beq.w	8003d66 <_printf_float+0xb6>
 800402e:	9a06      	ldr	r2, [sp, #24]
 8004030:	f10b 0b01 	add.w	fp, fp, #1
 8004034:	e7bb      	b.n	8003fae <_printf_float+0x2fe>
 8004036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800403a:	4631      	mov	r1, r6
 800403c:	4628      	mov	r0, r5
 800403e:	47b8      	blx	r7
 8004040:	3001      	adds	r0, #1
 8004042:	d1c0      	bne.n	8003fc6 <_printf_float+0x316>
 8004044:	e68f      	b.n	8003d66 <_printf_float+0xb6>
 8004046:	9a06      	ldr	r2, [sp, #24]
 8004048:	464b      	mov	r3, r9
 800404a:	4442      	add	r2, r8
 800404c:	4631      	mov	r1, r6
 800404e:	4628      	mov	r0, r5
 8004050:	47b8      	blx	r7
 8004052:	3001      	adds	r0, #1
 8004054:	d1c3      	bne.n	8003fde <_printf_float+0x32e>
 8004056:	e686      	b.n	8003d66 <_printf_float+0xb6>
 8004058:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800405c:	f1ba 0f01 	cmp.w	sl, #1
 8004060:	dc01      	bgt.n	8004066 <_printf_float+0x3b6>
 8004062:	07db      	lsls	r3, r3, #31
 8004064:	d536      	bpl.n	80040d4 <_printf_float+0x424>
 8004066:	2301      	movs	r3, #1
 8004068:	4642      	mov	r2, r8
 800406a:	4631      	mov	r1, r6
 800406c:	4628      	mov	r0, r5
 800406e:	47b8      	blx	r7
 8004070:	3001      	adds	r0, #1
 8004072:	f43f ae78 	beq.w	8003d66 <_printf_float+0xb6>
 8004076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800407a:	4631      	mov	r1, r6
 800407c:	4628      	mov	r0, r5
 800407e:	47b8      	blx	r7
 8004080:	3001      	adds	r0, #1
 8004082:	f43f ae70 	beq.w	8003d66 <_printf_float+0xb6>
 8004086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800408a:	2200      	movs	r2, #0
 800408c:	2300      	movs	r3, #0
 800408e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004092:	f7fc fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 8004096:	b9c0      	cbnz	r0, 80040ca <_printf_float+0x41a>
 8004098:	4653      	mov	r3, sl
 800409a:	f108 0201 	add.w	r2, r8, #1
 800409e:	4631      	mov	r1, r6
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	d10c      	bne.n	80040c2 <_printf_float+0x412>
 80040a8:	e65d      	b.n	8003d66 <_printf_float+0xb6>
 80040aa:	2301      	movs	r3, #1
 80040ac:	465a      	mov	r2, fp
 80040ae:	4631      	mov	r1, r6
 80040b0:	4628      	mov	r0, r5
 80040b2:	47b8      	blx	r7
 80040b4:	3001      	adds	r0, #1
 80040b6:	f43f ae56 	beq.w	8003d66 <_printf_float+0xb6>
 80040ba:	f108 0801 	add.w	r8, r8, #1
 80040be:	45d0      	cmp	r8, sl
 80040c0:	dbf3      	blt.n	80040aa <_printf_float+0x3fa>
 80040c2:	464b      	mov	r3, r9
 80040c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80040c8:	e6df      	b.n	8003e8a <_printf_float+0x1da>
 80040ca:	f04f 0800 	mov.w	r8, #0
 80040ce:	f104 0b1a 	add.w	fp, r4, #26
 80040d2:	e7f4      	b.n	80040be <_printf_float+0x40e>
 80040d4:	2301      	movs	r3, #1
 80040d6:	4642      	mov	r2, r8
 80040d8:	e7e1      	b.n	800409e <_printf_float+0x3ee>
 80040da:	2301      	movs	r3, #1
 80040dc:	464a      	mov	r2, r9
 80040de:	4631      	mov	r1, r6
 80040e0:	4628      	mov	r0, r5
 80040e2:	47b8      	blx	r7
 80040e4:	3001      	adds	r0, #1
 80040e6:	f43f ae3e 	beq.w	8003d66 <_printf_float+0xb6>
 80040ea:	f108 0801 	add.w	r8, r8, #1
 80040ee:	68e3      	ldr	r3, [r4, #12]
 80040f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040f2:	1a5b      	subs	r3, r3, r1
 80040f4:	4543      	cmp	r3, r8
 80040f6:	dcf0      	bgt.n	80040da <_printf_float+0x42a>
 80040f8:	e6fc      	b.n	8003ef4 <_printf_float+0x244>
 80040fa:	f04f 0800 	mov.w	r8, #0
 80040fe:	f104 0919 	add.w	r9, r4, #25
 8004102:	e7f4      	b.n	80040ee <_printf_float+0x43e>

08004104 <_printf_common>:
 8004104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004108:	4616      	mov	r6, r2
 800410a:	4698      	mov	r8, r3
 800410c:	688a      	ldr	r2, [r1, #8]
 800410e:	690b      	ldr	r3, [r1, #16]
 8004110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004114:	4293      	cmp	r3, r2
 8004116:	bfb8      	it	lt
 8004118:	4613      	movlt	r3, r2
 800411a:	6033      	str	r3, [r6, #0]
 800411c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004120:	4607      	mov	r7, r0
 8004122:	460c      	mov	r4, r1
 8004124:	b10a      	cbz	r2, 800412a <_printf_common+0x26>
 8004126:	3301      	adds	r3, #1
 8004128:	6033      	str	r3, [r6, #0]
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	0699      	lsls	r1, r3, #26
 800412e:	bf42      	ittt	mi
 8004130:	6833      	ldrmi	r3, [r6, #0]
 8004132:	3302      	addmi	r3, #2
 8004134:	6033      	strmi	r3, [r6, #0]
 8004136:	6825      	ldr	r5, [r4, #0]
 8004138:	f015 0506 	ands.w	r5, r5, #6
 800413c:	d106      	bne.n	800414c <_printf_common+0x48>
 800413e:	f104 0a19 	add.w	sl, r4, #25
 8004142:	68e3      	ldr	r3, [r4, #12]
 8004144:	6832      	ldr	r2, [r6, #0]
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	42ab      	cmp	r3, r5
 800414a:	dc26      	bgt.n	800419a <_printf_common+0x96>
 800414c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	3b00      	subs	r3, #0
 8004154:	bf18      	it	ne
 8004156:	2301      	movne	r3, #1
 8004158:	0692      	lsls	r2, r2, #26
 800415a:	d42b      	bmi.n	80041b4 <_printf_common+0xb0>
 800415c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004160:	4641      	mov	r1, r8
 8004162:	4638      	mov	r0, r7
 8004164:	47c8      	blx	r9
 8004166:	3001      	adds	r0, #1
 8004168:	d01e      	beq.n	80041a8 <_printf_common+0xa4>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	6922      	ldr	r2, [r4, #16]
 800416e:	f003 0306 	and.w	r3, r3, #6
 8004172:	2b04      	cmp	r3, #4
 8004174:	bf02      	ittt	eq
 8004176:	68e5      	ldreq	r5, [r4, #12]
 8004178:	6833      	ldreq	r3, [r6, #0]
 800417a:	1aed      	subeq	r5, r5, r3
 800417c:	68a3      	ldr	r3, [r4, #8]
 800417e:	bf0c      	ite	eq
 8004180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004184:	2500      	movne	r5, #0
 8004186:	4293      	cmp	r3, r2
 8004188:	bfc4      	itt	gt
 800418a:	1a9b      	subgt	r3, r3, r2
 800418c:	18ed      	addgt	r5, r5, r3
 800418e:	2600      	movs	r6, #0
 8004190:	341a      	adds	r4, #26
 8004192:	42b5      	cmp	r5, r6
 8004194:	d11a      	bne.n	80041cc <_printf_common+0xc8>
 8004196:	2000      	movs	r0, #0
 8004198:	e008      	b.n	80041ac <_printf_common+0xa8>
 800419a:	2301      	movs	r3, #1
 800419c:	4652      	mov	r2, sl
 800419e:	4641      	mov	r1, r8
 80041a0:	4638      	mov	r0, r7
 80041a2:	47c8      	blx	r9
 80041a4:	3001      	adds	r0, #1
 80041a6:	d103      	bne.n	80041b0 <_printf_common+0xac>
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b0:	3501      	adds	r5, #1
 80041b2:	e7c6      	b.n	8004142 <_printf_common+0x3e>
 80041b4:	18e1      	adds	r1, r4, r3
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	2030      	movs	r0, #48	@ 0x30
 80041ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041be:	4422      	add	r2, r4
 80041c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041c8:	3302      	adds	r3, #2
 80041ca:	e7c7      	b.n	800415c <_printf_common+0x58>
 80041cc:	2301      	movs	r3, #1
 80041ce:	4622      	mov	r2, r4
 80041d0:	4641      	mov	r1, r8
 80041d2:	4638      	mov	r0, r7
 80041d4:	47c8      	blx	r9
 80041d6:	3001      	adds	r0, #1
 80041d8:	d0e6      	beq.n	80041a8 <_printf_common+0xa4>
 80041da:	3601      	adds	r6, #1
 80041dc:	e7d9      	b.n	8004192 <_printf_common+0x8e>
	...

080041e0 <_printf_i>:
 80041e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	7e0f      	ldrb	r7, [r1, #24]
 80041e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041e8:	2f78      	cmp	r7, #120	@ 0x78
 80041ea:	4691      	mov	r9, r2
 80041ec:	4680      	mov	r8, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	469a      	mov	sl, r3
 80041f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041f6:	d807      	bhi.n	8004208 <_printf_i+0x28>
 80041f8:	2f62      	cmp	r7, #98	@ 0x62
 80041fa:	d80a      	bhi.n	8004212 <_printf_i+0x32>
 80041fc:	2f00      	cmp	r7, #0
 80041fe:	f000 80d2 	beq.w	80043a6 <_printf_i+0x1c6>
 8004202:	2f58      	cmp	r7, #88	@ 0x58
 8004204:	f000 80b9 	beq.w	800437a <_printf_i+0x19a>
 8004208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800420c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004210:	e03a      	b.n	8004288 <_printf_i+0xa8>
 8004212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004216:	2b15      	cmp	r3, #21
 8004218:	d8f6      	bhi.n	8004208 <_printf_i+0x28>
 800421a:	a101      	add	r1, pc, #4	@ (adr r1, 8004220 <_printf_i+0x40>)
 800421c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004220:	08004279 	.word	0x08004279
 8004224:	0800428d 	.word	0x0800428d
 8004228:	08004209 	.word	0x08004209
 800422c:	08004209 	.word	0x08004209
 8004230:	08004209 	.word	0x08004209
 8004234:	08004209 	.word	0x08004209
 8004238:	0800428d 	.word	0x0800428d
 800423c:	08004209 	.word	0x08004209
 8004240:	08004209 	.word	0x08004209
 8004244:	08004209 	.word	0x08004209
 8004248:	08004209 	.word	0x08004209
 800424c:	0800438d 	.word	0x0800438d
 8004250:	080042b7 	.word	0x080042b7
 8004254:	08004347 	.word	0x08004347
 8004258:	08004209 	.word	0x08004209
 800425c:	08004209 	.word	0x08004209
 8004260:	080043af 	.word	0x080043af
 8004264:	08004209 	.word	0x08004209
 8004268:	080042b7 	.word	0x080042b7
 800426c:	08004209 	.word	0x08004209
 8004270:	08004209 	.word	0x08004209
 8004274:	0800434f 	.word	0x0800434f
 8004278:	6833      	ldr	r3, [r6, #0]
 800427a:	1d1a      	adds	r2, r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6032      	str	r2, [r6, #0]
 8004280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004288:	2301      	movs	r3, #1
 800428a:	e09d      	b.n	80043c8 <_printf_i+0x1e8>
 800428c:	6833      	ldr	r3, [r6, #0]
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	1d19      	adds	r1, r3, #4
 8004292:	6031      	str	r1, [r6, #0]
 8004294:	0606      	lsls	r6, r0, #24
 8004296:	d501      	bpl.n	800429c <_printf_i+0xbc>
 8004298:	681d      	ldr	r5, [r3, #0]
 800429a:	e003      	b.n	80042a4 <_printf_i+0xc4>
 800429c:	0645      	lsls	r5, r0, #25
 800429e:	d5fb      	bpl.n	8004298 <_printf_i+0xb8>
 80042a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042a4:	2d00      	cmp	r5, #0
 80042a6:	da03      	bge.n	80042b0 <_printf_i+0xd0>
 80042a8:	232d      	movs	r3, #45	@ 0x2d
 80042aa:	426d      	negs	r5, r5
 80042ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042b0:	4859      	ldr	r0, [pc, #356]	@ (8004418 <_printf_i+0x238>)
 80042b2:	230a      	movs	r3, #10
 80042b4:	e011      	b.n	80042da <_printf_i+0xfa>
 80042b6:	6821      	ldr	r1, [r4, #0]
 80042b8:	6833      	ldr	r3, [r6, #0]
 80042ba:	0608      	lsls	r0, r1, #24
 80042bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80042c0:	d402      	bmi.n	80042c8 <_printf_i+0xe8>
 80042c2:	0649      	lsls	r1, r1, #25
 80042c4:	bf48      	it	mi
 80042c6:	b2ad      	uxthmi	r5, r5
 80042c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80042ca:	4853      	ldr	r0, [pc, #332]	@ (8004418 <_printf_i+0x238>)
 80042cc:	6033      	str	r3, [r6, #0]
 80042ce:	bf14      	ite	ne
 80042d0:	230a      	movne	r3, #10
 80042d2:	2308      	moveq	r3, #8
 80042d4:	2100      	movs	r1, #0
 80042d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042da:	6866      	ldr	r6, [r4, #4]
 80042dc:	60a6      	str	r6, [r4, #8]
 80042de:	2e00      	cmp	r6, #0
 80042e0:	bfa2      	ittt	ge
 80042e2:	6821      	ldrge	r1, [r4, #0]
 80042e4:	f021 0104 	bicge.w	r1, r1, #4
 80042e8:	6021      	strge	r1, [r4, #0]
 80042ea:	b90d      	cbnz	r5, 80042f0 <_printf_i+0x110>
 80042ec:	2e00      	cmp	r6, #0
 80042ee:	d04b      	beq.n	8004388 <_printf_i+0x1a8>
 80042f0:	4616      	mov	r6, r2
 80042f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80042f6:	fb03 5711 	mls	r7, r3, r1, r5
 80042fa:	5dc7      	ldrb	r7, [r0, r7]
 80042fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004300:	462f      	mov	r7, r5
 8004302:	42bb      	cmp	r3, r7
 8004304:	460d      	mov	r5, r1
 8004306:	d9f4      	bls.n	80042f2 <_printf_i+0x112>
 8004308:	2b08      	cmp	r3, #8
 800430a:	d10b      	bne.n	8004324 <_printf_i+0x144>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	07df      	lsls	r7, r3, #31
 8004310:	d508      	bpl.n	8004324 <_printf_i+0x144>
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	6861      	ldr	r1, [r4, #4]
 8004316:	4299      	cmp	r1, r3
 8004318:	bfde      	ittt	le
 800431a:	2330      	movle	r3, #48	@ 0x30
 800431c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004320:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004324:	1b92      	subs	r2, r2, r6
 8004326:	6122      	str	r2, [r4, #16]
 8004328:	f8cd a000 	str.w	sl, [sp]
 800432c:	464b      	mov	r3, r9
 800432e:	aa03      	add	r2, sp, #12
 8004330:	4621      	mov	r1, r4
 8004332:	4640      	mov	r0, r8
 8004334:	f7ff fee6 	bl	8004104 <_printf_common>
 8004338:	3001      	adds	r0, #1
 800433a:	d14a      	bne.n	80043d2 <_printf_i+0x1f2>
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	b004      	add	sp, #16
 8004342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	f043 0320 	orr.w	r3, r3, #32
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	4833      	ldr	r0, [pc, #204]	@ (800441c <_printf_i+0x23c>)
 8004350:	2778      	movs	r7, #120	@ 0x78
 8004352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	6831      	ldr	r1, [r6, #0]
 800435a:	061f      	lsls	r7, r3, #24
 800435c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004360:	d402      	bmi.n	8004368 <_printf_i+0x188>
 8004362:	065f      	lsls	r7, r3, #25
 8004364:	bf48      	it	mi
 8004366:	b2ad      	uxthmi	r5, r5
 8004368:	6031      	str	r1, [r6, #0]
 800436a:	07d9      	lsls	r1, r3, #31
 800436c:	bf44      	itt	mi
 800436e:	f043 0320 	orrmi.w	r3, r3, #32
 8004372:	6023      	strmi	r3, [r4, #0]
 8004374:	b11d      	cbz	r5, 800437e <_printf_i+0x19e>
 8004376:	2310      	movs	r3, #16
 8004378:	e7ac      	b.n	80042d4 <_printf_i+0xf4>
 800437a:	4827      	ldr	r0, [pc, #156]	@ (8004418 <_printf_i+0x238>)
 800437c:	e7e9      	b.n	8004352 <_printf_i+0x172>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f023 0320 	bic.w	r3, r3, #32
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	e7f6      	b.n	8004376 <_printf_i+0x196>
 8004388:	4616      	mov	r6, r2
 800438a:	e7bd      	b.n	8004308 <_printf_i+0x128>
 800438c:	6833      	ldr	r3, [r6, #0]
 800438e:	6825      	ldr	r5, [r4, #0]
 8004390:	6961      	ldr	r1, [r4, #20]
 8004392:	1d18      	adds	r0, r3, #4
 8004394:	6030      	str	r0, [r6, #0]
 8004396:	062e      	lsls	r6, r5, #24
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	d501      	bpl.n	80043a0 <_printf_i+0x1c0>
 800439c:	6019      	str	r1, [r3, #0]
 800439e:	e002      	b.n	80043a6 <_printf_i+0x1c6>
 80043a0:	0668      	lsls	r0, r5, #25
 80043a2:	d5fb      	bpl.n	800439c <_printf_i+0x1bc>
 80043a4:	8019      	strh	r1, [r3, #0]
 80043a6:	2300      	movs	r3, #0
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	4616      	mov	r6, r2
 80043ac:	e7bc      	b.n	8004328 <_printf_i+0x148>
 80043ae:	6833      	ldr	r3, [r6, #0]
 80043b0:	1d1a      	adds	r2, r3, #4
 80043b2:	6032      	str	r2, [r6, #0]
 80043b4:	681e      	ldr	r6, [r3, #0]
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	2100      	movs	r1, #0
 80043ba:	4630      	mov	r0, r6
 80043bc:	f7fb ff10 	bl	80001e0 <memchr>
 80043c0:	b108      	cbz	r0, 80043c6 <_printf_i+0x1e6>
 80043c2:	1b80      	subs	r0, r0, r6
 80043c4:	6060      	str	r0, [r4, #4]
 80043c6:	6863      	ldr	r3, [r4, #4]
 80043c8:	6123      	str	r3, [r4, #16]
 80043ca:	2300      	movs	r3, #0
 80043cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043d0:	e7aa      	b.n	8004328 <_printf_i+0x148>
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	4632      	mov	r2, r6
 80043d6:	4649      	mov	r1, r9
 80043d8:	4640      	mov	r0, r8
 80043da:	47d0      	blx	sl
 80043dc:	3001      	adds	r0, #1
 80043de:	d0ad      	beq.n	800433c <_printf_i+0x15c>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	079b      	lsls	r3, r3, #30
 80043e4:	d413      	bmi.n	800440e <_printf_i+0x22e>
 80043e6:	68e0      	ldr	r0, [r4, #12]
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	4298      	cmp	r0, r3
 80043ec:	bfb8      	it	lt
 80043ee:	4618      	movlt	r0, r3
 80043f0:	e7a6      	b.n	8004340 <_printf_i+0x160>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4632      	mov	r2, r6
 80043f6:	4649      	mov	r1, r9
 80043f8:	4640      	mov	r0, r8
 80043fa:	47d0      	blx	sl
 80043fc:	3001      	adds	r0, #1
 80043fe:	d09d      	beq.n	800433c <_printf_i+0x15c>
 8004400:	3501      	adds	r5, #1
 8004402:	68e3      	ldr	r3, [r4, #12]
 8004404:	9903      	ldr	r1, [sp, #12]
 8004406:	1a5b      	subs	r3, r3, r1
 8004408:	42ab      	cmp	r3, r5
 800440a:	dcf2      	bgt.n	80043f2 <_printf_i+0x212>
 800440c:	e7eb      	b.n	80043e6 <_printf_i+0x206>
 800440e:	2500      	movs	r5, #0
 8004410:	f104 0619 	add.w	r6, r4, #25
 8004414:	e7f5      	b.n	8004402 <_printf_i+0x222>
 8004416:	bf00      	nop
 8004418:	08008692 	.word	0x08008692
 800441c:	080086a3 	.word	0x080086a3

08004420 <_scanf_float>:
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	b087      	sub	sp, #28
 8004426:	4617      	mov	r7, r2
 8004428:	9303      	str	r3, [sp, #12]
 800442a:	688b      	ldr	r3, [r1, #8]
 800442c:	1e5a      	subs	r2, r3, #1
 800442e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004432:	bf81      	itttt	hi
 8004434:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004438:	eb03 0b05 	addhi.w	fp, r3, r5
 800443c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004440:	608b      	strhi	r3, [r1, #8]
 8004442:	680b      	ldr	r3, [r1, #0]
 8004444:	460a      	mov	r2, r1
 8004446:	f04f 0500 	mov.w	r5, #0
 800444a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800444e:	f842 3b1c 	str.w	r3, [r2], #28
 8004452:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004456:	4680      	mov	r8, r0
 8004458:	460c      	mov	r4, r1
 800445a:	bf98      	it	ls
 800445c:	f04f 0b00 	movls.w	fp, #0
 8004460:	9201      	str	r2, [sp, #4]
 8004462:	4616      	mov	r6, r2
 8004464:	46aa      	mov	sl, r5
 8004466:	46a9      	mov	r9, r5
 8004468:	9502      	str	r5, [sp, #8]
 800446a:	68a2      	ldr	r2, [r4, #8]
 800446c:	b152      	cbz	r2, 8004484 <_scanf_float+0x64>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b4e      	cmp	r3, #78	@ 0x4e
 8004474:	d864      	bhi.n	8004540 <_scanf_float+0x120>
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d83c      	bhi.n	80044f4 <_scanf_float+0xd4>
 800447a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800447e:	b2c8      	uxtb	r0, r1
 8004480:	280e      	cmp	r0, #14
 8004482:	d93a      	bls.n	80044fa <_scanf_float+0xda>
 8004484:	f1b9 0f00 	cmp.w	r9, #0
 8004488:	d003      	beq.n	8004492 <_scanf_float+0x72>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004496:	f1ba 0f01 	cmp.w	sl, #1
 800449a:	f200 8117 	bhi.w	80046cc <_scanf_float+0x2ac>
 800449e:	9b01      	ldr	r3, [sp, #4]
 80044a0:	429e      	cmp	r6, r3
 80044a2:	f200 8108 	bhi.w	80046b6 <_scanf_float+0x296>
 80044a6:	2001      	movs	r0, #1
 80044a8:	b007      	add	sp, #28
 80044aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80044b2:	2a0d      	cmp	r2, #13
 80044b4:	d8e6      	bhi.n	8004484 <_scanf_float+0x64>
 80044b6:	a101      	add	r1, pc, #4	@ (adr r1, 80044bc <_scanf_float+0x9c>)
 80044b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80044bc:	08004603 	.word	0x08004603
 80044c0:	08004485 	.word	0x08004485
 80044c4:	08004485 	.word	0x08004485
 80044c8:	08004485 	.word	0x08004485
 80044cc:	08004663 	.word	0x08004663
 80044d0:	0800463b 	.word	0x0800463b
 80044d4:	08004485 	.word	0x08004485
 80044d8:	08004485 	.word	0x08004485
 80044dc:	08004611 	.word	0x08004611
 80044e0:	08004485 	.word	0x08004485
 80044e4:	08004485 	.word	0x08004485
 80044e8:	08004485 	.word	0x08004485
 80044ec:	08004485 	.word	0x08004485
 80044f0:	080045c9 	.word	0x080045c9
 80044f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80044f8:	e7db      	b.n	80044b2 <_scanf_float+0x92>
 80044fa:	290e      	cmp	r1, #14
 80044fc:	d8c2      	bhi.n	8004484 <_scanf_float+0x64>
 80044fe:	a001      	add	r0, pc, #4	@ (adr r0, 8004504 <_scanf_float+0xe4>)
 8004500:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004504:	080045b9 	.word	0x080045b9
 8004508:	08004485 	.word	0x08004485
 800450c:	080045b9 	.word	0x080045b9
 8004510:	0800464f 	.word	0x0800464f
 8004514:	08004485 	.word	0x08004485
 8004518:	08004561 	.word	0x08004561
 800451c:	0800459f 	.word	0x0800459f
 8004520:	0800459f 	.word	0x0800459f
 8004524:	0800459f 	.word	0x0800459f
 8004528:	0800459f 	.word	0x0800459f
 800452c:	0800459f 	.word	0x0800459f
 8004530:	0800459f 	.word	0x0800459f
 8004534:	0800459f 	.word	0x0800459f
 8004538:	0800459f 	.word	0x0800459f
 800453c:	0800459f 	.word	0x0800459f
 8004540:	2b6e      	cmp	r3, #110	@ 0x6e
 8004542:	d809      	bhi.n	8004558 <_scanf_float+0x138>
 8004544:	2b60      	cmp	r3, #96	@ 0x60
 8004546:	d8b2      	bhi.n	80044ae <_scanf_float+0x8e>
 8004548:	2b54      	cmp	r3, #84	@ 0x54
 800454a:	d07b      	beq.n	8004644 <_scanf_float+0x224>
 800454c:	2b59      	cmp	r3, #89	@ 0x59
 800454e:	d199      	bne.n	8004484 <_scanf_float+0x64>
 8004550:	2d07      	cmp	r5, #7
 8004552:	d197      	bne.n	8004484 <_scanf_float+0x64>
 8004554:	2508      	movs	r5, #8
 8004556:	e02c      	b.n	80045b2 <_scanf_float+0x192>
 8004558:	2b74      	cmp	r3, #116	@ 0x74
 800455a:	d073      	beq.n	8004644 <_scanf_float+0x224>
 800455c:	2b79      	cmp	r3, #121	@ 0x79
 800455e:	e7f6      	b.n	800454e <_scanf_float+0x12e>
 8004560:	6821      	ldr	r1, [r4, #0]
 8004562:	05c8      	lsls	r0, r1, #23
 8004564:	d51b      	bpl.n	800459e <_scanf_float+0x17e>
 8004566:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800456a:	6021      	str	r1, [r4, #0]
 800456c:	f109 0901 	add.w	r9, r9, #1
 8004570:	f1bb 0f00 	cmp.w	fp, #0
 8004574:	d003      	beq.n	800457e <_scanf_float+0x15e>
 8004576:	3201      	adds	r2, #1
 8004578:	f10b 3bff 	add.w	fp, fp, #4294967295
 800457c:	60a2      	str	r2, [r4, #8]
 800457e:	68a3      	ldr	r3, [r4, #8]
 8004580:	3b01      	subs	r3, #1
 8004582:	60a3      	str	r3, [r4, #8]
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	3301      	adds	r3, #1
 8004588:	6123      	str	r3, [r4, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3b01      	subs	r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	f340 8087 	ble.w	80046a4 <_scanf_float+0x284>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	e765      	b.n	800446a <_scanf_float+0x4a>
 800459e:	eb1a 0105 	adds.w	r1, sl, r5
 80045a2:	f47f af6f 	bne.w	8004484 <_scanf_float+0x64>
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	460d      	mov	r5, r1
 80045b0:	468a      	mov	sl, r1
 80045b2:	f806 3b01 	strb.w	r3, [r6], #1
 80045b6:	e7e2      	b.n	800457e <_scanf_float+0x15e>
 80045b8:	6822      	ldr	r2, [r4, #0]
 80045ba:	0610      	lsls	r0, r2, #24
 80045bc:	f57f af62 	bpl.w	8004484 <_scanf_float+0x64>
 80045c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045c4:	6022      	str	r2, [r4, #0]
 80045c6:	e7f4      	b.n	80045b2 <_scanf_float+0x192>
 80045c8:	f1ba 0f00 	cmp.w	sl, #0
 80045cc:	d10e      	bne.n	80045ec <_scanf_float+0x1cc>
 80045ce:	f1b9 0f00 	cmp.w	r9, #0
 80045d2:	d10e      	bne.n	80045f2 <_scanf_float+0x1d2>
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80045da:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80045de:	d108      	bne.n	80045f2 <_scanf_float+0x1d2>
 80045e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80045e4:	6022      	str	r2, [r4, #0]
 80045e6:	f04f 0a01 	mov.w	sl, #1
 80045ea:	e7e2      	b.n	80045b2 <_scanf_float+0x192>
 80045ec:	f1ba 0f02 	cmp.w	sl, #2
 80045f0:	d055      	beq.n	800469e <_scanf_float+0x27e>
 80045f2:	2d01      	cmp	r5, #1
 80045f4:	d002      	beq.n	80045fc <_scanf_float+0x1dc>
 80045f6:	2d04      	cmp	r5, #4
 80045f8:	f47f af44 	bne.w	8004484 <_scanf_float+0x64>
 80045fc:	3501      	adds	r5, #1
 80045fe:	b2ed      	uxtb	r5, r5
 8004600:	e7d7      	b.n	80045b2 <_scanf_float+0x192>
 8004602:	f1ba 0f01 	cmp.w	sl, #1
 8004606:	f47f af3d 	bne.w	8004484 <_scanf_float+0x64>
 800460a:	f04f 0a02 	mov.w	sl, #2
 800460e:	e7d0      	b.n	80045b2 <_scanf_float+0x192>
 8004610:	b97d      	cbnz	r5, 8004632 <_scanf_float+0x212>
 8004612:	f1b9 0f00 	cmp.w	r9, #0
 8004616:	f47f af38 	bne.w	800448a <_scanf_float+0x6a>
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004620:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004624:	f040 8108 	bne.w	8004838 <_scanf_float+0x418>
 8004628:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800462c:	6022      	str	r2, [r4, #0]
 800462e:	2501      	movs	r5, #1
 8004630:	e7bf      	b.n	80045b2 <_scanf_float+0x192>
 8004632:	2d03      	cmp	r5, #3
 8004634:	d0e2      	beq.n	80045fc <_scanf_float+0x1dc>
 8004636:	2d05      	cmp	r5, #5
 8004638:	e7de      	b.n	80045f8 <_scanf_float+0x1d8>
 800463a:	2d02      	cmp	r5, #2
 800463c:	f47f af22 	bne.w	8004484 <_scanf_float+0x64>
 8004640:	2503      	movs	r5, #3
 8004642:	e7b6      	b.n	80045b2 <_scanf_float+0x192>
 8004644:	2d06      	cmp	r5, #6
 8004646:	f47f af1d 	bne.w	8004484 <_scanf_float+0x64>
 800464a:	2507      	movs	r5, #7
 800464c:	e7b1      	b.n	80045b2 <_scanf_float+0x192>
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	0591      	lsls	r1, r2, #22
 8004652:	f57f af17 	bpl.w	8004484 <_scanf_float+0x64>
 8004656:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800465a:	6022      	str	r2, [r4, #0]
 800465c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004660:	e7a7      	b.n	80045b2 <_scanf_float+0x192>
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004668:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800466c:	d006      	beq.n	800467c <_scanf_float+0x25c>
 800466e:	0550      	lsls	r0, r2, #21
 8004670:	f57f af08 	bpl.w	8004484 <_scanf_float+0x64>
 8004674:	f1b9 0f00 	cmp.w	r9, #0
 8004678:	f000 80de 	beq.w	8004838 <_scanf_float+0x418>
 800467c:	0591      	lsls	r1, r2, #22
 800467e:	bf58      	it	pl
 8004680:	9902      	ldrpl	r1, [sp, #8]
 8004682:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004686:	bf58      	it	pl
 8004688:	eba9 0101 	subpl.w	r1, r9, r1
 800468c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004690:	bf58      	it	pl
 8004692:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004696:	6022      	str	r2, [r4, #0]
 8004698:	f04f 0900 	mov.w	r9, #0
 800469c:	e789      	b.n	80045b2 <_scanf_float+0x192>
 800469e:	f04f 0a03 	mov.w	sl, #3
 80046a2:	e786      	b.n	80045b2 <_scanf_float+0x192>
 80046a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80046a8:	4639      	mov	r1, r7
 80046aa:	4640      	mov	r0, r8
 80046ac:	4798      	blx	r3
 80046ae:	2800      	cmp	r0, #0
 80046b0:	f43f aedb 	beq.w	800446a <_scanf_float+0x4a>
 80046b4:	e6e6      	b.n	8004484 <_scanf_float+0x64>
 80046b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046be:	463a      	mov	r2, r7
 80046c0:	4640      	mov	r0, r8
 80046c2:	4798      	blx	r3
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	6123      	str	r3, [r4, #16]
 80046ca:	e6e8      	b.n	800449e <_scanf_float+0x7e>
 80046cc:	1e6b      	subs	r3, r5, #1
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d824      	bhi.n	800471c <_scanf_float+0x2fc>
 80046d2:	2d02      	cmp	r5, #2
 80046d4:	d836      	bhi.n	8004744 <_scanf_float+0x324>
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	429e      	cmp	r6, r3
 80046da:	f67f aee4 	bls.w	80044a6 <_scanf_float+0x86>
 80046de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046e6:	463a      	mov	r2, r7
 80046e8:	4640      	mov	r0, r8
 80046ea:	4798      	blx	r3
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	e7f0      	b.n	80046d6 <_scanf_float+0x2b6>
 80046f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80046fc:	463a      	mov	r2, r7
 80046fe:	4640      	mov	r0, r8
 8004700:	4798      	blx	r3
 8004702:	6923      	ldr	r3, [r4, #16]
 8004704:	3b01      	subs	r3, #1
 8004706:	6123      	str	r3, [r4, #16]
 8004708:	f10a 3aff 	add.w	sl, sl, #4294967295
 800470c:	fa5f fa8a 	uxtb.w	sl, sl
 8004710:	f1ba 0f02 	cmp.w	sl, #2
 8004714:	d1ee      	bne.n	80046f4 <_scanf_float+0x2d4>
 8004716:	3d03      	subs	r5, #3
 8004718:	b2ed      	uxtb	r5, r5
 800471a:	1b76      	subs	r6, r6, r5
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	05da      	lsls	r2, r3, #23
 8004720:	d530      	bpl.n	8004784 <_scanf_float+0x364>
 8004722:	055b      	lsls	r3, r3, #21
 8004724:	d511      	bpl.n	800474a <_scanf_float+0x32a>
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	429e      	cmp	r6, r3
 800472a:	f67f aebc 	bls.w	80044a6 <_scanf_float+0x86>
 800472e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004736:	463a      	mov	r2, r7
 8004738:	4640      	mov	r0, r8
 800473a:	4798      	blx	r3
 800473c:	6923      	ldr	r3, [r4, #16]
 800473e:	3b01      	subs	r3, #1
 8004740:	6123      	str	r3, [r4, #16]
 8004742:	e7f0      	b.n	8004726 <_scanf_float+0x306>
 8004744:	46aa      	mov	sl, r5
 8004746:	46b3      	mov	fp, r6
 8004748:	e7de      	b.n	8004708 <_scanf_float+0x2e8>
 800474a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800474e:	6923      	ldr	r3, [r4, #16]
 8004750:	2965      	cmp	r1, #101	@ 0x65
 8004752:	f103 33ff 	add.w	r3, r3, #4294967295
 8004756:	f106 35ff 	add.w	r5, r6, #4294967295
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	d00c      	beq.n	8004778 <_scanf_float+0x358>
 800475e:	2945      	cmp	r1, #69	@ 0x45
 8004760:	d00a      	beq.n	8004778 <_scanf_float+0x358>
 8004762:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004766:	463a      	mov	r2, r7
 8004768:	4640      	mov	r0, r8
 800476a:	4798      	blx	r3
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004772:	3b01      	subs	r3, #1
 8004774:	1eb5      	subs	r5, r6, #2
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800477c:	463a      	mov	r2, r7
 800477e:	4640      	mov	r0, r8
 8004780:	4798      	blx	r3
 8004782:	462e      	mov	r6, r5
 8004784:	6822      	ldr	r2, [r4, #0]
 8004786:	f012 0210 	ands.w	r2, r2, #16
 800478a:	d001      	beq.n	8004790 <_scanf_float+0x370>
 800478c:	2000      	movs	r0, #0
 800478e:	e68b      	b.n	80044a8 <_scanf_float+0x88>
 8004790:	7032      	strb	r2, [r6, #0]
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479c:	d11c      	bne.n	80047d8 <_scanf_float+0x3b8>
 800479e:	9b02      	ldr	r3, [sp, #8]
 80047a0:	454b      	cmp	r3, r9
 80047a2:	eba3 0209 	sub.w	r2, r3, r9
 80047a6:	d123      	bne.n	80047f0 <_scanf_float+0x3d0>
 80047a8:	9901      	ldr	r1, [sp, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	4640      	mov	r0, r8
 80047ae:	f002 fc13 	bl	8006fd8 <_strtod_r>
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	6821      	ldr	r1, [r4, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f011 0f02 	tst.w	r1, #2
 80047bc:	ec57 6b10 	vmov	r6, r7, d0
 80047c0:	f103 0204 	add.w	r2, r3, #4
 80047c4:	d01f      	beq.n	8004806 <_scanf_float+0x3e6>
 80047c6:	9903      	ldr	r1, [sp, #12]
 80047c8:	600a      	str	r2, [r1, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	e9c3 6700 	strd	r6, r7, [r3]
 80047d0:	68e3      	ldr	r3, [r4, #12]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60e3      	str	r3, [r4, #12]
 80047d6:	e7d9      	b.n	800478c <_scanf_float+0x36c>
 80047d8:	9b04      	ldr	r3, [sp, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0e4      	beq.n	80047a8 <_scanf_float+0x388>
 80047de:	9905      	ldr	r1, [sp, #20]
 80047e0:	230a      	movs	r3, #10
 80047e2:	3101      	adds	r1, #1
 80047e4:	4640      	mov	r0, r8
 80047e6:	f002 fc77 	bl	80070d8 <_strtol_r>
 80047ea:	9b04      	ldr	r3, [sp, #16]
 80047ec:	9e05      	ldr	r6, [sp, #20]
 80047ee:	1ac2      	subs	r2, r0, r3
 80047f0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80047f4:	429e      	cmp	r6, r3
 80047f6:	bf28      	it	cs
 80047f8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80047fc:	4910      	ldr	r1, [pc, #64]	@ (8004840 <_scanf_float+0x420>)
 80047fe:	4630      	mov	r0, r6
 8004800:	f000 f8fe 	bl	8004a00 <siprintf>
 8004804:	e7d0      	b.n	80047a8 <_scanf_float+0x388>
 8004806:	f011 0f04 	tst.w	r1, #4
 800480a:	9903      	ldr	r1, [sp, #12]
 800480c:	600a      	str	r2, [r1, #0]
 800480e:	d1dc      	bne.n	80047ca <_scanf_float+0x3aa>
 8004810:	681d      	ldr	r5, [r3, #0]
 8004812:	4632      	mov	r2, r6
 8004814:	463b      	mov	r3, r7
 8004816:	4630      	mov	r0, r6
 8004818:	4639      	mov	r1, r7
 800481a:	f7fc f98f 	bl	8000b3c <__aeabi_dcmpun>
 800481e:	b128      	cbz	r0, 800482c <_scanf_float+0x40c>
 8004820:	4808      	ldr	r0, [pc, #32]	@ (8004844 <_scanf_float+0x424>)
 8004822:	f000 f9d1 	bl	8004bc8 <nanf>
 8004826:	ed85 0a00 	vstr	s0, [r5]
 800482a:	e7d1      	b.n	80047d0 <_scanf_float+0x3b0>
 800482c:	4630      	mov	r0, r6
 800482e:	4639      	mov	r1, r7
 8004830:	f7fc f9e2 	bl	8000bf8 <__aeabi_d2f>
 8004834:	6028      	str	r0, [r5, #0]
 8004836:	e7cb      	b.n	80047d0 <_scanf_float+0x3b0>
 8004838:	f04f 0900 	mov.w	r9, #0
 800483c:	e629      	b.n	8004492 <_scanf_float+0x72>
 800483e:	bf00      	nop
 8004840:	080086b4 	.word	0x080086b4
 8004844:	08008a4d 	.word	0x08008a4d

08004848 <std>:
 8004848:	2300      	movs	r3, #0
 800484a:	b510      	push	{r4, lr}
 800484c:	4604      	mov	r4, r0
 800484e:	e9c0 3300 	strd	r3, r3, [r0]
 8004852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004856:	6083      	str	r3, [r0, #8]
 8004858:	8181      	strh	r1, [r0, #12]
 800485a:	6643      	str	r3, [r0, #100]	@ 0x64
 800485c:	81c2      	strh	r2, [r0, #14]
 800485e:	6183      	str	r3, [r0, #24]
 8004860:	4619      	mov	r1, r3
 8004862:	2208      	movs	r2, #8
 8004864:	305c      	adds	r0, #92	@ 0x5c
 8004866:	f000 f92e 	bl	8004ac6 <memset>
 800486a:	4b0d      	ldr	r3, [pc, #52]	@ (80048a0 <std+0x58>)
 800486c:	6263      	str	r3, [r4, #36]	@ 0x24
 800486e:	4b0d      	ldr	r3, [pc, #52]	@ (80048a4 <std+0x5c>)
 8004870:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <std+0x60>)
 8004874:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004876:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <std+0x64>)
 8004878:	6323      	str	r3, [r4, #48]	@ 0x30
 800487a:	4b0d      	ldr	r3, [pc, #52]	@ (80048b0 <std+0x68>)
 800487c:	6224      	str	r4, [r4, #32]
 800487e:	429c      	cmp	r4, r3
 8004880:	d006      	beq.n	8004890 <std+0x48>
 8004882:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004886:	4294      	cmp	r4, r2
 8004888:	d002      	beq.n	8004890 <std+0x48>
 800488a:	33d0      	adds	r3, #208	@ 0xd0
 800488c:	429c      	cmp	r4, r3
 800488e:	d105      	bne.n	800489c <std+0x54>
 8004890:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004898:	f000 b992 	b.w	8004bc0 <__retarget_lock_init_recursive>
 800489c:	bd10      	pop	{r4, pc}
 800489e:	bf00      	nop
 80048a0:	08004a41 	.word	0x08004a41
 80048a4:	08004a63 	.word	0x08004a63
 80048a8:	08004a9b 	.word	0x08004a9b
 80048ac:	08004abf 	.word	0x08004abf
 80048b0:	2000054c 	.word	0x2000054c

080048b4 <stdio_exit_handler>:
 80048b4:	4a02      	ldr	r2, [pc, #8]	@ (80048c0 <stdio_exit_handler+0xc>)
 80048b6:	4903      	ldr	r1, [pc, #12]	@ (80048c4 <stdio_exit_handler+0x10>)
 80048b8:	4803      	ldr	r0, [pc, #12]	@ (80048c8 <stdio_exit_handler+0x14>)
 80048ba:	f000 b869 	b.w	8004990 <_fwalk_sglue>
 80048be:	bf00      	nop
 80048c0:	2000000c 	.word	0x2000000c
 80048c4:	08007719 	.word	0x08007719
 80048c8:	2000001c 	.word	0x2000001c

080048cc <cleanup_stdio>:
 80048cc:	6841      	ldr	r1, [r0, #4]
 80048ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <cleanup_stdio+0x34>)
 80048d0:	4299      	cmp	r1, r3
 80048d2:	b510      	push	{r4, lr}
 80048d4:	4604      	mov	r4, r0
 80048d6:	d001      	beq.n	80048dc <cleanup_stdio+0x10>
 80048d8:	f002 ff1e 	bl	8007718 <_fflush_r>
 80048dc:	68a1      	ldr	r1, [r4, #8]
 80048de:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <cleanup_stdio+0x38>)
 80048e0:	4299      	cmp	r1, r3
 80048e2:	d002      	beq.n	80048ea <cleanup_stdio+0x1e>
 80048e4:	4620      	mov	r0, r4
 80048e6:	f002 ff17 	bl	8007718 <_fflush_r>
 80048ea:	68e1      	ldr	r1, [r4, #12]
 80048ec:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <cleanup_stdio+0x3c>)
 80048ee:	4299      	cmp	r1, r3
 80048f0:	d004      	beq.n	80048fc <cleanup_stdio+0x30>
 80048f2:	4620      	mov	r0, r4
 80048f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f8:	f002 bf0e 	b.w	8007718 <_fflush_r>
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	bf00      	nop
 8004900:	2000054c 	.word	0x2000054c
 8004904:	200005b4 	.word	0x200005b4
 8004908:	2000061c 	.word	0x2000061c

0800490c <global_stdio_init.part.0>:
 800490c:	b510      	push	{r4, lr}
 800490e:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <global_stdio_init.part.0+0x30>)
 8004910:	4c0b      	ldr	r4, [pc, #44]	@ (8004940 <global_stdio_init.part.0+0x34>)
 8004912:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <global_stdio_init.part.0+0x38>)
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	4620      	mov	r0, r4
 8004918:	2200      	movs	r2, #0
 800491a:	2104      	movs	r1, #4
 800491c:	f7ff ff94 	bl	8004848 <std>
 8004920:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004924:	2201      	movs	r2, #1
 8004926:	2109      	movs	r1, #9
 8004928:	f7ff ff8e 	bl	8004848 <std>
 800492c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004930:	2202      	movs	r2, #2
 8004932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004936:	2112      	movs	r1, #18
 8004938:	f7ff bf86 	b.w	8004848 <std>
 800493c:	20000684 	.word	0x20000684
 8004940:	2000054c 	.word	0x2000054c
 8004944:	080048b5 	.word	0x080048b5

08004948 <__sfp_lock_acquire>:
 8004948:	4801      	ldr	r0, [pc, #4]	@ (8004950 <__sfp_lock_acquire+0x8>)
 800494a:	f000 b93a 	b.w	8004bc2 <__retarget_lock_acquire_recursive>
 800494e:	bf00      	nop
 8004950:	2000068d 	.word	0x2000068d

08004954 <__sfp_lock_release>:
 8004954:	4801      	ldr	r0, [pc, #4]	@ (800495c <__sfp_lock_release+0x8>)
 8004956:	f000 b935 	b.w	8004bc4 <__retarget_lock_release_recursive>
 800495a:	bf00      	nop
 800495c:	2000068d 	.word	0x2000068d

08004960 <__sinit>:
 8004960:	b510      	push	{r4, lr}
 8004962:	4604      	mov	r4, r0
 8004964:	f7ff fff0 	bl	8004948 <__sfp_lock_acquire>
 8004968:	6a23      	ldr	r3, [r4, #32]
 800496a:	b11b      	cbz	r3, 8004974 <__sinit+0x14>
 800496c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004970:	f7ff bff0 	b.w	8004954 <__sfp_lock_release>
 8004974:	4b04      	ldr	r3, [pc, #16]	@ (8004988 <__sinit+0x28>)
 8004976:	6223      	str	r3, [r4, #32]
 8004978:	4b04      	ldr	r3, [pc, #16]	@ (800498c <__sinit+0x2c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f5      	bne.n	800496c <__sinit+0xc>
 8004980:	f7ff ffc4 	bl	800490c <global_stdio_init.part.0>
 8004984:	e7f2      	b.n	800496c <__sinit+0xc>
 8004986:	bf00      	nop
 8004988:	080048cd 	.word	0x080048cd
 800498c:	20000684 	.word	0x20000684

08004990 <_fwalk_sglue>:
 8004990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004994:	4607      	mov	r7, r0
 8004996:	4688      	mov	r8, r1
 8004998:	4614      	mov	r4, r2
 800499a:	2600      	movs	r6, #0
 800499c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049a0:	f1b9 0901 	subs.w	r9, r9, #1
 80049a4:	d505      	bpl.n	80049b2 <_fwalk_sglue+0x22>
 80049a6:	6824      	ldr	r4, [r4, #0]
 80049a8:	2c00      	cmp	r4, #0
 80049aa:	d1f7      	bne.n	800499c <_fwalk_sglue+0xc>
 80049ac:	4630      	mov	r0, r6
 80049ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049b2:	89ab      	ldrh	r3, [r5, #12]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d907      	bls.n	80049c8 <_fwalk_sglue+0x38>
 80049b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049bc:	3301      	adds	r3, #1
 80049be:	d003      	beq.n	80049c8 <_fwalk_sglue+0x38>
 80049c0:	4629      	mov	r1, r5
 80049c2:	4638      	mov	r0, r7
 80049c4:	47c0      	blx	r8
 80049c6:	4306      	orrs	r6, r0
 80049c8:	3568      	adds	r5, #104	@ 0x68
 80049ca:	e7e9      	b.n	80049a0 <_fwalk_sglue+0x10>

080049cc <iprintf>:
 80049cc:	b40f      	push	{r0, r1, r2, r3}
 80049ce:	b507      	push	{r0, r1, r2, lr}
 80049d0:	4906      	ldr	r1, [pc, #24]	@ (80049ec <iprintf+0x20>)
 80049d2:	ab04      	add	r3, sp, #16
 80049d4:	6808      	ldr	r0, [r1, #0]
 80049d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80049da:	6881      	ldr	r1, [r0, #8]
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	f002 fcff 	bl	80073e0 <_vfiprintf_r>
 80049e2:	b003      	add	sp, #12
 80049e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80049e8:	b004      	add	sp, #16
 80049ea:	4770      	bx	lr
 80049ec:	20000018 	.word	0x20000018

080049f0 <putchar>:
 80049f0:	4b02      	ldr	r3, [pc, #8]	@ (80049fc <putchar+0xc>)
 80049f2:	4601      	mov	r1, r0
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	6882      	ldr	r2, [r0, #8]
 80049f8:	f002 beb6 	b.w	8007768 <_putc_r>
 80049fc:	20000018 	.word	0x20000018

08004a00 <siprintf>:
 8004a00:	b40e      	push	{r1, r2, r3}
 8004a02:	b500      	push	{lr}
 8004a04:	b09c      	sub	sp, #112	@ 0x70
 8004a06:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a08:	9002      	str	r0, [sp, #8]
 8004a0a:	9006      	str	r0, [sp, #24]
 8004a0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a10:	4809      	ldr	r0, [pc, #36]	@ (8004a38 <siprintf+0x38>)
 8004a12:	9107      	str	r1, [sp, #28]
 8004a14:	9104      	str	r1, [sp, #16]
 8004a16:	4909      	ldr	r1, [pc, #36]	@ (8004a3c <siprintf+0x3c>)
 8004a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a1c:	9105      	str	r1, [sp, #20]
 8004a1e:	6800      	ldr	r0, [r0, #0]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	a902      	add	r1, sp, #8
 8004a24:	f002 fbb6 	bl	8007194 <_svfiprintf_r>
 8004a28:	9b02      	ldr	r3, [sp, #8]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	b01c      	add	sp, #112	@ 0x70
 8004a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a34:	b003      	add	sp, #12
 8004a36:	4770      	bx	lr
 8004a38:	20000018 	.word	0x20000018
 8004a3c:	ffff0208 	.word	0xffff0208

08004a40 <__sread>:
 8004a40:	b510      	push	{r4, lr}
 8004a42:	460c      	mov	r4, r1
 8004a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a48:	f000 f86c 	bl	8004b24 <_read_r>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	bfab      	itete	ge
 8004a50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a52:	89a3      	ldrhlt	r3, [r4, #12]
 8004a54:	181b      	addge	r3, r3, r0
 8004a56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a5a:	bfac      	ite	ge
 8004a5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a5e:	81a3      	strhlt	r3, [r4, #12]
 8004a60:	bd10      	pop	{r4, pc}

08004a62 <__swrite>:
 8004a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a66:	461f      	mov	r7, r3
 8004a68:	898b      	ldrh	r3, [r1, #12]
 8004a6a:	05db      	lsls	r3, r3, #23
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	4616      	mov	r6, r2
 8004a72:	d505      	bpl.n	8004a80 <__swrite+0x1e>
 8004a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a78:	2302      	movs	r3, #2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f000 f840 	bl	8004b00 <_lseek_r>
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a8a:	81a3      	strh	r3, [r4, #12]
 8004a8c:	4632      	mov	r2, r6
 8004a8e:	463b      	mov	r3, r7
 8004a90:	4628      	mov	r0, r5
 8004a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a96:	f000 b857 	b.w	8004b48 <_write_r>

08004a9a <__sseek>:
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa2:	f000 f82d 	bl	8004b00 <_lseek_r>
 8004aa6:	1c43      	adds	r3, r0, #1
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	bf15      	itete	ne
 8004aac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004aae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ab2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ab6:	81a3      	strheq	r3, [r4, #12]
 8004ab8:	bf18      	it	ne
 8004aba:	81a3      	strhne	r3, [r4, #12]
 8004abc:	bd10      	pop	{r4, pc}

08004abe <__sclose>:
 8004abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac2:	f000 b80d 	b.w	8004ae0 <_close_r>

08004ac6 <memset>:
 8004ac6:	4402      	add	r2, r0
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d100      	bne.n	8004ad0 <memset+0xa>
 8004ace:	4770      	bx	lr
 8004ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad4:	e7f9      	b.n	8004aca <memset+0x4>
	...

08004ad8 <_localeconv_r>:
 8004ad8:	4800      	ldr	r0, [pc, #0]	@ (8004adc <_localeconv_r+0x4>)
 8004ada:	4770      	bx	lr
 8004adc:	20000158 	.word	0x20000158

08004ae0 <_close_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	4d06      	ldr	r5, [pc, #24]	@ (8004afc <_close_r+0x1c>)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	4608      	mov	r0, r1
 8004aea:	602b      	str	r3, [r5, #0]
 8004aec:	f7fe f9c3 	bl	8002e76 <_close>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d102      	bne.n	8004afa <_close_r+0x1a>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	b103      	cbz	r3, 8004afa <_close_r+0x1a>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	20000688 	.word	0x20000688

08004b00 <_lseek_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4d07      	ldr	r5, [pc, #28]	@ (8004b20 <_lseek_r+0x20>)
 8004b04:	4604      	mov	r4, r0
 8004b06:	4608      	mov	r0, r1
 8004b08:	4611      	mov	r1, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	602a      	str	r2, [r5, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f7fe f9d8 	bl	8002ec4 <_lseek>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_lseek_r+0x1e>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_lseek_r+0x1e>
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	20000688 	.word	0x20000688

08004b24 <_read_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	4d07      	ldr	r5, [pc, #28]	@ (8004b44 <_read_r+0x20>)
 8004b28:	4604      	mov	r4, r0
 8004b2a:	4608      	mov	r0, r1
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	2200      	movs	r2, #0
 8004b30:	602a      	str	r2, [r5, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f7fe f966 	bl	8002e04 <_read>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d102      	bne.n	8004b42 <_read_r+0x1e>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	b103      	cbz	r3, 8004b42 <_read_r+0x1e>
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	20000688 	.word	0x20000688

08004b48 <_write_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4d07      	ldr	r5, [pc, #28]	@ (8004b68 <_write_r+0x20>)
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	4608      	mov	r0, r1
 8004b50:	4611      	mov	r1, r2
 8004b52:	2200      	movs	r2, #0
 8004b54:	602a      	str	r2, [r5, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f7fe f971 	bl	8002e3e <_write>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_write_r+0x1e>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_write_r+0x1e>
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	20000688 	.word	0x20000688

08004b6c <__errno>:
 8004b6c:	4b01      	ldr	r3, [pc, #4]	@ (8004b74 <__errno+0x8>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000018 	.word	0x20000018

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8004bb0 <__libc_init_array+0x38>)
 8004b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8004bb4 <__libc_init_array+0x3c>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	2600      	movs	r6, #0
 8004b84:	42a6      	cmp	r6, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	4d0b      	ldr	r5, [pc, #44]	@ (8004bb8 <__libc_init_array+0x40>)
 8004b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8004bbc <__libc_init_array+0x44>)
 8004b8c:	f003 fbaa 	bl	80082e4 <_init>
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	2600      	movs	r6, #0
 8004b96:	42a6      	cmp	r6, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba0:	4798      	blx	r3
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004baa:	4798      	blx	r3
 8004bac:	3601      	adds	r6, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	08008ab8 	.word	0x08008ab8
 8004bb4:	08008ab8 	.word	0x08008ab8
 8004bb8:	08008ab8 	.word	0x08008ab8
 8004bbc:	08008abc 	.word	0x08008abc

08004bc0 <__retarget_lock_init_recursive>:
 8004bc0:	4770      	bx	lr

08004bc2 <__retarget_lock_acquire_recursive>:
 8004bc2:	4770      	bx	lr

08004bc4 <__retarget_lock_release_recursive>:
 8004bc4:	4770      	bx	lr
	...

08004bc8 <nanf>:
 8004bc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004bd0 <nanf+0x8>
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	7fc00000 	.word	0x7fc00000

08004bd4 <quorem>:
 8004bd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd8:	6903      	ldr	r3, [r0, #16]
 8004bda:	690c      	ldr	r4, [r1, #16]
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	4607      	mov	r7, r0
 8004be0:	db7e      	blt.n	8004ce0 <quorem+0x10c>
 8004be2:	3c01      	subs	r4, #1
 8004be4:	f101 0814 	add.w	r8, r1, #20
 8004be8:	00a3      	lsls	r3, r4, #2
 8004bea:	f100 0514 	add.w	r5, r0, #20
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	429a      	cmp	r2, r3
 8004c02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c06:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c0a:	d32e      	bcc.n	8004c6a <quorem+0x96>
 8004c0c:	f04f 0a00 	mov.w	sl, #0
 8004c10:	46c4      	mov	ip, r8
 8004c12:	46ae      	mov	lr, r5
 8004c14:	46d3      	mov	fp, sl
 8004c16:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c1a:	b298      	uxth	r0, r3
 8004c1c:	fb06 a000 	mla	r0, r6, r0, sl
 8004c20:	0c02      	lsrs	r2, r0, #16
 8004c22:	0c1b      	lsrs	r3, r3, #16
 8004c24:	fb06 2303 	mla	r3, r6, r3, r2
 8004c28:	f8de 2000 	ldr.w	r2, [lr]
 8004c2c:	b280      	uxth	r0, r0
 8004c2e:	b292      	uxth	r2, r2
 8004c30:	1a12      	subs	r2, r2, r0
 8004c32:	445a      	add	r2, fp
 8004c34:	f8de 0000 	ldr.w	r0, [lr]
 8004c38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004c42:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004c46:	b292      	uxth	r2, r2
 8004c48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c4c:	45e1      	cmp	r9, ip
 8004c4e:	f84e 2b04 	str.w	r2, [lr], #4
 8004c52:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004c56:	d2de      	bcs.n	8004c16 <quorem+0x42>
 8004c58:	9b00      	ldr	r3, [sp, #0]
 8004c5a:	58eb      	ldr	r3, [r5, r3]
 8004c5c:	b92b      	cbnz	r3, 8004c6a <quorem+0x96>
 8004c5e:	9b01      	ldr	r3, [sp, #4]
 8004c60:	3b04      	subs	r3, #4
 8004c62:	429d      	cmp	r5, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	d32f      	bcc.n	8004cc8 <quorem+0xf4>
 8004c68:	613c      	str	r4, [r7, #16]
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	f001 f9c4 	bl	8005ff8 <__mcmp>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	db25      	blt.n	8004cc0 <quorem+0xec>
 8004c74:	4629      	mov	r1, r5
 8004c76:	2000      	movs	r0, #0
 8004c78:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c7c:	f8d1 c000 	ldr.w	ip, [r1]
 8004c80:	fa1f fe82 	uxth.w	lr, r2
 8004c84:	fa1f f38c 	uxth.w	r3, ip
 8004c88:	eba3 030e 	sub.w	r3, r3, lr
 8004c8c:	4403      	add	r3, r0
 8004c8e:	0c12      	lsrs	r2, r2, #16
 8004c90:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004c94:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c9e:	45c1      	cmp	r9, r8
 8004ca0:	f841 3b04 	str.w	r3, [r1], #4
 8004ca4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ca8:	d2e6      	bcs.n	8004c78 <quorem+0xa4>
 8004caa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cb2:	b922      	cbnz	r2, 8004cbe <quorem+0xea>
 8004cb4:	3b04      	subs	r3, #4
 8004cb6:	429d      	cmp	r5, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	d30b      	bcc.n	8004cd4 <quorem+0x100>
 8004cbc:	613c      	str	r4, [r7, #16]
 8004cbe:	3601      	adds	r6, #1
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	b003      	add	sp, #12
 8004cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	3b04      	subs	r3, #4
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	d1cb      	bne.n	8004c68 <quorem+0x94>
 8004cd0:	3c01      	subs	r4, #1
 8004cd2:	e7c6      	b.n	8004c62 <quorem+0x8e>
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	3b04      	subs	r3, #4
 8004cd8:	2a00      	cmp	r2, #0
 8004cda:	d1ef      	bne.n	8004cbc <quorem+0xe8>
 8004cdc:	3c01      	subs	r4, #1
 8004cde:	e7ea      	b.n	8004cb6 <quorem+0xe2>
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	e7ee      	b.n	8004cc2 <quorem+0xee>
 8004ce4:	0000      	movs	r0, r0
	...

08004ce8 <_dtoa_r>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	69c7      	ldr	r7, [r0, #28]
 8004cee:	b099      	sub	sp, #100	@ 0x64
 8004cf0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004cf4:	ec55 4b10 	vmov	r4, r5, d0
 8004cf8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004cfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cfc:	4683      	mov	fp, r0
 8004cfe:	920e      	str	r2, [sp, #56]	@ 0x38
 8004d00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d02:	b97f      	cbnz	r7, 8004d24 <_dtoa_r+0x3c>
 8004d04:	2010      	movs	r0, #16
 8004d06:	f000 fdfd 	bl	8005904 <malloc>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004d10:	b920      	cbnz	r0, 8004d1c <_dtoa_r+0x34>
 8004d12:	4ba7      	ldr	r3, [pc, #668]	@ (8004fb0 <_dtoa_r+0x2c8>)
 8004d14:	21ef      	movs	r1, #239	@ 0xef
 8004d16:	48a7      	ldr	r0, [pc, #668]	@ (8004fb4 <_dtoa_r+0x2cc>)
 8004d18:	f002 fe42 	bl	80079a0 <__assert_func>
 8004d1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004d20:	6007      	str	r7, [r0, #0]
 8004d22:	60c7      	str	r7, [r0, #12]
 8004d24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	b159      	cbz	r1, 8004d44 <_dtoa_r+0x5c>
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	604a      	str	r2, [r1, #4]
 8004d30:	2301      	movs	r3, #1
 8004d32:	4093      	lsls	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
 8004d36:	4658      	mov	r0, fp
 8004d38:	f000 feda 	bl	8005af0 <_Bfree>
 8004d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	1e2b      	subs	r3, r5, #0
 8004d46:	bfb9      	ittee	lt
 8004d48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004d4c:	9303      	strlt	r3, [sp, #12]
 8004d4e:	2300      	movge	r3, #0
 8004d50:	6033      	strge	r3, [r6, #0]
 8004d52:	9f03      	ldr	r7, [sp, #12]
 8004d54:	4b98      	ldr	r3, [pc, #608]	@ (8004fb8 <_dtoa_r+0x2d0>)
 8004d56:	bfbc      	itt	lt
 8004d58:	2201      	movlt	r2, #1
 8004d5a:	6032      	strlt	r2, [r6, #0]
 8004d5c:	43bb      	bics	r3, r7
 8004d5e:	d112      	bne.n	8004d86 <_dtoa_r+0x9e>
 8004d60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004d62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d6c:	4323      	orrs	r3, r4
 8004d6e:	f000 854d 	beq.w	800580c <_dtoa_r+0xb24>
 8004d72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004fcc <_dtoa_r+0x2e4>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 854f 	beq.w	800581c <_dtoa_r+0xb34>
 8004d7e:	f10a 0303 	add.w	r3, sl, #3
 8004d82:	f000 bd49 	b.w	8005818 <_dtoa_r+0xb30>
 8004d86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	ec51 0b17 	vmov	r0, r1, d7
 8004d90:	2300      	movs	r3, #0
 8004d92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004d96:	f7fb fe9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d9a:	4680      	mov	r8, r0
 8004d9c:	b158      	cbz	r0, 8004db6 <_dtoa_r+0xce>
 8004d9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004da0:	2301      	movs	r3, #1
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004da6:	b113      	cbz	r3, 8004dae <_dtoa_r+0xc6>
 8004da8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004daa:	4b84      	ldr	r3, [pc, #528]	@ (8004fbc <_dtoa_r+0x2d4>)
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004fd0 <_dtoa_r+0x2e8>
 8004db2:	f000 bd33 	b.w	800581c <_dtoa_r+0xb34>
 8004db6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004dba:	aa16      	add	r2, sp, #88	@ 0x58
 8004dbc:	a917      	add	r1, sp, #92	@ 0x5c
 8004dbe:	4658      	mov	r0, fp
 8004dc0:	f001 fa3a 	bl	8006238 <__d2b>
 8004dc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004dc8:	4681      	mov	r9, r0
 8004dca:	2e00      	cmp	r6, #0
 8004dcc:	d077      	beq.n	8004ebe <_dtoa_r+0x1d6>
 8004dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ddc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004de0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004de4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004de8:	4619      	mov	r1, r3
 8004dea:	2200      	movs	r2, #0
 8004dec:	4b74      	ldr	r3, [pc, #464]	@ (8004fc0 <_dtoa_r+0x2d8>)
 8004dee:	f7fb fa53 	bl	8000298 <__aeabi_dsub>
 8004df2:	a369      	add	r3, pc, #420	@ (adr r3, 8004f98 <_dtoa_r+0x2b0>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f7fb fc06 	bl	8000608 <__aeabi_dmul>
 8004dfc:	a368      	add	r3, pc, #416	@ (adr r3, 8004fa0 <_dtoa_r+0x2b8>)
 8004dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e02:	f7fb fa4b 	bl	800029c <__adddf3>
 8004e06:	4604      	mov	r4, r0
 8004e08:	4630      	mov	r0, r6
 8004e0a:	460d      	mov	r5, r1
 8004e0c:	f7fb fb92 	bl	8000534 <__aeabi_i2d>
 8004e10:	a365      	add	r3, pc, #404	@ (adr r3, 8004fa8 <_dtoa_r+0x2c0>)
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb fbf7 	bl	8000608 <__aeabi_dmul>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4620      	mov	r0, r4
 8004e20:	4629      	mov	r1, r5
 8004e22:	f7fb fa3b 	bl	800029c <__adddf3>
 8004e26:	4604      	mov	r4, r0
 8004e28:	460d      	mov	r5, r1
 8004e2a:	f7fb fe9d 	bl	8000b68 <__aeabi_d2iz>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	4607      	mov	r7, r0
 8004e32:	2300      	movs	r3, #0
 8004e34:	4620      	mov	r0, r4
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb fe58 	bl	8000aec <__aeabi_dcmplt>
 8004e3c:	b140      	cbz	r0, 8004e50 <_dtoa_r+0x168>
 8004e3e:	4638      	mov	r0, r7
 8004e40:	f7fb fb78 	bl	8000534 <__aeabi_i2d>
 8004e44:	4622      	mov	r2, r4
 8004e46:	462b      	mov	r3, r5
 8004e48:	f7fb fe46 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e4c:	b900      	cbnz	r0, 8004e50 <_dtoa_r+0x168>
 8004e4e:	3f01      	subs	r7, #1
 8004e50:	2f16      	cmp	r7, #22
 8004e52:	d851      	bhi.n	8004ef8 <_dtoa_r+0x210>
 8004e54:	4b5b      	ldr	r3, [pc, #364]	@ (8004fc4 <_dtoa_r+0x2dc>)
 8004e56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e62:	f7fb fe43 	bl	8000aec <__aeabi_dcmplt>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d048      	beq.n	8004efc <_dtoa_r+0x214>
 8004e6a:	3f01      	subs	r7, #1
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004e70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004e72:	1b9b      	subs	r3, r3, r6
 8004e74:	1e5a      	subs	r2, r3, #1
 8004e76:	bf44      	itt	mi
 8004e78:	f1c3 0801 	rsbmi	r8, r3, #1
 8004e7c:	2300      	movmi	r3, #0
 8004e7e:	9208      	str	r2, [sp, #32]
 8004e80:	bf54      	ite	pl
 8004e82:	f04f 0800 	movpl.w	r8, #0
 8004e86:	9308      	strmi	r3, [sp, #32]
 8004e88:	2f00      	cmp	r7, #0
 8004e8a:	db39      	blt.n	8004f00 <_dtoa_r+0x218>
 8004e8c:	9b08      	ldr	r3, [sp, #32]
 8004e8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004e90:	443b      	add	r3, r7
 8004e92:	9308      	str	r3, [sp, #32]
 8004e94:	2300      	movs	r3, #0
 8004e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e9a:	2b09      	cmp	r3, #9
 8004e9c:	d864      	bhi.n	8004f68 <_dtoa_r+0x280>
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	bfc4      	itt	gt
 8004ea2:	3b04      	subgt	r3, #4
 8004ea4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ea8:	f1a3 0302 	sub.w	r3, r3, #2
 8004eac:	bfcc      	ite	gt
 8004eae:	2400      	movgt	r4, #0
 8004eb0:	2401      	movle	r4, #1
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d863      	bhi.n	8004f7e <_dtoa_r+0x296>
 8004eb6:	e8df f003 	tbb	[pc, r3]
 8004eba:	372a      	.short	0x372a
 8004ebc:	5535      	.short	0x5535
 8004ebe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004ec2:	441e      	add	r6, r3
 8004ec4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	bfc1      	itttt	gt
 8004ecc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004ed0:	409f      	lslgt	r7, r3
 8004ed2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004ed6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004eda:	bfd6      	itet	le
 8004edc:	f1c3 0320 	rsble	r3, r3, #32
 8004ee0:	ea47 0003 	orrgt.w	r0, r7, r3
 8004ee4:	fa04 f003 	lslle.w	r0, r4, r3
 8004ee8:	f7fb fb14 	bl	8000514 <__aeabi_ui2d>
 8004eec:	2201      	movs	r2, #1
 8004eee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004ef2:	3e01      	subs	r6, #1
 8004ef4:	9214      	str	r2, [sp, #80]	@ 0x50
 8004ef6:	e777      	b.n	8004de8 <_dtoa_r+0x100>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e7b8      	b.n	8004e6e <_dtoa_r+0x186>
 8004efc:	9012      	str	r0, [sp, #72]	@ 0x48
 8004efe:	e7b7      	b.n	8004e70 <_dtoa_r+0x188>
 8004f00:	427b      	negs	r3, r7
 8004f02:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f04:	2300      	movs	r3, #0
 8004f06:	eba8 0807 	sub.w	r8, r8, r7
 8004f0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004f0c:	e7c4      	b.n	8004e98 <_dtoa_r+0x1b0>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	dc35      	bgt.n	8004f84 <_dtoa_r+0x29c>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	9307      	str	r3, [sp, #28]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	920e      	str	r2, [sp, #56]	@ 0x38
 8004f22:	e00b      	b.n	8004f3c <_dtoa_r+0x254>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e7f3      	b.n	8004f10 <_dtoa_r+0x228>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	3301      	adds	r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	9307      	str	r3, [sp, #28]
 8004f38:	bfb8      	it	lt
 8004f3a:	2301      	movlt	r3, #1
 8004f3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004f40:	2100      	movs	r1, #0
 8004f42:	2204      	movs	r2, #4
 8004f44:	f102 0514 	add.w	r5, r2, #20
 8004f48:	429d      	cmp	r5, r3
 8004f4a:	d91f      	bls.n	8004f8c <_dtoa_r+0x2a4>
 8004f4c:	6041      	str	r1, [r0, #4]
 8004f4e:	4658      	mov	r0, fp
 8004f50:	f000 fd8e 	bl	8005a70 <_Balloc>
 8004f54:	4682      	mov	sl, r0
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d13c      	bne.n	8004fd4 <_dtoa_r+0x2ec>
 8004f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc8 <_dtoa_r+0x2e0>)
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004f62:	e6d8      	b.n	8004d16 <_dtoa_r+0x2e>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e7e0      	b.n	8004f2a <_dtoa_r+0x242>
 8004f68:	2401      	movs	r4, #1
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004f70:	f04f 33ff 	mov.w	r3, #4294967295
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	9307      	str	r3, [sp, #28]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2312      	movs	r3, #18
 8004f7c:	e7d0      	b.n	8004f20 <_dtoa_r+0x238>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f82:	e7f5      	b.n	8004f70 <_dtoa_r+0x288>
 8004f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	9307      	str	r3, [sp, #28]
 8004f8a:	e7d7      	b.n	8004f3c <_dtoa_r+0x254>
 8004f8c:	3101      	adds	r1, #1
 8004f8e:	0052      	lsls	r2, r2, #1
 8004f90:	e7d8      	b.n	8004f44 <_dtoa_r+0x25c>
 8004f92:	bf00      	nop
 8004f94:	f3af 8000 	nop.w
 8004f98:	636f4361 	.word	0x636f4361
 8004f9c:	3fd287a7 	.word	0x3fd287a7
 8004fa0:	8b60c8b3 	.word	0x8b60c8b3
 8004fa4:	3fc68a28 	.word	0x3fc68a28
 8004fa8:	509f79fb 	.word	0x509f79fb
 8004fac:	3fd34413 	.word	0x3fd34413
 8004fb0:	080086c6 	.word	0x080086c6
 8004fb4:	080086dd 	.word	0x080086dd
 8004fb8:	7ff00000 	.word	0x7ff00000
 8004fbc:	08008691 	.word	0x08008691
 8004fc0:	3ff80000 	.word	0x3ff80000
 8004fc4:	080087d8 	.word	0x080087d8
 8004fc8:	08008735 	.word	0x08008735
 8004fcc:	080086c2 	.word	0x080086c2
 8004fd0:	08008690 	.word	0x08008690
 8004fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fd8:	6018      	str	r0, [r3, #0]
 8004fda:	9b07      	ldr	r3, [sp, #28]
 8004fdc:	2b0e      	cmp	r3, #14
 8004fde:	f200 80a4 	bhi.w	800512a <_dtoa_r+0x442>
 8004fe2:	2c00      	cmp	r4, #0
 8004fe4:	f000 80a1 	beq.w	800512a <_dtoa_r+0x442>
 8004fe8:	2f00      	cmp	r7, #0
 8004fea:	dd33      	ble.n	8005054 <_dtoa_r+0x36c>
 8004fec:	4bad      	ldr	r3, [pc, #692]	@ (80052a4 <_dtoa_r+0x5bc>)
 8004fee:	f007 020f 	and.w	r2, r7, #15
 8004ff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff6:	ed93 7b00 	vldr	d7, [r3]
 8004ffa:	05f8      	lsls	r0, r7, #23
 8004ffc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005000:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005004:	d516      	bpl.n	8005034 <_dtoa_r+0x34c>
 8005006:	4ba8      	ldr	r3, [pc, #672]	@ (80052a8 <_dtoa_r+0x5c0>)
 8005008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800500c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005010:	f7fb fc24 	bl	800085c <__aeabi_ddiv>
 8005014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005018:	f004 040f 	and.w	r4, r4, #15
 800501c:	2603      	movs	r6, #3
 800501e:	4da2      	ldr	r5, [pc, #648]	@ (80052a8 <_dtoa_r+0x5c0>)
 8005020:	b954      	cbnz	r4, 8005038 <_dtoa_r+0x350>
 8005022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800502a:	f7fb fc17 	bl	800085c <__aeabi_ddiv>
 800502e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005032:	e028      	b.n	8005086 <_dtoa_r+0x39e>
 8005034:	2602      	movs	r6, #2
 8005036:	e7f2      	b.n	800501e <_dtoa_r+0x336>
 8005038:	07e1      	lsls	r1, r4, #31
 800503a:	d508      	bpl.n	800504e <_dtoa_r+0x366>
 800503c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005040:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005044:	f7fb fae0 	bl	8000608 <__aeabi_dmul>
 8005048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800504c:	3601      	adds	r6, #1
 800504e:	1064      	asrs	r4, r4, #1
 8005050:	3508      	adds	r5, #8
 8005052:	e7e5      	b.n	8005020 <_dtoa_r+0x338>
 8005054:	f000 80d2 	beq.w	80051fc <_dtoa_r+0x514>
 8005058:	427c      	negs	r4, r7
 800505a:	4b92      	ldr	r3, [pc, #584]	@ (80052a4 <_dtoa_r+0x5bc>)
 800505c:	4d92      	ldr	r5, [pc, #584]	@ (80052a8 <_dtoa_r+0x5c0>)
 800505e:	f004 020f 	and.w	r2, r4, #15
 8005062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800506e:	f7fb facb 	bl	8000608 <__aeabi_dmul>
 8005072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005076:	1124      	asrs	r4, r4, #4
 8005078:	2300      	movs	r3, #0
 800507a:	2602      	movs	r6, #2
 800507c:	2c00      	cmp	r4, #0
 800507e:	f040 80b2 	bne.w	80051e6 <_dtoa_r+0x4fe>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1d3      	bne.n	800502e <_dtoa_r+0x346>
 8005086:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005088:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80b7 	beq.w	8005200 <_dtoa_r+0x518>
 8005092:	4b86      	ldr	r3, [pc, #536]	@ (80052ac <_dtoa_r+0x5c4>)
 8005094:	2200      	movs	r2, #0
 8005096:	4620      	mov	r0, r4
 8005098:	4629      	mov	r1, r5
 800509a:	f7fb fd27 	bl	8000aec <__aeabi_dcmplt>
 800509e:	2800      	cmp	r0, #0
 80050a0:	f000 80ae 	beq.w	8005200 <_dtoa_r+0x518>
 80050a4:	9b07      	ldr	r3, [sp, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80aa 	beq.w	8005200 <_dtoa_r+0x518>
 80050ac:	9b00      	ldr	r3, [sp, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	dd37      	ble.n	8005122 <_dtoa_r+0x43a>
 80050b2:	1e7b      	subs	r3, r7, #1
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	4620      	mov	r0, r4
 80050b8:	4b7d      	ldr	r3, [pc, #500]	@ (80052b0 <_dtoa_r+0x5c8>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	4629      	mov	r1, r5
 80050be:	f7fb faa3 	bl	8000608 <__aeabi_dmul>
 80050c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c6:	9c00      	ldr	r4, [sp, #0]
 80050c8:	3601      	adds	r6, #1
 80050ca:	4630      	mov	r0, r6
 80050cc:	f7fb fa32 	bl	8000534 <__aeabi_i2d>
 80050d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050d4:	f7fb fa98 	bl	8000608 <__aeabi_dmul>
 80050d8:	4b76      	ldr	r3, [pc, #472]	@ (80052b4 <_dtoa_r+0x5cc>)
 80050da:	2200      	movs	r2, #0
 80050dc:	f7fb f8de 	bl	800029c <__adddf3>
 80050e0:	4605      	mov	r5, r0
 80050e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80050e6:	2c00      	cmp	r4, #0
 80050e8:	f040 808d 	bne.w	8005206 <_dtoa_r+0x51e>
 80050ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050f0:	4b71      	ldr	r3, [pc, #452]	@ (80052b8 <_dtoa_r+0x5d0>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	f7fb f8d0 	bl	8000298 <__aeabi_dsub>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005100:	462a      	mov	r2, r5
 8005102:	4633      	mov	r3, r6
 8005104:	f7fb fd10 	bl	8000b28 <__aeabi_dcmpgt>
 8005108:	2800      	cmp	r0, #0
 800510a:	f040 828b 	bne.w	8005624 <_dtoa_r+0x93c>
 800510e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005112:	462a      	mov	r2, r5
 8005114:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005118:	f7fb fce8 	bl	8000aec <__aeabi_dcmplt>
 800511c:	2800      	cmp	r0, #0
 800511e:	f040 8128 	bne.w	8005372 <_dtoa_r+0x68a>
 8005122:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005126:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800512a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800512c:	2b00      	cmp	r3, #0
 800512e:	f2c0 815a 	blt.w	80053e6 <_dtoa_r+0x6fe>
 8005132:	2f0e      	cmp	r7, #14
 8005134:	f300 8157 	bgt.w	80053e6 <_dtoa_r+0x6fe>
 8005138:	4b5a      	ldr	r3, [pc, #360]	@ (80052a4 <_dtoa_r+0x5bc>)
 800513a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800513e:	ed93 7b00 	vldr	d7, [r3]
 8005142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	ed8d 7b00 	vstr	d7, [sp]
 800514a:	da03      	bge.n	8005154 <_dtoa_r+0x46c>
 800514c:	9b07      	ldr	r3, [sp, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f340 8101 	ble.w	8005356 <_dtoa_r+0x66e>
 8005154:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005158:	4656      	mov	r6, sl
 800515a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	f7fb fb7b 	bl	800085c <__aeabi_ddiv>
 8005166:	f7fb fcff 	bl	8000b68 <__aeabi_d2iz>
 800516a:	4680      	mov	r8, r0
 800516c:	f7fb f9e2 	bl	8000534 <__aeabi_i2d>
 8005170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005174:	f7fb fa48 	bl	8000608 <__aeabi_dmul>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4620      	mov	r0, r4
 800517e:	4629      	mov	r1, r5
 8005180:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005184:	f7fb f888 	bl	8000298 <__aeabi_dsub>
 8005188:	f806 4b01 	strb.w	r4, [r6], #1
 800518c:	9d07      	ldr	r5, [sp, #28]
 800518e:	eba6 040a 	sub.w	r4, r6, sl
 8005192:	42a5      	cmp	r5, r4
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	f040 8117 	bne.w	80053ca <_dtoa_r+0x6e2>
 800519c:	f7fb f87e 	bl	800029c <__adddf3>
 80051a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051a4:	4604      	mov	r4, r0
 80051a6:	460d      	mov	r5, r1
 80051a8:	f7fb fcbe 	bl	8000b28 <__aeabi_dcmpgt>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	f040 80f9 	bne.w	80053a4 <_dtoa_r+0x6bc>
 80051b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051b6:	4620      	mov	r0, r4
 80051b8:	4629      	mov	r1, r5
 80051ba:	f7fb fc8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80051be:	b118      	cbz	r0, 80051c8 <_dtoa_r+0x4e0>
 80051c0:	f018 0f01 	tst.w	r8, #1
 80051c4:	f040 80ee 	bne.w	80053a4 <_dtoa_r+0x6bc>
 80051c8:	4649      	mov	r1, r9
 80051ca:	4658      	mov	r0, fp
 80051cc:	f000 fc90 	bl	8005af0 <_Bfree>
 80051d0:	2300      	movs	r3, #0
 80051d2:	7033      	strb	r3, [r6, #0]
 80051d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80051d6:	3701      	adds	r7, #1
 80051d8:	601f      	str	r7, [r3, #0]
 80051da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 831d 	beq.w	800581c <_dtoa_r+0xb34>
 80051e2:	601e      	str	r6, [r3, #0]
 80051e4:	e31a      	b.n	800581c <_dtoa_r+0xb34>
 80051e6:	07e2      	lsls	r2, r4, #31
 80051e8:	d505      	bpl.n	80051f6 <_dtoa_r+0x50e>
 80051ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051ee:	f7fb fa0b 	bl	8000608 <__aeabi_dmul>
 80051f2:	3601      	adds	r6, #1
 80051f4:	2301      	movs	r3, #1
 80051f6:	1064      	asrs	r4, r4, #1
 80051f8:	3508      	adds	r5, #8
 80051fa:	e73f      	b.n	800507c <_dtoa_r+0x394>
 80051fc:	2602      	movs	r6, #2
 80051fe:	e742      	b.n	8005086 <_dtoa_r+0x39e>
 8005200:	9c07      	ldr	r4, [sp, #28]
 8005202:	9704      	str	r7, [sp, #16]
 8005204:	e761      	b.n	80050ca <_dtoa_r+0x3e2>
 8005206:	4b27      	ldr	r3, [pc, #156]	@ (80052a4 <_dtoa_r+0x5bc>)
 8005208:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800520a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800520e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005212:	4454      	add	r4, sl
 8005214:	2900      	cmp	r1, #0
 8005216:	d053      	beq.n	80052c0 <_dtoa_r+0x5d8>
 8005218:	4928      	ldr	r1, [pc, #160]	@ (80052bc <_dtoa_r+0x5d4>)
 800521a:	2000      	movs	r0, #0
 800521c:	f7fb fb1e 	bl	800085c <__aeabi_ddiv>
 8005220:	4633      	mov	r3, r6
 8005222:	462a      	mov	r2, r5
 8005224:	f7fb f838 	bl	8000298 <__aeabi_dsub>
 8005228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800522c:	4656      	mov	r6, sl
 800522e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005232:	f7fb fc99 	bl	8000b68 <__aeabi_d2iz>
 8005236:	4605      	mov	r5, r0
 8005238:	f7fb f97c 	bl	8000534 <__aeabi_i2d>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005244:	f7fb f828 	bl	8000298 <__aeabi_dsub>
 8005248:	3530      	adds	r5, #48	@ 0x30
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005252:	f806 5b01 	strb.w	r5, [r6], #1
 8005256:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800525a:	f7fb fc47 	bl	8000aec <__aeabi_dcmplt>
 800525e:	2800      	cmp	r0, #0
 8005260:	d171      	bne.n	8005346 <_dtoa_r+0x65e>
 8005262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005266:	4911      	ldr	r1, [pc, #68]	@ (80052ac <_dtoa_r+0x5c4>)
 8005268:	2000      	movs	r0, #0
 800526a:	f7fb f815 	bl	8000298 <__aeabi_dsub>
 800526e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005272:	f7fb fc3b 	bl	8000aec <__aeabi_dcmplt>
 8005276:	2800      	cmp	r0, #0
 8005278:	f040 8095 	bne.w	80053a6 <_dtoa_r+0x6be>
 800527c:	42a6      	cmp	r6, r4
 800527e:	f43f af50 	beq.w	8005122 <_dtoa_r+0x43a>
 8005282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005286:	4b0a      	ldr	r3, [pc, #40]	@ (80052b0 <_dtoa_r+0x5c8>)
 8005288:	2200      	movs	r2, #0
 800528a:	f7fb f9bd 	bl	8000608 <__aeabi_dmul>
 800528e:	4b08      	ldr	r3, [pc, #32]	@ (80052b0 <_dtoa_r+0x5c8>)
 8005290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005294:	2200      	movs	r2, #0
 8005296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800529a:	f7fb f9b5 	bl	8000608 <__aeabi_dmul>
 800529e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052a2:	e7c4      	b.n	800522e <_dtoa_r+0x546>
 80052a4:	080087d8 	.word	0x080087d8
 80052a8:	080087b0 	.word	0x080087b0
 80052ac:	3ff00000 	.word	0x3ff00000
 80052b0:	40240000 	.word	0x40240000
 80052b4:	401c0000 	.word	0x401c0000
 80052b8:	40140000 	.word	0x40140000
 80052bc:	3fe00000 	.word	0x3fe00000
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	f7fb f9a0 	bl	8000608 <__aeabi_dmul>
 80052c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80052ce:	4656      	mov	r6, sl
 80052d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052d4:	f7fb fc48 	bl	8000b68 <__aeabi_d2iz>
 80052d8:	4605      	mov	r5, r0
 80052da:	f7fb f92b 	bl	8000534 <__aeabi_i2d>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e6:	f7fa ffd7 	bl	8000298 <__aeabi_dsub>
 80052ea:	3530      	adds	r5, #48	@ 0x30
 80052ec:	f806 5b01 	strb.w	r5, [r6], #1
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	42a6      	cmp	r6, r4
 80052f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	d124      	bne.n	800534a <_dtoa_r+0x662>
 8005300:	4bac      	ldr	r3, [pc, #688]	@ (80055b4 <_dtoa_r+0x8cc>)
 8005302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005306:	f7fa ffc9 	bl	800029c <__adddf3>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005312:	f7fb fc09 	bl	8000b28 <__aeabi_dcmpgt>
 8005316:	2800      	cmp	r0, #0
 8005318:	d145      	bne.n	80053a6 <_dtoa_r+0x6be>
 800531a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800531e:	49a5      	ldr	r1, [pc, #660]	@ (80055b4 <_dtoa_r+0x8cc>)
 8005320:	2000      	movs	r0, #0
 8005322:	f7fa ffb9 	bl	8000298 <__aeabi_dsub>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800532e:	f7fb fbdd 	bl	8000aec <__aeabi_dcmplt>
 8005332:	2800      	cmp	r0, #0
 8005334:	f43f aef5 	beq.w	8005122 <_dtoa_r+0x43a>
 8005338:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800533a:	1e73      	subs	r3, r6, #1
 800533c:	9315      	str	r3, [sp, #84]	@ 0x54
 800533e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005342:	2b30      	cmp	r3, #48	@ 0x30
 8005344:	d0f8      	beq.n	8005338 <_dtoa_r+0x650>
 8005346:	9f04      	ldr	r7, [sp, #16]
 8005348:	e73e      	b.n	80051c8 <_dtoa_r+0x4e0>
 800534a:	4b9b      	ldr	r3, [pc, #620]	@ (80055b8 <_dtoa_r+0x8d0>)
 800534c:	f7fb f95c 	bl	8000608 <__aeabi_dmul>
 8005350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005354:	e7bc      	b.n	80052d0 <_dtoa_r+0x5e8>
 8005356:	d10c      	bne.n	8005372 <_dtoa_r+0x68a>
 8005358:	4b98      	ldr	r3, [pc, #608]	@ (80055bc <_dtoa_r+0x8d4>)
 800535a:	2200      	movs	r2, #0
 800535c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005360:	f7fb f952 	bl	8000608 <__aeabi_dmul>
 8005364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005368:	f7fb fbd4 	bl	8000b14 <__aeabi_dcmpge>
 800536c:	2800      	cmp	r0, #0
 800536e:	f000 8157 	beq.w	8005620 <_dtoa_r+0x938>
 8005372:	2400      	movs	r4, #0
 8005374:	4625      	mov	r5, r4
 8005376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005378:	43db      	mvns	r3, r3
 800537a:	9304      	str	r3, [sp, #16]
 800537c:	4656      	mov	r6, sl
 800537e:	2700      	movs	r7, #0
 8005380:	4621      	mov	r1, r4
 8005382:	4658      	mov	r0, fp
 8005384:	f000 fbb4 	bl	8005af0 <_Bfree>
 8005388:	2d00      	cmp	r5, #0
 800538a:	d0dc      	beq.n	8005346 <_dtoa_r+0x65e>
 800538c:	b12f      	cbz	r7, 800539a <_dtoa_r+0x6b2>
 800538e:	42af      	cmp	r7, r5
 8005390:	d003      	beq.n	800539a <_dtoa_r+0x6b2>
 8005392:	4639      	mov	r1, r7
 8005394:	4658      	mov	r0, fp
 8005396:	f000 fbab 	bl	8005af0 <_Bfree>
 800539a:	4629      	mov	r1, r5
 800539c:	4658      	mov	r0, fp
 800539e:	f000 fba7 	bl	8005af0 <_Bfree>
 80053a2:	e7d0      	b.n	8005346 <_dtoa_r+0x65e>
 80053a4:	9704      	str	r7, [sp, #16]
 80053a6:	4633      	mov	r3, r6
 80053a8:	461e      	mov	r6, r3
 80053aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053ae:	2a39      	cmp	r2, #57	@ 0x39
 80053b0:	d107      	bne.n	80053c2 <_dtoa_r+0x6da>
 80053b2:	459a      	cmp	sl, r3
 80053b4:	d1f8      	bne.n	80053a8 <_dtoa_r+0x6c0>
 80053b6:	9a04      	ldr	r2, [sp, #16]
 80053b8:	3201      	adds	r2, #1
 80053ba:	9204      	str	r2, [sp, #16]
 80053bc:	2230      	movs	r2, #48	@ 0x30
 80053be:	f88a 2000 	strb.w	r2, [sl]
 80053c2:	781a      	ldrb	r2, [r3, #0]
 80053c4:	3201      	adds	r2, #1
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e7bd      	b.n	8005346 <_dtoa_r+0x65e>
 80053ca:	4b7b      	ldr	r3, [pc, #492]	@ (80055b8 <_dtoa_r+0x8d0>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	f7fb f91b 	bl	8000608 <__aeabi_dmul>
 80053d2:	2200      	movs	r2, #0
 80053d4:	2300      	movs	r3, #0
 80053d6:	4604      	mov	r4, r0
 80053d8:	460d      	mov	r5, r1
 80053da:	f7fb fb7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80053de:	2800      	cmp	r0, #0
 80053e0:	f43f aebb 	beq.w	800515a <_dtoa_r+0x472>
 80053e4:	e6f0      	b.n	80051c8 <_dtoa_r+0x4e0>
 80053e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80053e8:	2a00      	cmp	r2, #0
 80053ea:	f000 80db 	beq.w	80055a4 <_dtoa_r+0x8bc>
 80053ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053f0:	2a01      	cmp	r2, #1
 80053f2:	f300 80bf 	bgt.w	8005574 <_dtoa_r+0x88c>
 80053f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	f000 80b7 	beq.w	800556c <_dtoa_r+0x884>
 80053fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005402:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005404:	4646      	mov	r6, r8
 8005406:	9a08      	ldr	r2, [sp, #32]
 8005408:	2101      	movs	r1, #1
 800540a:	441a      	add	r2, r3
 800540c:	4658      	mov	r0, fp
 800540e:	4498      	add	r8, r3
 8005410:	9208      	str	r2, [sp, #32]
 8005412:	f000 fc6b 	bl	8005cec <__i2b>
 8005416:	4605      	mov	r5, r0
 8005418:	b15e      	cbz	r6, 8005432 <_dtoa_r+0x74a>
 800541a:	9b08      	ldr	r3, [sp, #32]
 800541c:	2b00      	cmp	r3, #0
 800541e:	dd08      	ble.n	8005432 <_dtoa_r+0x74a>
 8005420:	42b3      	cmp	r3, r6
 8005422:	9a08      	ldr	r2, [sp, #32]
 8005424:	bfa8      	it	ge
 8005426:	4633      	movge	r3, r6
 8005428:	eba8 0803 	sub.w	r8, r8, r3
 800542c:	1af6      	subs	r6, r6, r3
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	9308      	str	r3, [sp, #32]
 8005432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005434:	b1f3      	cbz	r3, 8005474 <_dtoa_r+0x78c>
 8005436:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80b7 	beq.w	80055ac <_dtoa_r+0x8c4>
 800543e:	b18c      	cbz	r4, 8005464 <_dtoa_r+0x77c>
 8005440:	4629      	mov	r1, r5
 8005442:	4622      	mov	r2, r4
 8005444:	4658      	mov	r0, fp
 8005446:	f000 fd11 	bl	8005e6c <__pow5mult>
 800544a:	464a      	mov	r2, r9
 800544c:	4601      	mov	r1, r0
 800544e:	4605      	mov	r5, r0
 8005450:	4658      	mov	r0, fp
 8005452:	f000 fc61 	bl	8005d18 <__multiply>
 8005456:	4649      	mov	r1, r9
 8005458:	9004      	str	r0, [sp, #16]
 800545a:	4658      	mov	r0, fp
 800545c:	f000 fb48 	bl	8005af0 <_Bfree>
 8005460:	9b04      	ldr	r3, [sp, #16]
 8005462:	4699      	mov	r9, r3
 8005464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005466:	1b1a      	subs	r2, r3, r4
 8005468:	d004      	beq.n	8005474 <_dtoa_r+0x78c>
 800546a:	4649      	mov	r1, r9
 800546c:	4658      	mov	r0, fp
 800546e:	f000 fcfd 	bl	8005e6c <__pow5mult>
 8005472:	4681      	mov	r9, r0
 8005474:	2101      	movs	r1, #1
 8005476:	4658      	mov	r0, fp
 8005478:	f000 fc38 	bl	8005cec <__i2b>
 800547c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800547e:	4604      	mov	r4, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 81cf 	beq.w	8005824 <_dtoa_r+0xb3c>
 8005486:	461a      	mov	r2, r3
 8005488:	4601      	mov	r1, r0
 800548a:	4658      	mov	r0, fp
 800548c:	f000 fcee 	bl	8005e6c <__pow5mult>
 8005490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005492:	2b01      	cmp	r3, #1
 8005494:	4604      	mov	r4, r0
 8005496:	f300 8095 	bgt.w	80055c4 <_dtoa_r+0x8dc>
 800549a:	9b02      	ldr	r3, [sp, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f040 8087 	bne.w	80055b0 <_dtoa_r+0x8c8>
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f040 8089 	bne.w	80055c0 <_dtoa_r+0x8d8>
 80054ae:	9b03      	ldr	r3, [sp, #12]
 80054b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054b4:	0d1b      	lsrs	r3, r3, #20
 80054b6:	051b      	lsls	r3, r3, #20
 80054b8:	b12b      	cbz	r3, 80054c6 <_dtoa_r+0x7de>
 80054ba:	9b08      	ldr	r3, [sp, #32]
 80054bc:	3301      	adds	r3, #1
 80054be:	9308      	str	r3, [sp, #32]
 80054c0:	f108 0801 	add.w	r8, r8, #1
 80054c4:	2301      	movs	r3, #1
 80054c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80054c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 81b0 	beq.w	8005830 <_dtoa_r+0xb48>
 80054d0:	6923      	ldr	r3, [r4, #16]
 80054d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054d6:	6918      	ldr	r0, [r3, #16]
 80054d8:	f000 fbbc 	bl	8005c54 <__hi0bits>
 80054dc:	f1c0 0020 	rsb	r0, r0, #32
 80054e0:	9b08      	ldr	r3, [sp, #32]
 80054e2:	4418      	add	r0, r3
 80054e4:	f010 001f 	ands.w	r0, r0, #31
 80054e8:	d077      	beq.n	80055da <_dtoa_r+0x8f2>
 80054ea:	f1c0 0320 	rsb	r3, r0, #32
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	dd6b      	ble.n	80055ca <_dtoa_r+0x8e2>
 80054f2:	9b08      	ldr	r3, [sp, #32]
 80054f4:	f1c0 001c 	rsb	r0, r0, #28
 80054f8:	4403      	add	r3, r0
 80054fa:	4480      	add	r8, r0
 80054fc:	4406      	add	r6, r0
 80054fe:	9308      	str	r3, [sp, #32]
 8005500:	f1b8 0f00 	cmp.w	r8, #0
 8005504:	dd05      	ble.n	8005512 <_dtoa_r+0x82a>
 8005506:	4649      	mov	r1, r9
 8005508:	4642      	mov	r2, r8
 800550a:	4658      	mov	r0, fp
 800550c:	f000 fd08 	bl	8005f20 <__lshift>
 8005510:	4681      	mov	r9, r0
 8005512:	9b08      	ldr	r3, [sp, #32]
 8005514:	2b00      	cmp	r3, #0
 8005516:	dd05      	ble.n	8005524 <_dtoa_r+0x83c>
 8005518:	4621      	mov	r1, r4
 800551a:	461a      	mov	r2, r3
 800551c:	4658      	mov	r0, fp
 800551e:	f000 fcff 	bl	8005f20 <__lshift>
 8005522:	4604      	mov	r4, r0
 8005524:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005526:	2b00      	cmp	r3, #0
 8005528:	d059      	beq.n	80055de <_dtoa_r+0x8f6>
 800552a:	4621      	mov	r1, r4
 800552c:	4648      	mov	r0, r9
 800552e:	f000 fd63 	bl	8005ff8 <__mcmp>
 8005532:	2800      	cmp	r0, #0
 8005534:	da53      	bge.n	80055de <_dtoa_r+0x8f6>
 8005536:	1e7b      	subs	r3, r7, #1
 8005538:	9304      	str	r3, [sp, #16]
 800553a:	4649      	mov	r1, r9
 800553c:	2300      	movs	r3, #0
 800553e:	220a      	movs	r2, #10
 8005540:	4658      	mov	r0, fp
 8005542:	f000 faf7 	bl	8005b34 <__multadd>
 8005546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005548:	4681      	mov	r9, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8172 	beq.w	8005834 <_dtoa_r+0xb4c>
 8005550:	2300      	movs	r3, #0
 8005552:	4629      	mov	r1, r5
 8005554:	220a      	movs	r2, #10
 8005556:	4658      	mov	r0, fp
 8005558:	f000 faec 	bl	8005b34 <__multadd>
 800555c:	9b00      	ldr	r3, [sp, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	4605      	mov	r5, r0
 8005562:	dc67      	bgt.n	8005634 <_dtoa_r+0x94c>
 8005564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005566:	2b02      	cmp	r3, #2
 8005568:	dc41      	bgt.n	80055ee <_dtoa_r+0x906>
 800556a:	e063      	b.n	8005634 <_dtoa_r+0x94c>
 800556c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800556e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005572:	e746      	b.n	8005402 <_dtoa_r+0x71a>
 8005574:	9b07      	ldr	r3, [sp, #28]
 8005576:	1e5c      	subs	r4, r3, #1
 8005578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800557a:	42a3      	cmp	r3, r4
 800557c:	bfbf      	itttt	lt
 800557e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005580:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005582:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005584:	1ae3      	sublt	r3, r4, r3
 8005586:	bfb4      	ite	lt
 8005588:	18d2      	addlt	r2, r2, r3
 800558a:	1b1c      	subge	r4, r3, r4
 800558c:	9b07      	ldr	r3, [sp, #28]
 800558e:	bfbc      	itt	lt
 8005590:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005592:	2400      	movlt	r4, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	bfb5      	itete	lt
 8005598:	eba8 0603 	sublt.w	r6, r8, r3
 800559c:	9b07      	ldrge	r3, [sp, #28]
 800559e:	2300      	movlt	r3, #0
 80055a0:	4646      	movge	r6, r8
 80055a2:	e730      	b.n	8005406 <_dtoa_r+0x71e>
 80055a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80055a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80055a8:	4646      	mov	r6, r8
 80055aa:	e735      	b.n	8005418 <_dtoa_r+0x730>
 80055ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055ae:	e75c      	b.n	800546a <_dtoa_r+0x782>
 80055b0:	2300      	movs	r3, #0
 80055b2:	e788      	b.n	80054c6 <_dtoa_r+0x7de>
 80055b4:	3fe00000 	.word	0x3fe00000
 80055b8:	40240000 	.word	0x40240000
 80055bc:	40140000 	.word	0x40140000
 80055c0:	9b02      	ldr	r3, [sp, #8]
 80055c2:	e780      	b.n	80054c6 <_dtoa_r+0x7de>
 80055c4:	2300      	movs	r3, #0
 80055c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80055c8:	e782      	b.n	80054d0 <_dtoa_r+0x7e8>
 80055ca:	d099      	beq.n	8005500 <_dtoa_r+0x818>
 80055cc:	9a08      	ldr	r2, [sp, #32]
 80055ce:	331c      	adds	r3, #28
 80055d0:	441a      	add	r2, r3
 80055d2:	4498      	add	r8, r3
 80055d4:	441e      	add	r6, r3
 80055d6:	9208      	str	r2, [sp, #32]
 80055d8:	e792      	b.n	8005500 <_dtoa_r+0x818>
 80055da:	4603      	mov	r3, r0
 80055dc:	e7f6      	b.n	80055cc <_dtoa_r+0x8e4>
 80055de:	9b07      	ldr	r3, [sp, #28]
 80055e0:	9704      	str	r7, [sp, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	dc20      	bgt.n	8005628 <_dtoa_r+0x940>
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	dd1e      	ble.n	800562c <_dtoa_r+0x944>
 80055ee:	9b00      	ldr	r3, [sp, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f47f aec0 	bne.w	8005376 <_dtoa_r+0x68e>
 80055f6:	4621      	mov	r1, r4
 80055f8:	2205      	movs	r2, #5
 80055fa:	4658      	mov	r0, fp
 80055fc:	f000 fa9a 	bl	8005b34 <__multadd>
 8005600:	4601      	mov	r1, r0
 8005602:	4604      	mov	r4, r0
 8005604:	4648      	mov	r0, r9
 8005606:	f000 fcf7 	bl	8005ff8 <__mcmp>
 800560a:	2800      	cmp	r0, #0
 800560c:	f77f aeb3 	ble.w	8005376 <_dtoa_r+0x68e>
 8005610:	4656      	mov	r6, sl
 8005612:	2331      	movs	r3, #49	@ 0x31
 8005614:	f806 3b01 	strb.w	r3, [r6], #1
 8005618:	9b04      	ldr	r3, [sp, #16]
 800561a:	3301      	adds	r3, #1
 800561c:	9304      	str	r3, [sp, #16]
 800561e:	e6ae      	b.n	800537e <_dtoa_r+0x696>
 8005620:	9c07      	ldr	r4, [sp, #28]
 8005622:	9704      	str	r7, [sp, #16]
 8005624:	4625      	mov	r5, r4
 8005626:	e7f3      	b.n	8005610 <_dtoa_r+0x928>
 8005628:	9b07      	ldr	r3, [sp, #28]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8104 	beq.w	800583c <_dtoa_r+0xb54>
 8005634:	2e00      	cmp	r6, #0
 8005636:	dd05      	ble.n	8005644 <_dtoa_r+0x95c>
 8005638:	4629      	mov	r1, r5
 800563a:	4632      	mov	r2, r6
 800563c:	4658      	mov	r0, fp
 800563e:	f000 fc6f 	bl	8005f20 <__lshift>
 8005642:	4605      	mov	r5, r0
 8005644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d05a      	beq.n	8005700 <_dtoa_r+0xa18>
 800564a:	6869      	ldr	r1, [r5, #4]
 800564c:	4658      	mov	r0, fp
 800564e:	f000 fa0f 	bl	8005a70 <_Balloc>
 8005652:	4606      	mov	r6, r0
 8005654:	b928      	cbnz	r0, 8005662 <_dtoa_r+0x97a>
 8005656:	4b84      	ldr	r3, [pc, #528]	@ (8005868 <_dtoa_r+0xb80>)
 8005658:	4602      	mov	r2, r0
 800565a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800565e:	f7ff bb5a 	b.w	8004d16 <_dtoa_r+0x2e>
 8005662:	692a      	ldr	r2, [r5, #16]
 8005664:	3202      	adds	r2, #2
 8005666:	0092      	lsls	r2, r2, #2
 8005668:	f105 010c 	add.w	r1, r5, #12
 800566c:	300c      	adds	r0, #12
 800566e:	f002 f97f 	bl	8007970 <memcpy>
 8005672:	2201      	movs	r2, #1
 8005674:	4631      	mov	r1, r6
 8005676:	4658      	mov	r0, fp
 8005678:	f000 fc52 	bl	8005f20 <__lshift>
 800567c:	f10a 0301 	add.w	r3, sl, #1
 8005680:	9307      	str	r3, [sp, #28]
 8005682:	9b00      	ldr	r3, [sp, #0]
 8005684:	4453      	add	r3, sl
 8005686:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005688:	9b02      	ldr	r3, [sp, #8]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	462f      	mov	r7, r5
 8005690:	930a      	str	r3, [sp, #40]	@ 0x28
 8005692:	4605      	mov	r5, r0
 8005694:	9b07      	ldr	r3, [sp, #28]
 8005696:	4621      	mov	r1, r4
 8005698:	3b01      	subs	r3, #1
 800569a:	4648      	mov	r0, r9
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	f7ff fa99 	bl	8004bd4 <quorem>
 80056a2:	4639      	mov	r1, r7
 80056a4:	9002      	str	r0, [sp, #8]
 80056a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80056aa:	4648      	mov	r0, r9
 80056ac:	f000 fca4 	bl	8005ff8 <__mcmp>
 80056b0:	462a      	mov	r2, r5
 80056b2:	9008      	str	r0, [sp, #32]
 80056b4:	4621      	mov	r1, r4
 80056b6:	4658      	mov	r0, fp
 80056b8:	f000 fcba 	bl	8006030 <__mdiff>
 80056bc:	68c2      	ldr	r2, [r0, #12]
 80056be:	4606      	mov	r6, r0
 80056c0:	bb02      	cbnz	r2, 8005704 <_dtoa_r+0xa1c>
 80056c2:	4601      	mov	r1, r0
 80056c4:	4648      	mov	r0, r9
 80056c6:	f000 fc97 	bl	8005ff8 <__mcmp>
 80056ca:	4602      	mov	r2, r0
 80056cc:	4631      	mov	r1, r6
 80056ce:	4658      	mov	r0, fp
 80056d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80056d2:	f000 fa0d 	bl	8005af0 <_Bfree>
 80056d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056da:	9e07      	ldr	r6, [sp, #28]
 80056dc:	ea43 0102 	orr.w	r1, r3, r2
 80056e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056e2:	4319      	orrs	r1, r3
 80056e4:	d110      	bne.n	8005708 <_dtoa_r+0xa20>
 80056e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056ea:	d029      	beq.n	8005740 <_dtoa_r+0xa58>
 80056ec:	9b08      	ldr	r3, [sp, #32]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dd02      	ble.n	80056f8 <_dtoa_r+0xa10>
 80056f2:	9b02      	ldr	r3, [sp, #8]
 80056f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80056f8:	9b00      	ldr	r3, [sp, #0]
 80056fa:	f883 8000 	strb.w	r8, [r3]
 80056fe:	e63f      	b.n	8005380 <_dtoa_r+0x698>
 8005700:	4628      	mov	r0, r5
 8005702:	e7bb      	b.n	800567c <_dtoa_r+0x994>
 8005704:	2201      	movs	r2, #1
 8005706:	e7e1      	b.n	80056cc <_dtoa_r+0x9e4>
 8005708:	9b08      	ldr	r3, [sp, #32]
 800570a:	2b00      	cmp	r3, #0
 800570c:	db04      	blt.n	8005718 <_dtoa_r+0xa30>
 800570e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005710:	430b      	orrs	r3, r1
 8005712:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005714:	430b      	orrs	r3, r1
 8005716:	d120      	bne.n	800575a <_dtoa_r+0xa72>
 8005718:	2a00      	cmp	r2, #0
 800571a:	dded      	ble.n	80056f8 <_dtoa_r+0xa10>
 800571c:	4649      	mov	r1, r9
 800571e:	2201      	movs	r2, #1
 8005720:	4658      	mov	r0, fp
 8005722:	f000 fbfd 	bl	8005f20 <__lshift>
 8005726:	4621      	mov	r1, r4
 8005728:	4681      	mov	r9, r0
 800572a:	f000 fc65 	bl	8005ff8 <__mcmp>
 800572e:	2800      	cmp	r0, #0
 8005730:	dc03      	bgt.n	800573a <_dtoa_r+0xa52>
 8005732:	d1e1      	bne.n	80056f8 <_dtoa_r+0xa10>
 8005734:	f018 0f01 	tst.w	r8, #1
 8005738:	d0de      	beq.n	80056f8 <_dtoa_r+0xa10>
 800573a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800573e:	d1d8      	bne.n	80056f2 <_dtoa_r+0xa0a>
 8005740:	9a00      	ldr	r2, [sp, #0]
 8005742:	2339      	movs	r3, #57	@ 0x39
 8005744:	7013      	strb	r3, [r2, #0]
 8005746:	4633      	mov	r3, r6
 8005748:	461e      	mov	r6, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005750:	2a39      	cmp	r2, #57	@ 0x39
 8005752:	d052      	beq.n	80057fa <_dtoa_r+0xb12>
 8005754:	3201      	adds	r2, #1
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e612      	b.n	8005380 <_dtoa_r+0x698>
 800575a:	2a00      	cmp	r2, #0
 800575c:	dd07      	ble.n	800576e <_dtoa_r+0xa86>
 800575e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005762:	d0ed      	beq.n	8005740 <_dtoa_r+0xa58>
 8005764:	9a00      	ldr	r2, [sp, #0]
 8005766:	f108 0301 	add.w	r3, r8, #1
 800576a:	7013      	strb	r3, [r2, #0]
 800576c:	e608      	b.n	8005380 <_dtoa_r+0x698>
 800576e:	9b07      	ldr	r3, [sp, #28]
 8005770:	9a07      	ldr	r2, [sp, #28]
 8005772:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005778:	4293      	cmp	r3, r2
 800577a:	d028      	beq.n	80057ce <_dtoa_r+0xae6>
 800577c:	4649      	mov	r1, r9
 800577e:	2300      	movs	r3, #0
 8005780:	220a      	movs	r2, #10
 8005782:	4658      	mov	r0, fp
 8005784:	f000 f9d6 	bl	8005b34 <__multadd>
 8005788:	42af      	cmp	r7, r5
 800578a:	4681      	mov	r9, r0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	f04f 020a 	mov.w	r2, #10
 8005794:	4639      	mov	r1, r7
 8005796:	4658      	mov	r0, fp
 8005798:	d107      	bne.n	80057aa <_dtoa_r+0xac2>
 800579a:	f000 f9cb 	bl	8005b34 <__multadd>
 800579e:	4607      	mov	r7, r0
 80057a0:	4605      	mov	r5, r0
 80057a2:	9b07      	ldr	r3, [sp, #28]
 80057a4:	3301      	adds	r3, #1
 80057a6:	9307      	str	r3, [sp, #28]
 80057a8:	e774      	b.n	8005694 <_dtoa_r+0x9ac>
 80057aa:	f000 f9c3 	bl	8005b34 <__multadd>
 80057ae:	4629      	mov	r1, r5
 80057b0:	4607      	mov	r7, r0
 80057b2:	2300      	movs	r3, #0
 80057b4:	220a      	movs	r2, #10
 80057b6:	4658      	mov	r0, fp
 80057b8:	f000 f9bc 	bl	8005b34 <__multadd>
 80057bc:	4605      	mov	r5, r0
 80057be:	e7f0      	b.n	80057a2 <_dtoa_r+0xaba>
 80057c0:	9b00      	ldr	r3, [sp, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bfcc      	ite	gt
 80057c6:	461e      	movgt	r6, r3
 80057c8:	2601      	movle	r6, #1
 80057ca:	4456      	add	r6, sl
 80057cc:	2700      	movs	r7, #0
 80057ce:	4649      	mov	r1, r9
 80057d0:	2201      	movs	r2, #1
 80057d2:	4658      	mov	r0, fp
 80057d4:	f000 fba4 	bl	8005f20 <__lshift>
 80057d8:	4621      	mov	r1, r4
 80057da:	4681      	mov	r9, r0
 80057dc:	f000 fc0c 	bl	8005ff8 <__mcmp>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	dcb0      	bgt.n	8005746 <_dtoa_r+0xa5e>
 80057e4:	d102      	bne.n	80057ec <_dtoa_r+0xb04>
 80057e6:	f018 0f01 	tst.w	r8, #1
 80057ea:	d1ac      	bne.n	8005746 <_dtoa_r+0xa5e>
 80057ec:	4633      	mov	r3, r6
 80057ee:	461e      	mov	r6, r3
 80057f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057f4:	2a30      	cmp	r2, #48	@ 0x30
 80057f6:	d0fa      	beq.n	80057ee <_dtoa_r+0xb06>
 80057f8:	e5c2      	b.n	8005380 <_dtoa_r+0x698>
 80057fa:	459a      	cmp	sl, r3
 80057fc:	d1a4      	bne.n	8005748 <_dtoa_r+0xa60>
 80057fe:	9b04      	ldr	r3, [sp, #16]
 8005800:	3301      	adds	r3, #1
 8005802:	9304      	str	r3, [sp, #16]
 8005804:	2331      	movs	r3, #49	@ 0x31
 8005806:	f88a 3000 	strb.w	r3, [sl]
 800580a:	e5b9      	b.n	8005380 <_dtoa_r+0x698>
 800580c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800580e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800586c <_dtoa_r+0xb84>
 8005812:	b11b      	cbz	r3, 800581c <_dtoa_r+0xb34>
 8005814:	f10a 0308 	add.w	r3, sl, #8
 8005818:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	4650      	mov	r0, sl
 800581e:	b019      	add	sp, #100	@ 0x64
 8005820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005826:	2b01      	cmp	r3, #1
 8005828:	f77f ae37 	ble.w	800549a <_dtoa_r+0x7b2>
 800582c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800582e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005830:	2001      	movs	r0, #1
 8005832:	e655      	b.n	80054e0 <_dtoa_r+0x7f8>
 8005834:	9b00      	ldr	r3, [sp, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f77f aed6 	ble.w	80055e8 <_dtoa_r+0x900>
 800583c:	4656      	mov	r6, sl
 800583e:	4621      	mov	r1, r4
 8005840:	4648      	mov	r0, r9
 8005842:	f7ff f9c7 	bl	8004bd4 <quorem>
 8005846:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800584a:	f806 8b01 	strb.w	r8, [r6], #1
 800584e:	9b00      	ldr	r3, [sp, #0]
 8005850:	eba6 020a 	sub.w	r2, r6, sl
 8005854:	4293      	cmp	r3, r2
 8005856:	ddb3      	ble.n	80057c0 <_dtoa_r+0xad8>
 8005858:	4649      	mov	r1, r9
 800585a:	2300      	movs	r3, #0
 800585c:	220a      	movs	r2, #10
 800585e:	4658      	mov	r0, fp
 8005860:	f000 f968 	bl	8005b34 <__multadd>
 8005864:	4681      	mov	r9, r0
 8005866:	e7ea      	b.n	800583e <_dtoa_r+0xb56>
 8005868:	08008735 	.word	0x08008735
 800586c:	080086b9 	.word	0x080086b9

08005870 <_free_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4605      	mov	r5, r0
 8005874:	2900      	cmp	r1, #0
 8005876:	d041      	beq.n	80058fc <_free_r+0x8c>
 8005878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587c:	1f0c      	subs	r4, r1, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	bfb8      	it	lt
 8005882:	18e4      	addlt	r4, r4, r3
 8005884:	f000 f8e8 	bl	8005a58 <__malloc_lock>
 8005888:	4a1d      	ldr	r2, [pc, #116]	@ (8005900 <_free_r+0x90>)
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	b933      	cbnz	r3, 800589c <_free_r+0x2c>
 800588e:	6063      	str	r3, [r4, #4]
 8005890:	6014      	str	r4, [r2, #0]
 8005892:	4628      	mov	r0, r5
 8005894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005898:	f000 b8e4 	b.w	8005a64 <__malloc_unlock>
 800589c:	42a3      	cmp	r3, r4
 800589e:	d908      	bls.n	80058b2 <_free_r+0x42>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	1821      	adds	r1, r4, r0
 80058a4:	428b      	cmp	r3, r1
 80058a6:	bf01      	itttt	eq
 80058a8:	6819      	ldreq	r1, [r3, #0]
 80058aa:	685b      	ldreq	r3, [r3, #4]
 80058ac:	1809      	addeq	r1, r1, r0
 80058ae:	6021      	streq	r1, [r4, #0]
 80058b0:	e7ed      	b.n	800588e <_free_r+0x1e>
 80058b2:	461a      	mov	r2, r3
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b10b      	cbz	r3, 80058bc <_free_r+0x4c>
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d9fa      	bls.n	80058b2 <_free_r+0x42>
 80058bc:	6811      	ldr	r1, [r2, #0]
 80058be:	1850      	adds	r0, r2, r1
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d10b      	bne.n	80058dc <_free_r+0x6c>
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	4401      	add	r1, r0
 80058c8:	1850      	adds	r0, r2, r1
 80058ca:	4283      	cmp	r3, r0
 80058cc:	6011      	str	r1, [r2, #0]
 80058ce:	d1e0      	bne.n	8005892 <_free_r+0x22>
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	6053      	str	r3, [r2, #4]
 80058d6:	4408      	add	r0, r1
 80058d8:	6010      	str	r0, [r2, #0]
 80058da:	e7da      	b.n	8005892 <_free_r+0x22>
 80058dc:	d902      	bls.n	80058e4 <_free_r+0x74>
 80058de:	230c      	movs	r3, #12
 80058e0:	602b      	str	r3, [r5, #0]
 80058e2:	e7d6      	b.n	8005892 <_free_r+0x22>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	1821      	adds	r1, r4, r0
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf04      	itt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	bf04      	itt	eq
 80058f4:	1809      	addeq	r1, r1, r0
 80058f6:	6021      	streq	r1, [r4, #0]
 80058f8:	6054      	str	r4, [r2, #4]
 80058fa:	e7ca      	b.n	8005892 <_free_r+0x22>
 80058fc:	bd38      	pop	{r3, r4, r5, pc}
 80058fe:	bf00      	nop
 8005900:	20000694 	.word	0x20000694

08005904 <malloc>:
 8005904:	4b02      	ldr	r3, [pc, #8]	@ (8005910 <malloc+0xc>)
 8005906:	4601      	mov	r1, r0
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	f000 b825 	b.w	8005958 <_malloc_r>
 800590e:	bf00      	nop
 8005910:	20000018 	.word	0x20000018

08005914 <sbrk_aligned>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	4e0f      	ldr	r6, [pc, #60]	@ (8005954 <sbrk_aligned+0x40>)
 8005918:	460c      	mov	r4, r1
 800591a:	6831      	ldr	r1, [r6, #0]
 800591c:	4605      	mov	r5, r0
 800591e:	b911      	cbnz	r1, 8005926 <sbrk_aligned+0x12>
 8005920:	f002 f816 	bl	8007950 <_sbrk_r>
 8005924:	6030      	str	r0, [r6, #0]
 8005926:	4621      	mov	r1, r4
 8005928:	4628      	mov	r0, r5
 800592a:	f002 f811 	bl	8007950 <_sbrk_r>
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	d103      	bne.n	800593a <sbrk_aligned+0x26>
 8005932:	f04f 34ff 	mov.w	r4, #4294967295
 8005936:	4620      	mov	r0, r4
 8005938:	bd70      	pop	{r4, r5, r6, pc}
 800593a:	1cc4      	adds	r4, r0, #3
 800593c:	f024 0403 	bic.w	r4, r4, #3
 8005940:	42a0      	cmp	r0, r4
 8005942:	d0f8      	beq.n	8005936 <sbrk_aligned+0x22>
 8005944:	1a21      	subs	r1, r4, r0
 8005946:	4628      	mov	r0, r5
 8005948:	f002 f802 	bl	8007950 <_sbrk_r>
 800594c:	3001      	adds	r0, #1
 800594e:	d1f2      	bne.n	8005936 <sbrk_aligned+0x22>
 8005950:	e7ef      	b.n	8005932 <sbrk_aligned+0x1e>
 8005952:	bf00      	nop
 8005954:	20000690 	.word	0x20000690

08005958 <_malloc_r>:
 8005958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800595c:	1ccd      	adds	r5, r1, #3
 800595e:	f025 0503 	bic.w	r5, r5, #3
 8005962:	3508      	adds	r5, #8
 8005964:	2d0c      	cmp	r5, #12
 8005966:	bf38      	it	cc
 8005968:	250c      	movcc	r5, #12
 800596a:	2d00      	cmp	r5, #0
 800596c:	4606      	mov	r6, r0
 800596e:	db01      	blt.n	8005974 <_malloc_r+0x1c>
 8005970:	42a9      	cmp	r1, r5
 8005972:	d904      	bls.n	800597e <_malloc_r+0x26>
 8005974:	230c      	movs	r3, #12
 8005976:	6033      	str	r3, [r6, #0]
 8005978:	2000      	movs	r0, #0
 800597a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a54 <_malloc_r+0xfc>
 8005982:	f000 f869 	bl	8005a58 <__malloc_lock>
 8005986:	f8d8 3000 	ldr.w	r3, [r8]
 800598a:	461c      	mov	r4, r3
 800598c:	bb44      	cbnz	r4, 80059e0 <_malloc_r+0x88>
 800598e:	4629      	mov	r1, r5
 8005990:	4630      	mov	r0, r6
 8005992:	f7ff ffbf 	bl	8005914 <sbrk_aligned>
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	4604      	mov	r4, r0
 800599a:	d158      	bne.n	8005a4e <_malloc_r+0xf6>
 800599c:	f8d8 4000 	ldr.w	r4, [r8]
 80059a0:	4627      	mov	r7, r4
 80059a2:	2f00      	cmp	r7, #0
 80059a4:	d143      	bne.n	8005a2e <_malloc_r+0xd6>
 80059a6:	2c00      	cmp	r4, #0
 80059a8:	d04b      	beq.n	8005a42 <_malloc_r+0xea>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	4639      	mov	r1, r7
 80059ae:	4630      	mov	r0, r6
 80059b0:	eb04 0903 	add.w	r9, r4, r3
 80059b4:	f001 ffcc 	bl	8007950 <_sbrk_r>
 80059b8:	4581      	cmp	r9, r0
 80059ba:	d142      	bne.n	8005a42 <_malloc_r+0xea>
 80059bc:	6821      	ldr	r1, [r4, #0]
 80059be:	1a6d      	subs	r5, r5, r1
 80059c0:	4629      	mov	r1, r5
 80059c2:	4630      	mov	r0, r6
 80059c4:	f7ff ffa6 	bl	8005914 <sbrk_aligned>
 80059c8:	3001      	adds	r0, #1
 80059ca:	d03a      	beq.n	8005a42 <_malloc_r+0xea>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	442b      	add	r3, r5
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	f8d8 3000 	ldr.w	r3, [r8]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	bb62      	cbnz	r2, 8005a34 <_malloc_r+0xdc>
 80059da:	f8c8 7000 	str.w	r7, [r8]
 80059de:	e00f      	b.n	8005a00 <_malloc_r+0xa8>
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	1b52      	subs	r2, r2, r5
 80059e4:	d420      	bmi.n	8005a28 <_malloc_r+0xd0>
 80059e6:	2a0b      	cmp	r2, #11
 80059e8:	d917      	bls.n	8005a1a <_malloc_r+0xc2>
 80059ea:	1961      	adds	r1, r4, r5
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	6025      	str	r5, [r4, #0]
 80059f0:	bf18      	it	ne
 80059f2:	6059      	strne	r1, [r3, #4]
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	bf08      	it	eq
 80059f8:	f8c8 1000 	streq.w	r1, [r8]
 80059fc:	5162      	str	r2, [r4, r5]
 80059fe:	604b      	str	r3, [r1, #4]
 8005a00:	4630      	mov	r0, r6
 8005a02:	f000 f82f 	bl	8005a64 <__malloc_unlock>
 8005a06:	f104 000b 	add.w	r0, r4, #11
 8005a0a:	1d23      	adds	r3, r4, #4
 8005a0c:	f020 0007 	bic.w	r0, r0, #7
 8005a10:	1ac2      	subs	r2, r0, r3
 8005a12:	bf1c      	itt	ne
 8005a14:	1a1b      	subne	r3, r3, r0
 8005a16:	50a3      	strne	r3, [r4, r2]
 8005a18:	e7af      	b.n	800597a <_malloc_r+0x22>
 8005a1a:	6862      	ldr	r2, [r4, #4]
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	bf0c      	ite	eq
 8005a20:	f8c8 2000 	streq.w	r2, [r8]
 8005a24:	605a      	strne	r2, [r3, #4]
 8005a26:	e7eb      	b.n	8005a00 <_malloc_r+0xa8>
 8005a28:	4623      	mov	r3, r4
 8005a2a:	6864      	ldr	r4, [r4, #4]
 8005a2c:	e7ae      	b.n	800598c <_malloc_r+0x34>
 8005a2e:	463c      	mov	r4, r7
 8005a30:	687f      	ldr	r7, [r7, #4]
 8005a32:	e7b6      	b.n	80059a2 <_malloc_r+0x4a>
 8005a34:	461a      	mov	r2, r3
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d1fb      	bne.n	8005a34 <_malloc_r+0xdc>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	6053      	str	r3, [r2, #4]
 8005a40:	e7de      	b.n	8005a00 <_malloc_r+0xa8>
 8005a42:	230c      	movs	r3, #12
 8005a44:	6033      	str	r3, [r6, #0]
 8005a46:	4630      	mov	r0, r6
 8005a48:	f000 f80c 	bl	8005a64 <__malloc_unlock>
 8005a4c:	e794      	b.n	8005978 <_malloc_r+0x20>
 8005a4e:	6005      	str	r5, [r0, #0]
 8005a50:	e7d6      	b.n	8005a00 <_malloc_r+0xa8>
 8005a52:	bf00      	nop
 8005a54:	20000694 	.word	0x20000694

08005a58 <__malloc_lock>:
 8005a58:	4801      	ldr	r0, [pc, #4]	@ (8005a60 <__malloc_lock+0x8>)
 8005a5a:	f7ff b8b2 	b.w	8004bc2 <__retarget_lock_acquire_recursive>
 8005a5e:	bf00      	nop
 8005a60:	2000068c 	.word	0x2000068c

08005a64 <__malloc_unlock>:
 8005a64:	4801      	ldr	r0, [pc, #4]	@ (8005a6c <__malloc_unlock+0x8>)
 8005a66:	f7ff b8ad 	b.w	8004bc4 <__retarget_lock_release_recursive>
 8005a6a:	bf00      	nop
 8005a6c:	2000068c 	.word	0x2000068c

08005a70 <_Balloc>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	69c6      	ldr	r6, [r0, #28]
 8005a74:	4604      	mov	r4, r0
 8005a76:	460d      	mov	r5, r1
 8005a78:	b976      	cbnz	r6, 8005a98 <_Balloc+0x28>
 8005a7a:	2010      	movs	r0, #16
 8005a7c:	f7ff ff42 	bl	8005904 <malloc>
 8005a80:	4602      	mov	r2, r0
 8005a82:	61e0      	str	r0, [r4, #28]
 8005a84:	b920      	cbnz	r0, 8005a90 <_Balloc+0x20>
 8005a86:	4b18      	ldr	r3, [pc, #96]	@ (8005ae8 <_Balloc+0x78>)
 8005a88:	4818      	ldr	r0, [pc, #96]	@ (8005aec <_Balloc+0x7c>)
 8005a8a:	216b      	movs	r1, #107	@ 0x6b
 8005a8c:	f001 ff88 	bl	80079a0 <__assert_func>
 8005a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a94:	6006      	str	r6, [r0, #0]
 8005a96:	60c6      	str	r6, [r0, #12]
 8005a98:	69e6      	ldr	r6, [r4, #28]
 8005a9a:	68f3      	ldr	r3, [r6, #12]
 8005a9c:	b183      	cbz	r3, 8005ac0 <_Balloc+0x50>
 8005a9e:	69e3      	ldr	r3, [r4, #28]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aa6:	b9b8      	cbnz	r0, 8005ad8 <_Balloc+0x68>
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	fa01 f605 	lsl.w	r6, r1, r5
 8005aae:	1d72      	adds	r2, r6, #5
 8005ab0:	0092      	lsls	r2, r2, #2
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f001 ff92 	bl	80079dc <_calloc_r>
 8005ab8:	b160      	cbz	r0, 8005ad4 <_Balloc+0x64>
 8005aba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005abe:	e00e      	b.n	8005ade <_Balloc+0x6e>
 8005ac0:	2221      	movs	r2, #33	@ 0x21
 8005ac2:	2104      	movs	r1, #4
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f001 ff89 	bl	80079dc <_calloc_r>
 8005aca:	69e3      	ldr	r3, [r4, #28]
 8005acc:	60f0      	str	r0, [r6, #12]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e4      	bne.n	8005a9e <_Balloc+0x2e>
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	6802      	ldr	r2, [r0, #0]
 8005ada:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ae4:	e7f7      	b.n	8005ad6 <_Balloc+0x66>
 8005ae6:	bf00      	nop
 8005ae8:	080086c6 	.word	0x080086c6
 8005aec:	08008746 	.word	0x08008746

08005af0 <_Bfree>:
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	69c6      	ldr	r6, [r0, #28]
 8005af4:	4605      	mov	r5, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	b976      	cbnz	r6, 8005b18 <_Bfree+0x28>
 8005afa:	2010      	movs	r0, #16
 8005afc:	f7ff ff02 	bl	8005904 <malloc>
 8005b00:	4602      	mov	r2, r0
 8005b02:	61e8      	str	r0, [r5, #28]
 8005b04:	b920      	cbnz	r0, 8005b10 <_Bfree+0x20>
 8005b06:	4b09      	ldr	r3, [pc, #36]	@ (8005b2c <_Bfree+0x3c>)
 8005b08:	4809      	ldr	r0, [pc, #36]	@ (8005b30 <_Bfree+0x40>)
 8005b0a:	218f      	movs	r1, #143	@ 0x8f
 8005b0c:	f001 ff48 	bl	80079a0 <__assert_func>
 8005b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b14:	6006      	str	r6, [r0, #0]
 8005b16:	60c6      	str	r6, [r0, #12]
 8005b18:	b13c      	cbz	r4, 8005b2a <_Bfree+0x3a>
 8005b1a:	69eb      	ldr	r3, [r5, #28]
 8005b1c:	6862      	ldr	r2, [r4, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b24:	6021      	str	r1, [r4, #0]
 8005b26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	080086c6 	.word	0x080086c6
 8005b30:	08008746 	.word	0x08008746

08005b34 <__multadd>:
 8005b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b38:	690d      	ldr	r5, [r1, #16]
 8005b3a:	4607      	mov	r7, r0
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	461e      	mov	r6, r3
 8005b40:	f101 0c14 	add.w	ip, r1, #20
 8005b44:	2000      	movs	r0, #0
 8005b46:	f8dc 3000 	ldr.w	r3, [ip]
 8005b4a:	b299      	uxth	r1, r3
 8005b4c:	fb02 6101 	mla	r1, r2, r1, r6
 8005b50:	0c1e      	lsrs	r6, r3, #16
 8005b52:	0c0b      	lsrs	r3, r1, #16
 8005b54:	fb02 3306 	mla	r3, r2, r6, r3
 8005b58:	b289      	uxth	r1, r1
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b60:	4285      	cmp	r5, r0
 8005b62:	f84c 1b04 	str.w	r1, [ip], #4
 8005b66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b6a:	dcec      	bgt.n	8005b46 <__multadd+0x12>
 8005b6c:	b30e      	cbz	r6, 8005bb2 <__multadd+0x7e>
 8005b6e:	68a3      	ldr	r3, [r4, #8]
 8005b70:	42ab      	cmp	r3, r5
 8005b72:	dc19      	bgt.n	8005ba8 <__multadd+0x74>
 8005b74:	6861      	ldr	r1, [r4, #4]
 8005b76:	4638      	mov	r0, r7
 8005b78:	3101      	adds	r1, #1
 8005b7a:	f7ff ff79 	bl	8005a70 <_Balloc>
 8005b7e:	4680      	mov	r8, r0
 8005b80:	b928      	cbnz	r0, 8005b8e <__multadd+0x5a>
 8005b82:	4602      	mov	r2, r0
 8005b84:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb8 <__multadd+0x84>)
 8005b86:	480d      	ldr	r0, [pc, #52]	@ (8005bbc <__multadd+0x88>)
 8005b88:	21ba      	movs	r1, #186	@ 0xba
 8005b8a:	f001 ff09 	bl	80079a0 <__assert_func>
 8005b8e:	6922      	ldr	r2, [r4, #16]
 8005b90:	3202      	adds	r2, #2
 8005b92:	f104 010c 	add.w	r1, r4, #12
 8005b96:	0092      	lsls	r2, r2, #2
 8005b98:	300c      	adds	r0, #12
 8005b9a:	f001 fee9 	bl	8007970 <memcpy>
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	f7ff ffa5 	bl	8005af0 <_Bfree>
 8005ba6:	4644      	mov	r4, r8
 8005ba8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bac:	3501      	adds	r5, #1
 8005bae:	615e      	str	r6, [r3, #20]
 8005bb0:	6125      	str	r5, [r4, #16]
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb8:	08008735 	.word	0x08008735
 8005bbc:	08008746 	.word	0x08008746

08005bc0 <__s2b>:
 8005bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	4615      	mov	r5, r2
 8005bc8:	461f      	mov	r7, r3
 8005bca:	2209      	movs	r2, #9
 8005bcc:	3308      	adds	r3, #8
 8005bce:	4606      	mov	r6, r0
 8005bd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	db09      	blt.n	8005bf0 <__s2b+0x30>
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7ff ff47 	bl	8005a70 <_Balloc>
 8005be2:	b940      	cbnz	r0, 8005bf6 <__s2b+0x36>
 8005be4:	4602      	mov	r2, r0
 8005be6:	4b19      	ldr	r3, [pc, #100]	@ (8005c4c <__s2b+0x8c>)
 8005be8:	4819      	ldr	r0, [pc, #100]	@ (8005c50 <__s2b+0x90>)
 8005bea:	21d3      	movs	r1, #211	@ 0xd3
 8005bec:	f001 fed8 	bl	80079a0 <__assert_func>
 8005bf0:	0052      	lsls	r2, r2, #1
 8005bf2:	3101      	adds	r1, #1
 8005bf4:	e7f0      	b.n	8005bd8 <__s2b+0x18>
 8005bf6:	9b08      	ldr	r3, [sp, #32]
 8005bf8:	6143      	str	r3, [r0, #20]
 8005bfa:	2d09      	cmp	r5, #9
 8005bfc:	f04f 0301 	mov.w	r3, #1
 8005c00:	6103      	str	r3, [r0, #16]
 8005c02:	dd16      	ble.n	8005c32 <__s2b+0x72>
 8005c04:	f104 0909 	add.w	r9, r4, #9
 8005c08:	46c8      	mov	r8, r9
 8005c0a:	442c      	add	r4, r5
 8005c0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005c10:	4601      	mov	r1, r0
 8005c12:	3b30      	subs	r3, #48	@ 0x30
 8005c14:	220a      	movs	r2, #10
 8005c16:	4630      	mov	r0, r6
 8005c18:	f7ff ff8c 	bl	8005b34 <__multadd>
 8005c1c:	45a0      	cmp	r8, r4
 8005c1e:	d1f5      	bne.n	8005c0c <__s2b+0x4c>
 8005c20:	f1a5 0408 	sub.w	r4, r5, #8
 8005c24:	444c      	add	r4, r9
 8005c26:	1b2d      	subs	r5, r5, r4
 8005c28:	1963      	adds	r3, r4, r5
 8005c2a:	42bb      	cmp	r3, r7
 8005c2c:	db04      	blt.n	8005c38 <__s2b+0x78>
 8005c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c32:	340a      	adds	r4, #10
 8005c34:	2509      	movs	r5, #9
 8005c36:	e7f6      	b.n	8005c26 <__s2b+0x66>
 8005c38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c3c:	4601      	mov	r1, r0
 8005c3e:	3b30      	subs	r3, #48	@ 0x30
 8005c40:	220a      	movs	r2, #10
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff ff76 	bl	8005b34 <__multadd>
 8005c48:	e7ee      	b.n	8005c28 <__s2b+0x68>
 8005c4a:	bf00      	nop
 8005c4c:	08008735 	.word	0x08008735
 8005c50:	08008746 	.word	0x08008746

08005c54 <__hi0bits>:
 8005c54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005c58:	4603      	mov	r3, r0
 8005c5a:	bf36      	itet	cc
 8005c5c:	0403      	lslcc	r3, r0, #16
 8005c5e:	2000      	movcs	r0, #0
 8005c60:	2010      	movcc	r0, #16
 8005c62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c66:	bf3c      	itt	cc
 8005c68:	021b      	lslcc	r3, r3, #8
 8005c6a:	3008      	addcc	r0, #8
 8005c6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c70:	bf3c      	itt	cc
 8005c72:	011b      	lslcc	r3, r3, #4
 8005c74:	3004      	addcc	r0, #4
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c7a:	bf3c      	itt	cc
 8005c7c:	009b      	lslcc	r3, r3, #2
 8005c7e:	3002      	addcc	r0, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	db05      	blt.n	8005c90 <__hi0bits+0x3c>
 8005c84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005c88:	f100 0001 	add.w	r0, r0, #1
 8005c8c:	bf08      	it	eq
 8005c8e:	2020      	moveq	r0, #32
 8005c90:	4770      	bx	lr

08005c92 <__lo0bits>:
 8005c92:	6803      	ldr	r3, [r0, #0]
 8005c94:	4602      	mov	r2, r0
 8005c96:	f013 0007 	ands.w	r0, r3, #7
 8005c9a:	d00b      	beq.n	8005cb4 <__lo0bits+0x22>
 8005c9c:	07d9      	lsls	r1, r3, #31
 8005c9e:	d421      	bmi.n	8005ce4 <__lo0bits+0x52>
 8005ca0:	0798      	lsls	r0, r3, #30
 8005ca2:	bf49      	itett	mi
 8005ca4:	085b      	lsrmi	r3, r3, #1
 8005ca6:	089b      	lsrpl	r3, r3, #2
 8005ca8:	2001      	movmi	r0, #1
 8005caa:	6013      	strmi	r3, [r2, #0]
 8005cac:	bf5c      	itt	pl
 8005cae:	6013      	strpl	r3, [r2, #0]
 8005cb0:	2002      	movpl	r0, #2
 8005cb2:	4770      	bx	lr
 8005cb4:	b299      	uxth	r1, r3
 8005cb6:	b909      	cbnz	r1, 8005cbc <__lo0bits+0x2a>
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	2010      	movs	r0, #16
 8005cbc:	b2d9      	uxtb	r1, r3
 8005cbe:	b909      	cbnz	r1, 8005cc4 <__lo0bits+0x32>
 8005cc0:	3008      	adds	r0, #8
 8005cc2:	0a1b      	lsrs	r3, r3, #8
 8005cc4:	0719      	lsls	r1, r3, #28
 8005cc6:	bf04      	itt	eq
 8005cc8:	091b      	lsreq	r3, r3, #4
 8005cca:	3004      	addeq	r0, #4
 8005ccc:	0799      	lsls	r1, r3, #30
 8005cce:	bf04      	itt	eq
 8005cd0:	089b      	lsreq	r3, r3, #2
 8005cd2:	3002      	addeq	r0, #2
 8005cd4:	07d9      	lsls	r1, r3, #31
 8005cd6:	d403      	bmi.n	8005ce0 <__lo0bits+0x4e>
 8005cd8:	085b      	lsrs	r3, r3, #1
 8005cda:	f100 0001 	add.w	r0, r0, #1
 8005cde:	d003      	beq.n	8005ce8 <__lo0bits+0x56>
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	4770      	bx	lr
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	4770      	bx	lr
 8005ce8:	2020      	movs	r0, #32
 8005cea:	4770      	bx	lr

08005cec <__i2b>:
 8005cec:	b510      	push	{r4, lr}
 8005cee:	460c      	mov	r4, r1
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	f7ff febd 	bl	8005a70 <_Balloc>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	b928      	cbnz	r0, 8005d06 <__i2b+0x1a>
 8005cfa:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <__i2b+0x24>)
 8005cfc:	4805      	ldr	r0, [pc, #20]	@ (8005d14 <__i2b+0x28>)
 8005cfe:	f240 1145 	movw	r1, #325	@ 0x145
 8005d02:	f001 fe4d 	bl	80079a0 <__assert_func>
 8005d06:	2301      	movs	r3, #1
 8005d08:	6144      	str	r4, [r0, #20]
 8005d0a:	6103      	str	r3, [r0, #16]
 8005d0c:	bd10      	pop	{r4, pc}
 8005d0e:	bf00      	nop
 8005d10:	08008735 	.word	0x08008735
 8005d14:	08008746 	.word	0x08008746

08005d18 <__multiply>:
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	4614      	mov	r4, r2
 8005d1e:	690a      	ldr	r2, [r1, #16]
 8005d20:	6923      	ldr	r3, [r4, #16]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	bfa8      	it	ge
 8005d26:	4623      	movge	r3, r4
 8005d28:	460f      	mov	r7, r1
 8005d2a:	bfa4      	itt	ge
 8005d2c:	460c      	movge	r4, r1
 8005d2e:	461f      	movge	r7, r3
 8005d30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005d34:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005d38:	68a3      	ldr	r3, [r4, #8]
 8005d3a:	6861      	ldr	r1, [r4, #4]
 8005d3c:	eb0a 0609 	add.w	r6, sl, r9
 8005d40:	42b3      	cmp	r3, r6
 8005d42:	b085      	sub	sp, #20
 8005d44:	bfb8      	it	lt
 8005d46:	3101      	addlt	r1, #1
 8005d48:	f7ff fe92 	bl	8005a70 <_Balloc>
 8005d4c:	b930      	cbnz	r0, 8005d5c <__multiply+0x44>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	4b44      	ldr	r3, [pc, #272]	@ (8005e64 <__multiply+0x14c>)
 8005d52:	4845      	ldr	r0, [pc, #276]	@ (8005e68 <__multiply+0x150>)
 8005d54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005d58:	f001 fe22 	bl	80079a0 <__assert_func>
 8005d5c:	f100 0514 	add.w	r5, r0, #20
 8005d60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d64:	462b      	mov	r3, r5
 8005d66:	2200      	movs	r2, #0
 8005d68:	4543      	cmp	r3, r8
 8005d6a:	d321      	bcc.n	8005db0 <__multiply+0x98>
 8005d6c:	f107 0114 	add.w	r1, r7, #20
 8005d70:	f104 0214 	add.w	r2, r4, #20
 8005d74:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005d78:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005d7c:	9302      	str	r3, [sp, #8]
 8005d7e:	1b13      	subs	r3, r2, r4
 8005d80:	3b15      	subs	r3, #21
 8005d82:	f023 0303 	bic.w	r3, r3, #3
 8005d86:	3304      	adds	r3, #4
 8005d88:	f104 0715 	add.w	r7, r4, #21
 8005d8c:	42ba      	cmp	r2, r7
 8005d8e:	bf38      	it	cc
 8005d90:	2304      	movcc	r3, #4
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	9b02      	ldr	r3, [sp, #8]
 8005d96:	9103      	str	r1, [sp, #12]
 8005d98:	428b      	cmp	r3, r1
 8005d9a:	d80c      	bhi.n	8005db6 <__multiply+0x9e>
 8005d9c:	2e00      	cmp	r6, #0
 8005d9e:	dd03      	ble.n	8005da8 <__multiply+0x90>
 8005da0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d05b      	beq.n	8005e60 <__multiply+0x148>
 8005da8:	6106      	str	r6, [r0, #16]
 8005daa:	b005      	add	sp, #20
 8005dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	f843 2b04 	str.w	r2, [r3], #4
 8005db4:	e7d8      	b.n	8005d68 <__multiply+0x50>
 8005db6:	f8b1 a000 	ldrh.w	sl, [r1]
 8005dba:	f1ba 0f00 	cmp.w	sl, #0
 8005dbe:	d024      	beq.n	8005e0a <__multiply+0xf2>
 8005dc0:	f104 0e14 	add.w	lr, r4, #20
 8005dc4:	46a9      	mov	r9, r5
 8005dc6:	f04f 0c00 	mov.w	ip, #0
 8005dca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005dce:	f8d9 3000 	ldr.w	r3, [r9]
 8005dd2:	fa1f fb87 	uxth.w	fp, r7
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	fb0a 330b 	mla	r3, sl, fp, r3
 8005ddc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005de0:	f8d9 7000 	ldr.w	r7, [r9]
 8005de4:	4463      	add	r3, ip
 8005de6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005dea:	fb0a c70b 	mla	r7, sl, fp, ip
 8005dee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005df8:	4572      	cmp	r2, lr
 8005dfa:	f849 3b04 	str.w	r3, [r9], #4
 8005dfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005e02:	d8e2      	bhi.n	8005dca <__multiply+0xb2>
 8005e04:	9b01      	ldr	r3, [sp, #4]
 8005e06:	f845 c003 	str.w	ip, [r5, r3]
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005e10:	3104      	adds	r1, #4
 8005e12:	f1b9 0f00 	cmp.w	r9, #0
 8005e16:	d021      	beq.n	8005e5c <__multiply+0x144>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	f104 0c14 	add.w	ip, r4, #20
 8005e1e:	46ae      	mov	lr, r5
 8005e20:	f04f 0a00 	mov.w	sl, #0
 8005e24:	f8bc b000 	ldrh.w	fp, [ip]
 8005e28:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005e2c:	fb09 770b 	mla	r7, r9, fp, r7
 8005e30:	4457      	add	r7, sl
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005e38:	f84e 3b04 	str.w	r3, [lr], #4
 8005e3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e44:	f8be 3000 	ldrh.w	r3, [lr]
 8005e48:	fb09 330a 	mla	r3, r9, sl, r3
 8005e4c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005e50:	4562      	cmp	r2, ip
 8005e52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e56:	d8e5      	bhi.n	8005e24 <__multiply+0x10c>
 8005e58:	9f01      	ldr	r7, [sp, #4]
 8005e5a:	51eb      	str	r3, [r5, r7]
 8005e5c:	3504      	adds	r5, #4
 8005e5e:	e799      	b.n	8005d94 <__multiply+0x7c>
 8005e60:	3e01      	subs	r6, #1
 8005e62:	e79b      	b.n	8005d9c <__multiply+0x84>
 8005e64:	08008735 	.word	0x08008735
 8005e68:	08008746 	.word	0x08008746

08005e6c <__pow5mult>:
 8005e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e70:	4615      	mov	r5, r2
 8005e72:	f012 0203 	ands.w	r2, r2, #3
 8005e76:	4607      	mov	r7, r0
 8005e78:	460e      	mov	r6, r1
 8005e7a:	d007      	beq.n	8005e8c <__pow5mult+0x20>
 8005e7c:	4c25      	ldr	r4, [pc, #148]	@ (8005f14 <__pow5mult+0xa8>)
 8005e7e:	3a01      	subs	r2, #1
 8005e80:	2300      	movs	r3, #0
 8005e82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e86:	f7ff fe55 	bl	8005b34 <__multadd>
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	10ad      	asrs	r5, r5, #2
 8005e8e:	d03d      	beq.n	8005f0c <__pow5mult+0xa0>
 8005e90:	69fc      	ldr	r4, [r7, #28]
 8005e92:	b97c      	cbnz	r4, 8005eb4 <__pow5mult+0x48>
 8005e94:	2010      	movs	r0, #16
 8005e96:	f7ff fd35 	bl	8005904 <malloc>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	61f8      	str	r0, [r7, #28]
 8005e9e:	b928      	cbnz	r0, 8005eac <__pow5mult+0x40>
 8005ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f18 <__pow5mult+0xac>)
 8005ea2:	481e      	ldr	r0, [pc, #120]	@ (8005f1c <__pow5mult+0xb0>)
 8005ea4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005ea8:	f001 fd7a 	bl	80079a0 <__assert_func>
 8005eac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005eb0:	6004      	str	r4, [r0, #0]
 8005eb2:	60c4      	str	r4, [r0, #12]
 8005eb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005eb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ebc:	b94c      	cbnz	r4, 8005ed2 <__pow5mult+0x66>
 8005ebe:	f240 2171 	movw	r1, #625	@ 0x271
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f7ff ff12 	bl	8005cec <__i2b>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ece:	4604      	mov	r4, r0
 8005ed0:	6003      	str	r3, [r0, #0]
 8005ed2:	f04f 0900 	mov.w	r9, #0
 8005ed6:	07eb      	lsls	r3, r5, #31
 8005ed8:	d50a      	bpl.n	8005ef0 <__pow5mult+0x84>
 8005eda:	4631      	mov	r1, r6
 8005edc:	4622      	mov	r2, r4
 8005ede:	4638      	mov	r0, r7
 8005ee0:	f7ff ff1a 	bl	8005d18 <__multiply>
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4680      	mov	r8, r0
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f7ff fe01 	bl	8005af0 <_Bfree>
 8005eee:	4646      	mov	r6, r8
 8005ef0:	106d      	asrs	r5, r5, #1
 8005ef2:	d00b      	beq.n	8005f0c <__pow5mult+0xa0>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	b938      	cbnz	r0, 8005f08 <__pow5mult+0x9c>
 8005ef8:	4622      	mov	r2, r4
 8005efa:	4621      	mov	r1, r4
 8005efc:	4638      	mov	r0, r7
 8005efe:	f7ff ff0b 	bl	8005d18 <__multiply>
 8005f02:	6020      	str	r0, [r4, #0]
 8005f04:	f8c0 9000 	str.w	r9, [r0]
 8005f08:	4604      	mov	r4, r0
 8005f0a:	e7e4      	b.n	8005ed6 <__pow5mult+0x6a>
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f12:	bf00      	nop
 8005f14:	080087a0 	.word	0x080087a0
 8005f18:	080086c6 	.word	0x080086c6
 8005f1c:	08008746 	.word	0x08008746

08005f20 <__lshift>:
 8005f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f24:	460c      	mov	r4, r1
 8005f26:	6849      	ldr	r1, [r1, #4]
 8005f28:	6923      	ldr	r3, [r4, #16]
 8005f2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f2e:	68a3      	ldr	r3, [r4, #8]
 8005f30:	4607      	mov	r7, r0
 8005f32:	4691      	mov	r9, r2
 8005f34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f38:	f108 0601 	add.w	r6, r8, #1
 8005f3c:	42b3      	cmp	r3, r6
 8005f3e:	db0b      	blt.n	8005f58 <__lshift+0x38>
 8005f40:	4638      	mov	r0, r7
 8005f42:	f7ff fd95 	bl	8005a70 <_Balloc>
 8005f46:	4605      	mov	r5, r0
 8005f48:	b948      	cbnz	r0, 8005f5e <__lshift+0x3e>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	4b28      	ldr	r3, [pc, #160]	@ (8005ff0 <__lshift+0xd0>)
 8005f4e:	4829      	ldr	r0, [pc, #164]	@ (8005ff4 <__lshift+0xd4>)
 8005f50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005f54:	f001 fd24 	bl	80079a0 <__assert_func>
 8005f58:	3101      	adds	r1, #1
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	e7ee      	b.n	8005f3c <__lshift+0x1c>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f100 0114 	add.w	r1, r0, #20
 8005f64:	f100 0210 	add.w	r2, r0, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	4553      	cmp	r3, sl
 8005f6c:	db33      	blt.n	8005fd6 <__lshift+0xb6>
 8005f6e:	6920      	ldr	r0, [r4, #16]
 8005f70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f74:	f104 0314 	add.w	r3, r4, #20
 8005f78:	f019 091f 	ands.w	r9, r9, #31
 8005f7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f84:	d02b      	beq.n	8005fde <__lshift+0xbe>
 8005f86:	f1c9 0e20 	rsb	lr, r9, #32
 8005f8a:	468a      	mov	sl, r1
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	fa00 f009 	lsl.w	r0, r0, r9
 8005f94:	4310      	orrs	r0, r2
 8005f96:	f84a 0b04 	str.w	r0, [sl], #4
 8005f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f9e:	459c      	cmp	ip, r3
 8005fa0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005fa4:	d8f3      	bhi.n	8005f8e <__lshift+0x6e>
 8005fa6:	ebac 0304 	sub.w	r3, ip, r4
 8005faa:	3b15      	subs	r3, #21
 8005fac:	f023 0303 	bic.w	r3, r3, #3
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	f104 0015 	add.w	r0, r4, #21
 8005fb6:	4584      	cmp	ip, r0
 8005fb8:	bf38      	it	cc
 8005fba:	2304      	movcc	r3, #4
 8005fbc:	50ca      	str	r2, [r1, r3]
 8005fbe:	b10a      	cbz	r2, 8005fc4 <__lshift+0xa4>
 8005fc0:	f108 0602 	add.w	r6, r8, #2
 8005fc4:	3e01      	subs	r6, #1
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	612e      	str	r6, [r5, #16]
 8005fca:	4621      	mov	r1, r4
 8005fcc:	f7ff fd90 	bl	8005af0 <_Bfree>
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005fda:	3301      	adds	r3, #1
 8005fdc:	e7c5      	b.n	8005f6a <__lshift+0x4a>
 8005fde:	3904      	subs	r1, #4
 8005fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fe8:	459c      	cmp	ip, r3
 8005fea:	d8f9      	bhi.n	8005fe0 <__lshift+0xc0>
 8005fec:	e7ea      	b.n	8005fc4 <__lshift+0xa4>
 8005fee:	bf00      	nop
 8005ff0:	08008735 	.word	0x08008735
 8005ff4:	08008746 	.word	0x08008746

08005ff8 <__mcmp>:
 8005ff8:	690a      	ldr	r2, [r1, #16]
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	6900      	ldr	r0, [r0, #16]
 8005ffe:	1a80      	subs	r0, r0, r2
 8006000:	b530      	push	{r4, r5, lr}
 8006002:	d10e      	bne.n	8006022 <__mcmp+0x2a>
 8006004:	3314      	adds	r3, #20
 8006006:	3114      	adds	r1, #20
 8006008:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800600c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006010:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006014:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006018:	4295      	cmp	r5, r2
 800601a:	d003      	beq.n	8006024 <__mcmp+0x2c>
 800601c:	d205      	bcs.n	800602a <__mcmp+0x32>
 800601e:	f04f 30ff 	mov.w	r0, #4294967295
 8006022:	bd30      	pop	{r4, r5, pc}
 8006024:	42a3      	cmp	r3, r4
 8006026:	d3f3      	bcc.n	8006010 <__mcmp+0x18>
 8006028:	e7fb      	b.n	8006022 <__mcmp+0x2a>
 800602a:	2001      	movs	r0, #1
 800602c:	e7f9      	b.n	8006022 <__mcmp+0x2a>
	...

08006030 <__mdiff>:
 8006030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	4689      	mov	r9, r1
 8006036:	4606      	mov	r6, r0
 8006038:	4611      	mov	r1, r2
 800603a:	4648      	mov	r0, r9
 800603c:	4614      	mov	r4, r2
 800603e:	f7ff ffdb 	bl	8005ff8 <__mcmp>
 8006042:	1e05      	subs	r5, r0, #0
 8006044:	d112      	bne.n	800606c <__mdiff+0x3c>
 8006046:	4629      	mov	r1, r5
 8006048:	4630      	mov	r0, r6
 800604a:	f7ff fd11 	bl	8005a70 <_Balloc>
 800604e:	4602      	mov	r2, r0
 8006050:	b928      	cbnz	r0, 800605e <__mdiff+0x2e>
 8006052:	4b3f      	ldr	r3, [pc, #252]	@ (8006150 <__mdiff+0x120>)
 8006054:	f240 2137 	movw	r1, #567	@ 0x237
 8006058:	483e      	ldr	r0, [pc, #248]	@ (8006154 <__mdiff+0x124>)
 800605a:	f001 fca1 	bl	80079a0 <__assert_func>
 800605e:	2301      	movs	r3, #1
 8006060:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006064:	4610      	mov	r0, r2
 8006066:	b003      	add	sp, #12
 8006068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606c:	bfbc      	itt	lt
 800606e:	464b      	movlt	r3, r9
 8006070:	46a1      	movlt	r9, r4
 8006072:	4630      	mov	r0, r6
 8006074:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006078:	bfba      	itte	lt
 800607a:	461c      	movlt	r4, r3
 800607c:	2501      	movlt	r5, #1
 800607e:	2500      	movge	r5, #0
 8006080:	f7ff fcf6 	bl	8005a70 <_Balloc>
 8006084:	4602      	mov	r2, r0
 8006086:	b918      	cbnz	r0, 8006090 <__mdiff+0x60>
 8006088:	4b31      	ldr	r3, [pc, #196]	@ (8006150 <__mdiff+0x120>)
 800608a:	f240 2145 	movw	r1, #581	@ 0x245
 800608e:	e7e3      	b.n	8006058 <__mdiff+0x28>
 8006090:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006094:	6926      	ldr	r6, [r4, #16]
 8006096:	60c5      	str	r5, [r0, #12]
 8006098:	f109 0310 	add.w	r3, r9, #16
 800609c:	f109 0514 	add.w	r5, r9, #20
 80060a0:	f104 0e14 	add.w	lr, r4, #20
 80060a4:	f100 0b14 	add.w	fp, r0, #20
 80060a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80060ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	46d9      	mov	r9, fp
 80060b4:	f04f 0c00 	mov.w	ip, #0
 80060b8:	9b01      	ldr	r3, [sp, #4]
 80060ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80060be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	fa1f f38a 	uxth.w	r3, sl
 80060c8:	4619      	mov	r1, r3
 80060ca:	b283      	uxth	r3, r0
 80060cc:	1acb      	subs	r3, r1, r3
 80060ce:	0c00      	lsrs	r0, r0, #16
 80060d0:	4463      	add	r3, ip
 80060d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80060d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80060da:	b29b      	uxth	r3, r3
 80060dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80060e0:	4576      	cmp	r6, lr
 80060e2:	f849 3b04 	str.w	r3, [r9], #4
 80060e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80060ea:	d8e5      	bhi.n	80060b8 <__mdiff+0x88>
 80060ec:	1b33      	subs	r3, r6, r4
 80060ee:	3b15      	subs	r3, #21
 80060f0:	f023 0303 	bic.w	r3, r3, #3
 80060f4:	3415      	adds	r4, #21
 80060f6:	3304      	adds	r3, #4
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	bf38      	it	cc
 80060fc:	2304      	movcc	r3, #4
 80060fe:	441d      	add	r5, r3
 8006100:	445b      	add	r3, fp
 8006102:	461e      	mov	r6, r3
 8006104:	462c      	mov	r4, r5
 8006106:	4544      	cmp	r4, r8
 8006108:	d30e      	bcc.n	8006128 <__mdiff+0xf8>
 800610a:	f108 0103 	add.w	r1, r8, #3
 800610e:	1b49      	subs	r1, r1, r5
 8006110:	f021 0103 	bic.w	r1, r1, #3
 8006114:	3d03      	subs	r5, #3
 8006116:	45a8      	cmp	r8, r5
 8006118:	bf38      	it	cc
 800611a:	2100      	movcc	r1, #0
 800611c:	440b      	add	r3, r1
 800611e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006122:	b191      	cbz	r1, 800614a <__mdiff+0x11a>
 8006124:	6117      	str	r7, [r2, #16]
 8006126:	e79d      	b.n	8006064 <__mdiff+0x34>
 8006128:	f854 1b04 	ldr.w	r1, [r4], #4
 800612c:	46e6      	mov	lr, ip
 800612e:	0c08      	lsrs	r0, r1, #16
 8006130:	fa1c fc81 	uxtah	ip, ip, r1
 8006134:	4471      	add	r1, lr
 8006136:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800613a:	b289      	uxth	r1, r1
 800613c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006140:	f846 1b04 	str.w	r1, [r6], #4
 8006144:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006148:	e7dd      	b.n	8006106 <__mdiff+0xd6>
 800614a:	3f01      	subs	r7, #1
 800614c:	e7e7      	b.n	800611e <__mdiff+0xee>
 800614e:	bf00      	nop
 8006150:	08008735 	.word	0x08008735
 8006154:	08008746 	.word	0x08008746

08006158 <__ulp>:
 8006158:	b082      	sub	sp, #8
 800615a:	ed8d 0b00 	vstr	d0, [sp]
 800615e:	9a01      	ldr	r2, [sp, #4]
 8006160:	4b0f      	ldr	r3, [pc, #60]	@ (80061a0 <__ulp+0x48>)
 8006162:	4013      	ands	r3, r2
 8006164:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006168:	2b00      	cmp	r3, #0
 800616a:	dc08      	bgt.n	800617e <__ulp+0x26>
 800616c:	425b      	negs	r3, r3
 800616e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006172:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006176:	da04      	bge.n	8006182 <__ulp+0x2a>
 8006178:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800617c:	4113      	asrs	r3, r2
 800617e:	2200      	movs	r2, #0
 8006180:	e008      	b.n	8006194 <__ulp+0x3c>
 8006182:	f1a2 0314 	sub.w	r3, r2, #20
 8006186:	2b1e      	cmp	r3, #30
 8006188:	bfda      	itte	le
 800618a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800618e:	40da      	lsrle	r2, r3
 8006190:	2201      	movgt	r2, #1
 8006192:	2300      	movs	r3, #0
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	ec41 0b10 	vmov	d0, r0, r1
 800619c:	b002      	add	sp, #8
 800619e:	4770      	bx	lr
 80061a0:	7ff00000 	.word	0x7ff00000

080061a4 <__b2d>:
 80061a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a8:	6906      	ldr	r6, [r0, #16]
 80061aa:	f100 0814 	add.w	r8, r0, #20
 80061ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80061b2:	1f37      	subs	r7, r6, #4
 80061b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80061b8:	4610      	mov	r0, r2
 80061ba:	f7ff fd4b 	bl	8005c54 <__hi0bits>
 80061be:	f1c0 0320 	rsb	r3, r0, #32
 80061c2:	280a      	cmp	r0, #10
 80061c4:	600b      	str	r3, [r1, #0]
 80061c6:	491b      	ldr	r1, [pc, #108]	@ (8006234 <__b2d+0x90>)
 80061c8:	dc15      	bgt.n	80061f6 <__b2d+0x52>
 80061ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80061ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80061d2:	45b8      	cmp	r8, r7
 80061d4:	ea43 0501 	orr.w	r5, r3, r1
 80061d8:	bf34      	ite	cc
 80061da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80061de:	2300      	movcs	r3, #0
 80061e0:	3015      	adds	r0, #21
 80061e2:	fa02 f000 	lsl.w	r0, r2, r0
 80061e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80061ea:	4303      	orrs	r3, r0
 80061ec:	461c      	mov	r4, r3
 80061ee:	ec45 4b10 	vmov	d0, r4, r5
 80061f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f6:	45b8      	cmp	r8, r7
 80061f8:	bf3a      	itte	cc
 80061fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80061fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8006202:	2300      	movcs	r3, #0
 8006204:	380b      	subs	r0, #11
 8006206:	d012      	beq.n	800622e <__b2d+0x8a>
 8006208:	f1c0 0120 	rsb	r1, r0, #32
 800620c:	fa23 f401 	lsr.w	r4, r3, r1
 8006210:	4082      	lsls	r2, r0
 8006212:	4322      	orrs	r2, r4
 8006214:	4547      	cmp	r7, r8
 8006216:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800621a:	bf8c      	ite	hi
 800621c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006220:	2200      	movls	r2, #0
 8006222:	4083      	lsls	r3, r0
 8006224:	40ca      	lsrs	r2, r1
 8006226:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800622a:	4313      	orrs	r3, r2
 800622c:	e7de      	b.n	80061ec <__b2d+0x48>
 800622e:	ea42 0501 	orr.w	r5, r2, r1
 8006232:	e7db      	b.n	80061ec <__b2d+0x48>
 8006234:	3ff00000 	.word	0x3ff00000

08006238 <__d2b>:
 8006238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800623c:	460f      	mov	r7, r1
 800623e:	2101      	movs	r1, #1
 8006240:	ec59 8b10 	vmov	r8, r9, d0
 8006244:	4616      	mov	r6, r2
 8006246:	f7ff fc13 	bl	8005a70 <_Balloc>
 800624a:	4604      	mov	r4, r0
 800624c:	b930      	cbnz	r0, 800625c <__d2b+0x24>
 800624e:	4602      	mov	r2, r0
 8006250:	4b23      	ldr	r3, [pc, #140]	@ (80062e0 <__d2b+0xa8>)
 8006252:	4824      	ldr	r0, [pc, #144]	@ (80062e4 <__d2b+0xac>)
 8006254:	f240 310f 	movw	r1, #783	@ 0x30f
 8006258:	f001 fba2 	bl	80079a0 <__assert_func>
 800625c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006264:	b10d      	cbz	r5, 800626a <__d2b+0x32>
 8006266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800626a:	9301      	str	r3, [sp, #4]
 800626c:	f1b8 0300 	subs.w	r3, r8, #0
 8006270:	d023      	beq.n	80062ba <__d2b+0x82>
 8006272:	4668      	mov	r0, sp
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	f7ff fd0c 	bl	8005c92 <__lo0bits>
 800627a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800627e:	b1d0      	cbz	r0, 80062b6 <__d2b+0x7e>
 8006280:	f1c0 0320 	rsb	r3, r0, #32
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	430b      	orrs	r3, r1
 800628a:	40c2      	lsrs	r2, r0
 800628c:	6163      	str	r3, [r4, #20]
 800628e:	9201      	str	r2, [sp, #4]
 8006290:	9b01      	ldr	r3, [sp, #4]
 8006292:	61a3      	str	r3, [r4, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	bf0c      	ite	eq
 8006298:	2201      	moveq	r2, #1
 800629a:	2202      	movne	r2, #2
 800629c:	6122      	str	r2, [r4, #16]
 800629e:	b1a5      	cbz	r5, 80062ca <__d2b+0x92>
 80062a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80062a4:	4405      	add	r5, r0
 80062a6:	603d      	str	r5, [r7, #0]
 80062a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80062ac:	6030      	str	r0, [r6, #0]
 80062ae:	4620      	mov	r0, r4
 80062b0:	b003      	add	sp, #12
 80062b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062b6:	6161      	str	r1, [r4, #20]
 80062b8:	e7ea      	b.n	8006290 <__d2b+0x58>
 80062ba:	a801      	add	r0, sp, #4
 80062bc:	f7ff fce9 	bl	8005c92 <__lo0bits>
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	6163      	str	r3, [r4, #20]
 80062c4:	3020      	adds	r0, #32
 80062c6:	2201      	movs	r2, #1
 80062c8:	e7e8      	b.n	800629c <__d2b+0x64>
 80062ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80062d2:	6038      	str	r0, [r7, #0]
 80062d4:	6918      	ldr	r0, [r3, #16]
 80062d6:	f7ff fcbd 	bl	8005c54 <__hi0bits>
 80062da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062de:	e7e5      	b.n	80062ac <__d2b+0x74>
 80062e0:	08008735 	.word	0x08008735
 80062e4:	08008746 	.word	0x08008746

080062e8 <__ratio>:
 80062e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ec:	b085      	sub	sp, #20
 80062ee:	e9cd 1000 	strd	r1, r0, [sp]
 80062f2:	a902      	add	r1, sp, #8
 80062f4:	f7ff ff56 	bl	80061a4 <__b2d>
 80062f8:	9800      	ldr	r0, [sp, #0]
 80062fa:	a903      	add	r1, sp, #12
 80062fc:	ec55 4b10 	vmov	r4, r5, d0
 8006300:	f7ff ff50 	bl	80061a4 <__b2d>
 8006304:	9b01      	ldr	r3, [sp, #4]
 8006306:	6919      	ldr	r1, [r3, #16]
 8006308:	9b00      	ldr	r3, [sp, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	1ac9      	subs	r1, r1, r3
 800630e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	ec5b ab10 	vmov	sl, fp, d0
 8006318:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800631c:	2b00      	cmp	r3, #0
 800631e:	bfce      	itee	gt
 8006320:	462a      	movgt	r2, r5
 8006322:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006326:	465a      	movle	r2, fp
 8006328:	462f      	mov	r7, r5
 800632a:	46d9      	mov	r9, fp
 800632c:	bfcc      	ite	gt
 800632e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006332:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006336:	464b      	mov	r3, r9
 8006338:	4652      	mov	r2, sl
 800633a:	4620      	mov	r0, r4
 800633c:	4639      	mov	r1, r7
 800633e:	f7fa fa8d 	bl	800085c <__aeabi_ddiv>
 8006342:	ec41 0b10 	vmov	d0, r0, r1
 8006346:	b005      	add	sp, #20
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800634c <__copybits>:
 800634c:	3901      	subs	r1, #1
 800634e:	b570      	push	{r4, r5, r6, lr}
 8006350:	1149      	asrs	r1, r1, #5
 8006352:	6914      	ldr	r4, [r2, #16]
 8006354:	3101      	adds	r1, #1
 8006356:	f102 0314 	add.w	r3, r2, #20
 800635a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800635e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006362:	1f05      	subs	r5, r0, #4
 8006364:	42a3      	cmp	r3, r4
 8006366:	d30c      	bcc.n	8006382 <__copybits+0x36>
 8006368:	1aa3      	subs	r3, r4, r2
 800636a:	3b11      	subs	r3, #17
 800636c:	f023 0303 	bic.w	r3, r3, #3
 8006370:	3211      	adds	r2, #17
 8006372:	42a2      	cmp	r2, r4
 8006374:	bf88      	it	hi
 8006376:	2300      	movhi	r3, #0
 8006378:	4418      	add	r0, r3
 800637a:	2300      	movs	r3, #0
 800637c:	4288      	cmp	r0, r1
 800637e:	d305      	bcc.n	800638c <__copybits+0x40>
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	f853 6b04 	ldr.w	r6, [r3], #4
 8006386:	f845 6f04 	str.w	r6, [r5, #4]!
 800638a:	e7eb      	b.n	8006364 <__copybits+0x18>
 800638c:	f840 3b04 	str.w	r3, [r0], #4
 8006390:	e7f4      	b.n	800637c <__copybits+0x30>

08006392 <__any_on>:
 8006392:	f100 0214 	add.w	r2, r0, #20
 8006396:	6900      	ldr	r0, [r0, #16]
 8006398:	114b      	asrs	r3, r1, #5
 800639a:	4298      	cmp	r0, r3
 800639c:	b510      	push	{r4, lr}
 800639e:	db11      	blt.n	80063c4 <__any_on+0x32>
 80063a0:	dd0a      	ble.n	80063b8 <__any_on+0x26>
 80063a2:	f011 011f 	ands.w	r1, r1, #31
 80063a6:	d007      	beq.n	80063b8 <__any_on+0x26>
 80063a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80063ac:	fa24 f001 	lsr.w	r0, r4, r1
 80063b0:	fa00 f101 	lsl.w	r1, r0, r1
 80063b4:	428c      	cmp	r4, r1
 80063b6:	d10b      	bne.n	80063d0 <__any_on+0x3e>
 80063b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80063bc:	4293      	cmp	r3, r2
 80063be:	d803      	bhi.n	80063c8 <__any_on+0x36>
 80063c0:	2000      	movs	r0, #0
 80063c2:	bd10      	pop	{r4, pc}
 80063c4:	4603      	mov	r3, r0
 80063c6:	e7f7      	b.n	80063b8 <__any_on+0x26>
 80063c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063cc:	2900      	cmp	r1, #0
 80063ce:	d0f5      	beq.n	80063bc <__any_on+0x2a>
 80063d0:	2001      	movs	r0, #1
 80063d2:	e7f6      	b.n	80063c2 <__any_on+0x30>

080063d4 <sulp>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	4604      	mov	r4, r0
 80063d8:	460d      	mov	r5, r1
 80063da:	ec45 4b10 	vmov	d0, r4, r5
 80063de:	4616      	mov	r6, r2
 80063e0:	f7ff feba 	bl	8006158 <__ulp>
 80063e4:	ec51 0b10 	vmov	r0, r1, d0
 80063e8:	b17e      	cbz	r6, 800640a <sulp+0x36>
 80063ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80063ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dd09      	ble.n	800640a <sulp+0x36>
 80063f6:	051b      	lsls	r3, r3, #20
 80063f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80063fc:	2400      	movs	r4, #0
 80063fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006402:	4622      	mov	r2, r4
 8006404:	462b      	mov	r3, r5
 8006406:	f7fa f8ff 	bl	8000608 <__aeabi_dmul>
 800640a:	ec41 0b10 	vmov	d0, r0, r1
 800640e:	bd70      	pop	{r4, r5, r6, pc}

08006410 <_strtod_l>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	b09f      	sub	sp, #124	@ 0x7c
 8006416:	460c      	mov	r4, r1
 8006418:	9217      	str	r2, [sp, #92]	@ 0x5c
 800641a:	2200      	movs	r2, #0
 800641c:	921a      	str	r2, [sp, #104]	@ 0x68
 800641e:	9005      	str	r0, [sp, #20]
 8006420:	f04f 0a00 	mov.w	sl, #0
 8006424:	f04f 0b00 	mov.w	fp, #0
 8006428:	460a      	mov	r2, r1
 800642a:	9219      	str	r2, [sp, #100]	@ 0x64
 800642c:	7811      	ldrb	r1, [r2, #0]
 800642e:	292b      	cmp	r1, #43	@ 0x2b
 8006430:	d04a      	beq.n	80064c8 <_strtod_l+0xb8>
 8006432:	d838      	bhi.n	80064a6 <_strtod_l+0x96>
 8006434:	290d      	cmp	r1, #13
 8006436:	d832      	bhi.n	800649e <_strtod_l+0x8e>
 8006438:	2908      	cmp	r1, #8
 800643a:	d832      	bhi.n	80064a2 <_strtod_l+0x92>
 800643c:	2900      	cmp	r1, #0
 800643e:	d03b      	beq.n	80064b8 <_strtod_l+0xa8>
 8006440:	2200      	movs	r2, #0
 8006442:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006444:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006446:	782a      	ldrb	r2, [r5, #0]
 8006448:	2a30      	cmp	r2, #48	@ 0x30
 800644a:	f040 80b3 	bne.w	80065b4 <_strtod_l+0x1a4>
 800644e:	786a      	ldrb	r2, [r5, #1]
 8006450:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006454:	2a58      	cmp	r2, #88	@ 0x58
 8006456:	d16e      	bne.n	8006536 <_strtod_l+0x126>
 8006458:	9302      	str	r3, [sp, #8]
 800645a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	4a8e      	ldr	r2, [pc, #568]	@ (800669c <_strtod_l+0x28c>)
 8006464:	9805      	ldr	r0, [sp, #20]
 8006466:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006468:	a919      	add	r1, sp, #100	@ 0x64
 800646a:	f001 fb33 	bl	8007ad4 <__gethex>
 800646e:	f010 060f 	ands.w	r6, r0, #15
 8006472:	4604      	mov	r4, r0
 8006474:	d005      	beq.n	8006482 <_strtod_l+0x72>
 8006476:	2e06      	cmp	r6, #6
 8006478:	d128      	bne.n	80064cc <_strtod_l+0xbc>
 800647a:	3501      	adds	r5, #1
 800647c:	2300      	movs	r3, #0
 800647e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006482:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 858e 	bne.w	8006fa6 <_strtod_l+0xb96>
 800648a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800648c:	b1cb      	cbz	r3, 80064c2 <_strtod_l+0xb2>
 800648e:	4652      	mov	r2, sl
 8006490:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006494:	ec43 2b10 	vmov	d0, r2, r3
 8006498:	b01f      	add	sp, #124	@ 0x7c
 800649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649e:	2920      	cmp	r1, #32
 80064a0:	d1ce      	bne.n	8006440 <_strtod_l+0x30>
 80064a2:	3201      	adds	r2, #1
 80064a4:	e7c1      	b.n	800642a <_strtod_l+0x1a>
 80064a6:	292d      	cmp	r1, #45	@ 0x2d
 80064a8:	d1ca      	bne.n	8006440 <_strtod_l+0x30>
 80064aa:	2101      	movs	r1, #1
 80064ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80064ae:	1c51      	adds	r1, r2, #1
 80064b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80064b2:	7852      	ldrb	r2, [r2, #1]
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	d1c5      	bne.n	8006444 <_strtod_l+0x34>
 80064b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80064ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f040 8570 	bne.w	8006fa2 <_strtod_l+0xb92>
 80064c2:	4652      	mov	r2, sl
 80064c4:	465b      	mov	r3, fp
 80064c6:	e7e5      	b.n	8006494 <_strtod_l+0x84>
 80064c8:	2100      	movs	r1, #0
 80064ca:	e7ef      	b.n	80064ac <_strtod_l+0x9c>
 80064cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80064ce:	b13a      	cbz	r2, 80064e0 <_strtod_l+0xd0>
 80064d0:	2135      	movs	r1, #53	@ 0x35
 80064d2:	a81c      	add	r0, sp, #112	@ 0x70
 80064d4:	f7ff ff3a 	bl	800634c <__copybits>
 80064d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064da:	9805      	ldr	r0, [sp, #20]
 80064dc:	f7ff fb08 	bl	8005af0 <_Bfree>
 80064e0:	3e01      	subs	r6, #1
 80064e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80064e4:	2e04      	cmp	r6, #4
 80064e6:	d806      	bhi.n	80064f6 <_strtod_l+0xe6>
 80064e8:	e8df f006 	tbb	[pc, r6]
 80064ec:	201d0314 	.word	0x201d0314
 80064f0:	14          	.byte	0x14
 80064f1:	00          	.byte	0x00
 80064f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80064f6:	05e1      	lsls	r1, r4, #23
 80064f8:	bf48      	it	mi
 80064fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80064fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006502:	0d1b      	lsrs	r3, r3, #20
 8006504:	051b      	lsls	r3, r3, #20
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1bb      	bne.n	8006482 <_strtod_l+0x72>
 800650a:	f7fe fb2f 	bl	8004b6c <__errno>
 800650e:	2322      	movs	r3, #34	@ 0x22
 8006510:	6003      	str	r3, [r0, #0]
 8006512:	e7b6      	b.n	8006482 <_strtod_l+0x72>
 8006514:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006518:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800651c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006520:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006524:	e7e7      	b.n	80064f6 <_strtod_l+0xe6>
 8006526:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80066a4 <_strtod_l+0x294>
 800652a:	e7e4      	b.n	80064f6 <_strtod_l+0xe6>
 800652c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006530:	f04f 3aff 	mov.w	sl, #4294967295
 8006534:	e7df      	b.n	80064f6 <_strtod_l+0xe6>
 8006536:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	9219      	str	r2, [sp, #100]	@ 0x64
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b30      	cmp	r3, #48	@ 0x30
 8006540:	d0f9      	beq.n	8006536 <_strtod_l+0x126>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d09d      	beq.n	8006482 <_strtod_l+0x72>
 8006546:	2301      	movs	r3, #1
 8006548:	9309      	str	r3, [sp, #36]	@ 0x24
 800654a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800654c:	930c      	str	r3, [sp, #48]	@ 0x30
 800654e:	2300      	movs	r3, #0
 8006550:	9308      	str	r3, [sp, #32]
 8006552:	930a      	str	r3, [sp, #40]	@ 0x28
 8006554:	461f      	mov	r7, r3
 8006556:	220a      	movs	r2, #10
 8006558:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800655a:	7805      	ldrb	r5, [r0, #0]
 800655c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006560:	b2d9      	uxtb	r1, r3
 8006562:	2909      	cmp	r1, #9
 8006564:	d928      	bls.n	80065b8 <_strtod_l+0x1a8>
 8006566:	494e      	ldr	r1, [pc, #312]	@ (80066a0 <_strtod_l+0x290>)
 8006568:	2201      	movs	r2, #1
 800656a:	f001 f9df 	bl	800792c <strncmp>
 800656e:	2800      	cmp	r0, #0
 8006570:	d032      	beq.n	80065d8 <_strtod_l+0x1c8>
 8006572:	2000      	movs	r0, #0
 8006574:	462a      	mov	r2, r5
 8006576:	4681      	mov	r9, r0
 8006578:	463d      	mov	r5, r7
 800657a:	4603      	mov	r3, r0
 800657c:	2a65      	cmp	r2, #101	@ 0x65
 800657e:	d001      	beq.n	8006584 <_strtod_l+0x174>
 8006580:	2a45      	cmp	r2, #69	@ 0x45
 8006582:	d114      	bne.n	80065ae <_strtod_l+0x19e>
 8006584:	b91d      	cbnz	r5, 800658e <_strtod_l+0x17e>
 8006586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006588:	4302      	orrs	r2, r0
 800658a:	d095      	beq.n	80064b8 <_strtod_l+0xa8>
 800658c:	2500      	movs	r5, #0
 800658e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006590:	1c62      	adds	r2, r4, #1
 8006592:	9219      	str	r2, [sp, #100]	@ 0x64
 8006594:	7862      	ldrb	r2, [r4, #1]
 8006596:	2a2b      	cmp	r2, #43	@ 0x2b
 8006598:	d077      	beq.n	800668a <_strtod_l+0x27a>
 800659a:	2a2d      	cmp	r2, #45	@ 0x2d
 800659c:	d07b      	beq.n	8006696 <_strtod_l+0x286>
 800659e:	f04f 0c00 	mov.w	ip, #0
 80065a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80065a6:	2909      	cmp	r1, #9
 80065a8:	f240 8082 	bls.w	80066b0 <_strtod_l+0x2a0>
 80065ac:	9419      	str	r4, [sp, #100]	@ 0x64
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	e0a2      	b.n	80066fa <_strtod_l+0x2ea>
 80065b4:	2300      	movs	r3, #0
 80065b6:	e7c7      	b.n	8006548 <_strtod_l+0x138>
 80065b8:	2f08      	cmp	r7, #8
 80065ba:	bfd5      	itete	le
 80065bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80065be:	9908      	ldrgt	r1, [sp, #32]
 80065c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80065c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80065c8:	f100 0001 	add.w	r0, r0, #1
 80065cc:	bfd4      	ite	le
 80065ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 80065d0:	9308      	strgt	r3, [sp, #32]
 80065d2:	3701      	adds	r7, #1
 80065d4:	9019      	str	r0, [sp, #100]	@ 0x64
 80065d6:	e7bf      	b.n	8006558 <_strtod_l+0x148>
 80065d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80065de:	785a      	ldrb	r2, [r3, #1]
 80065e0:	b37f      	cbz	r7, 8006642 <_strtod_l+0x232>
 80065e2:	4681      	mov	r9, r0
 80065e4:	463d      	mov	r5, r7
 80065e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80065ea:	2b09      	cmp	r3, #9
 80065ec:	d912      	bls.n	8006614 <_strtod_l+0x204>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e7c4      	b.n	800657c <_strtod_l+0x16c>
 80065f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80065f8:	785a      	ldrb	r2, [r3, #1]
 80065fa:	3001      	adds	r0, #1
 80065fc:	2a30      	cmp	r2, #48	@ 0x30
 80065fe:	d0f8      	beq.n	80065f2 <_strtod_l+0x1e2>
 8006600:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006604:	2b08      	cmp	r3, #8
 8006606:	f200 84d3 	bhi.w	8006fb0 <_strtod_l+0xba0>
 800660a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800660c:	930c      	str	r3, [sp, #48]	@ 0x30
 800660e:	4681      	mov	r9, r0
 8006610:	2000      	movs	r0, #0
 8006612:	4605      	mov	r5, r0
 8006614:	3a30      	subs	r2, #48	@ 0x30
 8006616:	f100 0301 	add.w	r3, r0, #1
 800661a:	d02a      	beq.n	8006672 <_strtod_l+0x262>
 800661c:	4499      	add	r9, r3
 800661e:	eb00 0c05 	add.w	ip, r0, r5
 8006622:	462b      	mov	r3, r5
 8006624:	210a      	movs	r1, #10
 8006626:	4563      	cmp	r3, ip
 8006628:	d10d      	bne.n	8006646 <_strtod_l+0x236>
 800662a:	1c69      	adds	r1, r5, #1
 800662c:	4401      	add	r1, r0
 800662e:	4428      	add	r0, r5
 8006630:	2808      	cmp	r0, #8
 8006632:	dc16      	bgt.n	8006662 <_strtod_l+0x252>
 8006634:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006636:	230a      	movs	r3, #10
 8006638:	fb03 2300 	mla	r3, r3, r0, r2
 800663c:	930a      	str	r3, [sp, #40]	@ 0x28
 800663e:	2300      	movs	r3, #0
 8006640:	e018      	b.n	8006674 <_strtod_l+0x264>
 8006642:	4638      	mov	r0, r7
 8006644:	e7da      	b.n	80065fc <_strtod_l+0x1ec>
 8006646:	2b08      	cmp	r3, #8
 8006648:	f103 0301 	add.w	r3, r3, #1
 800664c:	dc03      	bgt.n	8006656 <_strtod_l+0x246>
 800664e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006650:	434e      	muls	r6, r1
 8006652:	960a      	str	r6, [sp, #40]	@ 0x28
 8006654:	e7e7      	b.n	8006626 <_strtod_l+0x216>
 8006656:	2b10      	cmp	r3, #16
 8006658:	bfde      	ittt	le
 800665a:	9e08      	ldrle	r6, [sp, #32]
 800665c:	434e      	mulle	r6, r1
 800665e:	9608      	strle	r6, [sp, #32]
 8006660:	e7e1      	b.n	8006626 <_strtod_l+0x216>
 8006662:	280f      	cmp	r0, #15
 8006664:	dceb      	bgt.n	800663e <_strtod_l+0x22e>
 8006666:	9808      	ldr	r0, [sp, #32]
 8006668:	230a      	movs	r3, #10
 800666a:	fb03 2300 	mla	r3, r3, r0, r2
 800666e:	9308      	str	r3, [sp, #32]
 8006670:	e7e5      	b.n	800663e <_strtod_l+0x22e>
 8006672:	4629      	mov	r1, r5
 8006674:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006676:	1c50      	adds	r0, r2, #1
 8006678:	9019      	str	r0, [sp, #100]	@ 0x64
 800667a:	7852      	ldrb	r2, [r2, #1]
 800667c:	4618      	mov	r0, r3
 800667e:	460d      	mov	r5, r1
 8006680:	e7b1      	b.n	80065e6 <_strtod_l+0x1d6>
 8006682:	f04f 0900 	mov.w	r9, #0
 8006686:	2301      	movs	r3, #1
 8006688:	e77d      	b.n	8006586 <_strtod_l+0x176>
 800668a:	f04f 0c00 	mov.w	ip, #0
 800668e:	1ca2      	adds	r2, r4, #2
 8006690:	9219      	str	r2, [sp, #100]	@ 0x64
 8006692:	78a2      	ldrb	r2, [r4, #2]
 8006694:	e785      	b.n	80065a2 <_strtod_l+0x192>
 8006696:	f04f 0c01 	mov.w	ip, #1
 800669a:	e7f8      	b.n	800668e <_strtod_l+0x27e>
 800669c:	080088b8 	.word	0x080088b8
 80066a0:	080088a0 	.word	0x080088a0
 80066a4:	7ff00000 	.word	0x7ff00000
 80066a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066aa:	1c51      	adds	r1, r2, #1
 80066ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80066ae:	7852      	ldrb	r2, [r2, #1]
 80066b0:	2a30      	cmp	r2, #48	@ 0x30
 80066b2:	d0f9      	beq.n	80066a8 <_strtod_l+0x298>
 80066b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80066b8:	2908      	cmp	r1, #8
 80066ba:	f63f af78 	bhi.w	80065ae <_strtod_l+0x19e>
 80066be:	3a30      	subs	r2, #48	@ 0x30
 80066c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80066c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80066c6:	f04f 080a 	mov.w	r8, #10
 80066ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066cc:	1c56      	adds	r6, r2, #1
 80066ce:	9619      	str	r6, [sp, #100]	@ 0x64
 80066d0:	7852      	ldrb	r2, [r2, #1]
 80066d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80066d6:	f1be 0f09 	cmp.w	lr, #9
 80066da:	d939      	bls.n	8006750 <_strtod_l+0x340>
 80066dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80066de:	1a76      	subs	r6, r6, r1
 80066e0:	2e08      	cmp	r6, #8
 80066e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80066e6:	dc03      	bgt.n	80066f0 <_strtod_l+0x2e0>
 80066e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80066ea:	4588      	cmp	r8, r1
 80066ec:	bfa8      	it	ge
 80066ee:	4688      	movge	r8, r1
 80066f0:	f1bc 0f00 	cmp.w	ip, #0
 80066f4:	d001      	beq.n	80066fa <_strtod_l+0x2ea>
 80066f6:	f1c8 0800 	rsb	r8, r8, #0
 80066fa:	2d00      	cmp	r5, #0
 80066fc:	d14e      	bne.n	800679c <_strtod_l+0x38c>
 80066fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006700:	4308      	orrs	r0, r1
 8006702:	f47f aebe 	bne.w	8006482 <_strtod_l+0x72>
 8006706:	2b00      	cmp	r3, #0
 8006708:	f47f aed6 	bne.w	80064b8 <_strtod_l+0xa8>
 800670c:	2a69      	cmp	r2, #105	@ 0x69
 800670e:	d028      	beq.n	8006762 <_strtod_l+0x352>
 8006710:	dc25      	bgt.n	800675e <_strtod_l+0x34e>
 8006712:	2a49      	cmp	r2, #73	@ 0x49
 8006714:	d025      	beq.n	8006762 <_strtod_l+0x352>
 8006716:	2a4e      	cmp	r2, #78	@ 0x4e
 8006718:	f47f aece 	bne.w	80064b8 <_strtod_l+0xa8>
 800671c:	499b      	ldr	r1, [pc, #620]	@ (800698c <_strtod_l+0x57c>)
 800671e:	a819      	add	r0, sp, #100	@ 0x64
 8006720:	f001 fbfa 	bl	8007f18 <__match>
 8006724:	2800      	cmp	r0, #0
 8006726:	f43f aec7 	beq.w	80064b8 <_strtod_l+0xa8>
 800672a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b28      	cmp	r3, #40	@ 0x28
 8006730:	d12e      	bne.n	8006790 <_strtod_l+0x380>
 8006732:	4997      	ldr	r1, [pc, #604]	@ (8006990 <_strtod_l+0x580>)
 8006734:	aa1c      	add	r2, sp, #112	@ 0x70
 8006736:	a819      	add	r0, sp, #100	@ 0x64
 8006738:	f001 fc02 	bl	8007f40 <__hexnan>
 800673c:	2805      	cmp	r0, #5
 800673e:	d127      	bne.n	8006790 <_strtod_l+0x380>
 8006740:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006742:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006746:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800674a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800674e:	e698      	b.n	8006482 <_strtod_l+0x72>
 8006750:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006752:	fb08 2101 	mla	r1, r8, r1, r2
 8006756:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800675a:	920e      	str	r2, [sp, #56]	@ 0x38
 800675c:	e7b5      	b.n	80066ca <_strtod_l+0x2ba>
 800675e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006760:	e7da      	b.n	8006718 <_strtod_l+0x308>
 8006762:	498c      	ldr	r1, [pc, #560]	@ (8006994 <_strtod_l+0x584>)
 8006764:	a819      	add	r0, sp, #100	@ 0x64
 8006766:	f001 fbd7 	bl	8007f18 <__match>
 800676a:	2800      	cmp	r0, #0
 800676c:	f43f aea4 	beq.w	80064b8 <_strtod_l+0xa8>
 8006770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006772:	4989      	ldr	r1, [pc, #548]	@ (8006998 <_strtod_l+0x588>)
 8006774:	3b01      	subs	r3, #1
 8006776:	a819      	add	r0, sp, #100	@ 0x64
 8006778:	9319      	str	r3, [sp, #100]	@ 0x64
 800677a:	f001 fbcd 	bl	8007f18 <__match>
 800677e:	b910      	cbnz	r0, 8006786 <_strtod_l+0x376>
 8006780:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006782:	3301      	adds	r3, #1
 8006784:	9319      	str	r3, [sp, #100]	@ 0x64
 8006786:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80069a8 <_strtod_l+0x598>
 800678a:	f04f 0a00 	mov.w	sl, #0
 800678e:	e678      	b.n	8006482 <_strtod_l+0x72>
 8006790:	4882      	ldr	r0, [pc, #520]	@ (800699c <_strtod_l+0x58c>)
 8006792:	f001 f8fd 	bl	8007990 <nan>
 8006796:	ec5b ab10 	vmov	sl, fp, d0
 800679a:	e672      	b.n	8006482 <_strtod_l+0x72>
 800679c:	eba8 0309 	sub.w	r3, r8, r9
 80067a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80067a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067a4:	2f00      	cmp	r7, #0
 80067a6:	bf08      	it	eq
 80067a8:	462f      	moveq	r7, r5
 80067aa:	2d10      	cmp	r5, #16
 80067ac:	462c      	mov	r4, r5
 80067ae:	bfa8      	it	ge
 80067b0:	2410      	movge	r4, #16
 80067b2:	f7f9 feaf 	bl	8000514 <__aeabi_ui2d>
 80067b6:	2d09      	cmp	r5, #9
 80067b8:	4682      	mov	sl, r0
 80067ba:	468b      	mov	fp, r1
 80067bc:	dc13      	bgt.n	80067e6 <_strtod_l+0x3d6>
 80067be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f43f ae5e 	beq.w	8006482 <_strtod_l+0x72>
 80067c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c8:	dd78      	ble.n	80068bc <_strtod_l+0x4ac>
 80067ca:	2b16      	cmp	r3, #22
 80067cc:	dc5f      	bgt.n	800688e <_strtod_l+0x47e>
 80067ce:	4974      	ldr	r1, [pc, #464]	@ (80069a0 <_strtod_l+0x590>)
 80067d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80067d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067d8:	4652      	mov	r2, sl
 80067da:	465b      	mov	r3, fp
 80067dc:	f7f9 ff14 	bl	8000608 <__aeabi_dmul>
 80067e0:	4682      	mov	sl, r0
 80067e2:	468b      	mov	fp, r1
 80067e4:	e64d      	b.n	8006482 <_strtod_l+0x72>
 80067e6:	4b6e      	ldr	r3, [pc, #440]	@ (80069a0 <_strtod_l+0x590>)
 80067e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80067f0:	f7f9 ff0a 	bl	8000608 <__aeabi_dmul>
 80067f4:	4682      	mov	sl, r0
 80067f6:	9808      	ldr	r0, [sp, #32]
 80067f8:	468b      	mov	fp, r1
 80067fa:	f7f9 fe8b 	bl	8000514 <__aeabi_ui2d>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4650      	mov	r0, sl
 8006804:	4659      	mov	r1, fp
 8006806:	f7f9 fd49 	bl	800029c <__adddf3>
 800680a:	2d0f      	cmp	r5, #15
 800680c:	4682      	mov	sl, r0
 800680e:	468b      	mov	fp, r1
 8006810:	ddd5      	ble.n	80067be <_strtod_l+0x3ae>
 8006812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006814:	1b2c      	subs	r4, r5, r4
 8006816:	441c      	add	r4, r3
 8006818:	2c00      	cmp	r4, #0
 800681a:	f340 8096 	ble.w	800694a <_strtod_l+0x53a>
 800681e:	f014 030f 	ands.w	r3, r4, #15
 8006822:	d00a      	beq.n	800683a <_strtod_l+0x42a>
 8006824:	495e      	ldr	r1, [pc, #376]	@ (80069a0 <_strtod_l+0x590>)
 8006826:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800682a:	4652      	mov	r2, sl
 800682c:	465b      	mov	r3, fp
 800682e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006832:	f7f9 fee9 	bl	8000608 <__aeabi_dmul>
 8006836:	4682      	mov	sl, r0
 8006838:	468b      	mov	fp, r1
 800683a:	f034 040f 	bics.w	r4, r4, #15
 800683e:	d073      	beq.n	8006928 <_strtod_l+0x518>
 8006840:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006844:	dd48      	ble.n	80068d8 <_strtod_l+0x4c8>
 8006846:	2400      	movs	r4, #0
 8006848:	46a0      	mov	r8, r4
 800684a:	940a      	str	r4, [sp, #40]	@ 0x28
 800684c:	46a1      	mov	r9, r4
 800684e:	9a05      	ldr	r2, [sp, #20]
 8006850:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80069a8 <_strtod_l+0x598>
 8006854:	2322      	movs	r3, #34	@ 0x22
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	f04f 0a00 	mov.w	sl, #0
 800685c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	f43f ae0f 	beq.w	8006482 <_strtod_l+0x72>
 8006864:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006866:	9805      	ldr	r0, [sp, #20]
 8006868:	f7ff f942 	bl	8005af0 <_Bfree>
 800686c:	9805      	ldr	r0, [sp, #20]
 800686e:	4649      	mov	r1, r9
 8006870:	f7ff f93e 	bl	8005af0 <_Bfree>
 8006874:	9805      	ldr	r0, [sp, #20]
 8006876:	4641      	mov	r1, r8
 8006878:	f7ff f93a 	bl	8005af0 <_Bfree>
 800687c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800687e:	9805      	ldr	r0, [sp, #20]
 8006880:	f7ff f936 	bl	8005af0 <_Bfree>
 8006884:	9805      	ldr	r0, [sp, #20]
 8006886:	4621      	mov	r1, r4
 8006888:	f7ff f932 	bl	8005af0 <_Bfree>
 800688c:	e5f9      	b.n	8006482 <_strtod_l+0x72>
 800688e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006890:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006894:	4293      	cmp	r3, r2
 8006896:	dbbc      	blt.n	8006812 <_strtod_l+0x402>
 8006898:	4c41      	ldr	r4, [pc, #260]	@ (80069a0 <_strtod_l+0x590>)
 800689a:	f1c5 050f 	rsb	r5, r5, #15
 800689e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80068a2:	4652      	mov	r2, sl
 80068a4:	465b      	mov	r3, fp
 80068a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068aa:	f7f9 fead 	bl	8000608 <__aeabi_dmul>
 80068ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b0:	1b5d      	subs	r5, r3, r5
 80068b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80068b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80068ba:	e78f      	b.n	80067dc <_strtod_l+0x3cc>
 80068bc:	3316      	adds	r3, #22
 80068be:	dba8      	blt.n	8006812 <_strtod_l+0x402>
 80068c0:	4b37      	ldr	r3, [pc, #220]	@ (80069a0 <_strtod_l+0x590>)
 80068c2:	eba9 0808 	sub.w	r8, r9, r8
 80068c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80068ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 80068ce:	4650      	mov	r0, sl
 80068d0:	4659      	mov	r1, fp
 80068d2:	f7f9 ffc3 	bl	800085c <__aeabi_ddiv>
 80068d6:	e783      	b.n	80067e0 <_strtod_l+0x3d0>
 80068d8:	4b32      	ldr	r3, [pc, #200]	@ (80069a4 <_strtod_l+0x594>)
 80068da:	9308      	str	r3, [sp, #32]
 80068dc:	2300      	movs	r3, #0
 80068de:	1124      	asrs	r4, r4, #4
 80068e0:	4650      	mov	r0, sl
 80068e2:	4659      	mov	r1, fp
 80068e4:	461e      	mov	r6, r3
 80068e6:	2c01      	cmp	r4, #1
 80068e8:	dc21      	bgt.n	800692e <_strtod_l+0x51e>
 80068ea:	b10b      	cbz	r3, 80068f0 <_strtod_l+0x4e0>
 80068ec:	4682      	mov	sl, r0
 80068ee:	468b      	mov	fp, r1
 80068f0:	492c      	ldr	r1, [pc, #176]	@ (80069a4 <_strtod_l+0x594>)
 80068f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80068f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80068fa:	4652      	mov	r2, sl
 80068fc:	465b      	mov	r3, fp
 80068fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006902:	f7f9 fe81 	bl	8000608 <__aeabi_dmul>
 8006906:	4b28      	ldr	r3, [pc, #160]	@ (80069a8 <_strtod_l+0x598>)
 8006908:	460a      	mov	r2, r1
 800690a:	400b      	ands	r3, r1
 800690c:	4927      	ldr	r1, [pc, #156]	@ (80069ac <_strtod_l+0x59c>)
 800690e:	428b      	cmp	r3, r1
 8006910:	4682      	mov	sl, r0
 8006912:	d898      	bhi.n	8006846 <_strtod_l+0x436>
 8006914:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006918:	428b      	cmp	r3, r1
 800691a:	bf86      	itte	hi
 800691c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80069b0 <_strtod_l+0x5a0>
 8006920:	f04f 3aff 	movhi.w	sl, #4294967295
 8006924:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006928:	2300      	movs	r3, #0
 800692a:	9308      	str	r3, [sp, #32]
 800692c:	e07a      	b.n	8006a24 <_strtod_l+0x614>
 800692e:	07e2      	lsls	r2, r4, #31
 8006930:	d505      	bpl.n	800693e <_strtod_l+0x52e>
 8006932:	9b08      	ldr	r3, [sp, #32]
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f7f9 fe66 	bl	8000608 <__aeabi_dmul>
 800693c:	2301      	movs	r3, #1
 800693e:	9a08      	ldr	r2, [sp, #32]
 8006940:	3208      	adds	r2, #8
 8006942:	3601      	adds	r6, #1
 8006944:	1064      	asrs	r4, r4, #1
 8006946:	9208      	str	r2, [sp, #32]
 8006948:	e7cd      	b.n	80068e6 <_strtod_l+0x4d6>
 800694a:	d0ed      	beq.n	8006928 <_strtod_l+0x518>
 800694c:	4264      	negs	r4, r4
 800694e:	f014 020f 	ands.w	r2, r4, #15
 8006952:	d00a      	beq.n	800696a <_strtod_l+0x55a>
 8006954:	4b12      	ldr	r3, [pc, #72]	@ (80069a0 <_strtod_l+0x590>)
 8006956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800695a:	4650      	mov	r0, sl
 800695c:	4659      	mov	r1, fp
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	f7f9 ff7b 	bl	800085c <__aeabi_ddiv>
 8006966:	4682      	mov	sl, r0
 8006968:	468b      	mov	fp, r1
 800696a:	1124      	asrs	r4, r4, #4
 800696c:	d0dc      	beq.n	8006928 <_strtod_l+0x518>
 800696e:	2c1f      	cmp	r4, #31
 8006970:	dd20      	ble.n	80069b4 <_strtod_l+0x5a4>
 8006972:	2400      	movs	r4, #0
 8006974:	46a0      	mov	r8, r4
 8006976:	940a      	str	r4, [sp, #40]	@ 0x28
 8006978:	46a1      	mov	r9, r4
 800697a:	9a05      	ldr	r2, [sp, #20]
 800697c:	2322      	movs	r3, #34	@ 0x22
 800697e:	f04f 0a00 	mov.w	sl, #0
 8006982:	f04f 0b00 	mov.w	fp, #0
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	e768      	b.n	800685c <_strtod_l+0x44c>
 800698a:	bf00      	nop
 800698c:	0800868d 	.word	0x0800868d
 8006990:	080088a4 	.word	0x080088a4
 8006994:	08008685 	.word	0x08008685
 8006998:	080086bc 	.word	0x080086bc
 800699c:	08008a4d 	.word	0x08008a4d
 80069a0:	080087d8 	.word	0x080087d8
 80069a4:	080087b0 	.word	0x080087b0
 80069a8:	7ff00000 	.word	0x7ff00000
 80069ac:	7ca00000 	.word	0x7ca00000
 80069b0:	7fefffff 	.word	0x7fefffff
 80069b4:	f014 0310 	ands.w	r3, r4, #16
 80069b8:	bf18      	it	ne
 80069ba:	236a      	movne	r3, #106	@ 0x6a
 80069bc:	4ea9      	ldr	r6, [pc, #676]	@ (8006c64 <_strtod_l+0x854>)
 80069be:	9308      	str	r3, [sp, #32]
 80069c0:	4650      	mov	r0, sl
 80069c2:	4659      	mov	r1, fp
 80069c4:	2300      	movs	r3, #0
 80069c6:	07e2      	lsls	r2, r4, #31
 80069c8:	d504      	bpl.n	80069d4 <_strtod_l+0x5c4>
 80069ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069ce:	f7f9 fe1b 	bl	8000608 <__aeabi_dmul>
 80069d2:	2301      	movs	r3, #1
 80069d4:	1064      	asrs	r4, r4, #1
 80069d6:	f106 0608 	add.w	r6, r6, #8
 80069da:	d1f4      	bne.n	80069c6 <_strtod_l+0x5b6>
 80069dc:	b10b      	cbz	r3, 80069e2 <_strtod_l+0x5d2>
 80069de:	4682      	mov	sl, r0
 80069e0:	468b      	mov	fp, r1
 80069e2:	9b08      	ldr	r3, [sp, #32]
 80069e4:	b1b3      	cbz	r3, 8006a14 <_strtod_l+0x604>
 80069e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80069ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	4659      	mov	r1, fp
 80069f2:	dd0f      	ble.n	8006a14 <_strtod_l+0x604>
 80069f4:	2b1f      	cmp	r3, #31
 80069f6:	dd55      	ble.n	8006aa4 <_strtod_l+0x694>
 80069f8:	2b34      	cmp	r3, #52	@ 0x34
 80069fa:	bfde      	ittt	le
 80069fc:	f04f 33ff 	movle.w	r3, #4294967295
 8006a00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006a04:	4093      	lslle	r3, r2
 8006a06:	f04f 0a00 	mov.w	sl, #0
 8006a0a:	bfcc      	ite	gt
 8006a0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006a10:	ea03 0b01 	andle.w	fp, r3, r1
 8006a14:	2200      	movs	r2, #0
 8006a16:	2300      	movs	r3, #0
 8006a18:	4650      	mov	r0, sl
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	f7fa f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d1a6      	bne.n	8006972 <_strtod_l+0x562>
 8006a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006a2a:	9805      	ldr	r0, [sp, #20]
 8006a2c:	462b      	mov	r3, r5
 8006a2e:	463a      	mov	r2, r7
 8006a30:	f7ff f8c6 	bl	8005bc0 <__s2b>
 8006a34:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f43f af05 	beq.w	8006846 <_strtod_l+0x436>
 8006a3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	eba9 0308 	sub.w	r3, r9, r8
 8006a44:	bfa8      	it	ge
 8006a46:	2300      	movge	r3, #0
 8006a48:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a4a:	2400      	movs	r4, #0
 8006a4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006a50:	9316      	str	r3, [sp, #88]	@ 0x58
 8006a52:	46a0      	mov	r8, r4
 8006a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a56:	9805      	ldr	r0, [sp, #20]
 8006a58:	6859      	ldr	r1, [r3, #4]
 8006a5a:	f7ff f809 	bl	8005a70 <_Balloc>
 8006a5e:	4681      	mov	r9, r0
 8006a60:	2800      	cmp	r0, #0
 8006a62:	f43f aef4 	beq.w	800684e <_strtod_l+0x43e>
 8006a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	3202      	adds	r2, #2
 8006a6c:	f103 010c 	add.w	r1, r3, #12
 8006a70:	0092      	lsls	r2, r2, #2
 8006a72:	300c      	adds	r0, #12
 8006a74:	f000 ff7c 	bl	8007970 <memcpy>
 8006a78:	ec4b ab10 	vmov	d0, sl, fp
 8006a7c:	9805      	ldr	r0, [sp, #20]
 8006a7e:	aa1c      	add	r2, sp, #112	@ 0x70
 8006a80:	a91b      	add	r1, sp, #108	@ 0x6c
 8006a82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006a86:	f7ff fbd7 	bl	8006238 <__d2b>
 8006a8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	f43f aede 	beq.w	800684e <_strtod_l+0x43e>
 8006a92:	9805      	ldr	r0, [sp, #20]
 8006a94:	2101      	movs	r1, #1
 8006a96:	f7ff f929 	bl	8005cec <__i2b>
 8006a9a:	4680      	mov	r8, r0
 8006a9c:	b948      	cbnz	r0, 8006ab2 <_strtod_l+0x6a2>
 8006a9e:	f04f 0800 	mov.w	r8, #0
 8006aa2:	e6d4      	b.n	800684e <_strtod_l+0x43e>
 8006aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	ea03 0a0a 	and.w	sl, r3, sl
 8006ab0:	e7b0      	b.n	8006a14 <_strtod_l+0x604>
 8006ab2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006ab4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	bfab      	itete	ge
 8006aba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006abc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006abe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006ac0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006ac2:	bfac      	ite	ge
 8006ac4:	18ef      	addge	r7, r5, r3
 8006ac6:	1b5e      	sublt	r6, r3, r5
 8006ac8:	9b08      	ldr	r3, [sp, #32]
 8006aca:	1aed      	subs	r5, r5, r3
 8006acc:	4415      	add	r5, r2
 8006ace:	4b66      	ldr	r3, [pc, #408]	@ (8006c68 <_strtod_l+0x858>)
 8006ad0:	3d01      	subs	r5, #1
 8006ad2:	429d      	cmp	r5, r3
 8006ad4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006ad8:	da50      	bge.n	8006b7c <_strtod_l+0x76c>
 8006ada:	1b5b      	subs	r3, r3, r5
 8006adc:	2b1f      	cmp	r3, #31
 8006ade:	eba2 0203 	sub.w	r2, r2, r3
 8006ae2:	f04f 0101 	mov.w	r1, #1
 8006ae6:	dc3d      	bgt.n	8006b64 <_strtod_l+0x754>
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006aee:	2300      	movs	r3, #0
 8006af0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006af2:	18bd      	adds	r5, r7, r2
 8006af4:	9b08      	ldr	r3, [sp, #32]
 8006af6:	42af      	cmp	r7, r5
 8006af8:	4416      	add	r6, r2
 8006afa:	441e      	add	r6, r3
 8006afc:	463b      	mov	r3, r7
 8006afe:	bfa8      	it	ge
 8006b00:	462b      	movge	r3, r5
 8006b02:	42b3      	cmp	r3, r6
 8006b04:	bfa8      	it	ge
 8006b06:	4633      	movge	r3, r6
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bfc2      	ittt	gt
 8006b0c:	1aed      	subgt	r5, r5, r3
 8006b0e:	1af6      	subgt	r6, r6, r3
 8006b10:	1aff      	subgt	r7, r7, r3
 8006b12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dd16      	ble.n	8006b46 <_strtod_l+0x736>
 8006b18:	4641      	mov	r1, r8
 8006b1a:	9805      	ldr	r0, [sp, #20]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f7ff f9a5 	bl	8005e6c <__pow5mult>
 8006b22:	4680      	mov	r8, r0
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d0ba      	beq.n	8006a9e <_strtod_l+0x68e>
 8006b28:	4601      	mov	r1, r0
 8006b2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006b2c:	9805      	ldr	r0, [sp, #20]
 8006b2e:	f7ff f8f3 	bl	8005d18 <__multiply>
 8006b32:	900e      	str	r0, [sp, #56]	@ 0x38
 8006b34:	2800      	cmp	r0, #0
 8006b36:	f43f ae8a 	beq.w	800684e <_strtod_l+0x43e>
 8006b3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b3c:	9805      	ldr	r0, [sp, #20]
 8006b3e:	f7fe ffd7 	bl	8005af0 <_Bfree>
 8006b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b44:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b46:	2d00      	cmp	r5, #0
 8006b48:	dc1d      	bgt.n	8006b86 <_strtod_l+0x776>
 8006b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	dd23      	ble.n	8006b98 <_strtod_l+0x788>
 8006b50:	4649      	mov	r1, r9
 8006b52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006b54:	9805      	ldr	r0, [sp, #20]
 8006b56:	f7ff f989 	bl	8005e6c <__pow5mult>
 8006b5a:	4681      	mov	r9, r0
 8006b5c:	b9e0      	cbnz	r0, 8006b98 <_strtod_l+0x788>
 8006b5e:	f04f 0900 	mov.w	r9, #0
 8006b62:	e674      	b.n	800684e <_strtod_l+0x43e>
 8006b64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006b68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006b6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006b70:	35e2      	adds	r5, #226	@ 0xe2
 8006b72:	fa01 f305 	lsl.w	r3, r1, r5
 8006b76:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006b7a:	e7ba      	b.n	8006af2 <_strtod_l+0x6e2>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b80:	2301      	movs	r3, #1
 8006b82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b84:	e7b5      	b.n	8006af2 <_strtod_l+0x6e2>
 8006b86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b88:	9805      	ldr	r0, [sp, #20]
 8006b8a:	462a      	mov	r2, r5
 8006b8c:	f7ff f9c8 	bl	8005f20 <__lshift>
 8006b90:	901a      	str	r0, [sp, #104]	@ 0x68
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d1d9      	bne.n	8006b4a <_strtod_l+0x73a>
 8006b96:	e65a      	b.n	800684e <_strtod_l+0x43e>
 8006b98:	2e00      	cmp	r6, #0
 8006b9a:	dd07      	ble.n	8006bac <_strtod_l+0x79c>
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	9805      	ldr	r0, [sp, #20]
 8006ba0:	4632      	mov	r2, r6
 8006ba2:	f7ff f9bd 	bl	8005f20 <__lshift>
 8006ba6:	4681      	mov	r9, r0
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d0d8      	beq.n	8006b5e <_strtod_l+0x74e>
 8006bac:	2f00      	cmp	r7, #0
 8006bae:	dd08      	ble.n	8006bc2 <_strtod_l+0x7b2>
 8006bb0:	4641      	mov	r1, r8
 8006bb2:	9805      	ldr	r0, [sp, #20]
 8006bb4:	463a      	mov	r2, r7
 8006bb6:	f7ff f9b3 	bl	8005f20 <__lshift>
 8006bba:	4680      	mov	r8, r0
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	f43f ae46 	beq.w	800684e <_strtod_l+0x43e>
 8006bc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bc4:	9805      	ldr	r0, [sp, #20]
 8006bc6:	464a      	mov	r2, r9
 8006bc8:	f7ff fa32 	bl	8006030 <__mdiff>
 8006bcc:	4604      	mov	r4, r0
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f43f ae3d 	beq.w	800684e <_strtod_l+0x43e>
 8006bd4:	68c3      	ldr	r3, [r0, #12]
 8006bd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60c3      	str	r3, [r0, #12]
 8006bdc:	4641      	mov	r1, r8
 8006bde:	f7ff fa0b 	bl	8005ff8 <__mcmp>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	da46      	bge.n	8006c74 <_strtod_l+0x864>
 8006be6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006be8:	ea53 030a 	orrs.w	r3, r3, sl
 8006bec:	d16c      	bne.n	8006cc8 <_strtod_l+0x8b8>
 8006bee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d168      	bne.n	8006cc8 <_strtod_l+0x8b8>
 8006bf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bfa:	0d1b      	lsrs	r3, r3, #20
 8006bfc:	051b      	lsls	r3, r3, #20
 8006bfe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006c02:	d961      	bls.n	8006cc8 <_strtod_l+0x8b8>
 8006c04:	6963      	ldr	r3, [r4, #20]
 8006c06:	b913      	cbnz	r3, 8006c0e <_strtod_l+0x7fe>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	dd5c      	ble.n	8006cc8 <_strtod_l+0x8b8>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	2201      	movs	r2, #1
 8006c12:	9805      	ldr	r0, [sp, #20]
 8006c14:	f7ff f984 	bl	8005f20 <__lshift>
 8006c18:	4641      	mov	r1, r8
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	f7ff f9ec 	bl	8005ff8 <__mcmp>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	dd51      	ble.n	8006cc8 <_strtod_l+0x8b8>
 8006c24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c28:	9a08      	ldr	r2, [sp, #32]
 8006c2a:	0d1b      	lsrs	r3, r3, #20
 8006c2c:	051b      	lsls	r3, r3, #20
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	d06b      	beq.n	8006d0a <_strtod_l+0x8fa>
 8006c32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006c36:	d868      	bhi.n	8006d0a <_strtod_l+0x8fa>
 8006c38:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006c3c:	f67f ae9d 	bls.w	800697a <_strtod_l+0x56a>
 8006c40:	4b0a      	ldr	r3, [pc, #40]	@ (8006c6c <_strtod_l+0x85c>)
 8006c42:	4650      	mov	r0, sl
 8006c44:	4659      	mov	r1, fp
 8006c46:	2200      	movs	r2, #0
 8006c48:	f7f9 fcde 	bl	8000608 <__aeabi_dmul>
 8006c4c:	4b08      	ldr	r3, [pc, #32]	@ (8006c70 <_strtod_l+0x860>)
 8006c4e:	400b      	ands	r3, r1
 8006c50:	4682      	mov	sl, r0
 8006c52:	468b      	mov	fp, r1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f47f ae05 	bne.w	8006864 <_strtod_l+0x454>
 8006c5a:	9a05      	ldr	r2, [sp, #20]
 8006c5c:	2322      	movs	r3, #34	@ 0x22
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	e600      	b.n	8006864 <_strtod_l+0x454>
 8006c62:	bf00      	nop
 8006c64:	080088d0 	.word	0x080088d0
 8006c68:	fffffc02 	.word	0xfffffc02
 8006c6c:	39500000 	.word	0x39500000
 8006c70:	7ff00000 	.word	0x7ff00000
 8006c74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006c78:	d165      	bne.n	8006d46 <_strtod_l+0x936>
 8006c7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006c7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c80:	b35a      	cbz	r2, 8006cda <_strtod_l+0x8ca>
 8006c82:	4a9f      	ldr	r2, [pc, #636]	@ (8006f00 <_strtod_l+0xaf0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d12b      	bne.n	8006ce0 <_strtod_l+0x8d0>
 8006c88:	9b08      	ldr	r3, [sp, #32]
 8006c8a:	4651      	mov	r1, sl
 8006c8c:	b303      	cbz	r3, 8006cd0 <_strtod_l+0x8c0>
 8006c8e:	4b9d      	ldr	r3, [pc, #628]	@ (8006f04 <_strtod_l+0xaf4>)
 8006c90:	465a      	mov	r2, fp
 8006c92:	4013      	ands	r3, r2
 8006c94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006c98:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9c:	d81b      	bhi.n	8006cd6 <_strtod_l+0x8c6>
 8006c9e:	0d1b      	lsrs	r3, r3, #20
 8006ca0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	d119      	bne.n	8006ce0 <_strtod_l+0x8d0>
 8006cac:	4b96      	ldr	r3, [pc, #600]	@ (8006f08 <_strtod_l+0xaf8>)
 8006cae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d102      	bne.n	8006cba <_strtod_l+0x8aa>
 8006cb4:	3101      	adds	r1, #1
 8006cb6:	f43f adca 	beq.w	800684e <_strtod_l+0x43e>
 8006cba:	4b92      	ldr	r3, [pc, #584]	@ (8006f04 <_strtod_l+0xaf4>)
 8006cbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006cc4:	f04f 0a00 	mov.w	sl, #0
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1b8      	bne.n	8006c40 <_strtod_l+0x830>
 8006cce:	e5c9      	b.n	8006864 <_strtod_l+0x454>
 8006cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd4:	e7e8      	b.n	8006ca8 <_strtod_l+0x898>
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	e7e6      	b.n	8006ca8 <_strtod_l+0x898>
 8006cda:	ea53 030a 	orrs.w	r3, r3, sl
 8006cde:	d0a1      	beq.n	8006c24 <_strtod_l+0x814>
 8006ce0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ce2:	b1db      	cbz	r3, 8006d1c <_strtod_l+0x90c>
 8006ce4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ce6:	4213      	tst	r3, r2
 8006ce8:	d0ee      	beq.n	8006cc8 <_strtod_l+0x8b8>
 8006cea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cec:	9a08      	ldr	r2, [sp, #32]
 8006cee:	4650      	mov	r0, sl
 8006cf0:	4659      	mov	r1, fp
 8006cf2:	b1bb      	cbz	r3, 8006d24 <_strtod_l+0x914>
 8006cf4:	f7ff fb6e 	bl	80063d4 <sulp>
 8006cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cfc:	ec53 2b10 	vmov	r2, r3, d0
 8006d00:	f7f9 facc 	bl	800029c <__adddf3>
 8006d04:	4682      	mov	sl, r0
 8006d06:	468b      	mov	fp, r1
 8006d08:	e7de      	b.n	8006cc8 <_strtod_l+0x8b8>
 8006d0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006d0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d16:	f04f 3aff 	mov.w	sl, #4294967295
 8006d1a:	e7d5      	b.n	8006cc8 <_strtod_l+0x8b8>
 8006d1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d1e:	ea13 0f0a 	tst.w	r3, sl
 8006d22:	e7e1      	b.n	8006ce8 <_strtod_l+0x8d8>
 8006d24:	f7ff fb56 	bl	80063d4 <sulp>
 8006d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d2c:	ec53 2b10 	vmov	r2, r3, d0
 8006d30:	f7f9 fab2 	bl	8000298 <__aeabi_dsub>
 8006d34:	2200      	movs	r2, #0
 8006d36:	2300      	movs	r3, #0
 8006d38:	4682      	mov	sl, r0
 8006d3a:	468b      	mov	fp, r1
 8006d3c:	f7f9 fecc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d0c1      	beq.n	8006cc8 <_strtod_l+0x8b8>
 8006d44:	e619      	b.n	800697a <_strtod_l+0x56a>
 8006d46:	4641      	mov	r1, r8
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f7ff facd 	bl	80062e8 <__ratio>
 8006d4e:	ec57 6b10 	vmov	r6, r7, d0
 8006d52:	2200      	movs	r2, #0
 8006d54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006d58:	4630      	mov	r0, r6
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	f7f9 fed0 	bl	8000b00 <__aeabi_dcmple>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d06f      	beq.n	8006e44 <_strtod_l+0xa34>
 8006d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d17a      	bne.n	8006e60 <_strtod_l+0xa50>
 8006d6a:	f1ba 0f00 	cmp.w	sl, #0
 8006d6e:	d158      	bne.n	8006e22 <_strtod_l+0xa12>
 8006d70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d15a      	bne.n	8006e30 <_strtod_l+0xa20>
 8006d7a:	4b64      	ldr	r3, [pc, #400]	@ (8006f0c <_strtod_l+0xafc>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4630      	mov	r0, r6
 8006d80:	4639      	mov	r1, r7
 8006d82:	f7f9 feb3 	bl	8000aec <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d159      	bne.n	8006e3e <_strtod_l+0xa2e>
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	4b60      	ldr	r3, [pc, #384]	@ (8006f10 <_strtod_l+0xb00>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	f7f9 fc39 	bl	8000608 <__aeabi_dmul>
 8006d96:	4606      	mov	r6, r0
 8006d98:	460f      	mov	r7, r1
 8006d9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006d9e:	9606      	str	r6, [sp, #24]
 8006da0:	9307      	str	r3, [sp, #28]
 8006da2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006da6:	4d57      	ldr	r5, [pc, #348]	@ (8006f04 <_strtod_l+0xaf4>)
 8006da8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dae:	401d      	ands	r5, r3
 8006db0:	4b58      	ldr	r3, [pc, #352]	@ (8006f14 <_strtod_l+0xb04>)
 8006db2:	429d      	cmp	r5, r3
 8006db4:	f040 80b2 	bne.w	8006f1c <_strtod_l+0xb0c>
 8006db8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006dbe:	ec4b ab10 	vmov	d0, sl, fp
 8006dc2:	f7ff f9c9 	bl	8006158 <__ulp>
 8006dc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dca:	ec51 0b10 	vmov	r0, r1, d0
 8006dce:	f7f9 fc1b 	bl	8000608 <__aeabi_dmul>
 8006dd2:	4652      	mov	r2, sl
 8006dd4:	465b      	mov	r3, fp
 8006dd6:	f7f9 fa61 	bl	800029c <__adddf3>
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4949      	ldr	r1, [pc, #292]	@ (8006f04 <_strtod_l+0xaf4>)
 8006dde:	4a4e      	ldr	r2, [pc, #312]	@ (8006f18 <_strtod_l+0xb08>)
 8006de0:	4019      	ands	r1, r3
 8006de2:	4291      	cmp	r1, r2
 8006de4:	4682      	mov	sl, r0
 8006de6:	d942      	bls.n	8006e6e <_strtod_l+0xa5e>
 8006de8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006dea:	4b47      	ldr	r3, [pc, #284]	@ (8006f08 <_strtod_l+0xaf8>)
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d103      	bne.n	8006df8 <_strtod_l+0x9e8>
 8006df0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006df2:	3301      	adds	r3, #1
 8006df4:	f43f ad2b 	beq.w	800684e <_strtod_l+0x43e>
 8006df8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006f08 <_strtod_l+0xaf8>
 8006dfc:	f04f 3aff 	mov.w	sl, #4294967295
 8006e00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e02:	9805      	ldr	r0, [sp, #20]
 8006e04:	f7fe fe74 	bl	8005af0 <_Bfree>
 8006e08:	9805      	ldr	r0, [sp, #20]
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	f7fe fe70 	bl	8005af0 <_Bfree>
 8006e10:	9805      	ldr	r0, [sp, #20]
 8006e12:	4641      	mov	r1, r8
 8006e14:	f7fe fe6c 	bl	8005af0 <_Bfree>
 8006e18:	9805      	ldr	r0, [sp, #20]
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	f7fe fe68 	bl	8005af0 <_Bfree>
 8006e20:	e618      	b.n	8006a54 <_strtod_l+0x644>
 8006e22:	f1ba 0f01 	cmp.w	sl, #1
 8006e26:	d103      	bne.n	8006e30 <_strtod_l+0xa20>
 8006e28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f43f ada5 	beq.w	800697a <_strtod_l+0x56a>
 8006e30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006ee0 <_strtod_l+0xad0>
 8006e34:	4f35      	ldr	r7, [pc, #212]	@ (8006f0c <_strtod_l+0xafc>)
 8006e36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e3a:	2600      	movs	r6, #0
 8006e3c:	e7b1      	b.n	8006da2 <_strtod_l+0x992>
 8006e3e:	4f34      	ldr	r7, [pc, #208]	@ (8006f10 <_strtod_l+0xb00>)
 8006e40:	2600      	movs	r6, #0
 8006e42:	e7aa      	b.n	8006d9a <_strtod_l+0x98a>
 8006e44:	4b32      	ldr	r3, [pc, #200]	@ (8006f10 <_strtod_l+0xb00>)
 8006e46:	4630      	mov	r0, r6
 8006e48:	4639      	mov	r1, r7
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f7f9 fbdc 	bl	8000608 <__aeabi_dmul>
 8006e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e52:	4606      	mov	r6, r0
 8006e54:	460f      	mov	r7, r1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d09f      	beq.n	8006d9a <_strtod_l+0x98a>
 8006e5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006e5e:	e7a0      	b.n	8006da2 <_strtod_l+0x992>
 8006e60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006ee8 <_strtod_l+0xad8>
 8006e64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e68:	ec57 6b17 	vmov	r6, r7, d7
 8006e6c:	e799      	b.n	8006da2 <_strtod_l+0x992>
 8006e6e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006e72:	9b08      	ldr	r3, [sp, #32]
 8006e74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1c1      	bne.n	8006e00 <_strtod_l+0x9f0>
 8006e7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e80:	0d1b      	lsrs	r3, r3, #20
 8006e82:	051b      	lsls	r3, r3, #20
 8006e84:	429d      	cmp	r5, r3
 8006e86:	d1bb      	bne.n	8006e00 <_strtod_l+0x9f0>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 ff1c 	bl	8000cc8 <__aeabi_d2lz>
 8006e90:	f7f9 fb8c 	bl	80005ac <__aeabi_l2d>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f7f9 f9fc 	bl	8000298 <__aeabi_dsub>
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006ea8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eae:	ea46 060a 	orr.w	r6, r6, sl
 8006eb2:	431e      	orrs	r6, r3
 8006eb4:	d06f      	beq.n	8006f96 <_strtod_l+0xb86>
 8006eb6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006ef0 <_strtod_l+0xae0>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f7f9 fe16 	bl	8000aec <__aeabi_dcmplt>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f47f accf 	bne.w	8006864 <_strtod_l+0x454>
 8006ec6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006ef8 <_strtod_l+0xae8>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ed0:	f7f9 fe2a 	bl	8000b28 <__aeabi_dcmpgt>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d093      	beq.n	8006e00 <_strtod_l+0x9f0>
 8006ed8:	e4c4      	b.n	8006864 <_strtod_l+0x454>
 8006eda:	bf00      	nop
 8006edc:	f3af 8000 	nop.w
 8006ee0:	00000000 	.word	0x00000000
 8006ee4:	bff00000 	.word	0xbff00000
 8006ee8:	00000000 	.word	0x00000000
 8006eec:	3ff00000 	.word	0x3ff00000
 8006ef0:	94a03595 	.word	0x94a03595
 8006ef4:	3fdfffff 	.word	0x3fdfffff
 8006ef8:	35afe535 	.word	0x35afe535
 8006efc:	3fe00000 	.word	0x3fe00000
 8006f00:	000fffff 	.word	0x000fffff
 8006f04:	7ff00000 	.word	0x7ff00000
 8006f08:	7fefffff 	.word	0x7fefffff
 8006f0c:	3ff00000 	.word	0x3ff00000
 8006f10:	3fe00000 	.word	0x3fe00000
 8006f14:	7fe00000 	.word	0x7fe00000
 8006f18:	7c9fffff 	.word	0x7c9fffff
 8006f1c:	9b08      	ldr	r3, [sp, #32]
 8006f1e:	b323      	cbz	r3, 8006f6a <_strtod_l+0xb5a>
 8006f20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006f24:	d821      	bhi.n	8006f6a <_strtod_l+0xb5a>
 8006f26:	a328      	add	r3, pc, #160	@ (adr r3, 8006fc8 <_strtod_l+0xbb8>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	4639      	mov	r1, r7
 8006f30:	f7f9 fde6 	bl	8000b00 <__aeabi_dcmple>
 8006f34:	b1a0      	cbz	r0, 8006f60 <_strtod_l+0xb50>
 8006f36:	4639      	mov	r1, r7
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f7f9 fe3d 	bl	8000bb8 <__aeabi_d2uiz>
 8006f3e:	2801      	cmp	r0, #1
 8006f40:	bf38      	it	cc
 8006f42:	2001      	movcc	r0, #1
 8006f44:	f7f9 fae6 	bl	8000514 <__aeabi_ui2d>
 8006f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460f      	mov	r7, r1
 8006f4e:	b9fb      	cbnz	r3, 8006f90 <_strtod_l+0xb80>
 8006f50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f54:	9014      	str	r0, [sp, #80]	@ 0x50
 8006f56:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006f5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006f60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006f66:	1b5b      	subs	r3, r3, r5
 8006f68:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006f72:	f7ff f8f1 	bl	8006158 <__ulp>
 8006f76:	4650      	mov	r0, sl
 8006f78:	ec53 2b10 	vmov	r2, r3, d0
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	f7f9 fb43 	bl	8000608 <__aeabi_dmul>
 8006f82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006f86:	f7f9 f989 	bl	800029c <__adddf3>
 8006f8a:	4682      	mov	sl, r0
 8006f8c:	468b      	mov	fp, r1
 8006f8e:	e770      	b.n	8006e72 <_strtod_l+0xa62>
 8006f90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006f94:	e7e0      	b.n	8006f58 <_strtod_l+0xb48>
 8006f96:	a30e      	add	r3, pc, #56	@ (adr r3, 8006fd0 <_strtod_l+0xbc0>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fda6 	bl	8000aec <__aeabi_dcmplt>
 8006fa0:	e798      	b.n	8006ed4 <_strtod_l+0xac4>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fa6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006fa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	f7ff ba6d 	b.w	800648a <_strtod_l+0x7a>
 8006fb0:	2a65      	cmp	r2, #101	@ 0x65
 8006fb2:	f43f ab66 	beq.w	8006682 <_strtod_l+0x272>
 8006fb6:	2a45      	cmp	r2, #69	@ 0x45
 8006fb8:	f43f ab63 	beq.w	8006682 <_strtod_l+0x272>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	f7ff bb9e 	b.w	80066fe <_strtod_l+0x2ee>
 8006fc2:	bf00      	nop
 8006fc4:	f3af 8000 	nop.w
 8006fc8:	ffc00000 	.word	0xffc00000
 8006fcc:	41dfffff 	.word	0x41dfffff
 8006fd0:	94a03595 	.word	0x94a03595
 8006fd4:	3fcfffff 	.word	0x3fcfffff

08006fd8 <_strtod_r>:
 8006fd8:	4b01      	ldr	r3, [pc, #4]	@ (8006fe0 <_strtod_r+0x8>)
 8006fda:	f7ff ba19 	b.w	8006410 <_strtod_l>
 8006fde:	bf00      	nop
 8006fe0:	20000068 	.word	0x20000068

08006fe4 <_strtol_l.constprop.0>:
 8006fe4:	2b24      	cmp	r3, #36	@ 0x24
 8006fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fea:	4686      	mov	lr, r0
 8006fec:	4690      	mov	r8, r2
 8006fee:	d801      	bhi.n	8006ff4 <_strtol_l.constprop.0+0x10>
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d106      	bne.n	8007002 <_strtol_l.constprop.0+0x1e>
 8006ff4:	f7fd fdba 	bl	8004b6c <__errno>
 8006ff8:	2316      	movs	r3, #22
 8006ffa:	6003      	str	r3, [r0, #0]
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007002:	4834      	ldr	r0, [pc, #208]	@ (80070d4 <_strtol_l.constprop.0+0xf0>)
 8007004:	460d      	mov	r5, r1
 8007006:	462a      	mov	r2, r5
 8007008:	f815 4b01 	ldrb.w	r4, [r5], #1
 800700c:	5d06      	ldrb	r6, [r0, r4]
 800700e:	f016 0608 	ands.w	r6, r6, #8
 8007012:	d1f8      	bne.n	8007006 <_strtol_l.constprop.0+0x22>
 8007014:	2c2d      	cmp	r4, #45	@ 0x2d
 8007016:	d12d      	bne.n	8007074 <_strtol_l.constprop.0+0x90>
 8007018:	782c      	ldrb	r4, [r5, #0]
 800701a:	2601      	movs	r6, #1
 800701c:	1c95      	adds	r5, r2, #2
 800701e:	f033 0210 	bics.w	r2, r3, #16
 8007022:	d109      	bne.n	8007038 <_strtol_l.constprop.0+0x54>
 8007024:	2c30      	cmp	r4, #48	@ 0x30
 8007026:	d12a      	bne.n	800707e <_strtol_l.constprop.0+0x9a>
 8007028:	782a      	ldrb	r2, [r5, #0]
 800702a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800702e:	2a58      	cmp	r2, #88	@ 0x58
 8007030:	d125      	bne.n	800707e <_strtol_l.constprop.0+0x9a>
 8007032:	786c      	ldrb	r4, [r5, #1]
 8007034:	2310      	movs	r3, #16
 8007036:	3502      	adds	r5, #2
 8007038:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800703c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007040:	2200      	movs	r2, #0
 8007042:	fbbc f9f3 	udiv	r9, ip, r3
 8007046:	4610      	mov	r0, r2
 8007048:	fb03 ca19 	mls	sl, r3, r9, ip
 800704c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007050:	2f09      	cmp	r7, #9
 8007052:	d81b      	bhi.n	800708c <_strtol_l.constprop.0+0xa8>
 8007054:	463c      	mov	r4, r7
 8007056:	42a3      	cmp	r3, r4
 8007058:	dd27      	ble.n	80070aa <_strtol_l.constprop.0+0xc6>
 800705a:	1c57      	adds	r7, r2, #1
 800705c:	d007      	beq.n	800706e <_strtol_l.constprop.0+0x8a>
 800705e:	4581      	cmp	r9, r0
 8007060:	d320      	bcc.n	80070a4 <_strtol_l.constprop.0+0xc0>
 8007062:	d101      	bne.n	8007068 <_strtol_l.constprop.0+0x84>
 8007064:	45a2      	cmp	sl, r4
 8007066:	db1d      	blt.n	80070a4 <_strtol_l.constprop.0+0xc0>
 8007068:	fb00 4003 	mla	r0, r0, r3, r4
 800706c:	2201      	movs	r2, #1
 800706e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007072:	e7eb      	b.n	800704c <_strtol_l.constprop.0+0x68>
 8007074:	2c2b      	cmp	r4, #43	@ 0x2b
 8007076:	bf04      	itt	eq
 8007078:	782c      	ldrbeq	r4, [r5, #0]
 800707a:	1c95      	addeq	r5, r2, #2
 800707c:	e7cf      	b.n	800701e <_strtol_l.constprop.0+0x3a>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1da      	bne.n	8007038 <_strtol_l.constprop.0+0x54>
 8007082:	2c30      	cmp	r4, #48	@ 0x30
 8007084:	bf0c      	ite	eq
 8007086:	2308      	moveq	r3, #8
 8007088:	230a      	movne	r3, #10
 800708a:	e7d5      	b.n	8007038 <_strtol_l.constprop.0+0x54>
 800708c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007090:	2f19      	cmp	r7, #25
 8007092:	d801      	bhi.n	8007098 <_strtol_l.constprop.0+0xb4>
 8007094:	3c37      	subs	r4, #55	@ 0x37
 8007096:	e7de      	b.n	8007056 <_strtol_l.constprop.0+0x72>
 8007098:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800709c:	2f19      	cmp	r7, #25
 800709e:	d804      	bhi.n	80070aa <_strtol_l.constprop.0+0xc6>
 80070a0:	3c57      	subs	r4, #87	@ 0x57
 80070a2:	e7d8      	b.n	8007056 <_strtol_l.constprop.0+0x72>
 80070a4:	f04f 32ff 	mov.w	r2, #4294967295
 80070a8:	e7e1      	b.n	800706e <_strtol_l.constprop.0+0x8a>
 80070aa:	1c53      	adds	r3, r2, #1
 80070ac:	d108      	bne.n	80070c0 <_strtol_l.constprop.0+0xdc>
 80070ae:	2322      	movs	r3, #34	@ 0x22
 80070b0:	f8ce 3000 	str.w	r3, [lr]
 80070b4:	4660      	mov	r0, ip
 80070b6:	f1b8 0f00 	cmp.w	r8, #0
 80070ba:	d0a0      	beq.n	8006ffe <_strtol_l.constprop.0+0x1a>
 80070bc:	1e69      	subs	r1, r5, #1
 80070be:	e006      	b.n	80070ce <_strtol_l.constprop.0+0xea>
 80070c0:	b106      	cbz	r6, 80070c4 <_strtol_l.constprop.0+0xe0>
 80070c2:	4240      	negs	r0, r0
 80070c4:	f1b8 0f00 	cmp.w	r8, #0
 80070c8:	d099      	beq.n	8006ffe <_strtol_l.constprop.0+0x1a>
 80070ca:	2a00      	cmp	r2, #0
 80070cc:	d1f6      	bne.n	80070bc <_strtol_l.constprop.0+0xd8>
 80070ce:	f8c8 1000 	str.w	r1, [r8]
 80070d2:	e794      	b.n	8006ffe <_strtol_l.constprop.0+0x1a>
 80070d4:	080088f9 	.word	0x080088f9

080070d8 <_strtol_r>:
 80070d8:	f7ff bf84 	b.w	8006fe4 <_strtol_l.constprop.0>

080070dc <__ssputs_r>:
 80070dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	688e      	ldr	r6, [r1, #8]
 80070e2:	461f      	mov	r7, r3
 80070e4:	42be      	cmp	r6, r7
 80070e6:	680b      	ldr	r3, [r1, #0]
 80070e8:	4682      	mov	sl, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	4690      	mov	r8, r2
 80070ee:	d82d      	bhi.n	800714c <__ssputs_r+0x70>
 80070f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070f8:	d026      	beq.n	8007148 <__ssputs_r+0x6c>
 80070fa:	6965      	ldr	r5, [r4, #20]
 80070fc:	6909      	ldr	r1, [r1, #16]
 80070fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007102:	eba3 0901 	sub.w	r9, r3, r1
 8007106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800710a:	1c7b      	adds	r3, r7, #1
 800710c:	444b      	add	r3, r9
 800710e:	106d      	asrs	r5, r5, #1
 8007110:	429d      	cmp	r5, r3
 8007112:	bf38      	it	cc
 8007114:	461d      	movcc	r5, r3
 8007116:	0553      	lsls	r3, r2, #21
 8007118:	d527      	bpl.n	800716a <__ssputs_r+0x8e>
 800711a:	4629      	mov	r1, r5
 800711c:	f7fe fc1c 	bl	8005958 <_malloc_r>
 8007120:	4606      	mov	r6, r0
 8007122:	b360      	cbz	r0, 800717e <__ssputs_r+0xa2>
 8007124:	6921      	ldr	r1, [r4, #16]
 8007126:	464a      	mov	r2, r9
 8007128:	f000 fc22 	bl	8007970 <memcpy>
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	6126      	str	r6, [r4, #16]
 800713a:	6165      	str	r5, [r4, #20]
 800713c:	444e      	add	r6, r9
 800713e:	eba5 0509 	sub.w	r5, r5, r9
 8007142:	6026      	str	r6, [r4, #0]
 8007144:	60a5      	str	r5, [r4, #8]
 8007146:	463e      	mov	r6, r7
 8007148:	42be      	cmp	r6, r7
 800714a:	d900      	bls.n	800714e <__ssputs_r+0x72>
 800714c:	463e      	mov	r6, r7
 800714e:	6820      	ldr	r0, [r4, #0]
 8007150:	4632      	mov	r2, r6
 8007152:	4641      	mov	r1, r8
 8007154:	f000 fbd0 	bl	80078f8 <memmove>
 8007158:	68a3      	ldr	r3, [r4, #8]
 800715a:	1b9b      	subs	r3, r3, r6
 800715c:	60a3      	str	r3, [r4, #8]
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	4433      	add	r3, r6
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	2000      	movs	r0, #0
 8007166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716a:	462a      	mov	r2, r5
 800716c:	f000 ff95 	bl	800809a <_realloc_r>
 8007170:	4606      	mov	r6, r0
 8007172:	2800      	cmp	r0, #0
 8007174:	d1e0      	bne.n	8007138 <__ssputs_r+0x5c>
 8007176:	6921      	ldr	r1, [r4, #16]
 8007178:	4650      	mov	r0, sl
 800717a:	f7fe fb79 	bl	8005870 <_free_r>
 800717e:	230c      	movs	r3, #12
 8007180:	f8ca 3000 	str.w	r3, [sl]
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800718a:	81a3      	strh	r3, [r4, #12]
 800718c:	f04f 30ff 	mov.w	r0, #4294967295
 8007190:	e7e9      	b.n	8007166 <__ssputs_r+0x8a>
	...

08007194 <_svfiprintf_r>:
 8007194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	4698      	mov	r8, r3
 800719a:	898b      	ldrh	r3, [r1, #12]
 800719c:	061b      	lsls	r3, r3, #24
 800719e:	b09d      	sub	sp, #116	@ 0x74
 80071a0:	4607      	mov	r7, r0
 80071a2:	460d      	mov	r5, r1
 80071a4:	4614      	mov	r4, r2
 80071a6:	d510      	bpl.n	80071ca <_svfiprintf_r+0x36>
 80071a8:	690b      	ldr	r3, [r1, #16]
 80071aa:	b973      	cbnz	r3, 80071ca <_svfiprintf_r+0x36>
 80071ac:	2140      	movs	r1, #64	@ 0x40
 80071ae:	f7fe fbd3 	bl	8005958 <_malloc_r>
 80071b2:	6028      	str	r0, [r5, #0]
 80071b4:	6128      	str	r0, [r5, #16]
 80071b6:	b930      	cbnz	r0, 80071c6 <_svfiprintf_r+0x32>
 80071b8:	230c      	movs	r3, #12
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	b01d      	add	sp, #116	@ 0x74
 80071c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c6:	2340      	movs	r3, #64	@ 0x40
 80071c8:	616b      	str	r3, [r5, #20]
 80071ca:	2300      	movs	r3, #0
 80071cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ce:	2320      	movs	r3, #32
 80071d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d8:	2330      	movs	r3, #48	@ 0x30
 80071da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007378 <_svfiprintf_r+0x1e4>
 80071de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071e2:	f04f 0901 	mov.w	r9, #1
 80071e6:	4623      	mov	r3, r4
 80071e8:	469a      	mov	sl, r3
 80071ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ee:	b10a      	cbz	r2, 80071f4 <_svfiprintf_r+0x60>
 80071f0:	2a25      	cmp	r2, #37	@ 0x25
 80071f2:	d1f9      	bne.n	80071e8 <_svfiprintf_r+0x54>
 80071f4:	ebba 0b04 	subs.w	fp, sl, r4
 80071f8:	d00b      	beq.n	8007212 <_svfiprintf_r+0x7e>
 80071fa:	465b      	mov	r3, fp
 80071fc:	4622      	mov	r2, r4
 80071fe:	4629      	mov	r1, r5
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff ff6b 	bl	80070dc <__ssputs_r>
 8007206:	3001      	adds	r0, #1
 8007208:	f000 80a7 	beq.w	800735a <_svfiprintf_r+0x1c6>
 800720c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800720e:	445a      	add	r2, fp
 8007210:	9209      	str	r2, [sp, #36]	@ 0x24
 8007212:	f89a 3000 	ldrb.w	r3, [sl]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 809f 	beq.w	800735a <_svfiprintf_r+0x1c6>
 800721c:	2300      	movs	r3, #0
 800721e:	f04f 32ff 	mov.w	r2, #4294967295
 8007222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007226:	f10a 0a01 	add.w	sl, sl, #1
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	9307      	str	r3, [sp, #28]
 800722e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007232:	931a      	str	r3, [sp, #104]	@ 0x68
 8007234:	4654      	mov	r4, sl
 8007236:	2205      	movs	r2, #5
 8007238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800723c:	484e      	ldr	r0, [pc, #312]	@ (8007378 <_svfiprintf_r+0x1e4>)
 800723e:	f7f8 ffcf 	bl	80001e0 <memchr>
 8007242:	9a04      	ldr	r2, [sp, #16]
 8007244:	b9d8      	cbnz	r0, 800727e <_svfiprintf_r+0xea>
 8007246:	06d0      	lsls	r0, r2, #27
 8007248:	bf44      	itt	mi
 800724a:	2320      	movmi	r3, #32
 800724c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007250:	0711      	lsls	r1, r2, #28
 8007252:	bf44      	itt	mi
 8007254:	232b      	movmi	r3, #43	@ 0x2b
 8007256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800725a:	f89a 3000 	ldrb.w	r3, [sl]
 800725e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007260:	d015      	beq.n	800728e <_svfiprintf_r+0xfa>
 8007262:	9a07      	ldr	r2, [sp, #28]
 8007264:	4654      	mov	r4, sl
 8007266:	2000      	movs	r0, #0
 8007268:	f04f 0c0a 	mov.w	ip, #10
 800726c:	4621      	mov	r1, r4
 800726e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007272:	3b30      	subs	r3, #48	@ 0x30
 8007274:	2b09      	cmp	r3, #9
 8007276:	d94b      	bls.n	8007310 <_svfiprintf_r+0x17c>
 8007278:	b1b0      	cbz	r0, 80072a8 <_svfiprintf_r+0x114>
 800727a:	9207      	str	r2, [sp, #28]
 800727c:	e014      	b.n	80072a8 <_svfiprintf_r+0x114>
 800727e:	eba0 0308 	sub.w	r3, r0, r8
 8007282:	fa09 f303 	lsl.w	r3, r9, r3
 8007286:	4313      	orrs	r3, r2
 8007288:	9304      	str	r3, [sp, #16]
 800728a:	46a2      	mov	sl, r4
 800728c:	e7d2      	b.n	8007234 <_svfiprintf_r+0xa0>
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	1d19      	adds	r1, r3, #4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	9103      	str	r1, [sp, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	bfbb      	ittet	lt
 800729a:	425b      	neglt	r3, r3
 800729c:	f042 0202 	orrlt.w	r2, r2, #2
 80072a0:	9307      	strge	r3, [sp, #28]
 80072a2:	9307      	strlt	r3, [sp, #28]
 80072a4:	bfb8      	it	lt
 80072a6:	9204      	strlt	r2, [sp, #16]
 80072a8:	7823      	ldrb	r3, [r4, #0]
 80072aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ac:	d10a      	bne.n	80072c4 <_svfiprintf_r+0x130>
 80072ae:	7863      	ldrb	r3, [r4, #1]
 80072b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072b2:	d132      	bne.n	800731a <_svfiprintf_r+0x186>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	1d1a      	adds	r2, r3, #4
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	9203      	str	r2, [sp, #12]
 80072bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072c0:	3402      	adds	r4, #2
 80072c2:	9305      	str	r3, [sp, #20]
 80072c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007388 <_svfiprintf_r+0x1f4>
 80072c8:	7821      	ldrb	r1, [r4, #0]
 80072ca:	2203      	movs	r2, #3
 80072cc:	4650      	mov	r0, sl
 80072ce:	f7f8 ff87 	bl	80001e0 <memchr>
 80072d2:	b138      	cbz	r0, 80072e4 <_svfiprintf_r+0x150>
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	eba0 000a 	sub.w	r0, r0, sl
 80072da:	2240      	movs	r2, #64	@ 0x40
 80072dc:	4082      	lsls	r2, r0
 80072de:	4313      	orrs	r3, r2
 80072e0:	3401      	adds	r4, #1
 80072e2:	9304      	str	r3, [sp, #16]
 80072e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e8:	4824      	ldr	r0, [pc, #144]	@ (800737c <_svfiprintf_r+0x1e8>)
 80072ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072ee:	2206      	movs	r2, #6
 80072f0:	f7f8 ff76 	bl	80001e0 <memchr>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d036      	beq.n	8007366 <_svfiprintf_r+0x1d2>
 80072f8:	4b21      	ldr	r3, [pc, #132]	@ (8007380 <_svfiprintf_r+0x1ec>)
 80072fa:	bb1b      	cbnz	r3, 8007344 <_svfiprintf_r+0x1b0>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	3307      	adds	r3, #7
 8007300:	f023 0307 	bic.w	r3, r3, #7
 8007304:	3308      	adds	r3, #8
 8007306:	9303      	str	r3, [sp, #12]
 8007308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730a:	4433      	add	r3, r6
 800730c:	9309      	str	r3, [sp, #36]	@ 0x24
 800730e:	e76a      	b.n	80071e6 <_svfiprintf_r+0x52>
 8007310:	fb0c 3202 	mla	r2, ip, r2, r3
 8007314:	460c      	mov	r4, r1
 8007316:	2001      	movs	r0, #1
 8007318:	e7a8      	b.n	800726c <_svfiprintf_r+0xd8>
 800731a:	2300      	movs	r3, #0
 800731c:	3401      	adds	r4, #1
 800731e:	9305      	str	r3, [sp, #20]
 8007320:	4619      	mov	r1, r3
 8007322:	f04f 0c0a 	mov.w	ip, #10
 8007326:	4620      	mov	r0, r4
 8007328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800732c:	3a30      	subs	r2, #48	@ 0x30
 800732e:	2a09      	cmp	r2, #9
 8007330:	d903      	bls.n	800733a <_svfiprintf_r+0x1a6>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0c6      	beq.n	80072c4 <_svfiprintf_r+0x130>
 8007336:	9105      	str	r1, [sp, #20]
 8007338:	e7c4      	b.n	80072c4 <_svfiprintf_r+0x130>
 800733a:	fb0c 2101 	mla	r1, ip, r1, r2
 800733e:	4604      	mov	r4, r0
 8007340:	2301      	movs	r3, #1
 8007342:	e7f0      	b.n	8007326 <_svfiprintf_r+0x192>
 8007344:	ab03      	add	r3, sp, #12
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	462a      	mov	r2, r5
 800734a:	4b0e      	ldr	r3, [pc, #56]	@ (8007384 <_svfiprintf_r+0x1f0>)
 800734c:	a904      	add	r1, sp, #16
 800734e:	4638      	mov	r0, r7
 8007350:	f7fc fcae 	bl	8003cb0 <_printf_float>
 8007354:	1c42      	adds	r2, r0, #1
 8007356:	4606      	mov	r6, r0
 8007358:	d1d6      	bne.n	8007308 <_svfiprintf_r+0x174>
 800735a:	89ab      	ldrh	r3, [r5, #12]
 800735c:	065b      	lsls	r3, r3, #25
 800735e:	f53f af2d 	bmi.w	80071bc <_svfiprintf_r+0x28>
 8007362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007364:	e72c      	b.n	80071c0 <_svfiprintf_r+0x2c>
 8007366:	ab03      	add	r3, sp, #12
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	462a      	mov	r2, r5
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <_svfiprintf_r+0x1f0>)
 800736e:	a904      	add	r1, sp, #16
 8007370:	4638      	mov	r0, r7
 8007372:	f7fc ff35 	bl	80041e0 <_printf_i>
 8007376:	e7ed      	b.n	8007354 <_svfiprintf_r+0x1c0>
 8007378:	080089f9 	.word	0x080089f9
 800737c:	08008a03 	.word	0x08008a03
 8007380:	08003cb1 	.word	0x08003cb1
 8007384:	080070dd 	.word	0x080070dd
 8007388:	080089ff 	.word	0x080089ff

0800738c <__sfputc_r>:
 800738c:	6893      	ldr	r3, [r2, #8]
 800738e:	3b01      	subs	r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	b410      	push	{r4}
 8007394:	6093      	str	r3, [r2, #8]
 8007396:	da08      	bge.n	80073aa <__sfputc_r+0x1e>
 8007398:	6994      	ldr	r4, [r2, #24]
 800739a:	42a3      	cmp	r3, r4
 800739c:	db01      	blt.n	80073a2 <__sfputc_r+0x16>
 800739e:	290a      	cmp	r1, #10
 80073a0:	d103      	bne.n	80073aa <__sfputc_r+0x1e>
 80073a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073a6:	f000 ba13 	b.w	80077d0 <__swbuf_r>
 80073aa:	6813      	ldr	r3, [r2, #0]
 80073ac:	1c58      	adds	r0, r3, #1
 80073ae:	6010      	str	r0, [r2, #0]
 80073b0:	7019      	strb	r1, [r3, #0]
 80073b2:	4608      	mov	r0, r1
 80073b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <__sfputs_r>:
 80073ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073bc:	4606      	mov	r6, r0
 80073be:	460f      	mov	r7, r1
 80073c0:	4614      	mov	r4, r2
 80073c2:	18d5      	adds	r5, r2, r3
 80073c4:	42ac      	cmp	r4, r5
 80073c6:	d101      	bne.n	80073cc <__sfputs_r+0x12>
 80073c8:	2000      	movs	r0, #0
 80073ca:	e007      	b.n	80073dc <__sfputs_r+0x22>
 80073cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d0:	463a      	mov	r2, r7
 80073d2:	4630      	mov	r0, r6
 80073d4:	f7ff ffda 	bl	800738c <__sfputc_r>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d1f3      	bne.n	80073c4 <__sfputs_r+0xa>
 80073dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073e0 <_vfiprintf_r>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	460d      	mov	r5, r1
 80073e6:	b09d      	sub	sp, #116	@ 0x74
 80073e8:	4614      	mov	r4, r2
 80073ea:	4698      	mov	r8, r3
 80073ec:	4606      	mov	r6, r0
 80073ee:	b118      	cbz	r0, 80073f8 <_vfiprintf_r+0x18>
 80073f0:	6a03      	ldr	r3, [r0, #32]
 80073f2:	b90b      	cbnz	r3, 80073f8 <_vfiprintf_r+0x18>
 80073f4:	f7fd fab4 	bl	8004960 <__sinit>
 80073f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073fa:	07d9      	lsls	r1, r3, #31
 80073fc:	d405      	bmi.n	800740a <_vfiprintf_r+0x2a>
 80073fe:	89ab      	ldrh	r3, [r5, #12]
 8007400:	059a      	lsls	r2, r3, #22
 8007402:	d402      	bmi.n	800740a <_vfiprintf_r+0x2a>
 8007404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007406:	f7fd fbdc 	bl	8004bc2 <__retarget_lock_acquire_recursive>
 800740a:	89ab      	ldrh	r3, [r5, #12]
 800740c:	071b      	lsls	r3, r3, #28
 800740e:	d501      	bpl.n	8007414 <_vfiprintf_r+0x34>
 8007410:	692b      	ldr	r3, [r5, #16]
 8007412:	b99b      	cbnz	r3, 800743c <_vfiprintf_r+0x5c>
 8007414:	4629      	mov	r1, r5
 8007416:	4630      	mov	r0, r6
 8007418:	f000 fa18 	bl	800784c <__swsetup_r>
 800741c:	b170      	cbz	r0, 800743c <_vfiprintf_r+0x5c>
 800741e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007420:	07dc      	lsls	r4, r3, #31
 8007422:	d504      	bpl.n	800742e <_vfiprintf_r+0x4e>
 8007424:	f04f 30ff 	mov.w	r0, #4294967295
 8007428:	b01d      	add	sp, #116	@ 0x74
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742e:	89ab      	ldrh	r3, [r5, #12]
 8007430:	0598      	lsls	r0, r3, #22
 8007432:	d4f7      	bmi.n	8007424 <_vfiprintf_r+0x44>
 8007434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007436:	f7fd fbc5 	bl	8004bc4 <__retarget_lock_release_recursive>
 800743a:	e7f3      	b.n	8007424 <_vfiprintf_r+0x44>
 800743c:	2300      	movs	r3, #0
 800743e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007440:	2320      	movs	r3, #32
 8007442:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007446:	f8cd 800c 	str.w	r8, [sp, #12]
 800744a:	2330      	movs	r3, #48	@ 0x30
 800744c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075fc <_vfiprintf_r+0x21c>
 8007450:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007454:	f04f 0901 	mov.w	r9, #1
 8007458:	4623      	mov	r3, r4
 800745a:	469a      	mov	sl, r3
 800745c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007460:	b10a      	cbz	r2, 8007466 <_vfiprintf_r+0x86>
 8007462:	2a25      	cmp	r2, #37	@ 0x25
 8007464:	d1f9      	bne.n	800745a <_vfiprintf_r+0x7a>
 8007466:	ebba 0b04 	subs.w	fp, sl, r4
 800746a:	d00b      	beq.n	8007484 <_vfiprintf_r+0xa4>
 800746c:	465b      	mov	r3, fp
 800746e:	4622      	mov	r2, r4
 8007470:	4629      	mov	r1, r5
 8007472:	4630      	mov	r0, r6
 8007474:	f7ff ffa1 	bl	80073ba <__sfputs_r>
 8007478:	3001      	adds	r0, #1
 800747a:	f000 80a7 	beq.w	80075cc <_vfiprintf_r+0x1ec>
 800747e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007480:	445a      	add	r2, fp
 8007482:	9209      	str	r2, [sp, #36]	@ 0x24
 8007484:	f89a 3000 	ldrb.w	r3, [sl]
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 809f 	beq.w	80075cc <_vfiprintf_r+0x1ec>
 800748e:	2300      	movs	r3, #0
 8007490:	f04f 32ff 	mov.w	r2, #4294967295
 8007494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007498:	f10a 0a01 	add.w	sl, sl, #1
 800749c:	9304      	str	r3, [sp, #16]
 800749e:	9307      	str	r3, [sp, #28]
 80074a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80074a6:	4654      	mov	r4, sl
 80074a8:	2205      	movs	r2, #5
 80074aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ae:	4853      	ldr	r0, [pc, #332]	@ (80075fc <_vfiprintf_r+0x21c>)
 80074b0:	f7f8 fe96 	bl	80001e0 <memchr>
 80074b4:	9a04      	ldr	r2, [sp, #16]
 80074b6:	b9d8      	cbnz	r0, 80074f0 <_vfiprintf_r+0x110>
 80074b8:	06d1      	lsls	r1, r2, #27
 80074ba:	bf44      	itt	mi
 80074bc:	2320      	movmi	r3, #32
 80074be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074c2:	0713      	lsls	r3, r2, #28
 80074c4:	bf44      	itt	mi
 80074c6:	232b      	movmi	r3, #43	@ 0x2b
 80074c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074cc:	f89a 3000 	ldrb.w	r3, [sl]
 80074d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80074d2:	d015      	beq.n	8007500 <_vfiprintf_r+0x120>
 80074d4:	9a07      	ldr	r2, [sp, #28]
 80074d6:	4654      	mov	r4, sl
 80074d8:	2000      	movs	r0, #0
 80074da:	f04f 0c0a 	mov.w	ip, #10
 80074de:	4621      	mov	r1, r4
 80074e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e4:	3b30      	subs	r3, #48	@ 0x30
 80074e6:	2b09      	cmp	r3, #9
 80074e8:	d94b      	bls.n	8007582 <_vfiprintf_r+0x1a2>
 80074ea:	b1b0      	cbz	r0, 800751a <_vfiprintf_r+0x13a>
 80074ec:	9207      	str	r2, [sp, #28]
 80074ee:	e014      	b.n	800751a <_vfiprintf_r+0x13a>
 80074f0:	eba0 0308 	sub.w	r3, r0, r8
 80074f4:	fa09 f303 	lsl.w	r3, r9, r3
 80074f8:	4313      	orrs	r3, r2
 80074fa:	9304      	str	r3, [sp, #16]
 80074fc:	46a2      	mov	sl, r4
 80074fe:	e7d2      	b.n	80074a6 <_vfiprintf_r+0xc6>
 8007500:	9b03      	ldr	r3, [sp, #12]
 8007502:	1d19      	adds	r1, r3, #4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	9103      	str	r1, [sp, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	bfbb      	ittet	lt
 800750c:	425b      	neglt	r3, r3
 800750e:	f042 0202 	orrlt.w	r2, r2, #2
 8007512:	9307      	strge	r3, [sp, #28]
 8007514:	9307      	strlt	r3, [sp, #28]
 8007516:	bfb8      	it	lt
 8007518:	9204      	strlt	r2, [sp, #16]
 800751a:	7823      	ldrb	r3, [r4, #0]
 800751c:	2b2e      	cmp	r3, #46	@ 0x2e
 800751e:	d10a      	bne.n	8007536 <_vfiprintf_r+0x156>
 8007520:	7863      	ldrb	r3, [r4, #1]
 8007522:	2b2a      	cmp	r3, #42	@ 0x2a
 8007524:	d132      	bne.n	800758c <_vfiprintf_r+0x1ac>
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	1d1a      	adds	r2, r3, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	9203      	str	r2, [sp, #12]
 800752e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007532:	3402      	adds	r4, #2
 8007534:	9305      	str	r3, [sp, #20]
 8007536:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800760c <_vfiprintf_r+0x22c>
 800753a:	7821      	ldrb	r1, [r4, #0]
 800753c:	2203      	movs	r2, #3
 800753e:	4650      	mov	r0, sl
 8007540:	f7f8 fe4e 	bl	80001e0 <memchr>
 8007544:	b138      	cbz	r0, 8007556 <_vfiprintf_r+0x176>
 8007546:	9b04      	ldr	r3, [sp, #16]
 8007548:	eba0 000a 	sub.w	r0, r0, sl
 800754c:	2240      	movs	r2, #64	@ 0x40
 800754e:	4082      	lsls	r2, r0
 8007550:	4313      	orrs	r3, r2
 8007552:	3401      	adds	r4, #1
 8007554:	9304      	str	r3, [sp, #16]
 8007556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755a:	4829      	ldr	r0, [pc, #164]	@ (8007600 <_vfiprintf_r+0x220>)
 800755c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007560:	2206      	movs	r2, #6
 8007562:	f7f8 fe3d 	bl	80001e0 <memchr>
 8007566:	2800      	cmp	r0, #0
 8007568:	d03f      	beq.n	80075ea <_vfiprintf_r+0x20a>
 800756a:	4b26      	ldr	r3, [pc, #152]	@ (8007604 <_vfiprintf_r+0x224>)
 800756c:	bb1b      	cbnz	r3, 80075b6 <_vfiprintf_r+0x1d6>
 800756e:	9b03      	ldr	r3, [sp, #12]
 8007570:	3307      	adds	r3, #7
 8007572:	f023 0307 	bic.w	r3, r3, #7
 8007576:	3308      	adds	r3, #8
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757c:	443b      	add	r3, r7
 800757e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007580:	e76a      	b.n	8007458 <_vfiprintf_r+0x78>
 8007582:	fb0c 3202 	mla	r2, ip, r2, r3
 8007586:	460c      	mov	r4, r1
 8007588:	2001      	movs	r0, #1
 800758a:	e7a8      	b.n	80074de <_vfiprintf_r+0xfe>
 800758c:	2300      	movs	r3, #0
 800758e:	3401      	adds	r4, #1
 8007590:	9305      	str	r3, [sp, #20]
 8007592:	4619      	mov	r1, r3
 8007594:	f04f 0c0a 	mov.w	ip, #10
 8007598:	4620      	mov	r0, r4
 800759a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800759e:	3a30      	subs	r2, #48	@ 0x30
 80075a0:	2a09      	cmp	r2, #9
 80075a2:	d903      	bls.n	80075ac <_vfiprintf_r+0x1cc>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0c6      	beq.n	8007536 <_vfiprintf_r+0x156>
 80075a8:	9105      	str	r1, [sp, #20]
 80075aa:	e7c4      	b.n	8007536 <_vfiprintf_r+0x156>
 80075ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80075b0:	4604      	mov	r4, r0
 80075b2:	2301      	movs	r3, #1
 80075b4:	e7f0      	b.n	8007598 <_vfiprintf_r+0x1b8>
 80075b6:	ab03      	add	r3, sp, #12
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	462a      	mov	r2, r5
 80075bc:	4b12      	ldr	r3, [pc, #72]	@ (8007608 <_vfiprintf_r+0x228>)
 80075be:	a904      	add	r1, sp, #16
 80075c0:	4630      	mov	r0, r6
 80075c2:	f7fc fb75 	bl	8003cb0 <_printf_float>
 80075c6:	4607      	mov	r7, r0
 80075c8:	1c78      	adds	r0, r7, #1
 80075ca:	d1d6      	bne.n	800757a <_vfiprintf_r+0x19a>
 80075cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ce:	07d9      	lsls	r1, r3, #31
 80075d0:	d405      	bmi.n	80075de <_vfiprintf_r+0x1fe>
 80075d2:	89ab      	ldrh	r3, [r5, #12]
 80075d4:	059a      	lsls	r2, r3, #22
 80075d6:	d402      	bmi.n	80075de <_vfiprintf_r+0x1fe>
 80075d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075da:	f7fd faf3 	bl	8004bc4 <__retarget_lock_release_recursive>
 80075de:	89ab      	ldrh	r3, [r5, #12]
 80075e0:	065b      	lsls	r3, r3, #25
 80075e2:	f53f af1f 	bmi.w	8007424 <_vfiprintf_r+0x44>
 80075e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075e8:	e71e      	b.n	8007428 <_vfiprintf_r+0x48>
 80075ea:	ab03      	add	r3, sp, #12
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	462a      	mov	r2, r5
 80075f0:	4b05      	ldr	r3, [pc, #20]	@ (8007608 <_vfiprintf_r+0x228>)
 80075f2:	a904      	add	r1, sp, #16
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7fc fdf3 	bl	80041e0 <_printf_i>
 80075fa:	e7e4      	b.n	80075c6 <_vfiprintf_r+0x1e6>
 80075fc:	080089f9 	.word	0x080089f9
 8007600:	08008a03 	.word	0x08008a03
 8007604:	08003cb1 	.word	0x08003cb1
 8007608:	080073bb 	.word	0x080073bb
 800760c:	080089ff 	.word	0x080089ff

08007610 <__sflush_r>:
 8007610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007618:	0716      	lsls	r6, r2, #28
 800761a:	4605      	mov	r5, r0
 800761c:	460c      	mov	r4, r1
 800761e:	d454      	bmi.n	80076ca <__sflush_r+0xba>
 8007620:	684b      	ldr	r3, [r1, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	dc02      	bgt.n	800762c <__sflush_r+0x1c>
 8007626:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	dd48      	ble.n	80076be <__sflush_r+0xae>
 800762c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800762e:	2e00      	cmp	r6, #0
 8007630:	d045      	beq.n	80076be <__sflush_r+0xae>
 8007632:	2300      	movs	r3, #0
 8007634:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007638:	682f      	ldr	r7, [r5, #0]
 800763a:	6a21      	ldr	r1, [r4, #32]
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	d030      	beq.n	80076a2 <__sflush_r+0x92>
 8007640:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	0759      	lsls	r1, r3, #29
 8007646:	d505      	bpl.n	8007654 <__sflush_r+0x44>
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	1ad2      	subs	r2, r2, r3
 800764c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800764e:	b10b      	cbz	r3, 8007654 <__sflush_r+0x44>
 8007650:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007652:	1ad2      	subs	r2, r2, r3
 8007654:	2300      	movs	r3, #0
 8007656:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007658:	6a21      	ldr	r1, [r4, #32]
 800765a:	4628      	mov	r0, r5
 800765c:	47b0      	blx	r6
 800765e:	1c43      	adds	r3, r0, #1
 8007660:	89a3      	ldrh	r3, [r4, #12]
 8007662:	d106      	bne.n	8007672 <__sflush_r+0x62>
 8007664:	6829      	ldr	r1, [r5, #0]
 8007666:	291d      	cmp	r1, #29
 8007668:	d82b      	bhi.n	80076c2 <__sflush_r+0xb2>
 800766a:	4a2a      	ldr	r2, [pc, #168]	@ (8007714 <__sflush_r+0x104>)
 800766c:	410a      	asrs	r2, r1
 800766e:	07d6      	lsls	r6, r2, #31
 8007670:	d427      	bmi.n	80076c2 <__sflush_r+0xb2>
 8007672:	2200      	movs	r2, #0
 8007674:	6062      	str	r2, [r4, #4]
 8007676:	04d9      	lsls	r1, r3, #19
 8007678:	6922      	ldr	r2, [r4, #16]
 800767a:	6022      	str	r2, [r4, #0]
 800767c:	d504      	bpl.n	8007688 <__sflush_r+0x78>
 800767e:	1c42      	adds	r2, r0, #1
 8007680:	d101      	bne.n	8007686 <__sflush_r+0x76>
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	b903      	cbnz	r3, 8007688 <__sflush_r+0x78>
 8007686:	6560      	str	r0, [r4, #84]	@ 0x54
 8007688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800768a:	602f      	str	r7, [r5, #0]
 800768c:	b1b9      	cbz	r1, 80076be <__sflush_r+0xae>
 800768e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007692:	4299      	cmp	r1, r3
 8007694:	d002      	beq.n	800769c <__sflush_r+0x8c>
 8007696:	4628      	mov	r0, r5
 8007698:	f7fe f8ea 	bl	8005870 <_free_r>
 800769c:	2300      	movs	r3, #0
 800769e:	6363      	str	r3, [r4, #52]	@ 0x34
 80076a0:	e00d      	b.n	80076be <__sflush_r+0xae>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4628      	mov	r0, r5
 80076a6:	47b0      	blx	r6
 80076a8:	4602      	mov	r2, r0
 80076aa:	1c50      	adds	r0, r2, #1
 80076ac:	d1c9      	bne.n	8007642 <__sflush_r+0x32>
 80076ae:	682b      	ldr	r3, [r5, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0c6      	beq.n	8007642 <__sflush_r+0x32>
 80076b4:	2b1d      	cmp	r3, #29
 80076b6:	d001      	beq.n	80076bc <__sflush_r+0xac>
 80076b8:	2b16      	cmp	r3, #22
 80076ba:	d11e      	bne.n	80076fa <__sflush_r+0xea>
 80076bc:	602f      	str	r7, [r5, #0]
 80076be:	2000      	movs	r0, #0
 80076c0:	e022      	b.n	8007708 <__sflush_r+0xf8>
 80076c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076c6:	b21b      	sxth	r3, r3
 80076c8:	e01b      	b.n	8007702 <__sflush_r+0xf2>
 80076ca:	690f      	ldr	r7, [r1, #16]
 80076cc:	2f00      	cmp	r7, #0
 80076ce:	d0f6      	beq.n	80076be <__sflush_r+0xae>
 80076d0:	0793      	lsls	r3, r2, #30
 80076d2:	680e      	ldr	r6, [r1, #0]
 80076d4:	bf08      	it	eq
 80076d6:	694b      	ldreq	r3, [r1, #20]
 80076d8:	600f      	str	r7, [r1, #0]
 80076da:	bf18      	it	ne
 80076dc:	2300      	movne	r3, #0
 80076de:	eba6 0807 	sub.w	r8, r6, r7
 80076e2:	608b      	str	r3, [r1, #8]
 80076e4:	f1b8 0f00 	cmp.w	r8, #0
 80076e8:	dde9      	ble.n	80076be <__sflush_r+0xae>
 80076ea:	6a21      	ldr	r1, [r4, #32]
 80076ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076ee:	4643      	mov	r3, r8
 80076f0:	463a      	mov	r2, r7
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b0      	blx	r6
 80076f6:	2800      	cmp	r0, #0
 80076f8:	dc08      	bgt.n	800770c <__sflush_r+0xfc>
 80076fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007702:	81a3      	strh	r3, [r4, #12]
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770c:	4407      	add	r7, r0
 800770e:	eba8 0800 	sub.w	r8, r8, r0
 8007712:	e7e7      	b.n	80076e4 <__sflush_r+0xd4>
 8007714:	dfbffffe 	.word	0xdfbffffe

08007718 <_fflush_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	690b      	ldr	r3, [r1, #16]
 800771c:	4605      	mov	r5, r0
 800771e:	460c      	mov	r4, r1
 8007720:	b913      	cbnz	r3, 8007728 <_fflush_r+0x10>
 8007722:	2500      	movs	r5, #0
 8007724:	4628      	mov	r0, r5
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	b118      	cbz	r0, 8007732 <_fflush_r+0x1a>
 800772a:	6a03      	ldr	r3, [r0, #32]
 800772c:	b90b      	cbnz	r3, 8007732 <_fflush_r+0x1a>
 800772e:	f7fd f917 	bl	8004960 <__sinit>
 8007732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f3      	beq.n	8007722 <_fflush_r+0xa>
 800773a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800773c:	07d0      	lsls	r0, r2, #31
 800773e:	d404      	bmi.n	800774a <_fflush_r+0x32>
 8007740:	0599      	lsls	r1, r3, #22
 8007742:	d402      	bmi.n	800774a <_fflush_r+0x32>
 8007744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007746:	f7fd fa3c 	bl	8004bc2 <__retarget_lock_acquire_recursive>
 800774a:	4628      	mov	r0, r5
 800774c:	4621      	mov	r1, r4
 800774e:	f7ff ff5f 	bl	8007610 <__sflush_r>
 8007752:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007754:	07da      	lsls	r2, r3, #31
 8007756:	4605      	mov	r5, r0
 8007758:	d4e4      	bmi.n	8007724 <_fflush_r+0xc>
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	059b      	lsls	r3, r3, #22
 800775e:	d4e1      	bmi.n	8007724 <_fflush_r+0xc>
 8007760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007762:	f7fd fa2f 	bl	8004bc4 <__retarget_lock_release_recursive>
 8007766:	e7dd      	b.n	8007724 <_fflush_r+0xc>

08007768 <_putc_r>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	460d      	mov	r5, r1
 800776c:	4614      	mov	r4, r2
 800776e:	4606      	mov	r6, r0
 8007770:	b118      	cbz	r0, 800777a <_putc_r+0x12>
 8007772:	6a03      	ldr	r3, [r0, #32]
 8007774:	b90b      	cbnz	r3, 800777a <_putc_r+0x12>
 8007776:	f7fd f8f3 	bl	8004960 <__sinit>
 800777a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800777c:	07d8      	lsls	r0, r3, #31
 800777e:	d405      	bmi.n	800778c <_putc_r+0x24>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	0599      	lsls	r1, r3, #22
 8007784:	d402      	bmi.n	800778c <_putc_r+0x24>
 8007786:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007788:	f7fd fa1b 	bl	8004bc2 <__retarget_lock_acquire_recursive>
 800778c:	68a3      	ldr	r3, [r4, #8]
 800778e:	3b01      	subs	r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	60a3      	str	r3, [r4, #8]
 8007794:	da05      	bge.n	80077a2 <_putc_r+0x3a>
 8007796:	69a2      	ldr	r2, [r4, #24]
 8007798:	4293      	cmp	r3, r2
 800779a:	db12      	blt.n	80077c2 <_putc_r+0x5a>
 800779c:	b2eb      	uxtb	r3, r5
 800779e:	2b0a      	cmp	r3, #10
 80077a0:	d00f      	beq.n	80077c2 <_putc_r+0x5a>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	6022      	str	r2, [r4, #0]
 80077a8:	701d      	strb	r5, [r3, #0]
 80077aa:	b2ed      	uxtb	r5, r5
 80077ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077ae:	07da      	lsls	r2, r3, #31
 80077b0:	d405      	bmi.n	80077be <_putc_r+0x56>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	059b      	lsls	r3, r3, #22
 80077b6:	d402      	bmi.n	80077be <_putc_r+0x56>
 80077b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ba:	f7fd fa03 	bl	8004bc4 <__retarget_lock_release_recursive>
 80077be:	4628      	mov	r0, r5
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
 80077c2:	4629      	mov	r1, r5
 80077c4:	4622      	mov	r2, r4
 80077c6:	4630      	mov	r0, r6
 80077c8:	f000 f802 	bl	80077d0 <__swbuf_r>
 80077cc:	4605      	mov	r5, r0
 80077ce:	e7ed      	b.n	80077ac <_putc_r+0x44>

080077d0 <__swbuf_r>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	460e      	mov	r6, r1
 80077d4:	4614      	mov	r4, r2
 80077d6:	4605      	mov	r5, r0
 80077d8:	b118      	cbz	r0, 80077e2 <__swbuf_r+0x12>
 80077da:	6a03      	ldr	r3, [r0, #32]
 80077dc:	b90b      	cbnz	r3, 80077e2 <__swbuf_r+0x12>
 80077de:	f7fd f8bf 	bl	8004960 <__sinit>
 80077e2:	69a3      	ldr	r3, [r4, #24]
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	071a      	lsls	r2, r3, #28
 80077ea:	d501      	bpl.n	80077f0 <__swbuf_r+0x20>
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	b943      	cbnz	r3, 8007802 <__swbuf_r+0x32>
 80077f0:	4621      	mov	r1, r4
 80077f2:	4628      	mov	r0, r5
 80077f4:	f000 f82a 	bl	800784c <__swsetup_r>
 80077f8:	b118      	cbz	r0, 8007802 <__swbuf_r+0x32>
 80077fa:	f04f 37ff 	mov.w	r7, #4294967295
 80077fe:	4638      	mov	r0, r7
 8007800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	6922      	ldr	r2, [r4, #16]
 8007806:	1a98      	subs	r0, r3, r2
 8007808:	6963      	ldr	r3, [r4, #20]
 800780a:	b2f6      	uxtb	r6, r6
 800780c:	4283      	cmp	r3, r0
 800780e:	4637      	mov	r7, r6
 8007810:	dc05      	bgt.n	800781e <__swbuf_r+0x4e>
 8007812:	4621      	mov	r1, r4
 8007814:	4628      	mov	r0, r5
 8007816:	f7ff ff7f 	bl	8007718 <_fflush_r>
 800781a:	2800      	cmp	r0, #0
 800781c:	d1ed      	bne.n	80077fa <__swbuf_r+0x2a>
 800781e:	68a3      	ldr	r3, [r4, #8]
 8007820:	3b01      	subs	r3, #1
 8007822:	60a3      	str	r3, [r4, #8]
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	6022      	str	r2, [r4, #0]
 800782a:	701e      	strb	r6, [r3, #0]
 800782c:	6962      	ldr	r2, [r4, #20]
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	429a      	cmp	r2, r3
 8007832:	d004      	beq.n	800783e <__swbuf_r+0x6e>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	07db      	lsls	r3, r3, #31
 8007838:	d5e1      	bpl.n	80077fe <__swbuf_r+0x2e>
 800783a:	2e0a      	cmp	r6, #10
 800783c:	d1df      	bne.n	80077fe <__swbuf_r+0x2e>
 800783e:	4621      	mov	r1, r4
 8007840:	4628      	mov	r0, r5
 8007842:	f7ff ff69 	bl	8007718 <_fflush_r>
 8007846:	2800      	cmp	r0, #0
 8007848:	d0d9      	beq.n	80077fe <__swbuf_r+0x2e>
 800784a:	e7d6      	b.n	80077fa <__swbuf_r+0x2a>

0800784c <__swsetup_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	4b29      	ldr	r3, [pc, #164]	@ (80078f4 <__swsetup_r+0xa8>)
 8007850:	4605      	mov	r5, r0
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	460c      	mov	r4, r1
 8007856:	b118      	cbz	r0, 8007860 <__swsetup_r+0x14>
 8007858:	6a03      	ldr	r3, [r0, #32]
 800785a:	b90b      	cbnz	r3, 8007860 <__swsetup_r+0x14>
 800785c:	f7fd f880 	bl	8004960 <__sinit>
 8007860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007864:	0719      	lsls	r1, r3, #28
 8007866:	d422      	bmi.n	80078ae <__swsetup_r+0x62>
 8007868:	06da      	lsls	r2, r3, #27
 800786a:	d407      	bmi.n	800787c <__swsetup_r+0x30>
 800786c:	2209      	movs	r2, #9
 800786e:	602a      	str	r2, [r5, #0]
 8007870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007874:	81a3      	strh	r3, [r4, #12]
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	e033      	b.n	80078e4 <__swsetup_r+0x98>
 800787c:	0758      	lsls	r0, r3, #29
 800787e:	d512      	bpl.n	80078a6 <__swsetup_r+0x5a>
 8007880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007882:	b141      	cbz	r1, 8007896 <__swsetup_r+0x4a>
 8007884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007888:	4299      	cmp	r1, r3
 800788a:	d002      	beq.n	8007892 <__swsetup_r+0x46>
 800788c:	4628      	mov	r0, r5
 800788e:	f7fd ffef 	bl	8005870 <_free_r>
 8007892:	2300      	movs	r3, #0
 8007894:	6363      	str	r3, [r4, #52]	@ 0x34
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	2300      	movs	r3, #0
 80078a0:	6063      	str	r3, [r4, #4]
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	f043 0308 	orr.w	r3, r3, #8
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	6923      	ldr	r3, [r4, #16]
 80078b0:	b94b      	cbnz	r3, 80078c6 <__swsetup_r+0x7a>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078bc:	d003      	beq.n	80078c6 <__swsetup_r+0x7a>
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 fc5d 	bl	8008180 <__smakebuf_r>
 80078c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ca:	f013 0201 	ands.w	r2, r3, #1
 80078ce:	d00a      	beq.n	80078e6 <__swsetup_r+0x9a>
 80078d0:	2200      	movs	r2, #0
 80078d2:	60a2      	str	r2, [r4, #8]
 80078d4:	6962      	ldr	r2, [r4, #20]
 80078d6:	4252      	negs	r2, r2
 80078d8:	61a2      	str	r2, [r4, #24]
 80078da:	6922      	ldr	r2, [r4, #16]
 80078dc:	b942      	cbnz	r2, 80078f0 <__swsetup_r+0xa4>
 80078de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078e2:	d1c5      	bne.n	8007870 <__swsetup_r+0x24>
 80078e4:	bd38      	pop	{r3, r4, r5, pc}
 80078e6:	0799      	lsls	r1, r3, #30
 80078e8:	bf58      	it	pl
 80078ea:	6962      	ldrpl	r2, [r4, #20]
 80078ec:	60a2      	str	r2, [r4, #8]
 80078ee:	e7f4      	b.n	80078da <__swsetup_r+0x8e>
 80078f0:	2000      	movs	r0, #0
 80078f2:	e7f7      	b.n	80078e4 <__swsetup_r+0x98>
 80078f4:	20000018 	.word	0x20000018

080078f8 <memmove>:
 80078f8:	4288      	cmp	r0, r1
 80078fa:	b510      	push	{r4, lr}
 80078fc:	eb01 0402 	add.w	r4, r1, r2
 8007900:	d902      	bls.n	8007908 <memmove+0x10>
 8007902:	4284      	cmp	r4, r0
 8007904:	4623      	mov	r3, r4
 8007906:	d807      	bhi.n	8007918 <memmove+0x20>
 8007908:	1e43      	subs	r3, r0, #1
 800790a:	42a1      	cmp	r1, r4
 800790c:	d008      	beq.n	8007920 <memmove+0x28>
 800790e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007916:	e7f8      	b.n	800790a <memmove+0x12>
 8007918:	4402      	add	r2, r0
 800791a:	4601      	mov	r1, r0
 800791c:	428a      	cmp	r2, r1
 800791e:	d100      	bne.n	8007922 <memmove+0x2a>
 8007920:	bd10      	pop	{r4, pc}
 8007922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800792a:	e7f7      	b.n	800791c <memmove+0x24>

0800792c <strncmp>:
 800792c:	b510      	push	{r4, lr}
 800792e:	b16a      	cbz	r2, 800794c <strncmp+0x20>
 8007930:	3901      	subs	r1, #1
 8007932:	1884      	adds	r4, r0, r2
 8007934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007938:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800793c:	429a      	cmp	r2, r3
 800793e:	d103      	bne.n	8007948 <strncmp+0x1c>
 8007940:	42a0      	cmp	r0, r4
 8007942:	d001      	beq.n	8007948 <strncmp+0x1c>
 8007944:	2a00      	cmp	r2, #0
 8007946:	d1f5      	bne.n	8007934 <strncmp+0x8>
 8007948:	1ad0      	subs	r0, r2, r3
 800794a:	bd10      	pop	{r4, pc}
 800794c:	4610      	mov	r0, r2
 800794e:	e7fc      	b.n	800794a <strncmp+0x1e>

08007950 <_sbrk_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d06      	ldr	r5, [pc, #24]	@ (800796c <_sbrk_r+0x1c>)
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	602b      	str	r3, [r5, #0]
 800795c:	f7fb fac0 	bl	8002ee0 <_sbrk>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_sbrk_r+0x1a>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_sbrk_r+0x1a>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20000688 	.word	0x20000688

08007970 <memcpy>:
 8007970:	440a      	add	r2, r1
 8007972:	4291      	cmp	r1, r2
 8007974:	f100 33ff 	add.w	r3, r0, #4294967295
 8007978:	d100      	bne.n	800797c <memcpy+0xc>
 800797a:	4770      	bx	lr
 800797c:	b510      	push	{r4, lr}
 800797e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007986:	4291      	cmp	r1, r2
 8007988:	d1f9      	bne.n	800797e <memcpy+0xe>
 800798a:	bd10      	pop	{r4, pc}
 800798c:	0000      	movs	r0, r0
	...

08007990 <nan>:
 8007990:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007998 <nan+0x8>
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	00000000 	.word	0x00000000
 800799c:	7ff80000 	.word	0x7ff80000

080079a0 <__assert_func>:
 80079a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079a2:	4614      	mov	r4, r2
 80079a4:	461a      	mov	r2, r3
 80079a6:	4b09      	ldr	r3, [pc, #36]	@ (80079cc <__assert_func+0x2c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4605      	mov	r5, r0
 80079ac:	68d8      	ldr	r0, [r3, #12]
 80079ae:	b954      	cbnz	r4, 80079c6 <__assert_func+0x26>
 80079b0:	4b07      	ldr	r3, [pc, #28]	@ (80079d0 <__assert_func+0x30>)
 80079b2:	461c      	mov	r4, r3
 80079b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079b8:	9100      	str	r1, [sp, #0]
 80079ba:	462b      	mov	r3, r5
 80079bc:	4905      	ldr	r1, [pc, #20]	@ (80079d4 <__assert_func+0x34>)
 80079be:	f000 fba7 	bl	8008110 <fiprintf>
 80079c2:	f000 fc3b 	bl	800823c <abort>
 80079c6:	4b04      	ldr	r3, [pc, #16]	@ (80079d8 <__assert_func+0x38>)
 80079c8:	e7f4      	b.n	80079b4 <__assert_func+0x14>
 80079ca:	bf00      	nop
 80079cc:	20000018 	.word	0x20000018
 80079d0:	08008a4d 	.word	0x08008a4d
 80079d4:	08008a1f 	.word	0x08008a1f
 80079d8:	08008a12 	.word	0x08008a12

080079dc <_calloc_r>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	fba1 5402 	umull	r5, r4, r1, r2
 80079e2:	b93c      	cbnz	r4, 80079f4 <_calloc_r+0x18>
 80079e4:	4629      	mov	r1, r5
 80079e6:	f7fd ffb7 	bl	8005958 <_malloc_r>
 80079ea:	4606      	mov	r6, r0
 80079ec:	b928      	cbnz	r0, 80079fa <_calloc_r+0x1e>
 80079ee:	2600      	movs	r6, #0
 80079f0:	4630      	mov	r0, r6
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	220c      	movs	r2, #12
 80079f6:	6002      	str	r2, [r0, #0]
 80079f8:	e7f9      	b.n	80079ee <_calloc_r+0x12>
 80079fa:	462a      	mov	r2, r5
 80079fc:	4621      	mov	r1, r4
 80079fe:	f7fd f862 	bl	8004ac6 <memset>
 8007a02:	e7f5      	b.n	80079f0 <_calloc_r+0x14>

08007a04 <rshift>:
 8007a04:	6903      	ldr	r3, [r0, #16]
 8007a06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007a12:	f100 0414 	add.w	r4, r0, #20
 8007a16:	dd45      	ble.n	8007aa4 <rshift+0xa0>
 8007a18:	f011 011f 	ands.w	r1, r1, #31
 8007a1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007a20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007a24:	d10c      	bne.n	8007a40 <rshift+0x3c>
 8007a26:	f100 0710 	add.w	r7, r0, #16
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	42b1      	cmp	r1, r6
 8007a2e:	d334      	bcc.n	8007a9a <rshift+0x96>
 8007a30:	1a9b      	subs	r3, r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	1eea      	subs	r2, r5, #3
 8007a36:	4296      	cmp	r6, r2
 8007a38:	bf38      	it	cc
 8007a3a:	2300      	movcc	r3, #0
 8007a3c:	4423      	add	r3, r4
 8007a3e:	e015      	b.n	8007a6c <rshift+0x68>
 8007a40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007a44:	f1c1 0820 	rsb	r8, r1, #32
 8007a48:	40cf      	lsrs	r7, r1
 8007a4a:	f105 0e04 	add.w	lr, r5, #4
 8007a4e:	46a1      	mov	r9, r4
 8007a50:	4576      	cmp	r6, lr
 8007a52:	46f4      	mov	ip, lr
 8007a54:	d815      	bhi.n	8007a82 <rshift+0x7e>
 8007a56:	1a9a      	subs	r2, r3, r2
 8007a58:	0092      	lsls	r2, r2, #2
 8007a5a:	3a04      	subs	r2, #4
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	42ae      	cmp	r6, r5
 8007a60:	bf38      	it	cc
 8007a62:	2200      	movcc	r2, #0
 8007a64:	18a3      	adds	r3, r4, r2
 8007a66:	50a7      	str	r7, [r4, r2]
 8007a68:	b107      	cbz	r7, 8007a6c <rshift+0x68>
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	1b1a      	subs	r2, r3, r4
 8007a6e:	42a3      	cmp	r3, r4
 8007a70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a74:	bf08      	it	eq
 8007a76:	2300      	moveq	r3, #0
 8007a78:	6102      	str	r2, [r0, #16]
 8007a7a:	bf08      	it	eq
 8007a7c:	6143      	streq	r3, [r0, #20]
 8007a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a82:	f8dc c000 	ldr.w	ip, [ip]
 8007a86:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a8a:	ea4c 0707 	orr.w	r7, ip, r7
 8007a8e:	f849 7b04 	str.w	r7, [r9], #4
 8007a92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a96:	40cf      	lsrs	r7, r1
 8007a98:	e7da      	b.n	8007a50 <rshift+0x4c>
 8007a9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a9e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007aa2:	e7c3      	b.n	8007a2c <rshift+0x28>
 8007aa4:	4623      	mov	r3, r4
 8007aa6:	e7e1      	b.n	8007a6c <rshift+0x68>

08007aa8 <__hexdig_fun>:
 8007aa8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007aac:	2b09      	cmp	r3, #9
 8007aae:	d802      	bhi.n	8007ab6 <__hexdig_fun+0xe>
 8007ab0:	3820      	subs	r0, #32
 8007ab2:	b2c0      	uxtb	r0, r0
 8007ab4:	4770      	bx	lr
 8007ab6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007aba:	2b05      	cmp	r3, #5
 8007abc:	d801      	bhi.n	8007ac2 <__hexdig_fun+0x1a>
 8007abe:	3847      	subs	r0, #71	@ 0x47
 8007ac0:	e7f7      	b.n	8007ab2 <__hexdig_fun+0xa>
 8007ac2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007ac6:	2b05      	cmp	r3, #5
 8007ac8:	d801      	bhi.n	8007ace <__hexdig_fun+0x26>
 8007aca:	3827      	subs	r0, #39	@ 0x27
 8007acc:	e7f1      	b.n	8007ab2 <__hexdig_fun+0xa>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	4770      	bx	lr
	...

08007ad4 <__gethex>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	468a      	mov	sl, r1
 8007adc:	9302      	str	r3, [sp, #8]
 8007ade:	680b      	ldr	r3, [r1, #0]
 8007ae0:	9001      	str	r0, [sp, #4]
 8007ae2:	4690      	mov	r8, r2
 8007ae4:	1c9c      	adds	r4, r3, #2
 8007ae6:	46a1      	mov	r9, r4
 8007ae8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007aec:	2830      	cmp	r0, #48	@ 0x30
 8007aee:	d0fa      	beq.n	8007ae6 <__gethex+0x12>
 8007af0:	eba9 0303 	sub.w	r3, r9, r3
 8007af4:	f1a3 0b02 	sub.w	fp, r3, #2
 8007af8:	f7ff ffd6 	bl	8007aa8 <__hexdig_fun>
 8007afc:	4605      	mov	r5, r0
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d168      	bne.n	8007bd4 <__gethex+0x100>
 8007b02:	49a0      	ldr	r1, [pc, #640]	@ (8007d84 <__gethex+0x2b0>)
 8007b04:	2201      	movs	r2, #1
 8007b06:	4648      	mov	r0, r9
 8007b08:	f7ff ff10 	bl	800792c <strncmp>
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d167      	bne.n	8007be2 <__gethex+0x10e>
 8007b12:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007b16:	4626      	mov	r6, r4
 8007b18:	f7ff ffc6 	bl	8007aa8 <__hexdig_fun>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d062      	beq.n	8007be6 <__gethex+0x112>
 8007b20:	4623      	mov	r3, r4
 8007b22:	7818      	ldrb	r0, [r3, #0]
 8007b24:	2830      	cmp	r0, #48	@ 0x30
 8007b26:	4699      	mov	r9, r3
 8007b28:	f103 0301 	add.w	r3, r3, #1
 8007b2c:	d0f9      	beq.n	8007b22 <__gethex+0x4e>
 8007b2e:	f7ff ffbb 	bl	8007aa8 <__hexdig_fun>
 8007b32:	fab0 f580 	clz	r5, r0
 8007b36:	096d      	lsrs	r5, r5, #5
 8007b38:	f04f 0b01 	mov.w	fp, #1
 8007b3c:	464a      	mov	r2, r9
 8007b3e:	4616      	mov	r6, r2
 8007b40:	3201      	adds	r2, #1
 8007b42:	7830      	ldrb	r0, [r6, #0]
 8007b44:	f7ff ffb0 	bl	8007aa8 <__hexdig_fun>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d1f8      	bne.n	8007b3e <__gethex+0x6a>
 8007b4c:	498d      	ldr	r1, [pc, #564]	@ (8007d84 <__gethex+0x2b0>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff feeb 	bl	800792c <strncmp>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d13f      	bne.n	8007bda <__gethex+0x106>
 8007b5a:	b944      	cbnz	r4, 8007b6e <__gethex+0x9a>
 8007b5c:	1c74      	adds	r4, r6, #1
 8007b5e:	4622      	mov	r2, r4
 8007b60:	4616      	mov	r6, r2
 8007b62:	3201      	adds	r2, #1
 8007b64:	7830      	ldrb	r0, [r6, #0]
 8007b66:	f7ff ff9f 	bl	8007aa8 <__hexdig_fun>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d1f8      	bne.n	8007b60 <__gethex+0x8c>
 8007b6e:	1ba4      	subs	r4, r4, r6
 8007b70:	00a7      	lsls	r7, r4, #2
 8007b72:	7833      	ldrb	r3, [r6, #0]
 8007b74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007b78:	2b50      	cmp	r3, #80	@ 0x50
 8007b7a:	d13e      	bne.n	8007bfa <__gethex+0x126>
 8007b7c:	7873      	ldrb	r3, [r6, #1]
 8007b7e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007b80:	d033      	beq.n	8007bea <__gethex+0x116>
 8007b82:	2b2d      	cmp	r3, #45	@ 0x2d
 8007b84:	d034      	beq.n	8007bf0 <__gethex+0x11c>
 8007b86:	1c71      	adds	r1, r6, #1
 8007b88:	2400      	movs	r4, #0
 8007b8a:	7808      	ldrb	r0, [r1, #0]
 8007b8c:	f7ff ff8c 	bl	8007aa8 <__hexdig_fun>
 8007b90:	1e43      	subs	r3, r0, #1
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b18      	cmp	r3, #24
 8007b96:	d830      	bhi.n	8007bfa <__gethex+0x126>
 8007b98:	f1a0 0210 	sub.w	r2, r0, #16
 8007b9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ba0:	f7ff ff82 	bl	8007aa8 <__hexdig_fun>
 8007ba4:	f100 3cff 	add.w	ip, r0, #4294967295
 8007ba8:	fa5f fc8c 	uxtb.w	ip, ip
 8007bac:	f1bc 0f18 	cmp.w	ip, #24
 8007bb0:	f04f 030a 	mov.w	r3, #10
 8007bb4:	d91e      	bls.n	8007bf4 <__gethex+0x120>
 8007bb6:	b104      	cbz	r4, 8007bba <__gethex+0xe6>
 8007bb8:	4252      	negs	r2, r2
 8007bba:	4417      	add	r7, r2
 8007bbc:	f8ca 1000 	str.w	r1, [sl]
 8007bc0:	b1ed      	cbz	r5, 8007bfe <__gethex+0x12a>
 8007bc2:	f1bb 0f00 	cmp.w	fp, #0
 8007bc6:	bf0c      	ite	eq
 8007bc8:	2506      	moveq	r5, #6
 8007bca:	2500      	movne	r5, #0
 8007bcc:	4628      	mov	r0, r5
 8007bce:	b005      	add	sp, #20
 8007bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd4:	2500      	movs	r5, #0
 8007bd6:	462c      	mov	r4, r5
 8007bd8:	e7b0      	b.n	8007b3c <__gethex+0x68>
 8007bda:	2c00      	cmp	r4, #0
 8007bdc:	d1c7      	bne.n	8007b6e <__gethex+0x9a>
 8007bde:	4627      	mov	r7, r4
 8007be0:	e7c7      	b.n	8007b72 <__gethex+0x9e>
 8007be2:	464e      	mov	r6, r9
 8007be4:	462f      	mov	r7, r5
 8007be6:	2501      	movs	r5, #1
 8007be8:	e7c3      	b.n	8007b72 <__gethex+0x9e>
 8007bea:	2400      	movs	r4, #0
 8007bec:	1cb1      	adds	r1, r6, #2
 8007bee:	e7cc      	b.n	8007b8a <__gethex+0xb6>
 8007bf0:	2401      	movs	r4, #1
 8007bf2:	e7fb      	b.n	8007bec <__gethex+0x118>
 8007bf4:	fb03 0002 	mla	r0, r3, r2, r0
 8007bf8:	e7ce      	b.n	8007b98 <__gethex+0xc4>
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	e7de      	b.n	8007bbc <__gethex+0xe8>
 8007bfe:	eba6 0309 	sub.w	r3, r6, r9
 8007c02:	3b01      	subs	r3, #1
 8007c04:	4629      	mov	r1, r5
 8007c06:	2b07      	cmp	r3, #7
 8007c08:	dc0a      	bgt.n	8007c20 <__gethex+0x14c>
 8007c0a:	9801      	ldr	r0, [sp, #4]
 8007c0c:	f7fd ff30 	bl	8005a70 <_Balloc>
 8007c10:	4604      	mov	r4, r0
 8007c12:	b940      	cbnz	r0, 8007c26 <__gethex+0x152>
 8007c14:	4b5c      	ldr	r3, [pc, #368]	@ (8007d88 <__gethex+0x2b4>)
 8007c16:	4602      	mov	r2, r0
 8007c18:	21e4      	movs	r1, #228	@ 0xe4
 8007c1a:	485c      	ldr	r0, [pc, #368]	@ (8007d8c <__gethex+0x2b8>)
 8007c1c:	f7ff fec0 	bl	80079a0 <__assert_func>
 8007c20:	3101      	adds	r1, #1
 8007c22:	105b      	asrs	r3, r3, #1
 8007c24:	e7ef      	b.n	8007c06 <__gethex+0x132>
 8007c26:	f100 0a14 	add.w	sl, r0, #20
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	4655      	mov	r5, sl
 8007c2e:	469b      	mov	fp, r3
 8007c30:	45b1      	cmp	r9, r6
 8007c32:	d337      	bcc.n	8007ca4 <__gethex+0x1d0>
 8007c34:	f845 bb04 	str.w	fp, [r5], #4
 8007c38:	eba5 050a 	sub.w	r5, r5, sl
 8007c3c:	10ad      	asrs	r5, r5, #2
 8007c3e:	6125      	str	r5, [r4, #16]
 8007c40:	4658      	mov	r0, fp
 8007c42:	f7fe f807 	bl	8005c54 <__hi0bits>
 8007c46:	016d      	lsls	r5, r5, #5
 8007c48:	f8d8 6000 	ldr.w	r6, [r8]
 8007c4c:	1a2d      	subs	r5, r5, r0
 8007c4e:	42b5      	cmp	r5, r6
 8007c50:	dd54      	ble.n	8007cfc <__gethex+0x228>
 8007c52:	1bad      	subs	r5, r5, r6
 8007c54:	4629      	mov	r1, r5
 8007c56:	4620      	mov	r0, r4
 8007c58:	f7fe fb9b 	bl	8006392 <__any_on>
 8007c5c:	4681      	mov	r9, r0
 8007c5e:	b178      	cbz	r0, 8007c80 <__gethex+0x1ac>
 8007c60:	1e6b      	subs	r3, r5, #1
 8007c62:	1159      	asrs	r1, r3, #5
 8007c64:	f003 021f 	and.w	r2, r3, #31
 8007c68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007c6c:	f04f 0901 	mov.w	r9, #1
 8007c70:	fa09 f202 	lsl.w	r2, r9, r2
 8007c74:	420a      	tst	r2, r1
 8007c76:	d003      	beq.n	8007c80 <__gethex+0x1ac>
 8007c78:	454b      	cmp	r3, r9
 8007c7a:	dc36      	bgt.n	8007cea <__gethex+0x216>
 8007c7c:	f04f 0902 	mov.w	r9, #2
 8007c80:	4629      	mov	r1, r5
 8007c82:	4620      	mov	r0, r4
 8007c84:	f7ff febe 	bl	8007a04 <rshift>
 8007c88:	442f      	add	r7, r5
 8007c8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c8e:	42bb      	cmp	r3, r7
 8007c90:	da42      	bge.n	8007d18 <__gethex+0x244>
 8007c92:	9801      	ldr	r0, [sp, #4]
 8007c94:	4621      	mov	r1, r4
 8007c96:	f7fd ff2b 	bl	8005af0 <_Bfree>
 8007c9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	25a3      	movs	r5, #163	@ 0xa3
 8007ca2:	e793      	b.n	8007bcc <__gethex+0xf8>
 8007ca4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007ca8:	2a2e      	cmp	r2, #46	@ 0x2e
 8007caa:	d012      	beq.n	8007cd2 <__gethex+0x1fe>
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d104      	bne.n	8007cba <__gethex+0x1e6>
 8007cb0:	f845 bb04 	str.w	fp, [r5], #4
 8007cb4:	f04f 0b00 	mov.w	fp, #0
 8007cb8:	465b      	mov	r3, fp
 8007cba:	7830      	ldrb	r0, [r6, #0]
 8007cbc:	9303      	str	r3, [sp, #12]
 8007cbe:	f7ff fef3 	bl	8007aa8 <__hexdig_fun>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	f000 000f 	and.w	r0, r0, #15
 8007cc8:	4098      	lsls	r0, r3
 8007cca:	ea4b 0b00 	orr.w	fp, fp, r0
 8007cce:	3304      	adds	r3, #4
 8007cd0:	e7ae      	b.n	8007c30 <__gethex+0x15c>
 8007cd2:	45b1      	cmp	r9, r6
 8007cd4:	d8ea      	bhi.n	8007cac <__gethex+0x1d8>
 8007cd6:	492b      	ldr	r1, [pc, #172]	@ (8007d84 <__gethex+0x2b0>)
 8007cd8:	9303      	str	r3, [sp, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff fe25 	bl	800792c <strncmp>
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d1e1      	bne.n	8007cac <__gethex+0x1d8>
 8007ce8:	e7a2      	b.n	8007c30 <__gethex+0x15c>
 8007cea:	1ea9      	subs	r1, r5, #2
 8007cec:	4620      	mov	r0, r4
 8007cee:	f7fe fb50 	bl	8006392 <__any_on>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d0c2      	beq.n	8007c7c <__gethex+0x1a8>
 8007cf6:	f04f 0903 	mov.w	r9, #3
 8007cfa:	e7c1      	b.n	8007c80 <__gethex+0x1ac>
 8007cfc:	da09      	bge.n	8007d12 <__gethex+0x23e>
 8007cfe:	1b75      	subs	r5, r6, r5
 8007d00:	4621      	mov	r1, r4
 8007d02:	9801      	ldr	r0, [sp, #4]
 8007d04:	462a      	mov	r2, r5
 8007d06:	f7fe f90b 	bl	8005f20 <__lshift>
 8007d0a:	1b7f      	subs	r7, r7, r5
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	f100 0a14 	add.w	sl, r0, #20
 8007d12:	f04f 0900 	mov.w	r9, #0
 8007d16:	e7b8      	b.n	8007c8a <__gethex+0x1b6>
 8007d18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007d1c:	42bd      	cmp	r5, r7
 8007d1e:	dd6f      	ble.n	8007e00 <__gethex+0x32c>
 8007d20:	1bed      	subs	r5, r5, r7
 8007d22:	42ae      	cmp	r6, r5
 8007d24:	dc34      	bgt.n	8007d90 <__gethex+0x2bc>
 8007d26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d022      	beq.n	8007d74 <__gethex+0x2a0>
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d024      	beq.n	8007d7c <__gethex+0x2a8>
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d115      	bne.n	8007d62 <__gethex+0x28e>
 8007d36:	42ae      	cmp	r6, r5
 8007d38:	d113      	bne.n	8007d62 <__gethex+0x28e>
 8007d3a:	2e01      	cmp	r6, #1
 8007d3c:	d10b      	bne.n	8007d56 <__gethex+0x282>
 8007d3e:	9a02      	ldr	r2, [sp, #8]
 8007d40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	2301      	movs	r3, #1
 8007d48:	6123      	str	r3, [r4, #16]
 8007d4a:	f8ca 3000 	str.w	r3, [sl]
 8007d4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d50:	2562      	movs	r5, #98	@ 0x62
 8007d52:	601c      	str	r4, [r3, #0]
 8007d54:	e73a      	b.n	8007bcc <__gethex+0xf8>
 8007d56:	1e71      	subs	r1, r6, #1
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f7fe fb1a 	bl	8006392 <__any_on>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d1ed      	bne.n	8007d3e <__gethex+0x26a>
 8007d62:	9801      	ldr	r0, [sp, #4]
 8007d64:	4621      	mov	r1, r4
 8007d66:	f7fd fec3 	bl	8005af0 <_Bfree>
 8007d6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	2550      	movs	r5, #80	@ 0x50
 8007d72:	e72b      	b.n	8007bcc <__gethex+0xf8>
 8007d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1f3      	bne.n	8007d62 <__gethex+0x28e>
 8007d7a:	e7e0      	b.n	8007d3e <__gethex+0x26a>
 8007d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1dd      	bne.n	8007d3e <__gethex+0x26a>
 8007d82:	e7ee      	b.n	8007d62 <__gethex+0x28e>
 8007d84:	080088a0 	.word	0x080088a0
 8007d88:	08008735 	.word	0x08008735
 8007d8c:	08008a4e 	.word	0x08008a4e
 8007d90:	1e6f      	subs	r7, r5, #1
 8007d92:	f1b9 0f00 	cmp.w	r9, #0
 8007d96:	d130      	bne.n	8007dfa <__gethex+0x326>
 8007d98:	b127      	cbz	r7, 8007da4 <__gethex+0x2d0>
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f7fe faf8 	bl	8006392 <__any_on>
 8007da2:	4681      	mov	r9, r0
 8007da4:	117a      	asrs	r2, r7, #5
 8007da6:	2301      	movs	r3, #1
 8007da8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007dac:	f007 071f 	and.w	r7, r7, #31
 8007db0:	40bb      	lsls	r3, r7
 8007db2:	4213      	tst	r3, r2
 8007db4:	4629      	mov	r1, r5
 8007db6:	4620      	mov	r0, r4
 8007db8:	bf18      	it	ne
 8007dba:	f049 0902 	orrne.w	r9, r9, #2
 8007dbe:	f7ff fe21 	bl	8007a04 <rshift>
 8007dc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007dc6:	1b76      	subs	r6, r6, r5
 8007dc8:	2502      	movs	r5, #2
 8007dca:	f1b9 0f00 	cmp.w	r9, #0
 8007dce:	d047      	beq.n	8007e60 <__gethex+0x38c>
 8007dd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d015      	beq.n	8007e04 <__gethex+0x330>
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d017      	beq.n	8007e0c <__gethex+0x338>
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d109      	bne.n	8007df4 <__gethex+0x320>
 8007de0:	f019 0f02 	tst.w	r9, #2
 8007de4:	d006      	beq.n	8007df4 <__gethex+0x320>
 8007de6:	f8da 3000 	ldr.w	r3, [sl]
 8007dea:	ea49 0903 	orr.w	r9, r9, r3
 8007dee:	f019 0f01 	tst.w	r9, #1
 8007df2:	d10e      	bne.n	8007e12 <__gethex+0x33e>
 8007df4:	f045 0510 	orr.w	r5, r5, #16
 8007df8:	e032      	b.n	8007e60 <__gethex+0x38c>
 8007dfa:	f04f 0901 	mov.w	r9, #1
 8007dfe:	e7d1      	b.n	8007da4 <__gethex+0x2d0>
 8007e00:	2501      	movs	r5, #1
 8007e02:	e7e2      	b.n	8007dca <__gethex+0x2f6>
 8007e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e06:	f1c3 0301 	rsb	r3, r3, #1
 8007e0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f0      	beq.n	8007df4 <__gethex+0x320>
 8007e12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e16:	f104 0314 	add.w	r3, r4, #20
 8007e1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e22:	f04f 0c00 	mov.w	ip, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007e30:	d01b      	beq.n	8007e6a <__gethex+0x396>
 8007e32:	3201      	adds	r2, #1
 8007e34:	6002      	str	r2, [r0, #0]
 8007e36:	2d02      	cmp	r5, #2
 8007e38:	f104 0314 	add.w	r3, r4, #20
 8007e3c:	d13c      	bne.n	8007eb8 <__gethex+0x3e4>
 8007e3e:	f8d8 2000 	ldr.w	r2, [r8]
 8007e42:	3a01      	subs	r2, #1
 8007e44:	42b2      	cmp	r2, r6
 8007e46:	d109      	bne.n	8007e5c <__gethex+0x388>
 8007e48:	1171      	asrs	r1, r6, #5
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e50:	f006 061f 	and.w	r6, r6, #31
 8007e54:	fa02 f606 	lsl.w	r6, r2, r6
 8007e58:	421e      	tst	r6, r3
 8007e5a:	d13a      	bne.n	8007ed2 <__gethex+0x3fe>
 8007e5c:	f045 0520 	orr.w	r5, r5, #32
 8007e60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e62:	601c      	str	r4, [r3, #0]
 8007e64:	9b02      	ldr	r3, [sp, #8]
 8007e66:	601f      	str	r7, [r3, #0]
 8007e68:	e6b0      	b.n	8007bcc <__gethex+0xf8>
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e70:	d8d9      	bhi.n	8007e26 <__gethex+0x352>
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	459b      	cmp	fp, r3
 8007e76:	db17      	blt.n	8007ea8 <__gethex+0x3d4>
 8007e78:	6861      	ldr	r1, [r4, #4]
 8007e7a:	9801      	ldr	r0, [sp, #4]
 8007e7c:	3101      	adds	r1, #1
 8007e7e:	f7fd fdf7 	bl	8005a70 <_Balloc>
 8007e82:	4681      	mov	r9, r0
 8007e84:	b918      	cbnz	r0, 8007e8e <__gethex+0x3ba>
 8007e86:	4b1a      	ldr	r3, [pc, #104]	@ (8007ef0 <__gethex+0x41c>)
 8007e88:	4602      	mov	r2, r0
 8007e8a:	2184      	movs	r1, #132	@ 0x84
 8007e8c:	e6c5      	b.n	8007c1a <__gethex+0x146>
 8007e8e:	6922      	ldr	r2, [r4, #16]
 8007e90:	3202      	adds	r2, #2
 8007e92:	f104 010c 	add.w	r1, r4, #12
 8007e96:	0092      	lsls	r2, r2, #2
 8007e98:	300c      	adds	r0, #12
 8007e9a:	f7ff fd69 	bl	8007970 <memcpy>
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	9801      	ldr	r0, [sp, #4]
 8007ea2:	f7fd fe25 	bl	8005af0 <_Bfree>
 8007ea6:	464c      	mov	r4, r9
 8007ea8:	6923      	ldr	r3, [r4, #16]
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007eb0:	6122      	str	r2, [r4, #16]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	615a      	str	r2, [r3, #20]
 8007eb6:	e7be      	b.n	8007e36 <__gethex+0x362>
 8007eb8:	6922      	ldr	r2, [r4, #16]
 8007eba:	455a      	cmp	r2, fp
 8007ebc:	dd0b      	ble.n	8007ed6 <__gethex+0x402>
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f7ff fd9f 	bl	8007a04 <rshift>
 8007ec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007eca:	3701      	adds	r7, #1
 8007ecc:	42bb      	cmp	r3, r7
 8007ece:	f6ff aee0 	blt.w	8007c92 <__gethex+0x1be>
 8007ed2:	2501      	movs	r5, #1
 8007ed4:	e7c2      	b.n	8007e5c <__gethex+0x388>
 8007ed6:	f016 061f 	ands.w	r6, r6, #31
 8007eda:	d0fa      	beq.n	8007ed2 <__gethex+0x3fe>
 8007edc:	4453      	add	r3, sl
 8007ede:	f1c6 0620 	rsb	r6, r6, #32
 8007ee2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007ee6:	f7fd feb5 	bl	8005c54 <__hi0bits>
 8007eea:	42b0      	cmp	r0, r6
 8007eec:	dbe7      	blt.n	8007ebe <__gethex+0x3ea>
 8007eee:	e7f0      	b.n	8007ed2 <__gethex+0x3fe>
 8007ef0:	08008735 	.word	0x08008735

08007ef4 <L_shift>:
 8007ef4:	f1c2 0208 	rsb	r2, r2, #8
 8007ef8:	0092      	lsls	r2, r2, #2
 8007efa:	b570      	push	{r4, r5, r6, lr}
 8007efc:	f1c2 0620 	rsb	r6, r2, #32
 8007f00:	6843      	ldr	r3, [r0, #4]
 8007f02:	6804      	ldr	r4, [r0, #0]
 8007f04:	fa03 f506 	lsl.w	r5, r3, r6
 8007f08:	432c      	orrs	r4, r5
 8007f0a:	40d3      	lsrs	r3, r2
 8007f0c:	6004      	str	r4, [r0, #0]
 8007f0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f12:	4288      	cmp	r0, r1
 8007f14:	d3f4      	bcc.n	8007f00 <L_shift+0xc>
 8007f16:	bd70      	pop	{r4, r5, r6, pc}

08007f18 <__match>:
 8007f18:	b530      	push	{r4, r5, lr}
 8007f1a:	6803      	ldr	r3, [r0, #0]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f22:	b914      	cbnz	r4, 8007f2a <__match+0x12>
 8007f24:	6003      	str	r3, [r0, #0]
 8007f26:	2001      	movs	r0, #1
 8007f28:	bd30      	pop	{r4, r5, pc}
 8007f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007f32:	2d19      	cmp	r5, #25
 8007f34:	bf98      	it	ls
 8007f36:	3220      	addls	r2, #32
 8007f38:	42a2      	cmp	r2, r4
 8007f3a:	d0f0      	beq.n	8007f1e <__match+0x6>
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e7f3      	b.n	8007f28 <__match+0x10>

08007f40 <__hexnan>:
 8007f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	680b      	ldr	r3, [r1, #0]
 8007f46:	6801      	ldr	r1, [r0, #0]
 8007f48:	115e      	asrs	r6, r3, #5
 8007f4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f4e:	f013 031f 	ands.w	r3, r3, #31
 8007f52:	b087      	sub	sp, #28
 8007f54:	bf18      	it	ne
 8007f56:	3604      	addne	r6, #4
 8007f58:	2500      	movs	r5, #0
 8007f5a:	1f37      	subs	r7, r6, #4
 8007f5c:	4682      	mov	sl, r0
 8007f5e:	4690      	mov	r8, r2
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f66:	46b9      	mov	r9, r7
 8007f68:	463c      	mov	r4, r7
 8007f6a:	9502      	str	r5, [sp, #8]
 8007f6c:	46ab      	mov	fp, r5
 8007f6e:	784a      	ldrb	r2, [r1, #1]
 8007f70:	1c4b      	adds	r3, r1, #1
 8007f72:	9303      	str	r3, [sp, #12]
 8007f74:	b342      	cbz	r2, 8007fc8 <__hexnan+0x88>
 8007f76:	4610      	mov	r0, r2
 8007f78:	9105      	str	r1, [sp, #20]
 8007f7a:	9204      	str	r2, [sp, #16]
 8007f7c:	f7ff fd94 	bl	8007aa8 <__hexdig_fun>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d151      	bne.n	8008028 <__hexnan+0xe8>
 8007f84:	9a04      	ldr	r2, [sp, #16]
 8007f86:	9905      	ldr	r1, [sp, #20]
 8007f88:	2a20      	cmp	r2, #32
 8007f8a:	d818      	bhi.n	8007fbe <__hexnan+0x7e>
 8007f8c:	9b02      	ldr	r3, [sp, #8]
 8007f8e:	459b      	cmp	fp, r3
 8007f90:	dd13      	ble.n	8007fba <__hexnan+0x7a>
 8007f92:	454c      	cmp	r4, r9
 8007f94:	d206      	bcs.n	8007fa4 <__hexnan+0x64>
 8007f96:	2d07      	cmp	r5, #7
 8007f98:	dc04      	bgt.n	8007fa4 <__hexnan+0x64>
 8007f9a:	462a      	mov	r2, r5
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f7ff ffa8 	bl	8007ef4 <L_shift>
 8007fa4:	4544      	cmp	r4, r8
 8007fa6:	d952      	bls.n	800804e <__hexnan+0x10e>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f1a4 0904 	sub.w	r9, r4, #4
 8007fae:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fb2:	f8cd b008 	str.w	fp, [sp, #8]
 8007fb6:	464c      	mov	r4, r9
 8007fb8:	461d      	mov	r5, r3
 8007fba:	9903      	ldr	r1, [sp, #12]
 8007fbc:	e7d7      	b.n	8007f6e <__hexnan+0x2e>
 8007fbe:	2a29      	cmp	r2, #41	@ 0x29
 8007fc0:	d157      	bne.n	8008072 <__hexnan+0x132>
 8007fc2:	3102      	adds	r1, #2
 8007fc4:	f8ca 1000 	str.w	r1, [sl]
 8007fc8:	f1bb 0f00 	cmp.w	fp, #0
 8007fcc:	d051      	beq.n	8008072 <__hexnan+0x132>
 8007fce:	454c      	cmp	r4, r9
 8007fd0:	d206      	bcs.n	8007fe0 <__hexnan+0xa0>
 8007fd2:	2d07      	cmp	r5, #7
 8007fd4:	dc04      	bgt.n	8007fe0 <__hexnan+0xa0>
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	4649      	mov	r1, r9
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f7ff ff8a 	bl	8007ef4 <L_shift>
 8007fe0:	4544      	cmp	r4, r8
 8007fe2:	d936      	bls.n	8008052 <__hexnan+0x112>
 8007fe4:	f1a8 0204 	sub.w	r2, r8, #4
 8007fe8:	4623      	mov	r3, r4
 8007fea:	f853 1b04 	ldr.w	r1, [r3], #4
 8007fee:	f842 1f04 	str.w	r1, [r2, #4]!
 8007ff2:	429f      	cmp	r7, r3
 8007ff4:	d2f9      	bcs.n	8007fea <__hexnan+0xaa>
 8007ff6:	1b3b      	subs	r3, r7, r4
 8007ff8:	f023 0303 	bic.w	r3, r3, #3
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	3401      	adds	r4, #1
 8008000:	3e03      	subs	r6, #3
 8008002:	42b4      	cmp	r4, r6
 8008004:	bf88      	it	hi
 8008006:	2304      	movhi	r3, #4
 8008008:	4443      	add	r3, r8
 800800a:	2200      	movs	r2, #0
 800800c:	f843 2b04 	str.w	r2, [r3], #4
 8008010:	429f      	cmp	r7, r3
 8008012:	d2fb      	bcs.n	800800c <__hexnan+0xcc>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	b91b      	cbnz	r3, 8008020 <__hexnan+0xe0>
 8008018:	4547      	cmp	r7, r8
 800801a:	d128      	bne.n	800806e <__hexnan+0x12e>
 800801c:	2301      	movs	r3, #1
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	2005      	movs	r0, #5
 8008022:	b007      	add	sp, #28
 8008024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008028:	3501      	adds	r5, #1
 800802a:	2d08      	cmp	r5, #8
 800802c:	f10b 0b01 	add.w	fp, fp, #1
 8008030:	dd06      	ble.n	8008040 <__hexnan+0x100>
 8008032:	4544      	cmp	r4, r8
 8008034:	d9c1      	bls.n	8007fba <__hexnan+0x7a>
 8008036:	2300      	movs	r3, #0
 8008038:	f844 3c04 	str.w	r3, [r4, #-4]
 800803c:	2501      	movs	r5, #1
 800803e:	3c04      	subs	r4, #4
 8008040:	6822      	ldr	r2, [r4, #0]
 8008042:	f000 000f 	and.w	r0, r0, #15
 8008046:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800804a:	6020      	str	r0, [r4, #0]
 800804c:	e7b5      	b.n	8007fba <__hexnan+0x7a>
 800804e:	2508      	movs	r5, #8
 8008050:	e7b3      	b.n	8007fba <__hexnan+0x7a>
 8008052:	9b01      	ldr	r3, [sp, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0dd      	beq.n	8008014 <__hexnan+0xd4>
 8008058:	f1c3 0320 	rsb	r3, r3, #32
 800805c:	f04f 32ff 	mov.w	r2, #4294967295
 8008060:	40da      	lsrs	r2, r3
 8008062:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008066:	4013      	ands	r3, r2
 8008068:	f846 3c04 	str.w	r3, [r6, #-4]
 800806c:	e7d2      	b.n	8008014 <__hexnan+0xd4>
 800806e:	3f04      	subs	r7, #4
 8008070:	e7d0      	b.n	8008014 <__hexnan+0xd4>
 8008072:	2004      	movs	r0, #4
 8008074:	e7d5      	b.n	8008022 <__hexnan+0xe2>

08008076 <__ascii_mbtowc>:
 8008076:	b082      	sub	sp, #8
 8008078:	b901      	cbnz	r1, 800807c <__ascii_mbtowc+0x6>
 800807a:	a901      	add	r1, sp, #4
 800807c:	b142      	cbz	r2, 8008090 <__ascii_mbtowc+0x1a>
 800807e:	b14b      	cbz	r3, 8008094 <__ascii_mbtowc+0x1e>
 8008080:	7813      	ldrb	r3, [r2, #0]
 8008082:	600b      	str	r3, [r1, #0]
 8008084:	7812      	ldrb	r2, [r2, #0]
 8008086:	1e10      	subs	r0, r2, #0
 8008088:	bf18      	it	ne
 800808a:	2001      	movne	r0, #1
 800808c:	b002      	add	sp, #8
 800808e:	4770      	bx	lr
 8008090:	4610      	mov	r0, r2
 8008092:	e7fb      	b.n	800808c <__ascii_mbtowc+0x16>
 8008094:	f06f 0001 	mvn.w	r0, #1
 8008098:	e7f8      	b.n	800808c <__ascii_mbtowc+0x16>

0800809a <_realloc_r>:
 800809a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800809e:	4680      	mov	r8, r0
 80080a0:	4615      	mov	r5, r2
 80080a2:	460c      	mov	r4, r1
 80080a4:	b921      	cbnz	r1, 80080b0 <_realloc_r+0x16>
 80080a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080aa:	4611      	mov	r1, r2
 80080ac:	f7fd bc54 	b.w	8005958 <_malloc_r>
 80080b0:	b92a      	cbnz	r2, 80080be <_realloc_r+0x24>
 80080b2:	f7fd fbdd 	bl	8005870 <_free_r>
 80080b6:	2400      	movs	r4, #0
 80080b8:	4620      	mov	r0, r4
 80080ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080be:	f000 f8c4 	bl	800824a <_malloc_usable_size_r>
 80080c2:	4285      	cmp	r5, r0
 80080c4:	4606      	mov	r6, r0
 80080c6:	d802      	bhi.n	80080ce <_realloc_r+0x34>
 80080c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080cc:	d8f4      	bhi.n	80080b8 <_realloc_r+0x1e>
 80080ce:	4629      	mov	r1, r5
 80080d0:	4640      	mov	r0, r8
 80080d2:	f7fd fc41 	bl	8005958 <_malloc_r>
 80080d6:	4607      	mov	r7, r0
 80080d8:	2800      	cmp	r0, #0
 80080da:	d0ec      	beq.n	80080b6 <_realloc_r+0x1c>
 80080dc:	42b5      	cmp	r5, r6
 80080de:	462a      	mov	r2, r5
 80080e0:	4621      	mov	r1, r4
 80080e2:	bf28      	it	cs
 80080e4:	4632      	movcs	r2, r6
 80080e6:	f7ff fc43 	bl	8007970 <memcpy>
 80080ea:	4621      	mov	r1, r4
 80080ec:	4640      	mov	r0, r8
 80080ee:	f7fd fbbf 	bl	8005870 <_free_r>
 80080f2:	463c      	mov	r4, r7
 80080f4:	e7e0      	b.n	80080b8 <_realloc_r+0x1e>

080080f6 <__ascii_wctomb>:
 80080f6:	4603      	mov	r3, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	b141      	cbz	r1, 800810e <__ascii_wctomb+0x18>
 80080fc:	2aff      	cmp	r2, #255	@ 0xff
 80080fe:	d904      	bls.n	800810a <__ascii_wctomb+0x14>
 8008100:	228a      	movs	r2, #138	@ 0x8a
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	4770      	bx	lr
 800810a:	700a      	strb	r2, [r1, #0]
 800810c:	2001      	movs	r0, #1
 800810e:	4770      	bx	lr

08008110 <fiprintf>:
 8008110:	b40e      	push	{r1, r2, r3}
 8008112:	b503      	push	{r0, r1, lr}
 8008114:	4601      	mov	r1, r0
 8008116:	ab03      	add	r3, sp, #12
 8008118:	4805      	ldr	r0, [pc, #20]	@ (8008130 <fiprintf+0x20>)
 800811a:	f853 2b04 	ldr.w	r2, [r3], #4
 800811e:	6800      	ldr	r0, [r0, #0]
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	f7ff f95d 	bl	80073e0 <_vfiprintf_r>
 8008126:	b002      	add	sp, #8
 8008128:	f85d eb04 	ldr.w	lr, [sp], #4
 800812c:	b003      	add	sp, #12
 800812e:	4770      	bx	lr
 8008130:	20000018 	.word	0x20000018

08008134 <__swhatbuf_r>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	460c      	mov	r4, r1
 8008138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813c:	2900      	cmp	r1, #0
 800813e:	b096      	sub	sp, #88	@ 0x58
 8008140:	4615      	mov	r5, r2
 8008142:	461e      	mov	r6, r3
 8008144:	da0d      	bge.n	8008162 <__swhatbuf_r+0x2e>
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800814c:	f04f 0100 	mov.w	r1, #0
 8008150:	bf14      	ite	ne
 8008152:	2340      	movne	r3, #64	@ 0x40
 8008154:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008158:	2000      	movs	r0, #0
 800815a:	6031      	str	r1, [r6, #0]
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	b016      	add	sp, #88	@ 0x58
 8008160:	bd70      	pop	{r4, r5, r6, pc}
 8008162:	466a      	mov	r2, sp
 8008164:	f000 f848 	bl	80081f8 <_fstat_r>
 8008168:	2800      	cmp	r0, #0
 800816a:	dbec      	blt.n	8008146 <__swhatbuf_r+0x12>
 800816c:	9901      	ldr	r1, [sp, #4]
 800816e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008172:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008176:	4259      	negs	r1, r3
 8008178:	4159      	adcs	r1, r3
 800817a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800817e:	e7eb      	b.n	8008158 <__swhatbuf_r+0x24>

08008180 <__smakebuf_r>:
 8008180:	898b      	ldrh	r3, [r1, #12]
 8008182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008184:	079d      	lsls	r5, r3, #30
 8008186:	4606      	mov	r6, r0
 8008188:	460c      	mov	r4, r1
 800818a:	d507      	bpl.n	800819c <__smakebuf_r+0x1c>
 800818c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	6123      	str	r3, [r4, #16]
 8008194:	2301      	movs	r3, #1
 8008196:	6163      	str	r3, [r4, #20]
 8008198:	b003      	add	sp, #12
 800819a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800819c:	ab01      	add	r3, sp, #4
 800819e:	466a      	mov	r2, sp
 80081a0:	f7ff ffc8 	bl	8008134 <__swhatbuf_r>
 80081a4:	9f00      	ldr	r7, [sp, #0]
 80081a6:	4605      	mov	r5, r0
 80081a8:	4639      	mov	r1, r7
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7fd fbd4 	bl	8005958 <_malloc_r>
 80081b0:	b948      	cbnz	r0, 80081c6 <__smakebuf_r+0x46>
 80081b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b6:	059a      	lsls	r2, r3, #22
 80081b8:	d4ee      	bmi.n	8008198 <__smakebuf_r+0x18>
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	f043 0302 	orr.w	r3, r3, #2
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	e7e2      	b.n	800818c <__smakebuf_r+0xc>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	6020      	str	r0, [r4, #0]
 80081ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	9b01      	ldr	r3, [sp, #4]
 80081d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081d6:	b15b      	cbz	r3, 80081f0 <__smakebuf_r+0x70>
 80081d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081dc:	4630      	mov	r0, r6
 80081de:	f000 f81d 	bl	800821c <_isatty_r>
 80081e2:	b128      	cbz	r0, 80081f0 <__smakebuf_r+0x70>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	f023 0303 	bic.w	r3, r3, #3
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	81a3      	strh	r3, [r4, #12]
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	431d      	orrs	r5, r3
 80081f4:	81a5      	strh	r5, [r4, #12]
 80081f6:	e7cf      	b.n	8008198 <__smakebuf_r+0x18>

080081f8 <_fstat_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	@ (8008218 <_fstat_r+0x20>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	f7fa fe42 	bl	8002e8e <_fstat>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	d102      	bne.n	8008214 <_fstat_r+0x1c>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	b103      	cbz	r3, 8008214 <_fstat_r+0x1c>
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	bf00      	nop
 8008218:	20000688 	.word	0x20000688

0800821c <_isatty_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d06      	ldr	r5, [pc, #24]	@ (8008238 <_isatty_r+0x1c>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7fa fe41 	bl	8002eae <_isatty>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_isatty_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_isatty_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20000688 	.word	0x20000688

0800823c <abort>:
 800823c:	b508      	push	{r3, lr}
 800823e:	2006      	movs	r0, #6
 8008240:	f000 f834 	bl	80082ac <raise>
 8008244:	2001      	movs	r0, #1
 8008246:	f7fa fdd2 	bl	8002dee <_exit>

0800824a <_malloc_usable_size_r>:
 800824a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824e:	1f18      	subs	r0, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	bfbc      	itt	lt
 8008254:	580b      	ldrlt	r3, [r1, r0]
 8008256:	18c0      	addlt	r0, r0, r3
 8008258:	4770      	bx	lr

0800825a <_raise_r>:
 800825a:	291f      	cmp	r1, #31
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4605      	mov	r5, r0
 8008260:	460c      	mov	r4, r1
 8008262:	d904      	bls.n	800826e <_raise_r+0x14>
 8008264:	2316      	movs	r3, #22
 8008266:	6003      	str	r3, [r0, #0]
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	bd38      	pop	{r3, r4, r5, pc}
 800826e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008270:	b112      	cbz	r2, 8008278 <_raise_r+0x1e>
 8008272:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008276:	b94b      	cbnz	r3, 800828c <_raise_r+0x32>
 8008278:	4628      	mov	r0, r5
 800827a:	f000 f831 	bl	80082e0 <_getpid_r>
 800827e:	4622      	mov	r2, r4
 8008280:	4601      	mov	r1, r0
 8008282:	4628      	mov	r0, r5
 8008284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008288:	f000 b818 	b.w	80082bc <_kill_r>
 800828c:	2b01      	cmp	r3, #1
 800828e:	d00a      	beq.n	80082a6 <_raise_r+0x4c>
 8008290:	1c59      	adds	r1, r3, #1
 8008292:	d103      	bne.n	800829c <_raise_r+0x42>
 8008294:	2316      	movs	r3, #22
 8008296:	6003      	str	r3, [r0, #0]
 8008298:	2001      	movs	r0, #1
 800829a:	e7e7      	b.n	800826c <_raise_r+0x12>
 800829c:	2100      	movs	r1, #0
 800829e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082a2:	4620      	mov	r0, r4
 80082a4:	4798      	blx	r3
 80082a6:	2000      	movs	r0, #0
 80082a8:	e7e0      	b.n	800826c <_raise_r+0x12>
	...

080082ac <raise>:
 80082ac:	4b02      	ldr	r3, [pc, #8]	@ (80082b8 <raise+0xc>)
 80082ae:	4601      	mov	r1, r0
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f7ff bfd2 	b.w	800825a <_raise_r>
 80082b6:	bf00      	nop
 80082b8:	20000018 	.word	0x20000018

080082bc <_kill_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	@ (80082dc <_kill_r+0x20>)
 80082c0:	2300      	movs	r3, #0
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	f7fa fd80 	bl	8002dce <_kill>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d102      	bne.n	80082d8 <_kill_r+0x1c>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	b103      	cbz	r3, 80082d8 <_kill_r+0x1c>
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	bf00      	nop
 80082dc:	20000688 	.word	0x20000688

080082e0 <_getpid_r>:
 80082e0:	f7fa bd6d 	b.w	8002dbe <_getpid>

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
